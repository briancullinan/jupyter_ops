"use strict";
// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/cobol85/Cobol85.g4 by ANTLR 4.7.3-SNAPSHOT
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ATN_1 = require("antlr4ts/atn/ATN");
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var NoViableAltException_1 = require("antlr4ts/NoViableAltException");
var Parser_1 = require("antlr4ts/Parser");
var ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
var ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
var RecognitionException_1 = require("antlr4ts/RecognitionException");
var Token_1 = require("antlr4ts/Token");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var Cobol85Parser = /** @class */ (function (_super) {
    __extends(Cobol85Parser, _super);
    function Cobol85Parser(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new ParserATNSimulator_1.ParserATNSimulator(Cobol85Parser._ATN, _this);
        return _this;
    }
    Object.defineProperty(Cobol85Parser.prototype, "vocabulary", {
        // @Override
        // @NotNull
        get: function () {
            return Cobol85Parser.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cobol85Parser.prototype, "grammarFileName", {
        // tslint:enable:no-trailing-whitespace
        // @Override
        get: function () { return "Cobol85.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cobol85Parser.prototype, "ruleNames", {
        // @Override
        get: function () { return Cobol85Parser.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cobol85Parser.prototype, "serializedATN", {
        // @Override
        get: function () { return Cobol85Parser._serializedATN; },
        enumerable: true,
        configurable: true
    });
    // @RuleVersion(0)
    Cobol85Parser.prototype.startRule = function () {
        var _localctx = new StartRuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, Cobol85Parser.RULE_startRule);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1190;
                this.compilationUnit();
                this.state = 1191;
                this.match(Cobol85Parser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.compilationUnit = function () {
        var _localctx = new CompilationUnitContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, Cobol85Parser.RULE_compilationUnit);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1194;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1193;
                            this.programUnit();
                        }
                    }
                    this.state = 1196;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === Cobol85Parser.ID || _la === Cobol85Parser.IDENTIFICATION);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.programUnit = function () {
        var _localctx = new ProgramUnitContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, Cobol85Parser.RULE_programUnit);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1198;
                this.identificationDivision();
                this.state = 1200;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ENVIRONMENT) {
                    {
                        this.state = 1199;
                        this.environmentDivision();
                    }
                }
                this.state = 1203;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DATA) {
                    {
                        this.state = 1202;
                        this.dataDivision();
                    }
                }
                this.state = 1206;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.PROCEDURE) {
                    {
                        this.state = 1205;
                        this.procedureDivision();
                    }
                }
                this.state = 1211;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 4, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1208;
                                this.programUnit();
                            }
                        }
                    }
                    this.state = 1213;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 4, this._ctx);
                }
                this.state = 1215;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 5, this._ctx)) {
                    case 1:
                        {
                            this.state = 1214;
                            this.endProgramStatement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.endProgramStatement = function () {
        var _localctx = new EndProgramStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, Cobol85Parser.RULE_endProgramStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1217;
                this.match(Cobol85Parser.END);
                this.state = 1218;
                this.match(Cobol85Parser.PROGRAM);
                this.state = 1219;
                this.programName();
                this.state = 1220;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.identificationDivision = function () {
        var _localctx = new IdentificationDivisionContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, Cobol85Parser.RULE_identificationDivision);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1222;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.ID || _la === Cobol85Parser.IDENTIFICATION)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1223;
                this.match(Cobol85Parser.DIVISION);
                this.state = 1224;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1225;
                this.programIdParagraph();
                this.state = 1229;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.AUTHOR || _la === Cobol85Parser.DATE_COMPILED || _la === Cobol85Parser.DATE_WRITTEN || _la === Cobol85Parser.INSTALLATION || _la === Cobol85Parser.REMARKS || _la === Cobol85Parser.SECURITY) {
                    {
                        {
                            this.state = 1226;
                            this.identificationDivisionBody();
                        }
                    }
                    this.state = 1231;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.identificationDivisionBody = function () {
        var _localctx = new IdentificationDivisionBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, Cobol85Parser.RULE_identificationDivisionBody);
        try {
            this.state = 1238;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.AUTHOR:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1232;
                        this.authorParagraph();
                    }
                    break;
                case Cobol85Parser.INSTALLATION:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1233;
                        this.installationParagraph();
                    }
                    break;
                case Cobol85Parser.DATE_WRITTEN:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1234;
                        this.dateWrittenParagraph();
                    }
                    break;
                case Cobol85Parser.DATE_COMPILED:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1235;
                        this.dateCompiledParagraph();
                    }
                    break;
                case Cobol85Parser.SECURITY:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1236;
                        this.securityParagraph();
                    }
                    break;
                case Cobol85Parser.REMARKS:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1237;
                        this.remarksParagraph();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.programIdParagraph = function () {
        var _localctx = new ProgramIdParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, Cobol85Parser.RULE_programIdParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1240;
                this.match(Cobol85Parser.PROGRAM_ID);
                this.state = 1241;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1242;
                this.programName();
                this.state = 1250;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMMON || _la === Cobol85Parser.DEFINITION || ((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (Cobol85Parser.INITIAL - 243)) | (1 << (Cobol85Parser.IS - 243)) | (1 << (Cobol85Parser.LIBRARY - 243)))) !== 0) || _la === Cobol85Parser.RECURSIVE) {
                    {
                        this.state = 1244;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 1243;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                        this.state = 1246;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.COMMON || _la === Cobol85Parser.DEFINITION || _la === Cobol85Parser.INITIAL || _la === Cobol85Parser.LIBRARY || _la === Cobol85Parser.RECURSIVE)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1248;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.PROGRAM) {
                            {
                                this.state = 1247;
                                this.match(Cobol85Parser.PROGRAM);
                            }
                        }
                    }
                }
                this.state = 1253;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DOT_FS) {
                    {
                        this.state = 1252;
                        this.match(Cobol85Parser.DOT_FS);
                    }
                }
                this.state = 1256;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMMENTENTRYLINE) {
                    {
                        this.state = 1255;
                        this.commentEntry();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.authorParagraph = function () {
        var _localctx = new AuthorParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, Cobol85Parser.RULE_authorParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1258;
                this.match(Cobol85Parser.AUTHOR);
                this.state = 1259;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1261;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMMENTENTRYLINE) {
                    {
                        this.state = 1260;
                        this.commentEntry();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.installationParagraph = function () {
        var _localctx = new InstallationParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, Cobol85Parser.RULE_installationParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1263;
                this.match(Cobol85Parser.INSTALLATION);
                this.state = 1264;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1266;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMMENTENTRYLINE) {
                    {
                        this.state = 1265;
                        this.commentEntry();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dateWrittenParagraph = function () {
        var _localctx = new DateWrittenParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, Cobol85Parser.RULE_dateWrittenParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1268;
                this.match(Cobol85Parser.DATE_WRITTEN);
                this.state = 1269;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1271;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMMENTENTRYLINE) {
                    {
                        this.state = 1270;
                        this.commentEntry();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dateCompiledParagraph = function () {
        var _localctx = new DateCompiledParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, Cobol85Parser.RULE_dateCompiledParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1273;
                this.match(Cobol85Parser.DATE_COMPILED);
                this.state = 1274;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMMENTENTRYLINE) {
                    {
                        this.state = 1275;
                        this.commentEntry();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.securityParagraph = function () {
        var _localctx = new SecurityParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, Cobol85Parser.RULE_securityParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1278;
                this.match(Cobol85Parser.SECURITY);
                this.state = 1279;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1281;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMMENTENTRYLINE) {
                    {
                        this.state = 1280;
                        this.commentEntry();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.remarksParagraph = function () {
        var _localctx = new RemarksParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, Cobol85Parser.RULE_remarksParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1283;
                this.match(Cobol85Parser.REMARKS);
                this.state = 1284;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1286;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMMENTENTRYLINE) {
                    {
                        this.state = 1285;
                        this.commentEntry();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.environmentDivision = function () {
        var _localctx = new EnvironmentDivisionContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, Cobol85Parser.RULE_environmentDivision);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1288;
                this.match(Cobol85Parser.ENVIRONMENT);
                this.state = 1289;
                this.match(Cobol85Parser.DIVISION);
                this.state = 1290;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1294;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.CONFIGURATION || _la === Cobol85Parser.INPUT_OUTPUT || _la === Cobol85Parser.SPECIAL_NAMES) {
                    {
                        {
                            this.state = 1291;
                            this.environmentDivisionBody();
                        }
                    }
                    this.state = 1296;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.environmentDivisionBody = function () {
        var _localctx = new EnvironmentDivisionBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, Cobol85Parser.RULE_environmentDivisionBody);
        try {
            this.state = 1300;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.CONFIGURATION:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1297;
                        this.configurationSection();
                    }
                    break;
                case Cobol85Parser.SPECIAL_NAMES:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1298;
                        this.specialNamesParagraph();
                    }
                    break;
                case Cobol85Parser.INPUT_OUTPUT:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1299;
                        this.inputOutputSection();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.configurationSection = function () {
        var _localctx = new ConfigurationSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, Cobol85Parser.RULE_configurationSection);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1302;
                this.match(Cobol85Parser.CONFIGURATION);
                this.state = 1303;
                this.match(Cobol85Parser.SECTION);
                this.state = 1304;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1308;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1305;
                                this.configurationSectionParagraph();
                            }
                        }
                    }
                    this.state = 1310;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.configurationSectionParagraph = function () {
        var _localctx = new ConfigurationSectionParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, Cobol85Parser.RULE_configurationSectionParagraph);
        try {
            this.state = 1314;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.SOURCE_COMPUTER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1311;
                        this.sourceComputerParagraph();
                    }
                    break;
                case Cobol85Parser.OBJECT_COMPUTER:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1312;
                        this.objectComputerParagraph();
                    }
                    break;
                case Cobol85Parser.SPECIAL_NAMES:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1313;
                        this.specialNamesParagraph();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sourceComputerParagraph = function () {
        var _localctx = new SourceComputerParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, Cobol85Parser.RULE_sourceComputerParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1316;
                this.match(Cobol85Parser.SOURCE_COMPUTER);
                this.state = 1317;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1318;
                this.computerName();
                this.state = 1324;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DEBUGGING || _la === Cobol85Parser.WITH) {
                    {
                        this.state = 1320;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.WITH) {
                            {
                                this.state = 1319;
                                this.match(Cobol85Parser.WITH);
                            }
                        }
                        this.state = 1322;
                        this.match(Cobol85Parser.DEBUGGING);
                        this.state = 1323;
                        this.match(Cobol85Parser.MODE);
                    }
                }
                this.state = 1326;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.objectComputerParagraph = function () {
        var _localctx = new ObjectComputerParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, Cobol85Parser.RULE_objectComputerParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1328;
                this.match(Cobol85Parser.OBJECT_COMPUTER);
                this.state = 1329;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1330;
                this.computerName();
                this.state = 1334;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.CHARACTER || _la === Cobol85Parser.COLLATING || _la === Cobol85Parser.DISK || _la === Cobol85Parser.MEMORY || _la === Cobol85Parser.PROGRAM || _la === Cobol85Parser.SEGMENT_LIMIT || _la === Cobol85Parser.SEQUENCE) {
                    {
                        {
                            this.state = 1331;
                            this.objectComputerClause();
                        }
                    }
                    this.state = 1336;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1337;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.objectComputerClause = function () {
        var _localctx = new ObjectComputerClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, Cobol85Parser.RULE_objectComputerClause);
        try {
            this.state = 1344;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.MEMORY:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1339;
                        this.memorySizeClause();
                    }
                    break;
                case Cobol85Parser.DISK:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1340;
                        this.diskSizeClause();
                    }
                    break;
                case Cobol85Parser.COLLATING:
                case Cobol85Parser.PROGRAM:
                case Cobol85Parser.SEQUENCE:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1341;
                        this.collatingSequenceClause();
                    }
                    break;
                case Cobol85Parser.SEGMENT_LIMIT:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1342;
                        this.segmentLimitClause();
                    }
                    break;
                case Cobol85Parser.CHARACTER:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1343;
                        this.characterSetClause();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.memorySizeClause = function () {
        var _localctx = new MemorySizeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, Cobol85Parser.RULE_memorySizeClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1346;
                this.match(Cobol85Parser.MEMORY);
                this.state = 1348;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SIZE) {
                    {
                        this.state = 1347;
                        this.match(Cobol85Parser.SIZE);
                    }
                }
                this.state = 1352;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                        {
                            this.state = 1350;
                            this.integerLiteral();
                        }
                        break;
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 1351;
                            this.cobolWord();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 1355;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.MODULES || _la === Cobol85Parser.WORDS) {
                    {
                        this.state = 1354;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.MODULES || _la === Cobol85Parser.WORDS)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.diskSizeClause = function () {
        var _localctx = new DiskSizeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, Cobol85Parser.RULE_diskSizeClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1357;
                this.match(Cobol85Parser.DISK);
                this.state = 1359;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SIZE) {
                    {
                        this.state = 1358;
                        this.match(Cobol85Parser.SIZE);
                    }
                }
                this.state = 1362;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1361;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1366;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                        {
                            this.state = 1364;
                            this.integerLiteral();
                        }
                        break;
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 1365;
                            this.cobolWord();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 1369;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.MODULES || _la === Cobol85Parser.WORDS) {
                    {
                        this.state = 1368;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.MODULES || _la === Cobol85Parser.WORDS)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.collatingSequenceClause = function () {
        var _localctx = new CollatingSequenceClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, Cobol85Parser.RULE_collatingSequenceClause);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1372;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.PROGRAM) {
                    {
                        this.state = 1371;
                        this.match(Cobol85Parser.PROGRAM);
                    }
                }
                this.state = 1375;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COLLATING) {
                    {
                        this.state = 1374;
                        this.match(Cobol85Parser.COLLATING);
                    }
                }
                this.state = 1377;
                this.match(Cobol85Parser.SEQUENCE);
                {
                    this.state = 1379;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Cobol85Parser.IS) {
                        {
                            this.state = 1378;
                            this.match(Cobol85Parser.IS);
                        }
                    }
                    this.state = 1382;
                    this._errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                {
                                    {
                                        this.state = 1381;
                                        this.alphabetName();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                        this.state = 1384;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 37, this._ctx);
                    } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                }
                this.state = 1387;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 38, this._ctx)) {
                    case 1:
                        {
                            this.state = 1386;
                            this.collatingSequenceClauseAlphanumeric();
                        }
                        break;
                }
                this.state = 1390;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR || _la === Cobol85Parser.NATIONAL) {
                    {
                        this.state = 1389;
                        this.collatingSequenceClauseNational();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.collatingSequenceClauseAlphanumeric = function () {
        var _localctx = new CollatingSequenceClauseAlphanumericContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, Cobol85Parser.RULE_collatingSequenceClauseAlphanumeric);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1393;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 1392;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 1395;
                this.match(Cobol85Parser.ALPHANUMERIC);
                this.state = 1397;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1396;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1399;
                this.alphabetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.collatingSequenceClauseNational = function () {
        var _localctx = new CollatingSequenceClauseNationalContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, Cobol85Parser.RULE_collatingSequenceClauseNational);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1402;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 1401;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 1404;
                this.match(Cobol85Parser.NATIONAL);
                this.state = 1406;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1405;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1408;
                this.alphabetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.segmentLimitClause = function () {
        var _localctx = new SegmentLimitClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, Cobol85Parser.RULE_segmentLimitClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1410;
                this.match(Cobol85Parser.SEGMENT_LIMIT);
                this.state = 1412;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1411;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1414;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.characterSetClause = function () {
        var _localctx = new CharacterSetClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, Cobol85Parser.RULE_characterSetClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1416;
                this.match(Cobol85Parser.CHARACTER);
                this.state = 1417;
                this.match(Cobol85Parser.SET);
                this.state = 1418;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.specialNamesParagraph = function () {
        var _localctx = new SpecialNamesParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, Cobol85Parser.RULE_specialNamesParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1420;
                this.match(Cobol85Parser.SPECIAL_NAMES);
                this.state = 1421;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1429;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALPHABET) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)) | (1 << (Cobol85Parser.CLASS - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURRENCY - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DECIMAL_POINT - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.OFF - 317)) | (1 << (Cobol85Parser.ON - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.RESERVE - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
                    {
                        this.state = 1423;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 1422;
                                    this.specialNameClause();
                                }
                            }
                            this.state = 1425;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALPHABET) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)) | (1 << (Cobol85Parser.CLASS - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURRENCY - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DECIMAL_POINT - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.OFF - 317)) | (1 << (Cobol85Parser.ON - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.RESERVE - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
                        this.state = 1427;
                        this.match(Cobol85Parser.DOT_FS);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.specialNameClause = function () {
        var _localctx = new SpecialNameClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, Cobol85Parser.RULE_specialNameClause);
        try {
            this.state = 1442;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 47, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1431;
                        this.channelClause();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1432;
                        this.odtClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1433;
                        this.alphabetClause();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1434;
                        this.classClause();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1435;
                        this.currencySignClause();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1436;
                        this.decimalPointClause();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1437;
                        this.symbolicCharactersClause();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1438;
                        this.environmentSwitchNameClause();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1439;
                        this.defaultDisplaySignClause();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1440;
                        this.defaultComputationalSignClause();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1441;
                        this.reserveNetworkClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alphabetClause = function () {
        var _localctx = new AlphabetClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, Cobol85Parser.RULE_alphabetClause);
        try {
            this.state = 1446;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 48, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1444;
                        this.alphabetClauseFormat1();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1445;
                        this.alphabetClauseFormat2();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alphabetClauseFormat1 = function () {
        var _localctx = new AlphabetClauseFormat1Context(this._ctx, this.state);
        this.enterRule(_localctx, 60, Cobol85Parser.RULE_alphabetClauseFormat1);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1448;
                this.match(Cobol85Parser.ALPHABET);
                this.state = 1449;
                this.alphabetName();
                this.state = 1452;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 1450;
                        this.match(Cobol85Parser.FOR);
                        this.state = 1451;
                        this.match(Cobol85Parser.ALPHANUMERIC);
                    }
                }
                this.state = 1455;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1454;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1468;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 52, this._ctx)) {
                    case 1:
                        {
                            this.state = 1457;
                            this.match(Cobol85Parser.EBCDIC);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1458;
                            this.match(Cobol85Parser.ASCII);
                        }
                        break;
                    case 3:
                        {
                            this.state = 1459;
                            this.match(Cobol85Parser.STANDARD_1);
                        }
                        break;
                    case 4:
                        {
                            this.state = 1460;
                            this.match(Cobol85Parser.STANDARD_2);
                        }
                        break;
                    case 5:
                        {
                            this.state = 1461;
                            this.match(Cobol85Parser.NATIVE);
                        }
                        break;
                    case 6:
                        {
                            this.state = 1462;
                            this.cobolWord();
                        }
                        break;
                    case 7:
                        {
                            this.state = 1464;
                            this._errHandler.sync(this);
                            _alt = 1;
                            do {
                                switch (_alt) {
                                    case 1:
                                        {
                                            {
                                                this.state = 1463;
                                                this.alphabetLiterals();
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                                this.state = 1466;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 51, this._ctx);
                            } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alphabetLiterals = function () {
        var _localctx = new AlphabetLiteralsContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, Cobol85Parser.RULE_alphabetLiterals);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1470;
                this.literal();
                this.state = 1477;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.THROUGH:
                    case Cobol85Parser.THRU:
                        {
                            this.state = 1471;
                            this.alphabetThrough();
                        }
                        break;
                    case Cobol85Parser.ALSO:
                        {
                            this.state = 1473;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    {
                                        this.state = 1472;
                                        this.alphabetAlso();
                                    }
                                }
                                this.state = 1475;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (_la === Cobol85Parser.ALSO);
                        }
                        break;
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.ALL:
                    case Cobol85Parser.ALPHABET:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLASS:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURRENCY:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DECIMAL_POINT:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FALSE:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.HIGH_VALUE:
                    case Cobol85Parser.HIGH_VALUES:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.LOW_VALUE:
                    case Cobol85Parser.LOW_VALUES:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NULL:
                    case Cobol85Parser.NULLS:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.OFF:
                    case Cobol85Parser.ON:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.QUOTE:
                    case Cobol85Parser.QUOTES:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.RESERVE:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SPACE:
                    case Cobol85Parser.SPACES:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.SYMBOLIC:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUE:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.ZEROS:
                    case Cobol85Parser.ZEROES:
                    case Cobol85Parser.DOT_FS:
                    case Cobol85Parser.NONNUMERICLITERAL:
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                    case Cobol85Parser.NUMERICLITERAL:
                    case Cobol85Parser.IDENTIFIER:
                        break;
                    default:
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alphabetThrough = function () {
        var _localctx = new AlphabetThroughContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, Cobol85Parser.RULE_alphabetThrough);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1479;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1480;
                this.literal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alphabetAlso = function () {
        var _localctx = new AlphabetAlsoContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, Cobol85Parser.RULE_alphabetAlso);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1482;
                this.match(Cobol85Parser.ALSO);
                this.state = 1484;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1483;
                                    this.literal();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1486;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alphabetClauseFormat2 = function () {
        var _localctx = new AlphabetClauseFormat2Context(this._ctx, this.state);
        this.enterRule(_localctx, 68, Cobol85Parser.RULE_alphabetClauseFormat2);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1488;
                this.match(Cobol85Parser.ALPHABET);
                this.state = 1489;
                this.alphabetName();
                this.state = 1491;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 1490;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 1493;
                this.match(Cobol85Parser.NATIONAL);
                this.state = 1495;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1494;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1500;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.NATIVE:
                        {
                            this.state = 1497;
                            this.match(Cobol85Parser.NATIVE);
                        }
                        break;
                    case Cobol85Parser.CCSVERSION:
                        {
                            this.state = 1498;
                            this.match(Cobol85Parser.CCSVERSION);
                            this.state = 1499;
                            this.literal();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.channelClause = function () {
        var _localctx = new ChannelClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, Cobol85Parser.RULE_channelClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1502;
                this.match(Cobol85Parser.CHANNEL);
                this.state = 1503;
                this.integerLiteral();
                this.state = 1505;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1504;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1507;
                this.mnemonicName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.classClause = function () {
        var _localctx = new ClassClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, Cobol85Parser.RULE_classClause);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1509;
                this.match(Cobol85Parser.CLASS);
                this.state = 1510;
                this.className();
                this.state = 1515;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 61, this._ctx)) {
                    case 1:
                        {
                            this.state = 1512;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.FOR) {
                                {
                                    this.state = 1511;
                                    this.match(Cobol85Parser.FOR);
                                }
                            }
                            this.state = 1514;
                            _la = this._input.LA(1);
                            if (!(_la === Cobol85Parser.ALPHANUMERIC || _la === Cobol85Parser.NATIONAL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.state = 1518;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1517;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1521;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1520;
                                    this.classClauseThrough();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1523;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.classClauseThrough = function () {
        var _localctx = new ClassClauseThroughContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, Cobol85Parser.RULE_classClauseThrough);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1525;
                this.classClauseFrom();
                this.state = 1528;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
                    {
                        this.state = 1526;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1527;
                        this.classClauseTo();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.classClauseFrom = function () {
        var _localctx = new ClassClauseFromContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, Cobol85Parser.RULE_classClauseFrom);
        try {
            this.state = 1532;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 65, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1530;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1531;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.classClauseTo = function () {
        var _localctx = new ClassClauseToContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, Cobol85Parser.RULE_classClauseTo);
        try {
            this.state = 1536;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 66, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1534;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1535;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.currencySignClause = function () {
        var _localctx = new CurrencySignClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, Cobol85Parser.RULE_currencySignClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1538;
                this.match(Cobol85Parser.CURRENCY);
                this.state = 1540;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SIGN) {
                    {
                        this.state = 1539;
                        this.match(Cobol85Parser.SIGN);
                    }
                }
                this.state = 1543;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1542;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1545;
                this.literal();
                this.state = 1552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.PICTURE || _la === Cobol85Parser.WITH) {
                    {
                        this.state = 1547;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.WITH) {
                            {
                                this.state = 1546;
                                this.match(Cobol85Parser.WITH);
                            }
                        }
                        this.state = 1549;
                        this.match(Cobol85Parser.PICTURE);
                        this.state = 1550;
                        this.match(Cobol85Parser.SYMBOL);
                        this.state = 1551;
                        this.literal();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.decimalPointClause = function () {
        var _localctx = new DecimalPointClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, Cobol85Parser.RULE_decimalPointClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1554;
                this.match(Cobol85Parser.DECIMAL_POINT);
                this.state = 1556;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1555;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1558;
                this.match(Cobol85Parser.COMMA);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.defaultComputationalSignClause = function () {
        var _localctx = new DefaultComputationalSignClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, Cobol85Parser.RULE_defaultComputationalSignClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1560;
                this.match(Cobol85Parser.DEFAULT);
                this.state = 1562;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMP || _la === Cobol85Parser.COMPUTATIONAL) {
                    {
                        this.state = 1561;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.COMP || _la === Cobol85Parser.COMPUTATIONAL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1568;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SIGN) {
                    {
                        this.state = 1564;
                        this.match(Cobol85Parser.SIGN);
                        this.state = 1566;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 1565;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                    }
                }
                this.state = 1571;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING) {
                    {
                        this.state = 1570;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                {
                    this.state = 1573;
                    this.match(Cobol85Parser.SEPARATE);
                    this.state = 1575;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Cobol85Parser.CHARACTER) {
                        {
                            this.state = 1574;
                            this.match(Cobol85Parser.CHARACTER);
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.defaultDisplaySignClause = function () {
        var _localctx = new DefaultDisplaySignClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, Cobol85Parser.RULE_defaultDisplaySignClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1577;
                this.match(Cobol85Parser.DEFAULT_DISPLAY);
                this.state = 1582;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SIGN) {
                    {
                        this.state = 1578;
                        this.match(Cobol85Parser.SIGN);
                        this.state = 1580;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 1579;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                    }
                }
                this.state = 1584;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1589;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SEPARATE) {
                    {
                        this.state = 1585;
                        this.match(Cobol85Parser.SEPARATE);
                        this.state = 1587;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.CHARACTER) {
                            {
                                this.state = 1586;
                                this.match(Cobol85Parser.CHARACTER);
                            }
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.environmentSwitchNameClause = function () {
        var _localctx = new EnvironmentSwitchNameClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, Cobol85Parser.RULE_environmentSwitchNameClause);
        var _la;
        try {
            this.state = 1600;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.ABORT:
                case Cobol85Parser.AS:
                case Cobol85Parser.ASCII:
                case Cobol85Parser.ASSOCIATED_DATA:
                case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                case Cobol85Parser.ATTRIBUTE:
                case Cobol85Parser.AUTO:
                case Cobol85Parser.AUTO_SKIP:
                case Cobol85Parser.BACKGROUND_COLOR:
                case Cobol85Parser.BACKGROUND_COLOUR:
                case Cobol85Parser.BEEP:
                case Cobol85Parser.BELL:
                case Cobol85Parser.BINARY:
                case Cobol85Parser.BIT:
                case Cobol85Parser.BLINK:
                case Cobol85Parser.BOUNDS:
                case Cobol85Parser.CAPABLE:
                case Cobol85Parser.CCSVERSION:
                case Cobol85Parser.CHANGED:
                case Cobol85Parser.CHANNEL:
                case Cobol85Parser.CLOSE_DISPOSITION:
                case Cobol85Parser.COBOL:
                case Cobol85Parser.COMMITMENT:
                case Cobol85Parser.CONTROL_POINT:
                case Cobol85Parser.CONVENTION:
                case Cobol85Parser.CRUNCH:
                case Cobol85Parser.CURSOR:
                case Cobol85Parser.DEFAULT:
                case Cobol85Parser.DEFAULT_DISPLAY:
                case Cobol85Parser.DEFINITION:
                case Cobol85Parser.DFHRESP:
                case Cobol85Parser.DFHVALUE:
                case Cobol85Parser.DISK:
                case Cobol85Parser.DONTCARE:
                case Cobol85Parser.DOUBLE:
                case Cobol85Parser.EBCDIC:
                case Cobol85Parser.EMPTY_CHECK:
                case Cobol85Parser.ENTER:
                case Cobol85Parser.ENTRY_PROCEDURE:
                case Cobol85Parser.ERASE:
                case Cobol85Parser.EOL:
                case Cobol85Parser.EOS:
                case Cobol85Parser.ESCAPE:
                case Cobol85Parser.EVENT:
                case Cobol85Parser.EXCLUSIVE:
                case Cobol85Parser.EXPORT:
                case Cobol85Parser.EXTENDED:
                case Cobol85Parser.FOREGROUND_COLOR:
                case Cobol85Parser.FOREGROUND_COLOUR:
                case Cobol85Parser.FULL:
                case Cobol85Parser.FUNCTIONNAME:
                case Cobol85Parser.FUNCTION_POINTER:
                case Cobol85Parser.GRID:
                case Cobol85Parser.HIGHLIGHT:
                case Cobol85Parser.IMPLICIT:
                case Cobol85Parser.IMPORT:
                case Cobol85Parser.INTEGER:
                case Cobol85Parser.KEPT:
                case Cobol85Parser.KEYBOARD:
                case Cobol85Parser.LANGUAGE:
                case Cobol85Parser.LB:
                case Cobol85Parser.LD:
                case Cobol85Parser.LEFTLINE:
                case Cobol85Parser.LENGTH_CHECK:
                case Cobol85Parser.LIBACCESS:
                case Cobol85Parser.LIBPARAMETER:
                case Cobol85Parser.LIBRARY:
                case Cobol85Parser.LIST:
                case Cobol85Parser.LOCAL:
                case Cobol85Parser.LONG_DATE:
                case Cobol85Parser.LONG_TIME:
                case Cobol85Parser.LOWER:
                case Cobol85Parser.LOWLIGHT:
                case Cobol85Parser.MMDDYYYY:
                case Cobol85Parser.NAMED:
                case Cobol85Parser.NATIONAL:
                case Cobol85Parser.NATIONAL_EDITED:
                case Cobol85Parser.NETWORK:
                case Cobol85Parser.NO_ECHO:
                case Cobol85Parser.NUMERIC_DATE:
                case Cobol85Parser.NUMERIC_TIME:
                case Cobol85Parser.ODT:
                case Cobol85Parser.ORDERLY:
                case Cobol85Parser.OVERLINE:
                case Cobol85Parser.OWN:
                case Cobol85Parser.PASSWORD:
                case Cobol85Parser.PORT:
                case Cobol85Parser.PRINTER:
                case Cobol85Parser.PRIVATE:
                case Cobol85Parser.PROCESS:
                case Cobol85Parser.PROGRAM:
                case Cobol85Parser.PROMPT:
                case Cobol85Parser.READER:
                case Cobol85Parser.REMOTE:
                case Cobol85Parser.REAL:
                case Cobol85Parser.RECEIVED:
                case Cobol85Parser.RECURSIVE:
                case Cobol85Parser.REF:
                case Cobol85Parser.REMOVE:
                case Cobol85Parser.REQUIRED:
                case Cobol85Parser.REVERSE_VIDEO:
                case Cobol85Parser.SAVE:
                case Cobol85Parser.SECURE:
                case Cobol85Parser.SHARED:
                case Cobol85Parser.SHAREDBYALL:
                case Cobol85Parser.SHAREDBYRUNUNIT:
                case Cobol85Parser.SHARING:
                case Cobol85Parser.SHORT_DATE:
                case Cobol85Parser.SYMBOL:
                case Cobol85Parser.TASK:
                case Cobol85Parser.THREAD:
                case Cobol85Parser.THREAD_LOCAL:
                case Cobol85Parser.TIMER:
                case Cobol85Parser.TODAYS_DATE:
                case Cobol85Parser.TODAYS_NAME:
                case Cobol85Parser.TRUNCATED:
                case Cobol85Parser.TYPEDEF:
                case Cobol85Parser.UNDERLINE:
                case Cobol85Parser.VIRTUAL:
                case Cobol85Parser.WAIT:
                case Cobol85Parser.YEAR:
                case Cobol85Parser.YYYYMMDD:
                case Cobol85Parser.YYYYDDD:
                case Cobol85Parser.ZERO_FILL:
                case Cobol85Parser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1591;
                        this.environmentName();
                        this.state = 1593;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 1592;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                        this.state = 1595;
                        this.mnemonicName();
                        this.state = 1597;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 82, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1596;
                                    this.environmentSwitchNameSpecialNamesStatusPhrase();
                                }
                                break;
                        }
                    }
                    break;
                case Cobol85Parser.OFF:
                case Cobol85Parser.ON:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1599;
                        this.environmentSwitchNameSpecialNamesStatusPhrase();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.environmentSwitchNameSpecialNamesStatusPhrase = function () {
        var _localctx = new EnvironmentSwitchNameSpecialNamesStatusPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, Cobol85Parser.RULE_environmentSwitchNameSpecialNamesStatusPhrase);
        var _la;
        try {
            this.state = 1638;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.ON:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1602;
                        this.match(Cobol85Parser.ON);
                        this.state = 1604;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.STATUS) {
                            {
                                this.state = 1603;
                                this.match(Cobol85Parser.STATUS);
                            }
                        }
                        this.state = 1607;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 1606;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                        this.state = 1609;
                        this.condition();
                        this.state = 1618;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 88, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1610;
                                    this.match(Cobol85Parser.OFF);
                                    this.state = 1612;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === Cobol85Parser.STATUS) {
                                        {
                                            this.state = 1611;
                                            this.match(Cobol85Parser.STATUS);
                                        }
                                    }
                                    this.state = 1615;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === Cobol85Parser.IS) {
                                        {
                                            this.state = 1614;
                                            this.match(Cobol85Parser.IS);
                                        }
                                    }
                                    this.state = 1617;
                                    this.condition();
                                }
                                break;
                        }
                    }
                    break;
                case Cobol85Parser.OFF:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1620;
                        this.match(Cobol85Parser.OFF);
                        this.state = 1622;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.STATUS) {
                            {
                                this.state = 1621;
                                this.match(Cobol85Parser.STATUS);
                            }
                        }
                        this.state = 1625;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 1624;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                        this.state = 1627;
                        this.condition();
                        this.state = 1636;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 93, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1628;
                                    this.match(Cobol85Parser.ON);
                                    this.state = 1630;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === Cobol85Parser.STATUS) {
                                        {
                                            this.state = 1629;
                                            this.match(Cobol85Parser.STATUS);
                                        }
                                    }
                                    this.state = 1633;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === Cobol85Parser.IS) {
                                        {
                                            this.state = 1632;
                                            this.match(Cobol85Parser.IS);
                                        }
                                    }
                                    this.state = 1635;
                                    this.condition();
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.odtClause = function () {
        var _localctx = new OdtClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, Cobol85Parser.RULE_odtClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1640;
                this.match(Cobol85Parser.ODT);
                this.state = 1642;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1641;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1644;
                this.mnemonicName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reserveNetworkClause = function () {
        var _localctx = new ReserveNetworkClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, Cobol85Parser.RULE_reserveNetworkClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1646;
                this.match(Cobol85Parser.RESERVE);
                this.state = 1648;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WORDS) {
                    {
                        this.state = 1647;
                        this.match(Cobol85Parser.WORDS);
                    }
                }
                this.state = 1651;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LIST) {
                    {
                        this.state = 1650;
                        this.match(Cobol85Parser.LIST);
                    }
                }
                this.state = 1654;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1653;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1656;
                this.match(Cobol85Parser.NETWORK);
                this.state = 1658;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 99, this._ctx)) {
                    case 1:
                        {
                            this.state = 1657;
                            this.match(Cobol85Parser.CAPABLE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.symbolicCharactersClause = function () {
        var _localctx = new SymbolicCharactersClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, Cobol85Parser.RULE_symbolicCharactersClause);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1660;
                this.match(Cobol85Parser.SYMBOLIC);
                this.state = 1662;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CHARACTERS) {
                    {
                        this.state = 1661;
                        this.match(Cobol85Parser.CHARACTERS);
                    }
                }
                this.state = 1668;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 102, this._ctx)) {
                    case 1:
                        {
                            this.state = 1665;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.FOR) {
                                {
                                    this.state = 1664;
                                    this.match(Cobol85Parser.FOR);
                                }
                            }
                            this.state = 1667;
                            _la = this._input.LA(1);
                            if (!(_la === Cobol85Parser.ALPHANUMERIC || _la === Cobol85Parser.NATIONAL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.state = 1671;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1670;
                                    this.symbolicCharacters();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1673;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 103, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 1677;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IN) {
                    {
                        this.state = 1675;
                        this.match(Cobol85Parser.IN);
                        this.state = 1676;
                        this.alphabetName();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.symbolicCharacters = function () {
        var _localctx = new SymbolicCharactersContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, Cobol85Parser.RULE_symbolicCharacters);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1680;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1679;
                            this.symbolicCharacter();
                        }
                    }
                    this.state = 1682;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
                this.state = 1685;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ARE || _la === Cobol85Parser.IS) {
                    {
                        this.state = 1684;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.ARE || _la === Cobol85Parser.IS)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1688;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1687;
                            this.integerLiteral();
                        }
                    }
                    this.state = 1690;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inputOutputSection = function () {
        var _localctx = new InputOutputSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, Cobol85Parser.RULE_inputOutputSection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1692;
                this.match(Cobol85Parser.INPUT_OUTPUT);
                this.state = 1693;
                this.match(Cobol85Parser.SECTION);
                this.state = 1694;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1698;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.FILE_CONTROL || _la === Cobol85Parser.I_O_CONTROL) {
                    {
                        {
                            this.state = 1695;
                            this.inputOutputSectionParagraph();
                        }
                    }
                    this.state = 1700;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inputOutputSectionParagraph = function () {
        var _localctx = new InputOutputSectionParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, Cobol85Parser.RULE_inputOutputSectionParagraph);
        try {
            this.state = 1703;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.FILE_CONTROL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1701;
                        this.fileControlParagraph();
                    }
                    break;
                case Cobol85Parser.I_O_CONTROL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1702;
                        this.ioControlParagraph();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.fileControlParagraph = function () {
        var _localctx = new FileControlParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, Cobol85Parser.RULE_fileControlParagraph);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1705;
                this.match(Cobol85Parser.FILE_CONTROL);
                this.state = 1712;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1707;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === Cobol85Parser.DOT_FS) {
                                    {
                                        this.state = 1706;
                                        this.match(Cobol85Parser.DOT_FS);
                                    }
                                }
                                this.state = 1709;
                                this.fileControlEntry();
                            }
                        }
                    }
                    this.state = 1714;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);
                }
                this.state = 1715;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.fileControlEntry = function () {
        var _localctx = new FileControlEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, Cobol85Parser.RULE_fileControlEntry);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1717;
                this.selectClause();
                this.state = 1721;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCESS) | (1 << Cobol85Parser.ALTERNATE) | (1 << Cobol85Parser.ASSIGN))) !== 0) || _la === Cobol85Parser.BINARY || _la === Cobol85Parser.FILE || _la === Cobol85Parser.INDEXED || _la === Cobol85Parser.LINE || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (Cobol85Parser.ORGANIZATION - 332)) | (1 << (Cobol85Parser.PADDING - 332)) | (1 << (Cobol85Parser.PASSWORD - 332)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (Cobol85Parser.RECORD - 377)) | (1 << (Cobol85Parser.RELATIVE - 377)) | (1 << (Cobol85Parser.RESERVE - 377)))) !== 0) || _la === Cobol85Parser.SEQUENTIAL || _la === Cobol85Parser.STATUS) {
                    {
                        {
                            this.state = 1718;
                            this.fileControlClause();
                        }
                    }
                    this.state = 1723;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.selectClause = function () {
        var _localctx = new SelectClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, Cobol85Parser.RULE_selectClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1724;
                this.match(Cobol85Parser.SELECT);
                this.state = 1726;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.OPTIONAL) {
                    {
                        this.state = 1725;
                        this.match(Cobol85Parser.OPTIONAL);
                    }
                }
                this.state = 1728;
                this.fileName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.fileControlClause = function () {
        var _localctx = new FileControlClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, Cobol85Parser.RULE_fileControlClause);
        try {
            this.state = 1741;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 114, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1730;
                        this.assignClause();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1731;
                        this.reserveClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1732;
                        this.organizationClause();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1733;
                        this.paddingCharacterClause();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1734;
                        this.recordDelimiterClause();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1735;
                        this.accessModeClause();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1736;
                        this.recordKeyClause();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1737;
                        this.alternateRecordKeyClause();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1738;
                        this.fileStatusClause();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1739;
                        this.passwordClause();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1740;
                        this.relativeKeyClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.assignClause = function () {
        var _localctx = new AssignClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, Cobol85Parser.RULE_assignClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1743;
                this.match(Cobol85Parser.ASSIGN);
                this.state = 1745;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TO) {
                    {
                        this.state = 1744;
                        this.match(Cobol85Parser.TO);
                    }
                }
                this.state = 1758;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 116, this._ctx)) {
                    case 1:
                        {
                            this.state = 1747;
                            this.match(Cobol85Parser.DISK);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1748;
                            this.match(Cobol85Parser.DISPLAY);
                        }
                        break;
                    case 3:
                        {
                            this.state = 1749;
                            this.match(Cobol85Parser.KEYBOARD);
                        }
                        break;
                    case 4:
                        {
                            this.state = 1750;
                            this.match(Cobol85Parser.PORT);
                        }
                        break;
                    case 5:
                        {
                            this.state = 1751;
                            this.match(Cobol85Parser.PRINTER);
                        }
                        break;
                    case 6:
                        {
                            this.state = 1752;
                            this.match(Cobol85Parser.READER);
                        }
                        break;
                    case 7:
                        {
                            this.state = 1753;
                            this.match(Cobol85Parser.REMOTE);
                        }
                        break;
                    case 8:
                        {
                            this.state = 1754;
                            this.match(Cobol85Parser.TAPE);
                        }
                        break;
                    case 9:
                        {
                            this.state = 1755;
                            this.match(Cobol85Parser.VIRTUAL);
                        }
                        break;
                    case 10:
                        {
                            this.state = 1756;
                            this.assignmentName();
                        }
                        break;
                    case 11:
                        {
                            this.state = 1757;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reserveClause = function () {
        var _localctx = new ReserveClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, Cobol85Parser.RULE_reserveClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1760;
                this.match(Cobol85Parser.RESERVE);
                this.state = 1763;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.NO:
                        {
                            this.state = 1761;
                            this.match(Cobol85Parser.NO);
                        }
                        break;
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                        {
                            this.state = 1762;
                            this.integerLiteral();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 1766;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 118, this._ctx)) {
                    case 1:
                        {
                            this.state = 1765;
                            this.match(Cobol85Parser.ALTERNATE);
                        }
                        break;
                }
                this.state = 1769;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AREA || _la === Cobol85Parser.AREAS) {
                    {
                        this.state = 1768;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.AREA || _la === Cobol85Parser.AREAS)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.organizationClause = function () {
        var _localctx = new OrganizationClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, Cobol85Parser.RULE_organizationClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1775;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ORGANIZATION) {
                    {
                        this.state = 1771;
                        this.match(Cobol85Parser.ORGANIZATION);
                        this.state = 1773;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 1772;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                    }
                }
                this.state = 1782;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 122, this._ctx)) {
                    case 1:
                        {
                            this.state = 1777;
                            this.match(Cobol85Parser.LINE);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1778;
                            this.match(Cobol85Parser.RECORD);
                            this.state = 1779;
                            this.match(Cobol85Parser.BINARY);
                        }
                        break;
                    case 3:
                        {
                            this.state = 1780;
                            this.match(Cobol85Parser.RECORD);
                        }
                        break;
                    case 4:
                        {
                            this.state = 1781;
                            this.match(Cobol85Parser.BINARY);
                        }
                        break;
                }
                this.state = 1784;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.INDEXED || _la === Cobol85Parser.RELATIVE || _la === Cobol85Parser.SEQUENTIAL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.paddingCharacterClause = function () {
        var _localctx = new PaddingCharacterClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, Cobol85Parser.RULE_paddingCharacterClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1786;
                this.match(Cobol85Parser.PADDING);
                this.state = 1788;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CHARACTER) {
                    {
                        this.state = 1787;
                        this.match(Cobol85Parser.CHARACTER);
                    }
                }
                this.state = 1791;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1790;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1795;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 125, this._ctx)) {
                    case 1:
                        {
                            this.state = 1793;
                            this.qualifiedDataName();
                        }
                        break;
                    case 2:
                        {
                            this.state = 1794;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.recordDelimiterClause = function () {
        var _localctx = new RecordDelimiterClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, Cobol85Parser.RULE_recordDelimiterClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1797;
                this.match(Cobol85Parser.RECORD);
                this.state = 1798;
                this.match(Cobol85Parser.DELIMITER);
                this.state = 1800;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1799;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1805;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 127, this._ctx)) {
                    case 1:
                        {
                            this.state = 1802;
                            this.match(Cobol85Parser.STANDARD_1);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1803;
                            this.match(Cobol85Parser.IMPLICIT);
                        }
                        break;
                    case 3:
                        {
                            this.state = 1804;
                            this.assignmentName();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.accessModeClause = function () {
        var _localctx = new AccessModeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, Cobol85Parser.RULE_accessModeClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1807;
                this.match(Cobol85Parser.ACCESS);
                this.state = 1809;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.MODE) {
                    {
                        this.state = 1808;
                        this.match(Cobol85Parser.MODE);
                    }
                }
                this.state = 1812;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1811;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1814;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.DYNAMIC || _la === Cobol85Parser.EXCLUSIVE || _la === Cobol85Parser.RANDOM || _la === Cobol85Parser.SEQUENTIAL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.recordKeyClause = function () {
        var _localctx = new RecordKeyClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, Cobol85Parser.RULE_recordKeyClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1816;
                this.match(Cobol85Parser.RECORD);
                this.state = 1818;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.KEY) {
                    {
                        this.state = 1817;
                        this.match(Cobol85Parser.KEY);
                    }
                }
                this.state = 1821;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1820;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1823;
                this.qualifiedDataName();
                this.state = 1825;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 132, this._ctx)) {
                    case 1:
                        {
                            this.state = 1824;
                            this.passwordClause();
                        }
                        break;
                }
                this.state = 1831;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DUPLICATES || _la === Cobol85Parser.WITH) {
                    {
                        this.state = 1828;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.WITH) {
                            {
                                this.state = 1827;
                                this.match(Cobol85Parser.WITH);
                            }
                        }
                        this.state = 1830;
                        this.match(Cobol85Parser.DUPLICATES);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alternateRecordKeyClause = function () {
        var _localctx = new AlternateRecordKeyClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, Cobol85Parser.RULE_alternateRecordKeyClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1833;
                this.match(Cobol85Parser.ALTERNATE);
                this.state = 1834;
                this.match(Cobol85Parser.RECORD);
                this.state = 1836;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.KEY) {
                    {
                        this.state = 1835;
                        this.match(Cobol85Parser.KEY);
                    }
                }
                this.state = 1839;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1838;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1841;
                this.qualifiedDataName();
                this.state = 1843;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 137, this._ctx)) {
                    case 1:
                        {
                            this.state = 1842;
                            this.passwordClause();
                        }
                        break;
                }
                this.state = 1849;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DUPLICATES || _la === Cobol85Parser.WITH) {
                    {
                        this.state = 1846;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.WITH) {
                            {
                                this.state = 1845;
                                this.match(Cobol85Parser.WITH);
                            }
                        }
                        this.state = 1848;
                        this.match(Cobol85Parser.DUPLICATES);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.passwordClause = function () {
        var _localctx = new PasswordClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, Cobol85Parser.RULE_passwordClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1851;
                this.match(Cobol85Parser.PASSWORD);
                this.state = 1853;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1852;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1855;
                this.dataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.fileStatusClause = function () {
        var _localctx = new FileStatusClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, Cobol85Parser.RULE_fileStatusClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1858;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FILE) {
                    {
                        this.state = 1857;
                        this.match(Cobol85Parser.FILE);
                    }
                }
                this.state = 1860;
                this.match(Cobol85Parser.STATUS);
                this.state = 1862;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1861;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1864;
                this.qualifiedDataName();
                this.state = 1866;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 143, this._ctx)) {
                    case 1:
                        {
                            this.state = 1865;
                            this.qualifiedDataName();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.relativeKeyClause = function () {
        var _localctx = new RelativeKeyClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, Cobol85Parser.RULE_relativeKeyClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1868;
                this.match(Cobol85Parser.RELATIVE);
                this.state = 1870;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.KEY) {
                    {
                        this.state = 1869;
                        this.match(Cobol85Parser.KEY);
                    }
                }
                this.state = 1873;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 1872;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 1875;
                this.qualifiedDataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.ioControlParagraph = function () {
        var _localctx = new IoControlParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, Cobol85Parser.RULE_ioControlParagraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1877;
                this.match(Cobol85Parser.I_O_CONTROL);
                this.state = 1878;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1882;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 146, this._ctx)) {
                    case 1:
                        {
                            this.state = 1879;
                            this.fileName();
                            this.state = 1880;
                            this.match(Cobol85Parser.DOT_FS);
                        }
                        break;
                }
                this.state = 1891;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMMITMENT || _la === Cobol85Parser.MULTIPLE || _la === Cobol85Parser.RERUN || _la === Cobol85Parser.SAME || _la === Cobol85Parser.DOT_FS) {
                    {
                        this.state = 1887;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Cobol85Parser.COMMITMENT || _la === Cobol85Parser.MULTIPLE || _la === Cobol85Parser.RERUN || _la === Cobol85Parser.SAME) {
                            {
                                {
                                    this.state = 1884;
                                    this.ioControlClause();
                                }
                            }
                            this.state = 1889;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1890;
                        this.match(Cobol85Parser.DOT_FS);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.ioControlClause = function () {
        var _localctx = new IoControlClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, Cobol85Parser.RULE_ioControlClause);
        try {
            this.state = 1897;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.RERUN:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1893;
                        this.rerunClause();
                    }
                    break;
                case Cobol85Parser.SAME:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1894;
                        this.sameClause();
                    }
                    break;
                case Cobol85Parser.MULTIPLE:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1895;
                        this.multipleFileClause();
                    }
                    break;
                case Cobol85Parser.COMMITMENT:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1896;
                        this.commitmentControlClause();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.rerunClause = function () {
        var _localctx = new RerunClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, Cobol85Parser.RULE_rerunClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1899;
                this.match(Cobol85Parser.RERUN);
                this.state = 1905;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 1900;
                        this.match(Cobol85Parser.ON);
                        this.state = 1903;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 150, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1901;
                                    this.assignmentName();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 1902;
                                    this.fileName();
                                }
                                break;
                        }
                    }
                }
                this.state = 1907;
                this.match(Cobol85Parser.EVERY);
                this.state = 1911;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 152, this._ctx)) {
                    case 1:
                        {
                            this.state = 1908;
                            this.rerunEveryRecords();
                        }
                        break;
                    case 2:
                        {
                            this.state = 1909;
                            this.rerunEveryOf();
                        }
                        break;
                    case 3:
                        {
                            this.state = 1910;
                            this.rerunEveryClock();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.rerunEveryRecords = function () {
        var _localctx = new RerunEveryRecordsContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, Cobol85Parser.RULE_rerunEveryRecords);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1913;
                this.integerLiteral();
                this.state = 1914;
                this.match(Cobol85Parser.RECORDS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.rerunEveryOf = function () {
        var _localctx = new RerunEveryOfContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, Cobol85Parser.RULE_rerunEveryOf);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1917;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.END) {
                    {
                        this.state = 1916;
                        this.match(Cobol85Parser.END);
                    }
                }
                this.state = 1920;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.OF) {
                    {
                        this.state = 1919;
                        this.match(Cobol85Parser.OF);
                    }
                }
                this.state = 1922;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.REEL || _la === Cobol85Parser.UNIT)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1923;
                this.match(Cobol85Parser.OF);
                this.state = 1924;
                this.fileName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.rerunEveryClock = function () {
        var _localctx = new RerunEveryClockContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, Cobol85Parser.RULE_rerunEveryClock);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1926;
                this.integerLiteral();
                this.state = 1928;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CLOCK_UNITS) {
                    {
                        this.state = 1927;
                        this.match(Cobol85Parser.CLOCK_UNITS);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sameClause = function () {
        var _localctx = new SameClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, Cobol85Parser.RULE_sameClause);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1930;
                this.match(Cobol85Parser.SAME);
                this.state = 1932;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.RECORD || _la === Cobol85Parser.SORT || _la === Cobol85Parser.SORT_MERGE) {
                    {
                        this.state = 1931;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.RECORD || _la === Cobol85Parser.SORT || _la === Cobol85Parser.SORT_MERGE)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1935;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AREA) {
                    {
                        this.state = 1934;
                        this.match(Cobol85Parser.AREA);
                    }
                }
                this.state = 1938;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 1937;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 1941;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1940;
                                    this.fileName();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1943;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.multipleFileClause = function () {
        var _localctx = new MultipleFileClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, Cobol85Parser.RULE_multipleFileClause);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1945;
                this.match(Cobol85Parser.MULTIPLE);
                this.state = 1946;
                this.match(Cobol85Parser.FILE);
                this.state = 1948;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TAPE) {
                    {
                        this.state = 1947;
                        this.match(Cobol85Parser.TAPE);
                    }
                }
                this.state = 1951;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CONTAINS) {
                    {
                        this.state = 1950;
                        this.match(Cobol85Parser.CONTAINS);
                    }
                }
                this.state = 1954;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1953;
                                    this.multipleFilePosition();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1956;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.multipleFilePosition = function () {
        var _localctx = new MultipleFilePositionContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, Cobol85Parser.RULE_multipleFilePosition);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1958;
                this.fileName();
                this.state = 1961;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.POSITION) {
                    {
                        this.state = 1959;
                        this.match(Cobol85Parser.POSITION);
                        this.state = 1960;
                        this.integerLiteral();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.commitmentControlClause = function () {
        var _localctx = new CommitmentControlClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, Cobol85Parser.RULE_commitmentControlClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1963;
                this.match(Cobol85Parser.COMMITMENT);
                this.state = 1964;
                this.match(Cobol85Parser.CONTROL);
                this.state = 1966;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 1965;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 1968;
                this.fileName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataDivision = function () {
        var _localctx = new DataDivisionContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, Cobol85Parser.RULE_dataDivision);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1970;
                this.match(Cobol85Parser.DATA);
                this.state = 1971;
                this.match(Cobol85Parser.DIVISION);
                this.state = 1972;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1976;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.COMMUNICATION || _la === Cobol85Parser.DATA_BASE || _la === Cobol85Parser.FILE || _la === Cobol85Parser.LINKAGE || _la === Cobol85Parser.LOCAL_STORAGE || _la === Cobol85Parser.PROGRAM_LIBRARY || _la === Cobol85Parser.REPORT || _la === Cobol85Parser.SCREEN || _la === Cobol85Parser.WORKING_STORAGE) {
                    {
                        {
                            this.state = 1973;
                            this.dataDivisionSection();
                        }
                    }
                    this.state = 1978;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataDivisionSection = function () {
        var _localctx = new DataDivisionSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, Cobol85Parser.RULE_dataDivisionSection);
        try {
            this.state = 1988;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.FILE:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1979;
                        this.fileSection();
                    }
                    break;
                case Cobol85Parser.DATA_BASE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1980;
                        this.dataBaseSection();
                    }
                    break;
                case Cobol85Parser.WORKING_STORAGE:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1981;
                        this.workingStorageSection();
                    }
                    break;
                case Cobol85Parser.LINKAGE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1982;
                        this.linkageSection();
                    }
                    break;
                case Cobol85Parser.COMMUNICATION:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1983;
                        this.communicationSection();
                    }
                    break;
                case Cobol85Parser.LOCAL_STORAGE:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1984;
                        this.localStorageSection();
                    }
                    break;
                case Cobol85Parser.SCREEN:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1985;
                        this.screenSection();
                    }
                    break;
                case Cobol85Parser.REPORT:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1986;
                        this.reportSection();
                    }
                    break;
                case Cobol85Parser.PROGRAM_LIBRARY:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1987;
                        this.programLibrarySection();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.fileSection = function () {
        var _localctx = new FileSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, Cobol85Parser.RULE_fileSection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1990;
                this.match(Cobol85Parser.FILE);
                this.state = 1991;
                this.match(Cobol85Parser.SECTION);
                this.state = 1992;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 1996;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.FD || _la === Cobol85Parser.SD) {
                    {
                        {
                            this.state = 1993;
                            this.fileDescriptionEntry();
                        }
                    }
                    this.state = 1998;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.fileDescriptionEntry = function () {
        var _localctx = new FileDescriptionEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, Cobol85Parser.RULE_fileDescriptionEntry);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1999;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.FD || _la === Cobol85Parser.SD)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2000;
                this.fileName();
                this.state = 2007;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2002;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === Cobol85Parser.DOT_FS) {
                                    {
                                        this.state = 2001;
                                        this.match(Cobol85Parser.DOT_FS);
                                    }
                                }
                                this.state = 2004;
                                this.fileDescriptionEntryClause();
                            }
                        }
                    }
                    this.state = 2009;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
                }
                this.state = 2010;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 2014;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
                    {
                        {
                            this.state = 2011;
                            this.dataDescriptionEntry();
                        }
                    }
                    this.state = 2016;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.fileDescriptionEntryClause = function () {
        var _localctx = new FileDescriptionEntryClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, Cobol85Parser.RULE_fileDescriptionEntryClause);
        try {
            this.state = 2028;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 171, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2017;
                        this.externalClause();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2018;
                        this.globalClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2019;
                        this.blockContainsClause();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2020;
                        this.recordContainsClause();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2021;
                        this.labelRecordsClause();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2022;
                        this.valueOfClause();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2023;
                        this.dataRecordsClause();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 2024;
                        this.linageClause();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 2025;
                        this.codeSetClause();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 2026;
                        this.reportClause();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 2027;
                        this.recordingModeClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.externalClause = function () {
        var _localctx = new ExternalClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, Cobol85Parser.RULE_externalClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2031;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2030;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2033;
                this.match(Cobol85Parser.EXTERNAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.globalClause = function () {
        var _localctx = new GlobalClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, Cobol85Parser.RULE_globalClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2036;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2035;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2038;
                this.match(Cobol85Parser.GLOBAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.blockContainsClause = function () {
        var _localctx = new BlockContainsClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, Cobol85Parser.RULE_blockContainsClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2040;
                this.match(Cobol85Parser.BLOCK);
                this.state = 2042;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CONTAINS) {
                    {
                        this.state = 2041;
                        this.match(Cobol85Parser.CONTAINS);
                    }
                }
                this.state = 2044;
                this.integerLiteral();
                this.state = 2046;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TO) {
                    {
                        this.state = 2045;
                        this.blockContainsTo();
                    }
                }
                this.state = 2049;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.RECORDS) {
                    {
                        this.state = 2048;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.RECORDS)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.blockContainsTo = function () {
        var _localctx = new BlockContainsToContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, Cobol85Parser.RULE_blockContainsTo);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2051;
                this.match(Cobol85Parser.TO);
                this.state = 2052;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.recordContainsClause = function () {
        var _localctx = new RecordContainsClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, Cobol85Parser.RULE_recordContainsClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2054;
                this.match(Cobol85Parser.RECORD);
                this.state = 2058;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 177, this._ctx)) {
                    case 1:
                        {
                            this.state = 2055;
                            this.recordContainsClauseFormat1();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2056;
                            this.recordContainsClauseFormat2();
                        }
                        break;
                    case 3:
                        {
                            this.state = 2057;
                            this.recordContainsClauseFormat3();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.recordContainsClauseFormat1 = function () {
        var _localctx = new RecordContainsClauseFormat1Context(this._ctx, this.state);
        this.enterRule(_localctx, 174, Cobol85Parser.RULE_recordContainsClauseFormat1);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2061;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CONTAINS) {
                    {
                        this.state = 2060;
                        this.match(Cobol85Parser.CONTAINS);
                    }
                }
                this.state = 2063;
                this.integerLiteral();
                this.state = 2065;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CHARACTERS) {
                    {
                        this.state = 2064;
                        this.match(Cobol85Parser.CHARACTERS);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.recordContainsClauseFormat2 = function () {
        var _localctx = new RecordContainsClauseFormat2Context(this._ctx, this.state);
        this.enterRule(_localctx, 176, Cobol85Parser.RULE_recordContainsClauseFormat2);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2068;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2067;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2070;
                this.match(Cobol85Parser.VARYING);
                this.state = 2072;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IN) {
                    {
                        this.state = 2071;
                        this.match(Cobol85Parser.IN);
                    }
                }
                this.state = 2075;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SIZE) {
                    {
                        this.state = 2074;
                        this.match(Cobol85Parser.SIZE);
                    }
                }
                this.state = 2087;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FROM || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
                    {
                        this.state = 2078;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.FROM) {
                            {
                                this.state = 2077;
                                this.match(Cobol85Parser.FROM);
                            }
                        }
                        this.state = 2080;
                        this.integerLiteral();
                        this.state = 2082;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.TO) {
                            {
                                this.state = 2081;
                                this.recordContainsTo();
                            }
                        }
                        this.state = 2085;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.CHARACTERS) {
                            {
                                this.state = 2084;
                                this.match(Cobol85Parser.CHARACTERS);
                            }
                        }
                    }
                }
                this.state = 2094;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DEPENDING) {
                    {
                        this.state = 2089;
                        this.match(Cobol85Parser.DEPENDING);
                        this.state = 2091;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.ON) {
                            {
                                this.state = 2090;
                                this.match(Cobol85Parser.ON);
                            }
                        }
                        this.state = 2093;
                        this.qualifiedDataName();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.recordContainsClauseFormat3 = function () {
        var _localctx = new RecordContainsClauseFormat3Context(this._ctx, this.state);
        this.enterRule(_localctx, 178, Cobol85Parser.RULE_recordContainsClauseFormat3);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2097;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CONTAINS) {
                    {
                        this.state = 2096;
                        this.match(Cobol85Parser.CONTAINS);
                    }
                }
                this.state = 2099;
                this.integerLiteral();
                this.state = 2100;
                this.recordContainsTo();
                this.state = 2102;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CHARACTERS) {
                    {
                        this.state = 2101;
                        this.match(Cobol85Parser.CHARACTERS);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.recordContainsTo = function () {
        var _localctx = new RecordContainsToContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, Cobol85Parser.RULE_recordContainsTo);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2104;
                this.match(Cobol85Parser.TO);
                this.state = 2105;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.labelRecordsClause = function () {
        var _localctx = new LabelRecordsClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, Cobol85Parser.RULE_labelRecordsClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2107;
                this.match(Cobol85Parser.LABEL);
                this.state = 2116;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.RECORD:
                        {
                            this.state = 2108;
                            this.match(Cobol85Parser.RECORD);
                            this.state = 2110;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.IS) {
                                {
                                    this.state = 2109;
                                    this.match(Cobol85Parser.IS);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.RECORDS:
                        {
                            this.state = 2112;
                            this.match(Cobol85Parser.RECORDS);
                            this.state = 2114;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.ARE) {
                                {
                                    this.state = 2113;
                                    this.match(Cobol85Parser.ARE);
                                }
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 2125;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.OMITTED:
                        {
                            this.state = 2118;
                            this.match(Cobol85Parser.OMITTED);
                        }
                        break;
                    case Cobol85Parser.STANDARD:
                        {
                            this.state = 2119;
                            this.match(Cobol85Parser.STANDARD);
                        }
                        break;
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 2121;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    {
                                        this.state = 2120;
                                        this.dataName();
                                    }
                                }
                                this.state = 2123;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.valueOfClause = function () {
        var _localctx = new ValueOfClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, Cobol85Parser.RULE_valueOfClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2127;
                this.match(Cobol85Parser.VALUE);
                this.state = 2128;
                this.match(Cobol85Parser.OF);
                this.state = 2130;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 2129;
                            this.valuePair();
                        }
                    }
                    this.state = 2132;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.valuePair = function () {
        var _localctx = new ValuePairContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, Cobol85Parser.RULE_valuePair);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2134;
                this.systemName();
                this.state = 2136;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2135;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2140;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 198, this._ctx)) {
                    case 1:
                        {
                            this.state = 2138;
                            this.qualifiedDataName();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2139;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataRecordsClause = function () {
        var _localctx = new DataRecordsClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, Cobol85Parser.RULE_dataRecordsClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2142;
                this.match(Cobol85Parser.DATA);
                this.state = 2151;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.RECORD:
                        {
                            this.state = 2143;
                            this.match(Cobol85Parser.RECORD);
                            this.state = 2145;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.IS) {
                                {
                                    this.state = 2144;
                                    this.match(Cobol85Parser.IS);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.RECORDS:
                        {
                            this.state = 2147;
                            this.match(Cobol85Parser.RECORDS);
                            this.state = 2149;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.ARE) {
                                {
                                    this.state = 2148;
                                    this.match(Cobol85Parser.ARE);
                                }
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 2154;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 2153;
                            this.dataName();
                        }
                    }
                    this.state = 2156;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.linageClause = function () {
        var _localctx = new LinageClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, Cobol85Parser.RULE_linageClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2158;
                this.match(Cobol85Parser.LINAGE);
                this.state = 2160;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2159;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2164;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 2162;
                            this.dataName();
                        }
                        break;
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                        {
                            this.state = 2163;
                            this.integerLiteral();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 2167;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 205, this._ctx)) {
                    case 1:
                        {
                            this.state = 2166;
                            this.match(Cobol85Parser.LINES);
                        }
                        break;
                }
                this.state = 2172;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.AT || _la === Cobol85Parser.BOTTOM || _la === Cobol85Parser.FOOTING || _la === Cobol85Parser.LINES || _la === Cobol85Parser.TOP || _la === Cobol85Parser.WITH) {
                    {
                        {
                            this.state = 2169;
                            this.linageAt();
                        }
                    }
                    this.state = 2174;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.linageAt = function () {
        var _localctx = new LinageAtContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, Cobol85Parser.RULE_linageAt);
        try {
            this.state = 2178;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 207, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2175;
                        this.linageFootingAt();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2176;
                        this.linageLinesAtTop();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2177;
                        this.linageLinesAtBottom();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.linageFootingAt = function () {
        var _localctx = new LinageFootingAtContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, Cobol85Parser.RULE_linageFootingAt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2181;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 2180;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 2183;
                this.match(Cobol85Parser.FOOTING);
                this.state = 2185;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AT) {
                    {
                        this.state = 2184;
                        this.match(Cobol85Parser.AT);
                    }
                }
                this.state = 2189;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 2187;
                            this.dataName();
                        }
                        break;
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                        {
                            this.state = 2188;
                            this.integerLiteral();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.linageLinesAtTop = function () {
        var _localctx = new LinageLinesAtTopContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, Cobol85Parser.RULE_linageLinesAtTop);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2192;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LINES) {
                    {
                        this.state = 2191;
                        this.match(Cobol85Parser.LINES);
                    }
                }
                this.state = 2195;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AT) {
                    {
                        this.state = 2194;
                        this.match(Cobol85Parser.AT);
                    }
                }
                this.state = 2197;
                this.match(Cobol85Parser.TOP);
                this.state = 2200;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 2198;
                            this.dataName();
                        }
                        break;
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                        {
                            this.state = 2199;
                            this.integerLiteral();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.linageLinesAtBottom = function () {
        var _localctx = new LinageLinesAtBottomContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, Cobol85Parser.RULE_linageLinesAtBottom);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2203;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LINES) {
                    {
                        this.state = 2202;
                        this.match(Cobol85Parser.LINES);
                    }
                }
                this.state = 2206;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AT) {
                    {
                        this.state = 2205;
                        this.match(Cobol85Parser.AT);
                    }
                }
                this.state = 2208;
                this.match(Cobol85Parser.BOTTOM);
                this.state = 2211;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 2209;
                            this.dataName();
                        }
                        break;
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                        {
                            this.state = 2210;
                            this.integerLiteral();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.recordingModeClause = function () {
        var _localctx = new RecordingModeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 200, Cobol85Parser.RULE_recordingModeClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2213;
                this.match(Cobol85Parser.RECORDING);
                this.state = 2215;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.MODE) {
                    {
                        this.state = 2214;
                        this.match(Cobol85Parser.MODE);
                    }
                }
                this.state = 2218;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2217;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2220;
                this.modeStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.modeStatement = function () {
        var _localctx = new ModeStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, Cobol85Parser.RULE_modeStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2222;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.codeSetClause = function () {
        var _localctx = new CodeSetClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 204, Cobol85Parser.RULE_codeSetClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2224;
                this.match(Cobol85Parser.CODE_SET);
                this.state = 2226;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2225;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2228;
                this.alphabetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportClause = function () {
        var _localctx = new ReportClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 206, Cobol85Parser.RULE_reportClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2238;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.REPORT:
                        {
                            this.state = 2230;
                            this.match(Cobol85Parser.REPORT);
                            this.state = 2232;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.IS) {
                                {
                                    this.state = 2231;
                                    this.match(Cobol85Parser.IS);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.REPORTS:
                        {
                            this.state = 2234;
                            this.match(Cobol85Parser.REPORTS);
                            this.state = 2236;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.ARE) {
                                {
                                    this.state = 2235;
                                    this.match(Cobol85Parser.ARE);
                                }
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 2241;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 2240;
                            this.reportName();
                        }
                    }
                    this.state = 2243;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataBaseSection = function () {
        var _localctx = new DataBaseSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 208, Cobol85Parser.RULE_dataBaseSection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2245;
                this.match(Cobol85Parser.DATA_BASE);
                this.state = 2246;
                this.match(Cobol85Parser.SECTION);
                this.state = 2247;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 2251;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
                    {
                        {
                            this.state = 2248;
                            this.dataBaseSectionEntry();
                        }
                    }
                    this.state = 2253;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataBaseSectionEntry = function () {
        var _localctx = new DataBaseSectionEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 210, Cobol85Parser.RULE_dataBaseSectionEntry);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2254;
                this.integerLiteral();
                this.state = 2255;
                this.literal();
                this.state = 2256;
                this.match(Cobol85Parser.INVOKE);
                this.state = 2257;
                this.literal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.workingStorageSection = function () {
        var _localctx = new WorkingStorageSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 212, Cobol85Parser.RULE_workingStorageSection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2259;
                this.match(Cobol85Parser.WORKING_STORAGE);
                this.state = 2260;
                this.match(Cobol85Parser.SECTION);
                this.state = 2261;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 2265;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
                    {
                        {
                            this.state = 2262;
                            this.dataDescriptionEntry();
                        }
                    }
                    this.state = 2267;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.linkageSection = function () {
        var _localctx = new LinkageSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 214, Cobol85Parser.RULE_linkageSection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2268;
                this.match(Cobol85Parser.LINKAGE);
                this.state = 2269;
                this.match(Cobol85Parser.SECTION);
                this.state = 2270;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 2274;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
                    {
                        {
                            this.state = 2271;
                            this.dataDescriptionEntry();
                        }
                    }
                    this.state = 2276;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.communicationSection = function () {
        var _localctx = new CommunicationSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, Cobol85Parser.RULE_communicationSection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2277;
                this.match(Cobol85Parser.COMMUNICATION);
                this.state = 2278;
                this.match(Cobol85Parser.SECTION);
                this.state = 2279;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 2284;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.CD || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
                    {
                        this.state = 2282;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Cobol85Parser.CD:
                                {
                                    this.state = 2280;
                                    this.communicationDescriptionEntry();
                                }
                                break;
                            case Cobol85Parser.LEVEL_NUMBER_66:
                            case Cobol85Parser.LEVEL_NUMBER_77:
                            case Cobol85Parser.LEVEL_NUMBER_88:
                            case Cobol85Parser.INTEGERLITERAL:
                            case Cobol85Parser.EXECSQLLINE:
                                {
                                    this.state = 2281;
                                    this.dataDescriptionEntry();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 2286;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.communicationDescriptionEntry = function () {
        var _localctx = new CommunicationDescriptionEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, Cobol85Parser.RULE_communicationDescriptionEntry);
        try {
            this.state = 2290;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 229, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2287;
                        this.communicationDescriptionEntryFormat1();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2288;
                        this.communicationDescriptionEntryFormat2();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2289;
                        this.communicationDescriptionEntryFormat3();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.communicationDescriptionEntryFormat1 = function () {
        var _localctx = new CommunicationDescriptionEntryFormat1Context(this._ctx, this.state);
        this.enterRule(_localctx, 220, Cobol85Parser.RULE_communicationDescriptionEntryFormat1);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2292;
                this.match(Cobol85Parser.CD);
                this.state = 2293;
                this.cdName();
                this.state = 2295;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 2294;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 2298;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.INITIAL) {
                    {
                        this.state = 2297;
                        this.match(Cobol85Parser.INITIAL);
                    }
                }
                this.state = 2300;
                this.match(Cobol85Parser.INPUT);
                this.state = 2315;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.COUNT - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)) | (1 << (Cobol85Parser.END - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FILLER - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MESSAGE - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUEUE - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SOURCE - 431)) | (1 << (Cobol85Parser.STATUS - 431)) | (1 << (Cobol85Parser.SUB_QUEUE_1 - 431)) | (1 << (Cobol85Parser.SUB_QUEUE_2 - 431)) | (1 << (Cobol85Parser.SUB_QUEUE_3 - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.TEXT - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
                    {
                        this.state = 2313;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Cobol85Parser.COUNT:
                            case Cobol85Parser.END:
                            case Cobol85Parser.MESSAGE:
                            case Cobol85Parser.QUEUE:
                            case Cobol85Parser.SOURCE:
                            case Cobol85Parser.STATUS:
                            case Cobol85Parser.SUB_QUEUE_1:
                            case Cobol85Parser.SUB_QUEUE_2:
                            case Cobol85Parser.SUB_QUEUE_3:
                            case Cobol85Parser.SYMBOLIC:
                            case Cobol85Parser.TEXT:
                                {
                                    this.state = 2310;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 232, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 2301;
                                                this.symbolicQueueClause();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 2302;
                                                this.symbolicSubQueueClause();
                                            }
                                            break;
                                        case 3:
                                            {
                                                this.state = 2303;
                                                this.messageDateClause();
                                            }
                                            break;
                                        case 4:
                                            {
                                                this.state = 2304;
                                                this.messageTimeClause();
                                            }
                                            break;
                                        case 5:
                                            {
                                                this.state = 2305;
                                                this.symbolicSourceClause();
                                            }
                                            break;
                                        case 6:
                                            {
                                                this.state = 2306;
                                                this.textLengthClause();
                                            }
                                            break;
                                        case 7:
                                            {
                                                this.state = 2307;
                                                this.endKeyClause();
                                            }
                                            break;
                                        case 8:
                                            {
                                                this.state = 2308;
                                                this.statusKeyClause();
                                            }
                                            break;
                                        case 9:
                                            {
                                                this.state = 2309;
                                                this.messageCountClause();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case Cobol85Parser.ABORT:
                            case Cobol85Parser.AS:
                            case Cobol85Parser.ASCII:
                            case Cobol85Parser.ASSOCIATED_DATA:
                            case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                            case Cobol85Parser.ATTRIBUTE:
                            case Cobol85Parser.AUTO:
                            case Cobol85Parser.AUTO_SKIP:
                            case Cobol85Parser.BACKGROUND_COLOR:
                            case Cobol85Parser.BACKGROUND_COLOUR:
                            case Cobol85Parser.BEEP:
                            case Cobol85Parser.BELL:
                            case Cobol85Parser.BINARY:
                            case Cobol85Parser.BIT:
                            case Cobol85Parser.BLINK:
                            case Cobol85Parser.BOUNDS:
                            case Cobol85Parser.CAPABLE:
                            case Cobol85Parser.CCSVERSION:
                            case Cobol85Parser.CHANGED:
                            case Cobol85Parser.CHANNEL:
                            case Cobol85Parser.CLOSE_DISPOSITION:
                            case Cobol85Parser.COBOL:
                            case Cobol85Parser.COMMITMENT:
                            case Cobol85Parser.CONTROL_POINT:
                            case Cobol85Parser.CONVENTION:
                            case Cobol85Parser.CRUNCH:
                            case Cobol85Parser.CURSOR:
                            case Cobol85Parser.DEFAULT:
                            case Cobol85Parser.DEFAULT_DISPLAY:
                            case Cobol85Parser.DEFINITION:
                            case Cobol85Parser.DFHRESP:
                            case Cobol85Parser.DFHVALUE:
                            case Cobol85Parser.DISK:
                            case Cobol85Parser.DONTCARE:
                            case Cobol85Parser.DOUBLE:
                            case Cobol85Parser.EBCDIC:
                            case Cobol85Parser.EMPTY_CHECK:
                            case Cobol85Parser.ENTER:
                            case Cobol85Parser.ENTRY_PROCEDURE:
                            case Cobol85Parser.ERASE:
                            case Cobol85Parser.EOL:
                            case Cobol85Parser.EOS:
                            case Cobol85Parser.ESCAPE:
                            case Cobol85Parser.EVENT:
                            case Cobol85Parser.EXCLUSIVE:
                            case Cobol85Parser.EXPORT:
                            case Cobol85Parser.EXTENDED:
                            case Cobol85Parser.FILLER:
                            case Cobol85Parser.FOREGROUND_COLOR:
                            case Cobol85Parser.FOREGROUND_COLOUR:
                            case Cobol85Parser.FULL:
                            case Cobol85Parser.FUNCTIONNAME:
                            case Cobol85Parser.FUNCTION_POINTER:
                            case Cobol85Parser.GRID:
                            case Cobol85Parser.HIGHLIGHT:
                            case Cobol85Parser.IMPLICIT:
                            case Cobol85Parser.IMPORT:
                            case Cobol85Parser.INTEGER:
                            case Cobol85Parser.KEPT:
                            case Cobol85Parser.KEYBOARD:
                            case Cobol85Parser.LANGUAGE:
                            case Cobol85Parser.LB:
                            case Cobol85Parser.LD:
                            case Cobol85Parser.LEFTLINE:
                            case Cobol85Parser.LENGTH_CHECK:
                            case Cobol85Parser.LIBACCESS:
                            case Cobol85Parser.LIBPARAMETER:
                            case Cobol85Parser.LIBRARY:
                            case Cobol85Parser.LIST:
                            case Cobol85Parser.LOCAL:
                            case Cobol85Parser.LONG_DATE:
                            case Cobol85Parser.LONG_TIME:
                            case Cobol85Parser.LOWER:
                            case Cobol85Parser.LOWLIGHT:
                            case Cobol85Parser.MMDDYYYY:
                            case Cobol85Parser.NAMED:
                            case Cobol85Parser.NATIONAL:
                            case Cobol85Parser.NATIONAL_EDITED:
                            case Cobol85Parser.NETWORK:
                            case Cobol85Parser.NO_ECHO:
                            case Cobol85Parser.NUMERIC_DATE:
                            case Cobol85Parser.NUMERIC_TIME:
                            case Cobol85Parser.ODT:
                            case Cobol85Parser.ORDERLY:
                            case Cobol85Parser.OVERLINE:
                            case Cobol85Parser.OWN:
                            case Cobol85Parser.PASSWORD:
                            case Cobol85Parser.PORT:
                            case Cobol85Parser.PRINTER:
                            case Cobol85Parser.PRIVATE:
                            case Cobol85Parser.PROCESS:
                            case Cobol85Parser.PROGRAM:
                            case Cobol85Parser.PROMPT:
                            case Cobol85Parser.READER:
                            case Cobol85Parser.REMOTE:
                            case Cobol85Parser.REAL:
                            case Cobol85Parser.RECEIVED:
                            case Cobol85Parser.RECURSIVE:
                            case Cobol85Parser.REF:
                            case Cobol85Parser.REMOVE:
                            case Cobol85Parser.REQUIRED:
                            case Cobol85Parser.REVERSE_VIDEO:
                            case Cobol85Parser.SAVE:
                            case Cobol85Parser.SECURE:
                            case Cobol85Parser.SHARED:
                            case Cobol85Parser.SHAREDBYALL:
                            case Cobol85Parser.SHAREDBYRUNUNIT:
                            case Cobol85Parser.SHARING:
                            case Cobol85Parser.SHORT_DATE:
                            case Cobol85Parser.SYMBOL:
                            case Cobol85Parser.TASK:
                            case Cobol85Parser.THREAD:
                            case Cobol85Parser.THREAD_LOCAL:
                            case Cobol85Parser.TIMER:
                            case Cobol85Parser.TODAYS_DATE:
                            case Cobol85Parser.TODAYS_NAME:
                            case Cobol85Parser.TRUNCATED:
                            case Cobol85Parser.TYPEDEF:
                            case Cobol85Parser.UNDERLINE:
                            case Cobol85Parser.VIRTUAL:
                            case Cobol85Parser.WAIT:
                            case Cobol85Parser.YEAR:
                            case Cobol85Parser.YYYYMMDD:
                            case Cobol85Parser.YYYYDDD:
                            case Cobol85Parser.ZERO_FILL:
                            case Cobol85Parser.IDENTIFIER:
                                {
                                    this.state = 2312;
                                    this.dataDescName();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 2317;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2318;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.communicationDescriptionEntryFormat2 = function () {
        var _localctx = new CommunicationDescriptionEntryFormat2Context(this._ctx, this.state);
        this.enterRule(_localctx, 222, Cobol85Parser.RULE_communicationDescriptionEntryFormat2);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2320;
                this.match(Cobol85Parser.CD);
                this.state = 2321;
                this.cdName();
                this.state = 2323;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 2322;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 2325;
                this.match(Cobol85Parser.OUTPUT);
                this.state = 2334;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.DESTINATION || _la === Cobol85Parser.ERROR || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & ((1 << (Cobol85Parser.STATUS - 457)) | (1 << (Cobol85Parser.SYMBOLIC - 457)) | (1 << (Cobol85Parser.TEXT - 457)))) !== 0)) {
                    {
                        this.state = 2332;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 236, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2326;
                                    this.destinationCountClause();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 2327;
                                    this.textLengthClause();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 2328;
                                    this.statusKeyClause();
                                }
                                break;
                            case 4:
                                {
                                    this.state = 2329;
                                    this.destinationTableClause();
                                }
                                break;
                            case 5:
                                {
                                    this.state = 2330;
                                    this.errorKeyClause();
                                }
                                break;
                            case 6:
                                {
                                    this.state = 2331;
                                    this.symbolicDestinationClause();
                                }
                                break;
                        }
                    }
                    this.state = 2336;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2337;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.communicationDescriptionEntryFormat3 = function () {
        var _localctx = new CommunicationDescriptionEntryFormat3Context(this._ctx, this.state);
        this.enterRule(_localctx, 224, Cobol85Parser.RULE_communicationDescriptionEntryFormat3);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2339;
                this.match(Cobol85Parser.CD);
                this.state = 2340;
                this.cdName();
                this.state = 2342;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 2341;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 2344;
                this.match(Cobol85Parser.INITIAL);
                this.state = 2345;
                this.match(Cobol85Parser.I_O);
                this.state = 2357;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)) | (1 << (Cobol85Parser.END - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FILLER - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MESSAGE - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.STATUS - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.TERMINAL - 466)) | (1 << (Cobol85Parser.TEXT - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
                    {
                        this.state = 2355;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Cobol85Parser.END:
                            case Cobol85Parser.MESSAGE:
                            case Cobol85Parser.STATUS:
                            case Cobol85Parser.SYMBOLIC:
                            case Cobol85Parser.TERMINAL:
                            case Cobol85Parser.TEXT:
                                {
                                    this.state = 2352;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 239, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 2346;
                                                this.messageDateClause();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 2347;
                                                this.messageTimeClause();
                                            }
                                            break;
                                        case 3:
                                            {
                                                this.state = 2348;
                                                this.symbolicTerminalClause();
                                            }
                                            break;
                                        case 4:
                                            {
                                                this.state = 2349;
                                                this.textLengthClause();
                                            }
                                            break;
                                        case 5:
                                            {
                                                this.state = 2350;
                                                this.endKeyClause();
                                            }
                                            break;
                                        case 6:
                                            {
                                                this.state = 2351;
                                                this.statusKeyClause();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case Cobol85Parser.ABORT:
                            case Cobol85Parser.AS:
                            case Cobol85Parser.ASCII:
                            case Cobol85Parser.ASSOCIATED_DATA:
                            case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                            case Cobol85Parser.ATTRIBUTE:
                            case Cobol85Parser.AUTO:
                            case Cobol85Parser.AUTO_SKIP:
                            case Cobol85Parser.BACKGROUND_COLOR:
                            case Cobol85Parser.BACKGROUND_COLOUR:
                            case Cobol85Parser.BEEP:
                            case Cobol85Parser.BELL:
                            case Cobol85Parser.BINARY:
                            case Cobol85Parser.BIT:
                            case Cobol85Parser.BLINK:
                            case Cobol85Parser.BOUNDS:
                            case Cobol85Parser.CAPABLE:
                            case Cobol85Parser.CCSVERSION:
                            case Cobol85Parser.CHANGED:
                            case Cobol85Parser.CHANNEL:
                            case Cobol85Parser.CLOSE_DISPOSITION:
                            case Cobol85Parser.COBOL:
                            case Cobol85Parser.COMMITMENT:
                            case Cobol85Parser.CONTROL_POINT:
                            case Cobol85Parser.CONVENTION:
                            case Cobol85Parser.CRUNCH:
                            case Cobol85Parser.CURSOR:
                            case Cobol85Parser.DEFAULT:
                            case Cobol85Parser.DEFAULT_DISPLAY:
                            case Cobol85Parser.DEFINITION:
                            case Cobol85Parser.DFHRESP:
                            case Cobol85Parser.DFHVALUE:
                            case Cobol85Parser.DISK:
                            case Cobol85Parser.DONTCARE:
                            case Cobol85Parser.DOUBLE:
                            case Cobol85Parser.EBCDIC:
                            case Cobol85Parser.EMPTY_CHECK:
                            case Cobol85Parser.ENTER:
                            case Cobol85Parser.ENTRY_PROCEDURE:
                            case Cobol85Parser.ERASE:
                            case Cobol85Parser.EOL:
                            case Cobol85Parser.EOS:
                            case Cobol85Parser.ESCAPE:
                            case Cobol85Parser.EVENT:
                            case Cobol85Parser.EXCLUSIVE:
                            case Cobol85Parser.EXPORT:
                            case Cobol85Parser.EXTENDED:
                            case Cobol85Parser.FILLER:
                            case Cobol85Parser.FOREGROUND_COLOR:
                            case Cobol85Parser.FOREGROUND_COLOUR:
                            case Cobol85Parser.FULL:
                            case Cobol85Parser.FUNCTIONNAME:
                            case Cobol85Parser.FUNCTION_POINTER:
                            case Cobol85Parser.GRID:
                            case Cobol85Parser.HIGHLIGHT:
                            case Cobol85Parser.IMPLICIT:
                            case Cobol85Parser.IMPORT:
                            case Cobol85Parser.INTEGER:
                            case Cobol85Parser.KEPT:
                            case Cobol85Parser.KEYBOARD:
                            case Cobol85Parser.LANGUAGE:
                            case Cobol85Parser.LB:
                            case Cobol85Parser.LD:
                            case Cobol85Parser.LEFTLINE:
                            case Cobol85Parser.LENGTH_CHECK:
                            case Cobol85Parser.LIBACCESS:
                            case Cobol85Parser.LIBPARAMETER:
                            case Cobol85Parser.LIBRARY:
                            case Cobol85Parser.LIST:
                            case Cobol85Parser.LOCAL:
                            case Cobol85Parser.LONG_DATE:
                            case Cobol85Parser.LONG_TIME:
                            case Cobol85Parser.LOWER:
                            case Cobol85Parser.LOWLIGHT:
                            case Cobol85Parser.MMDDYYYY:
                            case Cobol85Parser.NAMED:
                            case Cobol85Parser.NATIONAL:
                            case Cobol85Parser.NATIONAL_EDITED:
                            case Cobol85Parser.NETWORK:
                            case Cobol85Parser.NO_ECHO:
                            case Cobol85Parser.NUMERIC_DATE:
                            case Cobol85Parser.NUMERIC_TIME:
                            case Cobol85Parser.ODT:
                            case Cobol85Parser.ORDERLY:
                            case Cobol85Parser.OVERLINE:
                            case Cobol85Parser.OWN:
                            case Cobol85Parser.PASSWORD:
                            case Cobol85Parser.PORT:
                            case Cobol85Parser.PRINTER:
                            case Cobol85Parser.PRIVATE:
                            case Cobol85Parser.PROCESS:
                            case Cobol85Parser.PROGRAM:
                            case Cobol85Parser.PROMPT:
                            case Cobol85Parser.READER:
                            case Cobol85Parser.REMOTE:
                            case Cobol85Parser.REAL:
                            case Cobol85Parser.RECEIVED:
                            case Cobol85Parser.RECURSIVE:
                            case Cobol85Parser.REF:
                            case Cobol85Parser.REMOVE:
                            case Cobol85Parser.REQUIRED:
                            case Cobol85Parser.REVERSE_VIDEO:
                            case Cobol85Parser.SAVE:
                            case Cobol85Parser.SECURE:
                            case Cobol85Parser.SHARED:
                            case Cobol85Parser.SHAREDBYALL:
                            case Cobol85Parser.SHAREDBYRUNUNIT:
                            case Cobol85Parser.SHARING:
                            case Cobol85Parser.SHORT_DATE:
                            case Cobol85Parser.SYMBOL:
                            case Cobol85Parser.TASK:
                            case Cobol85Parser.THREAD:
                            case Cobol85Parser.THREAD_LOCAL:
                            case Cobol85Parser.TIMER:
                            case Cobol85Parser.TODAYS_DATE:
                            case Cobol85Parser.TODAYS_NAME:
                            case Cobol85Parser.TRUNCATED:
                            case Cobol85Parser.TYPEDEF:
                            case Cobol85Parser.UNDERLINE:
                            case Cobol85Parser.VIRTUAL:
                            case Cobol85Parser.WAIT:
                            case Cobol85Parser.YEAR:
                            case Cobol85Parser.YYYYMMDD:
                            case Cobol85Parser.YYYYDDD:
                            case Cobol85Parser.ZERO_FILL:
                            case Cobol85Parser.IDENTIFIER:
                                {
                                    this.state = 2354;
                                    this.dataDescName();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 2359;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2360;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.destinationCountClause = function () {
        var _localctx = new DestinationCountClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, Cobol85Parser.RULE_destinationCountClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2362;
                this.match(Cobol85Parser.DESTINATION);
                this.state = 2363;
                this.match(Cobol85Parser.COUNT);
                this.state = 2365;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2364;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2367;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.destinationTableClause = function () {
        var _localctx = new DestinationTableClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, Cobol85Parser.RULE_destinationTableClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2369;
                this.match(Cobol85Parser.DESTINATION);
                this.state = 2370;
                this.match(Cobol85Parser.TABLE);
                this.state = 2371;
                this.match(Cobol85Parser.OCCURS);
                this.state = 2372;
                this.integerLiteral();
                this.state = 2373;
                this.match(Cobol85Parser.TIMES);
                this.state = 2381;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.INDEXED) {
                    {
                        this.state = 2374;
                        this.match(Cobol85Parser.INDEXED);
                        this.state = 2375;
                        this.match(Cobol85Parser.BY);
                        this.state = 2377;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 2376;
                                    this.indexName();
                                }
                            }
                            this.state = 2379;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.endKeyClause = function () {
        var _localctx = new EndKeyClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, Cobol85Parser.RULE_endKeyClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2383;
                this.match(Cobol85Parser.END);
                this.state = 2384;
                this.match(Cobol85Parser.KEY);
                this.state = 2386;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2385;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2388;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.errorKeyClause = function () {
        var _localctx = new ErrorKeyClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, Cobol85Parser.RULE_errorKeyClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2390;
                this.match(Cobol85Parser.ERROR);
                this.state = 2391;
                this.match(Cobol85Parser.KEY);
                this.state = 2393;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2392;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2395;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.messageCountClause = function () {
        var _localctx = new MessageCountClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, Cobol85Parser.RULE_messageCountClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2398;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.MESSAGE) {
                    {
                        this.state = 2397;
                        this.match(Cobol85Parser.MESSAGE);
                    }
                }
                this.state = 2400;
                this.match(Cobol85Parser.COUNT);
                this.state = 2402;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2401;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2404;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.messageDateClause = function () {
        var _localctx = new MessageDateClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, Cobol85Parser.RULE_messageDateClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2406;
                this.match(Cobol85Parser.MESSAGE);
                this.state = 2407;
                this.match(Cobol85Parser.DATE);
                this.state = 2409;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2408;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2411;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.messageTimeClause = function () {
        var _localctx = new MessageTimeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, Cobol85Parser.RULE_messageTimeClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2413;
                this.match(Cobol85Parser.MESSAGE);
                this.state = 2414;
                this.match(Cobol85Parser.TIME);
                this.state = 2416;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2415;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2418;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.statusKeyClause = function () {
        var _localctx = new StatusKeyClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, Cobol85Parser.RULE_statusKeyClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2420;
                this.match(Cobol85Parser.STATUS);
                this.state = 2421;
                this.match(Cobol85Parser.KEY);
                this.state = 2423;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2422;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2425;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.symbolicDestinationClause = function () {
        var _localctx = new SymbolicDestinationClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, Cobol85Parser.RULE_symbolicDestinationClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2428;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SYMBOLIC) {
                    {
                        this.state = 2427;
                        this.match(Cobol85Parser.SYMBOLIC);
                    }
                }
                this.state = 2430;
                this.match(Cobol85Parser.DESTINATION);
                this.state = 2432;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2431;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2434;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.symbolicQueueClause = function () {
        var _localctx = new SymbolicQueueClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, Cobol85Parser.RULE_symbolicQueueClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2437;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SYMBOLIC) {
                    {
                        this.state = 2436;
                        this.match(Cobol85Parser.SYMBOLIC);
                    }
                }
                this.state = 2439;
                this.match(Cobol85Parser.QUEUE);
                this.state = 2441;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2440;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2443;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.symbolicSourceClause = function () {
        var _localctx = new SymbolicSourceClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, Cobol85Parser.RULE_symbolicSourceClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2446;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SYMBOLIC) {
                    {
                        this.state = 2445;
                        this.match(Cobol85Parser.SYMBOLIC);
                    }
                }
                this.state = 2448;
                this.match(Cobol85Parser.SOURCE);
                this.state = 2450;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2449;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2452;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.symbolicTerminalClause = function () {
        var _localctx = new SymbolicTerminalClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, Cobol85Parser.RULE_symbolicTerminalClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2455;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SYMBOLIC) {
                    {
                        this.state = 2454;
                        this.match(Cobol85Parser.SYMBOLIC);
                    }
                }
                this.state = 2457;
                this.match(Cobol85Parser.TERMINAL);
                this.state = 2459;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2458;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2461;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.symbolicSubQueueClause = function () {
        var _localctx = new SymbolicSubQueueClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, Cobol85Parser.RULE_symbolicSubQueueClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2464;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SYMBOLIC) {
                    {
                        this.state = 2463;
                        this.match(Cobol85Parser.SYMBOLIC);
                    }
                }
                this.state = 2466;
                _la = this._input.LA(1);
                if (!(((((_la - 460)) & ~0x1F) === 0 && ((1 << (_la - 460)) & ((1 << (Cobol85Parser.SUB_QUEUE_1 - 460)) | (1 << (Cobol85Parser.SUB_QUEUE_2 - 460)) | (1 << (Cobol85Parser.SUB_QUEUE_3 - 460)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2468;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2467;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2470;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.textLengthClause = function () {
        var _localctx = new TextLengthClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, Cobol85Parser.RULE_textLengthClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2472;
                this.match(Cobol85Parser.TEXT);
                this.state = 2473;
                this.match(Cobol85Parser.LENGTH);
                this.state = 2475;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2474;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2477;
                this.dataDescName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.localStorageSection = function () {
        var _localctx = new LocalStorageSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, Cobol85Parser.RULE_localStorageSection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2479;
                this.match(Cobol85Parser.LOCAL_STORAGE);
                this.state = 2480;
                this.match(Cobol85Parser.SECTION);
                this.state = 2481;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 2486;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LD) {
                    {
                        this.state = 2482;
                        this.match(Cobol85Parser.LD);
                        this.state = 2483;
                        this.localName();
                        this.state = 2484;
                        this.match(Cobol85Parser.DOT_FS);
                    }
                }
                this.state = 2491;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
                    {
                        {
                            this.state = 2488;
                            this.dataDescriptionEntry();
                        }
                    }
                    this.state = 2493;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenSection = function () {
        var _localctx = new ScreenSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, Cobol85Parser.RULE_screenSection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2494;
                this.match(Cobol85Parser.SCREEN);
                this.state = 2495;
                this.match(Cobol85Parser.SECTION);
                this.state = 2496;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 2500;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.INTEGERLITERAL) {
                    {
                        {
                            this.state = 2497;
                            this.screenDescriptionEntry();
                        }
                    }
                    this.state = 2502;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionEntry = function () {
        var _localctx = new ScreenDescriptionEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, Cobol85Parser.RULE_screenDescriptionEntry);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2503;
                this.match(Cobol85Parser.INTEGERLITERAL);
                this.state = 2506;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 266, this._ctx)) {
                    case 1:
                        {
                            this.state = 2504;
                            this.match(Cobol85Parser.FILLER);
                        }
                        break;
                    case 2:
                        {
                            this.state = 2505;
                            this.screenName();
                        }
                        break;
                }
                this.state = 2540;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BLANK - 33)) | (1 << (Cobol85Parser.BLINK - 33)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (Cobol85Parser.COL - 73)) | (1 << (Cobol85Parser.COLUMN - 73)) | (1 << (Cobol85Parser.CONTROL - 73)))) !== 0) || _la === Cobol85Parser.EMPTY_CHECK || _la === Cobol85Parser.ERASE || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FROM - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)))) !== 0) || ((((_la - 255)) & ~0x1F) === 0 && ((1 << (_la - 255)) & ((1 << (Cobol85Parser.JUST - 255)) | (1 << (Cobol85Parser.JUSTIFIED - 255)) | (1 << (Cobol85Parser.LEADING - 255)) | (1 << (Cobol85Parser.LEFTLINE - 255)) | (1 << (Cobol85Parser.LENGTH_CHECK - 255)) | (1 << (Cobol85Parser.LINE - 255)))) !== 0) || _la === Cobol85Parser.LOWLIGHT || _la === Cobol85Parser.NO_ECHO || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (Cobol85Parser.OVERLINE - 336)) | (1 << (Cobol85Parser.PIC - 336)) | (1 << (Cobol85Parser.PICTURE - 336)) | (1 << (Cobol85Parser.PROMPT - 336)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (Cobol85Parser.REQUIRED - 398)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 398)) | (1 << (Cobol85Parser.SECURE - 398)))) !== 0) || _la === Cobol85Parser.SIGN || _la === Cobol85Parser.SIZE || ((((_la - 493)) & ~0x1F) === 0 && ((1 << (_la - 493)) & ((1 << (Cobol85Parser.TRAILING - 493)) | (1 << (Cobol85Parser.UNDERLINE - 493)) | (1 << (Cobol85Parser.USAGE - 493)) | (1 << (Cobol85Parser.USING - 493)) | (1 << (Cobol85Parser.VALUE - 493)) | (1 << (Cobol85Parser.ZERO_FILL - 493)))) !== 0)) {
                    {
                        this.state = 2538;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 268, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2508;
                                    this.screenDescriptionBlankClause();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 2509;
                                    this.screenDescriptionBellClause();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 2510;
                                    this.screenDescriptionBlinkClause();
                                }
                                break;
                            case 4:
                                {
                                    this.state = 2511;
                                    this.screenDescriptionEraseClause();
                                }
                                break;
                            case 5:
                                {
                                    this.state = 2512;
                                    this.screenDescriptionLightClause();
                                }
                                break;
                            case 6:
                                {
                                    this.state = 2513;
                                    this.screenDescriptionGridClause();
                                }
                                break;
                            case 7:
                                {
                                    this.state = 2514;
                                    this.screenDescriptionReverseVideoClause();
                                }
                                break;
                            case 8:
                                {
                                    this.state = 2515;
                                    this.screenDescriptionUnderlineClause();
                                }
                                break;
                            case 9:
                                {
                                    this.state = 2516;
                                    this.screenDescriptionSizeClause();
                                }
                                break;
                            case 10:
                                {
                                    this.state = 2517;
                                    this.screenDescriptionLineClause();
                                }
                                break;
                            case 11:
                                {
                                    this.state = 2518;
                                    this.screenDescriptionColumnClause();
                                }
                                break;
                            case 12:
                                {
                                    this.state = 2519;
                                    this.screenDescriptionForegroundColorClause();
                                }
                                break;
                            case 13:
                                {
                                    this.state = 2520;
                                    this.screenDescriptionBackgroundColorClause();
                                }
                                break;
                            case 14:
                                {
                                    this.state = 2521;
                                    this.screenDescriptionControlClause();
                                }
                                break;
                            case 15:
                                {
                                    this.state = 2522;
                                    this.screenDescriptionValueClause();
                                }
                                break;
                            case 16:
                                {
                                    this.state = 2523;
                                    this.screenDescriptionPictureClause();
                                }
                                break;
                            case 17:
                                {
                                    this.state = 2526;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case Cobol85Parser.FROM:
                                            {
                                                this.state = 2524;
                                                this.screenDescriptionFromClause();
                                            }
                                            break;
                                        case Cobol85Parser.USING:
                                            {
                                                this.state = 2525;
                                                this.screenDescriptionUsingClause();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                }
                                break;
                            case 18:
                                {
                                    this.state = 2528;
                                    this.screenDescriptionUsageClause();
                                }
                                break;
                            case 19:
                                {
                                    this.state = 2529;
                                    this.screenDescriptionBlankWhenZeroClause();
                                }
                                break;
                            case 20:
                                {
                                    this.state = 2530;
                                    this.screenDescriptionJustifiedClause();
                                }
                                break;
                            case 21:
                                {
                                    this.state = 2531;
                                    this.screenDescriptionSignClause();
                                }
                                break;
                            case 22:
                                {
                                    this.state = 2532;
                                    this.screenDescriptionAutoClause();
                                }
                                break;
                            case 23:
                                {
                                    this.state = 2533;
                                    this.screenDescriptionSecureClause();
                                }
                                break;
                            case 24:
                                {
                                    this.state = 2534;
                                    this.screenDescriptionRequiredClause();
                                }
                                break;
                            case 25:
                                {
                                    this.state = 2535;
                                    this.screenDescriptionPromptClause();
                                }
                                break;
                            case 26:
                                {
                                    this.state = 2536;
                                    this.screenDescriptionFullClause();
                                }
                                break;
                            case 27:
                                {
                                    this.state = 2537;
                                    this.screenDescriptionZeroFillClause();
                                }
                                break;
                        }
                    }
                    this.state = 2542;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2543;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionBlankClause = function () {
        var _localctx = new ScreenDescriptionBlankClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 260, Cobol85Parser.RULE_screenDescriptionBlankClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2545;
                this.match(Cobol85Parser.BLANK);
                this.state = 2546;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.LINE || _la === Cobol85Parser.SCREEN)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionBellClause = function () {
        var _localctx = new ScreenDescriptionBellClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, Cobol85Parser.RULE_screenDescriptionBellClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2548;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.BEEP || _la === Cobol85Parser.BELL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionBlinkClause = function () {
        var _localctx = new ScreenDescriptionBlinkClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, Cobol85Parser.RULE_screenDescriptionBlinkClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2550;
                this.match(Cobol85Parser.BLINK);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionEraseClause = function () {
        var _localctx = new ScreenDescriptionEraseClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 266, Cobol85Parser.RULE_screenDescriptionEraseClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2552;
                this.match(Cobol85Parser.ERASE);
                this.state = 2553;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.EOL || _la === Cobol85Parser.EOS)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionLightClause = function () {
        var _localctx = new ScreenDescriptionLightClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 268, Cobol85Parser.RULE_screenDescriptionLightClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2555;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.HIGHLIGHT || _la === Cobol85Parser.LOWLIGHT)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionGridClause = function () {
        var _localctx = new ScreenDescriptionGridClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, Cobol85Parser.RULE_screenDescriptionGridClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2557;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.GRID || _la === Cobol85Parser.LEFTLINE || _la === Cobol85Parser.OVERLINE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionReverseVideoClause = function () {
        var _localctx = new ScreenDescriptionReverseVideoClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, Cobol85Parser.RULE_screenDescriptionReverseVideoClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2559;
                this.match(Cobol85Parser.REVERSE_VIDEO);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionUnderlineClause = function () {
        var _localctx = new ScreenDescriptionUnderlineClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 274, Cobol85Parser.RULE_screenDescriptionUnderlineClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2561;
                this.match(Cobol85Parser.UNDERLINE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionSizeClause = function () {
        var _localctx = new ScreenDescriptionSizeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 276, Cobol85Parser.RULE_screenDescriptionSizeClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2563;
                this.match(Cobol85Parser.SIZE);
                this.state = 2565;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2564;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2569;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 271, this._ctx)) {
                    case 1:
                        {
                            this.state = 2567;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2568;
                            this.integerLiteral();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionLineClause = function () {
        var _localctx = new ScreenDescriptionLineClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 278, Cobol85Parser.RULE_screenDescriptionLineClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2571;
                this.match(Cobol85Parser.LINE);
                this.state = 2579;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS || _la === Cobol85Parser.NUMBER || _la === Cobol85Parser.PLUS || _la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR) {
                    {
                        this.state = 2573;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.NUMBER) {
                            {
                                this.state = 2572;
                                this.match(Cobol85Parser.NUMBER);
                            }
                        }
                        this.state = 2576;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 2575;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                        this.state = 2578;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.PLUS || _la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 2583;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 275, this._ctx)) {
                    case 1:
                        {
                            this.state = 2581;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2582;
                            this.integerLiteral();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionColumnClause = function () {
        var _localctx = new ScreenDescriptionColumnClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, Cobol85Parser.RULE_screenDescriptionColumnClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2585;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.COL || _la === Cobol85Parser.COLUMN)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2593;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS || _la === Cobol85Parser.NUMBER || _la === Cobol85Parser.PLUS || _la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR) {
                    {
                        this.state = 2587;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.NUMBER) {
                            {
                                this.state = 2586;
                                this.match(Cobol85Parser.NUMBER);
                            }
                        }
                        this.state = 2590;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 2589;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                        this.state = 2592;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.PLUS || _la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 2597;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 279, this._ctx)) {
                    case 1:
                        {
                            this.state = 2595;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2596;
                            this.integerLiteral();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionForegroundColorClause = function () {
        var _localctx = new ScreenDescriptionForegroundColorClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, Cobol85Parser.RULE_screenDescriptionForegroundColorClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2599;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.FOREGROUND_COLOR || _la === Cobol85Parser.FOREGROUND_COLOUR)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2601;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2600;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2605;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 281, this._ctx)) {
                    case 1:
                        {
                            this.state = 2603;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2604;
                            this.integerLiteral();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionBackgroundColorClause = function () {
        var _localctx = new ScreenDescriptionBackgroundColorClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, Cobol85Parser.RULE_screenDescriptionBackgroundColorClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2607;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.BACKGROUND_COLOR || _la === Cobol85Parser.BACKGROUND_COLOUR)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2609;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2608;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2613;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 283, this._ctx)) {
                    case 1:
                        {
                            this.state = 2611;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2612;
                            this.integerLiteral();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionControlClause = function () {
        var _localctx = new ScreenDescriptionControlClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, Cobol85Parser.RULE_screenDescriptionControlClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2615;
                this.match(Cobol85Parser.CONTROL);
                this.state = 2617;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2616;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2619;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionValueClause = function () {
        var _localctx = new ScreenDescriptionValueClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, Cobol85Parser.RULE_screenDescriptionValueClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2621;
                    this.match(Cobol85Parser.VALUE);
                    this.state = 2623;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Cobol85Parser.IS) {
                        {
                            this.state = 2622;
                            this.match(Cobol85Parser.IS);
                        }
                    }
                }
                this.state = 2625;
                this.literal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionPictureClause = function () {
        var _localctx = new ScreenDescriptionPictureClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, Cobol85Parser.RULE_screenDescriptionPictureClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2627;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.PIC || _la === Cobol85Parser.PICTURE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2629;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2628;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2631;
                this.pictureString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionFromClause = function () {
        var _localctx = new ScreenDescriptionFromClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, Cobol85Parser.RULE_screenDescriptionFromClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2633;
                this.match(Cobol85Parser.FROM);
                this.state = 2636;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 287, this._ctx)) {
                    case 1:
                        {
                            this.state = 2634;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2635;
                            this.literal();
                        }
                        break;
                }
                this.state = 2639;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TO) {
                    {
                        this.state = 2638;
                        this.screenDescriptionToClause();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionToClause = function () {
        var _localctx = new ScreenDescriptionToClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 294, Cobol85Parser.RULE_screenDescriptionToClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2641;
                this.match(Cobol85Parser.TO);
                this.state = 2642;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionUsingClause = function () {
        var _localctx = new ScreenDescriptionUsingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 296, Cobol85Parser.RULE_screenDescriptionUsingClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2644;
                this.match(Cobol85Parser.USING);
                this.state = 2645;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionUsageClause = function () {
        var _localctx = new ScreenDescriptionUsageClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 298, Cobol85Parser.RULE_screenDescriptionUsageClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2647;
                    this.match(Cobol85Parser.USAGE);
                    this.state = 2649;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Cobol85Parser.IS) {
                        {
                            this.state = 2648;
                            this.match(Cobol85Parser.IS);
                        }
                    }
                }
                this.state = 2651;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.DISPLAY || _la === Cobol85Parser.DISPLAY_1)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionBlankWhenZeroClause = function () {
        var _localctx = new ScreenDescriptionBlankWhenZeroClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 300, Cobol85Parser.RULE_screenDescriptionBlankWhenZeroClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2653;
                this.match(Cobol85Parser.BLANK);
                this.state = 2655;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WHEN) {
                    {
                        this.state = 2654;
                        this.match(Cobol85Parser.WHEN);
                    }
                }
                this.state = 2657;
                this.match(Cobol85Parser.ZERO);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionJustifiedClause = function () {
        var _localctx = new ScreenDescriptionJustifiedClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 302, Cobol85Parser.RULE_screenDescriptionJustifiedClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2659;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.JUST || _la === Cobol85Parser.JUSTIFIED)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2661;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.RIGHT) {
                    {
                        this.state = 2660;
                        this.match(Cobol85Parser.RIGHT);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionSignClause = function () {
        var _localctx = new ScreenDescriptionSignClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 304, Cobol85Parser.RULE_screenDescriptionSignClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2667;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SIGN) {
                    {
                        this.state = 2663;
                        this.match(Cobol85Parser.SIGN);
                        this.state = 2665;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 2664;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                    }
                }
                this.state = 2669;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2674;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SEPARATE) {
                    {
                        this.state = 2670;
                        this.match(Cobol85Parser.SEPARATE);
                        this.state = 2672;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.CHARACTER) {
                            {
                                this.state = 2671;
                                this.match(Cobol85Parser.CHARACTER);
                            }
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionAutoClause = function () {
        var _localctx = new ScreenDescriptionAutoClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 306, Cobol85Parser.RULE_screenDescriptionAutoClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2676;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.AUTO || _la === Cobol85Parser.AUTO_SKIP)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionSecureClause = function () {
        var _localctx = new ScreenDescriptionSecureClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 308, Cobol85Parser.RULE_screenDescriptionSecureClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2678;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.NO_ECHO || _la === Cobol85Parser.SECURE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionRequiredClause = function () {
        var _localctx = new ScreenDescriptionRequiredClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 310, Cobol85Parser.RULE_screenDescriptionRequiredClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2680;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.EMPTY_CHECK || _la === Cobol85Parser.REQUIRED)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionPromptClause = function () {
        var _localctx = new ScreenDescriptionPromptClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 312, Cobol85Parser.RULE_screenDescriptionPromptClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2682;
                this.match(Cobol85Parser.PROMPT);
                this.state = 2684;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CHARACTER) {
                    {
                        this.state = 2683;
                        this.match(Cobol85Parser.CHARACTER);
                    }
                }
                this.state = 2687;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2686;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2691;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 298, this._ctx)) {
                    case 1:
                        {
                            this.state = 2689;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2690;
                            this.literal();
                        }
                        break;
                }
                this.state = 2694;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.OCCURS) {
                    {
                        this.state = 2693;
                        this.screenDescriptionPromptOccursClause();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionPromptOccursClause = function () {
        var _localctx = new ScreenDescriptionPromptOccursClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 314, Cobol85Parser.RULE_screenDescriptionPromptOccursClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2696;
                this.match(Cobol85Parser.OCCURS);
                this.state = 2697;
                this.integerLiteral();
                this.state = 2699;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TIMES) {
                    {
                        this.state = 2698;
                        this.match(Cobol85Parser.TIMES);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionFullClause = function () {
        var _localctx = new ScreenDescriptionFullClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 316, Cobol85Parser.RULE_screenDescriptionFullClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2701;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.FULL || _la === Cobol85Parser.LENGTH_CHECK)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenDescriptionZeroFillClause = function () {
        var _localctx = new ScreenDescriptionZeroFillClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 318, Cobol85Parser.RULE_screenDescriptionZeroFillClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2703;
                this.match(Cobol85Parser.ZERO_FILL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportSection = function () {
        var _localctx = new ReportSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 320, Cobol85Parser.RULE_reportSection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2705;
                this.match(Cobol85Parser.REPORT);
                this.state = 2706;
                this.match(Cobol85Parser.SECTION);
                this.state = 2707;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 2711;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.RD) {
                    {
                        {
                            this.state = 2708;
                            this.reportDescription();
                        }
                    }
                    this.state = 2713;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportDescription = function () {
        var _localctx = new ReportDescriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 322, Cobol85Parser.RULE_reportDescription);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2714;
                this.reportDescriptionEntry();
                this.state = 2716;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 2715;
                            this.reportGroupDescriptionEntry();
                        }
                    }
                    this.state = 2718;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportDescriptionEntry = function () {
        var _localctx = new ReportDescriptionEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 324, Cobol85Parser.RULE_reportDescriptionEntry);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2720;
                this.match(Cobol85Parser.RD);
                this.state = 2721;
                this.reportName();
                this.state = 2723;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.GLOBAL || _la === Cobol85Parser.IS) {
                    {
                        this.state = 2722;
                        this.reportDescriptionGlobalClause();
                    }
                }
                this.state = 2738;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.PAGE) {
                    {
                        this.state = 2725;
                        this.reportDescriptionPageLimitClause();
                        this.state = 2727;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.HEADING) {
                            {
                                this.state = 2726;
                                this.reportDescriptionHeadingClause();
                            }
                        }
                        this.state = 2730;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.FIRST) {
                            {
                                this.state = 2729;
                                this.reportDescriptionFirstDetailClause();
                            }
                        }
                        this.state = 2733;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.LAST) {
                            {
                                this.state = 2732;
                                this.reportDescriptionLastDetailClause();
                            }
                        }
                        this.state = 2736;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.FOOTING) {
                            {
                                this.state = 2735;
                                this.reportDescriptionFootingClause();
                            }
                        }
                    }
                }
                this.state = 2740;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportDescriptionGlobalClause = function () {
        var _localctx = new ReportDescriptionGlobalClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 326, Cobol85Parser.RULE_reportDescriptionGlobalClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2743;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2742;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2745;
                this.match(Cobol85Parser.GLOBAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportDescriptionPageLimitClause = function () {
        var _localctx = new ReportDescriptionPageLimitClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 328, Cobol85Parser.RULE_reportDescriptionPageLimitClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2747;
                this.match(Cobol85Parser.PAGE);
                this.state = 2756;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.LIMIT:
                        {
                            this.state = 2748;
                            this.match(Cobol85Parser.LIMIT);
                            this.state = 2750;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.IS) {
                                {
                                    this.state = 2749;
                                    this.match(Cobol85Parser.IS);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.LIMITS:
                        {
                            this.state = 2752;
                            this.match(Cobol85Parser.LIMITS);
                            this.state = 2754;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.ARE) {
                                {
                                    this.state = 2753;
                                    this.match(Cobol85Parser.ARE);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                        break;
                    default:
                        break;
                }
                this.state = 2758;
                this.integerLiteral();
                this.state = 2760;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES) {
                    {
                        this.state = 2759;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportDescriptionHeadingClause = function () {
        var _localctx = new ReportDescriptionHeadingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 330, Cobol85Parser.RULE_reportDescriptionHeadingClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2762;
                this.match(Cobol85Parser.HEADING);
                this.state = 2763;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportDescriptionFirstDetailClause = function () {
        var _localctx = new ReportDescriptionFirstDetailClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 332, Cobol85Parser.RULE_reportDescriptionFirstDetailClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2765;
                this.match(Cobol85Parser.FIRST);
                this.state = 2766;
                this.match(Cobol85Parser.DETAIL);
                this.state = 2767;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportDescriptionLastDetailClause = function () {
        var _localctx = new ReportDescriptionLastDetailClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 334, Cobol85Parser.RULE_reportDescriptionLastDetailClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2769;
                this.match(Cobol85Parser.LAST);
                this.state = 2770;
                this.match(Cobol85Parser.DETAIL);
                this.state = 2771;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportDescriptionFootingClause = function () {
        var _localctx = new ReportDescriptionFootingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 336, Cobol85Parser.RULE_reportDescriptionFootingClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2773;
                this.match(Cobol85Parser.FOOTING);
                this.state = 2774;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupDescriptionEntry = function () {
        var _localctx = new ReportGroupDescriptionEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 338, Cobol85Parser.RULE_reportGroupDescriptionEntry);
        try {
            this.state = 2779;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 314, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2776;
                        this.reportGroupDescriptionEntryFormat1();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2777;
                        this.reportGroupDescriptionEntryFormat2();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2778;
                        this.reportGroupDescriptionEntryFormat3();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupDescriptionEntryFormat1 = function () {
        var _localctx = new ReportGroupDescriptionEntryFormat1Context(this._ctx, this.state);
        this.enterRule(_localctx, 340, Cobol85Parser.RULE_reportGroupDescriptionEntryFormat1);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2781;
                this.integerLiteral();
                this.state = 2782;
                this.dataName();
                this.state = 2784;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS || _la === Cobol85Parser.LINE || _la === Cobol85Parser.NUMBER || _la === Cobol85Parser.PLUS || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
                    {
                        this.state = 2783;
                        this.reportGroupLineNumberClause();
                    }
                }
                this.state = 2787;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.NEXT) {
                    {
                        this.state = 2786;
                        this.reportGroupNextGroupClause();
                    }
                }
                this.state = 2789;
                this.reportGroupTypeClause();
                this.state = 2791;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DISPLAY || _la === Cobol85Parser.DISPLAY_1 || _la === Cobol85Parser.USAGE) {
                    {
                        this.state = 2790;
                        this.reportGroupUsageClause();
                    }
                }
                this.state = 2793;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupDescriptionEntryFormat2 = function () {
        var _localctx = new ReportGroupDescriptionEntryFormat2Context(this._ctx, this.state);
        this.enterRule(_localctx, 342, Cobol85Parser.RULE_reportGroupDescriptionEntryFormat2);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2795;
                this.integerLiteral();
                this.state = 2797;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
                    {
                        this.state = 2796;
                        this.dataName();
                    }
                }
                this.state = 2800;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS || _la === Cobol85Parser.LINE || _la === Cobol85Parser.NUMBER || _la === Cobol85Parser.PLUS || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
                    {
                        this.state = 2799;
                        this.reportGroupLineNumberClause();
                    }
                }
                this.state = 2802;
                this.reportGroupUsageClause();
                this.state = 2803;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupDescriptionEntryFormat3 = function () {
        var _localctx = new ReportGroupDescriptionEntryFormat3Context(this._ctx, this.state);
        this.enterRule(_localctx, 344, Cobol85Parser.RULE_reportGroupDescriptionEntryFormat3);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2805;
                this.integerLiteral();
                this.state = 2807;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
                    {
                        this.state = 2806;
                        this.dataName();
                    }
                }
                this.state = 2825;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.BLANK || _la === Cobol85Parser.COLUMN || _la === Cobol85Parser.DISPLAY || _la === Cobol85Parser.DISPLAY_1 || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (Cobol85Parser.GROUP - 227)) | (1 << (Cobol85Parser.IS - 227)) | (1 << (Cobol85Parser.JUST - 227)) | (1 << (Cobol85Parser.JUSTIFIED - 227)))) !== 0) || _la === Cobol85Parser.LINE || _la === Cobol85Parser.NUMBER || _la === Cobol85Parser.PIC || _la === Cobol85Parser.PICTURE || _la === Cobol85Parser.PLUS || _la === Cobol85Parser.RESET || ((((_la - 438)) & ~0x1F) === 0 && ((1 << (_la - 438)) & ((1 << (Cobol85Parser.SIGN - 438)) | (1 << (Cobol85Parser.SOURCE - 438)) | (1 << (Cobol85Parser.SUM - 438)))) !== 0) || _la === Cobol85Parser.USAGE || _la === Cobol85Parser.VALUE || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
                    {
                        this.state = 2823;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Cobol85Parser.PIC:
                            case Cobol85Parser.PICTURE:
                                {
                                    this.state = 2809;
                                    this.reportGroupPictureClause();
                                }
                                break;
                            case Cobol85Parser.DISPLAY:
                            case Cobol85Parser.DISPLAY_1:
                            case Cobol85Parser.USAGE:
                                {
                                    this.state = 2810;
                                    this.reportGroupUsageClause();
                                }
                                break;
                            case Cobol85Parser.SIGN:
                                {
                                    this.state = 2811;
                                    this.reportGroupSignClause();
                                }
                                break;
                            case Cobol85Parser.JUST:
                            case Cobol85Parser.JUSTIFIED:
                                {
                                    this.state = 2812;
                                    this.reportGroupJustifiedClause();
                                }
                                break;
                            case Cobol85Parser.BLANK:
                                {
                                    this.state = 2813;
                                    this.reportGroupBlankWhenZeroClause();
                                }
                                break;
                            case Cobol85Parser.IS:
                            case Cobol85Parser.LINE:
                            case Cobol85Parser.NUMBER:
                            case Cobol85Parser.PLUS:
                            case Cobol85Parser.LEVEL_NUMBER_66:
                            case Cobol85Parser.LEVEL_NUMBER_77:
                            case Cobol85Parser.LEVEL_NUMBER_88:
                            case Cobol85Parser.INTEGERLITERAL:
                                {
                                    this.state = 2814;
                                    this.reportGroupLineNumberClause();
                                }
                                break;
                            case Cobol85Parser.COLUMN:
                                {
                                    this.state = 2815;
                                    this.reportGroupColumnNumberClause();
                                }
                                break;
                            case Cobol85Parser.RESET:
                            case Cobol85Parser.SOURCE:
                            case Cobol85Parser.SUM:
                            case Cobol85Parser.VALUE:
                                {
                                    this.state = 2820;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case Cobol85Parser.SOURCE:
                                            {
                                                this.state = 2816;
                                                this.reportGroupSourceClause();
                                            }
                                            break;
                                        case Cobol85Parser.VALUE:
                                            {
                                                this.state = 2817;
                                                this.reportGroupValueClause();
                                            }
                                            break;
                                        case Cobol85Parser.SUM:
                                            {
                                                this.state = 2818;
                                                this.reportGroupSumClause();
                                            }
                                            break;
                                        case Cobol85Parser.RESET:
                                            {
                                                this.state = 2819;
                                                this.reportGroupResetClause();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                }
                                break;
                            case Cobol85Parser.GROUP:
                                {
                                    this.state = 2822;
                                    this.reportGroupIndicateClause();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 2827;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2828;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupBlankWhenZeroClause = function () {
        var _localctx = new ReportGroupBlankWhenZeroClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 346, Cobol85Parser.RULE_reportGroupBlankWhenZeroClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2830;
                this.match(Cobol85Parser.BLANK);
                this.state = 2832;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WHEN) {
                    {
                        this.state = 2831;
                        this.match(Cobol85Parser.WHEN);
                    }
                }
                this.state = 2834;
                this.match(Cobol85Parser.ZERO);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupColumnNumberClause = function () {
        var _localctx = new ReportGroupColumnNumberClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 348, Cobol85Parser.RULE_reportGroupColumnNumberClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2836;
                this.match(Cobol85Parser.COLUMN);
                this.state = 2838;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.NUMBER) {
                    {
                        this.state = 2837;
                        this.match(Cobol85Parser.NUMBER);
                    }
                }
                this.state = 2841;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2840;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2843;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupIndicateClause = function () {
        var _localctx = new ReportGroupIndicateClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 350, Cobol85Parser.RULE_reportGroupIndicateClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2845;
                this.match(Cobol85Parser.GROUP);
                this.state = 2847;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.INDICATE) {
                    {
                        this.state = 2846;
                        this.match(Cobol85Parser.INDICATE);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupJustifiedClause = function () {
        var _localctx = new ReportGroupJustifiedClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 352, Cobol85Parser.RULE_reportGroupJustifiedClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2849;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.JUST || _la === Cobol85Parser.JUSTIFIED)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2851;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.RIGHT) {
                    {
                        this.state = 2850;
                        this.match(Cobol85Parser.RIGHT);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupLineNumberClause = function () {
        var _localctx = new ReportGroupLineNumberClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 354, Cobol85Parser.RULE_reportGroupLineNumberClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2854;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LINE) {
                    {
                        this.state = 2853;
                        this.match(Cobol85Parser.LINE);
                    }
                }
                this.state = 2857;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.NUMBER) {
                    {
                        this.state = 2856;
                        this.match(Cobol85Parser.NUMBER);
                    }
                }
                this.state = 2860;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2859;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2864;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                        {
                            this.state = 2862;
                            this.reportGroupLineNumberNextPage();
                        }
                        break;
                    case Cobol85Parser.PLUS:
                        {
                            this.state = 2863;
                            this.reportGroupLineNumberPlus();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupLineNumberNextPage = function () {
        var _localctx = new ReportGroupLineNumberNextPageContext(this._ctx, this.state);
        this.enterRule(_localctx, 356, Cobol85Parser.RULE_reportGroupLineNumberNextPage);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2866;
                this.integerLiteral();
                this.state = 2872;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 334, this._ctx)) {
                    case 1:
                        {
                            this.state = 2868;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.ON) {
                                {
                                    this.state = 2867;
                                    this.match(Cobol85Parser.ON);
                                }
                            }
                            this.state = 2870;
                            this.match(Cobol85Parser.NEXT);
                            this.state = 2871;
                            this.match(Cobol85Parser.PAGE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupLineNumberPlus = function () {
        var _localctx = new ReportGroupLineNumberPlusContext(this._ctx, this.state);
        this.enterRule(_localctx, 358, Cobol85Parser.RULE_reportGroupLineNumberPlus);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2874;
                this.match(Cobol85Parser.PLUS);
                this.state = 2875;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupNextGroupClause = function () {
        var _localctx = new ReportGroupNextGroupClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 360, Cobol85Parser.RULE_reportGroupNextGroupClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2877;
                this.match(Cobol85Parser.NEXT);
                this.state = 2878;
                this.match(Cobol85Parser.GROUP);
                this.state = 2880;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2879;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2885;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                        {
                            this.state = 2882;
                            this.integerLiteral();
                        }
                        break;
                    case Cobol85Parser.NEXT:
                        {
                            this.state = 2883;
                            this.reportGroupNextGroupNextPage();
                        }
                        break;
                    case Cobol85Parser.PLUS:
                        {
                            this.state = 2884;
                            this.reportGroupNextGroupPlus();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupNextGroupPlus = function () {
        var _localctx = new ReportGroupNextGroupPlusContext(this._ctx, this.state);
        this.enterRule(_localctx, 362, Cobol85Parser.RULE_reportGroupNextGroupPlus);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2887;
                this.match(Cobol85Parser.PLUS);
                this.state = 2888;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupNextGroupNextPage = function () {
        var _localctx = new ReportGroupNextGroupNextPageContext(this._ctx, this.state);
        this.enterRule(_localctx, 364, Cobol85Parser.RULE_reportGroupNextGroupNextPage);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2890;
                this.match(Cobol85Parser.NEXT);
                this.state = 2891;
                this.match(Cobol85Parser.PAGE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupPictureClause = function () {
        var _localctx = new ReportGroupPictureClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 366, Cobol85Parser.RULE_reportGroupPictureClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2893;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.PIC || _la === Cobol85Parser.PICTURE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2895;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2894;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2897;
                this.pictureString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupResetClause = function () {
        var _localctx = new ReportGroupResetClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 368, Cobol85Parser.RULE_reportGroupResetClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2899;
                this.match(Cobol85Parser.RESET);
                this.state = 2901;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 2900;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 2905;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.FINAL:
                        {
                            this.state = 2903;
                            this.match(Cobol85Parser.FINAL);
                        }
                        break;
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 2904;
                            this.dataName();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupSignClause = function () {
        var _localctx = new ReportGroupSignClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 370, Cobol85Parser.RULE_reportGroupSignClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2907;
                this.match(Cobol85Parser.SIGN);
                this.state = 2909;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2908;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2911;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2912;
                this.match(Cobol85Parser.SEPARATE);
                this.state = 2914;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CHARACTER) {
                    {
                        this.state = 2913;
                        this.match(Cobol85Parser.CHARACTER);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupSourceClause = function () {
        var _localctx = new ReportGroupSourceClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 372, Cobol85Parser.RULE_reportGroupSourceClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2916;
                this.match(Cobol85Parser.SOURCE);
                this.state = 2918;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2917;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2920;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupSumClause = function () {
        var _localctx = new ReportGroupSumClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 374, Cobol85Parser.RULE_reportGroupSumClause);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2922;
                this.match(Cobol85Parser.SUM);
                this.state = 2923;
                this.identifier();
                this.state = 2930;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2925;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === Cobol85Parser.COMMACHAR) {
                                    {
                                        this.state = 2924;
                                        this.match(Cobol85Parser.COMMACHAR);
                                    }
                                }
                                this.state = 2927;
                                this.identifier();
                            }
                        }
                    }
                    this.state = 2932;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
                }
                this.state = 2944;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.UPON) {
                    {
                        this.state = 2933;
                        this.match(Cobol85Parser.UPON);
                        this.state = 2934;
                        this.dataName();
                        this.state = 2941;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
                            {
                                {
                                    this.state = 2936;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === Cobol85Parser.COMMACHAR) {
                                        {
                                            this.state = 2935;
                                            this.match(Cobol85Parser.COMMACHAR);
                                        }
                                    }
                                    this.state = 2938;
                                    this.dataName();
                                }
                            }
                            this.state = 2943;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupTypeClause = function () {
        var _localctx = new ReportGroupTypeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 376, Cobol85Parser.RULE_reportGroupTypeClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2946;
                this.match(Cobol85Parser.TYPE);
                this.state = 2948;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 2947;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 2957;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 349, this._ctx)) {
                    case 1:
                        {
                            this.state = 2950;
                            this.reportGroupTypeReportHeading();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2951;
                            this.reportGroupTypePageHeading();
                        }
                        break;
                    case 3:
                        {
                            this.state = 2952;
                            this.reportGroupTypeControlHeading();
                        }
                        break;
                    case 4:
                        {
                            this.state = 2953;
                            this.reportGroupTypeDetail();
                        }
                        break;
                    case 5:
                        {
                            this.state = 2954;
                            this.reportGroupTypeControlFooting();
                        }
                        break;
                    case 6:
                        {
                            this.state = 2955;
                            this.reportGroupTypePageFooting();
                        }
                        break;
                    case 7:
                        {
                            this.state = 2956;
                            this.reportGroupTypeReportFooting();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupTypeReportHeading = function () {
        var _localctx = new ReportGroupTypeReportHeadingContext(this._ctx, this.state);
        this.enterRule(_localctx, 378, Cobol85Parser.RULE_reportGroupTypeReportHeading);
        try {
            this.state = 2962;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.REPORT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2959;
                        this.match(Cobol85Parser.REPORT);
                        this.state = 2960;
                        this.match(Cobol85Parser.HEADING);
                    }
                    break;
                case Cobol85Parser.RH:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2961;
                        this.match(Cobol85Parser.RH);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupTypePageHeading = function () {
        var _localctx = new ReportGroupTypePageHeadingContext(this._ctx, this.state);
        this.enterRule(_localctx, 380, Cobol85Parser.RULE_reportGroupTypePageHeading);
        try {
            this.state = 2967;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.PAGE:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2964;
                        this.match(Cobol85Parser.PAGE);
                        this.state = 2965;
                        this.match(Cobol85Parser.HEADING);
                    }
                    break;
                case Cobol85Parser.PH:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2966;
                        this.match(Cobol85Parser.PH);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupTypeControlHeading = function () {
        var _localctx = new ReportGroupTypeControlHeadingContext(this._ctx, this.state);
        this.enterRule(_localctx, 382, Cobol85Parser.RULE_reportGroupTypeControlHeading);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2972;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.CONTROL:
                        {
                            this.state = 2969;
                            this.match(Cobol85Parser.CONTROL);
                            this.state = 2970;
                            this.match(Cobol85Parser.HEADING);
                        }
                        break;
                    case Cobol85Parser.CH:
                        {
                            this.state = 2971;
                            this.match(Cobol85Parser.CH);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 2976;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.FINAL:
                        {
                            this.state = 2974;
                            this.match(Cobol85Parser.FINAL);
                        }
                        break;
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 2975;
                            this.dataName();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupTypeDetail = function () {
        var _localctx = new ReportGroupTypeDetailContext(this._ctx, this.state);
        this.enterRule(_localctx, 384, Cobol85Parser.RULE_reportGroupTypeDetail);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2978;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.DE || _la === Cobol85Parser.DETAIL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupTypeControlFooting = function () {
        var _localctx = new ReportGroupTypeControlFootingContext(this._ctx, this.state);
        this.enterRule(_localctx, 386, Cobol85Parser.RULE_reportGroupTypeControlFooting);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2983;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.CONTROL:
                        {
                            this.state = 2980;
                            this.match(Cobol85Parser.CONTROL);
                            this.state = 2981;
                            this.match(Cobol85Parser.FOOTING);
                        }
                        break;
                    case Cobol85Parser.CF:
                        {
                            this.state = 2982;
                            this.match(Cobol85Parser.CF);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 2987;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.FINAL:
                        {
                            this.state = 2985;
                            this.match(Cobol85Parser.FINAL);
                        }
                        break;
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 2986;
                            this.dataName();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupUsageClause = function () {
        var _localctx = new ReportGroupUsageClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 388, Cobol85Parser.RULE_reportGroupUsageClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2993;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.USAGE) {
                    {
                        this.state = 2989;
                        this.match(Cobol85Parser.USAGE);
                        this.state = 2991;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 2990;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                    }
                }
                this.state = 2995;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.DISPLAY || _la === Cobol85Parser.DISPLAY_1)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupTypePageFooting = function () {
        var _localctx = new ReportGroupTypePageFootingContext(this._ctx, this.state);
        this.enterRule(_localctx, 390, Cobol85Parser.RULE_reportGroupTypePageFooting);
        try {
            this.state = 3000;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.PAGE:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2997;
                        this.match(Cobol85Parser.PAGE);
                        this.state = 2998;
                        this.match(Cobol85Parser.FOOTING);
                    }
                    break;
                case Cobol85Parser.PF:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2999;
                        this.match(Cobol85Parser.PF);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupTypeReportFooting = function () {
        var _localctx = new ReportGroupTypeReportFootingContext(this._ctx, this.state);
        this.enterRule(_localctx, 392, Cobol85Parser.RULE_reportGroupTypeReportFooting);
        try {
            this.state = 3005;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.REPORT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3002;
                        this.match(Cobol85Parser.REPORT);
                        this.state = 3003;
                        this.match(Cobol85Parser.FOOTING);
                    }
                    break;
                case Cobol85Parser.RF:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3004;
                        this.match(Cobol85Parser.RF);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportGroupValueClause = function () {
        var _localctx = new ReportGroupValueClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 394, Cobol85Parser.RULE_reportGroupValueClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3007;
                this.match(Cobol85Parser.VALUE);
                this.state = 3009;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3008;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3011;
                this.literal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.programLibrarySection = function () {
        var _localctx = new ProgramLibrarySectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 396, Cobol85Parser.RULE_programLibrarySection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3013;
                this.match(Cobol85Parser.PROGRAM_LIBRARY);
                this.state = 3014;
                this.match(Cobol85Parser.SECTION);
                this.state = 3015;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 3019;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.LB || _la === Cobol85Parser.LD) {
                    {
                        {
                            this.state = 3016;
                            this.libraryDescriptionEntry();
                        }
                    }
                    this.state = 3021;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryDescriptionEntry = function () {
        var _localctx = new LibraryDescriptionEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 398, Cobol85Parser.RULE_libraryDescriptionEntry);
        try {
            this.state = 3024;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.LD:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3022;
                        this.libraryDescriptionEntryFormat1();
                    }
                    break;
                case Cobol85Parser.LB:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3023;
                        this.libraryDescriptionEntryFormat2();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryDescriptionEntryFormat1 = function () {
        var _localctx = new LibraryDescriptionEntryFormat1Context(this._ctx, this.state);
        this.enterRule(_localctx, 400, Cobol85Parser.RULE_libraryDescriptionEntryFormat1);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3026;
                this.match(Cobol85Parser.LD);
                this.state = 3027;
                this.libraryName();
                this.state = 3028;
                this.match(Cobol85Parser.EXPORT);
                this.state = 3030;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ATTRIBUTE) {
                    {
                        this.state = 3029;
                        this.libraryAttributeClauseFormat1();
                    }
                }
                this.state = 3033;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ENTRY_PROCEDURE) {
                    {
                        this.state = 3032;
                        this.libraryEntryProcedureClauseFormat1();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryDescriptionEntryFormat2 = function () {
        var _localctx = new LibraryDescriptionEntryFormat2Context(this._ctx, this.state);
        this.enterRule(_localctx, 402, Cobol85Parser.RULE_libraryDescriptionEntryFormat2);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3035;
                this.match(Cobol85Parser.LB);
                this.state = 3036;
                this.libraryName();
                this.state = 3037;
                this.match(Cobol85Parser.IMPORT);
                this.state = 3039;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 365, this._ctx)) {
                    case 1:
                        {
                            this.state = 3038;
                            this.libraryIsGlobalClause();
                        }
                        break;
                }
                this.state = 3042;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COMMON || _la === Cobol85Parser.IS) {
                    {
                        this.state = 3041;
                        this.libraryIsCommonClause();
                    }
                }
                this.state = 3048;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.ATTRIBUTE || _la === Cobol85Parser.ENTRY_PROCEDURE) {
                    {
                        this.state = 3046;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Cobol85Parser.ATTRIBUTE:
                                {
                                    this.state = 3044;
                                    this.libraryAttributeClauseFormat2();
                                }
                                break;
                            case Cobol85Parser.ENTRY_PROCEDURE:
                                {
                                    this.state = 3045;
                                    this.libraryEntryProcedureClauseFormat2();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 3050;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryAttributeClauseFormat1 = function () {
        var _localctx = new LibraryAttributeClauseFormat1Context(this._ctx, this.state);
        this.enterRule(_localctx, 404, Cobol85Parser.RULE_libraryAttributeClauseFormat1);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3051;
                this.match(Cobol85Parser.ATTRIBUTE);
                this.state = 3057;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SHARING) {
                    {
                        this.state = 3052;
                        this.match(Cobol85Parser.SHARING);
                        this.state = 3054;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 3053;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                        this.state = 3056;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.DONTCARE || _la === Cobol85Parser.PRIVATE || _la === Cobol85Parser.SHAREDBYALL || _la === Cobol85Parser.SHAREDBYRUNUNIT)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryAttributeClauseFormat2 = function () {
        var _localctx = new LibraryAttributeClauseFormat2Context(this._ctx, this.state);
        this.enterRule(_localctx, 406, Cobol85Parser.RULE_libraryAttributeClauseFormat2);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3059;
                this.match(Cobol85Parser.ATTRIBUTE);
                this.state = 3061;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FUNCTIONNAME) {
                    {
                        this.state = 3060;
                        this.libraryAttributeFunction();
                    }
                }
                this.state = 3068;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LIBACCESS) {
                    {
                        this.state = 3063;
                        this.match(Cobol85Parser.LIBACCESS);
                        this.state = 3065;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 3064;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                        this.state = 3067;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.BYFUNCTION || _la === Cobol85Parser.BYTITLE)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 3071;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LIBPARAMETER) {
                    {
                        this.state = 3070;
                        this.libraryAttributeParameter();
                    }
                }
                this.state = 3074;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TITLE) {
                    {
                        this.state = 3073;
                        this.libraryAttributeTitle();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryAttributeFunction = function () {
        var _localctx = new LibraryAttributeFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 408, Cobol85Parser.RULE_libraryAttributeFunction);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3076;
                this.match(Cobol85Parser.FUNCTIONNAME);
                this.state = 3077;
                this.match(Cobol85Parser.IS);
                this.state = 3078;
                this.literal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryAttributeParameter = function () {
        var _localctx = new LibraryAttributeParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 410, Cobol85Parser.RULE_libraryAttributeParameter);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3080;
                this.match(Cobol85Parser.LIBPARAMETER);
                this.state = 3082;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3081;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3084;
                this.literal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryAttributeTitle = function () {
        var _localctx = new LibraryAttributeTitleContext(this._ctx, this.state);
        this.enterRule(_localctx, 412, Cobol85Parser.RULE_libraryAttributeTitle);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3086;
                this.match(Cobol85Parser.TITLE);
                this.state = 3088;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3087;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3090;
                this.literal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryEntryProcedureClauseFormat1 = function () {
        var _localctx = new LibraryEntryProcedureClauseFormat1Context(this._ctx, this.state);
        this.enterRule(_localctx, 414, Cobol85Parser.RULE_libraryEntryProcedureClauseFormat1);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3092;
                this.match(Cobol85Parser.ENTRY_PROCEDURE);
                this.state = 3093;
                this.programName();
                this.state = 3095;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 3094;
                        this.libraryEntryProcedureForClause();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryEntryProcedureClauseFormat2 = function () {
        var _localctx = new LibraryEntryProcedureClauseFormat2Context(this._ctx, this.state);
        this.enterRule(_localctx, 416, Cobol85Parser.RULE_libraryEntryProcedureClauseFormat2);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3097;
                this.match(Cobol85Parser.ENTRY_PROCEDURE);
                this.state = 3098;
                this.programName();
                this.state = 3100;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 3099;
                        this.libraryEntryProcedureForClause();
                    }
                }
                this.state = 3103;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 3102;
                        this.libraryEntryProcedureWithClause();
                    }
                }
                this.state = 3106;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.USING) {
                    {
                        this.state = 3105;
                        this.libraryEntryProcedureUsingClause();
                    }
                }
                this.state = 3109;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.GIVING) {
                    {
                        this.state = 3108;
                        this.libraryEntryProcedureGivingClause();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryEntryProcedureForClause = function () {
        var _localctx = new LibraryEntryProcedureForClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 418, Cobol85Parser.RULE_libraryEntryProcedureForClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3111;
                this.match(Cobol85Parser.FOR);
                this.state = 3112;
                this.literal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryEntryProcedureGivingClause = function () {
        var _localctx = new LibraryEntryProcedureGivingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 420, Cobol85Parser.RULE_libraryEntryProcedureGivingClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3114;
                this.match(Cobol85Parser.GIVING);
                this.state = 3115;
                this.dataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryEntryProcedureUsingClause = function () {
        var _localctx = new LibraryEntryProcedureUsingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 422, Cobol85Parser.RULE_libraryEntryProcedureUsingClause);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3117;
                this.match(Cobol85Parser.USING);
                this.state = 3119;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3118;
                                    this.libraryEntryProcedureUsingName();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3121;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryEntryProcedureUsingName = function () {
        var _localctx = new LibraryEntryProcedureUsingNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 424, Cobol85Parser.RULE_libraryEntryProcedureUsingName);
        try {
            this.state = 3125;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 384, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3123;
                        this.dataName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3124;
                        this.fileName();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryEntryProcedureWithClause = function () {
        var _localctx = new LibraryEntryProcedureWithClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 426, Cobol85Parser.RULE_libraryEntryProcedureWithClause);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3127;
                this.match(Cobol85Parser.WITH);
                this.state = 3129;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3128;
                                    this.libraryEntryProcedureWithName();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3131;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryEntryProcedureWithName = function () {
        var _localctx = new LibraryEntryProcedureWithNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 428, Cobol85Parser.RULE_libraryEntryProcedureWithName);
        try {
            this.state = 3135;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 386, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3133;
                        this.localName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3134;
                        this.fileName();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryIsCommonClause = function () {
        var _localctx = new LibraryIsCommonClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 430, Cobol85Parser.RULE_libraryIsCommonClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3138;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3137;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3140;
                this.match(Cobol85Parser.COMMON);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryIsGlobalClause = function () {
        var _localctx = new LibraryIsGlobalClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 432, Cobol85Parser.RULE_libraryIsGlobalClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3143;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3142;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3145;
                this.match(Cobol85Parser.GLOBAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataDescriptionEntry = function () {
        var _localctx = new DataDescriptionEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 434, Cobol85Parser.RULE_dataDescriptionEntry);
        try {
            this.state = 3151;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.LEVEL_NUMBER_77:
                case Cobol85Parser.INTEGERLITERAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3147;
                        this.dataDescriptionEntryFormat1();
                    }
                    break;
                case Cobol85Parser.LEVEL_NUMBER_66:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3148;
                        this.dataDescriptionEntryFormat2();
                    }
                    break;
                case Cobol85Parser.LEVEL_NUMBER_88:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3149;
                        this.dataDescriptionEntryFormat3();
                    }
                    break;
                case Cobol85Parser.EXECSQLLINE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3150;
                        this.dataDescriptionEntryExecSql();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataDescriptionEntryFormat1 = function () {
        var _localctx = new DataDescriptionEntryFormat1Context(this._ctx, this.state);
        this.enterRule(_localctx, 436, Cobol85Parser.RULE_dataDescriptionEntryFormat1);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3153;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.LEVEL_NUMBER_77 || _la === Cobol85Parser.INTEGERLITERAL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3156;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 390, this._ctx)) {
                    case 1:
                        {
                            this.state = 3154;
                            this.match(Cobol85Parser.FILLER);
                        }
                        break;
                    case 2:
                        {
                            this.state = 3155;
                            this.dataName();
                        }
                        break;
                }
                this.state = 3181;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALIGNED) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLANK - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.BY - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.COMMON - 68)) | (1 << (Cobol85Parser.COMP - 68)) | (1 << (Cobol85Parser.COMP_1 - 68)) | (1 << (Cobol85Parser.COMP_2 - 68)) | (1 << (Cobol85Parser.COMP_3 - 68)) | (1 << (Cobol85Parser.COMP_4 - 68)) | (1 << (Cobol85Parser.COMP_5 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_1 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_2 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_3 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_4 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_5 - 68)) | (1 << (Cobol85Parser.CONTENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DISPLAY - 138)) | (1 << (Cobol85Parser.DISPLAY_1 - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.EXTERNAL - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GLOBAL - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)) | (1 << (Cobol85Parser.INDEX - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.IS - 250)) | (1 << (Cobol85Parser.JUST - 250)) | (1 << (Cobol85Parser.JUSTIFIED - 250)) | (1 << (Cobol85Parser.KANJI - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEADING - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LOCK - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.OCCURS - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PACKED_DECIMAL - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)) | (1 << (Cobol85Parser.PIC - 317)) | (1 << (Cobol85Parser.PICTURE - 317)))) !== 0) || ((((_la - 349)) & ~0x1F) === 0 && ((1 << (_la - 349)) & ((1 << (Cobol85Parser.POINTER - 349)) | (1 << (Cobol85Parser.PORT - 349)) | (1 << (Cobol85Parser.PRINTER - 349)) | (1 << (Cobol85Parser.PRIVATE - 349)) | (1 << (Cobol85Parser.PROCEDURE_POINTER - 349)) | (1 << (Cobol85Parser.PROCESS - 349)) | (1 << (Cobol85Parser.PROGRAM - 349)) | (1 << (Cobol85Parser.PROMPT - 349)) | (1 << (Cobol85Parser.QUOTE - 349)) | (1 << (Cobol85Parser.QUOTES - 349)) | (1 << (Cobol85Parser.READER - 349)) | (1 << (Cobol85Parser.REMOTE - 349)) | (1 << (Cobol85Parser.REAL - 349)) | (1 << (Cobol85Parser.RECEIVED - 349)) | (1 << (Cobol85Parser.RECORD - 349)) | (1 << (Cobol85Parser.RECURSIVE - 349)))) !== 0) || ((((_la - 381)) & ~0x1F) === 0 && ((1 << (_la - 381)) & ((1 << (Cobol85Parser.REDEFINES - 381)) | (1 << (Cobol85Parser.REF - 381)) | (1 << (Cobol85Parser.REFERENCE - 381)) | (1 << (Cobol85Parser.REMOVE - 381)) | (1 << (Cobol85Parser.REQUIRED - 381)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 381)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (Cobol85Parser.SAVE - 415)) | (1 << (Cobol85Parser.SECURE - 415)) | (1 << (Cobol85Parser.SHARED - 415)) | (1 << (Cobol85Parser.SHAREDBYALL - 415)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 415)) | (1 << (Cobol85Parser.SHARING - 415)) | (1 << (Cobol85Parser.SHORT_DATE - 415)) | (1 << (Cobol85Parser.SIGN - 415)))) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & ((1 << (Cobol85Parser.SPACE - 450)) | (1 << (Cobol85Parser.SPACES - 450)) | (1 << (Cobol85Parser.STRING - 450)) | (1 << (Cobol85Parser.SYMBOL - 450)) | (1 << (Cobol85Parser.SYNC - 450)) | (1 << (Cobol85Parser.SYNCHRONIZED - 450)) | (1 << (Cobol85Parser.TASK - 450)) | (1 << (Cobol85Parser.THREAD - 450)))) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & ((1 << (Cobol85Parser.THREAD_LOCAL - 482)) | (1 << (Cobol85Parser.TIMER - 482)) | (1 << (Cobol85Parser.TODAYS_DATE - 482)) | (1 << (Cobol85Parser.TODAYS_NAME - 482)) | (1 << (Cobol85Parser.TRAILING - 482)) | (1 << (Cobol85Parser.TRUE - 482)) | (1 << (Cobol85Parser.TRUNCATED - 482)) | (1 << (Cobol85Parser.TYPE - 482)) | (1 << (Cobol85Parser.TYPEDEF - 482)) | (1 << (Cobol85Parser.UNDERLINE - 482)) | (1 << (Cobol85Parser.USAGE - 482)) | (1 << (Cobol85Parser.USING - 482)) | (1 << (Cobol85Parser.VALUE - 482)) | (1 << (Cobol85Parser.VALUES - 482)) | (1 << (Cobol85Parser.VIRTUAL - 482)) | (1 << (Cobol85Parser.WAIT - 482)))) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & ((1 << (Cobol85Parser.WITH - 514)) | (1 << (Cobol85Parser.YEAR - 514)) | (1 << (Cobol85Parser.YYYYMMDD - 514)) | (1 << (Cobol85Parser.YYYYDDD - 514)) | (1 << (Cobol85Parser.ZERO - 514)) | (1 << (Cobol85Parser.ZERO_FILL - 514)) | (1 << (Cobol85Parser.ZEROS - 514)) | (1 << (Cobol85Parser.ZEROES - 514)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0)) {
                    {
                        this.state = 3179;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 391, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3158;
                                    this.dataRedefinesClause();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 3159;
                                    this.dataIntegerStringClause();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 3160;
                                    this.dataExternalClause();
                                }
                                break;
                            case 4:
                                {
                                    this.state = 3161;
                                    this.dataGlobalClause();
                                }
                                break;
                            case 5:
                                {
                                    this.state = 3162;
                                    this.dataTypeDefClause();
                                }
                                break;
                            case 6:
                                {
                                    this.state = 3163;
                                    this.dataThreadLocalClause();
                                }
                                break;
                            case 7:
                                {
                                    this.state = 3164;
                                    this.dataPictureClause();
                                }
                                break;
                            case 8:
                                {
                                    this.state = 3165;
                                    this.dataCommonOwnLocalClause();
                                }
                                break;
                            case 9:
                                {
                                    this.state = 3166;
                                    this.dataTypeClause();
                                }
                                break;
                            case 10:
                                {
                                    this.state = 3167;
                                    this.dataUsingClause();
                                }
                                break;
                            case 11:
                                {
                                    this.state = 3168;
                                    this.dataUsageClause();
                                }
                                break;
                            case 12:
                                {
                                    this.state = 3169;
                                    this.dataValueClause();
                                }
                                break;
                            case 13:
                                {
                                    this.state = 3170;
                                    this.dataReceivedByClause();
                                }
                                break;
                            case 14:
                                {
                                    this.state = 3171;
                                    this.dataOccursClause();
                                }
                                break;
                            case 15:
                                {
                                    this.state = 3172;
                                    this.dataSignClause();
                                }
                                break;
                            case 16:
                                {
                                    this.state = 3173;
                                    this.dataSynchronizedClause();
                                }
                                break;
                            case 17:
                                {
                                    this.state = 3174;
                                    this.dataJustifiedClause();
                                }
                                break;
                            case 18:
                                {
                                    this.state = 3175;
                                    this.dataBlankWhenZeroClause();
                                }
                                break;
                            case 19:
                                {
                                    this.state = 3176;
                                    this.dataWithLowerBoundsClause();
                                }
                                break;
                            case 20:
                                {
                                    this.state = 3177;
                                    this.dataAlignedClause();
                                }
                                break;
                            case 21:
                                {
                                    this.state = 3178;
                                    this.dataRecordAreaClause();
                                }
                                break;
                        }
                    }
                    this.state = 3183;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3184;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataDescriptionEntryFormat2 = function () {
        var _localctx = new DataDescriptionEntryFormat2Context(this._ctx, this.state);
        this.enterRule(_localctx, 438, Cobol85Parser.RULE_dataDescriptionEntryFormat2);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3186;
                this.match(Cobol85Parser.LEVEL_NUMBER_66);
                this.state = 3187;
                this.dataName();
                this.state = 3188;
                this.dataRenamesClause();
                this.state = 3189;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataDescriptionEntryFormat3 = function () {
        var _localctx = new DataDescriptionEntryFormat3Context(this._ctx, this.state);
        this.enterRule(_localctx, 440, Cobol85Parser.RULE_dataDescriptionEntryFormat3);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3191;
                this.match(Cobol85Parser.LEVEL_NUMBER_88);
                this.state = 3192;
                this.conditionName();
                this.state = 3193;
                this.dataValueClause();
                this.state = 3194;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataDescriptionEntryExecSql = function () {
        var _localctx = new DataDescriptionEntryExecSqlContext(this._ctx, this.state);
        this.enterRule(_localctx, 442, Cobol85Parser.RULE_dataDescriptionEntryExecSql);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3197;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3196;
                                    this.match(Cobol85Parser.EXECSQLLINE);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3199;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 3202;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DOT_FS) {
                    {
                        this.state = 3201;
                        this.match(Cobol85Parser.DOT_FS);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataAlignedClause = function () {
        var _localctx = new DataAlignedClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 444, Cobol85Parser.RULE_dataAlignedClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3204;
                this.match(Cobol85Parser.ALIGNED);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataBlankWhenZeroClause = function () {
        var _localctx = new DataBlankWhenZeroClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 446, Cobol85Parser.RULE_dataBlankWhenZeroClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3206;
                this.match(Cobol85Parser.BLANK);
                this.state = 3208;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WHEN) {
                    {
                        this.state = 3207;
                        this.match(Cobol85Parser.WHEN);
                    }
                }
                this.state = 3210;
                _la = this._input.LA(1);
                if (!(((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & ((1 << (Cobol85Parser.ZERO - 521)) | (1 << (Cobol85Parser.ZEROS - 521)) | (1 << (Cobol85Parser.ZEROES - 521)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataCommonOwnLocalClause = function () {
        var _localctx = new DataCommonOwnLocalClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 448, Cobol85Parser.RULE_dataCommonOwnLocalClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3212;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.COMMON || _la === Cobol85Parser.LOCAL || _la === Cobol85Parser.OWN)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataExternalClause = function () {
        var _localctx = new DataExternalClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 450, Cobol85Parser.RULE_dataExternalClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3215;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3214;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3217;
                this.match(Cobol85Parser.EXTERNAL);
                this.state = 3220;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 397, this._ctx)) {
                    case 1:
                        {
                            this.state = 3218;
                            this.match(Cobol85Parser.BY);
                            this.state = 3219;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataGlobalClause = function () {
        var _localctx = new DataGlobalClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 452, Cobol85Parser.RULE_dataGlobalClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3223;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3222;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3225;
                this.match(Cobol85Parser.GLOBAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataIntegerStringClause = function () {
        var _localctx = new DataIntegerStringClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 454, Cobol85Parser.RULE_dataIntegerStringClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3227;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.INTEGER || _la === Cobol85Parser.STRING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataJustifiedClause = function () {
        var _localctx = new DataJustifiedClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 456, Cobol85Parser.RULE_dataJustifiedClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3229;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.JUST || _la === Cobol85Parser.JUSTIFIED)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3231;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.RIGHT) {
                    {
                        this.state = 3230;
                        this.match(Cobol85Parser.RIGHT);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataOccursClause = function () {
        var _localctx = new DataOccursClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 458, Cobol85Parser.RULE_dataOccursClause);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3233;
                this.match(Cobol85Parser.OCCURS);
                this.state = 3234;
                this.integerLiteral();
                this.state = 3236;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TO) {
                    {
                        this.state = 3235;
                        this.dataOccursTo();
                    }
                }
                this.state = 3239;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TIMES) {
                    {
                        this.state = 3238;
                        this.match(Cobol85Parser.TIMES);
                    }
                }
                this.state = 3246;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DEPENDING) {
                    {
                        this.state = 3241;
                        this.match(Cobol85Parser.DEPENDING);
                        this.state = 3243;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.ON) {
                            {
                                this.state = 3242;
                                this.match(Cobol85Parser.ON);
                            }
                        }
                        this.state = 3245;
                        this.qualifiedDataName();
                    }
                }
                this.state = 3251;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.ASCENDING || _la === Cobol85Parser.DESCENDING) {
                    {
                        {
                            this.state = 3248;
                            this.dataOccursSort();
                        }
                    }
                    this.state = 3253;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3266;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.INDEXED) {
                    {
                        this.state = 3254;
                        this.match(Cobol85Parser.INDEXED);
                        this.state = 3256;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.BY) {
                            {
                                this.state = 3255;
                                this.match(Cobol85Parser.BY);
                            }
                        }
                        this.state = 3259;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 406, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3258;
                                    this.match(Cobol85Parser.LOCAL);
                                }
                                break;
                        }
                        this.state = 3262;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 3261;
                                            this.indexName();
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 3264;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataOccursTo = function () {
        var _localctx = new DataOccursToContext(this._ctx, this.state);
        this.enterRule(_localctx, 460, Cobol85Parser.RULE_dataOccursTo);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3268;
                this.match(Cobol85Parser.TO);
                this.state = 3269;
                this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataOccursSort = function () {
        var _localctx = new DataOccursSortContext(this._ctx, this.state);
        this.enterRule(_localctx, 462, Cobol85Parser.RULE_dataOccursSort);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3271;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.ASCENDING || _la === Cobol85Parser.DESCENDING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3273;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.KEY) {
                    {
                        this.state = 3272;
                        this.match(Cobol85Parser.KEY);
                    }
                }
                this.state = 3276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3275;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3279;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3278;
                                    this.qualifiedDataName();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3281;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataPictureClause = function () {
        var _localctx = new DataPictureClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 464, Cobol85Parser.RULE_dataPictureClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3283;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.PIC || _la === Cobol85Parser.PICTURE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3285;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3284;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3287;
                this.pictureString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.pictureString = function () {
        var _localctx = new PictureStringContext(this._ctx, this.state);
        this.enterRule(_localctx, 466, Cobol85Parser.RULE_pictureString);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3297;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3290;
                                    this._errHandler.sync(this);
                                    _alt = 1;
                                    do {
                                        switch (_alt) {
                                            case 1:
                                                {
                                                    {
                                                        this.state = 3289;
                                                        this.pictureChars();
                                                    }
                                                }
                                                break;
                                            default:
                                                throw new NoViableAltException_1.NoViableAltException(this);
                                        }
                                        this.state = 3292;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
                                    } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                                    this.state = 3295;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 414, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 3294;
                                                this.pictureCardinality();
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3299;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.pictureChars = function () {
        var _localctx = new PictureCharsContext(this._ctx, this.state);
        this.enterRule(_localctx, 468, Cobol85Parser.RULE_pictureChars);
        try {
            this.state = 3317;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.DOLLARCHAR:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3301;
                        this.match(Cobol85Parser.DOLLARCHAR);
                    }
                    break;
                case Cobol85Parser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3302;
                        this.match(Cobol85Parser.IDENTIFIER);
                    }
                    break;
                case Cobol85Parser.NUMERICLITERAL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3303;
                        this.match(Cobol85Parser.NUMERICLITERAL);
                    }
                    break;
                case Cobol85Parser.SLASHCHAR:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3304;
                        this.match(Cobol85Parser.SLASHCHAR);
                    }
                    break;
                case Cobol85Parser.COMMACHAR:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3305;
                        this.match(Cobol85Parser.COMMACHAR);
                    }
                    break;
                case Cobol85Parser.DOT:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 3306;
                        this.match(Cobol85Parser.DOT);
                    }
                    break;
                case Cobol85Parser.COLONCHAR:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 3307;
                        this.match(Cobol85Parser.COLONCHAR);
                    }
                    break;
                case Cobol85Parser.ASTERISKCHAR:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 3308;
                        this.match(Cobol85Parser.ASTERISKCHAR);
                    }
                    break;
                case Cobol85Parser.DOUBLEASTERISKCHAR:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 3309;
                        this.match(Cobol85Parser.DOUBLEASTERISKCHAR);
                    }
                    break;
                case Cobol85Parser.LPARENCHAR:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 3310;
                        this.match(Cobol85Parser.LPARENCHAR);
                    }
                    break;
                case Cobol85Parser.RPARENCHAR:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 3311;
                        this.match(Cobol85Parser.RPARENCHAR);
                    }
                    break;
                case Cobol85Parser.PLUSCHAR:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 3312;
                        this.match(Cobol85Parser.PLUSCHAR);
                    }
                    break;
                case Cobol85Parser.MINUSCHAR:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 3313;
                        this.match(Cobol85Parser.MINUSCHAR);
                    }
                    break;
                case Cobol85Parser.LESSTHANCHAR:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 3314;
                        this.match(Cobol85Parser.LESSTHANCHAR);
                    }
                    break;
                case Cobol85Parser.MORETHANCHAR:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 3315;
                        this.match(Cobol85Parser.MORETHANCHAR);
                    }
                    break;
                case Cobol85Parser.LEVEL_NUMBER_66:
                case Cobol85Parser.LEVEL_NUMBER_77:
                case Cobol85Parser.LEVEL_NUMBER_88:
                case Cobol85Parser.INTEGERLITERAL:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 3316;
                        this.integerLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.pictureCardinality = function () {
        var _localctx = new PictureCardinalityContext(this._ctx, this.state);
        this.enterRule(_localctx, 470, Cobol85Parser.RULE_pictureCardinality);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3319;
                this.match(Cobol85Parser.LPARENCHAR);
                this.state = 3320;
                this.integerLiteral();
                this.state = 3321;
                this.match(Cobol85Parser.RPARENCHAR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataReceivedByClause = function () {
        var _localctx = new DataReceivedByClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 472, Cobol85Parser.RULE_dataReceivedByClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3324;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.RECEIVED) {
                    {
                        this.state = 3323;
                        this.match(Cobol85Parser.RECEIVED);
                    }
                }
                this.state = 3327;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.BY) {
                    {
                        this.state = 3326;
                        this.match(Cobol85Parser.BY);
                    }
                }
                this.state = 3329;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.CONTENT || _la === Cobol85Parser.REF || _la === Cobol85Parser.REFERENCE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataRecordAreaClause = function () {
        var _localctx = new DataRecordAreaClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 474, Cobol85Parser.RULE_dataRecordAreaClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3331;
                this.match(Cobol85Parser.RECORD);
                this.state = 3332;
                this.match(Cobol85Parser.AREA);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataRedefinesClause = function () {
        var _localctx = new DataRedefinesClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 476, Cobol85Parser.RULE_dataRedefinesClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3334;
                this.match(Cobol85Parser.REDEFINES);
                this.state = 3335;
                this.dataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataRenamesClause = function () {
        var _localctx = new DataRenamesClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 478, Cobol85Parser.RULE_dataRenamesClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3337;
                this.match(Cobol85Parser.RENAMES);
                this.state = 3338;
                this.qualifiedDataName();
                this.state = 3341;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
                    {
                        this.state = 3339;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3340;
                        this.qualifiedDataName();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataSignClause = function () {
        var _localctx = new DataSignClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 480, Cobol85Parser.RULE_dataSignClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3347;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SIGN) {
                    {
                        this.state = 3343;
                        this.match(Cobol85Parser.SIGN);
                        this.state = 3345;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 3344;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                    }
                }
                this.state = 3349;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3354;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.SEPARATE) {
                    {
                        this.state = 3350;
                        this.match(Cobol85Parser.SEPARATE);
                        this.state = 3352;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.CHARACTER) {
                            {
                                this.state = 3351;
                                this.match(Cobol85Parser.CHARACTER);
                            }
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataSynchronizedClause = function () {
        var _localctx = new DataSynchronizedClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 482, Cobol85Parser.RULE_dataSynchronizedClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3356;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.SYNC || _la === Cobol85Parser.SYNCHRONIZED)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3358;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LEFT || _la === Cobol85Parser.RIGHT) {
                    {
                        this.state = 3357;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.LEFT || _la === Cobol85Parser.RIGHT)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataThreadLocalClause = function () {
        var _localctx = new DataThreadLocalClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 484, Cobol85Parser.RULE_dataThreadLocalClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3361;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3360;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3363;
                this.match(Cobol85Parser.THREAD_LOCAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataTypeClause = function () {
        var _localctx = new DataTypeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 486, Cobol85Parser.RULE_dataTypeClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3365;
                this.match(Cobol85Parser.TYPE);
                this.state = 3367;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3366;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3369;
                _la = this._input.LA(1);
                if (!(((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & ((1 << (Cobol85Parser.LONG_DATE - 287)) | (1 << (Cobol85Parser.LONG_TIME - 287)) | (1 << (Cobol85Parser.NUMERIC_DATE - 287)))) !== 0) || _la === Cobol85Parser.NUMERIC_TIME || _la === Cobol85Parser.SHORT_DATE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataTypeDefClause = function () {
        var _localctx = new DataTypeDefClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 488, Cobol85Parser.RULE_dataTypeDefClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3372;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 3371;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 3374;
                this.match(Cobol85Parser.TYPEDEF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataUsageClause = function () {
        var _localctx = new DataUsageClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 490, Cobol85Parser.RULE_dataUsageClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3380;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.USAGE) {
                    {
                        this.state = 3376;
                        this.match(Cobol85Parser.USAGE);
                        this.state = 3378;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IS) {
                            {
                                this.state = 3377;
                                this.match(Cobol85Parser.IS);
                            }
                        }
                    }
                }
                this.state = 3415;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.BINARY:
                        {
                            this.state = 3382;
                            this.match(Cobol85Parser.BINARY);
                            this.state = 3384;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 430, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3383;
                                        _la = this._input.LA(1);
                                        if (!(_la === Cobol85Parser.EXTENDED || _la === Cobol85Parser.TRUNCATED)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                    case Cobol85Parser.BIT:
                        {
                            this.state = 3386;
                            this.match(Cobol85Parser.BIT);
                        }
                        break;
                    case Cobol85Parser.COMP:
                        {
                            this.state = 3387;
                            this.match(Cobol85Parser.COMP);
                        }
                        break;
                    case Cobol85Parser.COMP_1:
                        {
                            this.state = 3388;
                            this.match(Cobol85Parser.COMP_1);
                        }
                        break;
                    case Cobol85Parser.COMP_2:
                        {
                            this.state = 3389;
                            this.match(Cobol85Parser.COMP_2);
                        }
                        break;
                    case Cobol85Parser.COMP_3:
                        {
                            this.state = 3390;
                            this.match(Cobol85Parser.COMP_3);
                        }
                        break;
                    case Cobol85Parser.COMP_4:
                        {
                            this.state = 3391;
                            this.match(Cobol85Parser.COMP_4);
                        }
                        break;
                    case Cobol85Parser.COMP_5:
                        {
                            this.state = 3392;
                            this.match(Cobol85Parser.COMP_5);
                        }
                        break;
                    case Cobol85Parser.COMPUTATIONAL:
                        {
                            this.state = 3393;
                            this.match(Cobol85Parser.COMPUTATIONAL);
                        }
                        break;
                    case Cobol85Parser.COMPUTATIONAL_1:
                        {
                            this.state = 3394;
                            this.match(Cobol85Parser.COMPUTATIONAL_1);
                        }
                        break;
                    case Cobol85Parser.COMPUTATIONAL_2:
                        {
                            this.state = 3395;
                            this.match(Cobol85Parser.COMPUTATIONAL_2);
                        }
                        break;
                    case Cobol85Parser.COMPUTATIONAL_3:
                        {
                            this.state = 3396;
                            this.match(Cobol85Parser.COMPUTATIONAL_3);
                        }
                        break;
                    case Cobol85Parser.COMPUTATIONAL_4:
                        {
                            this.state = 3397;
                            this.match(Cobol85Parser.COMPUTATIONAL_4);
                        }
                        break;
                    case Cobol85Parser.COMPUTATIONAL_5:
                        {
                            this.state = 3398;
                            this.match(Cobol85Parser.COMPUTATIONAL_5);
                        }
                        break;
                    case Cobol85Parser.CONTROL_POINT:
                        {
                            this.state = 3399;
                            this.match(Cobol85Parser.CONTROL_POINT);
                        }
                        break;
                    case Cobol85Parser.DATE:
                        {
                            this.state = 3400;
                            this.match(Cobol85Parser.DATE);
                        }
                        break;
                    case Cobol85Parser.DISPLAY:
                        {
                            this.state = 3401;
                            this.match(Cobol85Parser.DISPLAY);
                        }
                        break;
                    case Cobol85Parser.DISPLAY_1:
                        {
                            this.state = 3402;
                            this.match(Cobol85Parser.DISPLAY_1);
                        }
                        break;
                    case Cobol85Parser.DOUBLE:
                        {
                            this.state = 3403;
                            this.match(Cobol85Parser.DOUBLE);
                        }
                        break;
                    case Cobol85Parser.EVENT:
                        {
                            this.state = 3404;
                            this.match(Cobol85Parser.EVENT);
                        }
                        break;
                    case Cobol85Parser.FUNCTION_POINTER:
                        {
                            this.state = 3405;
                            this.match(Cobol85Parser.FUNCTION_POINTER);
                        }
                        break;
                    case Cobol85Parser.INDEX:
                        {
                            this.state = 3406;
                            this.match(Cobol85Parser.INDEX);
                        }
                        break;
                    case Cobol85Parser.KANJI:
                        {
                            this.state = 3407;
                            this.match(Cobol85Parser.KANJI);
                        }
                        break;
                    case Cobol85Parser.LOCK:
                        {
                            this.state = 3408;
                            this.match(Cobol85Parser.LOCK);
                        }
                        break;
                    case Cobol85Parser.NATIONAL:
                        {
                            this.state = 3409;
                            this.match(Cobol85Parser.NATIONAL);
                        }
                        break;
                    case Cobol85Parser.PACKED_DECIMAL:
                        {
                            this.state = 3410;
                            this.match(Cobol85Parser.PACKED_DECIMAL);
                        }
                        break;
                    case Cobol85Parser.POINTER:
                        {
                            this.state = 3411;
                            this.match(Cobol85Parser.POINTER);
                        }
                        break;
                    case Cobol85Parser.PROCEDURE_POINTER:
                        {
                            this.state = 3412;
                            this.match(Cobol85Parser.PROCEDURE_POINTER);
                        }
                        break;
                    case Cobol85Parser.REAL:
                        {
                            this.state = 3413;
                            this.match(Cobol85Parser.REAL);
                        }
                        break;
                    case Cobol85Parser.TASK:
                        {
                            this.state = 3414;
                            this.match(Cobol85Parser.TASK);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataUsingClause = function () {
        var _localctx = new DataUsingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 492, Cobol85Parser.RULE_dataUsingClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3417;
                this.match(Cobol85Parser.USING);
                this.state = 3418;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.CONVENTION || _la === Cobol85Parser.LANGUAGE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3420;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.OF) {
                    {
                        this.state = 3419;
                        this.match(Cobol85Parser.OF);
                    }
                }
                this.state = 3424;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 433, this._ctx)) {
                    case 1:
                        {
                            this.state = 3422;
                            this.cobolWord();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3423;
                            this.dataName();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataValueClause = function () {
        var _localctx = new DataValueClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 494, Cobol85Parser.RULE_dataValueClause);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3434;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.VALUE:
                        {
                            this.state = 3426;
                            this.match(Cobol85Parser.VALUE);
                            this.state = 3428;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.IS) {
                                {
                                    this.state = 3427;
                                    this.match(Cobol85Parser.IS);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.VALUES:
                        {
                            this.state = 3430;
                            this.match(Cobol85Parser.VALUES);
                            this.state = 3432;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.ARE) {
                                {
                                    this.state = 3431;
                                    this.match(Cobol85Parser.ARE);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.ALL:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FALSE:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.HIGH_VALUE:
                    case Cobol85Parser.HIGH_VALUES:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.LOW_VALUE:
                    case Cobol85Parser.LOW_VALUES:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NULL:
                    case Cobol85Parser.NULLS:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.QUOTE:
                    case Cobol85Parser.QUOTES:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SPACE:
                    case Cobol85Parser.SPACES:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUE:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.ZEROS:
                    case Cobol85Parser.ZEROES:
                    case Cobol85Parser.NONNUMERICLITERAL:
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                    case Cobol85Parser.NUMERICLITERAL:
                    case Cobol85Parser.IDENTIFIER:
                        break;
                    default:
                        break;
                }
                this.state = 3436;
                this.dataValueInterval();
                this.state = 3443;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3438;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === Cobol85Parser.COMMACHAR) {
                                    {
                                        this.state = 3437;
                                        this.match(Cobol85Parser.COMMACHAR);
                                    }
                                }
                                this.state = 3440;
                                this.dataValueInterval();
                            }
                        }
                    }
                    this.state = 3445;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataValueInterval = function () {
        var _localctx = new DataValueIntervalContext(this._ctx, this.state);
        this.enterRule(_localctx, 496, Cobol85Parser.RULE_dataValueInterval);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3446;
                this.dataValueIntervalFrom();
                this.state = 3448;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
                    {
                        this.state = 3447;
                        this.dataValueIntervalTo();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataValueIntervalFrom = function () {
        var _localctx = new DataValueIntervalFromContext(this._ctx, this.state);
        this.enterRule(_localctx, 498, Cobol85Parser.RULE_dataValueIntervalFrom);
        try {
            this.state = 3452;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 440, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3450;
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3451;
                        this.cobolWord();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataValueIntervalTo = function () {
        var _localctx = new DataValueIntervalToContext(this._ctx, this.state);
        this.enterRule(_localctx, 500, Cobol85Parser.RULE_dataValueIntervalTo);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3454;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3455;
                this.literal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataWithLowerBoundsClause = function () {
        var _localctx = new DataWithLowerBoundsClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 502, Cobol85Parser.RULE_dataWithLowerBoundsClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3458;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 3457;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 3460;
                this.match(Cobol85Parser.LOWER);
                this.state = 3461;
                this.match(Cobol85Parser.BOUNDS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDivision = function () {
        var _localctx = new ProcedureDivisionContext(this._ctx, this.state);
        this.enterRule(_localctx, 504, Cobol85Parser.RULE_procedureDivision);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3463;
                this.match(Cobol85Parser.PROCEDURE);
                this.state = 3464;
                this.match(Cobol85Parser.DIVISION);
                this.state = 3466;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.CHAINING || _la === Cobol85Parser.USING) {
                    {
                        this.state = 3465;
                        this.procedureDivisionUsingClause();
                    }
                }
                this.state = 3469;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.GIVING || _la === Cobol85Parser.RETURNING) {
                    {
                        this.state = 3468;
                        this.procedureDivisionGivingClause();
                    }
                }
                this.state = 3471;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 3473;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DECLARATIVES) {
                    {
                        this.state = 3472;
                        this.procedureDeclaratives();
                    }
                }
                this.state = 3475;
                this.procedureDivisionBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDivisionUsingClause = function () {
        var _localctx = new ProcedureDivisionUsingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 506, Cobol85Parser.RULE_procedureDivisionUsingClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3477;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.CHAINING || _la === Cobol85Parser.USING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3479;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 3478;
                            this.procedureDivisionUsingParameter();
                        }
                    }
                    this.state = 3481;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ANY) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.BY - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.OPTIONAL - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (Cobol85Parser.REFERENCE - 384)) | (1 << (Cobol85Parser.REMOVE - 384)) | (1 << (Cobol85Parser.REQUIRED - 384)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 384)) | (1 << (Cobol85Parser.RETURN_CODE - 384)) | (1 << (Cobol85Parser.SAVE - 384)))) !== 0) || ((((_la - 420)) & ~0x1F) === 0 && ((1 << (_la - 420)) & ((1 << (Cobol85Parser.SECURE - 420)) | (1 << (Cobol85Parser.SHARED - 420)) | (1 << (Cobol85Parser.SHAREDBYALL - 420)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 420)) | (1 << (Cobol85Parser.SHARING - 420)) | (1 << (Cobol85Parser.SHIFT_IN - 420)) | (1 << (Cobol85Parser.SHIFT_OUT - 420)) | (1 << (Cobol85Parser.SHORT_DATE - 420)) | (1 << (Cobol85Parser.SORT_CONTROL - 420)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 420)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 420)) | (1 << (Cobol85Parser.SORT_MESSAGE - 420)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 420)) | (1 << (Cobol85Parser.SORT_RETURN - 420)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VALUE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDivisionGivingClause = function () {
        var _localctx = new ProcedureDivisionGivingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 508, Cobol85Parser.RULE_procedureDivisionGivingClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3483;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.GIVING || _la === Cobol85Parser.RETURNING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3484;
                this.dataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDivisionUsingParameter = function () {
        var _localctx = new ProcedureDivisionUsingParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 510, Cobol85Parser.RULE_procedureDivisionUsingParameter);
        try {
            this.state = 3488;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 446, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3486;
                        this.procedureDivisionByReferencePhrase();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3487;
                        this.procedureDivisionByValuePhrase();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDivisionByReferencePhrase = function () {
        var _localctx = new ProcedureDivisionByReferencePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 512, Cobol85Parser.RULE_procedureDivisionByReferencePhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3494;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.BY || _la === Cobol85Parser.REFERENCE) {
                    {
                        this.state = 3491;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.BY) {
                            {
                                this.state = 3490;
                                this.match(Cobol85Parser.BY);
                            }
                        }
                        this.state = 3493;
                        this.match(Cobol85Parser.REFERENCE);
                    }
                }
                this.state = 3497;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3496;
                                    this.procedureDivisionByReference();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3499;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDivisionByReference = function () {
        var _localctx = new ProcedureDivisionByReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 514, Cobol85Parser.RULE_procedureDivisionByReference);
        var _la;
        try {
            this.state = 3509;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.ABORT:
                case Cobol85Parser.ADDRESS:
                case Cobol85Parser.AS:
                case Cobol85Parser.ASCII:
                case Cobol85Parser.ASSOCIATED_DATA:
                case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                case Cobol85Parser.ATTRIBUTE:
                case Cobol85Parser.AUTO:
                case Cobol85Parser.AUTO_SKIP:
                case Cobol85Parser.BACKGROUND_COLOR:
                case Cobol85Parser.BACKGROUND_COLOUR:
                case Cobol85Parser.BEEP:
                case Cobol85Parser.BELL:
                case Cobol85Parser.BINARY:
                case Cobol85Parser.BIT:
                case Cobol85Parser.BLINK:
                case Cobol85Parser.BOUNDS:
                case Cobol85Parser.CAPABLE:
                case Cobol85Parser.CCSVERSION:
                case Cobol85Parser.CHANGED:
                case Cobol85Parser.CHANNEL:
                case Cobol85Parser.CLOSE_DISPOSITION:
                case Cobol85Parser.COBOL:
                case Cobol85Parser.COMMITMENT:
                case Cobol85Parser.CONTROL_POINT:
                case Cobol85Parser.CONVENTION:
                case Cobol85Parser.CRUNCH:
                case Cobol85Parser.CURSOR:
                case Cobol85Parser.DATE:
                case Cobol85Parser.DAY:
                case Cobol85Parser.DAY_OF_WEEK:
                case Cobol85Parser.DEBUG_CONTENTS:
                case Cobol85Parser.DEBUG_ITEM:
                case Cobol85Parser.DEBUG_LINE:
                case Cobol85Parser.DEBUG_NAME:
                case Cobol85Parser.DEBUG_SUB_1:
                case Cobol85Parser.DEBUG_SUB_2:
                case Cobol85Parser.DEBUG_SUB_3:
                case Cobol85Parser.DEFAULT:
                case Cobol85Parser.DEFAULT_DISPLAY:
                case Cobol85Parser.DEFINITION:
                case Cobol85Parser.DFHRESP:
                case Cobol85Parser.DFHVALUE:
                case Cobol85Parser.DISK:
                case Cobol85Parser.DONTCARE:
                case Cobol85Parser.DOUBLE:
                case Cobol85Parser.EBCDIC:
                case Cobol85Parser.EMPTY_CHECK:
                case Cobol85Parser.ENTER:
                case Cobol85Parser.ENTRY_PROCEDURE:
                case Cobol85Parser.ERASE:
                case Cobol85Parser.EOL:
                case Cobol85Parser.EOS:
                case Cobol85Parser.ESCAPE:
                case Cobol85Parser.EVENT:
                case Cobol85Parser.EXCLUSIVE:
                case Cobol85Parser.EXPORT:
                case Cobol85Parser.EXTENDED:
                case Cobol85Parser.FOREGROUND_COLOR:
                case Cobol85Parser.FOREGROUND_COLOUR:
                case Cobol85Parser.FULL:
                case Cobol85Parser.FUNCTION:
                case Cobol85Parser.FUNCTIONNAME:
                case Cobol85Parser.FUNCTION_POINTER:
                case Cobol85Parser.GRID:
                case Cobol85Parser.HIGHLIGHT:
                case Cobol85Parser.IMPLICIT:
                case Cobol85Parser.IMPORT:
                case Cobol85Parser.INTEGER:
                case Cobol85Parser.KEPT:
                case Cobol85Parser.KEYBOARD:
                case Cobol85Parser.LANGUAGE:
                case Cobol85Parser.LB:
                case Cobol85Parser.LD:
                case Cobol85Parser.LEFTLINE:
                case Cobol85Parser.LENGTH:
                case Cobol85Parser.LENGTH_CHECK:
                case Cobol85Parser.LIBACCESS:
                case Cobol85Parser.LIBPARAMETER:
                case Cobol85Parser.LIBRARY:
                case Cobol85Parser.LINAGE_COUNTER:
                case Cobol85Parser.LINE_COUNTER:
                case Cobol85Parser.LIST:
                case Cobol85Parser.LOCAL:
                case Cobol85Parser.LONG_DATE:
                case Cobol85Parser.LONG_TIME:
                case Cobol85Parser.LOWER:
                case Cobol85Parser.LOWLIGHT:
                case Cobol85Parser.MMDDYYYY:
                case Cobol85Parser.NAMED:
                case Cobol85Parser.NATIONAL:
                case Cobol85Parser.NATIONAL_EDITED:
                case Cobol85Parser.NETWORK:
                case Cobol85Parser.NO_ECHO:
                case Cobol85Parser.NUMERIC_DATE:
                case Cobol85Parser.NUMERIC_TIME:
                case Cobol85Parser.ODT:
                case Cobol85Parser.OPTIONAL:
                case Cobol85Parser.ORDERLY:
                case Cobol85Parser.OVERLINE:
                case Cobol85Parser.OWN:
                case Cobol85Parser.PAGE_COUNTER:
                case Cobol85Parser.PASSWORD:
                case Cobol85Parser.PORT:
                case Cobol85Parser.PRINTER:
                case Cobol85Parser.PRIVATE:
                case Cobol85Parser.PROCESS:
                case Cobol85Parser.PROGRAM:
                case Cobol85Parser.PROMPT:
                case Cobol85Parser.READER:
                case Cobol85Parser.REMOTE:
                case Cobol85Parser.REAL:
                case Cobol85Parser.RECEIVED:
                case Cobol85Parser.RECURSIVE:
                case Cobol85Parser.REF:
                case Cobol85Parser.REMOVE:
                case Cobol85Parser.REQUIRED:
                case Cobol85Parser.REVERSE_VIDEO:
                case Cobol85Parser.RETURN_CODE:
                case Cobol85Parser.SAVE:
                case Cobol85Parser.SECURE:
                case Cobol85Parser.SHARED:
                case Cobol85Parser.SHAREDBYALL:
                case Cobol85Parser.SHAREDBYRUNUNIT:
                case Cobol85Parser.SHARING:
                case Cobol85Parser.SHIFT_IN:
                case Cobol85Parser.SHIFT_OUT:
                case Cobol85Parser.SHORT_DATE:
                case Cobol85Parser.SORT_CONTROL:
                case Cobol85Parser.SORT_CORE_SIZE:
                case Cobol85Parser.SORT_FILE_SIZE:
                case Cobol85Parser.SORT_MESSAGE:
                case Cobol85Parser.SORT_MODE_SIZE:
                case Cobol85Parser.SORT_RETURN:
                case Cobol85Parser.SYMBOL:
                case Cobol85Parser.TALLY:
                case Cobol85Parser.TASK:
                case Cobol85Parser.THREAD:
                case Cobol85Parser.THREAD_LOCAL:
                case Cobol85Parser.TIME:
                case Cobol85Parser.TIMER:
                case Cobol85Parser.TODAYS_DATE:
                case Cobol85Parser.TODAYS_NAME:
                case Cobol85Parser.TRUNCATED:
                case Cobol85Parser.TYPEDEF:
                case Cobol85Parser.UNDERLINE:
                case Cobol85Parser.VIRTUAL:
                case Cobol85Parser.WAIT:
                case Cobol85Parser.WHEN_COMPILED:
                case Cobol85Parser.YEAR:
                case Cobol85Parser.YYYYMMDD:
                case Cobol85Parser.YYYYDDD:
                case Cobol85Parser.ZERO_FILL:
                case Cobol85Parser.LEVEL_NUMBER_66:
                case Cobol85Parser.LEVEL_NUMBER_77:
                case Cobol85Parser.LEVEL_NUMBER_88:
                case Cobol85Parser.INTEGERLITERAL:
                case Cobol85Parser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        {
                            this.state = 3502;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.OPTIONAL) {
                                {
                                    this.state = 3501;
                                    this.match(Cobol85Parser.OPTIONAL);
                                }
                            }
                            this.state = 3506;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 451, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3504;
                                        this.identifier();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 3505;
                                        this.fileName();
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                case Cobol85Parser.ANY:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3508;
                        this.match(Cobol85Parser.ANY);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDivisionByValuePhrase = function () {
        var _localctx = new ProcedureDivisionByValuePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 516, Cobol85Parser.RULE_procedureDivisionByValuePhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3512;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.BY) {
                    {
                        this.state = 3511;
                        this.match(Cobol85Parser.BY);
                    }
                }
                this.state = 3514;
                this.match(Cobol85Parser.VALUE);
                this.state = 3516;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3515;
                                    this.procedureDivisionByValue();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3518;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDivisionByValue = function () {
        var _localctx = new ProcedureDivisionByValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 518, Cobol85Parser.RULE_procedureDivisionByValue);
        try {
            this.state = 3523;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 455, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3520;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3521;
                        this.literal();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3522;
                        this.match(Cobol85Parser.ANY);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDeclaratives = function () {
        var _localctx = new ProcedureDeclarativesContext(this._ctx, this.state);
        this.enterRule(_localctx, 520, Cobol85Parser.RULE_procedureDeclaratives);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3525;
                this.match(Cobol85Parser.DECLARATIVES);
                this.state = 3526;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 3528;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 3527;
                            this.procedureDeclarative();
                        }
                    }
                    this.state = 3530;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
                this.state = 3532;
                this.match(Cobol85Parser.END);
                this.state = 3533;
                this.match(Cobol85Parser.DECLARATIVES);
                this.state = 3534;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDeclarative = function () {
        var _localctx = new ProcedureDeclarativeContext(this._ctx, this.state);
        this.enterRule(_localctx, 522, Cobol85Parser.RULE_procedureDeclarative);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3536;
                this.procedureSectionHeader();
                this.state = 3537;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 3538;
                this.useStatement();
                this.state = 3539;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 3540;
                this.paragraphs();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureSectionHeader = function () {
        var _localctx = new ProcedureSectionHeaderContext(this._ctx, this.state);
        this.enterRule(_localctx, 524, Cobol85Parser.RULE_procedureSectionHeader);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3542;
                this.sectionName();
                this.state = 3543;
                this.match(Cobol85Parser.SECTION);
                this.state = 3545;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
                    {
                        this.state = 3544;
                        this.integerLiteral();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureDivisionBody = function () {
        var _localctx = new ProcedureDivisionBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 526, Cobol85Parser.RULE_procedureDivisionBody);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3547;
                this.paragraphs();
                this.state = 3551;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0)) {
                    {
                        {
                            this.state = 3548;
                            this.procedureSection();
                        }
                    }
                    this.state = 3553;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureSection = function () {
        var _localctx = new ProcedureSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 528, Cobol85Parser.RULE_procedureSection);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3554;
                this.procedureSectionHeader();
                this.state = 3555;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 3556;
                this.paragraphs();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.paragraphs = function () {
        var _localctx = new ParagraphsContext(this._ctx, this.state);
        this.enterRule(_localctx, 530, Cobol85Parser.RULE_paragraphs);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3561;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la === Cobol85Parser.COMPUTE || _la === Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1F) === 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la === Cobol85Parser.OPEN || _la === Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1F) === 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1F) === 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la === Cobol85Parser.TERMINATE || _la === Cobol85Parser.UNSTRING || _la === Cobol85Parser.WRITE || _la === Cobol85Parser.DOT_FS || ((((_la - 559)) & ~0x1F) === 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
                    {
                        {
                            this.state = 3558;
                            this.sentence();
                        }
                    }
                    this.state = 3563;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3567;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3564;
                                this.paragraph();
                            }
                        }
                    }
                    this.state = 3569;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.paragraph = function () {
        var _localctx = new ParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 532, Cobol85Parser.RULE_paragraph);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3570;
                this.paragraphName();
                this.state = 3571;
                this.match(Cobol85Parser.DOT_FS);
                this.state = 3579;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 462, this._ctx)) {
                    case 1:
                        {
                            this.state = 3572;
                            this.alteredGoTo();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3576;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la === Cobol85Parser.COMPUTE || _la === Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1F) === 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la === Cobol85Parser.OPEN || _la === Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1F) === 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1F) === 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la === Cobol85Parser.TERMINATE || _la === Cobol85Parser.UNSTRING || _la === Cobol85Parser.WRITE || _la === Cobol85Parser.DOT_FS || ((((_la - 559)) & ~0x1F) === 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
                                {
                                    {
                                        this.state = 3573;
                                        this.sentence();
                                    }
                                }
                                this.state = 3578;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sentence = function () {
        var _localctx = new SentenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 534, Cobol85Parser.RULE_sentence);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3584;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la === Cobol85Parser.COMPUTE || _la === Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1F) === 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la === Cobol85Parser.OPEN || _la === Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1F) === 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1F) === 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la === Cobol85Parser.TERMINATE || _la === Cobol85Parser.UNSTRING || _la === Cobol85Parser.WRITE || ((((_la - 559)) & ~0x1F) === 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
                    {
                        {
                            this.state = 3581;
                            this.statement();
                        }
                    }
                    this.state = 3586;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3587;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.statement = function () {
        var _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 536, Cobol85Parser.RULE_statement);
        try {
            this.state = 3638;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.ACCEPT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3589;
                        this.acceptStatement();
                    }
                    break;
                case Cobol85Parser.ADD:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3590;
                        this.addStatement();
                    }
                    break;
                case Cobol85Parser.ALTER:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3591;
                        this.alterStatement();
                    }
                    break;
                case Cobol85Parser.CALL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3592;
                        this.callStatement();
                    }
                    break;
                case Cobol85Parser.CANCEL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3593;
                        this.cancelStatement();
                    }
                    break;
                case Cobol85Parser.CLOSE:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 3594;
                        this.closeStatement();
                    }
                    break;
                case Cobol85Parser.COMPUTE:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 3595;
                        this.computeStatement();
                    }
                    break;
                case Cobol85Parser.CONTINUE:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 3596;
                        this.continueStatement();
                    }
                    break;
                case Cobol85Parser.DELETE:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 3597;
                        this.deleteStatement();
                    }
                    break;
                case Cobol85Parser.DISABLE:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 3598;
                        this.disableStatement();
                    }
                    break;
                case Cobol85Parser.DISPLAY:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 3599;
                        this.displayStatement();
                    }
                    break;
                case Cobol85Parser.DIVIDE:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 3600;
                        this.divideStatement();
                    }
                    break;
                case Cobol85Parser.ENABLE:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 3601;
                        this.enableStatement();
                    }
                    break;
                case Cobol85Parser.ENTRY:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 3602;
                        this.entryStatement();
                    }
                    break;
                case Cobol85Parser.EVALUATE:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 3603;
                        this.evaluateStatement();
                    }
                    break;
                case Cobol85Parser.EXHIBIT:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 3604;
                        this.exhibitStatement();
                    }
                    break;
                case Cobol85Parser.EXECCICSLINE:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 3605;
                        this.execCicsStatement();
                    }
                    break;
                case Cobol85Parser.EXECSQLLINE:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 3606;
                        this.execSqlStatement();
                    }
                    break;
                case Cobol85Parser.EXECSQLIMSLINE:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 3607;
                        this.execSqlImsStatement();
                    }
                    break;
                case Cobol85Parser.EXIT:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 3608;
                        this.exitStatement();
                    }
                    break;
                case Cobol85Parser.GENERATE:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 3609;
                        this.generateStatement();
                    }
                    break;
                case Cobol85Parser.GOBACK:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 3610;
                        this.gobackStatement();
                    }
                    break;
                case Cobol85Parser.GO:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 3611;
                        this.goToStatement();
                    }
                    break;
                case Cobol85Parser.IF:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 3612;
                        this.ifStatement();
                    }
                    break;
                case Cobol85Parser.INITIALIZE:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 3613;
                        this.initializeStatement();
                    }
                    break;
                case Cobol85Parser.INITIATE:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 3614;
                        this.initiateStatement();
                    }
                    break;
                case Cobol85Parser.INSPECT:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 3615;
                        this.inspectStatement();
                    }
                    break;
                case Cobol85Parser.MERGE:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 3616;
                        this.mergeStatement();
                    }
                    break;
                case Cobol85Parser.MOVE:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 3617;
                        this.moveStatement();
                    }
                    break;
                case Cobol85Parser.MULTIPLY:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 3618;
                        this.multiplyStatement();
                    }
                    break;
                case Cobol85Parser.OPEN:
                    this.enterOuterAlt(_localctx, 31);
                    {
                        this.state = 3619;
                        this.openStatement();
                    }
                    break;
                case Cobol85Parser.PERFORM:
                    this.enterOuterAlt(_localctx, 32);
                    {
                        this.state = 3620;
                        this.performStatement();
                    }
                    break;
                case Cobol85Parser.PURGE:
                    this.enterOuterAlt(_localctx, 33);
                    {
                        this.state = 3621;
                        this.purgeStatement();
                    }
                    break;
                case Cobol85Parser.READ:
                    this.enterOuterAlt(_localctx, 34);
                    {
                        this.state = 3622;
                        this.readStatement();
                    }
                    break;
                case Cobol85Parser.RECEIVE:
                    this.enterOuterAlt(_localctx, 35);
                    {
                        this.state = 3623;
                        this.receiveStatement();
                    }
                    break;
                case Cobol85Parser.RELEASE:
                    this.enterOuterAlt(_localctx, 36);
                    {
                        this.state = 3624;
                        this.releaseStatement();
                    }
                    break;
                case Cobol85Parser.RETURN:
                    this.enterOuterAlt(_localctx, 37);
                    {
                        this.state = 3625;
                        this.returnStatement();
                    }
                    break;
                case Cobol85Parser.REWRITE:
                    this.enterOuterAlt(_localctx, 38);
                    {
                        this.state = 3626;
                        this.rewriteStatement();
                    }
                    break;
                case Cobol85Parser.SEARCH:
                    this.enterOuterAlt(_localctx, 39);
                    {
                        this.state = 3627;
                        this.searchStatement();
                    }
                    break;
                case Cobol85Parser.SEND:
                    this.enterOuterAlt(_localctx, 40);
                    {
                        this.state = 3628;
                        this.sendStatement();
                    }
                    break;
                case Cobol85Parser.SET:
                    this.enterOuterAlt(_localctx, 41);
                    {
                        this.state = 3629;
                        this.setStatement();
                    }
                    break;
                case Cobol85Parser.SORT:
                    this.enterOuterAlt(_localctx, 42);
                    {
                        this.state = 3630;
                        this.sortStatement();
                    }
                    break;
                case Cobol85Parser.START:
                    this.enterOuterAlt(_localctx, 43);
                    {
                        this.state = 3631;
                        this.startStatement();
                    }
                    break;
                case Cobol85Parser.STOP:
                    this.enterOuterAlt(_localctx, 44);
                    {
                        this.state = 3632;
                        this.stopStatement();
                    }
                    break;
                case Cobol85Parser.STRING:
                    this.enterOuterAlt(_localctx, 45);
                    {
                        this.state = 3633;
                        this.stringStatement();
                    }
                    break;
                case Cobol85Parser.SUBTRACT:
                    this.enterOuterAlt(_localctx, 46);
                    {
                        this.state = 3634;
                        this.subtractStatement();
                    }
                    break;
                case Cobol85Parser.TERMINATE:
                    this.enterOuterAlt(_localctx, 47);
                    {
                        this.state = 3635;
                        this.terminateStatement();
                    }
                    break;
                case Cobol85Parser.UNSTRING:
                    this.enterOuterAlt(_localctx, 48);
                    {
                        this.state = 3636;
                        this.unstringStatement();
                    }
                    break;
                case Cobol85Parser.WRITE:
                    this.enterOuterAlt(_localctx, 49);
                    {
                        this.state = 3637;
                        this.writeStatement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.acceptStatement = function () {
        var _localctx = new AcceptStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 538, Cobol85Parser.RULE_acceptStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3640;
                this.match(Cobol85Parser.ACCEPT);
                this.state = 3641;
                this.identifier();
                this.state = 3646;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 465, this._ctx)) {
                    case 1:
                        {
                            this.state = 3642;
                            this.acceptFromDateStatement();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3643;
                            this.acceptFromEscapeKeyStatement();
                        }
                        break;
                    case 3:
                        {
                            this.state = 3644;
                            this.acceptFromMnemonicStatement();
                        }
                        break;
                    case 4:
                        {
                            this.state = 3645;
                            this.acceptMessageCountStatement();
                        }
                        break;
                }
                this.state = 3649;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 466, this._ctx)) {
                    case 1:
                        {
                            this.state = 3648;
                            this.onExceptionClause();
                        }
                        break;
                }
                this.state = 3652;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 467, this._ctx)) {
                    case 1:
                        {
                            this.state = 3651;
                            this.notOnExceptionClause();
                        }
                        break;
                }
                this.state = 3655;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 468, this._ctx)) {
                    case 1:
                        {
                            this.state = 3654;
                            this.match(Cobol85Parser.END_ACCEPT);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.acceptFromDateStatement = function () {
        var _localctx = new AcceptFromDateStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 540, Cobol85Parser.RULE_acceptFromDateStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3657;
                this.match(Cobol85Parser.FROM);
                this.state = 3677;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.DATE:
                        {
                            this.state = 3658;
                            this.match(Cobol85Parser.DATE);
                            this.state = 3660;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.YYYYMMDD) {
                                {
                                    this.state = 3659;
                                    this.match(Cobol85Parser.YYYYMMDD);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.DAY:
                        {
                            this.state = 3662;
                            this.match(Cobol85Parser.DAY);
                            this.state = 3664;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.YYYYDDD) {
                                {
                                    this.state = 3663;
                                    this.match(Cobol85Parser.YYYYDDD);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.DAY_OF_WEEK:
                        {
                            this.state = 3666;
                            this.match(Cobol85Parser.DAY_OF_WEEK);
                        }
                        break;
                    case Cobol85Parser.TIME:
                        {
                            this.state = 3667;
                            this.match(Cobol85Parser.TIME);
                        }
                        break;
                    case Cobol85Parser.TIMER:
                        {
                            this.state = 3668;
                            this.match(Cobol85Parser.TIMER);
                        }
                        break;
                    case Cobol85Parser.TODAYS_DATE:
                        {
                            this.state = 3669;
                            this.match(Cobol85Parser.TODAYS_DATE);
                            this.state = 3671;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.MMDDYYYY) {
                                {
                                    this.state = 3670;
                                    this.match(Cobol85Parser.MMDDYYYY);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.TODAYS_NAME:
                        {
                            this.state = 3673;
                            this.match(Cobol85Parser.TODAYS_NAME);
                        }
                        break;
                    case Cobol85Parser.YEAR:
                        {
                            this.state = 3674;
                            this.match(Cobol85Parser.YEAR);
                        }
                        break;
                    case Cobol85Parser.YYYYMMDD:
                        {
                            this.state = 3675;
                            this.match(Cobol85Parser.YYYYMMDD);
                        }
                        break;
                    case Cobol85Parser.YYYYDDD:
                        {
                            this.state = 3676;
                            this.match(Cobol85Parser.YYYYDDD);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.acceptFromMnemonicStatement = function () {
        var _localctx = new AcceptFromMnemonicStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 542, Cobol85Parser.RULE_acceptFromMnemonicStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3679;
                this.match(Cobol85Parser.FROM);
                this.state = 3680;
                this.mnemonicName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.acceptFromEscapeKeyStatement = function () {
        var _localctx = new AcceptFromEscapeKeyStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 544, Cobol85Parser.RULE_acceptFromEscapeKeyStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3682;
                this.match(Cobol85Parser.FROM);
                this.state = 3683;
                this.match(Cobol85Parser.ESCAPE);
                this.state = 3684;
                this.match(Cobol85Parser.KEY);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.acceptMessageCountStatement = function () {
        var _localctx = new AcceptMessageCountStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 546, Cobol85Parser.RULE_acceptMessageCountStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3687;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.MESSAGE) {
                    {
                        this.state = 3686;
                        this.match(Cobol85Parser.MESSAGE);
                    }
                }
                this.state = 3689;
                this.match(Cobol85Parser.COUNT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.addStatement = function () {
        var _localctx = new AddStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 548, Cobol85Parser.RULE_addStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3691;
                this.match(Cobol85Parser.ADD);
                this.state = 3695;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 474, this._ctx)) {
                    case 1:
                        {
                            this.state = 3692;
                            this.addToStatement();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3693;
                            this.addToGivingStatement();
                        }
                        break;
                    case 3:
                        {
                            this.state = 3694;
                            this.addCorrespondingStatement();
                        }
                        break;
                }
                this.state = 3698;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 475, this._ctx)) {
                    case 1:
                        {
                            this.state = 3697;
                            this.onSizeErrorPhrase();
                        }
                        break;
                }
                this.state = 3701;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 476, this._ctx)) {
                    case 1:
                        {
                            this.state = 3700;
                            this.notOnSizeErrorPhrase();
                        }
                        break;
                }
                this.state = 3704;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 477, this._ctx)) {
                    case 1:
                        {
                            this.state = 3703;
                            this.match(Cobol85Parser.END_ADD);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.addToStatement = function () {
        var _localctx = new AddToStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 550, Cobol85Parser.RULE_addToStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3707;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 3706;
                            this.addFrom();
                        }
                    }
                    this.state = 3709;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
                this.state = 3711;
                this.match(Cobol85Parser.TO);
                this.state = 3713;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 3712;
                            this.addTo();
                        }
                    }
                    this.state = 3715;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.addToGivingStatement = function () {
        var _localctx = new AddToGivingStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 552, Cobol85Parser.RULE_addToGivingStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3718;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 3717;
                            this.addFrom();
                        }
                    }
                    this.state = 3720;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
                this.state = 3728;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TO) {
                    {
                        this.state = 3722;
                        this.match(Cobol85Parser.TO);
                        this.state = 3724;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 3723;
                                    this.addToGiving();
                                }
                            }
                            this.state = 3726;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
                    }
                }
                this.state = 3730;
                this.match(Cobol85Parser.GIVING);
                this.state = 3732;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 3731;
                            this.addGiving();
                        }
                    }
                    this.state = 3734;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.addCorrespondingStatement = function () {
        var _localctx = new AddCorrespondingStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 554, Cobol85Parser.RULE_addCorrespondingStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3736;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.CORR || _la === Cobol85Parser.CORRESPONDING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3737;
                this.identifier();
                this.state = 3738;
                this.match(Cobol85Parser.TO);
                this.state = 3739;
                this.addTo();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.addFrom = function () {
        var _localctx = new AddFromContext(this._ctx, this.state);
        this.enterRule(_localctx, 556, Cobol85Parser.RULE_addFrom);
        try {
            this.state = 3743;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 484, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3741;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3742;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.addTo = function () {
        var _localctx = new AddToContext(this._ctx, this.state);
        this.enterRule(_localctx, 558, Cobol85Parser.RULE_addTo);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3745;
                this.identifier();
                this.state = 3747;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ROUNDED) {
                    {
                        this.state = 3746;
                        this.match(Cobol85Parser.ROUNDED);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.addToGiving = function () {
        var _localctx = new AddToGivingContext(this._ctx, this.state);
        this.enterRule(_localctx, 560, Cobol85Parser.RULE_addToGiving);
        try {
            this.state = 3751;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 486, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3749;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3750;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.addGiving = function () {
        var _localctx = new AddGivingContext(this._ctx, this.state);
        this.enterRule(_localctx, 562, Cobol85Parser.RULE_addGiving);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3753;
                this.identifier();
                this.state = 3755;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ROUNDED) {
                    {
                        this.state = 3754;
                        this.match(Cobol85Parser.ROUNDED);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alteredGoTo = function () {
        var _localctx = new AlteredGoToContext(this._ctx, this.state);
        this.enterRule(_localctx, 564, Cobol85Parser.RULE_alteredGoTo);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3757;
                this.match(Cobol85Parser.GO);
                this.state = 3759;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TO) {
                    {
                        this.state = 3758;
                        this.match(Cobol85Parser.TO);
                    }
                }
                this.state = 3761;
                this.match(Cobol85Parser.DOT_FS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alterStatement = function () {
        var _localctx = new AlterStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 566, Cobol85Parser.RULE_alterStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3763;
                this.match(Cobol85Parser.ALTER);
                this.state = 3765;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 3764;
                            this.alterProceedTo();
                        }
                    }
                    this.state = 3767;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alterProceedTo = function () {
        var _localctx = new AlterProceedToContext(this._ctx, this.state);
        this.enterRule(_localctx, 568, Cobol85Parser.RULE_alterProceedTo);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3769;
                this.procedureName();
                this.state = 3770;
                this.match(Cobol85Parser.TO);
                this.state = 3773;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.PROCEED) {
                    {
                        this.state = 3771;
                        this.match(Cobol85Parser.PROCEED);
                        this.state = 3772;
                        this.match(Cobol85Parser.TO);
                    }
                }
                this.state = 3775;
                this.procedureName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.callStatement = function () {
        var _localctx = new CallStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 570, Cobol85Parser.RULE_callStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3777;
                this.match(Cobol85Parser.CALL);
                this.state = 3780;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 491, this._ctx)) {
                    case 1:
                        {
                            this.state = 3778;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3779;
                            this.literal();
                        }
                        break;
                }
                this.state = 3783;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.USING) {
                    {
                        this.state = 3782;
                        this.callUsingPhrase();
                    }
                }
                this.state = 3786;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.GIVING || _la === Cobol85Parser.RETURNING) {
                    {
                        this.state = 3785;
                        this.callGivingPhrase();
                    }
                }
                this.state = 3789;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 494, this._ctx)) {
                    case 1:
                        {
                            this.state = 3788;
                            this.onOverflowPhrase();
                        }
                        break;
                }
                this.state = 3792;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 495, this._ctx)) {
                    case 1:
                        {
                            this.state = 3791;
                            this.onExceptionClause();
                        }
                        break;
                }
                this.state = 3795;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 496, this._ctx)) {
                    case 1:
                        {
                            this.state = 3794;
                            this.notOnExceptionClause();
                        }
                        break;
                }
                this.state = 3798;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 497, this._ctx)) {
                    case 1:
                        {
                            this.state = 3797;
                            this.match(Cobol85Parser.END_CALL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.callUsingPhrase = function () {
        var _localctx = new CallUsingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 572, Cobol85Parser.RULE_callUsingPhrase);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3800;
                this.match(Cobol85Parser.USING);
                this.state = 3802;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3801;
                                    this.callUsingParameter();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3804;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 498, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.callUsingParameter = function () {
        var _localctx = new CallUsingParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 574, Cobol85Parser.RULE_callUsingParameter);
        try {
            this.state = 3809;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 499, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3806;
                        this.callByReferencePhrase();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3807;
                        this.callByValuePhrase();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3808;
                        this.callByContentPhrase();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.callByReferencePhrase = function () {
        var _localctx = new CallByReferencePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 576, Cobol85Parser.RULE_callByReferencePhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3815;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.BY || _la === Cobol85Parser.REFERENCE) {
                    {
                        this.state = 3812;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.BY) {
                            {
                                this.state = 3811;
                                this.match(Cobol85Parser.BY);
                            }
                        }
                        this.state = 3814;
                        this.match(Cobol85Parser.REFERENCE);
                    }
                }
                this.state = 3818;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3817;
                                    this.callByReference();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3820;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.callByReference = function () {
        var _localctx = new CallByReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 578, Cobol85Parser.RULE_callByReference);
        try {
            this.state = 3834;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.ABORT:
                case Cobol85Parser.ADDRESS:
                case Cobol85Parser.ALL:
                case Cobol85Parser.AS:
                case Cobol85Parser.ASCII:
                case Cobol85Parser.ASSOCIATED_DATA:
                case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                case Cobol85Parser.ATTRIBUTE:
                case Cobol85Parser.AUTO:
                case Cobol85Parser.AUTO_SKIP:
                case Cobol85Parser.BACKGROUND_COLOR:
                case Cobol85Parser.BACKGROUND_COLOUR:
                case Cobol85Parser.BEEP:
                case Cobol85Parser.BELL:
                case Cobol85Parser.BINARY:
                case Cobol85Parser.BIT:
                case Cobol85Parser.BLINK:
                case Cobol85Parser.BOUNDS:
                case Cobol85Parser.CAPABLE:
                case Cobol85Parser.CCSVERSION:
                case Cobol85Parser.CHANGED:
                case Cobol85Parser.CHANNEL:
                case Cobol85Parser.CLOSE_DISPOSITION:
                case Cobol85Parser.COBOL:
                case Cobol85Parser.COMMITMENT:
                case Cobol85Parser.CONTROL_POINT:
                case Cobol85Parser.CONVENTION:
                case Cobol85Parser.CRUNCH:
                case Cobol85Parser.CURSOR:
                case Cobol85Parser.DATE:
                case Cobol85Parser.DAY:
                case Cobol85Parser.DAY_OF_WEEK:
                case Cobol85Parser.DEBUG_CONTENTS:
                case Cobol85Parser.DEBUG_ITEM:
                case Cobol85Parser.DEBUG_LINE:
                case Cobol85Parser.DEBUG_NAME:
                case Cobol85Parser.DEBUG_SUB_1:
                case Cobol85Parser.DEBUG_SUB_2:
                case Cobol85Parser.DEBUG_SUB_3:
                case Cobol85Parser.DEFAULT:
                case Cobol85Parser.DEFAULT_DISPLAY:
                case Cobol85Parser.DEFINITION:
                case Cobol85Parser.DFHRESP:
                case Cobol85Parser.DFHVALUE:
                case Cobol85Parser.DISK:
                case Cobol85Parser.DONTCARE:
                case Cobol85Parser.DOUBLE:
                case Cobol85Parser.EBCDIC:
                case Cobol85Parser.EMPTY_CHECK:
                case Cobol85Parser.ENTER:
                case Cobol85Parser.ENTRY_PROCEDURE:
                case Cobol85Parser.ERASE:
                case Cobol85Parser.EOL:
                case Cobol85Parser.EOS:
                case Cobol85Parser.ESCAPE:
                case Cobol85Parser.EVENT:
                case Cobol85Parser.EXCLUSIVE:
                case Cobol85Parser.EXPORT:
                case Cobol85Parser.EXTENDED:
                case Cobol85Parser.FALSE:
                case Cobol85Parser.FOREGROUND_COLOR:
                case Cobol85Parser.FOREGROUND_COLOUR:
                case Cobol85Parser.FULL:
                case Cobol85Parser.FUNCTION:
                case Cobol85Parser.FUNCTIONNAME:
                case Cobol85Parser.FUNCTION_POINTER:
                case Cobol85Parser.GRID:
                case Cobol85Parser.HIGHLIGHT:
                case Cobol85Parser.HIGH_VALUE:
                case Cobol85Parser.HIGH_VALUES:
                case Cobol85Parser.IMPLICIT:
                case Cobol85Parser.IMPORT:
                case Cobol85Parser.INTEGER:
                case Cobol85Parser.KEPT:
                case Cobol85Parser.KEYBOARD:
                case Cobol85Parser.LANGUAGE:
                case Cobol85Parser.LB:
                case Cobol85Parser.LD:
                case Cobol85Parser.LEFTLINE:
                case Cobol85Parser.LENGTH:
                case Cobol85Parser.LENGTH_CHECK:
                case Cobol85Parser.LIBACCESS:
                case Cobol85Parser.LIBPARAMETER:
                case Cobol85Parser.LIBRARY:
                case Cobol85Parser.LINAGE_COUNTER:
                case Cobol85Parser.LINE_COUNTER:
                case Cobol85Parser.LIST:
                case Cobol85Parser.LOCAL:
                case Cobol85Parser.LONG_DATE:
                case Cobol85Parser.LONG_TIME:
                case Cobol85Parser.LOWER:
                case Cobol85Parser.LOWLIGHT:
                case Cobol85Parser.LOW_VALUE:
                case Cobol85Parser.LOW_VALUES:
                case Cobol85Parser.MMDDYYYY:
                case Cobol85Parser.NAMED:
                case Cobol85Parser.NATIONAL:
                case Cobol85Parser.NATIONAL_EDITED:
                case Cobol85Parser.NETWORK:
                case Cobol85Parser.NO_ECHO:
                case Cobol85Parser.NULL:
                case Cobol85Parser.NULLS:
                case Cobol85Parser.NUMERIC_DATE:
                case Cobol85Parser.NUMERIC_TIME:
                case Cobol85Parser.ODT:
                case Cobol85Parser.ORDERLY:
                case Cobol85Parser.OVERLINE:
                case Cobol85Parser.OWN:
                case Cobol85Parser.PAGE_COUNTER:
                case Cobol85Parser.PASSWORD:
                case Cobol85Parser.PORT:
                case Cobol85Parser.PRINTER:
                case Cobol85Parser.PRIVATE:
                case Cobol85Parser.PROCESS:
                case Cobol85Parser.PROGRAM:
                case Cobol85Parser.PROMPT:
                case Cobol85Parser.QUOTE:
                case Cobol85Parser.QUOTES:
                case Cobol85Parser.READER:
                case Cobol85Parser.REMOTE:
                case Cobol85Parser.REAL:
                case Cobol85Parser.RECEIVED:
                case Cobol85Parser.RECURSIVE:
                case Cobol85Parser.REF:
                case Cobol85Parser.REMOVE:
                case Cobol85Parser.REQUIRED:
                case Cobol85Parser.REVERSE_VIDEO:
                case Cobol85Parser.RETURN_CODE:
                case Cobol85Parser.SAVE:
                case Cobol85Parser.SECURE:
                case Cobol85Parser.SHARED:
                case Cobol85Parser.SHAREDBYALL:
                case Cobol85Parser.SHAREDBYRUNUNIT:
                case Cobol85Parser.SHARING:
                case Cobol85Parser.SHIFT_IN:
                case Cobol85Parser.SHIFT_OUT:
                case Cobol85Parser.SHORT_DATE:
                case Cobol85Parser.SORT_CONTROL:
                case Cobol85Parser.SORT_CORE_SIZE:
                case Cobol85Parser.SORT_FILE_SIZE:
                case Cobol85Parser.SORT_MESSAGE:
                case Cobol85Parser.SORT_MODE_SIZE:
                case Cobol85Parser.SORT_RETURN:
                case Cobol85Parser.SPACE:
                case Cobol85Parser.SPACES:
                case Cobol85Parser.STRING:
                case Cobol85Parser.SYMBOL:
                case Cobol85Parser.TALLY:
                case Cobol85Parser.TASK:
                case Cobol85Parser.THREAD:
                case Cobol85Parser.THREAD_LOCAL:
                case Cobol85Parser.TIME:
                case Cobol85Parser.TIMER:
                case Cobol85Parser.TODAYS_DATE:
                case Cobol85Parser.TODAYS_NAME:
                case Cobol85Parser.TRUE:
                case Cobol85Parser.TRUNCATED:
                case Cobol85Parser.TYPEDEF:
                case Cobol85Parser.UNDERLINE:
                case Cobol85Parser.VIRTUAL:
                case Cobol85Parser.WAIT:
                case Cobol85Parser.WHEN_COMPILED:
                case Cobol85Parser.YEAR:
                case Cobol85Parser.YYYYMMDD:
                case Cobol85Parser.YYYYDDD:
                case Cobol85Parser.ZERO:
                case Cobol85Parser.ZERO_FILL:
                case Cobol85Parser.ZEROS:
                case Cobol85Parser.ZEROES:
                case Cobol85Parser.NONNUMERICLITERAL:
                case Cobol85Parser.LEVEL_NUMBER_66:
                case Cobol85Parser.LEVEL_NUMBER_77:
                case Cobol85Parser.LEVEL_NUMBER_88:
                case Cobol85Parser.INTEGERLITERAL:
                case Cobol85Parser.NUMERICLITERAL:
                case Cobol85Parser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3831;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 504, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3826;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 503, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 3822;
                                                this.match(Cobol85Parser.ADDRESS);
                                                this.state = 3823;
                                                this.match(Cobol85Parser.OF);
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 3824;
                                                this.match(Cobol85Parser.INTEGER);
                                            }
                                            break;
                                        case 3:
                                            {
                                                this.state = 3825;
                                                this.match(Cobol85Parser.STRING);
                                            }
                                            break;
                                    }
                                    this.state = 3828;
                                    this.identifier();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 3829;
                                    this.literal();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 3830;
                                    this.fileName();
                                }
                                break;
                        }
                    }
                    break;
                case Cobol85Parser.OMITTED:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3833;
                        this.match(Cobol85Parser.OMITTED);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.callByValuePhrase = function () {
        var _localctx = new CallByValuePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 580, Cobol85Parser.RULE_callByValuePhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3837;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.BY) {
                    {
                        this.state = 3836;
                        this.match(Cobol85Parser.BY);
                    }
                }
                this.state = 3839;
                this.match(Cobol85Parser.VALUE);
                this.state = 3841;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3840;
                                    this.callByValue();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3843;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 507, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.callByValue = function () {
        var _localctx = new CallByValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 582, Cobol85Parser.RULE_callByValue);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3851;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 509, this._ctx)) {
                    case 1:
                        {
                            this.state = 3845;
                            this.match(Cobol85Parser.ADDRESS);
                            this.state = 3846;
                            this.match(Cobol85Parser.OF);
                        }
                        break;
                    case 2:
                        {
                            this.state = 3847;
                            this.match(Cobol85Parser.LENGTH);
                            this.state = 3849;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.OF) {
                                {
                                    this.state = 3848;
                                    this.match(Cobol85Parser.OF);
                                }
                            }
                        }
                        break;
                }
                this.state = 3855;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 510, this._ctx)) {
                    case 1:
                        {
                            this.state = 3853;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3854;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.callByContentPhrase = function () {
        var _localctx = new CallByContentPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 584, Cobol85Parser.RULE_callByContentPhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3858;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.BY) {
                    {
                        this.state = 3857;
                        this.match(Cobol85Parser.BY);
                    }
                }
                this.state = 3860;
                this.match(Cobol85Parser.CONTENT);
                this.state = 3862;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 3861;
                                    this.callByContent();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 3864;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 512, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.callByContent = function () {
        var _localctx = new CallByContentContext(this._ctx, this.state);
        this.enterRule(_localctx, 586, Cobol85Parser.RULE_callByContent);
        var _la;
        try {
            this.state = 3877;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 515, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3872;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 514, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3866;
                                    this.match(Cobol85Parser.ADDRESS);
                                    this.state = 3867;
                                    this.match(Cobol85Parser.OF);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 3868;
                                    this.match(Cobol85Parser.LENGTH);
                                    this.state = 3870;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === Cobol85Parser.OF) {
                                        {
                                            this.state = 3869;
                                            this.match(Cobol85Parser.OF);
                                        }
                                    }
                                }
                                break;
                        }
                        this.state = 3874;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3875;
                        this.literal();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3876;
                        this.match(Cobol85Parser.OMITTED);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.callGivingPhrase = function () {
        var _localctx = new CallGivingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 588, Cobol85Parser.RULE_callGivingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3879;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.GIVING || _la === Cobol85Parser.RETURNING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3880;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.cancelStatement = function () {
        var _localctx = new CancelStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 590, Cobol85Parser.RULE_cancelStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3882;
                this.match(Cobol85Parser.CANCEL);
                this.state = 3884;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 3883;
                            this.cancelCall();
                        }
                    }
                    this.state = 3886;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.cancelCall = function () {
        var _localctx = new CancelCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 592, Cobol85Parser.RULE_cancelCall);
        var _la;
        try {
            this.state = 3893;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 517, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3888;
                        this.libraryName();
                        this.state = 3889;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.BYFUNCTION || _la === Cobol85Parser.BYTITLE)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3891;
                        this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3892;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.closeStatement = function () {
        var _localctx = new CloseStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 594, Cobol85Parser.RULE_closeStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3895;
                this.match(Cobol85Parser.CLOSE);
                this.state = 3897;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 3896;
                            this.closeFile();
                        }
                    }
                    this.state = 3899;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.closeFile = function () {
        var _localctx = new CloseFileContext(this._ctx, this.state);
        this.enterRule(_localctx, 596, Cobol85Parser.RULE_closeFile);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3901;
                this.fileName();
                this.state = 3905;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 519, this._ctx)) {
                    case 1:
                        {
                            this.state = 3902;
                            this.closeReelUnitStatement();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3903;
                            this.closeRelativeStatement();
                        }
                        break;
                    case 3:
                        {
                            this.state = 3904;
                            this.closePortFileIOStatement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.closeReelUnitStatement = function () {
        var _localctx = new CloseReelUnitStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 598, Cobol85Parser.RULE_closeReelUnitStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3907;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.REEL || _la === Cobol85Parser.UNIT)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3912;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR || _la === Cobol85Parser.REMOVAL) {
                    {
                        this.state = 3909;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.FOR) {
                            {
                                this.state = 3908;
                                this.match(Cobol85Parser.FOR);
                            }
                        }
                        this.state = 3911;
                        this.match(Cobol85Parser.REMOVAL);
                    }
                }
                this.state = 3922;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 524, this._ctx)) {
                    case 1:
                        {
                            this.state = 3915;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.WITH) {
                                {
                                    this.state = 3914;
                                    this.match(Cobol85Parser.WITH);
                                }
                            }
                            this.state = 3920;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case Cobol85Parser.NO:
                                    {
                                        this.state = 3917;
                                        this.match(Cobol85Parser.NO);
                                        this.state = 3918;
                                        this.match(Cobol85Parser.REWIND);
                                    }
                                    break;
                                case Cobol85Parser.LOCK:
                                    {
                                        this.state = 3919;
                                        this.match(Cobol85Parser.LOCK);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.closeRelativeStatement = function () {
        var _localctx = new CloseRelativeStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 600, Cobol85Parser.RULE_closeRelativeStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3925;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 3924;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 3930;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.NO:
                        {
                            this.state = 3927;
                            this.match(Cobol85Parser.NO);
                            this.state = 3928;
                            this.match(Cobol85Parser.REWIND);
                        }
                        break;
                    case Cobol85Parser.LOCK:
                        {
                            this.state = 3929;
                            this.match(Cobol85Parser.LOCK);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.closePortFileIOStatement = function () {
        var _localctx = new ClosePortFileIOStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 602, Cobol85Parser.RULE_closePortFileIOStatement);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3939;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 528, this._ctx)) {
                    case 1:
                        {
                            this.state = 3933;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.WITH) {
                                {
                                    this.state = 3932;
                                    this.match(Cobol85Parser.WITH);
                                }
                            }
                            this.state = 3935;
                            this.match(Cobol85Parser.NO);
                            this.state = 3936;
                            this.match(Cobol85Parser.WAIT);
                        }
                        break;
                    case 2:
                        {
                            this.state = 3937;
                            this.match(Cobol85Parser.WITH);
                            this.state = 3938;
                            this.match(Cobol85Parser.WAIT);
                        }
                        break;
                }
                this.state = 3947;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.USING) {
                    {
                        this.state = 3941;
                        this.match(Cobol85Parser.USING);
                        this.state = 3943;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 3942;
                                            this.closePortFileIOUsing();
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 3945;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 529, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.closePortFileIOUsing = function () {
        var _localctx = new ClosePortFileIOUsingContext(this._ctx, this.state);
        this.enterRule(_localctx, 604, Cobol85Parser.RULE_closePortFileIOUsing);
        try {
            this.state = 3952;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.CLOSE_DISPOSITION:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3949;
                        this.closePortFileIOUsingCloseDisposition();
                    }
                    break;
                case Cobol85Parser.ASSOCIATED_DATA:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3950;
                        this.closePortFileIOUsingAssociatedData();
                    }
                    break;
                case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3951;
                        this.closePortFileIOUsingAssociatedDataLength();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.closePortFileIOUsingCloseDisposition = function () {
        var _localctx = new ClosePortFileIOUsingCloseDispositionContext(this._ctx, this.state);
        this.enterRule(_localctx, 606, Cobol85Parser.RULE_closePortFileIOUsingCloseDisposition);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3954;
                this.match(Cobol85Parser.CLOSE_DISPOSITION);
                this.state = 3956;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.OF) {
                    {
                        this.state = 3955;
                        this.match(Cobol85Parser.OF);
                    }
                }
                this.state = 3958;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.ABORT || _la === Cobol85Parser.ORDERLY)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.closePortFileIOUsingAssociatedData = function () {
        var _localctx = new ClosePortFileIOUsingAssociatedDataContext(this._ctx, this.state);
        this.enterRule(_localctx, 608, Cobol85Parser.RULE_closePortFileIOUsingAssociatedData);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3960;
                this.match(Cobol85Parser.ASSOCIATED_DATA);
                this.state = 3963;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 533, this._ctx)) {
                    case 1:
                        {
                            this.state = 3961;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3962;
                            this.integerLiteral();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.closePortFileIOUsingAssociatedDataLength = function () {
        var _localctx = new ClosePortFileIOUsingAssociatedDataLengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 610, Cobol85Parser.RULE_closePortFileIOUsingAssociatedDataLength);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3965;
                this.match(Cobol85Parser.ASSOCIATED_DATA_LENGTH);
                this.state = 3967;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.OF) {
                    {
                        this.state = 3966;
                        this.match(Cobol85Parser.OF);
                    }
                }
                this.state = 3971;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 535, this._ctx)) {
                    case 1:
                        {
                            this.state = 3969;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3970;
                            this.integerLiteral();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.computeStatement = function () {
        var _localctx = new ComputeStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 612, Cobol85Parser.RULE_computeStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3973;
                this.match(Cobol85Parser.COMPUTE);
                this.state = 3975;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 3974;
                            this.computeStore();
                        }
                    }
                    this.state = 3977;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
                this.state = 3979;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.EQUAL || _la === Cobol85Parser.EQUALCHAR)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3980;
                this.arithmeticExpression();
                this.state = 3982;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 537, this._ctx)) {
                    case 1:
                        {
                            this.state = 3981;
                            this.onSizeErrorPhrase();
                        }
                        break;
                }
                this.state = 3985;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 538, this._ctx)) {
                    case 1:
                        {
                            this.state = 3984;
                            this.notOnSizeErrorPhrase();
                        }
                        break;
                }
                this.state = 3988;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 539, this._ctx)) {
                    case 1:
                        {
                            this.state = 3987;
                            this.match(Cobol85Parser.END_COMPUTE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.computeStore = function () {
        var _localctx = new ComputeStoreContext(this._ctx, this.state);
        this.enterRule(_localctx, 614, Cobol85Parser.RULE_computeStore);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3990;
                this.identifier();
                this.state = 3992;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ROUNDED) {
                    {
                        this.state = 3991;
                        this.match(Cobol85Parser.ROUNDED);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.continueStatement = function () {
        var _localctx = new ContinueStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 616, Cobol85Parser.RULE_continueStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3994;
                this.match(Cobol85Parser.CONTINUE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.deleteStatement = function () {
        var _localctx = new DeleteStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 618, Cobol85Parser.RULE_deleteStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3996;
                this.match(Cobol85Parser.DELETE);
                this.state = 3997;
                this.fileName();
                this.state = 3999;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.RECORD) {
                    {
                        this.state = 3998;
                        this.match(Cobol85Parser.RECORD);
                    }
                }
                this.state = 4002;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 542, this._ctx)) {
                    case 1:
                        {
                            this.state = 4001;
                            this.invalidKeyPhrase();
                        }
                        break;
                }
                this.state = 4005;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 543, this._ctx)) {
                    case 1:
                        {
                            this.state = 4004;
                            this.notInvalidKeyPhrase();
                        }
                        break;
                }
                this.state = 4008;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 544, this._ctx)) {
                    case 1:
                        {
                            this.state = 4007;
                            this.match(Cobol85Parser.END_DELETE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.disableStatement = function () {
        var _localctx = new DisableStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 620, Cobol85Parser.RULE_disableStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4010;
                this.match(Cobol85Parser.DISABLE);
                this.state = 4018;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.INPUT:
                        {
                            this.state = 4011;
                            this.match(Cobol85Parser.INPUT);
                            this.state = 4013;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.TERMINAL) {
                                {
                                    this.state = 4012;
                                    this.match(Cobol85Parser.TERMINAL);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.I_O:
                        {
                            this.state = 4015;
                            this.match(Cobol85Parser.I_O);
                            this.state = 4016;
                            this.match(Cobol85Parser.TERMINAL);
                        }
                        break;
                    case Cobol85Parser.OUTPUT:
                        {
                            this.state = 4017;
                            this.match(Cobol85Parser.OUTPUT);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 4020;
                this.cdName();
                this.state = 4022;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 4021;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 4024;
                this.match(Cobol85Parser.KEY);
                this.state = 4027;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 548, this._ctx)) {
                    case 1:
                        {
                            this.state = 4025;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4026;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.displayStatement = function () {
        var _localctx = new DisplayStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 622, Cobol85Parser.RULE_displayStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4029;
                this.match(Cobol85Parser.DISPLAY);
                this.state = 4031;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4030;
                            this.displayOperand();
                        }
                    }
                    this.state = 4033;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
                this.state = 4036;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 550, this._ctx)) {
                    case 1:
                        {
                            this.state = 4035;
                            this.displayAt();
                        }
                        break;
                }
                this.state = 4039;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.UPON) {
                    {
                        this.state = 4038;
                        this.displayUpon();
                    }
                }
                this.state = 4042;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 552, this._ctx)) {
                    case 1:
                        {
                            this.state = 4041;
                            this.displayWith();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.displayOperand = function () {
        var _localctx = new DisplayOperandContext(this._ctx, this.state);
        this.enterRule(_localctx, 624, Cobol85Parser.RULE_displayOperand);
        try {
            this.state = 4046;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 553, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4044;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4045;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.displayAt = function () {
        var _localctx = new DisplayAtContext(this._ctx, this.state);
        this.enterRule(_localctx, 626, Cobol85Parser.RULE_displayAt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4048;
                this.match(Cobol85Parser.AT);
                this.state = 4051;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 554, this._ctx)) {
                    case 1:
                        {
                            this.state = 4049;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4050;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.displayUpon = function () {
        var _localctx = new DisplayUponContext(this._ctx, this.state);
        this.enterRule(_localctx, 628, Cobol85Parser.RULE_displayUpon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4053;
                this.match(Cobol85Parser.UPON);
                this.state = 4056;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 555, this._ctx)) {
                    case 1:
                        {
                            this.state = 4054;
                            this.mnemonicName();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4055;
                            this.environmentName();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.displayWith = function () {
        var _localctx = new DisplayWithContext(this._ctx, this.state);
        this.enterRule(_localctx, 630, Cobol85Parser.RULE_displayWith);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4059;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 4058;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 4061;
                this.match(Cobol85Parser.NO);
                this.state = 4062;
                this.match(Cobol85Parser.ADVANCING);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.divideStatement = function () {
        var _localctx = new DivideStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 632, Cobol85Parser.RULE_divideStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4064;
                this.match(Cobol85Parser.DIVIDE);
                this.state = 4067;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 557, this._ctx)) {
                    case 1:
                        {
                            this.state = 4065;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4066;
                            this.literal();
                        }
                        break;
                }
                this.state = 4072;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 558, this._ctx)) {
                    case 1:
                        {
                            this.state = 4069;
                            this.divideIntoStatement();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4070;
                            this.divideIntoGivingStatement();
                        }
                        break;
                    case 3:
                        {
                            this.state = 4071;
                            this.divideByGivingStatement();
                        }
                        break;
                }
                this.state = 4075;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.REMAINDER) {
                    {
                        this.state = 4074;
                        this.divideRemainder();
                    }
                }
                this.state = 4078;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 560, this._ctx)) {
                    case 1:
                        {
                            this.state = 4077;
                            this.onSizeErrorPhrase();
                        }
                        break;
                }
                this.state = 4081;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 561, this._ctx)) {
                    case 1:
                        {
                            this.state = 4080;
                            this.notOnSizeErrorPhrase();
                        }
                        break;
                }
                this.state = 4084;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 562, this._ctx)) {
                    case 1:
                        {
                            this.state = 4083;
                            this.match(Cobol85Parser.END_DIVIDE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.divideIntoStatement = function () {
        var _localctx = new DivideIntoStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 634, Cobol85Parser.RULE_divideIntoStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4086;
                this.match(Cobol85Parser.INTO);
                this.state = 4088;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4087;
                            this.divideInto();
                        }
                    }
                    this.state = 4090;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.divideIntoGivingStatement = function () {
        var _localctx = new DivideIntoGivingStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 636, Cobol85Parser.RULE_divideIntoGivingStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4092;
                this.match(Cobol85Parser.INTO);
                this.state = 4095;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 564, this._ctx)) {
                    case 1:
                        {
                            this.state = 4093;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4094;
                            this.literal();
                        }
                        break;
                }
                this.state = 4098;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.GIVING) {
                    {
                        this.state = 4097;
                        this.divideGivingPhrase();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.divideByGivingStatement = function () {
        var _localctx = new DivideByGivingStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 638, Cobol85Parser.RULE_divideByGivingStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4100;
                this.match(Cobol85Parser.BY);
                this.state = 4103;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 566, this._ctx)) {
                    case 1:
                        {
                            this.state = 4101;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4102;
                            this.literal();
                        }
                        break;
                }
                this.state = 4106;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.GIVING) {
                    {
                        this.state = 4105;
                        this.divideGivingPhrase();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.divideGivingPhrase = function () {
        var _localctx = new DivideGivingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 640, Cobol85Parser.RULE_divideGivingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4108;
                this.match(Cobol85Parser.GIVING);
                this.state = 4110;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4109;
                            this.divideGiving();
                        }
                    }
                    this.state = 4112;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.divideInto = function () {
        var _localctx = new DivideIntoContext(this._ctx, this.state);
        this.enterRule(_localctx, 642, Cobol85Parser.RULE_divideInto);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4114;
                this.identifier();
                this.state = 4116;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ROUNDED) {
                    {
                        this.state = 4115;
                        this.match(Cobol85Parser.ROUNDED);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.divideGiving = function () {
        var _localctx = new DivideGivingContext(this._ctx, this.state);
        this.enterRule(_localctx, 644, Cobol85Parser.RULE_divideGiving);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4118;
                this.identifier();
                this.state = 4120;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ROUNDED) {
                    {
                        this.state = 4119;
                        this.match(Cobol85Parser.ROUNDED);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.divideRemainder = function () {
        var _localctx = new DivideRemainderContext(this._ctx, this.state);
        this.enterRule(_localctx, 646, Cobol85Parser.RULE_divideRemainder);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4122;
                this.match(Cobol85Parser.REMAINDER);
                this.state = 4123;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.enableStatement = function () {
        var _localctx = new EnableStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 648, Cobol85Parser.RULE_enableStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4125;
                this.match(Cobol85Parser.ENABLE);
                this.state = 4133;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.INPUT:
                        {
                            this.state = 4126;
                            this.match(Cobol85Parser.INPUT);
                            this.state = 4128;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.TERMINAL) {
                                {
                                    this.state = 4127;
                                    this.match(Cobol85Parser.TERMINAL);
                                }
                            }
                        }
                        break;
                    case Cobol85Parser.I_O:
                        {
                            this.state = 4130;
                            this.match(Cobol85Parser.I_O);
                            this.state = 4131;
                            this.match(Cobol85Parser.TERMINAL);
                        }
                        break;
                    case Cobol85Parser.OUTPUT:
                        {
                            this.state = 4132;
                            this.match(Cobol85Parser.OUTPUT);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 4135;
                this.cdName();
                this.state = 4137;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 4136;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 4139;
                this.match(Cobol85Parser.KEY);
                this.state = 4142;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 574, this._ctx)) {
                    case 1:
                        {
                            this.state = 4140;
                            this.literal();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4141;
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.entryStatement = function () {
        var _localctx = new EntryStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 650, Cobol85Parser.RULE_entryStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4144;
                this.match(Cobol85Parser.ENTRY);
                this.state = 4145;
                this.literal();
                this.state = 4152;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.USING) {
                    {
                        this.state = 4146;
                        this.match(Cobol85Parser.USING);
                        this.state = 4148;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 4147;
                                    this.identifier();
                                }
                            }
                            this.state = 4150;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.evaluateStatement = function () {
        var _localctx = new EvaluateStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 652, Cobol85Parser.RULE_evaluateStatement);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4154;
                this.match(Cobol85Parser.EVALUATE);
                this.state = 4155;
                this.evaluateSelect();
                this.state = 4159;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.ALSO) {
                    {
                        {
                            this.state = 4156;
                            this.evaluateAlsoSelect();
                        }
                    }
                    this.state = 4161;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4163;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4162;
                                    this.evaluateWhenPhrase();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4165;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 4168;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 579, this._ctx)) {
                    case 1:
                        {
                            this.state = 4167;
                            this.evaluateWhenOther();
                        }
                        break;
                }
                this.state = 4171;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 580, this._ctx)) {
                    case 1:
                        {
                            this.state = 4170;
                            this.match(Cobol85Parser.END_EVALUATE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.evaluateSelect = function () {
        var _localctx = new EvaluateSelectContext(this._ctx, this.state);
        this.enterRule(_localctx, 654, Cobol85Parser.RULE_evaluateSelect);
        try {
            this.state = 4177;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 581, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4173;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4174;
                        this.literal();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4175;
                        this.arithmeticExpression();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4176;
                        this.condition();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.evaluateAlsoSelect = function () {
        var _localctx = new EvaluateAlsoSelectContext(this._ctx, this.state);
        this.enterRule(_localctx, 656, Cobol85Parser.RULE_evaluateAlsoSelect);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4179;
                this.match(Cobol85Parser.ALSO);
                this.state = 4180;
                this.evaluateSelect();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.evaluateWhenPhrase = function () {
        var _localctx = new EvaluateWhenPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 658, Cobol85Parser.RULE_evaluateWhenPhrase);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4183;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4182;
                                    this.evaluateWhen();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4185;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 582, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 4190;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 583, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4187;
                                this.statement();
                            }
                        }
                    }
                    this.state = 4192;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 583, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.evaluateWhen = function () {
        var _localctx = new EvaluateWhenContext(this._ctx, this.state);
        this.enterRule(_localctx, 660, Cobol85Parser.RULE_evaluateWhen);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4193;
                this.match(Cobol85Parser.WHEN);
                this.state = 4194;
                this.evaluateCondition();
                this.state = 4198;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.ALSO) {
                    {
                        {
                            this.state = 4195;
                            this.evaluateAlsoCondition();
                        }
                    }
                    this.state = 4200;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.evaluateCondition = function () {
        var _localctx = new EvaluateConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 662, Cobol85Parser.RULE_evaluateCondition);
        var _la;
        try {
            this.state = 4211;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 587, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4201;
                        this.match(Cobol85Parser.ANY);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4203;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.NOT) {
                            {
                                this.state = 4202;
                                this.match(Cobol85Parser.NOT);
                            }
                        }
                        this.state = 4205;
                        this.evaluateValue();
                        this.state = 4207;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
                            {
                                this.state = 4206;
                                this.evaluateThrough();
                            }
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4209;
                        this.condition();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4210;
                        this.booleanLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.evaluateThrough = function () {
        var _localctx = new EvaluateThroughContext(this._ctx, this.state);
        this.enterRule(_localctx, 664, Cobol85Parser.RULE_evaluateThrough);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4213;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4214;
                this.evaluateValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.evaluateAlsoCondition = function () {
        var _localctx = new EvaluateAlsoConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 666, Cobol85Parser.RULE_evaluateAlsoCondition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4216;
                this.match(Cobol85Parser.ALSO);
                this.state = 4217;
                this.evaluateCondition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.evaluateWhenOther = function () {
        var _localctx = new EvaluateWhenOtherContext(this._ctx, this.state);
        this.enterRule(_localctx, 668, Cobol85Parser.RULE_evaluateWhenOther);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4219;
                this.match(Cobol85Parser.WHEN);
                this.state = 4220;
                this.match(Cobol85Parser.OTHER);
                this.state = 4224;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4221;
                                this.statement();
                            }
                        }
                    }
                    this.state = 4226;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.evaluateValue = function () {
        var _localctx = new EvaluateValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 670, Cobol85Parser.RULE_evaluateValue);
        try {
            this.state = 4230;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 589, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4227;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4228;
                        this.literal();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4229;
                        this.arithmeticExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.execCicsStatement = function () {
        var _localctx = new ExecCicsStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 672, Cobol85Parser.RULE_execCicsStatement);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4233;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4232;
                                    this.match(Cobol85Parser.EXECCICSLINE);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4235;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 590, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.execSqlStatement = function () {
        var _localctx = new ExecSqlStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 674, Cobol85Parser.RULE_execSqlStatement);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4238;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4237;
                                    this.match(Cobol85Parser.EXECSQLLINE);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4240;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.execSqlImsStatement = function () {
        var _localctx = new ExecSqlImsStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 676, Cobol85Parser.RULE_execSqlImsStatement);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4243;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4242;
                                    this.match(Cobol85Parser.EXECSQLIMSLINE);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4245;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 592, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.exhibitStatement = function () {
        var _localctx = new ExhibitStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 678, Cobol85Parser.RULE_exhibitStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4247;
                this.match(Cobol85Parser.EXHIBIT);
                this.state = 4249;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 593, this._ctx)) {
                    case 1:
                        {
                            this.state = 4248;
                            this.match(Cobol85Parser.NAMED);
                        }
                        break;
                }
                this.state = 4252;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 594, this._ctx)) {
                    case 1:
                        {
                            this.state = 4251;
                            this.match(Cobol85Parser.CHANGED);
                        }
                        break;
                }
                this.state = 4255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4254;
                            this.exhibitOperand();
                        }
                    }
                    this.state = 4257;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.exhibitOperand = function () {
        var _localctx = new ExhibitOperandContext(this._ctx, this.state);
        this.enterRule(_localctx, 680, Cobol85Parser.RULE_exhibitOperand);
        try {
            this.state = 4261;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 596, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4259;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4260;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.exitStatement = function () {
        var _localctx = new ExitStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 682, Cobol85Parser.RULE_exitStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4263;
                this.match(Cobol85Parser.EXIT);
                this.state = 4265;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.PROGRAM) {
                    {
                        this.state = 4264;
                        this.match(Cobol85Parser.PROGRAM);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.generateStatement = function () {
        var _localctx = new GenerateStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 684, Cobol85Parser.RULE_generateStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4267;
                this.match(Cobol85Parser.GENERATE);
                this.state = 4268;
                this.reportName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.gobackStatement = function () {
        var _localctx = new GobackStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 686, Cobol85Parser.RULE_gobackStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4270;
                this.match(Cobol85Parser.GOBACK);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.goToStatement = function () {
        var _localctx = new GoToStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 688, Cobol85Parser.RULE_goToStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4272;
                this.match(Cobol85Parser.GO);
                this.state = 4274;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TO) {
                    {
                        this.state = 4273;
                        this.match(Cobol85Parser.TO);
                    }
                }
                this.state = 4278;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 599, this._ctx)) {
                    case 1:
                        {
                            this.state = 4276;
                            this.goToStatementSimple();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4277;
                            this.goToDependingOnStatement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.goToStatementSimple = function () {
        var _localctx = new GoToStatementSimpleContext(this._ctx, this.state);
        this.enterRule(_localctx, 690, Cobol85Parser.RULE_goToStatementSimple);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4280;
                this.procedureName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.goToDependingOnStatement = function () {
        var _localctx = new GoToDependingOnStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 692, Cobol85Parser.RULE_goToDependingOnStatement);
        var _la;
        try {
            this.state = 4295;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.MORE_LABELS:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4282;
                        this.match(Cobol85Parser.MORE_LABELS);
                    }
                    break;
                case Cobol85Parser.ABORT:
                case Cobol85Parser.AS:
                case Cobol85Parser.ASCII:
                case Cobol85Parser.ASSOCIATED_DATA:
                case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                case Cobol85Parser.ATTRIBUTE:
                case Cobol85Parser.AUTO:
                case Cobol85Parser.AUTO_SKIP:
                case Cobol85Parser.BACKGROUND_COLOR:
                case Cobol85Parser.BACKGROUND_COLOUR:
                case Cobol85Parser.BEEP:
                case Cobol85Parser.BELL:
                case Cobol85Parser.BINARY:
                case Cobol85Parser.BIT:
                case Cobol85Parser.BLINK:
                case Cobol85Parser.BOUNDS:
                case Cobol85Parser.CAPABLE:
                case Cobol85Parser.CCSVERSION:
                case Cobol85Parser.CHANGED:
                case Cobol85Parser.CHANNEL:
                case Cobol85Parser.CLOSE_DISPOSITION:
                case Cobol85Parser.COBOL:
                case Cobol85Parser.COMMITMENT:
                case Cobol85Parser.CONTROL_POINT:
                case Cobol85Parser.CONVENTION:
                case Cobol85Parser.CRUNCH:
                case Cobol85Parser.CURSOR:
                case Cobol85Parser.DEFAULT:
                case Cobol85Parser.DEFAULT_DISPLAY:
                case Cobol85Parser.DEFINITION:
                case Cobol85Parser.DFHRESP:
                case Cobol85Parser.DFHVALUE:
                case Cobol85Parser.DISK:
                case Cobol85Parser.DONTCARE:
                case Cobol85Parser.DOUBLE:
                case Cobol85Parser.EBCDIC:
                case Cobol85Parser.EMPTY_CHECK:
                case Cobol85Parser.ENTER:
                case Cobol85Parser.ENTRY_PROCEDURE:
                case Cobol85Parser.ERASE:
                case Cobol85Parser.EOL:
                case Cobol85Parser.EOS:
                case Cobol85Parser.ESCAPE:
                case Cobol85Parser.EVENT:
                case Cobol85Parser.EXCLUSIVE:
                case Cobol85Parser.EXPORT:
                case Cobol85Parser.EXTENDED:
                case Cobol85Parser.FOREGROUND_COLOR:
                case Cobol85Parser.FOREGROUND_COLOUR:
                case Cobol85Parser.FULL:
                case Cobol85Parser.FUNCTIONNAME:
                case Cobol85Parser.FUNCTION_POINTER:
                case Cobol85Parser.GRID:
                case Cobol85Parser.HIGHLIGHT:
                case Cobol85Parser.IMPLICIT:
                case Cobol85Parser.IMPORT:
                case Cobol85Parser.INTEGER:
                case Cobol85Parser.KEPT:
                case Cobol85Parser.KEYBOARD:
                case Cobol85Parser.LANGUAGE:
                case Cobol85Parser.LB:
                case Cobol85Parser.LD:
                case Cobol85Parser.LEFTLINE:
                case Cobol85Parser.LENGTH_CHECK:
                case Cobol85Parser.LIBACCESS:
                case Cobol85Parser.LIBPARAMETER:
                case Cobol85Parser.LIBRARY:
                case Cobol85Parser.LIST:
                case Cobol85Parser.LOCAL:
                case Cobol85Parser.LONG_DATE:
                case Cobol85Parser.LONG_TIME:
                case Cobol85Parser.LOWER:
                case Cobol85Parser.LOWLIGHT:
                case Cobol85Parser.MMDDYYYY:
                case Cobol85Parser.NAMED:
                case Cobol85Parser.NATIONAL:
                case Cobol85Parser.NATIONAL_EDITED:
                case Cobol85Parser.NETWORK:
                case Cobol85Parser.NO_ECHO:
                case Cobol85Parser.NUMERIC_DATE:
                case Cobol85Parser.NUMERIC_TIME:
                case Cobol85Parser.ODT:
                case Cobol85Parser.ORDERLY:
                case Cobol85Parser.OVERLINE:
                case Cobol85Parser.OWN:
                case Cobol85Parser.PASSWORD:
                case Cobol85Parser.PORT:
                case Cobol85Parser.PRINTER:
                case Cobol85Parser.PRIVATE:
                case Cobol85Parser.PROCESS:
                case Cobol85Parser.PROGRAM:
                case Cobol85Parser.PROMPT:
                case Cobol85Parser.READER:
                case Cobol85Parser.REMOTE:
                case Cobol85Parser.REAL:
                case Cobol85Parser.RECEIVED:
                case Cobol85Parser.RECURSIVE:
                case Cobol85Parser.REF:
                case Cobol85Parser.REMOVE:
                case Cobol85Parser.REQUIRED:
                case Cobol85Parser.REVERSE_VIDEO:
                case Cobol85Parser.SAVE:
                case Cobol85Parser.SECURE:
                case Cobol85Parser.SHARED:
                case Cobol85Parser.SHAREDBYALL:
                case Cobol85Parser.SHAREDBYRUNUNIT:
                case Cobol85Parser.SHARING:
                case Cobol85Parser.SHORT_DATE:
                case Cobol85Parser.SYMBOL:
                case Cobol85Parser.TASK:
                case Cobol85Parser.THREAD:
                case Cobol85Parser.THREAD_LOCAL:
                case Cobol85Parser.TIMER:
                case Cobol85Parser.TODAYS_DATE:
                case Cobol85Parser.TODAYS_NAME:
                case Cobol85Parser.TRUNCATED:
                case Cobol85Parser.TYPEDEF:
                case Cobol85Parser.UNDERLINE:
                case Cobol85Parser.VIRTUAL:
                case Cobol85Parser.WAIT:
                case Cobol85Parser.YEAR:
                case Cobol85Parser.YYYYMMDD:
                case Cobol85Parser.YYYYDDD:
                case Cobol85Parser.ZERO_FILL:
                case Cobol85Parser.LEVEL_NUMBER_66:
                case Cobol85Parser.LEVEL_NUMBER_77:
                case Cobol85Parser.LEVEL_NUMBER_88:
                case Cobol85Parser.INTEGERLITERAL:
                case Cobol85Parser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4284;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 4283;
                                    this.procedureName();
                                }
                            }
                            this.state = 4286;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
                        this.state = 4293;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.DEPENDING) {
                            {
                                this.state = 4288;
                                this.match(Cobol85Parser.DEPENDING);
                                this.state = 4290;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === Cobol85Parser.ON) {
                                    {
                                        this.state = 4289;
                                        this.match(Cobol85Parser.ON);
                                    }
                                }
                                this.state = 4292;
                                this.identifier();
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.ifStatement = function () {
        var _localctx = new IfStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 694, Cobol85Parser.RULE_ifStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4297;
                this.match(Cobol85Parser.IF);
                this.state = 4298;
                this.condition();
                this.state = 4299;
                this.ifThen();
                this.state = 4301;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 604, this._ctx)) {
                    case 1:
                        {
                            this.state = 4300;
                            this.ifElse();
                        }
                        break;
                }
                this.state = 4304;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 605, this._ctx)) {
                    case 1:
                        {
                            this.state = 4303;
                            this.match(Cobol85Parser.END_IF);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.ifThen = function () {
        var _localctx = new IfThenContext(this._ctx, this.state);
        this.enterRule(_localctx, 696, Cobol85Parser.RULE_ifThen);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4307;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.THEN) {
                    {
                        this.state = 4306;
                        this.match(Cobol85Parser.THEN);
                    }
                }
                this.state = 4317;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.NEXT:
                        {
                            this.state = 4309;
                            this.match(Cobol85Parser.NEXT);
                            this.state = 4310;
                            this.match(Cobol85Parser.SENTENCE);
                        }
                        break;
                    case Cobol85Parser.ACCEPT:
                    case Cobol85Parser.ADD:
                    case Cobol85Parser.ALTER:
                    case Cobol85Parser.AT:
                    case Cobol85Parser.CALL:
                    case Cobol85Parser.CANCEL:
                    case Cobol85Parser.CLOSE:
                    case Cobol85Parser.COMPUTE:
                    case Cobol85Parser.CONTINUE:
                    case Cobol85Parser.DELETE:
                    case Cobol85Parser.DISABLE:
                    case Cobol85Parser.DISPLAY:
                    case Cobol85Parser.DIVIDE:
                    case Cobol85Parser.ELSE:
                    case Cobol85Parser.ENABLE:
                    case Cobol85Parser.END:
                    case Cobol85Parser.END_ACCEPT:
                    case Cobol85Parser.END_ADD:
                    case Cobol85Parser.END_CALL:
                    case Cobol85Parser.END_COMPUTE:
                    case Cobol85Parser.END_DELETE:
                    case Cobol85Parser.END_DIVIDE:
                    case Cobol85Parser.END_EVALUATE:
                    case Cobol85Parser.END_IF:
                    case Cobol85Parser.END_MULTIPLY:
                    case Cobol85Parser.END_PERFORM:
                    case Cobol85Parser.END_READ:
                    case Cobol85Parser.END_RECEIVE:
                    case Cobol85Parser.END_RETURN:
                    case Cobol85Parser.END_REWRITE:
                    case Cobol85Parser.END_SEARCH:
                    case Cobol85Parser.END_START:
                    case Cobol85Parser.END_STRING:
                    case Cobol85Parser.END_SUBTRACT:
                    case Cobol85Parser.END_UNSTRING:
                    case Cobol85Parser.END_WRITE:
                    case Cobol85Parser.ENTRY:
                    case Cobol85Parser.EVALUATE:
                    case Cobol85Parser.EXCEPTION:
                    case Cobol85Parser.EXHIBIT:
                    case Cobol85Parser.EXIT:
                    case Cobol85Parser.GENERATE:
                    case Cobol85Parser.GOBACK:
                    case Cobol85Parser.GO:
                    case Cobol85Parser.IF:
                    case Cobol85Parser.INITIALIZE:
                    case Cobol85Parser.INITIATE:
                    case Cobol85Parser.INSPECT:
                    case Cobol85Parser.INVALID:
                    case Cobol85Parser.MERGE:
                    case Cobol85Parser.MOVE:
                    case Cobol85Parser.MULTIPLY:
                    case Cobol85Parser.NOT:
                    case Cobol85Parser.ON:
                    case Cobol85Parser.OPEN:
                    case Cobol85Parser.PERFORM:
                    case Cobol85Parser.PURGE:
                    case Cobol85Parser.READ:
                    case Cobol85Parser.RECEIVE:
                    case Cobol85Parser.RELEASE:
                    case Cobol85Parser.RETURN:
                    case Cobol85Parser.REWRITE:
                    case Cobol85Parser.SEARCH:
                    case Cobol85Parser.SEND:
                    case Cobol85Parser.SET:
                    case Cobol85Parser.SORT:
                    case Cobol85Parser.START:
                    case Cobol85Parser.STOP:
                    case Cobol85Parser.STRING:
                    case Cobol85Parser.SUBTRACT:
                    case Cobol85Parser.TERMINATE:
                    case Cobol85Parser.UNSTRING:
                    case Cobol85Parser.WHEN:
                    case Cobol85Parser.WITH:
                    case Cobol85Parser.WRITE:
                    case Cobol85Parser.DOT_FS:
                    case Cobol85Parser.EXECCICSLINE:
                    case Cobol85Parser.EXECSQLIMSLINE:
                    case Cobol85Parser.EXECSQLLINE:
                        {
                            this.state = 4314;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 4311;
                                            this.statement();
                                        }
                                    }
                                }
                                this.state = 4316;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.ifElse = function () {
        var _localctx = new IfElseContext(this._ctx, this.state);
        this.enterRule(_localctx, 698, Cobol85Parser.RULE_ifElse);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4319;
                this.match(Cobol85Parser.ELSE);
                this.state = 4328;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.NEXT:
                        {
                            this.state = 4320;
                            this.match(Cobol85Parser.NEXT);
                            this.state = 4321;
                            this.match(Cobol85Parser.SENTENCE);
                        }
                        break;
                    case Cobol85Parser.ACCEPT:
                    case Cobol85Parser.ADD:
                    case Cobol85Parser.ALTER:
                    case Cobol85Parser.AT:
                    case Cobol85Parser.CALL:
                    case Cobol85Parser.CANCEL:
                    case Cobol85Parser.CLOSE:
                    case Cobol85Parser.COMPUTE:
                    case Cobol85Parser.CONTINUE:
                    case Cobol85Parser.DELETE:
                    case Cobol85Parser.DISABLE:
                    case Cobol85Parser.DISPLAY:
                    case Cobol85Parser.DIVIDE:
                    case Cobol85Parser.ELSE:
                    case Cobol85Parser.ENABLE:
                    case Cobol85Parser.END:
                    case Cobol85Parser.END_ACCEPT:
                    case Cobol85Parser.END_ADD:
                    case Cobol85Parser.END_CALL:
                    case Cobol85Parser.END_COMPUTE:
                    case Cobol85Parser.END_DELETE:
                    case Cobol85Parser.END_DIVIDE:
                    case Cobol85Parser.END_EVALUATE:
                    case Cobol85Parser.END_IF:
                    case Cobol85Parser.END_MULTIPLY:
                    case Cobol85Parser.END_PERFORM:
                    case Cobol85Parser.END_READ:
                    case Cobol85Parser.END_RECEIVE:
                    case Cobol85Parser.END_RETURN:
                    case Cobol85Parser.END_REWRITE:
                    case Cobol85Parser.END_SEARCH:
                    case Cobol85Parser.END_START:
                    case Cobol85Parser.END_STRING:
                    case Cobol85Parser.END_SUBTRACT:
                    case Cobol85Parser.END_UNSTRING:
                    case Cobol85Parser.END_WRITE:
                    case Cobol85Parser.ENTRY:
                    case Cobol85Parser.EVALUATE:
                    case Cobol85Parser.EXCEPTION:
                    case Cobol85Parser.EXHIBIT:
                    case Cobol85Parser.EXIT:
                    case Cobol85Parser.GENERATE:
                    case Cobol85Parser.GOBACK:
                    case Cobol85Parser.GO:
                    case Cobol85Parser.IF:
                    case Cobol85Parser.INITIALIZE:
                    case Cobol85Parser.INITIATE:
                    case Cobol85Parser.INSPECT:
                    case Cobol85Parser.INVALID:
                    case Cobol85Parser.MERGE:
                    case Cobol85Parser.MOVE:
                    case Cobol85Parser.MULTIPLY:
                    case Cobol85Parser.NOT:
                    case Cobol85Parser.ON:
                    case Cobol85Parser.OPEN:
                    case Cobol85Parser.PERFORM:
                    case Cobol85Parser.PURGE:
                    case Cobol85Parser.READ:
                    case Cobol85Parser.RECEIVE:
                    case Cobol85Parser.RELEASE:
                    case Cobol85Parser.RETURN:
                    case Cobol85Parser.REWRITE:
                    case Cobol85Parser.SEARCH:
                    case Cobol85Parser.SEND:
                    case Cobol85Parser.SET:
                    case Cobol85Parser.SORT:
                    case Cobol85Parser.START:
                    case Cobol85Parser.STOP:
                    case Cobol85Parser.STRING:
                    case Cobol85Parser.SUBTRACT:
                    case Cobol85Parser.TERMINATE:
                    case Cobol85Parser.UNSTRING:
                    case Cobol85Parser.WHEN:
                    case Cobol85Parser.WITH:
                    case Cobol85Parser.WRITE:
                    case Cobol85Parser.DOT_FS:
                    case Cobol85Parser.EXECCICSLINE:
                    case Cobol85Parser.EXECSQLIMSLINE:
                    case Cobol85Parser.EXECSQLLINE:
                        {
                            this.state = 4325;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 4322;
                                            this.statement();
                                        }
                                    }
                                }
                                this.state = 4327;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.initializeStatement = function () {
        var _localctx = new InitializeStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 700, Cobol85Parser.RULE_initializeStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4330;
                this.match(Cobol85Parser.INITIALIZE);
                this.state = 4332;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4331;
                            this.identifier();
                        }
                    }
                    this.state = 4334;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
                this.state = 4337;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.REPLACING) {
                    {
                        this.state = 4336;
                        this.initializeReplacingPhrase();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.initializeReplacingPhrase = function () {
        var _localctx = new InitializeReplacingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 702, Cobol85Parser.RULE_initializeReplacingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4339;
                this.match(Cobol85Parser.REPLACING);
                this.state = 4341;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4340;
                            this.initializeReplacingBy();
                        }
                    }
                    this.state = 4343;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ALPHABETIC) | (1 << Cobol85Parser.ALPHANUMERIC) | (1 << Cobol85Parser.ALPHANUMERIC_EDITED))) !== 0) || _la === Cobol85Parser.DBCS || _la === Cobol85Parser.EGCS || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (Cobol85Parser.NATIONAL - 304)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 304)) | (1 << (Cobol85Parser.NUMERIC - 304)) | (1 << (Cobol85Parser.NUMERIC_EDITED - 304)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.initializeReplacingBy = function () {
        var _localctx = new InitializeReplacingByContext(this._ctx, this.state);
        this.enterRule(_localctx, 704, Cobol85Parser.RULE_initializeReplacingBy);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4345;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ALPHABETIC) | (1 << Cobol85Parser.ALPHANUMERIC) | (1 << Cobol85Parser.ALPHANUMERIC_EDITED))) !== 0) || _la === Cobol85Parser.DBCS || _la === Cobol85Parser.EGCS || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (Cobol85Parser.NATIONAL - 304)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 304)) | (1 << (Cobol85Parser.NUMERIC - 304)) | (1 << (Cobol85Parser.NUMERIC_EDITED - 304)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4347;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DATA) {
                    {
                        this.state = 4346;
                        this.match(Cobol85Parser.DATA);
                    }
                }
                this.state = 4349;
                this.match(Cobol85Parser.BY);
                this.state = 4352;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 615, this._ctx)) {
                    case 1:
                        {
                            this.state = 4350;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4351;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.initiateStatement = function () {
        var _localctx = new InitiateStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 706, Cobol85Parser.RULE_initiateStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4354;
                this.match(Cobol85Parser.INITIATE);
                this.state = 4356;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4355;
                            this.reportName();
                        }
                    }
                    this.state = 4358;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectStatement = function () {
        var _localctx = new InspectStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 708, Cobol85Parser.RULE_inspectStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4360;
                this.match(Cobol85Parser.INSPECT);
                this.state = 4361;
                this.identifier();
                this.state = 4366;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 617, this._ctx)) {
                    case 1:
                        {
                            this.state = 4362;
                            this.inspectTallyingPhrase();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4363;
                            this.inspectReplacingPhrase();
                        }
                        break;
                    case 3:
                        {
                            this.state = 4364;
                            this.inspectTallyingReplacingPhrase();
                        }
                        break;
                    case 4:
                        {
                            this.state = 4365;
                            this.inspectConvertingPhrase();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectTallyingPhrase = function () {
        var _localctx = new InspectTallyingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 710, Cobol85Parser.RULE_inspectTallyingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4368;
                this.match(Cobol85Parser.TALLYING);
                this.state = 4370;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4369;
                            this.inspectFor();
                        }
                    }
                    this.state = 4372;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectReplacingPhrase = function () {
        var _localctx = new InspectReplacingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 712, Cobol85Parser.RULE_inspectReplacingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4374;
                this.match(Cobol85Parser.REPLACING);
                this.state = 4377;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 4377;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Cobol85Parser.CHARACTERS:
                                {
                                    this.state = 4375;
                                    this.inspectReplacingCharacters();
                                }
                                break;
                            case Cobol85Parser.ALL:
                            case Cobol85Parser.FIRST:
                            case Cobol85Parser.LEADING:
                                {
                                    this.state = 4376;
                                    this.inspectReplacingAllLeadings();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 4379;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === Cobol85Parser.ALL || _la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.FIRST || _la === Cobol85Parser.LEADING);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectTallyingReplacingPhrase = function () {
        var _localctx = new InspectTallyingReplacingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 714, Cobol85Parser.RULE_inspectTallyingReplacingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4381;
                this.match(Cobol85Parser.TALLYING);
                this.state = 4383;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4382;
                            this.inspectFor();
                        }
                    }
                    this.state = 4385;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
                this.state = 4388;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4387;
                            this.inspectReplacingPhrase();
                        }
                    }
                    this.state = 4390;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === Cobol85Parser.REPLACING);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectConvertingPhrase = function () {
        var _localctx = new InspectConvertingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 716, Cobol85Parser.RULE_inspectConvertingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4392;
                this.match(Cobol85Parser.CONVERTING);
                this.state = 4395;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 623, this._ctx)) {
                    case 1:
                        {
                            this.state = 4393;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4394;
                            this.literal();
                        }
                        break;
                }
                this.state = 4397;
                this.inspectTo();
                this.state = 4401;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
                    {
                        {
                            this.state = 4398;
                            this.inspectBeforeAfter();
                        }
                    }
                    this.state = 4403;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectFor = function () {
        var _localctx = new InspectForContext(this._ctx, this.state);
        this.enterRule(_localctx, 718, Cobol85Parser.RULE_inspectFor);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4404;
                this.identifier();
                this.state = 4405;
                this.match(Cobol85Parser.FOR);
                this.state = 4408;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 4408;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Cobol85Parser.CHARACTERS:
                                {
                                    this.state = 4406;
                                    this.inspectCharacters();
                                }
                                break;
                            case Cobol85Parser.ALL:
                            case Cobol85Parser.LEADING:
                                {
                                    this.state = 4407;
                                    this.inspectAllLeadings();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 4410;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === Cobol85Parser.ALL || _la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.LEADING);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectCharacters = function () {
        var _localctx = new InspectCharactersContext(this._ctx, this.state);
        this.enterRule(_localctx, 720, Cobol85Parser.RULE_inspectCharacters);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4412;
                this.match(Cobol85Parser.CHARACTERS);
                this.state = 4416;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
                    {
                        {
                            this.state = 4413;
                            this.inspectBeforeAfter();
                        }
                    }
                    this.state = 4418;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectReplacingCharacters = function () {
        var _localctx = new InspectReplacingCharactersContext(this._ctx, this.state);
        this.enterRule(_localctx, 722, Cobol85Parser.RULE_inspectReplacingCharacters);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4419;
                this.match(Cobol85Parser.CHARACTERS);
                this.state = 4420;
                this.inspectBy();
                this.state = 4424;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
                    {
                        {
                            this.state = 4421;
                            this.inspectBeforeAfter();
                        }
                    }
                    this.state = 4426;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectAllLeadings = function () {
        var _localctx = new InspectAllLeadingsContext(this._ctx, this.state);
        this.enterRule(_localctx, 724, Cobol85Parser.RULE_inspectAllLeadings);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4427;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.ALL || _la === Cobol85Parser.LEADING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4429;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4428;
                                    this.inspectAllLeading();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4431;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 629, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectReplacingAllLeadings = function () {
        var _localctx = new InspectReplacingAllLeadingsContext(this._ctx, this.state);
        this.enterRule(_localctx, 726, Cobol85Parser.RULE_inspectReplacingAllLeadings);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4433;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.ALL || _la === Cobol85Parser.FIRST || _la === Cobol85Parser.LEADING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4435;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4434;
                                    this.inspectReplacingAllLeading();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4437;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 630, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectAllLeading = function () {
        var _localctx = new InspectAllLeadingContext(this._ctx, this.state);
        this.enterRule(_localctx, 728, Cobol85Parser.RULE_inspectAllLeading);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4441;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 631, this._ctx)) {
                    case 1:
                        {
                            this.state = 4439;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4440;
                            this.literal();
                        }
                        break;
                }
                this.state = 4446;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
                    {
                        {
                            this.state = 4443;
                            this.inspectBeforeAfter();
                        }
                    }
                    this.state = 4448;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectReplacingAllLeading = function () {
        var _localctx = new InspectReplacingAllLeadingContext(this._ctx, this.state);
        this.enterRule(_localctx, 730, Cobol85Parser.RULE_inspectReplacingAllLeading);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4451;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 633, this._ctx)) {
                    case 1:
                        {
                            this.state = 4449;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4450;
                            this.literal();
                        }
                        break;
                }
                this.state = 4453;
                this.inspectBy();
                this.state = 4457;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
                    {
                        {
                            this.state = 4454;
                            this.inspectBeforeAfter();
                        }
                    }
                    this.state = 4459;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectBy = function () {
        var _localctx = new InspectByContext(this._ctx, this.state);
        this.enterRule(_localctx, 732, Cobol85Parser.RULE_inspectBy);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4460;
                this.match(Cobol85Parser.BY);
                this.state = 4463;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 635, this._ctx)) {
                    case 1:
                        {
                            this.state = 4461;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4462;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectTo = function () {
        var _localctx = new InspectToContext(this._ctx, this.state);
        this.enterRule(_localctx, 734, Cobol85Parser.RULE_inspectTo);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4465;
                this.match(Cobol85Parser.TO);
                this.state = 4468;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 636, this._ctx)) {
                    case 1:
                        {
                            this.state = 4466;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4467;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inspectBeforeAfter = function () {
        var _localctx = new InspectBeforeAfterContext(this._ctx, this.state);
        this.enterRule(_localctx, 736, Cobol85Parser.RULE_inspectBeforeAfter);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4470;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4472;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.INITIAL) {
                    {
                        this.state = 4471;
                        this.match(Cobol85Parser.INITIAL);
                    }
                }
                this.state = 4476;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 638, this._ctx)) {
                    case 1:
                        {
                            this.state = 4474;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4475;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mergeStatement = function () {
        var _localctx = new MergeStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 738, Cobol85Parser.RULE_mergeStatement);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4478;
                this.match(Cobol85Parser.MERGE);
                this.state = 4479;
                this.fileName();
                this.state = 4481;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4480;
                                    this.mergeOnKeyClause();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4483;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 639, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 4486;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COLLATING || _la === Cobol85Parser.SEQUENCE) {
                    {
                        this.state = 4485;
                        this.mergeCollatingSequencePhrase();
                    }
                }
                this.state = 4491;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.USING) {
                    {
                        {
                            this.state = 4488;
                            this.mergeUsing();
                        }
                    }
                    this.state = 4493;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4495;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.OUTPUT) {
                    {
                        this.state = 4494;
                        this.mergeOutputProcedurePhrase();
                    }
                }
                this.state = 4500;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.GIVING) {
                    {
                        {
                            this.state = 4497;
                            this.mergeGivingPhrase();
                        }
                    }
                    this.state = 4502;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mergeOnKeyClause = function () {
        var _localctx = new MergeOnKeyClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 740, Cobol85Parser.RULE_mergeOnKeyClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4504;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 4503;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 4506;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.ASCENDING || _la === Cobol85Parser.DESCENDING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4508;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.KEY) {
                    {
                        this.state = 4507;
                        this.match(Cobol85Parser.KEY);
                    }
                }
                this.state = 4511;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4510;
                            this.qualifiedDataName();
                        }
                    }
                    this.state = 4513;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mergeCollatingSequencePhrase = function () {
        var _localctx = new MergeCollatingSequencePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 742, Cobol85Parser.RULE_mergeCollatingSequencePhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4516;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COLLATING) {
                    {
                        this.state = 4515;
                        this.match(Cobol85Parser.COLLATING);
                    }
                }
                this.state = 4518;
                this.match(Cobol85Parser.SEQUENCE);
                this.state = 4520;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 4519;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 4523;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4522;
                                    this.alphabetName();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 4525;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 649, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 4528;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 650, this._ctx)) {
                    case 1:
                        {
                            this.state = 4527;
                            this.mergeCollatingAlphanumeric();
                        }
                        break;
                }
                this.state = 4531;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR || _la === Cobol85Parser.NATIONAL) {
                    {
                        this.state = 4530;
                        this.mergeCollatingNational();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mergeCollatingAlphanumeric = function () {
        var _localctx = new MergeCollatingAlphanumericContext(this._ctx, this.state);
        this.enterRule(_localctx, 744, Cobol85Parser.RULE_mergeCollatingAlphanumeric);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4534;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 4533;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 4536;
                this.match(Cobol85Parser.ALPHANUMERIC);
                this.state = 4537;
                this.match(Cobol85Parser.IS);
                this.state = 4538;
                this.alphabetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mergeCollatingNational = function () {
        var _localctx = new MergeCollatingNationalContext(this._ctx, this.state);
        this.enterRule(_localctx, 746, Cobol85Parser.RULE_mergeCollatingNational);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4541;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 4540;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 4543;
                this.match(Cobol85Parser.NATIONAL);
                this.state = 4545;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 4544;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 4547;
                this.alphabetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mergeUsing = function () {
        var _localctx = new MergeUsingContext(this._ctx, this.state);
        this.enterRule(_localctx, 748, Cobol85Parser.RULE_mergeUsing);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4549;
                this.match(Cobol85Parser.USING);
                this.state = 4551;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4550;
                            this.fileName();
                        }
                    }
                    this.state = 4553;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mergeOutputProcedurePhrase = function () {
        var _localctx = new MergeOutputProcedurePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 750, Cobol85Parser.RULE_mergeOutputProcedurePhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4555;
                this.match(Cobol85Parser.OUTPUT);
                this.state = 4556;
                this.match(Cobol85Parser.PROCEDURE);
                this.state = 4558;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 4557;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 4560;
                this.procedureName();
                this.state = 4562;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
                    {
                        this.state = 4561;
                        this.mergeOutputThrough();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mergeOutputThrough = function () {
        var _localctx = new MergeOutputThroughContext(this._ctx, this.state);
        this.enterRule(_localctx, 752, Cobol85Parser.RULE_mergeOutputThrough);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4564;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4565;
                this.procedureName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mergeGivingPhrase = function () {
        var _localctx = new MergeGivingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 754, Cobol85Parser.RULE_mergeGivingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4567;
                this.match(Cobol85Parser.GIVING);
                this.state = 4569;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4568;
                            this.mergeGiving();
                        }
                    }
                    this.state = 4571;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mergeGiving = function () {
        var _localctx = new MergeGivingContext(this._ctx, this.state);
        this.enterRule(_localctx, 756, Cobol85Parser.RULE_mergeGiving);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4573;
                this.fileName();
                this.state = 4583;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 659, this._ctx)) {
                    case 1:
                        {
                            this.state = 4574;
                            this.match(Cobol85Parser.LOCK);
                        }
                        break;
                    case 2:
                        {
                            this.state = 4575;
                            this.match(Cobol85Parser.SAVE);
                        }
                        break;
                    case 3:
                        {
                            this.state = 4576;
                            this.match(Cobol85Parser.NO);
                            this.state = 4577;
                            this.match(Cobol85Parser.REWIND);
                        }
                        break;
                    case 4:
                        {
                            this.state = 4578;
                            this.match(Cobol85Parser.CRUNCH);
                        }
                        break;
                    case 5:
                        {
                            this.state = 4579;
                            this.match(Cobol85Parser.RELEASE);
                        }
                        break;
                    case 6:
                        {
                            this.state = 4580;
                            this.match(Cobol85Parser.WITH);
                            this.state = 4581;
                            this.match(Cobol85Parser.REMOVE);
                            this.state = 4582;
                            this.match(Cobol85Parser.CRUNCH);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.moveStatement = function () {
        var _localctx = new MoveStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 758, Cobol85Parser.RULE_moveStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4585;
                this.match(Cobol85Parser.MOVE);
                this.state = 4587;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 660, this._ctx)) {
                    case 1:
                        {
                            this.state = 4586;
                            this.match(Cobol85Parser.ALL);
                        }
                        break;
                }
                this.state = 4591;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.ADDRESS:
                    case Cobol85Parser.ALL:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DATE:
                    case Cobol85Parser.DAY:
                    case Cobol85Parser.DAY_OF_WEEK:
                    case Cobol85Parser.DEBUG_CONTENTS:
                    case Cobol85Parser.DEBUG_ITEM:
                    case Cobol85Parser.DEBUG_LINE:
                    case Cobol85Parser.DEBUG_NAME:
                    case Cobol85Parser.DEBUG_SUB_1:
                    case Cobol85Parser.DEBUG_SUB_2:
                    case Cobol85Parser.DEBUG_SUB_3:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FALSE:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTION:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.HIGH_VALUE:
                    case Cobol85Parser.HIGH_VALUES:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LINAGE_COUNTER:
                    case Cobol85Parser.LINE_COUNTER:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.LOW_VALUE:
                    case Cobol85Parser.LOW_VALUES:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NULL:
                    case Cobol85Parser.NULLS:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PAGE_COUNTER:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.QUOTE:
                    case Cobol85Parser.QUOTES:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.RETURN_CODE:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHIFT_IN:
                    case Cobol85Parser.SHIFT_OUT:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SORT_CONTROL:
                    case Cobol85Parser.SORT_CORE_SIZE:
                    case Cobol85Parser.SORT_FILE_SIZE:
                    case Cobol85Parser.SORT_MESSAGE:
                    case Cobol85Parser.SORT_MODE_SIZE:
                    case Cobol85Parser.SORT_RETURN:
                    case Cobol85Parser.SPACE:
                    case Cobol85Parser.SPACES:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TALLY:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIME:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUE:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.WHEN_COMPILED:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.ZEROS:
                    case Cobol85Parser.ZEROES:
                    case Cobol85Parser.NONNUMERICLITERAL:
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                    case Cobol85Parser.NUMERICLITERAL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 4589;
                            this.moveToStatement();
                        }
                        break;
                    case Cobol85Parser.CORR:
                    case Cobol85Parser.CORRESPONDING:
                        {
                            this.state = 4590;
                            this.moveCorrespondingToStatement();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.moveToStatement = function () {
        var _localctx = new MoveToStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 760, Cobol85Parser.RULE_moveToStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4593;
                this.moveToSendingArea();
                this.state = 4594;
                this.match(Cobol85Parser.TO);
                this.state = 4596;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4595;
                            this.identifier();
                        }
                    }
                    this.state = 4598;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.moveToSendingArea = function () {
        var _localctx = new MoveToSendingAreaContext(this._ctx, this.state);
        this.enterRule(_localctx, 762, Cobol85Parser.RULE_moveToSendingArea);
        try {
            this.state = 4602;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 663, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4600;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4601;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.moveCorrespondingToStatement = function () {
        var _localctx = new MoveCorrespondingToStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 764, Cobol85Parser.RULE_moveCorrespondingToStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4604;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.CORR || _la === Cobol85Parser.CORRESPONDING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4605;
                this.moveCorrespondingToSendingArea();
                this.state = 4606;
                this.match(Cobol85Parser.TO);
                this.state = 4608;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4607;
                            this.identifier();
                        }
                    }
                    this.state = 4610;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.moveCorrespondingToSendingArea = function () {
        var _localctx = new MoveCorrespondingToSendingAreaContext(this._ctx, this.state);
        this.enterRule(_localctx, 766, Cobol85Parser.RULE_moveCorrespondingToSendingArea);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4612;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.multiplyStatement = function () {
        var _localctx = new MultiplyStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 768, Cobol85Parser.RULE_multiplyStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4614;
                this.match(Cobol85Parser.MULTIPLY);
                this.state = 4617;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 665, this._ctx)) {
                    case 1:
                        {
                            this.state = 4615;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4616;
                            this.literal();
                        }
                        break;
                }
                this.state = 4619;
                this.match(Cobol85Parser.BY);
                this.state = 4622;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 666, this._ctx)) {
                    case 1:
                        {
                            this.state = 4620;
                            this.multiplyRegular();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4621;
                            this.multiplyGiving();
                        }
                        break;
                }
                this.state = 4625;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 667, this._ctx)) {
                    case 1:
                        {
                            this.state = 4624;
                            this.onSizeErrorPhrase();
                        }
                        break;
                }
                this.state = 4628;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 668, this._ctx)) {
                    case 1:
                        {
                            this.state = 4627;
                            this.notOnSizeErrorPhrase();
                        }
                        break;
                }
                this.state = 4631;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 669, this._ctx)) {
                    case 1:
                        {
                            this.state = 4630;
                            this.match(Cobol85Parser.END_MULTIPLY);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.multiplyRegular = function () {
        var _localctx = new MultiplyRegularContext(this._ctx, this.state);
        this.enterRule(_localctx, 770, Cobol85Parser.RULE_multiplyRegular);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4634;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4633;
                            this.multiplyRegularOperand();
                        }
                    }
                    this.state = 4636;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.multiplyRegularOperand = function () {
        var _localctx = new MultiplyRegularOperandContext(this._ctx, this.state);
        this.enterRule(_localctx, 772, Cobol85Parser.RULE_multiplyRegularOperand);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4638;
                this.identifier();
                this.state = 4640;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ROUNDED) {
                    {
                        this.state = 4639;
                        this.match(Cobol85Parser.ROUNDED);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.multiplyGiving = function () {
        var _localctx = new MultiplyGivingContext(this._ctx, this.state);
        this.enterRule(_localctx, 774, Cobol85Parser.RULE_multiplyGiving);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4642;
                this.multiplyGivingOperand();
                this.state = 4643;
                this.match(Cobol85Parser.GIVING);
                this.state = 4645;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4644;
                            this.multiplyGivingResult();
                        }
                    }
                    this.state = 4647;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.multiplyGivingOperand = function () {
        var _localctx = new MultiplyGivingOperandContext(this._ctx, this.state);
        this.enterRule(_localctx, 776, Cobol85Parser.RULE_multiplyGivingOperand);
        try {
            this.state = 4651;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 673, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4649;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4650;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.multiplyGivingResult = function () {
        var _localctx = new MultiplyGivingResultContext(this._ctx, this.state);
        this.enterRule(_localctx, 778, Cobol85Parser.RULE_multiplyGivingResult);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4653;
                this.identifier();
                this.state = 4655;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ROUNDED) {
                    {
                        this.state = 4654;
                        this.match(Cobol85Parser.ROUNDED);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.openStatement = function () {
        var _localctx = new OpenStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 780, Cobol85Parser.RULE_openStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4657;
                this.match(Cobol85Parser.OPEN);
                this.state = 4662;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 4662;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Cobol85Parser.INPUT:
                                {
                                    this.state = 4658;
                                    this.openInputStatement();
                                }
                                break;
                            case Cobol85Parser.OUTPUT:
                                {
                                    this.state = 4659;
                                    this.openOutputStatement();
                                }
                                break;
                            case Cobol85Parser.I_O:
                                {
                                    this.state = 4660;
                                    this.openIOStatement();
                                }
                                break;
                            case Cobol85Parser.EXTEND:
                                {
                                    this.state = 4661;
                                    this.openExtendStatement();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 4664;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === Cobol85Parser.EXTEND || _la === Cobol85Parser.I_O || _la === Cobol85Parser.INPUT || _la === Cobol85Parser.OUTPUT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.openInputStatement = function () {
        var _localctx = new OpenInputStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 782, Cobol85Parser.RULE_openInputStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4666;
                this.match(Cobol85Parser.INPUT);
                this.state = 4668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4667;
                            this.openInput();
                        }
                    }
                    this.state = 4670;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.openInput = function () {
        var _localctx = new OpenInputContext(this._ctx, this.state);
        this.enterRule(_localctx, 784, Cobol85Parser.RULE_openInput);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4672;
                this.fileName();
                this.state = 4679;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 679, this._ctx)) {
                    case 1:
                        {
                            this.state = 4673;
                            this.match(Cobol85Parser.REVERSED);
                        }
                        break;
                    case 2:
                        {
                            this.state = 4675;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.WITH) {
                                {
                                    this.state = 4674;
                                    this.match(Cobol85Parser.WITH);
                                }
                            }
                            this.state = 4677;
                            this.match(Cobol85Parser.NO);
                            this.state = 4678;
                            this.match(Cobol85Parser.REWIND);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.openOutputStatement = function () {
        var _localctx = new OpenOutputStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 786, Cobol85Parser.RULE_openOutputStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4681;
                this.match(Cobol85Parser.OUTPUT);
                this.state = 4683;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4682;
                            this.openOutput();
                        }
                    }
                    this.state = 4685;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.openOutput = function () {
        var _localctx = new OpenOutputContext(this._ctx, this.state);
        this.enterRule(_localctx, 788, Cobol85Parser.RULE_openOutput);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4687;
                this.fileName();
                this.state = 4693;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 682, this._ctx)) {
                    case 1:
                        {
                            this.state = 4689;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.WITH) {
                                {
                                    this.state = 4688;
                                    this.match(Cobol85Parser.WITH);
                                }
                            }
                            this.state = 4691;
                            this.match(Cobol85Parser.NO);
                            this.state = 4692;
                            this.match(Cobol85Parser.REWIND);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.openIOStatement = function () {
        var _localctx = new OpenIOStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 790, Cobol85Parser.RULE_openIOStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4695;
                this.match(Cobol85Parser.I_O);
                this.state = 4697;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4696;
                            this.fileName();
                        }
                    }
                    this.state = 4699;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.openExtendStatement = function () {
        var _localctx = new OpenExtendStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 792, Cobol85Parser.RULE_openExtendStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4701;
                this.match(Cobol85Parser.EXTEND);
                this.state = 4703;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4702;
                            this.fileName();
                        }
                    }
                    this.state = 4705;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performStatement = function () {
        var _localctx = new PerformStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 794, Cobol85Parser.RULE_performStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4707;
                this.match(Cobol85Parser.PERFORM);
                this.state = 4710;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 685, this._ctx)) {
                    case 1:
                        {
                            this.state = 4708;
                            this.performInlineStatement();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4709;
                            this.performProcedureStatement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performInlineStatement = function () {
        var _localctx = new PerformInlineStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 796, Cobol85Parser.RULE_performInlineStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4713;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.TEST - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.UNTIL - 498)) | (1 << (Cobol85Parser.VARYING - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.WITH - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0)) {
                    {
                        this.state = 4712;
                        this.performType();
                    }
                }
                this.state = 4718;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la === Cobol85Parser.COMPUTE || _la === Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1F) === 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la === Cobol85Parser.OPEN || _la === Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1F) === 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1F) === 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la === Cobol85Parser.TERMINATE || _la === Cobol85Parser.UNSTRING || _la === Cobol85Parser.WRITE || ((((_la - 559)) & ~0x1F) === 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
                    {
                        {
                            this.state = 4715;
                            this.statement();
                        }
                    }
                    this.state = 4720;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4721;
                this.match(Cobol85Parser.END_PERFORM);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performProcedureStatement = function () {
        var _localctx = new PerformProcedureStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 798, Cobol85Parser.RULE_performProcedureStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4723;
                this.procedureName();
                this.state = 4726;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
                    {
                        this.state = 4724;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4725;
                        this.procedureName();
                    }
                }
                this.state = 4729;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 689, this._ctx)) {
                    case 1:
                        {
                            this.state = 4728;
                            this.performType();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performType = function () {
        var _localctx = new PerformTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 800, Cobol85Parser.RULE_performType);
        try {
            this.state = 4734;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 690, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4731;
                        this.performTimes();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4732;
                        this.performUntil();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4733;
                        this.performVarying();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performTimes = function () {
        var _localctx = new PerformTimesContext(this._ctx, this.state);
        this.enterRule(_localctx, 802, Cobol85Parser.RULE_performTimes);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4738;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 691, this._ctx)) {
                    case 1:
                        {
                            this.state = 4736;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4737;
                            this.integerLiteral();
                        }
                        break;
                }
                this.state = 4740;
                this.match(Cobol85Parser.TIMES);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performUntil = function () {
        var _localctx = new PerformUntilContext(this._ctx, this.state);
        this.enterRule(_localctx, 804, Cobol85Parser.RULE_performUntil);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4743;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TEST || _la === Cobol85Parser.WITH) {
                    {
                        this.state = 4742;
                        this.performTestClause();
                    }
                }
                this.state = 4745;
                this.match(Cobol85Parser.UNTIL);
                this.state = 4746;
                this.condition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performVarying = function () {
        var _localctx = new PerformVaryingContext(this._ctx, this.state);
        this.enterRule(_localctx, 806, Cobol85Parser.RULE_performVarying);
        try {
            this.state = 4755;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.TEST:
                case Cobol85Parser.WITH:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4748;
                        this.performTestClause();
                        this.state = 4749;
                        this.performVaryingClause();
                    }
                    break;
                case Cobol85Parser.VARYING:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4751;
                        this.performVaryingClause();
                        this.state = 4753;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 693, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4752;
                                    this.performTestClause();
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performVaryingClause = function () {
        var _localctx = new PerformVaryingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 808, Cobol85Parser.RULE_performVaryingClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4757;
                this.match(Cobol85Parser.VARYING);
                this.state = 4758;
                this.performVaryingPhrase();
                this.state = 4762;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.AFTER) {
                    {
                        {
                            this.state = 4759;
                            this.performAfter();
                        }
                    }
                    this.state = 4764;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performVaryingPhrase = function () {
        var _localctx = new PerformVaryingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 810, Cobol85Parser.RULE_performVaryingPhrase);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4767;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 696, this._ctx)) {
                    case 1:
                        {
                            this.state = 4765;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4766;
                            this.literal();
                        }
                        break;
                }
                this.state = 4769;
                this.performFrom();
                this.state = 4770;
                this.performBy();
                this.state = 4771;
                this.performUntil();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performAfter = function () {
        var _localctx = new PerformAfterContext(this._ctx, this.state);
        this.enterRule(_localctx, 812, Cobol85Parser.RULE_performAfter);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4773;
                this.match(Cobol85Parser.AFTER);
                this.state = 4774;
                this.performVaryingPhrase();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performFrom = function () {
        var _localctx = new PerformFromContext(this._ctx, this.state);
        this.enterRule(_localctx, 814, Cobol85Parser.RULE_performFrom);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4776;
                this.match(Cobol85Parser.FROM);
                this.state = 4780;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 697, this._ctx)) {
                    case 1:
                        {
                            this.state = 4777;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4778;
                            this.literal();
                        }
                        break;
                    case 3:
                        {
                            this.state = 4779;
                            this.arithmeticExpression();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performBy = function () {
        var _localctx = new PerformByContext(this._ctx, this.state);
        this.enterRule(_localctx, 816, Cobol85Parser.RULE_performBy);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4782;
                this.match(Cobol85Parser.BY);
                this.state = 4786;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 698, this._ctx)) {
                    case 1:
                        {
                            this.state = 4783;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4784;
                            this.literal();
                        }
                        break;
                    case 3:
                        {
                            this.state = 4785;
                            this.arithmeticExpression();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.performTestClause = function () {
        var _localctx = new PerformTestClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 818, Cobol85Parser.RULE_performTestClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4789;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 4788;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 4791;
                this.match(Cobol85Parser.TEST);
                this.state = 4792;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.purgeStatement = function () {
        var _localctx = new PurgeStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 820, Cobol85Parser.RULE_purgeStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4794;
                this.match(Cobol85Parser.PURGE);
                this.state = 4796;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 4795;
                            this.cdName();
                        }
                    }
                    this.state = 4798;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.readStatement = function () {
        var _localctx = new ReadStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 822, Cobol85Parser.RULE_readStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4800;
                this.match(Cobol85Parser.READ);
                this.state = 4801;
                this.fileName();
                this.state = 4803;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.NEXT) {
                    {
                        this.state = 4802;
                        this.match(Cobol85Parser.NEXT);
                    }
                }
                this.state = 4806;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.RECORD) {
                    {
                        this.state = 4805;
                        this.match(Cobol85Parser.RECORD);
                    }
                }
                this.state = 4809;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.INTO) {
                    {
                        this.state = 4808;
                        this.readInto();
                    }
                }
                this.state = 4812;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 704, this._ctx)) {
                    case 1:
                        {
                            this.state = 4811;
                            this.readWith();
                        }
                        break;
                }
                this.state = 4815;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.KEY) {
                    {
                        this.state = 4814;
                        this.readKey();
                    }
                }
                this.state = 4818;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 706, this._ctx)) {
                    case 1:
                        {
                            this.state = 4817;
                            this.invalidKeyPhrase();
                        }
                        break;
                }
                this.state = 4821;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 707, this._ctx)) {
                    case 1:
                        {
                            this.state = 4820;
                            this.notInvalidKeyPhrase();
                        }
                        break;
                }
                this.state = 4824;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 708, this._ctx)) {
                    case 1:
                        {
                            this.state = 4823;
                            this.atEndPhrase();
                        }
                        break;
                }
                this.state = 4827;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 709, this._ctx)) {
                    case 1:
                        {
                            this.state = 4826;
                            this.notAtEndPhrase();
                        }
                        break;
                }
                this.state = 4830;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 710, this._ctx)) {
                    case 1:
                        {
                            this.state = 4829;
                            this.match(Cobol85Parser.END_READ);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.readInto = function () {
        var _localctx = new ReadIntoContext(this._ctx, this.state);
        this.enterRule(_localctx, 824, Cobol85Parser.RULE_readInto);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4832;
                this.match(Cobol85Parser.INTO);
                this.state = 4833;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.readWith = function () {
        var _localctx = new ReadWithContext(this._ctx, this.state);
        this.enterRule(_localctx, 826, Cobol85Parser.RULE_readWith);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4836;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 4835;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 4841;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.NO:
                        {
                            this.state = 4838;
                            _la = this._input.LA(1);
                            if (!(_la === Cobol85Parser.KEPT || _la === Cobol85Parser.NO)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 4839;
                            this.match(Cobol85Parser.LOCK);
                        }
                        break;
                    case Cobol85Parser.WAIT:
                        {
                            this.state = 4840;
                            this.match(Cobol85Parser.WAIT);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.readKey = function () {
        var _localctx = new ReadKeyContext(this._ctx, this.state);
        this.enterRule(_localctx, 828, Cobol85Parser.RULE_readKey);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4843;
                this.match(Cobol85Parser.KEY);
                this.state = 4845;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 4844;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 4847;
                this.qualifiedDataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveStatement = function () {
        var _localctx = new ReceiveStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 830, Cobol85Parser.RULE_receiveStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4849;
                this.match(Cobol85Parser.RECEIVE);
                this.state = 4852;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 714, this._ctx)) {
                    case 1:
                        {
                            this.state = 4850;
                            this.receiveFromStatement();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4851;
                            this.receiveIntoStatement();
                        }
                        break;
                }
                this.state = 4855;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 715, this._ctx)) {
                    case 1:
                        {
                            this.state = 4854;
                            this.onExceptionClause();
                        }
                        break;
                }
                this.state = 4858;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 716, this._ctx)) {
                    case 1:
                        {
                            this.state = 4857;
                            this.notOnExceptionClause();
                        }
                        break;
                }
                this.state = 4861;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 717, this._ctx)) {
                    case 1:
                        {
                            this.state = 4860;
                            this.match(Cobol85Parser.END_RECEIVE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveFromStatement = function () {
        var _localctx = new ReceiveFromStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 832, Cobol85Parser.RULE_receiveFromStatement);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4863;
                this.dataName();
                this.state = 4864;
                this.match(Cobol85Parser.FROM);
                this.state = 4865;
                this.receiveFrom();
                this.state = 4873;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 719, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 4871;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case Cobol85Parser.BEFORE:
                                    {
                                        this.state = 4866;
                                        this.receiveBefore();
                                    }
                                    break;
                                case Cobol85Parser.NO:
                                case Cobol85Parser.WITH:
                                    {
                                        this.state = 4867;
                                        this.receiveWith();
                                    }
                                    break;
                                case Cobol85Parser.THREAD:
                                    {
                                        this.state = 4868;
                                        this.receiveThread();
                                    }
                                    break;
                                case Cobol85Parser.SIZE:
                                    {
                                        this.state = 4869;
                                        this.receiveSize();
                                    }
                                    break;
                                case Cobol85Parser.STATUS:
                                    {
                                        this.state = 4870;
                                        this.receiveStatus();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                    }
                    this.state = 4875;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 719, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveFrom = function () {
        var _localctx = new ReceiveFromContext(this._ctx, this.state);
        this.enterRule(_localctx, 834, Cobol85Parser.RULE_receiveFrom);
        try {
            this.state = 4882;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.THREAD:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4876;
                        this.match(Cobol85Parser.THREAD);
                        this.state = 4877;
                        this.dataName();
                    }
                    break;
                case Cobol85Parser.LAST:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4878;
                        this.match(Cobol85Parser.LAST);
                        this.state = 4879;
                        this.match(Cobol85Parser.THREAD);
                    }
                    break;
                case Cobol85Parser.ANY:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4880;
                        this.match(Cobol85Parser.ANY);
                        this.state = 4881;
                        this.match(Cobol85Parser.THREAD);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveIntoStatement = function () {
        var _localctx = new ReceiveIntoStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 836, Cobol85Parser.RULE_receiveIntoStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4884;
                this.cdName();
                this.state = 4885;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.MESSAGE || _la === Cobol85Parser.SEGMENT)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4887;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.INTO) {
                    {
                        this.state = 4886;
                        this.match(Cobol85Parser.INTO);
                    }
                }
                this.state = 4889;
                this.identifier();
                this.state = 4891;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.NO) {
                    {
                        this.state = 4890;
                        this.receiveNoData();
                    }
                }
                this.state = 4894;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 723, this._ctx)) {
                    case 1:
                        {
                            this.state = 4893;
                            this.receiveWithData();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveNoData = function () {
        var _localctx = new ReceiveNoDataContext(this._ctx, this.state);
        this.enterRule(_localctx, 838, Cobol85Parser.RULE_receiveNoData);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4896;
                this.match(Cobol85Parser.NO);
                this.state = 4897;
                this.match(Cobol85Parser.DATA);
                this.state = 4901;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 724, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4898;
                                this.statement();
                            }
                        }
                    }
                    this.state = 4903;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 724, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveWithData = function () {
        var _localctx = new ReceiveWithDataContext(this._ctx, this.state);
        this.enterRule(_localctx, 840, Cobol85Parser.RULE_receiveWithData);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4904;
                this.match(Cobol85Parser.WITH);
                this.state = 4905;
                this.match(Cobol85Parser.DATA);
                this.state = 4909;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 725, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4906;
                                this.statement();
                            }
                        }
                    }
                    this.state = 4911;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 725, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveBefore = function () {
        var _localctx = new ReceiveBeforeContext(this._ctx, this.state);
        this.enterRule(_localctx, 842, Cobol85Parser.RULE_receiveBefore);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4912;
                this.match(Cobol85Parser.BEFORE);
                this.state = 4914;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 726, this._ctx)) {
                    case 1:
                        {
                            this.state = 4913;
                            this.match(Cobol85Parser.TIME);
                        }
                        break;
                }
                this.state = 4918;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 727, this._ctx)) {
                    case 1:
                        {
                            this.state = 4916;
                            this.numericLiteral();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4917;
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveWith = function () {
        var _localctx = new ReceiveWithContext(this._ctx, this.state);
        this.enterRule(_localctx, 844, Cobol85Parser.RULE_receiveWith);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4921;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 4920;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 4923;
                this.match(Cobol85Parser.NO);
                this.state = 4924;
                this.match(Cobol85Parser.WAIT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveThread = function () {
        var _localctx = new ReceiveThreadContext(this._ctx, this.state);
        this.enterRule(_localctx, 846, Cobol85Parser.RULE_receiveThread);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4926;
                this.match(Cobol85Parser.THREAD);
                this.state = 4928;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IN) {
                    {
                        this.state = 4927;
                        this.match(Cobol85Parser.IN);
                    }
                }
                this.state = 4930;
                this.dataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveSize = function () {
        var _localctx = new ReceiveSizeContext(this._ctx, this.state);
        this.enterRule(_localctx, 848, Cobol85Parser.RULE_receiveSize);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4932;
                this.match(Cobol85Parser.SIZE);
                this.state = 4934;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IN) {
                    {
                        this.state = 4933;
                        this.match(Cobol85Parser.IN);
                    }
                }
                this.state = 4938;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 731, this._ctx)) {
                    case 1:
                        {
                            this.state = 4936;
                            this.numericLiteral();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4937;
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.receiveStatus = function () {
        var _localctx = new ReceiveStatusContext(this._ctx, this.state);
        this.enterRule(_localctx, 850, Cobol85Parser.RULE_receiveStatus);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4940;
                this.match(Cobol85Parser.STATUS);
                this.state = 4942;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IN) {
                    {
                        this.state = 4941;
                        this.match(Cobol85Parser.IN);
                    }
                }
                {
                    this.state = 4944;
                    this.identifier();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.releaseStatement = function () {
        var _localctx = new ReleaseStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 852, Cobol85Parser.RULE_releaseStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4946;
                this.match(Cobol85Parser.RELEASE);
                this.state = 4947;
                this.recordName();
                this.state = 4950;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FROM) {
                    {
                        this.state = 4948;
                        this.match(Cobol85Parser.FROM);
                        this.state = 4949;
                        this.qualifiedDataName();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.returnStatement = function () {
        var _localctx = new ReturnStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 854, Cobol85Parser.RULE_returnStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4952;
                this.match(Cobol85Parser.RETURN);
                this.state = 4953;
                this.fileName();
                this.state = 4955;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.RECORD) {
                    {
                        this.state = 4954;
                        this.match(Cobol85Parser.RECORD);
                    }
                }
                this.state = 4958;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.INTO) {
                    {
                        this.state = 4957;
                        this.returnInto();
                    }
                }
                this.state = 4960;
                this.atEndPhrase();
                this.state = 4962;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 736, this._ctx)) {
                    case 1:
                        {
                            this.state = 4961;
                            this.notAtEndPhrase();
                        }
                        break;
                }
                this.state = 4965;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 737, this._ctx)) {
                    case 1:
                        {
                            this.state = 4964;
                            this.match(Cobol85Parser.END_RETURN);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.returnInto = function () {
        var _localctx = new ReturnIntoContext(this._ctx, this.state);
        this.enterRule(_localctx, 856, Cobol85Parser.RULE_returnInto);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4967;
                this.match(Cobol85Parser.INTO);
                this.state = 4968;
                this.qualifiedDataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.rewriteStatement = function () {
        var _localctx = new RewriteStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 858, Cobol85Parser.RULE_rewriteStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4970;
                this.match(Cobol85Parser.REWRITE);
                this.state = 4971;
                this.recordName();
                this.state = 4973;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FROM) {
                    {
                        this.state = 4972;
                        this.rewriteFrom();
                    }
                }
                this.state = 4976;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 739, this._ctx)) {
                    case 1:
                        {
                            this.state = 4975;
                            this.invalidKeyPhrase();
                        }
                        break;
                }
                this.state = 4979;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 740, this._ctx)) {
                    case 1:
                        {
                            this.state = 4978;
                            this.notInvalidKeyPhrase();
                        }
                        break;
                }
                this.state = 4982;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 741, this._ctx)) {
                    case 1:
                        {
                            this.state = 4981;
                            this.match(Cobol85Parser.END_REWRITE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.rewriteFrom = function () {
        var _localctx = new RewriteFromContext(this._ctx, this.state);
        this.enterRule(_localctx, 860, Cobol85Parser.RULE_rewriteFrom);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4984;
                this.match(Cobol85Parser.FROM);
                this.state = 4985;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.searchStatement = function () {
        var _localctx = new SearchStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 862, Cobol85Parser.RULE_searchStatement);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4987;
                this.match(Cobol85Parser.SEARCH);
                this.state = 4989;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ALL) {
                    {
                        this.state = 4988;
                        this.match(Cobol85Parser.ALL);
                    }
                }
                this.state = 4991;
                this.qualifiedDataName();
                this.state = 4993;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.VARYING) {
                    {
                        this.state = 4992;
                        this.searchVarying();
                    }
                }
                this.state = 4996;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AT || _la === Cobol85Parser.END) {
                    {
                        this.state = 4995;
                        this.atEndPhrase();
                    }
                }
                this.state = 4999;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 4998;
                                    this.searchWhen();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 5001;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 745, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 5004;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 746, this._ctx)) {
                    case 1:
                        {
                            this.state = 5003;
                            this.match(Cobol85Parser.END_SEARCH);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.searchVarying = function () {
        var _localctx = new SearchVaryingContext(this._ctx, this.state);
        this.enterRule(_localctx, 864, Cobol85Parser.RULE_searchVarying);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5006;
                this.match(Cobol85Parser.VARYING);
                this.state = 5007;
                this.qualifiedDataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.searchWhen = function () {
        var _localctx = new SearchWhenContext(this._ctx, this.state);
        this.enterRule(_localctx, 866, Cobol85Parser.RULE_searchWhen);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5009;
                this.match(Cobol85Parser.WHEN);
                this.state = 5010;
                this.condition();
                this.state = 5019;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.NEXT:
                        {
                            this.state = 5011;
                            this.match(Cobol85Parser.NEXT);
                            this.state = 5012;
                            this.match(Cobol85Parser.SENTENCE);
                        }
                        break;
                    case Cobol85Parser.ACCEPT:
                    case Cobol85Parser.ADD:
                    case Cobol85Parser.ALTER:
                    case Cobol85Parser.AT:
                    case Cobol85Parser.CALL:
                    case Cobol85Parser.CANCEL:
                    case Cobol85Parser.CLOSE:
                    case Cobol85Parser.COMPUTE:
                    case Cobol85Parser.CONTINUE:
                    case Cobol85Parser.DELETE:
                    case Cobol85Parser.DISABLE:
                    case Cobol85Parser.DISPLAY:
                    case Cobol85Parser.DIVIDE:
                    case Cobol85Parser.ELSE:
                    case Cobol85Parser.ENABLE:
                    case Cobol85Parser.END:
                    case Cobol85Parser.END_ACCEPT:
                    case Cobol85Parser.END_ADD:
                    case Cobol85Parser.END_CALL:
                    case Cobol85Parser.END_COMPUTE:
                    case Cobol85Parser.END_DELETE:
                    case Cobol85Parser.END_DIVIDE:
                    case Cobol85Parser.END_EVALUATE:
                    case Cobol85Parser.END_IF:
                    case Cobol85Parser.END_MULTIPLY:
                    case Cobol85Parser.END_PERFORM:
                    case Cobol85Parser.END_READ:
                    case Cobol85Parser.END_RECEIVE:
                    case Cobol85Parser.END_RETURN:
                    case Cobol85Parser.END_REWRITE:
                    case Cobol85Parser.END_SEARCH:
                    case Cobol85Parser.END_START:
                    case Cobol85Parser.END_STRING:
                    case Cobol85Parser.END_SUBTRACT:
                    case Cobol85Parser.END_UNSTRING:
                    case Cobol85Parser.END_WRITE:
                    case Cobol85Parser.ENTRY:
                    case Cobol85Parser.EVALUATE:
                    case Cobol85Parser.EXCEPTION:
                    case Cobol85Parser.EXHIBIT:
                    case Cobol85Parser.EXIT:
                    case Cobol85Parser.GENERATE:
                    case Cobol85Parser.GOBACK:
                    case Cobol85Parser.GO:
                    case Cobol85Parser.IF:
                    case Cobol85Parser.INITIALIZE:
                    case Cobol85Parser.INITIATE:
                    case Cobol85Parser.INSPECT:
                    case Cobol85Parser.INVALID:
                    case Cobol85Parser.MERGE:
                    case Cobol85Parser.MOVE:
                    case Cobol85Parser.MULTIPLY:
                    case Cobol85Parser.NOT:
                    case Cobol85Parser.ON:
                    case Cobol85Parser.OPEN:
                    case Cobol85Parser.PERFORM:
                    case Cobol85Parser.PURGE:
                    case Cobol85Parser.READ:
                    case Cobol85Parser.RECEIVE:
                    case Cobol85Parser.RELEASE:
                    case Cobol85Parser.RETURN:
                    case Cobol85Parser.REWRITE:
                    case Cobol85Parser.SEARCH:
                    case Cobol85Parser.SEND:
                    case Cobol85Parser.SET:
                    case Cobol85Parser.SORT:
                    case Cobol85Parser.START:
                    case Cobol85Parser.STOP:
                    case Cobol85Parser.STRING:
                    case Cobol85Parser.SUBTRACT:
                    case Cobol85Parser.TERMINATE:
                    case Cobol85Parser.UNSTRING:
                    case Cobol85Parser.WHEN:
                    case Cobol85Parser.WITH:
                    case Cobol85Parser.WRITE:
                    case Cobol85Parser.DOT_FS:
                    case Cobol85Parser.EXECCICSLINE:
                    case Cobol85Parser.EXECSQLIMSLINE:
                    case Cobol85Parser.EXECSQLLINE:
                        {
                            this.state = 5016;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 747, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 5013;
                                            this.statement();
                                        }
                                    }
                                }
                                this.state = 5018;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 747, this._ctx);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sendStatement = function () {
        var _localctx = new SendStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 868, Cobol85Parser.RULE_sendStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5021;
                this.match(Cobol85Parser.SEND);
                this.state = 5024;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.ADDRESS:
                    case Cobol85Parser.ALL:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DATE:
                    case Cobol85Parser.DAY:
                    case Cobol85Parser.DAY_OF_WEEK:
                    case Cobol85Parser.DEBUG_CONTENTS:
                    case Cobol85Parser.DEBUG_ITEM:
                    case Cobol85Parser.DEBUG_LINE:
                    case Cobol85Parser.DEBUG_NAME:
                    case Cobol85Parser.DEBUG_SUB_1:
                    case Cobol85Parser.DEBUG_SUB_2:
                    case Cobol85Parser.DEBUG_SUB_3:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FALSE:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTION:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.HIGH_VALUE:
                    case Cobol85Parser.HIGH_VALUES:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LINAGE_COUNTER:
                    case Cobol85Parser.LINE_COUNTER:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.LOW_VALUE:
                    case Cobol85Parser.LOW_VALUES:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NULL:
                    case Cobol85Parser.NULLS:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PAGE_COUNTER:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.QUOTE:
                    case Cobol85Parser.QUOTES:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.RETURN_CODE:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHIFT_IN:
                    case Cobol85Parser.SHIFT_OUT:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SORT_CONTROL:
                    case Cobol85Parser.SORT_CORE_SIZE:
                    case Cobol85Parser.SORT_FILE_SIZE:
                    case Cobol85Parser.SORT_MESSAGE:
                    case Cobol85Parser.SORT_MODE_SIZE:
                    case Cobol85Parser.SORT_RETURN:
                    case Cobol85Parser.SPACE:
                    case Cobol85Parser.SPACES:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TALLY:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIME:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUE:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.WHEN_COMPILED:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.ZEROS:
                    case Cobol85Parser.ZEROES:
                    case Cobol85Parser.NONNUMERICLITERAL:
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                    case Cobol85Parser.NUMERICLITERAL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 5022;
                            this.sendStatementSync();
                        }
                        break;
                    case Cobol85Parser.TO:
                        {
                            this.state = 5023;
                            this.sendStatementAsync();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 5027;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 750, this._ctx)) {
                    case 1:
                        {
                            this.state = 5026;
                            this.onExceptionClause();
                        }
                        break;
                }
                this.state = 5030;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 751, this._ctx)) {
                    case 1:
                        {
                            this.state = 5029;
                            this.notOnExceptionClause();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sendStatementSync = function () {
        var _localctx = new SendStatementSyncContext(this._ctx, this.state);
        this.enterRule(_localctx, 870, Cobol85Parser.RULE_sendStatementSync);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5034;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 752, this._ctx)) {
                    case 1:
                        {
                            this.state = 5032;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5033;
                            this.literal();
                        }
                        break;
                }
                this.state = 5037;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FROM) {
                    {
                        this.state = 5036;
                        this.sendFromPhrase();
                    }
                }
                this.state = 5040;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 754, this._ctx)) {
                    case 1:
                        {
                            this.state = 5039;
                            this.sendWithPhrase();
                        }
                        break;
                }
                this.state = 5043;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.REPLACING) {
                    {
                        this.state = 5042;
                        this.sendReplacingPhrase();
                    }
                }
                this.state = 5046;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
                    {
                        this.state = 5045;
                        this.sendAdvancingPhrase();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sendStatementAsync = function () {
        var _localctx = new SendStatementAsyncContext(this._ctx, this.state);
        this.enterRule(_localctx, 872, Cobol85Parser.RULE_sendStatementAsync);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5048;
                this.match(Cobol85Parser.TO);
                this.state = 5049;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.BOTTOM || _la === Cobol85Parser.TOP)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5050;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sendFromPhrase = function () {
        var _localctx = new SendFromPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 874, Cobol85Parser.RULE_sendFromPhrase);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5052;
                this.match(Cobol85Parser.FROM);
                this.state = 5053;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sendWithPhrase = function () {
        var _localctx = new SendWithPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 876, Cobol85Parser.RULE_sendWithPhrase);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5055;
                this.match(Cobol85Parser.WITH);
                this.state = 5060;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.EGI:
                        {
                            this.state = 5056;
                            this.match(Cobol85Parser.EGI);
                        }
                        break;
                    case Cobol85Parser.EMI:
                        {
                            this.state = 5057;
                            this.match(Cobol85Parser.EMI);
                        }
                        break;
                    case Cobol85Parser.ESI:
                        {
                            this.state = 5058;
                            this.match(Cobol85Parser.ESI);
                        }
                        break;
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.ADDRESS:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DATE:
                    case Cobol85Parser.DAY:
                    case Cobol85Parser.DAY_OF_WEEK:
                    case Cobol85Parser.DEBUG_CONTENTS:
                    case Cobol85Parser.DEBUG_ITEM:
                    case Cobol85Parser.DEBUG_LINE:
                    case Cobol85Parser.DEBUG_NAME:
                    case Cobol85Parser.DEBUG_SUB_1:
                    case Cobol85Parser.DEBUG_SUB_2:
                    case Cobol85Parser.DEBUG_SUB_3:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTION:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LINAGE_COUNTER:
                    case Cobol85Parser.LINE_COUNTER:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PAGE_COUNTER:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.RETURN_CODE:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHIFT_IN:
                    case Cobol85Parser.SHIFT_OUT:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SORT_CONTROL:
                    case Cobol85Parser.SORT_CORE_SIZE:
                    case Cobol85Parser.SORT_FILE_SIZE:
                    case Cobol85Parser.SORT_MESSAGE:
                    case Cobol85Parser.SORT_MODE_SIZE:
                    case Cobol85Parser.SORT_RETURN:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TALLY:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIME:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.WHEN_COMPILED:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 5059;
                            this.identifier();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sendReplacingPhrase = function () {
        var _localctx = new SendReplacingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 878, Cobol85Parser.RULE_sendReplacingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5062;
                this.match(Cobol85Parser.REPLACING);
                this.state = 5064;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LINE) {
                    {
                        this.state = 5063;
                        this.match(Cobol85Parser.LINE);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sendAdvancingPhrase = function () {
        var _localctx = new SendAdvancingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 880, Cobol85Parser.RULE_sendAdvancingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5066;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5068;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ADVANCING) {
                    {
                        this.state = 5067;
                        this.match(Cobol85Parser.ADVANCING);
                    }
                }
                this.state = 5073;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 760, this._ctx)) {
                    case 1:
                        {
                            this.state = 5070;
                            this.sendAdvancingPage();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5071;
                            this.sendAdvancingLines();
                        }
                        break;
                    case 3:
                        {
                            this.state = 5072;
                            this.sendAdvancingMnemonic();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sendAdvancingPage = function () {
        var _localctx = new SendAdvancingPageContext(this._ctx, this.state);
        this.enterRule(_localctx, 882, Cobol85Parser.RULE_sendAdvancingPage);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5075;
                this.match(Cobol85Parser.PAGE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sendAdvancingLines = function () {
        var _localctx = new SendAdvancingLinesContext(this._ctx, this.state);
        this.enterRule(_localctx, 884, Cobol85Parser.RULE_sendAdvancingLines);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5079;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 761, this._ctx)) {
                    case 1:
                        {
                            this.state = 5077;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5078;
                            this.literal();
                        }
                        break;
                }
                this.state = 5082;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES) {
                    {
                        this.state = 5081;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sendAdvancingMnemonic = function () {
        var _localctx = new SendAdvancingMnemonicContext(this._ctx, this.state);
        this.enterRule(_localctx, 886, Cobol85Parser.RULE_sendAdvancingMnemonic);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5084;
                this.mnemonicName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.setStatement = function () {
        var _localctx = new SetStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 888, Cobol85Parser.RULE_setStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5086;
                this.match(Cobol85Parser.SET);
                this.state = 5093;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 764, this._ctx)) {
                    case 1:
                        {
                            this.state = 5088;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    {
                                        this.state = 5087;
                                        this.setToStatement();
                                    }
                                }
                                this.state = 5090;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
                        }
                        break;
                    case 2:
                        {
                            this.state = 5092;
                            this.setUpDownByStatement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.setToStatement = function () {
        var _localctx = new SetToStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 890, Cobol85Parser.RULE_setToStatement);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5096;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5095;
                            this.setTo();
                        }
                    }
                    this.state = 5098;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
                this.state = 5100;
                this.match(Cobol85Parser.TO);
                this.state = 5102;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 5101;
                                    this.setToValue();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 5104;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 766, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.setUpDownByStatement = function () {
        var _localctx = new SetUpDownByStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 892, Cobol85Parser.RULE_setUpDownByStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5107;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5106;
                            this.setTo();
                        }
                    }
                    this.state = 5109;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
                this.state = 5115;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.UP:
                        {
                            this.state = 5111;
                            this.match(Cobol85Parser.UP);
                            this.state = 5112;
                            this.match(Cobol85Parser.BY);
                        }
                        break;
                    case Cobol85Parser.DOWN:
                        {
                            this.state = 5113;
                            this.match(Cobol85Parser.DOWN);
                            this.state = 5114;
                            this.match(Cobol85Parser.BY);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 5117;
                this.setByValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.setTo = function () {
        var _localctx = new SetToContext(this._ctx, this.state);
        this.enterRule(_localctx, 894, Cobol85Parser.RULE_setTo);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5119;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.setToValue = function () {
        var _localctx = new SetToValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 896, Cobol85Parser.RULE_setToValue);
        try {
            this.state = 5130;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 770, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5121;
                        this.match(Cobol85Parser.ON);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5122;
                        this.match(Cobol85Parser.OFF);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5123;
                        this.match(Cobol85Parser.ENTRY);
                        this.state = 5126;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 769, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5124;
                                    this.identifier();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 5125;
                                    this.literal();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5128;
                        this.identifier();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 5129;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.setByValue = function () {
        var _localctx = new SetByValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 898, Cobol85Parser.RULE_setByValue);
        try {
            this.state = 5134;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 771, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5132;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5133;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortStatement = function () {
        var _localctx = new SortStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 900, Cobol85Parser.RULE_sortStatement);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5136;
                this.match(Cobol85Parser.SORT);
                this.state = 5137;
                this.fileName();
                this.state = 5139;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 5138;
                                    this.sortOnKeyClause();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 5141;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 772, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 5144;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 773, this._ctx)) {
                    case 1:
                        {
                            this.state = 5143;
                            this.sortDuplicatesPhrase();
                        }
                        break;
                }
                this.state = 5147;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COLLATING || _la === Cobol85Parser.SEQUENCE) {
                    {
                        this.state = 5146;
                        this.sortCollatingSequencePhrase();
                    }
                }
                this.state = 5150;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.INPUT) {
                    {
                        this.state = 5149;
                        this.sortInputProcedurePhrase();
                    }
                }
                this.state = 5155;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.USING) {
                    {
                        {
                            this.state = 5152;
                            this.sortUsing();
                        }
                    }
                    this.state = 5157;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 5159;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.OUTPUT) {
                    {
                        this.state = 5158;
                        this.sortOutputProcedurePhrase();
                    }
                }
                this.state = 5164;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.GIVING) {
                    {
                        {
                            this.state = 5161;
                            this.sortGivingPhrase();
                        }
                    }
                    this.state = 5166;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortOnKeyClause = function () {
        var _localctx = new SortOnKeyClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 902, Cobol85Parser.RULE_sortOnKeyClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5168;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 5167;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 5170;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.ASCENDING || _la === Cobol85Parser.DESCENDING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5172;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.KEY) {
                    {
                        this.state = 5171;
                        this.match(Cobol85Parser.KEY);
                    }
                }
                this.state = 5175;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5174;
                            this.qualifiedDataName();
                        }
                    }
                    this.state = 5177;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortDuplicatesPhrase = function () {
        var _localctx = new SortDuplicatesPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 904, Cobol85Parser.RULE_sortDuplicatesPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5180;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 5179;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 5182;
                this.match(Cobol85Parser.DUPLICATES);
                this.state = 5184;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IN) {
                    {
                        this.state = 5183;
                        this.match(Cobol85Parser.IN);
                    }
                }
                this.state = 5187;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ORDER) {
                    {
                        this.state = 5186;
                        this.match(Cobol85Parser.ORDER);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortCollatingSequencePhrase = function () {
        var _localctx = new SortCollatingSequencePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 906, Cobol85Parser.RULE_sortCollatingSequencePhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5190;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COLLATING) {
                    {
                        this.state = 5189;
                        this.match(Cobol85Parser.COLLATING);
                    }
                }
                this.state = 5192;
                this.match(Cobol85Parser.SEQUENCE);
                this.state = 5194;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 5193;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 5197;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 5196;
                                    this.alphabetName();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 5199;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 787, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 5202;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 788, this._ctx)) {
                    case 1:
                        {
                            this.state = 5201;
                            this.sortCollatingAlphanumeric();
                        }
                        break;
                }
                this.state = 5205;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR || _la === Cobol85Parser.NATIONAL) {
                    {
                        this.state = 5204;
                        this.sortCollatingNational();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortCollatingAlphanumeric = function () {
        var _localctx = new SortCollatingAlphanumericContext(this._ctx, this.state);
        this.enterRule(_localctx, 908, Cobol85Parser.RULE_sortCollatingAlphanumeric);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5208;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 5207;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 5210;
                this.match(Cobol85Parser.ALPHANUMERIC);
                this.state = 5211;
                this.match(Cobol85Parser.IS);
                this.state = 5212;
                this.alphabetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortCollatingNational = function () {
        var _localctx = new SortCollatingNationalContext(this._ctx, this.state);
        this.enterRule(_localctx, 910, Cobol85Parser.RULE_sortCollatingNational);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5215;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 5214;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 5217;
                this.match(Cobol85Parser.NATIONAL);
                this.state = 5219;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 5218;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 5221;
                this.alphabetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortInputProcedurePhrase = function () {
        var _localctx = new SortInputProcedurePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 912, Cobol85Parser.RULE_sortInputProcedurePhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5223;
                this.match(Cobol85Parser.INPUT);
                this.state = 5224;
                this.match(Cobol85Parser.PROCEDURE);
                this.state = 5226;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 5225;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 5228;
                this.procedureName();
                this.state = 5230;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
                    {
                        this.state = 5229;
                        this.sortInputThrough();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortInputThrough = function () {
        var _localctx = new SortInputThroughContext(this._ctx, this.state);
        this.enterRule(_localctx, 914, Cobol85Parser.RULE_sortInputThrough);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5232;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5233;
                this.procedureName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortUsing = function () {
        var _localctx = new SortUsingContext(this._ctx, this.state);
        this.enterRule(_localctx, 916, Cobol85Parser.RULE_sortUsing);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5235;
                this.match(Cobol85Parser.USING);
                this.state = 5237;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5236;
                            this.fileName();
                        }
                    }
                    this.state = 5239;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortOutputProcedurePhrase = function () {
        var _localctx = new SortOutputProcedurePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 918, Cobol85Parser.RULE_sortOutputProcedurePhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5241;
                this.match(Cobol85Parser.OUTPUT);
                this.state = 5242;
                this.match(Cobol85Parser.PROCEDURE);
                this.state = 5244;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 5243;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 5246;
                this.procedureName();
                this.state = 5248;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
                    {
                        this.state = 5247;
                        this.sortOutputThrough();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortOutputThrough = function () {
        var _localctx = new SortOutputThroughContext(this._ctx, this.state);
        this.enterRule(_localctx, 920, Cobol85Parser.RULE_sortOutputThrough);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5250;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5251;
                this.procedureName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortGivingPhrase = function () {
        var _localctx = new SortGivingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 922, Cobol85Parser.RULE_sortGivingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5253;
                this.match(Cobol85Parser.GIVING);
                this.state = 5255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5254;
                            this.sortGiving();
                        }
                    }
                    this.state = 5257;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sortGiving = function () {
        var _localctx = new SortGivingContext(this._ctx, this.state);
        this.enterRule(_localctx, 924, Cobol85Parser.RULE_sortGiving);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5259;
                this.fileName();
                this.state = 5269;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 799, this._ctx)) {
                    case 1:
                        {
                            this.state = 5260;
                            this.match(Cobol85Parser.LOCK);
                        }
                        break;
                    case 2:
                        {
                            this.state = 5261;
                            this.match(Cobol85Parser.SAVE);
                        }
                        break;
                    case 3:
                        {
                            this.state = 5262;
                            this.match(Cobol85Parser.NO);
                            this.state = 5263;
                            this.match(Cobol85Parser.REWIND);
                        }
                        break;
                    case 4:
                        {
                            this.state = 5264;
                            this.match(Cobol85Parser.CRUNCH);
                        }
                        break;
                    case 5:
                        {
                            this.state = 5265;
                            this.match(Cobol85Parser.RELEASE);
                        }
                        break;
                    case 6:
                        {
                            this.state = 5266;
                            this.match(Cobol85Parser.WITH);
                            this.state = 5267;
                            this.match(Cobol85Parser.REMOVE);
                            this.state = 5268;
                            this.match(Cobol85Parser.CRUNCH);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.startStatement = function () {
        var _localctx = new StartStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 926, Cobol85Parser.RULE_startStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5271;
                this.match(Cobol85Parser.START);
                this.state = 5272;
                this.fileName();
                this.state = 5274;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.KEY) {
                    {
                        this.state = 5273;
                        this.startKey();
                    }
                }
                this.state = 5277;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 801, this._ctx)) {
                    case 1:
                        {
                            this.state = 5276;
                            this.invalidKeyPhrase();
                        }
                        break;
                }
                this.state = 5280;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 802, this._ctx)) {
                    case 1:
                        {
                            this.state = 5279;
                            this.notInvalidKeyPhrase();
                        }
                        break;
                }
                this.state = 5283;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 803, this._ctx)) {
                    case 1:
                        {
                            this.state = 5282;
                            this.match(Cobol85Parser.END_START);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.startKey = function () {
        var _localctx = new StartKeyContext(this._ctx, this.state);
        this.enterRule(_localctx, 928, Cobol85Parser.RULE_startKey);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5285;
                this.match(Cobol85Parser.KEY);
                this.state = 5287;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 5286;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 5316;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 810, this._ctx)) {
                    case 1:
                        {
                            this.state = 5289;
                            this.match(Cobol85Parser.EQUAL);
                            this.state = 5291;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.TO) {
                                {
                                    this.state = 5290;
                                    this.match(Cobol85Parser.TO);
                                }
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 5293;
                            this.match(Cobol85Parser.EQUALCHAR);
                        }
                        break;
                    case 3:
                        {
                            this.state = 5294;
                            this.match(Cobol85Parser.GREATER);
                            this.state = 5296;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.THAN) {
                                {
                                    this.state = 5295;
                                    this.match(Cobol85Parser.THAN);
                                }
                            }
                        }
                        break;
                    case 4:
                        {
                            this.state = 5298;
                            this.match(Cobol85Parser.MORETHANCHAR);
                        }
                        break;
                    case 5:
                        {
                            this.state = 5299;
                            this.match(Cobol85Parser.NOT);
                            this.state = 5300;
                            this.match(Cobol85Parser.LESS);
                            this.state = 5302;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.THAN) {
                                {
                                    this.state = 5301;
                                    this.match(Cobol85Parser.THAN);
                                }
                            }
                        }
                        break;
                    case 6:
                        {
                            this.state = 5304;
                            this.match(Cobol85Parser.NOT);
                            this.state = 5305;
                            this.match(Cobol85Parser.LESSTHANCHAR);
                        }
                        break;
                    case 7:
                        {
                            this.state = 5306;
                            this.match(Cobol85Parser.GREATER);
                            this.state = 5308;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.THAN) {
                                {
                                    this.state = 5307;
                                    this.match(Cobol85Parser.THAN);
                                }
                            }
                            this.state = 5310;
                            this.match(Cobol85Parser.OR);
                            this.state = 5311;
                            this.match(Cobol85Parser.EQUAL);
                            this.state = 5313;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.TO) {
                                {
                                    this.state = 5312;
                                    this.match(Cobol85Parser.TO);
                                }
                            }
                        }
                        break;
                    case 8:
                        {
                            this.state = 5315;
                            this.match(Cobol85Parser.MORETHANOREQUAL);
                        }
                        break;
                }
                this.state = 5318;
                this.qualifiedDataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.stopStatement = function () {
        var _localctx = new StopStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 930, Cobol85Parser.RULE_stopStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5320;
                this.match(Cobol85Parser.STOP);
                this.state = 5323;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.RUN:
                        {
                            this.state = 5321;
                            this.match(Cobol85Parser.RUN);
                        }
                        break;
                    case Cobol85Parser.ALL:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.FALSE:
                    case Cobol85Parser.HIGH_VALUE:
                    case Cobol85Parser.HIGH_VALUES:
                    case Cobol85Parser.LOW_VALUE:
                    case Cobol85Parser.LOW_VALUES:
                    case Cobol85Parser.NULL:
                    case Cobol85Parser.NULLS:
                    case Cobol85Parser.QUOTE:
                    case Cobol85Parser.QUOTES:
                    case Cobol85Parser.SPACE:
                    case Cobol85Parser.SPACES:
                    case Cobol85Parser.TRUE:
                    case Cobol85Parser.ZERO:
                    case Cobol85Parser.ZEROS:
                    case Cobol85Parser.ZEROES:
                    case Cobol85Parser.NONNUMERICLITERAL:
                    case Cobol85Parser.LEVEL_NUMBER_66:
                    case Cobol85Parser.LEVEL_NUMBER_77:
                    case Cobol85Parser.LEVEL_NUMBER_88:
                    case Cobol85Parser.INTEGERLITERAL:
                    case Cobol85Parser.NUMERICLITERAL:
                        {
                            this.state = 5322;
                            this.literal();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.stringStatement = function () {
        var _localctx = new StringStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 932, Cobol85Parser.RULE_stringStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5325;
                this.match(Cobol85Parser.STRING);
                this.state = 5327;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5326;
                            this.stringSendingPhrase();
                        }
                    }
                    this.state = 5329;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
                this.state = 5331;
                this.stringIntoPhrase();
                this.state = 5333;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 813, this._ctx)) {
                    case 1:
                        {
                            this.state = 5332;
                            this.stringWithPointerPhrase();
                        }
                        break;
                }
                this.state = 5336;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 814, this._ctx)) {
                    case 1:
                        {
                            this.state = 5335;
                            this.onOverflowPhrase();
                        }
                        break;
                }
                this.state = 5339;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 815, this._ctx)) {
                    case 1:
                        {
                            this.state = 5338;
                            this.notOnOverflowPhrase();
                        }
                        break;
                }
                this.state = 5342;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 816, this._ctx)) {
                    case 1:
                        {
                            this.state = 5341;
                            this.match(Cobol85Parser.END_STRING);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.stringSendingPhrase = function () {
        var _localctx = new StringSendingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 934, Cobol85Parser.RULE_stringSendingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5345;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5344;
                            this.stringSending();
                        }
                    }
                    this.state = 5347;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
                this.state = 5351;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.DELIMITED:
                        {
                            this.state = 5349;
                            this.stringDelimitedByPhrase();
                        }
                        break;
                    case Cobol85Parser.FOR:
                        {
                            this.state = 5350;
                            this.stringForPhrase();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.stringSending = function () {
        var _localctx = new StringSendingContext(this._ctx, this.state);
        this.enterRule(_localctx, 936, Cobol85Parser.RULE_stringSending);
        try {
            this.state = 5355;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 819, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5353;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5354;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.stringDelimitedByPhrase = function () {
        var _localctx = new StringDelimitedByPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 938, Cobol85Parser.RULE_stringDelimitedByPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5357;
                this.match(Cobol85Parser.DELIMITED);
                this.state = 5359;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.BY) {
                    {
                        this.state = 5358;
                        this.match(Cobol85Parser.BY);
                    }
                }
                this.state = 5364;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 821, this._ctx)) {
                    case 1:
                        {
                            this.state = 5361;
                            this.match(Cobol85Parser.SIZE);
                        }
                        break;
                    case 2:
                        {
                            this.state = 5362;
                            this.identifier();
                        }
                        break;
                    case 3:
                        {
                            this.state = 5363;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.stringForPhrase = function () {
        var _localctx = new StringForPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 940, Cobol85Parser.RULE_stringForPhrase);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5366;
                this.match(Cobol85Parser.FOR);
                this.state = 5369;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 822, this._ctx)) {
                    case 1:
                        {
                            this.state = 5367;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5368;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.stringIntoPhrase = function () {
        var _localctx = new StringIntoPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 942, Cobol85Parser.RULE_stringIntoPhrase);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5371;
                this.match(Cobol85Parser.INTO);
                this.state = 5372;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.stringWithPointerPhrase = function () {
        var _localctx = new StringWithPointerPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 944, Cobol85Parser.RULE_stringWithPointerPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5375;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 5374;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 5377;
                this.match(Cobol85Parser.POINTER);
                this.state = 5378;
                this.qualifiedDataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.subtractStatement = function () {
        var _localctx = new SubtractStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 946, Cobol85Parser.RULE_subtractStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5380;
                this.match(Cobol85Parser.SUBTRACT);
                this.state = 5384;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 824, this._ctx)) {
                    case 1:
                        {
                            this.state = 5381;
                            this.subtractFromStatement();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5382;
                            this.subtractFromGivingStatement();
                        }
                        break;
                    case 3:
                        {
                            this.state = 5383;
                            this.subtractCorrespondingStatement();
                        }
                        break;
                }
                this.state = 5387;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 825, this._ctx)) {
                    case 1:
                        {
                            this.state = 5386;
                            this.onSizeErrorPhrase();
                        }
                        break;
                }
                this.state = 5390;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 826, this._ctx)) {
                    case 1:
                        {
                            this.state = 5389;
                            this.notOnSizeErrorPhrase();
                        }
                        break;
                }
                this.state = 5393;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 827, this._ctx)) {
                    case 1:
                        {
                            this.state = 5392;
                            this.match(Cobol85Parser.END_SUBTRACT);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.subtractFromStatement = function () {
        var _localctx = new SubtractFromStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 948, Cobol85Parser.RULE_subtractFromStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5396;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5395;
                            this.subtractSubtrahend();
                        }
                    }
                    this.state = 5398;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
                this.state = 5400;
                this.match(Cobol85Parser.FROM);
                this.state = 5402;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5401;
                            this.subtractMinuend();
                        }
                    }
                    this.state = 5404;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.subtractFromGivingStatement = function () {
        var _localctx = new SubtractFromGivingStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 950, Cobol85Parser.RULE_subtractFromGivingStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5407;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5406;
                            this.subtractSubtrahend();
                        }
                    }
                    this.state = 5409;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
                this.state = 5411;
                this.match(Cobol85Parser.FROM);
                this.state = 5412;
                this.subtractMinuendGiving();
                this.state = 5413;
                this.match(Cobol85Parser.GIVING);
                this.state = 5415;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5414;
                            this.subtractGiving();
                        }
                    }
                    this.state = 5417;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.subtractCorrespondingStatement = function () {
        var _localctx = new SubtractCorrespondingStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 952, Cobol85Parser.RULE_subtractCorrespondingStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5419;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.CORR || _la === Cobol85Parser.CORRESPONDING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5420;
                this.qualifiedDataName();
                this.state = 5421;
                this.match(Cobol85Parser.FROM);
                this.state = 5422;
                this.subtractMinuendCorresponding();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.subtractSubtrahend = function () {
        var _localctx = new SubtractSubtrahendContext(this._ctx, this.state);
        this.enterRule(_localctx, 954, Cobol85Parser.RULE_subtractSubtrahend);
        try {
            this.state = 5426;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 832, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5424;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5425;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.subtractMinuend = function () {
        var _localctx = new SubtractMinuendContext(this._ctx, this.state);
        this.enterRule(_localctx, 956, Cobol85Parser.RULE_subtractMinuend);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5428;
                this.identifier();
                this.state = 5430;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ROUNDED) {
                    {
                        this.state = 5429;
                        this.match(Cobol85Parser.ROUNDED);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.subtractMinuendGiving = function () {
        var _localctx = new SubtractMinuendGivingContext(this._ctx, this.state);
        this.enterRule(_localctx, 958, Cobol85Parser.RULE_subtractMinuendGiving);
        try {
            this.state = 5434;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 834, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5432;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5433;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.subtractGiving = function () {
        var _localctx = new SubtractGivingContext(this._ctx, this.state);
        this.enterRule(_localctx, 960, Cobol85Parser.RULE_subtractGiving);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5436;
                this.identifier();
                this.state = 5438;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ROUNDED) {
                    {
                        this.state = 5437;
                        this.match(Cobol85Parser.ROUNDED);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.subtractMinuendCorresponding = function () {
        var _localctx = new SubtractMinuendCorrespondingContext(this._ctx, this.state);
        this.enterRule(_localctx, 962, Cobol85Parser.RULE_subtractMinuendCorresponding);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5440;
                this.qualifiedDataName();
                this.state = 5442;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ROUNDED) {
                    {
                        this.state = 5441;
                        this.match(Cobol85Parser.ROUNDED);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.terminateStatement = function () {
        var _localctx = new TerminateStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 964, Cobol85Parser.RULE_terminateStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5444;
                this.match(Cobol85Parser.TERMINATE);
                this.state = 5445;
                this.reportName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.unstringStatement = function () {
        var _localctx = new UnstringStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 966, Cobol85Parser.RULE_unstringStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5447;
                this.match(Cobol85Parser.UNSTRING);
                this.state = 5448;
                this.unstringSendingPhrase();
                this.state = 5449;
                this.unstringIntoPhrase();
                this.state = 5451;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 837, this._ctx)) {
                    case 1:
                        {
                            this.state = 5450;
                            this.unstringWithPointerPhrase();
                        }
                        break;
                }
                this.state = 5454;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.TALLYING) {
                    {
                        this.state = 5453;
                        this.unstringTallyingPhrase();
                    }
                }
                this.state = 5457;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 839, this._ctx)) {
                    case 1:
                        {
                            this.state = 5456;
                            this.onOverflowPhrase();
                        }
                        break;
                }
                this.state = 5460;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 840, this._ctx)) {
                    case 1:
                        {
                            this.state = 5459;
                            this.notOnOverflowPhrase();
                        }
                        break;
                }
                this.state = 5463;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 841, this._ctx)) {
                    case 1:
                        {
                            this.state = 5462;
                            this.match(Cobol85Parser.END_UNSTRING);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.unstringSendingPhrase = function () {
        var _localctx = new UnstringSendingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 968, Cobol85Parser.RULE_unstringSendingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5465;
                this.identifier();
                this.state = 5473;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DELIMITED) {
                    {
                        this.state = 5466;
                        this.unstringDelimitedByPhrase();
                        this.state = 5470;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Cobol85Parser.OR) {
                            {
                                {
                                    this.state = 5467;
                                    this.unstringOrAllPhrase();
                                }
                            }
                            this.state = 5472;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.unstringDelimitedByPhrase = function () {
        var _localctx = new UnstringDelimitedByPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 970, Cobol85Parser.RULE_unstringDelimitedByPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5475;
                this.match(Cobol85Parser.DELIMITED);
                this.state = 5477;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.BY) {
                    {
                        this.state = 5476;
                        this.match(Cobol85Parser.BY);
                    }
                }
                this.state = 5480;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 845, this._ctx)) {
                    case 1:
                        {
                            this.state = 5479;
                            this.match(Cobol85Parser.ALL);
                        }
                        break;
                }
                this.state = 5484;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 846, this._ctx)) {
                    case 1:
                        {
                            this.state = 5482;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5483;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.unstringOrAllPhrase = function () {
        var _localctx = new UnstringOrAllPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 972, Cobol85Parser.RULE_unstringOrAllPhrase);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5486;
                this.match(Cobol85Parser.OR);
                this.state = 5488;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 847, this._ctx)) {
                    case 1:
                        {
                            this.state = 5487;
                            this.match(Cobol85Parser.ALL);
                        }
                        break;
                }
                this.state = 5492;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 848, this._ctx)) {
                    case 1:
                        {
                            this.state = 5490;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5491;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.unstringIntoPhrase = function () {
        var _localctx = new UnstringIntoPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 974, Cobol85Parser.RULE_unstringIntoPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5494;
                this.match(Cobol85Parser.INTO);
                this.state = 5496;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5495;
                            this.unstringInto();
                        }
                    }
                    this.state = 5498;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.unstringInto = function () {
        var _localctx = new UnstringIntoContext(this._ctx, this.state);
        this.enterRule(_localctx, 976, Cobol85Parser.RULE_unstringInto);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5500;
                this.identifier();
                this.state = 5502;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.DELIMITER) {
                    {
                        this.state = 5501;
                        this.unstringDelimiterIn();
                    }
                }
                this.state = 5505;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.COUNT) {
                    {
                        this.state = 5504;
                        this.unstringCountIn();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.unstringDelimiterIn = function () {
        var _localctx = new UnstringDelimiterInContext(this._ctx, this.state);
        this.enterRule(_localctx, 978, Cobol85Parser.RULE_unstringDelimiterIn);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5507;
                this.match(Cobol85Parser.DELIMITER);
                this.state = 5509;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IN) {
                    {
                        this.state = 5508;
                        this.match(Cobol85Parser.IN);
                    }
                }
                this.state = 5511;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.unstringCountIn = function () {
        var _localctx = new UnstringCountInContext(this._ctx, this.state);
        this.enterRule(_localctx, 980, Cobol85Parser.RULE_unstringCountIn);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5513;
                this.match(Cobol85Parser.COUNT);
                this.state = 5515;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IN) {
                    {
                        this.state = 5514;
                        this.match(Cobol85Parser.IN);
                    }
                }
                this.state = 5517;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.unstringWithPointerPhrase = function () {
        var _localctx = new UnstringWithPointerPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 982, Cobol85Parser.RULE_unstringWithPointerPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5520;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.WITH) {
                    {
                        this.state = 5519;
                        this.match(Cobol85Parser.WITH);
                    }
                }
                this.state = 5522;
                this.match(Cobol85Parser.POINTER);
                this.state = 5523;
                this.qualifiedDataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.unstringTallyingPhrase = function () {
        var _localctx = new UnstringTallyingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 984, Cobol85Parser.RULE_unstringTallyingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5525;
                this.match(Cobol85Parser.TALLYING);
                this.state = 5527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IN) {
                    {
                        this.state = 5526;
                        this.match(Cobol85Parser.IN);
                    }
                }
                this.state = 5529;
                this.qualifiedDataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.useStatement = function () {
        var _localctx = new UseStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 986, Cobol85Parser.RULE_useStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5531;
                this.match(Cobol85Parser.USE);
                this.state = 5534;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.AFTER:
                    case Cobol85Parser.GLOBAL:
                        {
                            this.state = 5532;
                            this.useAfterClause();
                        }
                        break;
                    case Cobol85Parser.DEBUGGING:
                    case Cobol85Parser.FOR:
                        {
                            this.state = 5533;
                            this.useDebugClause();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.useAfterClause = function () {
        var _localctx = new UseAfterClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 988, Cobol85Parser.RULE_useAfterClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5537;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.GLOBAL) {
                    {
                        this.state = 5536;
                        this.match(Cobol85Parser.GLOBAL);
                    }
                }
                this.state = 5539;
                this.match(Cobol85Parser.AFTER);
                this.state = 5541;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.STANDARD) {
                    {
                        this.state = 5540;
                        this.match(Cobol85Parser.STANDARD);
                    }
                }
                this.state = 5543;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.ERROR || _la === Cobol85Parser.EXCEPTION)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5544;
                this.match(Cobol85Parser.PROCEDURE);
                this.state = 5546;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 5545;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 5548;
                this.useAfterOn();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.useAfterOn = function () {
        var _localctx = new UseAfterOnContext(this._ctx, this.state);
        this.enterRule(_localctx, 990, Cobol85Parser.RULE_useAfterOn);
        var _la;
        try {
            this.state = 5559;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.INPUT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5550;
                        this.match(Cobol85Parser.INPUT);
                    }
                    break;
                case Cobol85Parser.OUTPUT:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5551;
                        this.match(Cobol85Parser.OUTPUT);
                    }
                    break;
                case Cobol85Parser.I_O:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5552;
                        this.match(Cobol85Parser.I_O);
                    }
                    break;
                case Cobol85Parser.EXTEND:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5553;
                        this.match(Cobol85Parser.EXTEND);
                    }
                    break;
                case Cobol85Parser.ABORT:
                case Cobol85Parser.AS:
                case Cobol85Parser.ASCII:
                case Cobol85Parser.ASSOCIATED_DATA:
                case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                case Cobol85Parser.ATTRIBUTE:
                case Cobol85Parser.AUTO:
                case Cobol85Parser.AUTO_SKIP:
                case Cobol85Parser.BACKGROUND_COLOR:
                case Cobol85Parser.BACKGROUND_COLOUR:
                case Cobol85Parser.BEEP:
                case Cobol85Parser.BELL:
                case Cobol85Parser.BINARY:
                case Cobol85Parser.BIT:
                case Cobol85Parser.BLINK:
                case Cobol85Parser.BOUNDS:
                case Cobol85Parser.CAPABLE:
                case Cobol85Parser.CCSVERSION:
                case Cobol85Parser.CHANGED:
                case Cobol85Parser.CHANNEL:
                case Cobol85Parser.CLOSE_DISPOSITION:
                case Cobol85Parser.COBOL:
                case Cobol85Parser.COMMITMENT:
                case Cobol85Parser.CONTROL_POINT:
                case Cobol85Parser.CONVENTION:
                case Cobol85Parser.CRUNCH:
                case Cobol85Parser.CURSOR:
                case Cobol85Parser.DEFAULT:
                case Cobol85Parser.DEFAULT_DISPLAY:
                case Cobol85Parser.DEFINITION:
                case Cobol85Parser.DFHRESP:
                case Cobol85Parser.DFHVALUE:
                case Cobol85Parser.DISK:
                case Cobol85Parser.DONTCARE:
                case Cobol85Parser.DOUBLE:
                case Cobol85Parser.EBCDIC:
                case Cobol85Parser.EMPTY_CHECK:
                case Cobol85Parser.ENTER:
                case Cobol85Parser.ENTRY_PROCEDURE:
                case Cobol85Parser.ERASE:
                case Cobol85Parser.EOL:
                case Cobol85Parser.EOS:
                case Cobol85Parser.ESCAPE:
                case Cobol85Parser.EVENT:
                case Cobol85Parser.EXCLUSIVE:
                case Cobol85Parser.EXPORT:
                case Cobol85Parser.EXTENDED:
                case Cobol85Parser.FOREGROUND_COLOR:
                case Cobol85Parser.FOREGROUND_COLOUR:
                case Cobol85Parser.FULL:
                case Cobol85Parser.FUNCTIONNAME:
                case Cobol85Parser.FUNCTION_POINTER:
                case Cobol85Parser.GRID:
                case Cobol85Parser.HIGHLIGHT:
                case Cobol85Parser.IMPLICIT:
                case Cobol85Parser.IMPORT:
                case Cobol85Parser.INTEGER:
                case Cobol85Parser.KEPT:
                case Cobol85Parser.KEYBOARD:
                case Cobol85Parser.LANGUAGE:
                case Cobol85Parser.LB:
                case Cobol85Parser.LD:
                case Cobol85Parser.LEFTLINE:
                case Cobol85Parser.LENGTH_CHECK:
                case Cobol85Parser.LIBACCESS:
                case Cobol85Parser.LIBPARAMETER:
                case Cobol85Parser.LIBRARY:
                case Cobol85Parser.LIST:
                case Cobol85Parser.LOCAL:
                case Cobol85Parser.LONG_DATE:
                case Cobol85Parser.LONG_TIME:
                case Cobol85Parser.LOWER:
                case Cobol85Parser.LOWLIGHT:
                case Cobol85Parser.MMDDYYYY:
                case Cobol85Parser.NAMED:
                case Cobol85Parser.NATIONAL:
                case Cobol85Parser.NATIONAL_EDITED:
                case Cobol85Parser.NETWORK:
                case Cobol85Parser.NO_ECHO:
                case Cobol85Parser.NUMERIC_DATE:
                case Cobol85Parser.NUMERIC_TIME:
                case Cobol85Parser.ODT:
                case Cobol85Parser.ORDERLY:
                case Cobol85Parser.OVERLINE:
                case Cobol85Parser.OWN:
                case Cobol85Parser.PASSWORD:
                case Cobol85Parser.PORT:
                case Cobol85Parser.PRINTER:
                case Cobol85Parser.PRIVATE:
                case Cobol85Parser.PROCESS:
                case Cobol85Parser.PROGRAM:
                case Cobol85Parser.PROMPT:
                case Cobol85Parser.READER:
                case Cobol85Parser.REMOTE:
                case Cobol85Parser.REAL:
                case Cobol85Parser.RECEIVED:
                case Cobol85Parser.RECURSIVE:
                case Cobol85Parser.REF:
                case Cobol85Parser.REMOVE:
                case Cobol85Parser.REQUIRED:
                case Cobol85Parser.REVERSE_VIDEO:
                case Cobol85Parser.SAVE:
                case Cobol85Parser.SECURE:
                case Cobol85Parser.SHARED:
                case Cobol85Parser.SHAREDBYALL:
                case Cobol85Parser.SHAREDBYRUNUNIT:
                case Cobol85Parser.SHARING:
                case Cobol85Parser.SHORT_DATE:
                case Cobol85Parser.SYMBOL:
                case Cobol85Parser.TASK:
                case Cobol85Parser.THREAD:
                case Cobol85Parser.THREAD_LOCAL:
                case Cobol85Parser.TIMER:
                case Cobol85Parser.TODAYS_DATE:
                case Cobol85Parser.TODAYS_NAME:
                case Cobol85Parser.TRUNCATED:
                case Cobol85Parser.TYPEDEF:
                case Cobol85Parser.UNDERLINE:
                case Cobol85Parser.VIRTUAL:
                case Cobol85Parser.WAIT:
                case Cobol85Parser.YEAR:
                case Cobol85Parser.YYYYMMDD:
                case Cobol85Parser.YYYYDDD:
                case Cobol85Parser.ZERO_FILL:
                case Cobol85Parser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 5555;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 5554;
                                    this.fileName();
                                }
                            }
                            this.state = 5557;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.useDebugClause = function () {
        var _localctx = new UseDebugClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 992, Cobol85Parser.RULE_useDebugClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5562;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FOR) {
                    {
                        this.state = 5561;
                        this.match(Cobol85Parser.FOR);
                    }
                }
                this.state = 5564;
                this.match(Cobol85Parser.DEBUGGING);
                this.state = 5566;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 5565;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 5569;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5568;
                            this.useDebugOn();
                        }
                    }
                    this.state = 5571;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.useDebugOn = function () {
        var _localctx = new UseDebugOnContext(this._ctx, this.state);
        this.enterRule(_localctx, 994, Cobol85Parser.RULE_useDebugOn);
        var _la;
        try {
            this.state = 5585;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 867, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5573;
                        this.match(Cobol85Parser.ALL);
                        this.state = 5574;
                        this.match(Cobol85Parser.PROCEDURES);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5575;
                        this.match(Cobol85Parser.ALL);
                        this.state = 5577;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.REFERENCES) {
                            {
                                this.state = 5576;
                                this.match(Cobol85Parser.REFERENCES);
                            }
                        }
                        this.state = 5580;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.OF) {
                            {
                                this.state = 5579;
                                this.match(Cobol85Parser.OF);
                            }
                        }
                        this.state = 5582;
                        this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5583;
                        this.procedureName();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5584;
                        this.fileName();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.writeStatement = function () {
        var _localctx = new WriteStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 996, Cobol85Parser.RULE_writeStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5587;
                this.match(Cobol85Parser.WRITE);
                this.state = 5588;
                this.recordName();
                this.state = 5590;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.FROM) {
                    {
                        this.state = 5589;
                        this.writeFromPhrase();
                    }
                }
                this.state = 5593;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
                    {
                        this.state = 5592;
                        this.writeAdvancingPhrase();
                    }
                }
                this.state = 5596;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 870, this._ctx)) {
                    case 1:
                        {
                            this.state = 5595;
                            this.writeAtEndOfPagePhrase();
                        }
                        break;
                }
                this.state = 5599;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 871, this._ctx)) {
                    case 1:
                        {
                            this.state = 5598;
                            this.writeNotAtEndOfPagePhrase();
                        }
                        break;
                }
                this.state = 5602;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 872, this._ctx)) {
                    case 1:
                        {
                            this.state = 5601;
                            this.invalidKeyPhrase();
                        }
                        break;
                }
                this.state = 5605;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 873, this._ctx)) {
                    case 1:
                        {
                            this.state = 5604;
                            this.notInvalidKeyPhrase();
                        }
                        break;
                }
                this.state = 5608;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 874, this._ctx)) {
                    case 1:
                        {
                            this.state = 5607;
                            this.match(Cobol85Parser.END_WRITE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.writeFromPhrase = function () {
        var _localctx = new WriteFromPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 998, Cobol85Parser.RULE_writeFromPhrase);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5610;
                this.match(Cobol85Parser.FROM);
                this.state = 5613;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 875, this._ctx)) {
                    case 1:
                        {
                            this.state = 5611;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5612;
                            this.literal();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.writeAdvancingPhrase = function () {
        var _localctx = new WriteAdvancingPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1000, Cobol85Parser.RULE_writeAdvancingPhrase);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5615;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5617;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ADVANCING) {
                    {
                        this.state = 5616;
                        this.match(Cobol85Parser.ADVANCING);
                    }
                }
                this.state = 5622;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 877, this._ctx)) {
                    case 1:
                        {
                            this.state = 5619;
                            this.writeAdvancingPage();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5620;
                            this.writeAdvancingLines();
                        }
                        break;
                    case 3:
                        {
                            this.state = 5621;
                            this.writeAdvancingMnemonic();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.writeAdvancingPage = function () {
        var _localctx = new WriteAdvancingPageContext(this._ctx, this.state);
        this.enterRule(_localctx, 1002, Cobol85Parser.RULE_writeAdvancingPage);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5624;
                this.match(Cobol85Parser.PAGE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.writeAdvancingLines = function () {
        var _localctx = new WriteAdvancingLinesContext(this._ctx, this.state);
        this.enterRule(_localctx, 1004, Cobol85Parser.RULE_writeAdvancingLines);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5628;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 878, this._ctx)) {
                    case 1:
                        {
                            this.state = 5626;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5627;
                            this.literal();
                        }
                        break;
                }
                this.state = 5631;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES) {
                    {
                        this.state = 5630;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.writeAdvancingMnemonic = function () {
        var _localctx = new WriteAdvancingMnemonicContext(this._ctx, this.state);
        this.enterRule(_localctx, 1006, Cobol85Parser.RULE_writeAdvancingMnemonic);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5633;
                this.mnemonicName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.writeAtEndOfPagePhrase = function () {
        var _localctx = new WriteAtEndOfPagePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1008, Cobol85Parser.RULE_writeAtEndOfPagePhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5636;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AT) {
                    {
                        this.state = 5635;
                        this.match(Cobol85Parser.AT);
                    }
                }
                this.state = 5638;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.END_OF_PAGE || _la === Cobol85Parser.EOP)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5642;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 881, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5639;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5644;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 881, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.writeNotAtEndOfPagePhrase = function () {
        var _localctx = new WriteNotAtEndOfPagePhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1010, Cobol85Parser.RULE_writeNotAtEndOfPagePhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5645;
                this.match(Cobol85Parser.NOT);
                this.state = 5647;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AT) {
                    {
                        this.state = 5646;
                        this.match(Cobol85Parser.AT);
                    }
                }
                this.state = 5649;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.END_OF_PAGE || _la === Cobol85Parser.EOP)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5653;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 883, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5650;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5655;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 883, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.atEndPhrase = function () {
        var _localctx = new AtEndPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1012, Cobol85Parser.RULE_atEndPhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5657;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AT) {
                    {
                        this.state = 5656;
                        this.match(Cobol85Parser.AT);
                    }
                }
                this.state = 5659;
                this.match(Cobol85Parser.END);
                this.state = 5663;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 885, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5660;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5665;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 885, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.notAtEndPhrase = function () {
        var _localctx = new NotAtEndPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1014, Cobol85Parser.RULE_notAtEndPhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5666;
                this.match(Cobol85Parser.NOT);
                this.state = 5668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.AT) {
                    {
                        this.state = 5667;
                        this.match(Cobol85Parser.AT);
                    }
                }
                this.state = 5670;
                this.match(Cobol85Parser.END);
                this.state = 5674;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 887, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5671;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5676;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 887, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.invalidKeyPhrase = function () {
        var _localctx = new InvalidKeyPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1016, Cobol85Parser.RULE_invalidKeyPhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5677;
                this.match(Cobol85Parser.INVALID);
                this.state = 5679;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.KEY) {
                    {
                        this.state = 5678;
                        this.match(Cobol85Parser.KEY);
                    }
                }
                this.state = 5684;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 889, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5681;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5686;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 889, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.notInvalidKeyPhrase = function () {
        var _localctx = new NotInvalidKeyPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1018, Cobol85Parser.RULE_notInvalidKeyPhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5687;
                this.match(Cobol85Parser.NOT);
                this.state = 5688;
                this.match(Cobol85Parser.INVALID);
                this.state = 5690;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.KEY) {
                    {
                        this.state = 5689;
                        this.match(Cobol85Parser.KEY);
                    }
                }
                this.state = 5695;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 891, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5692;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5697;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 891, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.onOverflowPhrase = function () {
        var _localctx = new OnOverflowPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1020, Cobol85Parser.RULE_onOverflowPhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5699;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 5698;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 5701;
                this.match(Cobol85Parser.OVERFLOW);
                this.state = 5705;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 893, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5702;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5707;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 893, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.notOnOverflowPhrase = function () {
        var _localctx = new NotOnOverflowPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1022, Cobol85Parser.RULE_notOnOverflowPhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5708;
                this.match(Cobol85Parser.NOT);
                this.state = 5710;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 5709;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 5712;
                this.match(Cobol85Parser.OVERFLOW);
                this.state = 5716;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 895, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5713;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5718;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 895, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.onSizeErrorPhrase = function () {
        var _localctx = new OnSizeErrorPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1024, Cobol85Parser.RULE_onSizeErrorPhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5720;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 5719;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 5722;
                this.match(Cobol85Parser.SIZE);
                this.state = 5723;
                this.match(Cobol85Parser.ERROR);
                this.state = 5727;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 897, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5724;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5729;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 897, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.notOnSizeErrorPhrase = function () {
        var _localctx = new NotOnSizeErrorPhraseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1026, Cobol85Parser.RULE_notOnSizeErrorPhrase);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5730;
                this.match(Cobol85Parser.NOT);
                this.state = 5732;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 5731;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 5734;
                this.match(Cobol85Parser.SIZE);
                this.state = 5735;
                this.match(Cobol85Parser.ERROR);
                this.state = 5739;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 899, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5736;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5741;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 899, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.onExceptionClause = function () {
        var _localctx = new OnExceptionClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1028, Cobol85Parser.RULE_onExceptionClause);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5743;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 5742;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 5745;
                this.match(Cobol85Parser.EXCEPTION);
                this.state = 5749;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 901, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5746;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5751;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 901, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.notOnExceptionClause = function () {
        var _localctx = new NotOnExceptionClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1030, Cobol85Parser.RULE_notOnExceptionClause);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5752;
                this.match(Cobol85Parser.NOT);
                this.state = 5754;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ON) {
                    {
                        this.state = 5753;
                        this.match(Cobol85Parser.ON);
                    }
                }
                this.state = 5756;
                this.match(Cobol85Parser.EXCEPTION);
                this.state = 5760;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 903, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5757;
                                this.statement();
                            }
                        }
                    }
                    this.state = 5762;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 903, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.arithmeticExpression = function () {
        var _localctx = new ArithmeticExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1032, Cobol85Parser.RULE_arithmeticExpression);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5763;
                this.multDivs();
                this.state = 5767;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 904, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5764;
                                this.plusMinus();
                            }
                        }
                    }
                    this.state = 5769;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 904, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.plusMinus = function () {
        var _localctx = new PlusMinusContext(this._ctx, this.state);
        this.enterRule(_localctx, 1034, Cobol85Parser.RULE_plusMinus);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5770;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5771;
                this.multDivs();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.multDivs = function () {
        var _localctx = new MultDivsContext(this._ctx, this.state);
        this.enterRule(_localctx, 1036, Cobol85Parser.RULE_multDivs);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5773;
                this.powers();
                this.state = 5777;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.ASTERISKCHAR || _la === Cobol85Parser.SLASHCHAR) {
                    {
                        {
                            this.state = 5774;
                            this.multDiv();
                        }
                    }
                    this.state = 5779;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.multDiv = function () {
        var _localctx = new MultDivContext(this._ctx, this.state);
        this.enterRule(_localctx, 1038, Cobol85Parser.RULE_multDiv);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5780;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.ASTERISKCHAR || _la === Cobol85Parser.SLASHCHAR)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5781;
                this.powers();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.powers = function () {
        var _localctx = new PowersContext(this._ctx, this.state);
        this.enterRule(_localctx, 1040, Cobol85Parser.RULE_powers);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5784;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR) {
                    {
                        this.state = 5783;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 5786;
                this.basis();
                this.state = 5790;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.DOUBLEASTERISKCHAR) {
                    {
                        {
                            this.state = 5787;
                            this.power();
                        }
                    }
                    this.state = 5792;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.power = function () {
        var _localctx = new PowerContext(this._ctx, this.state);
        this.enterRule(_localctx, 1042, Cobol85Parser.RULE_power);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5793;
                this.match(Cobol85Parser.DOUBLEASTERISKCHAR);
                this.state = 5794;
                this.basis();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.basis = function () {
        var _localctx = new BasisContext(this._ctx, this.state);
        this.enterRule(_localctx, 1044, Cobol85Parser.RULE_basis);
        try {
            this.state = 5802;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 908, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5796;
                        this.match(Cobol85Parser.LPARENCHAR);
                        this.state = 5797;
                        this.arithmeticExpression();
                        this.state = 5798;
                        this.match(Cobol85Parser.RPARENCHAR);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5800;
                        this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5801;
                        this.literal();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.condition = function () {
        var _localctx = new ConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1046, Cobol85Parser.RULE_condition);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5804;
                this.combinableCondition();
                this.state = 5808;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Cobol85Parser.AND || _la === Cobol85Parser.OR) {
                    {
                        {
                            this.state = 5805;
                            this.andOrCondition();
                        }
                    }
                    this.state = 5810;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.andOrCondition = function () {
        var _localctx = new AndOrConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1048, Cobol85Parser.RULE_andOrCondition);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5811;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.AND || _la === Cobol85Parser.OR)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5818;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 911, this._ctx)) {
                    case 1:
                        {
                            this.state = 5812;
                            this.combinableCondition();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5814;
                            this._errHandler.sync(this);
                            _alt = 1;
                            do {
                                switch (_alt) {
                                    case 1:
                                        {
                                            {
                                                this.state = 5813;
                                                this.abbreviation();
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                                this.state = 5816;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 910, this._ctx);
                            } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.combinableCondition = function () {
        var _localctx = new CombinableConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1050, Cobol85Parser.RULE_combinableCondition);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5821;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.NOT) {
                    {
                        this.state = 5820;
                        this.match(Cobol85Parser.NOT);
                    }
                }
                this.state = 5823;
                this.simpleCondition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.simpleCondition = function () {
        var _localctx = new SimpleConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1052, Cobol85Parser.RULE_simpleCondition);
        try {
            this.state = 5832;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 913, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5825;
                        this.match(Cobol85Parser.LPARENCHAR);
                        this.state = 5826;
                        this.condition();
                        this.state = 5827;
                        this.match(Cobol85Parser.RPARENCHAR);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5829;
                        this.relationCondition();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5830;
                        this.classCondition();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5831;
                        this.conditionNameReference();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.classCondition = function () {
        var _localctx = new ClassConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1054, Cobol85Parser.RULE_classCondition);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5834;
                this.identifier();
                this.state = 5836;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 5835;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 5839;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.NOT) {
                    {
                        this.state = 5838;
                        this.match(Cobol85Parser.NOT);
                    }
                }
                this.state = 5848;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Cobol85Parser.NUMERIC:
                        {
                            this.state = 5841;
                            this.match(Cobol85Parser.NUMERIC);
                        }
                        break;
                    case Cobol85Parser.ALPHABETIC:
                        {
                            this.state = 5842;
                            this.match(Cobol85Parser.ALPHABETIC);
                        }
                        break;
                    case Cobol85Parser.ALPHABETIC_LOWER:
                        {
                            this.state = 5843;
                            this.match(Cobol85Parser.ALPHABETIC_LOWER);
                        }
                        break;
                    case Cobol85Parser.ALPHABETIC_UPPER:
                        {
                            this.state = 5844;
                            this.match(Cobol85Parser.ALPHABETIC_UPPER);
                        }
                        break;
                    case Cobol85Parser.DBCS:
                        {
                            this.state = 5845;
                            this.match(Cobol85Parser.DBCS);
                        }
                        break;
                    case Cobol85Parser.KANJI:
                        {
                            this.state = 5846;
                            this.match(Cobol85Parser.KANJI);
                        }
                        break;
                    case Cobol85Parser.ABORT:
                    case Cobol85Parser.AS:
                    case Cobol85Parser.ASCII:
                    case Cobol85Parser.ASSOCIATED_DATA:
                    case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                    case Cobol85Parser.ATTRIBUTE:
                    case Cobol85Parser.AUTO:
                    case Cobol85Parser.AUTO_SKIP:
                    case Cobol85Parser.BACKGROUND_COLOR:
                    case Cobol85Parser.BACKGROUND_COLOUR:
                    case Cobol85Parser.BEEP:
                    case Cobol85Parser.BELL:
                    case Cobol85Parser.BINARY:
                    case Cobol85Parser.BIT:
                    case Cobol85Parser.BLINK:
                    case Cobol85Parser.BOUNDS:
                    case Cobol85Parser.CAPABLE:
                    case Cobol85Parser.CCSVERSION:
                    case Cobol85Parser.CHANGED:
                    case Cobol85Parser.CHANNEL:
                    case Cobol85Parser.CLOSE_DISPOSITION:
                    case Cobol85Parser.COBOL:
                    case Cobol85Parser.COMMITMENT:
                    case Cobol85Parser.CONTROL_POINT:
                    case Cobol85Parser.CONVENTION:
                    case Cobol85Parser.CRUNCH:
                    case Cobol85Parser.CURSOR:
                    case Cobol85Parser.DEFAULT:
                    case Cobol85Parser.DEFAULT_DISPLAY:
                    case Cobol85Parser.DEFINITION:
                    case Cobol85Parser.DFHRESP:
                    case Cobol85Parser.DFHVALUE:
                    case Cobol85Parser.DISK:
                    case Cobol85Parser.DONTCARE:
                    case Cobol85Parser.DOUBLE:
                    case Cobol85Parser.EBCDIC:
                    case Cobol85Parser.EMPTY_CHECK:
                    case Cobol85Parser.ENTER:
                    case Cobol85Parser.ENTRY_PROCEDURE:
                    case Cobol85Parser.ERASE:
                    case Cobol85Parser.EOL:
                    case Cobol85Parser.EOS:
                    case Cobol85Parser.ESCAPE:
                    case Cobol85Parser.EVENT:
                    case Cobol85Parser.EXCLUSIVE:
                    case Cobol85Parser.EXPORT:
                    case Cobol85Parser.EXTENDED:
                    case Cobol85Parser.FOREGROUND_COLOR:
                    case Cobol85Parser.FOREGROUND_COLOUR:
                    case Cobol85Parser.FULL:
                    case Cobol85Parser.FUNCTIONNAME:
                    case Cobol85Parser.FUNCTION_POINTER:
                    case Cobol85Parser.GRID:
                    case Cobol85Parser.HIGHLIGHT:
                    case Cobol85Parser.IMPLICIT:
                    case Cobol85Parser.IMPORT:
                    case Cobol85Parser.INTEGER:
                    case Cobol85Parser.KEPT:
                    case Cobol85Parser.KEYBOARD:
                    case Cobol85Parser.LANGUAGE:
                    case Cobol85Parser.LB:
                    case Cobol85Parser.LD:
                    case Cobol85Parser.LEFTLINE:
                    case Cobol85Parser.LENGTH_CHECK:
                    case Cobol85Parser.LIBACCESS:
                    case Cobol85Parser.LIBPARAMETER:
                    case Cobol85Parser.LIBRARY:
                    case Cobol85Parser.LIST:
                    case Cobol85Parser.LOCAL:
                    case Cobol85Parser.LONG_DATE:
                    case Cobol85Parser.LONG_TIME:
                    case Cobol85Parser.LOWER:
                    case Cobol85Parser.LOWLIGHT:
                    case Cobol85Parser.MMDDYYYY:
                    case Cobol85Parser.NAMED:
                    case Cobol85Parser.NATIONAL:
                    case Cobol85Parser.NATIONAL_EDITED:
                    case Cobol85Parser.NETWORK:
                    case Cobol85Parser.NO_ECHO:
                    case Cobol85Parser.NUMERIC_DATE:
                    case Cobol85Parser.NUMERIC_TIME:
                    case Cobol85Parser.ODT:
                    case Cobol85Parser.ORDERLY:
                    case Cobol85Parser.OVERLINE:
                    case Cobol85Parser.OWN:
                    case Cobol85Parser.PASSWORD:
                    case Cobol85Parser.PORT:
                    case Cobol85Parser.PRINTER:
                    case Cobol85Parser.PRIVATE:
                    case Cobol85Parser.PROCESS:
                    case Cobol85Parser.PROGRAM:
                    case Cobol85Parser.PROMPT:
                    case Cobol85Parser.READER:
                    case Cobol85Parser.REMOTE:
                    case Cobol85Parser.REAL:
                    case Cobol85Parser.RECEIVED:
                    case Cobol85Parser.RECURSIVE:
                    case Cobol85Parser.REF:
                    case Cobol85Parser.REMOVE:
                    case Cobol85Parser.REQUIRED:
                    case Cobol85Parser.REVERSE_VIDEO:
                    case Cobol85Parser.SAVE:
                    case Cobol85Parser.SECURE:
                    case Cobol85Parser.SHARED:
                    case Cobol85Parser.SHAREDBYALL:
                    case Cobol85Parser.SHAREDBYRUNUNIT:
                    case Cobol85Parser.SHARING:
                    case Cobol85Parser.SHORT_DATE:
                    case Cobol85Parser.SYMBOL:
                    case Cobol85Parser.TASK:
                    case Cobol85Parser.THREAD:
                    case Cobol85Parser.THREAD_LOCAL:
                    case Cobol85Parser.TIMER:
                    case Cobol85Parser.TODAYS_DATE:
                    case Cobol85Parser.TODAYS_NAME:
                    case Cobol85Parser.TRUNCATED:
                    case Cobol85Parser.TYPEDEF:
                    case Cobol85Parser.UNDERLINE:
                    case Cobol85Parser.VIRTUAL:
                    case Cobol85Parser.WAIT:
                    case Cobol85Parser.YEAR:
                    case Cobol85Parser.YYYYMMDD:
                    case Cobol85Parser.YYYYDDD:
                    case Cobol85Parser.ZERO_FILL:
                    case Cobol85Parser.IDENTIFIER:
                        {
                            this.state = 5847;
                            this.className();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.conditionNameReference = function () {
        var _localctx = new ConditionNameReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 1056, Cobol85Parser.RULE_conditionNameReference);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5850;
                this.conditionName();
                this.state = 5872;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 921, this._ctx)) {
                    case 1:
                        {
                            this.state = 5854;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 917, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 5851;
                                            this.inData();
                                        }
                                    }
                                }
                                this.state = 5856;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 917, this._ctx);
                            }
                            this.state = 5858;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.IN || _la === Cobol85Parser.OF) {
                                {
                                    this.state = 5857;
                                    this.inFile();
                                }
                            }
                            this.state = 5863;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === Cobol85Parser.LPARENCHAR) {
                                {
                                    {
                                        this.state = 5860;
                                        this.conditionNameSubscriptReference();
                                    }
                                }
                                this.state = 5865;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 5869;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === Cobol85Parser.IN || _la === Cobol85Parser.OF) {
                                {
                                    {
                                        this.state = 5866;
                                        this.inMnemonic();
                                    }
                                }
                                this.state = 5871;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.conditionNameSubscriptReference = function () {
        var _localctx = new ConditionNameSubscriptReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 1058, Cobol85Parser.RULE_conditionNameSubscriptReference);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5874;
                this.match(Cobol85Parser.LPARENCHAR);
                this.state = 5875;
                this.subscript();
                this.state = 5882;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
                    {
                        {
                            this.state = 5877;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.COMMACHAR) {
                                {
                                    this.state = 5876;
                                    this.match(Cobol85Parser.COMMACHAR);
                                }
                            }
                            this.state = 5879;
                            this.subscript();
                        }
                    }
                    this.state = 5884;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 5885;
                this.match(Cobol85Parser.RPARENCHAR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.relationCondition = function () {
        var _localctx = new RelationConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1060, Cobol85Parser.RULE_relationCondition);
        try {
            this.state = 5890;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 924, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5887;
                        this.relationSignCondition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5888;
                        this.relationArithmeticComparison();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5889;
                        this.relationCombinedComparison();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.relationSignCondition = function () {
        var _localctx = new RelationSignConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1062, Cobol85Parser.RULE_relationSignCondition);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5892;
                this.arithmeticExpression();
                this.state = 5894;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.IS) {
                    {
                        this.state = 5893;
                        this.match(Cobol85Parser.IS);
                    }
                }
                this.state = 5897;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.NOT) {
                    {
                        this.state = 5896;
                        this.match(Cobol85Parser.NOT);
                    }
                }
                this.state = 5899;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.NEGATIVE || _la === Cobol85Parser.POSITIVE || _la === Cobol85Parser.ZERO)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.relationArithmeticComparison = function () {
        var _localctx = new RelationArithmeticComparisonContext(this._ctx, this.state);
        this.enterRule(_localctx, 1064, Cobol85Parser.RULE_relationArithmeticComparison);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5901;
                this.arithmeticExpression();
                this.state = 5902;
                this.relationalOperator();
                this.state = 5903;
                this.arithmeticExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.relationCombinedComparison = function () {
        var _localctx = new RelationCombinedComparisonContext(this._ctx, this.state);
        this.enterRule(_localctx, 1066, Cobol85Parser.RULE_relationCombinedComparison);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5905;
                this.arithmeticExpression();
                this.state = 5906;
                this.relationalOperator();
                this.state = 5907;
                this.match(Cobol85Parser.LPARENCHAR);
                this.state = 5908;
                this.relationCombinedCondition();
                this.state = 5909;
                this.match(Cobol85Parser.RPARENCHAR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.relationCombinedCondition = function () {
        var _localctx = new RelationCombinedConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1068, Cobol85Parser.RULE_relationCombinedCondition);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5911;
                this.arithmeticExpression();
                this.state = 5914;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 5912;
                            _la = this._input.LA(1);
                            if (!(_la === Cobol85Parser.AND || _la === Cobol85Parser.OR)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 5913;
                            this.arithmeticExpression();
                        }
                    }
                    this.state = 5916;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === Cobol85Parser.AND || _la === Cobol85Parser.OR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.relationalOperator = function () {
        var _localctx = new RelationalOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 1070, Cobol85Parser.RULE_relationalOperator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5919;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ARE || _la === Cobol85Parser.IS) {
                    {
                        this.state = 5918;
                        _la = this._input.LA(1);
                        if (!(_la === Cobol85Parser.ARE || _la === Cobol85Parser.IS)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 5962;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 938, this._ctx)) {
                    case 1:
                        {
                            this.state = 5922;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.NOT) {
                                {
                                    this.state = 5921;
                                    this.match(Cobol85Parser.NOT);
                                }
                            }
                            this.state = 5939;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case Cobol85Parser.GREATER:
                                    {
                                        this.state = 5924;
                                        this.match(Cobol85Parser.GREATER);
                                        this.state = 5926;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === Cobol85Parser.THAN) {
                                            {
                                                this.state = 5925;
                                                this.match(Cobol85Parser.THAN);
                                            }
                                        }
                                    }
                                    break;
                                case Cobol85Parser.MORETHANCHAR:
                                    {
                                        this.state = 5928;
                                        this.match(Cobol85Parser.MORETHANCHAR);
                                    }
                                    break;
                                case Cobol85Parser.LESS:
                                    {
                                        this.state = 5929;
                                        this.match(Cobol85Parser.LESS);
                                        this.state = 5931;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === Cobol85Parser.THAN) {
                                            {
                                                this.state = 5930;
                                                this.match(Cobol85Parser.THAN);
                                            }
                                        }
                                    }
                                    break;
                                case Cobol85Parser.LESSTHANCHAR:
                                    {
                                        this.state = 5933;
                                        this.match(Cobol85Parser.LESSTHANCHAR);
                                    }
                                    break;
                                case Cobol85Parser.EQUAL:
                                    {
                                        this.state = 5934;
                                        this.match(Cobol85Parser.EQUAL);
                                        this.state = 5936;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === Cobol85Parser.TO) {
                                            {
                                                this.state = 5935;
                                                this.match(Cobol85Parser.TO);
                                            }
                                        }
                                    }
                                    break;
                                case Cobol85Parser.EQUALCHAR:
                                    {
                                        this.state = 5938;
                                        this.match(Cobol85Parser.EQUALCHAR);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 5941;
                            this.match(Cobol85Parser.NOTEQUALCHAR);
                        }
                        break;
                    case 3:
                        {
                            this.state = 5942;
                            this.match(Cobol85Parser.GREATER);
                            this.state = 5944;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.THAN) {
                                {
                                    this.state = 5943;
                                    this.match(Cobol85Parser.THAN);
                                }
                            }
                            this.state = 5946;
                            this.match(Cobol85Parser.OR);
                            this.state = 5947;
                            this.match(Cobol85Parser.EQUAL);
                            this.state = 5949;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.TO) {
                                {
                                    this.state = 5948;
                                    this.match(Cobol85Parser.TO);
                                }
                            }
                        }
                        break;
                    case 4:
                        {
                            this.state = 5951;
                            this.match(Cobol85Parser.MORETHANOREQUAL);
                        }
                        break;
                    case 5:
                        {
                            this.state = 5952;
                            this.match(Cobol85Parser.LESS);
                            this.state = 5954;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.THAN) {
                                {
                                    this.state = 5953;
                                    this.match(Cobol85Parser.THAN);
                                }
                            }
                            this.state = 5956;
                            this.match(Cobol85Parser.OR);
                            this.state = 5957;
                            this.match(Cobol85Parser.EQUAL);
                            this.state = 5959;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Cobol85Parser.TO) {
                                {
                                    this.state = 5958;
                                    this.match(Cobol85Parser.TO);
                                }
                            }
                        }
                        break;
                    case 6:
                        {
                            this.state = 5961;
                            this.match(Cobol85Parser.LESSTHANOREQUAL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.abbreviation = function () {
        var _localctx = new AbbreviationContext(this._ctx, this.state);
        this.enterRule(_localctx, 1072, Cobol85Parser.RULE_abbreviation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5965;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 939, this._ctx)) {
                    case 1:
                        {
                            this.state = 5964;
                            this.match(Cobol85Parser.NOT);
                        }
                        break;
                }
                this.state = 5968;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Cobol85Parser.ARE || _la === Cobol85Parser.EQUAL || _la === Cobol85Parser.GREATER || _la === Cobol85Parser.IS || _la === Cobol85Parser.LESS || _la === Cobol85Parser.NOT || ((((_la - 536)) & ~0x1F) === 0 && ((1 << (_la - 536)) & ((1 << (Cobol85Parser.EQUALCHAR - 536)) | (1 << (Cobol85Parser.LESSTHANCHAR - 536)) | (1 << (Cobol85Parser.LESSTHANOREQUAL - 536)) | (1 << (Cobol85Parser.MORETHANCHAR - 536)) | (1 << (Cobol85Parser.MORETHANOREQUAL - 536)) | (1 << (Cobol85Parser.NOTEQUALCHAR - 536)))) !== 0)) {
                    {
                        this.state = 5967;
                        this.relationalOperator();
                    }
                }
                this.state = 5976;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 941, this._ctx)) {
                    case 1:
                        {
                            this.state = 5970;
                            this.arithmeticExpression();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5971;
                            this.match(Cobol85Parser.LPARENCHAR);
                            this.state = 5972;
                            this.arithmeticExpression();
                            this.state = 5973;
                            this.abbreviation();
                            this.state = 5974;
                            this.match(Cobol85Parser.RPARENCHAR);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.identifier = function () {
        var _localctx = new IdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1074, Cobol85Parser.RULE_identifier);
        try {
            this.state = 5982;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 942, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5978;
                        this.qualifiedDataName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5979;
                        this.tableCall();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5980;
                        this.functionCall();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5981;
                        this.specialRegister();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.tableCall = function () {
        var _localctx = new TableCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 1076, Cobol85Parser.RULE_tableCall);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5984;
                this.qualifiedDataName();
                this.state = 6000;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 945, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 5985;
                                this.match(Cobol85Parser.LPARENCHAR);
                                this.state = 5986;
                                this.subscript();
                                this.state = 5993;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
                                    {
                                        {
                                            this.state = 5988;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === Cobol85Parser.COMMACHAR) {
                                                {
                                                    this.state = 5987;
                                                    this.match(Cobol85Parser.COMMACHAR);
                                                }
                                            }
                                            this.state = 5990;
                                            this.subscript();
                                        }
                                    }
                                    this.state = 5995;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 5996;
                                this.match(Cobol85Parser.RPARENCHAR);
                            }
                        }
                    }
                    this.state = 6002;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 945, this._ctx);
                }
                this.state = 6004;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 946, this._ctx)) {
                    case 1:
                        {
                            this.state = 6003;
                            this.referenceModifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.functionCall = function () {
        var _localctx = new FunctionCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 1078, Cobol85Parser.RULE_functionCall);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6006;
                this.match(Cobol85Parser.FUNCTION);
                this.state = 6007;
                this.functionName();
                this.state = 6023;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 949, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 6008;
                                this.match(Cobol85Parser.LPARENCHAR);
                                this.state = 6009;
                                this.argument();
                                this.state = 6016;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
                                    {
                                        {
                                            this.state = 6011;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === Cobol85Parser.COMMACHAR) {
                                                {
                                                    this.state = 6010;
                                                    this.match(Cobol85Parser.COMMACHAR);
                                                }
                                            }
                                            this.state = 6013;
                                            this.argument();
                                        }
                                    }
                                    this.state = 6018;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 6019;
                                this.match(Cobol85Parser.RPARENCHAR);
                            }
                        }
                    }
                    this.state = 6025;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 949, this._ctx);
                }
                this.state = 6027;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 950, this._ctx)) {
                    case 1:
                        {
                            this.state = 6026;
                            this.referenceModifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.referenceModifier = function () {
        var _localctx = new ReferenceModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1080, Cobol85Parser.RULE_referenceModifier);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6029;
                this.match(Cobol85Parser.LPARENCHAR);
                this.state = 6030;
                this.characterPosition();
                this.state = 6031;
                this.match(Cobol85Parser.COLONCHAR);
                this.state = 6033;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
                    {
                        this.state = 6032;
                        this.length();
                    }
                }
                this.state = 6035;
                this.match(Cobol85Parser.RPARENCHAR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.characterPosition = function () {
        var _localctx = new CharacterPositionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1082, Cobol85Parser.RULE_characterPosition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6037;
                this.arithmeticExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.length = function () {
        var _localctx = new LengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 1084, Cobol85Parser.RULE_length);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6039;
                this.arithmeticExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.subscript = function () {
        var _localctx = new SubscriptContext(this._ctx, this.state);
        this.enterRule(_localctx, 1086, Cobol85Parser.RULE_subscript);
        try {
            this.state = 6052;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 954, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6041;
                        this.match(Cobol85Parser.ALL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6042;
                        this.integerLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6043;
                        this.qualifiedDataName();
                        this.state = 6045;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 952, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6044;
                                    this.integerLiteral();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6047;
                        this.indexName();
                        this.state = 6049;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 953, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6048;
                                    this.integerLiteral();
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6051;
                        this.arithmeticExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.argument = function () {
        var _localctx = new ArgumentContext(this._ctx, this.state);
        this.enterRule(_localctx, 1088, Cobol85Parser.RULE_argument);
        try {
            this.state = 6065;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 957, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6054;
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6055;
                        this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6056;
                        this.qualifiedDataName();
                        this.state = 6058;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 955, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6057;
                                    this.integerLiteral();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6060;
                        this.indexName();
                        this.state = 6062;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 956, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6061;
                                    this.integerLiteral();
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6064;
                        this.arithmeticExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.qualifiedDataName = function () {
        var _localctx = new QualifiedDataNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1090, Cobol85Parser.RULE_qualifiedDataName);
        try {
            this.state = 6071;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 958, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6067;
                        this.qualifiedDataNameFormat1();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6068;
                        this.qualifiedDataNameFormat2();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6069;
                        this.qualifiedDataNameFormat3();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6070;
                        this.qualifiedDataNameFormat4();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.qualifiedDataNameFormat1 = function () {
        var _localctx = new QualifiedDataNameFormat1Context(this._ctx, this.state);
        this.enterRule(_localctx, 1092, Cobol85Parser.RULE_qualifiedDataNameFormat1);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6075;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 959, this._ctx)) {
                    case 1:
                        {
                            this.state = 6073;
                            this.dataName();
                        }
                        break;
                    case 2:
                        {
                            this.state = 6074;
                            this.conditionName();
                        }
                        break;
                }
                this.state = 6086;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 962, this._ctx)) {
                    case 1:
                        {
                            this.state = 6078;
                            this._errHandler.sync(this);
                            _alt = 1;
                            do {
                                switch (_alt) {
                                    case 1:
                                        {
                                            {
                                                this.state = 6077;
                                                this.qualifiedInData();
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                                this.state = 6080;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 960, this._ctx);
                            } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                            this.state = 6083;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 961, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 6082;
                                        this.inFile();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 6085;
                            this.inFile();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.qualifiedDataNameFormat2 = function () {
        var _localctx = new QualifiedDataNameFormat2Context(this._ctx, this.state);
        this.enterRule(_localctx, 1094, Cobol85Parser.RULE_qualifiedDataNameFormat2);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6088;
                this.paragraphName();
                this.state = 6089;
                this.inSection();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.qualifiedDataNameFormat3 = function () {
        var _localctx = new QualifiedDataNameFormat3Context(this._ctx, this.state);
        this.enterRule(_localctx, 1096, Cobol85Parser.RULE_qualifiedDataNameFormat3);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6091;
                this.textName();
                this.state = 6092;
                this.inLibrary();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.qualifiedDataNameFormat4 = function () {
        var _localctx = new QualifiedDataNameFormat4Context(this._ctx, this.state);
        this.enterRule(_localctx, 1098, Cobol85Parser.RULE_qualifiedDataNameFormat4);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6094;
                this.match(Cobol85Parser.LINAGE_COUNTER);
                this.state = 6095;
                this.inFile();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.qualifiedInData = function () {
        var _localctx = new QualifiedInDataContext(this._ctx, this.state);
        this.enterRule(_localctx, 1100, Cobol85Parser.RULE_qualifiedInData);
        try {
            this.state = 6099;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 963, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6097;
                        this.inData();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6098;
                        this.inTable();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inData = function () {
        var _localctx = new InDataContext(this._ctx, this.state);
        this.enterRule(_localctx, 1102, Cobol85Parser.RULE_inData);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6101;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6102;
                this.dataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inFile = function () {
        var _localctx = new InFileContext(this._ctx, this.state);
        this.enterRule(_localctx, 1104, Cobol85Parser.RULE_inFile);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6104;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6105;
                this.fileName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inMnemonic = function () {
        var _localctx = new InMnemonicContext(this._ctx, this.state);
        this.enterRule(_localctx, 1106, Cobol85Parser.RULE_inMnemonic);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6107;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6108;
                this.mnemonicName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inSection = function () {
        var _localctx = new InSectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1108, Cobol85Parser.RULE_inSection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6110;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6111;
                this.sectionName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inLibrary = function () {
        var _localctx = new InLibraryContext(this._ctx, this.state);
        this.enterRule(_localctx, 1110, Cobol85Parser.RULE_inLibrary);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6113;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6114;
                this.libraryName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.inTable = function () {
        var _localctx = new InTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 1112, Cobol85Parser.RULE_inTable);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6116;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6117;
                this.tableCall();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.alphabetName = function () {
        var _localctx = new AlphabetNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1114, Cobol85Parser.RULE_alphabetName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6119;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.assignmentName = function () {
        var _localctx = new AssignmentNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1116, Cobol85Parser.RULE_assignmentName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6121;
                this.systemName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.basisName = function () {
        var _localctx = new BasisNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1118, Cobol85Parser.RULE_basisName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6123;
                this.programName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.cdName = function () {
        var _localctx = new CdNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1120, Cobol85Parser.RULE_cdName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6125;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.className = function () {
        var _localctx = new ClassNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1122, Cobol85Parser.RULE_className);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6127;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.computerName = function () {
        var _localctx = new ComputerNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1124, Cobol85Parser.RULE_computerName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6129;
                this.systemName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.conditionName = function () {
        var _localctx = new ConditionNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1126, Cobol85Parser.RULE_conditionName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6131;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataName = function () {
        var _localctx = new DataNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1128, Cobol85Parser.RULE_dataName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6133;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.dataDescName = function () {
        var _localctx = new DataDescNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1130, Cobol85Parser.RULE_dataDescName);
        try {
            this.state = 6138;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 964, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6135;
                        this.match(Cobol85Parser.FILLER);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6136;
                        this.match(Cobol85Parser.CURSOR);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6137;
                        this.dataName();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.environmentName = function () {
        var _localctx = new EnvironmentNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1132, Cobol85Parser.RULE_environmentName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6140;
                this.systemName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.fileName = function () {
        var _localctx = new FileNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1134, Cobol85Parser.RULE_fileName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6142;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.functionName = function () {
        var _localctx = new FunctionNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1136, Cobol85Parser.RULE_functionName);
        try {
            this.state = 6150;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 965, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6144;
                        this.match(Cobol85Parser.INTEGER);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6145;
                        this.match(Cobol85Parser.LENGTH);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6146;
                        this.match(Cobol85Parser.RANDOM);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6147;
                        this.match(Cobol85Parser.SUM);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6148;
                        this.match(Cobol85Parser.WHEN_COMPILED);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 6149;
                        this.cobolWord();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.indexName = function () {
        var _localctx = new IndexNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1138, Cobol85Parser.RULE_indexName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6152;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.languageName = function () {
        var _localctx = new LanguageNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1140, Cobol85Parser.RULE_languageName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6154;
                this.systemName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.libraryName = function () {
        var _localctx = new LibraryNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1142, Cobol85Parser.RULE_libraryName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6156;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.localName = function () {
        var _localctx = new LocalNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1144, Cobol85Parser.RULE_localName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6158;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.mnemonicName = function () {
        var _localctx = new MnemonicNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1146, Cobol85Parser.RULE_mnemonicName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6160;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.paragraphName = function () {
        var _localctx = new ParagraphNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1148, Cobol85Parser.RULE_paragraphName);
        try {
            this.state = 6164;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.ABORT:
                case Cobol85Parser.AS:
                case Cobol85Parser.ASCII:
                case Cobol85Parser.ASSOCIATED_DATA:
                case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                case Cobol85Parser.ATTRIBUTE:
                case Cobol85Parser.AUTO:
                case Cobol85Parser.AUTO_SKIP:
                case Cobol85Parser.BACKGROUND_COLOR:
                case Cobol85Parser.BACKGROUND_COLOUR:
                case Cobol85Parser.BEEP:
                case Cobol85Parser.BELL:
                case Cobol85Parser.BINARY:
                case Cobol85Parser.BIT:
                case Cobol85Parser.BLINK:
                case Cobol85Parser.BOUNDS:
                case Cobol85Parser.CAPABLE:
                case Cobol85Parser.CCSVERSION:
                case Cobol85Parser.CHANGED:
                case Cobol85Parser.CHANNEL:
                case Cobol85Parser.CLOSE_DISPOSITION:
                case Cobol85Parser.COBOL:
                case Cobol85Parser.COMMITMENT:
                case Cobol85Parser.CONTROL_POINT:
                case Cobol85Parser.CONVENTION:
                case Cobol85Parser.CRUNCH:
                case Cobol85Parser.CURSOR:
                case Cobol85Parser.DEFAULT:
                case Cobol85Parser.DEFAULT_DISPLAY:
                case Cobol85Parser.DEFINITION:
                case Cobol85Parser.DFHRESP:
                case Cobol85Parser.DFHVALUE:
                case Cobol85Parser.DISK:
                case Cobol85Parser.DONTCARE:
                case Cobol85Parser.DOUBLE:
                case Cobol85Parser.EBCDIC:
                case Cobol85Parser.EMPTY_CHECK:
                case Cobol85Parser.ENTER:
                case Cobol85Parser.ENTRY_PROCEDURE:
                case Cobol85Parser.ERASE:
                case Cobol85Parser.EOL:
                case Cobol85Parser.EOS:
                case Cobol85Parser.ESCAPE:
                case Cobol85Parser.EVENT:
                case Cobol85Parser.EXCLUSIVE:
                case Cobol85Parser.EXPORT:
                case Cobol85Parser.EXTENDED:
                case Cobol85Parser.FOREGROUND_COLOR:
                case Cobol85Parser.FOREGROUND_COLOUR:
                case Cobol85Parser.FULL:
                case Cobol85Parser.FUNCTIONNAME:
                case Cobol85Parser.FUNCTION_POINTER:
                case Cobol85Parser.GRID:
                case Cobol85Parser.HIGHLIGHT:
                case Cobol85Parser.IMPLICIT:
                case Cobol85Parser.IMPORT:
                case Cobol85Parser.INTEGER:
                case Cobol85Parser.KEPT:
                case Cobol85Parser.KEYBOARD:
                case Cobol85Parser.LANGUAGE:
                case Cobol85Parser.LB:
                case Cobol85Parser.LD:
                case Cobol85Parser.LEFTLINE:
                case Cobol85Parser.LENGTH_CHECK:
                case Cobol85Parser.LIBACCESS:
                case Cobol85Parser.LIBPARAMETER:
                case Cobol85Parser.LIBRARY:
                case Cobol85Parser.LIST:
                case Cobol85Parser.LOCAL:
                case Cobol85Parser.LONG_DATE:
                case Cobol85Parser.LONG_TIME:
                case Cobol85Parser.LOWER:
                case Cobol85Parser.LOWLIGHT:
                case Cobol85Parser.MMDDYYYY:
                case Cobol85Parser.NAMED:
                case Cobol85Parser.NATIONAL:
                case Cobol85Parser.NATIONAL_EDITED:
                case Cobol85Parser.NETWORK:
                case Cobol85Parser.NO_ECHO:
                case Cobol85Parser.NUMERIC_DATE:
                case Cobol85Parser.NUMERIC_TIME:
                case Cobol85Parser.ODT:
                case Cobol85Parser.ORDERLY:
                case Cobol85Parser.OVERLINE:
                case Cobol85Parser.OWN:
                case Cobol85Parser.PASSWORD:
                case Cobol85Parser.PORT:
                case Cobol85Parser.PRINTER:
                case Cobol85Parser.PRIVATE:
                case Cobol85Parser.PROCESS:
                case Cobol85Parser.PROGRAM:
                case Cobol85Parser.PROMPT:
                case Cobol85Parser.READER:
                case Cobol85Parser.REMOTE:
                case Cobol85Parser.REAL:
                case Cobol85Parser.RECEIVED:
                case Cobol85Parser.RECURSIVE:
                case Cobol85Parser.REF:
                case Cobol85Parser.REMOVE:
                case Cobol85Parser.REQUIRED:
                case Cobol85Parser.REVERSE_VIDEO:
                case Cobol85Parser.SAVE:
                case Cobol85Parser.SECURE:
                case Cobol85Parser.SHARED:
                case Cobol85Parser.SHAREDBYALL:
                case Cobol85Parser.SHAREDBYRUNUNIT:
                case Cobol85Parser.SHARING:
                case Cobol85Parser.SHORT_DATE:
                case Cobol85Parser.SYMBOL:
                case Cobol85Parser.TASK:
                case Cobol85Parser.THREAD:
                case Cobol85Parser.THREAD_LOCAL:
                case Cobol85Parser.TIMER:
                case Cobol85Parser.TODAYS_DATE:
                case Cobol85Parser.TODAYS_NAME:
                case Cobol85Parser.TRUNCATED:
                case Cobol85Parser.TYPEDEF:
                case Cobol85Parser.UNDERLINE:
                case Cobol85Parser.VIRTUAL:
                case Cobol85Parser.WAIT:
                case Cobol85Parser.YEAR:
                case Cobol85Parser.YYYYMMDD:
                case Cobol85Parser.YYYYDDD:
                case Cobol85Parser.ZERO_FILL:
                case Cobol85Parser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6162;
                        this.cobolWord();
                    }
                    break;
                case Cobol85Parser.LEVEL_NUMBER_66:
                case Cobol85Parser.LEVEL_NUMBER_77:
                case Cobol85Parser.LEVEL_NUMBER_88:
                case Cobol85Parser.INTEGERLITERAL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6163;
                        this.integerLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.procedureName = function () {
        var _localctx = new ProcedureNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1150, Cobol85Parser.RULE_procedureName);
        var _la;
        try {
            this.state = 6171;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 968, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6166;
                        this.paragraphName();
                        this.state = 6168;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.IN || _la === Cobol85Parser.OF) {
                            {
                                this.state = 6167;
                                this.inSection();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6170;
                        this.sectionName();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.programName = function () {
        var _localctx = new ProgramNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1152, Cobol85Parser.RULE_programName);
        try {
            this.state = 6175;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.NONNUMERICLITERAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6173;
                        this.match(Cobol85Parser.NONNUMERICLITERAL);
                    }
                    break;
                case Cobol85Parser.ABORT:
                case Cobol85Parser.AS:
                case Cobol85Parser.ASCII:
                case Cobol85Parser.ASSOCIATED_DATA:
                case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                case Cobol85Parser.ATTRIBUTE:
                case Cobol85Parser.AUTO:
                case Cobol85Parser.AUTO_SKIP:
                case Cobol85Parser.BACKGROUND_COLOR:
                case Cobol85Parser.BACKGROUND_COLOUR:
                case Cobol85Parser.BEEP:
                case Cobol85Parser.BELL:
                case Cobol85Parser.BINARY:
                case Cobol85Parser.BIT:
                case Cobol85Parser.BLINK:
                case Cobol85Parser.BOUNDS:
                case Cobol85Parser.CAPABLE:
                case Cobol85Parser.CCSVERSION:
                case Cobol85Parser.CHANGED:
                case Cobol85Parser.CHANNEL:
                case Cobol85Parser.CLOSE_DISPOSITION:
                case Cobol85Parser.COBOL:
                case Cobol85Parser.COMMITMENT:
                case Cobol85Parser.CONTROL_POINT:
                case Cobol85Parser.CONVENTION:
                case Cobol85Parser.CRUNCH:
                case Cobol85Parser.CURSOR:
                case Cobol85Parser.DEFAULT:
                case Cobol85Parser.DEFAULT_DISPLAY:
                case Cobol85Parser.DEFINITION:
                case Cobol85Parser.DFHRESP:
                case Cobol85Parser.DFHVALUE:
                case Cobol85Parser.DISK:
                case Cobol85Parser.DONTCARE:
                case Cobol85Parser.DOUBLE:
                case Cobol85Parser.EBCDIC:
                case Cobol85Parser.EMPTY_CHECK:
                case Cobol85Parser.ENTER:
                case Cobol85Parser.ENTRY_PROCEDURE:
                case Cobol85Parser.ERASE:
                case Cobol85Parser.EOL:
                case Cobol85Parser.EOS:
                case Cobol85Parser.ESCAPE:
                case Cobol85Parser.EVENT:
                case Cobol85Parser.EXCLUSIVE:
                case Cobol85Parser.EXPORT:
                case Cobol85Parser.EXTENDED:
                case Cobol85Parser.FOREGROUND_COLOR:
                case Cobol85Parser.FOREGROUND_COLOUR:
                case Cobol85Parser.FULL:
                case Cobol85Parser.FUNCTIONNAME:
                case Cobol85Parser.FUNCTION_POINTER:
                case Cobol85Parser.GRID:
                case Cobol85Parser.HIGHLIGHT:
                case Cobol85Parser.IMPLICIT:
                case Cobol85Parser.IMPORT:
                case Cobol85Parser.INTEGER:
                case Cobol85Parser.KEPT:
                case Cobol85Parser.KEYBOARD:
                case Cobol85Parser.LANGUAGE:
                case Cobol85Parser.LB:
                case Cobol85Parser.LD:
                case Cobol85Parser.LEFTLINE:
                case Cobol85Parser.LENGTH_CHECK:
                case Cobol85Parser.LIBACCESS:
                case Cobol85Parser.LIBPARAMETER:
                case Cobol85Parser.LIBRARY:
                case Cobol85Parser.LIST:
                case Cobol85Parser.LOCAL:
                case Cobol85Parser.LONG_DATE:
                case Cobol85Parser.LONG_TIME:
                case Cobol85Parser.LOWER:
                case Cobol85Parser.LOWLIGHT:
                case Cobol85Parser.MMDDYYYY:
                case Cobol85Parser.NAMED:
                case Cobol85Parser.NATIONAL:
                case Cobol85Parser.NATIONAL_EDITED:
                case Cobol85Parser.NETWORK:
                case Cobol85Parser.NO_ECHO:
                case Cobol85Parser.NUMERIC_DATE:
                case Cobol85Parser.NUMERIC_TIME:
                case Cobol85Parser.ODT:
                case Cobol85Parser.ORDERLY:
                case Cobol85Parser.OVERLINE:
                case Cobol85Parser.OWN:
                case Cobol85Parser.PASSWORD:
                case Cobol85Parser.PORT:
                case Cobol85Parser.PRINTER:
                case Cobol85Parser.PRIVATE:
                case Cobol85Parser.PROCESS:
                case Cobol85Parser.PROGRAM:
                case Cobol85Parser.PROMPT:
                case Cobol85Parser.READER:
                case Cobol85Parser.REMOTE:
                case Cobol85Parser.REAL:
                case Cobol85Parser.RECEIVED:
                case Cobol85Parser.RECURSIVE:
                case Cobol85Parser.REF:
                case Cobol85Parser.REMOVE:
                case Cobol85Parser.REQUIRED:
                case Cobol85Parser.REVERSE_VIDEO:
                case Cobol85Parser.SAVE:
                case Cobol85Parser.SECURE:
                case Cobol85Parser.SHARED:
                case Cobol85Parser.SHAREDBYALL:
                case Cobol85Parser.SHAREDBYRUNUNIT:
                case Cobol85Parser.SHARING:
                case Cobol85Parser.SHORT_DATE:
                case Cobol85Parser.SYMBOL:
                case Cobol85Parser.TASK:
                case Cobol85Parser.THREAD:
                case Cobol85Parser.THREAD_LOCAL:
                case Cobol85Parser.TIMER:
                case Cobol85Parser.TODAYS_DATE:
                case Cobol85Parser.TODAYS_NAME:
                case Cobol85Parser.TRUNCATED:
                case Cobol85Parser.TYPEDEF:
                case Cobol85Parser.UNDERLINE:
                case Cobol85Parser.VIRTUAL:
                case Cobol85Parser.WAIT:
                case Cobol85Parser.YEAR:
                case Cobol85Parser.YYYYMMDD:
                case Cobol85Parser.YYYYDDD:
                case Cobol85Parser.ZERO_FILL:
                case Cobol85Parser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6174;
                        this.cobolWord();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.recordName = function () {
        var _localctx = new RecordNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1154, Cobol85Parser.RULE_recordName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6177;
                this.qualifiedDataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.reportName = function () {
        var _localctx = new ReportNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1156, Cobol85Parser.RULE_reportName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6179;
                this.qualifiedDataName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.routineName = function () {
        var _localctx = new RoutineNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1158, Cobol85Parser.RULE_routineName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6181;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.screenName = function () {
        var _localctx = new ScreenNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1160, Cobol85Parser.RULE_screenName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6183;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.sectionName = function () {
        var _localctx = new SectionNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1162, Cobol85Parser.RULE_sectionName);
        try {
            this.state = 6187;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.ABORT:
                case Cobol85Parser.AS:
                case Cobol85Parser.ASCII:
                case Cobol85Parser.ASSOCIATED_DATA:
                case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
                case Cobol85Parser.ATTRIBUTE:
                case Cobol85Parser.AUTO:
                case Cobol85Parser.AUTO_SKIP:
                case Cobol85Parser.BACKGROUND_COLOR:
                case Cobol85Parser.BACKGROUND_COLOUR:
                case Cobol85Parser.BEEP:
                case Cobol85Parser.BELL:
                case Cobol85Parser.BINARY:
                case Cobol85Parser.BIT:
                case Cobol85Parser.BLINK:
                case Cobol85Parser.BOUNDS:
                case Cobol85Parser.CAPABLE:
                case Cobol85Parser.CCSVERSION:
                case Cobol85Parser.CHANGED:
                case Cobol85Parser.CHANNEL:
                case Cobol85Parser.CLOSE_DISPOSITION:
                case Cobol85Parser.COBOL:
                case Cobol85Parser.COMMITMENT:
                case Cobol85Parser.CONTROL_POINT:
                case Cobol85Parser.CONVENTION:
                case Cobol85Parser.CRUNCH:
                case Cobol85Parser.CURSOR:
                case Cobol85Parser.DEFAULT:
                case Cobol85Parser.DEFAULT_DISPLAY:
                case Cobol85Parser.DEFINITION:
                case Cobol85Parser.DFHRESP:
                case Cobol85Parser.DFHVALUE:
                case Cobol85Parser.DISK:
                case Cobol85Parser.DONTCARE:
                case Cobol85Parser.DOUBLE:
                case Cobol85Parser.EBCDIC:
                case Cobol85Parser.EMPTY_CHECK:
                case Cobol85Parser.ENTER:
                case Cobol85Parser.ENTRY_PROCEDURE:
                case Cobol85Parser.ERASE:
                case Cobol85Parser.EOL:
                case Cobol85Parser.EOS:
                case Cobol85Parser.ESCAPE:
                case Cobol85Parser.EVENT:
                case Cobol85Parser.EXCLUSIVE:
                case Cobol85Parser.EXPORT:
                case Cobol85Parser.EXTENDED:
                case Cobol85Parser.FOREGROUND_COLOR:
                case Cobol85Parser.FOREGROUND_COLOUR:
                case Cobol85Parser.FULL:
                case Cobol85Parser.FUNCTIONNAME:
                case Cobol85Parser.FUNCTION_POINTER:
                case Cobol85Parser.GRID:
                case Cobol85Parser.HIGHLIGHT:
                case Cobol85Parser.IMPLICIT:
                case Cobol85Parser.IMPORT:
                case Cobol85Parser.INTEGER:
                case Cobol85Parser.KEPT:
                case Cobol85Parser.KEYBOARD:
                case Cobol85Parser.LANGUAGE:
                case Cobol85Parser.LB:
                case Cobol85Parser.LD:
                case Cobol85Parser.LEFTLINE:
                case Cobol85Parser.LENGTH_CHECK:
                case Cobol85Parser.LIBACCESS:
                case Cobol85Parser.LIBPARAMETER:
                case Cobol85Parser.LIBRARY:
                case Cobol85Parser.LIST:
                case Cobol85Parser.LOCAL:
                case Cobol85Parser.LONG_DATE:
                case Cobol85Parser.LONG_TIME:
                case Cobol85Parser.LOWER:
                case Cobol85Parser.LOWLIGHT:
                case Cobol85Parser.MMDDYYYY:
                case Cobol85Parser.NAMED:
                case Cobol85Parser.NATIONAL:
                case Cobol85Parser.NATIONAL_EDITED:
                case Cobol85Parser.NETWORK:
                case Cobol85Parser.NO_ECHO:
                case Cobol85Parser.NUMERIC_DATE:
                case Cobol85Parser.NUMERIC_TIME:
                case Cobol85Parser.ODT:
                case Cobol85Parser.ORDERLY:
                case Cobol85Parser.OVERLINE:
                case Cobol85Parser.OWN:
                case Cobol85Parser.PASSWORD:
                case Cobol85Parser.PORT:
                case Cobol85Parser.PRINTER:
                case Cobol85Parser.PRIVATE:
                case Cobol85Parser.PROCESS:
                case Cobol85Parser.PROGRAM:
                case Cobol85Parser.PROMPT:
                case Cobol85Parser.READER:
                case Cobol85Parser.REMOTE:
                case Cobol85Parser.REAL:
                case Cobol85Parser.RECEIVED:
                case Cobol85Parser.RECURSIVE:
                case Cobol85Parser.REF:
                case Cobol85Parser.REMOVE:
                case Cobol85Parser.REQUIRED:
                case Cobol85Parser.REVERSE_VIDEO:
                case Cobol85Parser.SAVE:
                case Cobol85Parser.SECURE:
                case Cobol85Parser.SHARED:
                case Cobol85Parser.SHAREDBYALL:
                case Cobol85Parser.SHAREDBYRUNUNIT:
                case Cobol85Parser.SHARING:
                case Cobol85Parser.SHORT_DATE:
                case Cobol85Parser.SYMBOL:
                case Cobol85Parser.TASK:
                case Cobol85Parser.THREAD:
                case Cobol85Parser.THREAD_LOCAL:
                case Cobol85Parser.TIMER:
                case Cobol85Parser.TODAYS_DATE:
                case Cobol85Parser.TODAYS_NAME:
                case Cobol85Parser.TRUNCATED:
                case Cobol85Parser.TYPEDEF:
                case Cobol85Parser.UNDERLINE:
                case Cobol85Parser.VIRTUAL:
                case Cobol85Parser.WAIT:
                case Cobol85Parser.YEAR:
                case Cobol85Parser.YYYYMMDD:
                case Cobol85Parser.YYYYDDD:
                case Cobol85Parser.ZERO_FILL:
                case Cobol85Parser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6185;
                        this.cobolWord();
                    }
                    break;
                case Cobol85Parser.LEVEL_NUMBER_66:
                case Cobol85Parser.LEVEL_NUMBER_77:
                case Cobol85Parser.LEVEL_NUMBER_88:
                case Cobol85Parser.INTEGERLITERAL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6186;
                        this.integerLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.systemName = function () {
        var _localctx = new SystemNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1164, Cobol85Parser.RULE_systemName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6189;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.symbolicCharacter = function () {
        var _localctx = new SymbolicCharacterContext(this._ctx, this.state);
        this.enterRule(_localctx, 1166, Cobol85Parser.RULE_symbolicCharacter);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6191;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.textName = function () {
        var _localctx = new TextNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1168, Cobol85Parser.RULE_textName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6193;
                this.cobolWord();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.cobolWord = function () {
        var _localctx = new CobolWordContext(this._ctx, this.state);
        this.enterRule(_localctx, 1170, Cobol85Parser.RULE_cobolWord);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6195;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.literal = function () {
        var _localctx = new LiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1172, Cobol85Parser.RULE_literal);
        try {
            this.state = 6203;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 971, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6197;
                        this.match(Cobol85Parser.NONNUMERICLITERAL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6198;
                        this.figurativeConstant();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6199;
                        this.numericLiteral();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6200;
                        this.booleanLiteral();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6201;
                        this.cicsDfhRespLiteral();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 6202;
                        this.cicsDfhValueLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.booleanLiteral = function () {
        var _localctx = new BooleanLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1174, Cobol85Parser.RULE_booleanLiteral);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6205;
                _la = this._input.LA(1);
                if (!(_la === Cobol85Parser.FALSE || _la === Cobol85Parser.TRUE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.numericLiteral = function () {
        var _localctx = new NumericLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1176, Cobol85Parser.RULE_numericLiteral);
        try {
            this.state = 6210;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.NUMERICLITERAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6207;
                        this.match(Cobol85Parser.NUMERICLITERAL);
                    }
                    break;
                case Cobol85Parser.ZERO:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6208;
                        this.match(Cobol85Parser.ZERO);
                    }
                    break;
                case Cobol85Parser.LEVEL_NUMBER_66:
                case Cobol85Parser.LEVEL_NUMBER_77:
                case Cobol85Parser.LEVEL_NUMBER_88:
                case Cobol85Parser.INTEGERLITERAL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6209;
                        this.integerLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.integerLiteral = function () {
        var _localctx = new IntegerLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1178, Cobol85Parser.RULE_integerLiteral);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6212;
                _la = this._input.LA(1);
                if (!(((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.cicsDfhRespLiteral = function () {
        var _localctx = new CicsDfhRespLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1180, Cobol85Parser.RULE_cicsDfhRespLiteral);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6214;
                this.match(Cobol85Parser.DFHRESP);
                this.state = 6215;
                this.match(Cobol85Parser.LPARENCHAR);
                this.state = 6218;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 973, this._ctx)) {
                    case 1:
                        {
                            this.state = 6216;
                            this.cobolWord();
                        }
                        break;
                    case 2:
                        {
                            this.state = 6217;
                            this.literal();
                        }
                        break;
                }
                this.state = 6220;
                this.match(Cobol85Parser.RPARENCHAR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.cicsDfhValueLiteral = function () {
        var _localctx = new CicsDfhValueLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1182, Cobol85Parser.RULE_cicsDfhValueLiteral);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6222;
                this.match(Cobol85Parser.DFHVALUE);
                this.state = 6223;
                this.match(Cobol85Parser.LPARENCHAR);
                this.state = 6226;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 974, this._ctx)) {
                    case 1:
                        {
                            this.state = 6224;
                            this.cobolWord();
                        }
                        break;
                    case 2:
                        {
                            this.state = 6225;
                            this.literal();
                        }
                        break;
                }
                this.state = 6228;
                this.match(Cobol85Parser.RPARENCHAR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.figurativeConstant = function () {
        var _localctx = new FigurativeConstantContext(this._ctx, this.state);
        this.enterRule(_localctx, 1184, Cobol85Parser.RULE_figurativeConstant);
        try {
            this.state = 6245;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.ALL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6230;
                        this.match(Cobol85Parser.ALL);
                        this.state = 6231;
                        this.literal();
                    }
                    break;
                case Cobol85Parser.HIGH_VALUE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6232;
                        this.match(Cobol85Parser.HIGH_VALUE);
                    }
                    break;
                case Cobol85Parser.HIGH_VALUES:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6233;
                        this.match(Cobol85Parser.HIGH_VALUES);
                    }
                    break;
                case Cobol85Parser.LOW_VALUE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6234;
                        this.match(Cobol85Parser.LOW_VALUE);
                    }
                    break;
                case Cobol85Parser.LOW_VALUES:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6235;
                        this.match(Cobol85Parser.LOW_VALUES);
                    }
                    break;
                case Cobol85Parser.NULL:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 6236;
                        this.match(Cobol85Parser.NULL);
                    }
                    break;
                case Cobol85Parser.NULLS:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 6237;
                        this.match(Cobol85Parser.NULLS);
                    }
                    break;
                case Cobol85Parser.QUOTE:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 6238;
                        this.match(Cobol85Parser.QUOTE);
                    }
                    break;
                case Cobol85Parser.QUOTES:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 6239;
                        this.match(Cobol85Parser.QUOTES);
                    }
                    break;
                case Cobol85Parser.SPACE:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 6240;
                        this.match(Cobol85Parser.SPACE);
                    }
                    break;
                case Cobol85Parser.SPACES:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 6241;
                        this.match(Cobol85Parser.SPACES);
                    }
                    break;
                case Cobol85Parser.ZERO:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 6242;
                        this.match(Cobol85Parser.ZERO);
                    }
                    break;
                case Cobol85Parser.ZEROS:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 6243;
                        this.match(Cobol85Parser.ZEROS);
                    }
                    break;
                case Cobol85Parser.ZEROES:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 6244;
                        this.match(Cobol85Parser.ZEROES);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.specialRegister = function () {
        var _localctx = new SpecialRegisterContext(this._ctx, this.state);
        this.enterRule(_localctx, 1186, Cobol85Parser.RULE_specialRegister);
        var _la;
        try {
            this.state = 6280;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Cobol85Parser.ADDRESS:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6247;
                        this.match(Cobol85Parser.ADDRESS);
                        this.state = 6248;
                        this.match(Cobol85Parser.OF);
                        this.state = 6249;
                        this.identifier();
                    }
                    break;
                case Cobol85Parser.DATE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6250;
                        this.match(Cobol85Parser.DATE);
                    }
                    break;
                case Cobol85Parser.DAY:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6251;
                        this.match(Cobol85Parser.DAY);
                    }
                    break;
                case Cobol85Parser.DAY_OF_WEEK:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6252;
                        this.match(Cobol85Parser.DAY_OF_WEEK);
                    }
                    break;
                case Cobol85Parser.DEBUG_CONTENTS:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6253;
                        this.match(Cobol85Parser.DEBUG_CONTENTS);
                    }
                    break;
                case Cobol85Parser.DEBUG_ITEM:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 6254;
                        this.match(Cobol85Parser.DEBUG_ITEM);
                    }
                    break;
                case Cobol85Parser.DEBUG_LINE:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 6255;
                        this.match(Cobol85Parser.DEBUG_LINE);
                    }
                    break;
                case Cobol85Parser.DEBUG_NAME:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 6256;
                        this.match(Cobol85Parser.DEBUG_NAME);
                    }
                    break;
                case Cobol85Parser.DEBUG_SUB_1:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 6257;
                        this.match(Cobol85Parser.DEBUG_SUB_1);
                    }
                    break;
                case Cobol85Parser.DEBUG_SUB_2:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 6258;
                        this.match(Cobol85Parser.DEBUG_SUB_2);
                    }
                    break;
                case Cobol85Parser.DEBUG_SUB_3:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 6259;
                        this.match(Cobol85Parser.DEBUG_SUB_3);
                    }
                    break;
                case Cobol85Parser.LENGTH:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 6260;
                        this.match(Cobol85Parser.LENGTH);
                        this.state = 6262;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Cobol85Parser.OF) {
                            {
                                this.state = 6261;
                                this.match(Cobol85Parser.OF);
                            }
                        }
                        this.state = 6264;
                        this.identifier();
                    }
                    break;
                case Cobol85Parser.LINAGE_COUNTER:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 6265;
                        this.match(Cobol85Parser.LINAGE_COUNTER);
                    }
                    break;
                case Cobol85Parser.LINE_COUNTER:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 6266;
                        this.match(Cobol85Parser.LINE_COUNTER);
                    }
                    break;
                case Cobol85Parser.PAGE_COUNTER:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 6267;
                        this.match(Cobol85Parser.PAGE_COUNTER);
                    }
                    break;
                case Cobol85Parser.RETURN_CODE:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 6268;
                        this.match(Cobol85Parser.RETURN_CODE);
                    }
                    break;
                case Cobol85Parser.SHIFT_IN:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 6269;
                        this.match(Cobol85Parser.SHIFT_IN);
                    }
                    break;
                case Cobol85Parser.SHIFT_OUT:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 6270;
                        this.match(Cobol85Parser.SHIFT_OUT);
                    }
                    break;
                case Cobol85Parser.SORT_CONTROL:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 6271;
                        this.match(Cobol85Parser.SORT_CONTROL);
                    }
                    break;
                case Cobol85Parser.SORT_CORE_SIZE:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 6272;
                        this.match(Cobol85Parser.SORT_CORE_SIZE);
                    }
                    break;
                case Cobol85Parser.SORT_FILE_SIZE:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 6273;
                        this.match(Cobol85Parser.SORT_FILE_SIZE);
                    }
                    break;
                case Cobol85Parser.SORT_MESSAGE:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 6274;
                        this.match(Cobol85Parser.SORT_MESSAGE);
                    }
                    break;
                case Cobol85Parser.SORT_MODE_SIZE:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 6275;
                        this.match(Cobol85Parser.SORT_MODE_SIZE);
                    }
                    break;
                case Cobol85Parser.SORT_RETURN:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 6276;
                        this.match(Cobol85Parser.SORT_RETURN);
                    }
                    break;
                case Cobol85Parser.TALLY:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 6277;
                        this.match(Cobol85Parser.TALLY);
                    }
                    break;
                case Cobol85Parser.TIME:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 6278;
                        this.match(Cobol85Parser.TIME);
                    }
                    break;
                case Cobol85Parser.WHEN_COMPILED:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 6279;
                        this.match(Cobol85Parser.WHEN_COMPILED);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Cobol85Parser.prototype.commentEntry = function () {
        var _localctx = new CommentEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 1188, Cobol85Parser.RULE_commentEntry);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6283;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 6282;
                            this.match(Cobol85Parser.COMMENTENTRYLINE);
                        }
                    }
                    this.state = 6285;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === Cobol85Parser.COMMENTENTRYLINE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    Object.defineProperty(Cobol85Parser, "_ATN", {
        get: function () {
            if (!Cobol85Parser.__ATN) {
                Cobol85Parser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(Cobol85Parser._serializedATN));
            }
            return Cobol85Parser.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    Cobol85Parser.ABORT = 1;
    Cobol85Parser.ACCEPT = 2;
    Cobol85Parser.ACCESS = 3;
    Cobol85Parser.ADD = 4;
    Cobol85Parser.ADDRESS = 5;
    Cobol85Parser.ADVANCING = 6;
    Cobol85Parser.AFTER = 7;
    Cobol85Parser.ALIGNED = 8;
    Cobol85Parser.ALL = 9;
    Cobol85Parser.ALPHABET = 10;
    Cobol85Parser.ALPHABETIC = 11;
    Cobol85Parser.ALPHABETIC_LOWER = 12;
    Cobol85Parser.ALPHABETIC_UPPER = 13;
    Cobol85Parser.ALPHANUMERIC = 14;
    Cobol85Parser.ALPHANUMERIC_EDITED = 15;
    Cobol85Parser.ALSO = 16;
    Cobol85Parser.ALTER = 17;
    Cobol85Parser.ALTERNATE = 18;
    Cobol85Parser.AND = 19;
    Cobol85Parser.ANY = 20;
    Cobol85Parser.ARE = 21;
    Cobol85Parser.AREA = 22;
    Cobol85Parser.AREAS = 23;
    Cobol85Parser.AS = 24;
    Cobol85Parser.ASCENDING = 25;
    Cobol85Parser.ASCII = 26;
    Cobol85Parser.ASSIGN = 27;
    Cobol85Parser.ASSOCIATED_DATA = 28;
    Cobol85Parser.ASSOCIATED_DATA_LENGTH = 29;
    Cobol85Parser.AT = 30;
    Cobol85Parser.ATTRIBUTE = 31;
    Cobol85Parser.AUTHOR = 32;
    Cobol85Parser.AUTO = 33;
    Cobol85Parser.AUTO_SKIP = 34;
    Cobol85Parser.BACKGROUND_COLOR = 35;
    Cobol85Parser.BACKGROUND_COLOUR = 36;
    Cobol85Parser.BASIS = 37;
    Cobol85Parser.BEEP = 38;
    Cobol85Parser.BEFORE = 39;
    Cobol85Parser.BEGINNING = 40;
    Cobol85Parser.BELL = 41;
    Cobol85Parser.BINARY = 42;
    Cobol85Parser.BIT = 43;
    Cobol85Parser.BLANK = 44;
    Cobol85Parser.BLINK = 45;
    Cobol85Parser.BLOCK = 46;
    Cobol85Parser.BOUNDS = 47;
    Cobol85Parser.BOTTOM = 48;
    Cobol85Parser.BY = 49;
    Cobol85Parser.BYFUNCTION = 50;
    Cobol85Parser.BYTITLE = 51;
    Cobol85Parser.CALL = 52;
    Cobol85Parser.CANCEL = 53;
    Cobol85Parser.CAPABLE = 54;
    Cobol85Parser.CCSVERSION = 55;
    Cobol85Parser.CD = 56;
    Cobol85Parser.CF = 57;
    Cobol85Parser.CH = 58;
    Cobol85Parser.CHAINING = 59;
    Cobol85Parser.CHANGED = 60;
    Cobol85Parser.CHANNEL = 61;
    Cobol85Parser.CHARACTER = 62;
    Cobol85Parser.CHARACTERS = 63;
    Cobol85Parser.CLASS = 64;
    Cobol85Parser.CLASS_ID = 65;
    Cobol85Parser.CLOCK_UNITS = 66;
    Cobol85Parser.CLOSE = 67;
    Cobol85Parser.CLOSE_DISPOSITION = 68;
    Cobol85Parser.COBOL = 69;
    Cobol85Parser.CODE = 70;
    Cobol85Parser.CODE_SET = 71;
    Cobol85Parser.COLLATING = 72;
    Cobol85Parser.COL = 73;
    Cobol85Parser.COLUMN = 74;
    Cobol85Parser.COM_REG = 75;
    Cobol85Parser.COMMA = 76;
    Cobol85Parser.COMMITMENT = 77;
    Cobol85Parser.COMMON = 78;
    Cobol85Parser.COMMUNICATION = 79;
    Cobol85Parser.COMP = 80;
    Cobol85Parser.COMP_1 = 81;
    Cobol85Parser.COMP_2 = 82;
    Cobol85Parser.COMP_3 = 83;
    Cobol85Parser.COMP_4 = 84;
    Cobol85Parser.COMP_5 = 85;
    Cobol85Parser.COMPUTATIONAL = 86;
    Cobol85Parser.COMPUTATIONAL_1 = 87;
    Cobol85Parser.COMPUTATIONAL_2 = 88;
    Cobol85Parser.COMPUTATIONAL_3 = 89;
    Cobol85Parser.COMPUTATIONAL_4 = 90;
    Cobol85Parser.COMPUTATIONAL_5 = 91;
    Cobol85Parser.COMPUTE = 92;
    Cobol85Parser.CONFIGURATION = 93;
    Cobol85Parser.CONTAINS = 94;
    Cobol85Parser.CONTENT = 95;
    Cobol85Parser.CONTINUE = 96;
    Cobol85Parser.CONTROL = 97;
    Cobol85Parser.CONTROL_POINT = 98;
    Cobol85Parser.CONTROLS = 99;
    Cobol85Parser.CONVENTION = 100;
    Cobol85Parser.CONVERTING = 101;
    Cobol85Parser.COPY = 102;
    Cobol85Parser.CORR = 103;
    Cobol85Parser.CORRESPONDING = 104;
    Cobol85Parser.COUNT = 105;
    Cobol85Parser.CRUNCH = 106;
    Cobol85Parser.CURRENCY = 107;
    Cobol85Parser.CURSOR = 108;
    Cobol85Parser.DATA = 109;
    Cobol85Parser.DATA_BASE = 110;
    Cobol85Parser.DATE = 111;
    Cobol85Parser.DATE_COMPILED = 112;
    Cobol85Parser.DATE_WRITTEN = 113;
    Cobol85Parser.DAY = 114;
    Cobol85Parser.DAY_OF_WEEK = 115;
    Cobol85Parser.DBCS = 116;
    Cobol85Parser.DE = 117;
    Cobol85Parser.DEBUG_CONTENTS = 118;
    Cobol85Parser.DEBUG_ITEM = 119;
    Cobol85Parser.DEBUG_LINE = 120;
    Cobol85Parser.DEBUG_NAME = 121;
    Cobol85Parser.DEBUG_SUB_1 = 122;
    Cobol85Parser.DEBUG_SUB_2 = 123;
    Cobol85Parser.DEBUG_SUB_3 = 124;
    Cobol85Parser.DEBUGGING = 125;
    Cobol85Parser.DECIMAL_POINT = 126;
    Cobol85Parser.DECLARATIVES = 127;
    Cobol85Parser.DEFAULT = 128;
    Cobol85Parser.DEFAULT_DISPLAY = 129;
    Cobol85Parser.DEFINITION = 130;
    Cobol85Parser.DELETE = 131;
    Cobol85Parser.DELIMITED = 132;
    Cobol85Parser.DELIMITER = 133;
    Cobol85Parser.DEPENDING = 134;
    Cobol85Parser.DESCENDING = 135;
    Cobol85Parser.DESTINATION = 136;
    Cobol85Parser.DETAIL = 137;
    Cobol85Parser.DFHRESP = 138;
    Cobol85Parser.DFHVALUE = 139;
    Cobol85Parser.DISABLE = 140;
    Cobol85Parser.DISK = 141;
    Cobol85Parser.DISPLAY = 142;
    Cobol85Parser.DISPLAY_1 = 143;
    Cobol85Parser.DIVIDE = 144;
    Cobol85Parser.DIVISION = 145;
    Cobol85Parser.DONTCARE = 146;
    Cobol85Parser.DOUBLE = 147;
    Cobol85Parser.DOWN = 148;
    Cobol85Parser.DUPLICATES = 149;
    Cobol85Parser.DYNAMIC = 150;
    Cobol85Parser.EBCDIC = 151;
    Cobol85Parser.EGCS = 152;
    Cobol85Parser.EGI = 153;
    Cobol85Parser.ELSE = 154;
    Cobol85Parser.EMI = 155;
    Cobol85Parser.EMPTY_CHECK = 156;
    Cobol85Parser.ENABLE = 157;
    Cobol85Parser.END = 158;
    Cobol85Parser.END_ACCEPT = 159;
    Cobol85Parser.END_ADD = 160;
    Cobol85Parser.END_CALL = 161;
    Cobol85Parser.END_COMPUTE = 162;
    Cobol85Parser.END_DELETE = 163;
    Cobol85Parser.END_DIVIDE = 164;
    Cobol85Parser.END_EVALUATE = 165;
    Cobol85Parser.END_IF = 166;
    Cobol85Parser.END_MULTIPLY = 167;
    Cobol85Parser.END_OF_PAGE = 168;
    Cobol85Parser.END_PERFORM = 169;
    Cobol85Parser.END_READ = 170;
    Cobol85Parser.END_RECEIVE = 171;
    Cobol85Parser.END_RETURN = 172;
    Cobol85Parser.END_REWRITE = 173;
    Cobol85Parser.END_SEARCH = 174;
    Cobol85Parser.END_START = 175;
    Cobol85Parser.END_STRING = 176;
    Cobol85Parser.END_SUBTRACT = 177;
    Cobol85Parser.END_UNSTRING = 178;
    Cobol85Parser.END_WRITE = 179;
    Cobol85Parser.ENDING = 180;
    Cobol85Parser.ENTER = 181;
    Cobol85Parser.ENTRY = 182;
    Cobol85Parser.ENTRY_PROCEDURE = 183;
    Cobol85Parser.ENVIRONMENT = 184;
    Cobol85Parser.EOP = 185;
    Cobol85Parser.EQUAL = 186;
    Cobol85Parser.ERASE = 187;
    Cobol85Parser.ERROR = 188;
    Cobol85Parser.EOL = 189;
    Cobol85Parser.EOS = 190;
    Cobol85Parser.ESCAPE = 191;
    Cobol85Parser.ESI = 192;
    Cobol85Parser.EVALUATE = 193;
    Cobol85Parser.EVENT = 194;
    Cobol85Parser.EVERY = 195;
    Cobol85Parser.EXCEPTION = 196;
    Cobol85Parser.EXCLUSIVE = 197;
    Cobol85Parser.EXHIBIT = 198;
    Cobol85Parser.EXIT = 199;
    Cobol85Parser.EXPORT = 200;
    Cobol85Parser.EXTEND = 201;
    Cobol85Parser.EXTENDED = 202;
    Cobol85Parser.EXTERNAL = 203;
    Cobol85Parser.FALSE = 204;
    Cobol85Parser.FD = 205;
    Cobol85Parser.FILE = 206;
    Cobol85Parser.FILE_CONTROL = 207;
    Cobol85Parser.FILLER = 208;
    Cobol85Parser.FINAL = 209;
    Cobol85Parser.FIRST = 210;
    Cobol85Parser.FOOTING = 211;
    Cobol85Parser.FOR = 212;
    Cobol85Parser.FOREGROUND_COLOR = 213;
    Cobol85Parser.FOREGROUND_COLOUR = 214;
    Cobol85Parser.FROM = 215;
    Cobol85Parser.FULL = 216;
    Cobol85Parser.FUNCTION = 217;
    Cobol85Parser.FUNCTIONNAME = 218;
    Cobol85Parser.FUNCTION_POINTER = 219;
    Cobol85Parser.GENERATE = 220;
    Cobol85Parser.GOBACK = 221;
    Cobol85Parser.GIVING = 222;
    Cobol85Parser.GLOBAL = 223;
    Cobol85Parser.GO = 224;
    Cobol85Parser.GREATER = 225;
    Cobol85Parser.GRID = 226;
    Cobol85Parser.GROUP = 227;
    Cobol85Parser.HEADING = 228;
    Cobol85Parser.HIGHLIGHT = 229;
    Cobol85Parser.HIGH_VALUE = 230;
    Cobol85Parser.HIGH_VALUES = 231;
    Cobol85Parser.I_O = 232;
    Cobol85Parser.I_O_CONTROL = 233;
    Cobol85Parser.ID = 234;
    Cobol85Parser.IDENTIFICATION = 235;
    Cobol85Parser.IF = 236;
    Cobol85Parser.IMPLICIT = 237;
    Cobol85Parser.IMPORT = 238;
    Cobol85Parser.IN = 239;
    Cobol85Parser.INDEX = 240;
    Cobol85Parser.INDEXED = 241;
    Cobol85Parser.INDICATE = 242;
    Cobol85Parser.INITIAL = 243;
    Cobol85Parser.INITIALIZE = 244;
    Cobol85Parser.INITIATE = 245;
    Cobol85Parser.INPUT = 246;
    Cobol85Parser.INPUT_OUTPUT = 247;
    Cobol85Parser.INSPECT = 248;
    Cobol85Parser.INSTALLATION = 249;
    Cobol85Parser.INTEGER = 250;
    Cobol85Parser.INTO = 251;
    Cobol85Parser.INVALID = 252;
    Cobol85Parser.INVOKE = 253;
    Cobol85Parser.IS = 254;
    Cobol85Parser.JUST = 255;
    Cobol85Parser.JUSTIFIED = 256;
    Cobol85Parser.KANJI = 257;
    Cobol85Parser.KEPT = 258;
    Cobol85Parser.KEY = 259;
    Cobol85Parser.KEYBOARD = 260;
    Cobol85Parser.LABEL = 261;
    Cobol85Parser.LANGUAGE = 262;
    Cobol85Parser.LAST = 263;
    Cobol85Parser.LB = 264;
    Cobol85Parser.LD = 265;
    Cobol85Parser.LEADING = 266;
    Cobol85Parser.LEFT = 267;
    Cobol85Parser.LEFTLINE = 268;
    Cobol85Parser.LENGTH = 269;
    Cobol85Parser.LENGTH_CHECK = 270;
    Cobol85Parser.LESS = 271;
    Cobol85Parser.LIBACCESS = 272;
    Cobol85Parser.LIBPARAMETER = 273;
    Cobol85Parser.LIBRARY = 274;
    Cobol85Parser.LIMIT = 275;
    Cobol85Parser.LIMITS = 276;
    Cobol85Parser.LINAGE = 277;
    Cobol85Parser.LINAGE_COUNTER = 278;
    Cobol85Parser.LINE = 279;
    Cobol85Parser.LINES = 280;
    Cobol85Parser.LINE_COUNTER = 281;
    Cobol85Parser.LINKAGE = 282;
    Cobol85Parser.LIST = 283;
    Cobol85Parser.LOCAL = 284;
    Cobol85Parser.LOCAL_STORAGE = 285;
    Cobol85Parser.LOCK = 286;
    Cobol85Parser.LONG_DATE = 287;
    Cobol85Parser.LONG_TIME = 288;
    Cobol85Parser.LOWER = 289;
    Cobol85Parser.LOWLIGHT = 290;
    Cobol85Parser.LOW_VALUE = 291;
    Cobol85Parser.LOW_VALUES = 292;
    Cobol85Parser.MEMORY = 293;
    Cobol85Parser.MERGE = 294;
    Cobol85Parser.MESSAGE = 295;
    Cobol85Parser.MMDDYYYY = 296;
    Cobol85Parser.MODE = 297;
    Cobol85Parser.MODULES = 298;
    Cobol85Parser.MORE_LABELS = 299;
    Cobol85Parser.MOVE = 300;
    Cobol85Parser.MULTIPLE = 301;
    Cobol85Parser.MULTIPLY = 302;
    Cobol85Parser.NAMED = 303;
    Cobol85Parser.NATIONAL = 304;
    Cobol85Parser.NATIONAL_EDITED = 305;
    Cobol85Parser.NATIVE = 306;
    Cobol85Parser.NEGATIVE = 307;
    Cobol85Parser.NETWORK = 308;
    Cobol85Parser.NEXT = 309;
    Cobol85Parser.NO = 310;
    Cobol85Parser.NO_ECHO = 311;
    Cobol85Parser.NOT = 312;
    Cobol85Parser.NULL = 313;
    Cobol85Parser.NULLS = 314;
    Cobol85Parser.NUMBER = 315;
    Cobol85Parser.NUMERIC = 316;
    Cobol85Parser.NUMERIC_DATE = 317;
    Cobol85Parser.NUMERIC_EDITED = 318;
    Cobol85Parser.NUMERIC_TIME = 319;
    Cobol85Parser.OBJECT_COMPUTER = 320;
    Cobol85Parser.OCCURS = 321;
    Cobol85Parser.ODT = 322;
    Cobol85Parser.OF = 323;
    Cobol85Parser.OFF = 324;
    Cobol85Parser.OMITTED = 325;
    Cobol85Parser.ON = 326;
    Cobol85Parser.OPEN = 327;
    Cobol85Parser.OPTIONAL = 328;
    Cobol85Parser.OR = 329;
    Cobol85Parser.ORDER = 330;
    Cobol85Parser.ORDERLY = 331;
    Cobol85Parser.ORGANIZATION = 332;
    Cobol85Parser.OTHER = 333;
    Cobol85Parser.OUTPUT = 334;
    Cobol85Parser.OVERFLOW = 335;
    Cobol85Parser.OVERLINE = 336;
    Cobol85Parser.OWN = 337;
    Cobol85Parser.PACKED_DECIMAL = 338;
    Cobol85Parser.PADDING = 339;
    Cobol85Parser.PAGE = 340;
    Cobol85Parser.PAGE_COUNTER = 341;
    Cobol85Parser.PASSWORD = 342;
    Cobol85Parser.PERFORM = 343;
    Cobol85Parser.PF = 344;
    Cobol85Parser.PH = 345;
    Cobol85Parser.PIC = 346;
    Cobol85Parser.PICTURE = 347;
    Cobol85Parser.PLUS = 348;
    Cobol85Parser.POINTER = 349;
    Cobol85Parser.POSITION = 350;
    Cobol85Parser.POSITIVE = 351;
    Cobol85Parser.PORT = 352;
    Cobol85Parser.PRINTER = 353;
    Cobol85Parser.PRINTING = 354;
    Cobol85Parser.PRIVATE = 355;
    Cobol85Parser.PROCEDURE = 356;
    Cobol85Parser.PROCEDURE_POINTER = 357;
    Cobol85Parser.PROCEDURES = 358;
    Cobol85Parser.PROCEED = 359;
    Cobol85Parser.PROCESS = 360;
    Cobol85Parser.PROGRAM = 361;
    Cobol85Parser.PROGRAM_ID = 362;
    Cobol85Parser.PROGRAM_LIBRARY = 363;
    Cobol85Parser.PROMPT = 364;
    Cobol85Parser.PURGE = 365;
    Cobol85Parser.QUEUE = 366;
    Cobol85Parser.QUOTE = 367;
    Cobol85Parser.QUOTES = 368;
    Cobol85Parser.RANDOM = 369;
    Cobol85Parser.READER = 370;
    Cobol85Parser.REMOTE = 371;
    Cobol85Parser.RD = 372;
    Cobol85Parser.REAL = 373;
    Cobol85Parser.READ = 374;
    Cobol85Parser.RECEIVE = 375;
    Cobol85Parser.RECEIVED = 376;
    Cobol85Parser.RECORD = 377;
    Cobol85Parser.RECORDING = 378;
    Cobol85Parser.RECORDS = 379;
    Cobol85Parser.RECURSIVE = 380;
    Cobol85Parser.REDEFINES = 381;
    Cobol85Parser.REEL = 382;
    Cobol85Parser.REF = 383;
    Cobol85Parser.REFERENCE = 384;
    Cobol85Parser.REFERENCES = 385;
    Cobol85Parser.RELATIVE = 386;
    Cobol85Parser.RELEASE = 387;
    Cobol85Parser.REMAINDER = 388;
    Cobol85Parser.REMARKS = 389;
    Cobol85Parser.REMOVAL = 390;
    Cobol85Parser.REMOVE = 391;
    Cobol85Parser.RENAMES = 392;
    Cobol85Parser.REPLACE = 393;
    Cobol85Parser.REPLACING = 394;
    Cobol85Parser.REPORT = 395;
    Cobol85Parser.REPORTING = 396;
    Cobol85Parser.REPORTS = 397;
    Cobol85Parser.REQUIRED = 398;
    Cobol85Parser.RERUN = 399;
    Cobol85Parser.RESERVE = 400;
    Cobol85Parser.REVERSE_VIDEO = 401;
    Cobol85Parser.RESET = 402;
    Cobol85Parser.RETURN = 403;
    Cobol85Parser.RETURN_CODE = 404;
    Cobol85Parser.RETURNING = 405;
    Cobol85Parser.REVERSED = 406;
    Cobol85Parser.REWIND = 407;
    Cobol85Parser.REWRITE = 408;
    Cobol85Parser.RF = 409;
    Cobol85Parser.RH = 410;
    Cobol85Parser.RIGHT = 411;
    Cobol85Parser.ROUNDED = 412;
    Cobol85Parser.RUN = 413;
    Cobol85Parser.SAME = 414;
    Cobol85Parser.SAVE = 415;
    Cobol85Parser.SCREEN = 416;
    Cobol85Parser.SD = 417;
    Cobol85Parser.SEARCH = 418;
    Cobol85Parser.SECTION = 419;
    Cobol85Parser.SECURE = 420;
    Cobol85Parser.SECURITY = 421;
    Cobol85Parser.SEGMENT = 422;
    Cobol85Parser.SEGMENT_LIMIT = 423;
    Cobol85Parser.SELECT = 424;
    Cobol85Parser.SEND = 425;
    Cobol85Parser.SENTENCE = 426;
    Cobol85Parser.SEPARATE = 427;
    Cobol85Parser.SEQUENCE = 428;
    Cobol85Parser.SEQUENTIAL = 429;
    Cobol85Parser.SET = 430;
    Cobol85Parser.SHARED = 431;
    Cobol85Parser.SHAREDBYALL = 432;
    Cobol85Parser.SHAREDBYRUNUNIT = 433;
    Cobol85Parser.SHARING = 434;
    Cobol85Parser.SHIFT_IN = 435;
    Cobol85Parser.SHIFT_OUT = 436;
    Cobol85Parser.SHORT_DATE = 437;
    Cobol85Parser.SIGN = 438;
    Cobol85Parser.SIZE = 439;
    Cobol85Parser.SORT = 440;
    Cobol85Parser.SORT_CONTROL = 441;
    Cobol85Parser.SORT_CORE_SIZE = 442;
    Cobol85Parser.SORT_FILE_SIZE = 443;
    Cobol85Parser.SORT_MERGE = 444;
    Cobol85Parser.SORT_MESSAGE = 445;
    Cobol85Parser.SORT_MODE_SIZE = 446;
    Cobol85Parser.SORT_RETURN = 447;
    Cobol85Parser.SOURCE = 448;
    Cobol85Parser.SOURCE_COMPUTER = 449;
    Cobol85Parser.SPACE = 450;
    Cobol85Parser.SPACES = 451;
    Cobol85Parser.SPECIAL_NAMES = 452;
    Cobol85Parser.STANDARD = 453;
    Cobol85Parser.STANDARD_1 = 454;
    Cobol85Parser.STANDARD_2 = 455;
    Cobol85Parser.START = 456;
    Cobol85Parser.STATUS = 457;
    Cobol85Parser.STOP = 458;
    Cobol85Parser.STRING = 459;
    Cobol85Parser.SUB_QUEUE_1 = 460;
    Cobol85Parser.SUB_QUEUE_2 = 461;
    Cobol85Parser.SUB_QUEUE_3 = 462;
    Cobol85Parser.SUBTRACT = 463;
    Cobol85Parser.SUM = 464;
    Cobol85Parser.SUPPRESS = 465;
    Cobol85Parser.SYMBOL = 466;
    Cobol85Parser.SYMBOLIC = 467;
    Cobol85Parser.SYNC = 468;
    Cobol85Parser.SYNCHRONIZED = 469;
    Cobol85Parser.TABLE = 470;
    Cobol85Parser.TALLY = 471;
    Cobol85Parser.TALLYING = 472;
    Cobol85Parser.TASK = 473;
    Cobol85Parser.TAPE = 474;
    Cobol85Parser.TERMINAL = 475;
    Cobol85Parser.TERMINATE = 476;
    Cobol85Parser.TEST = 477;
    Cobol85Parser.TEXT = 478;
    Cobol85Parser.THAN = 479;
    Cobol85Parser.THEN = 480;
    Cobol85Parser.THREAD = 481;
    Cobol85Parser.THREAD_LOCAL = 482;
    Cobol85Parser.THROUGH = 483;
    Cobol85Parser.THRU = 484;
    Cobol85Parser.TIME = 485;
    Cobol85Parser.TIMER = 486;
    Cobol85Parser.TIMES = 487;
    Cobol85Parser.TITLE = 488;
    Cobol85Parser.TO = 489;
    Cobol85Parser.TODAYS_DATE = 490;
    Cobol85Parser.TODAYS_NAME = 491;
    Cobol85Parser.TOP = 492;
    Cobol85Parser.TRAILING = 493;
    Cobol85Parser.TRUE = 494;
    Cobol85Parser.TRUNCATED = 495;
    Cobol85Parser.TYPE = 496;
    Cobol85Parser.TYPEDEF = 497;
    Cobol85Parser.UNDERLINE = 498;
    Cobol85Parser.UNIT = 499;
    Cobol85Parser.UNSTRING = 500;
    Cobol85Parser.UNTIL = 501;
    Cobol85Parser.UP = 502;
    Cobol85Parser.UPON = 503;
    Cobol85Parser.USAGE = 504;
    Cobol85Parser.USE = 505;
    Cobol85Parser.USING = 506;
    Cobol85Parser.VALUE = 507;
    Cobol85Parser.VALUES = 508;
    Cobol85Parser.VARYING = 509;
    Cobol85Parser.VIRTUAL = 510;
    Cobol85Parser.WAIT = 511;
    Cobol85Parser.WHEN = 512;
    Cobol85Parser.WHEN_COMPILED = 513;
    Cobol85Parser.WITH = 514;
    Cobol85Parser.WORDS = 515;
    Cobol85Parser.WORKING_STORAGE = 516;
    Cobol85Parser.WRITE = 517;
    Cobol85Parser.YEAR = 518;
    Cobol85Parser.YYYYMMDD = 519;
    Cobol85Parser.YYYYDDD = 520;
    Cobol85Parser.ZERO = 521;
    Cobol85Parser.ZERO_FILL = 522;
    Cobol85Parser.ZEROS = 523;
    Cobol85Parser.ZEROES = 524;
    Cobol85Parser.AMPCHAR = 525;
    Cobol85Parser.ASTERISKCHAR = 526;
    Cobol85Parser.DOUBLEASTERISKCHAR = 527;
    Cobol85Parser.COLONCHAR = 528;
    Cobol85Parser.COMMACHAR = 529;
    Cobol85Parser.COMMENTENTRYTAG = 530;
    Cobol85Parser.COMMENTTAG = 531;
    Cobol85Parser.DOLLARCHAR = 532;
    Cobol85Parser.DOUBLEQUOTE = 533;
    Cobol85Parser.DOT_FS = 534;
    Cobol85Parser.DOT = 535;
    Cobol85Parser.EQUALCHAR = 536;
    Cobol85Parser.EXECCICSTAG = 537;
    Cobol85Parser.EXECSQLTAG = 538;
    Cobol85Parser.EXECSQLIMSTAG = 539;
    Cobol85Parser.LESSTHANCHAR = 540;
    Cobol85Parser.LESSTHANOREQUAL = 541;
    Cobol85Parser.LPARENCHAR = 542;
    Cobol85Parser.MINUSCHAR = 543;
    Cobol85Parser.MORETHANCHAR = 544;
    Cobol85Parser.MORETHANOREQUAL = 545;
    Cobol85Parser.NOTEQUALCHAR = 546;
    Cobol85Parser.PLUSCHAR = 547;
    Cobol85Parser.SINGLEQUOTE = 548;
    Cobol85Parser.RPARENCHAR = 549;
    Cobol85Parser.SLASHCHAR = 550;
    Cobol85Parser.NONNUMERICLITERAL = 551;
    Cobol85Parser.LEVEL_NUMBER_66 = 552;
    Cobol85Parser.LEVEL_NUMBER_77 = 553;
    Cobol85Parser.LEVEL_NUMBER_88 = 554;
    Cobol85Parser.INTEGERLITERAL = 555;
    Cobol85Parser.NUMERICLITERAL = 556;
    Cobol85Parser.IDENTIFIER = 557;
    Cobol85Parser.NEWLINE = 558;
    Cobol85Parser.EXECCICSLINE = 559;
    Cobol85Parser.EXECSQLIMSLINE = 560;
    Cobol85Parser.EXECSQLLINE = 561;
    Cobol85Parser.COMMENTENTRYLINE = 562;
    Cobol85Parser.COMMENTLINE = 563;
    Cobol85Parser.WS = 564;
    Cobol85Parser.SEPARATOR = 565;
    Cobol85Parser.RULE_startRule = 0;
    Cobol85Parser.RULE_compilationUnit = 1;
    Cobol85Parser.RULE_programUnit = 2;
    Cobol85Parser.RULE_endProgramStatement = 3;
    Cobol85Parser.RULE_identificationDivision = 4;
    Cobol85Parser.RULE_identificationDivisionBody = 5;
    Cobol85Parser.RULE_programIdParagraph = 6;
    Cobol85Parser.RULE_authorParagraph = 7;
    Cobol85Parser.RULE_installationParagraph = 8;
    Cobol85Parser.RULE_dateWrittenParagraph = 9;
    Cobol85Parser.RULE_dateCompiledParagraph = 10;
    Cobol85Parser.RULE_securityParagraph = 11;
    Cobol85Parser.RULE_remarksParagraph = 12;
    Cobol85Parser.RULE_environmentDivision = 13;
    Cobol85Parser.RULE_environmentDivisionBody = 14;
    Cobol85Parser.RULE_configurationSection = 15;
    Cobol85Parser.RULE_configurationSectionParagraph = 16;
    Cobol85Parser.RULE_sourceComputerParagraph = 17;
    Cobol85Parser.RULE_objectComputerParagraph = 18;
    Cobol85Parser.RULE_objectComputerClause = 19;
    Cobol85Parser.RULE_memorySizeClause = 20;
    Cobol85Parser.RULE_diskSizeClause = 21;
    Cobol85Parser.RULE_collatingSequenceClause = 22;
    Cobol85Parser.RULE_collatingSequenceClauseAlphanumeric = 23;
    Cobol85Parser.RULE_collatingSequenceClauseNational = 24;
    Cobol85Parser.RULE_segmentLimitClause = 25;
    Cobol85Parser.RULE_characterSetClause = 26;
    Cobol85Parser.RULE_specialNamesParagraph = 27;
    Cobol85Parser.RULE_specialNameClause = 28;
    Cobol85Parser.RULE_alphabetClause = 29;
    Cobol85Parser.RULE_alphabetClauseFormat1 = 30;
    Cobol85Parser.RULE_alphabetLiterals = 31;
    Cobol85Parser.RULE_alphabetThrough = 32;
    Cobol85Parser.RULE_alphabetAlso = 33;
    Cobol85Parser.RULE_alphabetClauseFormat2 = 34;
    Cobol85Parser.RULE_channelClause = 35;
    Cobol85Parser.RULE_classClause = 36;
    Cobol85Parser.RULE_classClauseThrough = 37;
    Cobol85Parser.RULE_classClauseFrom = 38;
    Cobol85Parser.RULE_classClauseTo = 39;
    Cobol85Parser.RULE_currencySignClause = 40;
    Cobol85Parser.RULE_decimalPointClause = 41;
    Cobol85Parser.RULE_defaultComputationalSignClause = 42;
    Cobol85Parser.RULE_defaultDisplaySignClause = 43;
    Cobol85Parser.RULE_environmentSwitchNameClause = 44;
    Cobol85Parser.RULE_environmentSwitchNameSpecialNamesStatusPhrase = 45;
    Cobol85Parser.RULE_odtClause = 46;
    Cobol85Parser.RULE_reserveNetworkClause = 47;
    Cobol85Parser.RULE_symbolicCharactersClause = 48;
    Cobol85Parser.RULE_symbolicCharacters = 49;
    Cobol85Parser.RULE_inputOutputSection = 50;
    Cobol85Parser.RULE_inputOutputSectionParagraph = 51;
    Cobol85Parser.RULE_fileControlParagraph = 52;
    Cobol85Parser.RULE_fileControlEntry = 53;
    Cobol85Parser.RULE_selectClause = 54;
    Cobol85Parser.RULE_fileControlClause = 55;
    Cobol85Parser.RULE_assignClause = 56;
    Cobol85Parser.RULE_reserveClause = 57;
    Cobol85Parser.RULE_organizationClause = 58;
    Cobol85Parser.RULE_paddingCharacterClause = 59;
    Cobol85Parser.RULE_recordDelimiterClause = 60;
    Cobol85Parser.RULE_accessModeClause = 61;
    Cobol85Parser.RULE_recordKeyClause = 62;
    Cobol85Parser.RULE_alternateRecordKeyClause = 63;
    Cobol85Parser.RULE_passwordClause = 64;
    Cobol85Parser.RULE_fileStatusClause = 65;
    Cobol85Parser.RULE_relativeKeyClause = 66;
    Cobol85Parser.RULE_ioControlParagraph = 67;
    Cobol85Parser.RULE_ioControlClause = 68;
    Cobol85Parser.RULE_rerunClause = 69;
    Cobol85Parser.RULE_rerunEveryRecords = 70;
    Cobol85Parser.RULE_rerunEveryOf = 71;
    Cobol85Parser.RULE_rerunEveryClock = 72;
    Cobol85Parser.RULE_sameClause = 73;
    Cobol85Parser.RULE_multipleFileClause = 74;
    Cobol85Parser.RULE_multipleFilePosition = 75;
    Cobol85Parser.RULE_commitmentControlClause = 76;
    Cobol85Parser.RULE_dataDivision = 77;
    Cobol85Parser.RULE_dataDivisionSection = 78;
    Cobol85Parser.RULE_fileSection = 79;
    Cobol85Parser.RULE_fileDescriptionEntry = 80;
    Cobol85Parser.RULE_fileDescriptionEntryClause = 81;
    Cobol85Parser.RULE_externalClause = 82;
    Cobol85Parser.RULE_globalClause = 83;
    Cobol85Parser.RULE_blockContainsClause = 84;
    Cobol85Parser.RULE_blockContainsTo = 85;
    Cobol85Parser.RULE_recordContainsClause = 86;
    Cobol85Parser.RULE_recordContainsClauseFormat1 = 87;
    Cobol85Parser.RULE_recordContainsClauseFormat2 = 88;
    Cobol85Parser.RULE_recordContainsClauseFormat3 = 89;
    Cobol85Parser.RULE_recordContainsTo = 90;
    Cobol85Parser.RULE_labelRecordsClause = 91;
    Cobol85Parser.RULE_valueOfClause = 92;
    Cobol85Parser.RULE_valuePair = 93;
    Cobol85Parser.RULE_dataRecordsClause = 94;
    Cobol85Parser.RULE_linageClause = 95;
    Cobol85Parser.RULE_linageAt = 96;
    Cobol85Parser.RULE_linageFootingAt = 97;
    Cobol85Parser.RULE_linageLinesAtTop = 98;
    Cobol85Parser.RULE_linageLinesAtBottom = 99;
    Cobol85Parser.RULE_recordingModeClause = 100;
    Cobol85Parser.RULE_modeStatement = 101;
    Cobol85Parser.RULE_codeSetClause = 102;
    Cobol85Parser.RULE_reportClause = 103;
    Cobol85Parser.RULE_dataBaseSection = 104;
    Cobol85Parser.RULE_dataBaseSectionEntry = 105;
    Cobol85Parser.RULE_workingStorageSection = 106;
    Cobol85Parser.RULE_linkageSection = 107;
    Cobol85Parser.RULE_communicationSection = 108;
    Cobol85Parser.RULE_communicationDescriptionEntry = 109;
    Cobol85Parser.RULE_communicationDescriptionEntryFormat1 = 110;
    Cobol85Parser.RULE_communicationDescriptionEntryFormat2 = 111;
    Cobol85Parser.RULE_communicationDescriptionEntryFormat3 = 112;
    Cobol85Parser.RULE_destinationCountClause = 113;
    Cobol85Parser.RULE_destinationTableClause = 114;
    Cobol85Parser.RULE_endKeyClause = 115;
    Cobol85Parser.RULE_errorKeyClause = 116;
    Cobol85Parser.RULE_messageCountClause = 117;
    Cobol85Parser.RULE_messageDateClause = 118;
    Cobol85Parser.RULE_messageTimeClause = 119;
    Cobol85Parser.RULE_statusKeyClause = 120;
    Cobol85Parser.RULE_symbolicDestinationClause = 121;
    Cobol85Parser.RULE_symbolicQueueClause = 122;
    Cobol85Parser.RULE_symbolicSourceClause = 123;
    Cobol85Parser.RULE_symbolicTerminalClause = 124;
    Cobol85Parser.RULE_symbolicSubQueueClause = 125;
    Cobol85Parser.RULE_textLengthClause = 126;
    Cobol85Parser.RULE_localStorageSection = 127;
    Cobol85Parser.RULE_screenSection = 128;
    Cobol85Parser.RULE_screenDescriptionEntry = 129;
    Cobol85Parser.RULE_screenDescriptionBlankClause = 130;
    Cobol85Parser.RULE_screenDescriptionBellClause = 131;
    Cobol85Parser.RULE_screenDescriptionBlinkClause = 132;
    Cobol85Parser.RULE_screenDescriptionEraseClause = 133;
    Cobol85Parser.RULE_screenDescriptionLightClause = 134;
    Cobol85Parser.RULE_screenDescriptionGridClause = 135;
    Cobol85Parser.RULE_screenDescriptionReverseVideoClause = 136;
    Cobol85Parser.RULE_screenDescriptionUnderlineClause = 137;
    Cobol85Parser.RULE_screenDescriptionSizeClause = 138;
    Cobol85Parser.RULE_screenDescriptionLineClause = 139;
    Cobol85Parser.RULE_screenDescriptionColumnClause = 140;
    Cobol85Parser.RULE_screenDescriptionForegroundColorClause = 141;
    Cobol85Parser.RULE_screenDescriptionBackgroundColorClause = 142;
    Cobol85Parser.RULE_screenDescriptionControlClause = 143;
    Cobol85Parser.RULE_screenDescriptionValueClause = 144;
    Cobol85Parser.RULE_screenDescriptionPictureClause = 145;
    Cobol85Parser.RULE_screenDescriptionFromClause = 146;
    Cobol85Parser.RULE_screenDescriptionToClause = 147;
    Cobol85Parser.RULE_screenDescriptionUsingClause = 148;
    Cobol85Parser.RULE_screenDescriptionUsageClause = 149;
    Cobol85Parser.RULE_screenDescriptionBlankWhenZeroClause = 150;
    Cobol85Parser.RULE_screenDescriptionJustifiedClause = 151;
    Cobol85Parser.RULE_screenDescriptionSignClause = 152;
    Cobol85Parser.RULE_screenDescriptionAutoClause = 153;
    Cobol85Parser.RULE_screenDescriptionSecureClause = 154;
    Cobol85Parser.RULE_screenDescriptionRequiredClause = 155;
    Cobol85Parser.RULE_screenDescriptionPromptClause = 156;
    Cobol85Parser.RULE_screenDescriptionPromptOccursClause = 157;
    Cobol85Parser.RULE_screenDescriptionFullClause = 158;
    Cobol85Parser.RULE_screenDescriptionZeroFillClause = 159;
    Cobol85Parser.RULE_reportSection = 160;
    Cobol85Parser.RULE_reportDescription = 161;
    Cobol85Parser.RULE_reportDescriptionEntry = 162;
    Cobol85Parser.RULE_reportDescriptionGlobalClause = 163;
    Cobol85Parser.RULE_reportDescriptionPageLimitClause = 164;
    Cobol85Parser.RULE_reportDescriptionHeadingClause = 165;
    Cobol85Parser.RULE_reportDescriptionFirstDetailClause = 166;
    Cobol85Parser.RULE_reportDescriptionLastDetailClause = 167;
    Cobol85Parser.RULE_reportDescriptionFootingClause = 168;
    Cobol85Parser.RULE_reportGroupDescriptionEntry = 169;
    Cobol85Parser.RULE_reportGroupDescriptionEntryFormat1 = 170;
    Cobol85Parser.RULE_reportGroupDescriptionEntryFormat2 = 171;
    Cobol85Parser.RULE_reportGroupDescriptionEntryFormat3 = 172;
    Cobol85Parser.RULE_reportGroupBlankWhenZeroClause = 173;
    Cobol85Parser.RULE_reportGroupColumnNumberClause = 174;
    Cobol85Parser.RULE_reportGroupIndicateClause = 175;
    Cobol85Parser.RULE_reportGroupJustifiedClause = 176;
    Cobol85Parser.RULE_reportGroupLineNumberClause = 177;
    Cobol85Parser.RULE_reportGroupLineNumberNextPage = 178;
    Cobol85Parser.RULE_reportGroupLineNumberPlus = 179;
    Cobol85Parser.RULE_reportGroupNextGroupClause = 180;
    Cobol85Parser.RULE_reportGroupNextGroupPlus = 181;
    Cobol85Parser.RULE_reportGroupNextGroupNextPage = 182;
    Cobol85Parser.RULE_reportGroupPictureClause = 183;
    Cobol85Parser.RULE_reportGroupResetClause = 184;
    Cobol85Parser.RULE_reportGroupSignClause = 185;
    Cobol85Parser.RULE_reportGroupSourceClause = 186;
    Cobol85Parser.RULE_reportGroupSumClause = 187;
    Cobol85Parser.RULE_reportGroupTypeClause = 188;
    Cobol85Parser.RULE_reportGroupTypeReportHeading = 189;
    Cobol85Parser.RULE_reportGroupTypePageHeading = 190;
    Cobol85Parser.RULE_reportGroupTypeControlHeading = 191;
    Cobol85Parser.RULE_reportGroupTypeDetail = 192;
    Cobol85Parser.RULE_reportGroupTypeControlFooting = 193;
    Cobol85Parser.RULE_reportGroupUsageClause = 194;
    Cobol85Parser.RULE_reportGroupTypePageFooting = 195;
    Cobol85Parser.RULE_reportGroupTypeReportFooting = 196;
    Cobol85Parser.RULE_reportGroupValueClause = 197;
    Cobol85Parser.RULE_programLibrarySection = 198;
    Cobol85Parser.RULE_libraryDescriptionEntry = 199;
    Cobol85Parser.RULE_libraryDescriptionEntryFormat1 = 200;
    Cobol85Parser.RULE_libraryDescriptionEntryFormat2 = 201;
    Cobol85Parser.RULE_libraryAttributeClauseFormat1 = 202;
    Cobol85Parser.RULE_libraryAttributeClauseFormat2 = 203;
    Cobol85Parser.RULE_libraryAttributeFunction = 204;
    Cobol85Parser.RULE_libraryAttributeParameter = 205;
    Cobol85Parser.RULE_libraryAttributeTitle = 206;
    Cobol85Parser.RULE_libraryEntryProcedureClauseFormat1 = 207;
    Cobol85Parser.RULE_libraryEntryProcedureClauseFormat2 = 208;
    Cobol85Parser.RULE_libraryEntryProcedureForClause = 209;
    Cobol85Parser.RULE_libraryEntryProcedureGivingClause = 210;
    Cobol85Parser.RULE_libraryEntryProcedureUsingClause = 211;
    Cobol85Parser.RULE_libraryEntryProcedureUsingName = 212;
    Cobol85Parser.RULE_libraryEntryProcedureWithClause = 213;
    Cobol85Parser.RULE_libraryEntryProcedureWithName = 214;
    Cobol85Parser.RULE_libraryIsCommonClause = 215;
    Cobol85Parser.RULE_libraryIsGlobalClause = 216;
    Cobol85Parser.RULE_dataDescriptionEntry = 217;
    Cobol85Parser.RULE_dataDescriptionEntryFormat1 = 218;
    Cobol85Parser.RULE_dataDescriptionEntryFormat2 = 219;
    Cobol85Parser.RULE_dataDescriptionEntryFormat3 = 220;
    Cobol85Parser.RULE_dataDescriptionEntryExecSql = 221;
    Cobol85Parser.RULE_dataAlignedClause = 222;
    Cobol85Parser.RULE_dataBlankWhenZeroClause = 223;
    Cobol85Parser.RULE_dataCommonOwnLocalClause = 224;
    Cobol85Parser.RULE_dataExternalClause = 225;
    Cobol85Parser.RULE_dataGlobalClause = 226;
    Cobol85Parser.RULE_dataIntegerStringClause = 227;
    Cobol85Parser.RULE_dataJustifiedClause = 228;
    Cobol85Parser.RULE_dataOccursClause = 229;
    Cobol85Parser.RULE_dataOccursTo = 230;
    Cobol85Parser.RULE_dataOccursSort = 231;
    Cobol85Parser.RULE_dataPictureClause = 232;
    Cobol85Parser.RULE_pictureString = 233;
    Cobol85Parser.RULE_pictureChars = 234;
    Cobol85Parser.RULE_pictureCardinality = 235;
    Cobol85Parser.RULE_dataReceivedByClause = 236;
    Cobol85Parser.RULE_dataRecordAreaClause = 237;
    Cobol85Parser.RULE_dataRedefinesClause = 238;
    Cobol85Parser.RULE_dataRenamesClause = 239;
    Cobol85Parser.RULE_dataSignClause = 240;
    Cobol85Parser.RULE_dataSynchronizedClause = 241;
    Cobol85Parser.RULE_dataThreadLocalClause = 242;
    Cobol85Parser.RULE_dataTypeClause = 243;
    Cobol85Parser.RULE_dataTypeDefClause = 244;
    Cobol85Parser.RULE_dataUsageClause = 245;
    Cobol85Parser.RULE_dataUsingClause = 246;
    Cobol85Parser.RULE_dataValueClause = 247;
    Cobol85Parser.RULE_dataValueInterval = 248;
    Cobol85Parser.RULE_dataValueIntervalFrom = 249;
    Cobol85Parser.RULE_dataValueIntervalTo = 250;
    Cobol85Parser.RULE_dataWithLowerBoundsClause = 251;
    Cobol85Parser.RULE_procedureDivision = 252;
    Cobol85Parser.RULE_procedureDivisionUsingClause = 253;
    Cobol85Parser.RULE_procedureDivisionGivingClause = 254;
    Cobol85Parser.RULE_procedureDivisionUsingParameter = 255;
    Cobol85Parser.RULE_procedureDivisionByReferencePhrase = 256;
    Cobol85Parser.RULE_procedureDivisionByReference = 257;
    Cobol85Parser.RULE_procedureDivisionByValuePhrase = 258;
    Cobol85Parser.RULE_procedureDivisionByValue = 259;
    Cobol85Parser.RULE_procedureDeclaratives = 260;
    Cobol85Parser.RULE_procedureDeclarative = 261;
    Cobol85Parser.RULE_procedureSectionHeader = 262;
    Cobol85Parser.RULE_procedureDivisionBody = 263;
    Cobol85Parser.RULE_procedureSection = 264;
    Cobol85Parser.RULE_paragraphs = 265;
    Cobol85Parser.RULE_paragraph = 266;
    Cobol85Parser.RULE_sentence = 267;
    Cobol85Parser.RULE_statement = 268;
    Cobol85Parser.RULE_acceptStatement = 269;
    Cobol85Parser.RULE_acceptFromDateStatement = 270;
    Cobol85Parser.RULE_acceptFromMnemonicStatement = 271;
    Cobol85Parser.RULE_acceptFromEscapeKeyStatement = 272;
    Cobol85Parser.RULE_acceptMessageCountStatement = 273;
    Cobol85Parser.RULE_addStatement = 274;
    Cobol85Parser.RULE_addToStatement = 275;
    Cobol85Parser.RULE_addToGivingStatement = 276;
    Cobol85Parser.RULE_addCorrespondingStatement = 277;
    Cobol85Parser.RULE_addFrom = 278;
    Cobol85Parser.RULE_addTo = 279;
    Cobol85Parser.RULE_addToGiving = 280;
    Cobol85Parser.RULE_addGiving = 281;
    Cobol85Parser.RULE_alteredGoTo = 282;
    Cobol85Parser.RULE_alterStatement = 283;
    Cobol85Parser.RULE_alterProceedTo = 284;
    Cobol85Parser.RULE_callStatement = 285;
    Cobol85Parser.RULE_callUsingPhrase = 286;
    Cobol85Parser.RULE_callUsingParameter = 287;
    Cobol85Parser.RULE_callByReferencePhrase = 288;
    Cobol85Parser.RULE_callByReference = 289;
    Cobol85Parser.RULE_callByValuePhrase = 290;
    Cobol85Parser.RULE_callByValue = 291;
    Cobol85Parser.RULE_callByContentPhrase = 292;
    Cobol85Parser.RULE_callByContent = 293;
    Cobol85Parser.RULE_callGivingPhrase = 294;
    Cobol85Parser.RULE_cancelStatement = 295;
    Cobol85Parser.RULE_cancelCall = 296;
    Cobol85Parser.RULE_closeStatement = 297;
    Cobol85Parser.RULE_closeFile = 298;
    Cobol85Parser.RULE_closeReelUnitStatement = 299;
    Cobol85Parser.RULE_closeRelativeStatement = 300;
    Cobol85Parser.RULE_closePortFileIOStatement = 301;
    Cobol85Parser.RULE_closePortFileIOUsing = 302;
    Cobol85Parser.RULE_closePortFileIOUsingCloseDisposition = 303;
    Cobol85Parser.RULE_closePortFileIOUsingAssociatedData = 304;
    Cobol85Parser.RULE_closePortFileIOUsingAssociatedDataLength = 305;
    Cobol85Parser.RULE_computeStatement = 306;
    Cobol85Parser.RULE_computeStore = 307;
    Cobol85Parser.RULE_continueStatement = 308;
    Cobol85Parser.RULE_deleteStatement = 309;
    Cobol85Parser.RULE_disableStatement = 310;
    Cobol85Parser.RULE_displayStatement = 311;
    Cobol85Parser.RULE_displayOperand = 312;
    Cobol85Parser.RULE_displayAt = 313;
    Cobol85Parser.RULE_displayUpon = 314;
    Cobol85Parser.RULE_displayWith = 315;
    Cobol85Parser.RULE_divideStatement = 316;
    Cobol85Parser.RULE_divideIntoStatement = 317;
    Cobol85Parser.RULE_divideIntoGivingStatement = 318;
    Cobol85Parser.RULE_divideByGivingStatement = 319;
    Cobol85Parser.RULE_divideGivingPhrase = 320;
    Cobol85Parser.RULE_divideInto = 321;
    Cobol85Parser.RULE_divideGiving = 322;
    Cobol85Parser.RULE_divideRemainder = 323;
    Cobol85Parser.RULE_enableStatement = 324;
    Cobol85Parser.RULE_entryStatement = 325;
    Cobol85Parser.RULE_evaluateStatement = 326;
    Cobol85Parser.RULE_evaluateSelect = 327;
    Cobol85Parser.RULE_evaluateAlsoSelect = 328;
    Cobol85Parser.RULE_evaluateWhenPhrase = 329;
    Cobol85Parser.RULE_evaluateWhen = 330;
    Cobol85Parser.RULE_evaluateCondition = 331;
    Cobol85Parser.RULE_evaluateThrough = 332;
    Cobol85Parser.RULE_evaluateAlsoCondition = 333;
    Cobol85Parser.RULE_evaluateWhenOther = 334;
    Cobol85Parser.RULE_evaluateValue = 335;
    Cobol85Parser.RULE_execCicsStatement = 336;
    Cobol85Parser.RULE_execSqlStatement = 337;
    Cobol85Parser.RULE_execSqlImsStatement = 338;
    Cobol85Parser.RULE_exhibitStatement = 339;
    Cobol85Parser.RULE_exhibitOperand = 340;
    Cobol85Parser.RULE_exitStatement = 341;
    Cobol85Parser.RULE_generateStatement = 342;
    Cobol85Parser.RULE_gobackStatement = 343;
    Cobol85Parser.RULE_goToStatement = 344;
    Cobol85Parser.RULE_goToStatementSimple = 345;
    Cobol85Parser.RULE_goToDependingOnStatement = 346;
    Cobol85Parser.RULE_ifStatement = 347;
    Cobol85Parser.RULE_ifThen = 348;
    Cobol85Parser.RULE_ifElse = 349;
    Cobol85Parser.RULE_initializeStatement = 350;
    Cobol85Parser.RULE_initializeReplacingPhrase = 351;
    Cobol85Parser.RULE_initializeReplacingBy = 352;
    Cobol85Parser.RULE_initiateStatement = 353;
    Cobol85Parser.RULE_inspectStatement = 354;
    Cobol85Parser.RULE_inspectTallyingPhrase = 355;
    Cobol85Parser.RULE_inspectReplacingPhrase = 356;
    Cobol85Parser.RULE_inspectTallyingReplacingPhrase = 357;
    Cobol85Parser.RULE_inspectConvertingPhrase = 358;
    Cobol85Parser.RULE_inspectFor = 359;
    Cobol85Parser.RULE_inspectCharacters = 360;
    Cobol85Parser.RULE_inspectReplacingCharacters = 361;
    Cobol85Parser.RULE_inspectAllLeadings = 362;
    Cobol85Parser.RULE_inspectReplacingAllLeadings = 363;
    Cobol85Parser.RULE_inspectAllLeading = 364;
    Cobol85Parser.RULE_inspectReplacingAllLeading = 365;
    Cobol85Parser.RULE_inspectBy = 366;
    Cobol85Parser.RULE_inspectTo = 367;
    Cobol85Parser.RULE_inspectBeforeAfter = 368;
    Cobol85Parser.RULE_mergeStatement = 369;
    Cobol85Parser.RULE_mergeOnKeyClause = 370;
    Cobol85Parser.RULE_mergeCollatingSequencePhrase = 371;
    Cobol85Parser.RULE_mergeCollatingAlphanumeric = 372;
    Cobol85Parser.RULE_mergeCollatingNational = 373;
    Cobol85Parser.RULE_mergeUsing = 374;
    Cobol85Parser.RULE_mergeOutputProcedurePhrase = 375;
    Cobol85Parser.RULE_mergeOutputThrough = 376;
    Cobol85Parser.RULE_mergeGivingPhrase = 377;
    Cobol85Parser.RULE_mergeGiving = 378;
    Cobol85Parser.RULE_moveStatement = 379;
    Cobol85Parser.RULE_moveToStatement = 380;
    Cobol85Parser.RULE_moveToSendingArea = 381;
    Cobol85Parser.RULE_moveCorrespondingToStatement = 382;
    Cobol85Parser.RULE_moveCorrespondingToSendingArea = 383;
    Cobol85Parser.RULE_multiplyStatement = 384;
    Cobol85Parser.RULE_multiplyRegular = 385;
    Cobol85Parser.RULE_multiplyRegularOperand = 386;
    Cobol85Parser.RULE_multiplyGiving = 387;
    Cobol85Parser.RULE_multiplyGivingOperand = 388;
    Cobol85Parser.RULE_multiplyGivingResult = 389;
    Cobol85Parser.RULE_openStatement = 390;
    Cobol85Parser.RULE_openInputStatement = 391;
    Cobol85Parser.RULE_openInput = 392;
    Cobol85Parser.RULE_openOutputStatement = 393;
    Cobol85Parser.RULE_openOutput = 394;
    Cobol85Parser.RULE_openIOStatement = 395;
    Cobol85Parser.RULE_openExtendStatement = 396;
    Cobol85Parser.RULE_performStatement = 397;
    Cobol85Parser.RULE_performInlineStatement = 398;
    Cobol85Parser.RULE_performProcedureStatement = 399;
    Cobol85Parser.RULE_performType = 400;
    Cobol85Parser.RULE_performTimes = 401;
    Cobol85Parser.RULE_performUntil = 402;
    Cobol85Parser.RULE_performVarying = 403;
    Cobol85Parser.RULE_performVaryingClause = 404;
    Cobol85Parser.RULE_performVaryingPhrase = 405;
    Cobol85Parser.RULE_performAfter = 406;
    Cobol85Parser.RULE_performFrom = 407;
    Cobol85Parser.RULE_performBy = 408;
    Cobol85Parser.RULE_performTestClause = 409;
    Cobol85Parser.RULE_purgeStatement = 410;
    Cobol85Parser.RULE_readStatement = 411;
    Cobol85Parser.RULE_readInto = 412;
    Cobol85Parser.RULE_readWith = 413;
    Cobol85Parser.RULE_readKey = 414;
    Cobol85Parser.RULE_receiveStatement = 415;
    Cobol85Parser.RULE_receiveFromStatement = 416;
    Cobol85Parser.RULE_receiveFrom = 417;
    Cobol85Parser.RULE_receiveIntoStatement = 418;
    Cobol85Parser.RULE_receiveNoData = 419;
    Cobol85Parser.RULE_receiveWithData = 420;
    Cobol85Parser.RULE_receiveBefore = 421;
    Cobol85Parser.RULE_receiveWith = 422;
    Cobol85Parser.RULE_receiveThread = 423;
    Cobol85Parser.RULE_receiveSize = 424;
    Cobol85Parser.RULE_receiveStatus = 425;
    Cobol85Parser.RULE_releaseStatement = 426;
    Cobol85Parser.RULE_returnStatement = 427;
    Cobol85Parser.RULE_returnInto = 428;
    Cobol85Parser.RULE_rewriteStatement = 429;
    Cobol85Parser.RULE_rewriteFrom = 430;
    Cobol85Parser.RULE_searchStatement = 431;
    Cobol85Parser.RULE_searchVarying = 432;
    Cobol85Parser.RULE_searchWhen = 433;
    Cobol85Parser.RULE_sendStatement = 434;
    Cobol85Parser.RULE_sendStatementSync = 435;
    Cobol85Parser.RULE_sendStatementAsync = 436;
    Cobol85Parser.RULE_sendFromPhrase = 437;
    Cobol85Parser.RULE_sendWithPhrase = 438;
    Cobol85Parser.RULE_sendReplacingPhrase = 439;
    Cobol85Parser.RULE_sendAdvancingPhrase = 440;
    Cobol85Parser.RULE_sendAdvancingPage = 441;
    Cobol85Parser.RULE_sendAdvancingLines = 442;
    Cobol85Parser.RULE_sendAdvancingMnemonic = 443;
    Cobol85Parser.RULE_setStatement = 444;
    Cobol85Parser.RULE_setToStatement = 445;
    Cobol85Parser.RULE_setUpDownByStatement = 446;
    Cobol85Parser.RULE_setTo = 447;
    Cobol85Parser.RULE_setToValue = 448;
    Cobol85Parser.RULE_setByValue = 449;
    Cobol85Parser.RULE_sortStatement = 450;
    Cobol85Parser.RULE_sortOnKeyClause = 451;
    Cobol85Parser.RULE_sortDuplicatesPhrase = 452;
    Cobol85Parser.RULE_sortCollatingSequencePhrase = 453;
    Cobol85Parser.RULE_sortCollatingAlphanumeric = 454;
    Cobol85Parser.RULE_sortCollatingNational = 455;
    Cobol85Parser.RULE_sortInputProcedurePhrase = 456;
    Cobol85Parser.RULE_sortInputThrough = 457;
    Cobol85Parser.RULE_sortUsing = 458;
    Cobol85Parser.RULE_sortOutputProcedurePhrase = 459;
    Cobol85Parser.RULE_sortOutputThrough = 460;
    Cobol85Parser.RULE_sortGivingPhrase = 461;
    Cobol85Parser.RULE_sortGiving = 462;
    Cobol85Parser.RULE_startStatement = 463;
    Cobol85Parser.RULE_startKey = 464;
    Cobol85Parser.RULE_stopStatement = 465;
    Cobol85Parser.RULE_stringStatement = 466;
    Cobol85Parser.RULE_stringSendingPhrase = 467;
    Cobol85Parser.RULE_stringSending = 468;
    Cobol85Parser.RULE_stringDelimitedByPhrase = 469;
    Cobol85Parser.RULE_stringForPhrase = 470;
    Cobol85Parser.RULE_stringIntoPhrase = 471;
    Cobol85Parser.RULE_stringWithPointerPhrase = 472;
    Cobol85Parser.RULE_subtractStatement = 473;
    Cobol85Parser.RULE_subtractFromStatement = 474;
    Cobol85Parser.RULE_subtractFromGivingStatement = 475;
    Cobol85Parser.RULE_subtractCorrespondingStatement = 476;
    Cobol85Parser.RULE_subtractSubtrahend = 477;
    Cobol85Parser.RULE_subtractMinuend = 478;
    Cobol85Parser.RULE_subtractMinuendGiving = 479;
    Cobol85Parser.RULE_subtractGiving = 480;
    Cobol85Parser.RULE_subtractMinuendCorresponding = 481;
    Cobol85Parser.RULE_terminateStatement = 482;
    Cobol85Parser.RULE_unstringStatement = 483;
    Cobol85Parser.RULE_unstringSendingPhrase = 484;
    Cobol85Parser.RULE_unstringDelimitedByPhrase = 485;
    Cobol85Parser.RULE_unstringOrAllPhrase = 486;
    Cobol85Parser.RULE_unstringIntoPhrase = 487;
    Cobol85Parser.RULE_unstringInto = 488;
    Cobol85Parser.RULE_unstringDelimiterIn = 489;
    Cobol85Parser.RULE_unstringCountIn = 490;
    Cobol85Parser.RULE_unstringWithPointerPhrase = 491;
    Cobol85Parser.RULE_unstringTallyingPhrase = 492;
    Cobol85Parser.RULE_useStatement = 493;
    Cobol85Parser.RULE_useAfterClause = 494;
    Cobol85Parser.RULE_useAfterOn = 495;
    Cobol85Parser.RULE_useDebugClause = 496;
    Cobol85Parser.RULE_useDebugOn = 497;
    Cobol85Parser.RULE_writeStatement = 498;
    Cobol85Parser.RULE_writeFromPhrase = 499;
    Cobol85Parser.RULE_writeAdvancingPhrase = 500;
    Cobol85Parser.RULE_writeAdvancingPage = 501;
    Cobol85Parser.RULE_writeAdvancingLines = 502;
    Cobol85Parser.RULE_writeAdvancingMnemonic = 503;
    Cobol85Parser.RULE_writeAtEndOfPagePhrase = 504;
    Cobol85Parser.RULE_writeNotAtEndOfPagePhrase = 505;
    Cobol85Parser.RULE_atEndPhrase = 506;
    Cobol85Parser.RULE_notAtEndPhrase = 507;
    Cobol85Parser.RULE_invalidKeyPhrase = 508;
    Cobol85Parser.RULE_notInvalidKeyPhrase = 509;
    Cobol85Parser.RULE_onOverflowPhrase = 510;
    Cobol85Parser.RULE_notOnOverflowPhrase = 511;
    Cobol85Parser.RULE_onSizeErrorPhrase = 512;
    Cobol85Parser.RULE_notOnSizeErrorPhrase = 513;
    Cobol85Parser.RULE_onExceptionClause = 514;
    Cobol85Parser.RULE_notOnExceptionClause = 515;
    Cobol85Parser.RULE_arithmeticExpression = 516;
    Cobol85Parser.RULE_plusMinus = 517;
    Cobol85Parser.RULE_multDivs = 518;
    Cobol85Parser.RULE_multDiv = 519;
    Cobol85Parser.RULE_powers = 520;
    Cobol85Parser.RULE_power = 521;
    Cobol85Parser.RULE_basis = 522;
    Cobol85Parser.RULE_condition = 523;
    Cobol85Parser.RULE_andOrCondition = 524;
    Cobol85Parser.RULE_combinableCondition = 525;
    Cobol85Parser.RULE_simpleCondition = 526;
    Cobol85Parser.RULE_classCondition = 527;
    Cobol85Parser.RULE_conditionNameReference = 528;
    Cobol85Parser.RULE_conditionNameSubscriptReference = 529;
    Cobol85Parser.RULE_relationCondition = 530;
    Cobol85Parser.RULE_relationSignCondition = 531;
    Cobol85Parser.RULE_relationArithmeticComparison = 532;
    Cobol85Parser.RULE_relationCombinedComparison = 533;
    Cobol85Parser.RULE_relationCombinedCondition = 534;
    Cobol85Parser.RULE_relationalOperator = 535;
    Cobol85Parser.RULE_abbreviation = 536;
    Cobol85Parser.RULE_identifier = 537;
    Cobol85Parser.RULE_tableCall = 538;
    Cobol85Parser.RULE_functionCall = 539;
    Cobol85Parser.RULE_referenceModifier = 540;
    Cobol85Parser.RULE_characterPosition = 541;
    Cobol85Parser.RULE_length = 542;
    Cobol85Parser.RULE_subscript = 543;
    Cobol85Parser.RULE_argument = 544;
    Cobol85Parser.RULE_qualifiedDataName = 545;
    Cobol85Parser.RULE_qualifiedDataNameFormat1 = 546;
    Cobol85Parser.RULE_qualifiedDataNameFormat2 = 547;
    Cobol85Parser.RULE_qualifiedDataNameFormat3 = 548;
    Cobol85Parser.RULE_qualifiedDataNameFormat4 = 549;
    Cobol85Parser.RULE_qualifiedInData = 550;
    Cobol85Parser.RULE_inData = 551;
    Cobol85Parser.RULE_inFile = 552;
    Cobol85Parser.RULE_inMnemonic = 553;
    Cobol85Parser.RULE_inSection = 554;
    Cobol85Parser.RULE_inLibrary = 555;
    Cobol85Parser.RULE_inTable = 556;
    Cobol85Parser.RULE_alphabetName = 557;
    Cobol85Parser.RULE_assignmentName = 558;
    Cobol85Parser.RULE_basisName = 559;
    Cobol85Parser.RULE_cdName = 560;
    Cobol85Parser.RULE_className = 561;
    Cobol85Parser.RULE_computerName = 562;
    Cobol85Parser.RULE_conditionName = 563;
    Cobol85Parser.RULE_dataName = 564;
    Cobol85Parser.RULE_dataDescName = 565;
    Cobol85Parser.RULE_environmentName = 566;
    Cobol85Parser.RULE_fileName = 567;
    Cobol85Parser.RULE_functionName = 568;
    Cobol85Parser.RULE_indexName = 569;
    Cobol85Parser.RULE_languageName = 570;
    Cobol85Parser.RULE_libraryName = 571;
    Cobol85Parser.RULE_localName = 572;
    Cobol85Parser.RULE_mnemonicName = 573;
    Cobol85Parser.RULE_paragraphName = 574;
    Cobol85Parser.RULE_procedureName = 575;
    Cobol85Parser.RULE_programName = 576;
    Cobol85Parser.RULE_recordName = 577;
    Cobol85Parser.RULE_reportName = 578;
    Cobol85Parser.RULE_routineName = 579;
    Cobol85Parser.RULE_screenName = 580;
    Cobol85Parser.RULE_sectionName = 581;
    Cobol85Parser.RULE_systemName = 582;
    Cobol85Parser.RULE_symbolicCharacter = 583;
    Cobol85Parser.RULE_textName = 584;
    Cobol85Parser.RULE_cobolWord = 585;
    Cobol85Parser.RULE_literal = 586;
    Cobol85Parser.RULE_booleanLiteral = 587;
    Cobol85Parser.RULE_numericLiteral = 588;
    Cobol85Parser.RULE_integerLiteral = 589;
    Cobol85Parser.RULE_cicsDfhRespLiteral = 590;
    Cobol85Parser.RULE_cicsDfhValueLiteral = 591;
    Cobol85Parser.RULE_figurativeConstant = 592;
    Cobol85Parser.RULE_specialRegister = 593;
    Cobol85Parser.RULE_commentEntry = 594;
    // tslint:disable:no-trailing-whitespace
    Cobol85Parser.ruleNames = [
        "startRule", "compilationUnit", "programUnit", "endProgramStatement",
        "identificationDivision", "identificationDivisionBody", "programIdParagraph",
        "authorParagraph", "installationParagraph", "dateWrittenParagraph", "dateCompiledParagraph",
        "securityParagraph", "remarksParagraph", "environmentDivision", "environmentDivisionBody",
        "configurationSection", "configurationSectionParagraph", "sourceComputerParagraph",
        "objectComputerParagraph", "objectComputerClause", "memorySizeClause",
        "diskSizeClause", "collatingSequenceClause", "collatingSequenceClauseAlphanumeric",
        "collatingSequenceClauseNational", "segmentLimitClause", "characterSetClause",
        "specialNamesParagraph", "specialNameClause", "alphabetClause", "alphabetClauseFormat1",
        "alphabetLiterals", "alphabetThrough", "alphabetAlso", "alphabetClauseFormat2",
        "channelClause", "classClause", "classClauseThrough", "classClauseFrom",
        "classClauseTo", "currencySignClause", "decimalPointClause", "defaultComputationalSignClause",
        "defaultDisplaySignClause", "environmentSwitchNameClause", "environmentSwitchNameSpecialNamesStatusPhrase",
        "odtClause", "reserveNetworkClause", "symbolicCharactersClause", "symbolicCharacters",
        "inputOutputSection", "inputOutputSectionParagraph", "fileControlParagraph",
        "fileControlEntry", "selectClause", "fileControlClause", "assignClause",
        "reserveClause", "organizationClause", "paddingCharacterClause", "recordDelimiterClause",
        "accessModeClause", "recordKeyClause", "alternateRecordKeyClause", "passwordClause",
        "fileStatusClause", "relativeKeyClause", "ioControlParagraph", "ioControlClause",
        "rerunClause", "rerunEveryRecords", "rerunEveryOf", "rerunEveryClock",
        "sameClause", "multipleFileClause", "multipleFilePosition", "commitmentControlClause",
        "dataDivision", "dataDivisionSection", "fileSection", "fileDescriptionEntry",
        "fileDescriptionEntryClause", "externalClause", "globalClause", "blockContainsClause",
        "blockContainsTo", "recordContainsClause", "recordContainsClauseFormat1",
        "recordContainsClauseFormat2", "recordContainsClauseFormat3", "recordContainsTo",
        "labelRecordsClause", "valueOfClause", "valuePair", "dataRecordsClause",
        "linageClause", "linageAt", "linageFootingAt", "linageLinesAtTop", "linageLinesAtBottom",
        "recordingModeClause", "modeStatement", "codeSetClause", "reportClause",
        "dataBaseSection", "dataBaseSectionEntry", "workingStorageSection", "linkageSection",
        "communicationSection", "communicationDescriptionEntry", "communicationDescriptionEntryFormat1",
        "communicationDescriptionEntryFormat2", "communicationDescriptionEntryFormat3",
        "destinationCountClause", "destinationTableClause", "endKeyClause", "errorKeyClause",
        "messageCountClause", "messageDateClause", "messageTimeClause", "statusKeyClause",
        "symbolicDestinationClause", "symbolicQueueClause", "symbolicSourceClause",
        "symbolicTerminalClause", "symbolicSubQueueClause", "textLengthClause",
        "localStorageSection", "screenSection", "screenDescriptionEntry", "screenDescriptionBlankClause",
        "screenDescriptionBellClause", "screenDescriptionBlinkClause", "screenDescriptionEraseClause",
        "screenDescriptionLightClause", "screenDescriptionGridClause", "screenDescriptionReverseVideoClause",
        "screenDescriptionUnderlineClause", "screenDescriptionSizeClause", "screenDescriptionLineClause",
        "screenDescriptionColumnClause", "screenDescriptionForegroundColorClause",
        "screenDescriptionBackgroundColorClause", "screenDescriptionControlClause",
        "screenDescriptionValueClause", "screenDescriptionPictureClause", "screenDescriptionFromClause",
        "screenDescriptionToClause", "screenDescriptionUsingClause", "screenDescriptionUsageClause",
        "screenDescriptionBlankWhenZeroClause", "screenDescriptionJustifiedClause",
        "screenDescriptionSignClause", "screenDescriptionAutoClause", "screenDescriptionSecureClause",
        "screenDescriptionRequiredClause", "screenDescriptionPromptClause", "screenDescriptionPromptOccursClause",
        "screenDescriptionFullClause", "screenDescriptionZeroFillClause", "reportSection",
        "reportDescription", "reportDescriptionEntry", "reportDescriptionGlobalClause",
        "reportDescriptionPageLimitClause", "reportDescriptionHeadingClause",
        "reportDescriptionFirstDetailClause", "reportDescriptionLastDetailClause",
        "reportDescriptionFootingClause", "reportGroupDescriptionEntry", "reportGroupDescriptionEntryFormat1",
        "reportGroupDescriptionEntryFormat2", "reportGroupDescriptionEntryFormat3",
        "reportGroupBlankWhenZeroClause", "reportGroupColumnNumberClause", "reportGroupIndicateClause",
        "reportGroupJustifiedClause", "reportGroupLineNumberClause", "reportGroupLineNumberNextPage",
        "reportGroupLineNumberPlus", "reportGroupNextGroupClause", "reportGroupNextGroupPlus",
        "reportGroupNextGroupNextPage", "reportGroupPictureClause", "reportGroupResetClause",
        "reportGroupSignClause", "reportGroupSourceClause", "reportGroupSumClause",
        "reportGroupTypeClause", "reportGroupTypeReportHeading", "reportGroupTypePageHeading",
        "reportGroupTypeControlHeading", "reportGroupTypeDetail", "reportGroupTypeControlFooting",
        "reportGroupUsageClause", "reportGroupTypePageFooting", "reportGroupTypeReportFooting",
        "reportGroupValueClause", "programLibrarySection", "libraryDescriptionEntry",
        "libraryDescriptionEntryFormat1", "libraryDescriptionEntryFormat2", "libraryAttributeClauseFormat1",
        "libraryAttributeClauseFormat2", "libraryAttributeFunction", "libraryAttributeParameter",
        "libraryAttributeTitle", "libraryEntryProcedureClauseFormat1", "libraryEntryProcedureClauseFormat2",
        "libraryEntryProcedureForClause", "libraryEntryProcedureGivingClause",
        "libraryEntryProcedureUsingClause", "libraryEntryProcedureUsingName",
        "libraryEntryProcedureWithClause", "libraryEntryProcedureWithName", "libraryIsCommonClause",
        "libraryIsGlobalClause", "dataDescriptionEntry", "dataDescriptionEntryFormat1",
        "dataDescriptionEntryFormat2", "dataDescriptionEntryFormat3", "dataDescriptionEntryExecSql",
        "dataAlignedClause", "dataBlankWhenZeroClause", "dataCommonOwnLocalClause",
        "dataExternalClause", "dataGlobalClause", "dataIntegerStringClause", "dataJustifiedClause",
        "dataOccursClause", "dataOccursTo", "dataOccursSort", "dataPictureClause",
        "pictureString", "pictureChars", "pictureCardinality", "dataReceivedByClause",
        "dataRecordAreaClause", "dataRedefinesClause", "dataRenamesClause", "dataSignClause",
        "dataSynchronizedClause", "dataThreadLocalClause", "dataTypeClause", "dataTypeDefClause",
        "dataUsageClause", "dataUsingClause", "dataValueClause", "dataValueInterval",
        "dataValueIntervalFrom", "dataValueIntervalTo", "dataWithLowerBoundsClause",
        "procedureDivision", "procedureDivisionUsingClause", "procedureDivisionGivingClause",
        "procedureDivisionUsingParameter", "procedureDivisionByReferencePhrase",
        "procedureDivisionByReference", "procedureDivisionByValuePhrase", "procedureDivisionByValue",
        "procedureDeclaratives", "procedureDeclarative", "procedureSectionHeader",
        "procedureDivisionBody", "procedureSection", "paragraphs", "paragraph",
        "sentence", "statement", "acceptStatement", "acceptFromDateStatement",
        "acceptFromMnemonicStatement", "acceptFromEscapeKeyStatement", "acceptMessageCountStatement",
        "addStatement", "addToStatement", "addToGivingStatement", "addCorrespondingStatement",
        "addFrom", "addTo", "addToGiving", "addGiving", "alteredGoTo", "alterStatement",
        "alterProceedTo", "callStatement", "callUsingPhrase", "callUsingParameter",
        "callByReferencePhrase", "callByReference", "callByValuePhrase", "callByValue",
        "callByContentPhrase", "callByContent", "callGivingPhrase", "cancelStatement",
        "cancelCall", "closeStatement", "closeFile", "closeReelUnitStatement",
        "closeRelativeStatement", "closePortFileIOStatement", "closePortFileIOUsing",
        "closePortFileIOUsingCloseDisposition", "closePortFileIOUsingAssociatedData",
        "closePortFileIOUsingAssociatedDataLength", "computeStatement", "computeStore",
        "continueStatement", "deleteStatement", "disableStatement", "displayStatement",
        "displayOperand", "displayAt", "displayUpon", "displayWith", "divideStatement",
        "divideIntoStatement", "divideIntoGivingStatement", "divideByGivingStatement",
        "divideGivingPhrase", "divideInto", "divideGiving", "divideRemainder",
        "enableStatement", "entryStatement", "evaluateStatement", "evaluateSelect",
        "evaluateAlsoSelect", "evaluateWhenPhrase", "evaluateWhen", "evaluateCondition",
        "evaluateThrough", "evaluateAlsoCondition", "evaluateWhenOther", "evaluateValue",
        "execCicsStatement", "execSqlStatement", "execSqlImsStatement", "exhibitStatement",
        "exhibitOperand", "exitStatement", "generateStatement", "gobackStatement",
        "goToStatement", "goToStatementSimple", "goToDependingOnStatement", "ifStatement",
        "ifThen", "ifElse", "initializeStatement", "initializeReplacingPhrase",
        "initializeReplacingBy", "initiateStatement", "inspectStatement", "inspectTallyingPhrase",
        "inspectReplacingPhrase", "inspectTallyingReplacingPhrase", "inspectConvertingPhrase",
        "inspectFor", "inspectCharacters", "inspectReplacingCharacters", "inspectAllLeadings",
        "inspectReplacingAllLeadings", "inspectAllLeading", "inspectReplacingAllLeading",
        "inspectBy", "inspectTo", "inspectBeforeAfter", "mergeStatement", "mergeOnKeyClause",
        "mergeCollatingSequencePhrase", "mergeCollatingAlphanumeric", "mergeCollatingNational",
        "mergeUsing", "mergeOutputProcedurePhrase", "mergeOutputThrough", "mergeGivingPhrase",
        "mergeGiving", "moveStatement", "moveToStatement", "moveToSendingArea",
        "moveCorrespondingToStatement", "moveCorrespondingToSendingArea", "multiplyStatement",
        "multiplyRegular", "multiplyRegularOperand", "multiplyGiving", "multiplyGivingOperand",
        "multiplyGivingResult", "openStatement", "openInputStatement", "openInput",
        "openOutputStatement", "openOutput", "openIOStatement", "openExtendStatement",
        "performStatement", "performInlineStatement", "performProcedureStatement",
        "performType", "performTimes", "performUntil", "performVarying", "performVaryingClause",
        "performVaryingPhrase", "performAfter", "performFrom", "performBy", "performTestClause",
        "purgeStatement", "readStatement", "readInto", "readWith", "readKey",
        "receiveStatement", "receiveFromStatement", "receiveFrom", "receiveIntoStatement",
        "receiveNoData", "receiveWithData", "receiveBefore", "receiveWith", "receiveThread",
        "receiveSize", "receiveStatus", "releaseStatement", "returnStatement",
        "returnInto", "rewriteStatement", "rewriteFrom", "searchStatement", "searchVarying",
        "searchWhen", "sendStatement", "sendStatementSync", "sendStatementAsync",
        "sendFromPhrase", "sendWithPhrase", "sendReplacingPhrase", "sendAdvancingPhrase",
        "sendAdvancingPage", "sendAdvancingLines", "sendAdvancingMnemonic", "setStatement",
        "setToStatement", "setUpDownByStatement", "setTo", "setToValue", "setByValue",
        "sortStatement", "sortOnKeyClause", "sortDuplicatesPhrase", "sortCollatingSequencePhrase",
        "sortCollatingAlphanumeric", "sortCollatingNational", "sortInputProcedurePhrase",
        "sortInputThrough", "sortUsing", "sortOutputProcedurePhrase", "sortOutputThrough",
        "sortGivingPhrase", "sortGiving", "startStatement", "startKey", "stopStatement",
        "stringStatement", "stringSendingPhrase", "stringSending", "stringDelimitedByPhrase",
        "stringForPhrase", "stringIntoPhrase", "stringWithPointerPhrase", "subtractStatement",
        "subtractFromStatement", "subtractFromGivingStatement", "subtractCorrespondingStatement",
        "subtractSubtrahend", "subtractMinuend", "subtractMinuendGiving", "subtractGiving",
        "subtractMinuendCorresponding", "terminateStatement", "unstringStatement",
        "unstringSendingPhrase", "unstringDelimitedByPhrase", "unstringOrAllPhrase",
        "unstringIntoPhrase", "unstringInto", "unstringDelimiterIn", "unstringCountIn",
        "unstringWithPointerPhrase", "unstringTallyingPhrase", "useStatement",
        "useAfterClause", "useAfterOn", "useDebugClause", "useDebugOn", "writeStatement",
        "writeFromPhrase", "writeAdvancingPhrase", "writeAdvancingPage", "writeAdvancingLines",
        "writeAdvancingMnemonic", "writeAtEndOfPagePhrase", "writeNotAtEndOfPagePhrase",
        "atEndPhrase", "notAtEndPhrase", "invalidKeyPhrase", "notInvalidKeyPhrase",
        "onOverflowPhrase", "notOnOverflowPhrase", "onSizeErrorPhrase", "notOnSizeErrorPhrase",
        "onExceptionClause", "notOnExceptionClause", "arithmeticExpression", "plusMinus",
        "multDivs", "multDiv", "powers", "power", "basis", "condition", "andOrCondition",
        "combinableCondition", "simpleCondition", "classCondition", "conditionNameReference",
        "conditionNameSubscriptReference", "relationCondition", "relationSignCondition",
        "relationArithmeticComparison", "relationCombinedComparison", "relationCombinedCondition",
        "relationalOperator", "abbreviation", "identifier", "tableCall", "functionCall",
        "referenceModifier", "characterPosition", "length", "subscript", "argument",
        "qualifiedDataName", "qualifiedDataNameFormat1", "qualifiedDataNameFormat2",
        "qualifiedDataNameFormat3", "qualifiedDataNameFormat4", "qualifiedInData",
        "inData", "inFile", "inMnemonic", "inSection", "inLibrary", "inTable",
        "alphabetName", "assignmentName", "basisName", "cdName", "className",
        "computerName", "conditionName", "dataName", "dataDescName", "environmentName",
        "fileName", "functionName", "indexName", "languageName", "libraryName",
        "localName", "mnemonicName", "paragraphName", "procedureName", "programName",
        "recordName", "reportName", "routineName", "screenName", "sectionName",
        "systemName", "symbolicCharacter", "textName", "cobolWord", "literal",
        "booleanLiteral", "numericLiteral", "integerLiteral", "cicsDfhRespLiteral",
        "cicsDfhValueLiteral", "figurativeConstant", "specialRegister", "commentEntry",
    ];
    Cobol85Parser._LITERAL_NAMES = [
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        "'&'", "'*'", "'**'", "':'", "','", "'*>CE'", "'*>'", "'$'", "'\"'", undefined,
        "'.'", "'='", "'*>EXECCICS'", "'*>EXECSQL'", "'*>EXECSQLIMS'", "'<'",
        "'<='", "'('", "'-'", "'>'", "'>='", "'<>'", "'+'", "'''", "')'", "'/'",
        undefined, "'66'", "'77'", "'88'", undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, "', '",
    ];
    Cobol85Parser._SYMBOLIC_NAMES = [
        undefined, "ABORT", "ACCEPT", "ACCESS", "ADD", "ADDRESS", "ADVANCING",
        "AFTER", "ALIGNED", "ALL", "ALPHABET", "ALPHABETIC", "ALPHABETIC_LOWER",
        "ALPHABETIC_UPPER", "ALPHANUMERIC", "ALPHANUMERIC_EDITED", "ALSO", "ALTER",
        "ALTERNATE", "AND", "ANY", "ARE", "AREA", "AREAS", "AS", "ASCENDING",
        "ASCII", "ASSIGN", "ASSOCIATED_DATA", "ASSOCIATED_DATA_LENGTH", "AT",
        "ATTRIBUTE", "AUTHOR", "AUTO", "AUTO_SKIP", "BACKGROUND_COLOR", "BACKGROUND_COLOUR",
        "BASIS", "BEEP", "BEFORE", "BEGINNING", "BELL", "BINARY", "BIT", "BLANK",
        "BLINK", "BLOCK", "BOUNDS", "BOTTOM", "BY", "BYFUNCTION", "BYTITLE", "CALL",
        "CANCEL", "CAPABLE", "CCSVERSION", "CD", "CF", "CH", "CHAINING", "CHANGED",
        "CHANNEL", "CHARACTER", "CHARACTERS", "CLASS", "CLASS_ID", "CLOCK_UNITS",
        "CLOSE", "CLOSE_DISPOSITION", "COBOL", "CODE", "CODE_SET", "COLLATING",
        "COL", "COLUMN", "COM_REG", "COMMA", "COMMITMENT", "COMMON", "COMMUNICATION",
        "COMP", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", "COMPUTATIONAL",
        "COMPUTATIONAL_1", "COMPUTATIONAL_2", "COMPUTATIONAL_3", "COMPUTATIONAL_4",
        "COMPUTATIONAL_5", "COMPUTE", "CONFIGURATION", "CONTAINS", "CONTENT",
        "CONTINUE", "CONTROL", "CONTROL_POINT", "CONTROLS", "CONVENTION", "CONVERTING",
        "COPY", "CORR", "CORRESPONDING", "COUNT", "CRUNCH", "CURRENCY", "CURSOR",
        "DATA", "DATA_BASE", "DATE", "DATE_COMPILED", "DATE_WRITTEN", "DAY", "DAY_OF_WEEK",
        "DBCS", "DE", "DEBUG_CONTENTS", "DEBUG_ITEM", "DEBUG_LINE", "DEBUG_NAME",
        "DEBUG_SUB_1", "DEBUG_SUB_2", "DEBUG_SUB_3", "DEBUGGING", "DECIMAL_POINT",
        "DECLARATIVES", "DEFAULT", "DEFAULT_DISPLAY", "DEFINITION", "DELETE",
        "DELIMITED", "DELIMITER", "DEPENDING", "DESCENDING", "DESTINATION", "DETAIL",
        "DFHRESP", "DFHVALUE", "DISABLE", "DISK", "DISPLAY", "DISPLAY_1", "DIVIDE",
        "DIVISION", "DONTCARE", "DOUBLE", "DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC",
        "EGCS", "EGI", "ELSE", "EMI", "EMPTY_CHECK", "ENABLE", "END", "END_ACCEPT",
        "END_ADD", "END_CALL", "END_COMPUTE", "END_DELETE", "END_DIVIDE", "END_EVALUATE",
        "END_IF", "END_MULTIPLY", "END_OF_PAGE", "END_PERFORM", "END_READ", "END_RECEIVE",
        "END_RETURN", "END_REWRITE", "END_SEARCH", "END_START", "END_STRING",
        "END_SUBTRACT", "END_UNSTRING", "END_WRITE", "ENDING", "ENTER", "ENTRY",
        "ENTRY_PROCEDURE", "ENVIRONMENT", "EOP", "EQUAL", "ERASE", "ERROR", "EOL",
        "EOS", "ESCAPE", "ESI", "EVALUATE", "EVENT", "EVERY", "EXCEPTION", "EXCLUSIVE",
        "EXHIBIT", "EXIT", "EXPORT", "EXTEND", "EXTENDED", "EXTERNAL", "FALSE",
        "FD", "FILE", "FILE_CONTROL", "FILLER", "FINAL", "FIRST", "FOOTING", "FOR",
        "FOREGROUND_COLOR", "FOREGROUND_COLOUR", "FROM", "FULL", "FUNCTION", "FUNCTIONNAME",
        "FUNCTION_POINTER", "GENERATE", "GOBACK", "GIVING", "GLOBAL", "GO", "GREATER",
        "GRID", "GROUP", "HEADING", "HIGHLIGHT", "HIGH_VALUE", "HIGH_VALUES",
        "I_O", "I_O_CONTROL", "ID", "IDENTIFICATION", "IF", "IMPLICIT", "IMPORT",
        "IN", "INDEX", "INDEXED", "INDICATE", "INITIAL", "INITIALIZE", "INITIATE",
        "INPUT", "INPUT_OUTPUT", "INSPECT", "INSTALLATION", "INTEGER", "INTO",
        "INVALID", "INVOKE", "IS", "JUST", "JUSTIFIED", "KANJI", "KEPT", "KEY",
        "KEYBOARD", "LABEL", "LANGUAGE", "LAST", "LB", "LD", "LEADING", "LEFT",
        "LEFTLINE", "LENGTH", "LENGTH_CHECK", "LESS", "LIBACCESS", "LIBPARAMETER",
        "LIBRARY", "LIMIT", "LIMITS", "LINAGE", "LINAGE_COUNTER", "LINE", "LINES",
        "LINE_COUNTER", "LINKAGE", "LIST", "LOCAL", "LOCAL_STORAGE", "LOCK", "LONG_DATE",
        "LONG_TIME", "LOWER", "LOWLIGHT", "LOW_VALUE", "LOW_VALUES", "MEMORY",
        "MERGE", "MESSAGE", "MMDDYYYY", "MODE", "MODULES", "MORE_LABELS", "MOVE",
        "MULTIPLE", "MULTIPLY", "NAMED", "NATIONAL", "NATIONAL_EDITED", "NATIVE",
        "NEGATIVE", "NETWORK", "NEXT", "NO", "NO_ECHO", "NOT", "NULL", "NULLS",
        "NUMBER", "NUMERIC", "NUMERIC_DATE", "NUMERIC_EDITED", "NUMERIC_TIME",
        "OBJECT_COMPUTER", "OCCURS", "ODT", "OF", "OFF", "OMITTED", "ON", "OPEN",
        "OPTIONAL", "OR", "ORDER", "ORDERLY", "ORGANIZATION", "OTHER", "OUTPUT",
        "OVERFLOW", "OVERLINE", "OWN", "PACKED_DECIMAL", "PADDING", "PAGE", "PAGE_COUNTER",
        "PASSWORD", "PERFORM", "PF", "PH", "PIC", "PICTURE", "PLUS", "POINTER",
        "POSITION", "POSITIVE", "PORT", "PRINTER", "PRINTING", "PRIVATE", "PROCEDURE",
        "PROCEDURE_POINTER", "PROCEDURES", "PROCEED", "PROCESS", "PROGRAM", "PROGRAM_ID",
        "PROGRAM_LIBRARY", "PROMPT", "PURGE", "QUEUE", "QUOTE", "QUOTES", "RANDOM",
        "READER", "REMOTE", "RD", "REAL", "READ", "RECEIVE", "RECEIVED", "RECORD",
        "RECORDING", "RECORDS", "RECURSIVE", "REDEFINES", "REEL", "REF", "REFERENCE",
        "REFERENCES", "RELATIVE", "RELEASE", "REMAINDER", "REMARKS", "REMOVAL",
        "REMOVE", "RENAMES", "REPLACE", "REPLACING", "REPORT", "REPORTING", "REPORTS",
        "REQUIRED", "RERUN", "RESERVE", "REVERSE_VIDEO", "RESET", "RETURN", "RETURN_CODE",
        "RETURNING", "REVERSED", "REWIND", "REWRITE", "RF", "RH", "RIGHT", "ROUNDED",
        "RUN", "SAME", "SAVE", "SCREEN", "SD", "SEARCH", "SECTION", "SECURE",
        "SECURITY", "SEGMENT", "SEGMENT_LIMIT", "SELECT", "SEND", "SENTENCE",
        "SEPARATE", "SEQUENCE", "SEQUENTIAL", "SET", "SHARED", "SHAREDBYALL",
        "SHAREDBYRUNUNIT", "SHARING", "SHIFT_IN", "SHIFT_OUT", "SHORT_DATE", "SIGN",
        "SIZE", "SORT", "SORT_CONTROL", "SORT_CORE_SIZE", "SORT_FILE_SIZE", "SORT_MERGE",
        "SORT_MESSAGE", "SORT_MODE_SIZE", "SORT_RETURN", "SOURCE", "SOURCE_COMPUTER",
        "SPACE", "SPACES", "SPECIAL_NAMES", "STANDARD", "STANDARD_1", "STANDARD_2",
        "START", "STATUS", "STOP", "STRING", "SUB_QUEUE_1", "SUB_QUEUE_2", "SUB_QUEUE_3",
        "SUBTRACT", "SUM", "SUPPRESS", "SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED",
        "TABLE", "TALLY", "TALLYING", "TASK", "TAPE", "TERMINAL", "TERMINATE",
        "TEST", "TEXT", "THAN", "THEN", "THREAD", "THREAD_LOCAL", "THROUGH", "THRU",
        "TIME", "TIMER", "TIMES", "TITLE", "TO", "TODAYS_DATE", "TODAYS_NAME",
        "TOP", "TRAILING", "TRUE", "TRUNCATED", "TYPE", "TYPEDEF", "UNDERLINE",
        "UNIT", "UNSTRING", "UNTIL", "UP", "UPON", "USAGE", "USE", "USING", "VALUE",
        "VALUES", "VARYING", "VIRTUAL", "WAIT", "WHEN", "WHEN_COMPILED", "WITH",
        "WORDS", "WORKING_STORAGE", "WRITE", "YEAR", "YYYYMMDD", "YYYYDDD", "ZERO",
        "ZERO_FILL", "ZEROS", "ZEROES", "AMPCHAR", "ASTERISKCHAR", "DOUBLEASTERISKCHAR",
        "COLONCHAR", "COMMACHAR", "COMMENTENTRYTAG", "COMMENTTAG", "DOLLARCHAR",
        "DOUBLEQUOTE", "DOT_FS", "DOT", "EQUALCHAR", "EXECCICSTAG", "EXECSQLTAG",
        "EXECSQLIMSTAG", "LESSTHANCHAR", "LESSTHANOREQUAL", "LPARENCHAR", "MINUSCHAR",
        "MORETHANCHAR", "MORETHANOREQUAL", "NOTEQUALCHAR", "PLUSCHAR", "SINGLEQUOTE",
        "RPARENCHAR", "SLASHCHAR", "NONNUMERICLITERAL", "LEVEL_NUMBER_66", "LEVEL_NUMBER_77",
        "LEVEL_NUMBER_88", "INTEGERLITERAL", "NUMERICLITERAL", "IDENTIFIER", "NEWLINE",
        "EXECCICSLINE", "EXECSQLIMSLINE", "EXECSQLLINE", "COMMENTENTRYLINE", "COMMENTLINE",
        "WS", "SEPARATOR",
    ];
    Cobol85Parser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(Cobol85Parser._LITERAL_NAMES, Cobol85Parser._SYMBOLIC_NAMES, []);
    Cobol85Parser._serializedATNSegments = 12;
    Cobol85Parser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0237\u1892\x04" +
        "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
        "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
        "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
        "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
        "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
        "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
        "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
        "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
        "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
        "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
        "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
        "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
        "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
        "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
        "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
        "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
        "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
        "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
        "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
        "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
        "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
        "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
        "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
        "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
        "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
        "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
        "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
        "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
        "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
        "\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
        "\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
        "\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
        "\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
        "\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
        "\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
        "\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
        "\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
        "\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
        "\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
        "\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
        "\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
        "\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
        "\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
        "\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
        "\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
        "\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
        "\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
        "\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
        "\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
        "\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
        "\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
        "\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
        "\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
        "\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
        "\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
        "\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
        "\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
        "\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
        "\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
        "\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
        "\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
        "\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
        "\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
        "\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
        "\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
        "\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
        "\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
        "\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
        "\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
        "\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
        "\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
        "\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
        "\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
        "\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E\x04" +
        "\u017F\t\u017F\x04\u0180\t\u0180\x04\u0181\t\u0181\x04\u0182\t\u0182\x04" +
        "\u0183\t\u0183\x04\u0184\t\u0184\x04\u0185\t\u0185\x04\u0186\t\u0186\x04" +
        "\u0187\t\u0187\x04\u0188\t\u0188\x04\u0189\t\u0189\x04\u018A\t\u018A\x04" +
        "\u018B\t\u018B\x04\u018C\t\u018C\x04\u018D\t\u018D\x04\u018E\t\u018E\x04" +
        "\u018F\t\u018F\x04\u0190\t\u0190\x04\u0191\t\u0191\x04\u0192\t\u0192\x04" +
        "\u0193\t\u0193\x04\u0194\t\u0194\x04\u0195\t\u0195\x04\u0196\t\u0196\x04" +
        "\u0197\t\u0197\x04\u0198\t\u0198\x04\u0199\t\u0199\x04\u019A\t\u019A\x04" +
        "\u019B\t\u019B\x04\u019C\t\u019C\x04\u019D\t\u019D\x04\u019E\t\u019E\x04" +
        "\u019F\t\u019F\x04\u01A0\t\u01A0\x04\u01A1\t\u01A1\x04\u01A2\t\u01A2\x04" +
        "\u01A3\t\u01A3\x04\u01A4\t\u01A4\x04\u01A5\t\u01A5\x04\u01A6\t\u01A6\x04" +
        "\u01A7\t\u01A7\x04\u01A8\t\u01A8\x04\u01A9\t\u01A9\x04\u01AA\t\u01AA\x04" +
        "\u01AB\t\u01AB\x04\u01AC\t\u01AC\x04\u01AD\t\u01AD\x04\u01AE\t\u01AE\x04" +
        "\u01AF\t\u01AF\x04\u01B0\t\u01B0\x04\u01B1\t\u01B1\x04\u01B2\t\u01B2\x04" +
        "\u01B3\t\u01B3\x04\u01B4\t\u01B4\x04\u01B5\t\u01B5\x04\u01B6\t\u01B6\x04" +
        "\u01B7\t\u01B7\x04\u01B8\t\u01B8\x04\u01B9\t\u01B9\x04\u01BA\t\u01BA\x04" +
        "\u01BB\t\u01BB\x04\u01BC\t\u01BC\x04\u01BD\t\u01BD\x04\u01BE\t\u01BE\x04" +
        "\u01BF\t\u01BF\x04\u01C0\t\u01C0\x04\u01C1\t\u01C1\x04\u01C2\t\u01C2\x04" +
        "\u01C3\t\u01C3\x04\u01C4\t\u01C4\x04\u01C5\t\u01C5\x04\u01C6\t\u01C6\x04" +
        "\u01C7\t\u01C7\x04\u01C8\t\u01C8\x04\u01C9\t\u01C9\x04\u01CA\t\u01CA\x04" +
        "\u01CB\t\u01CB\x04\u01CC\t\u01CC\x04\u01CD\t\u01CD\x04\u01CE\t\u01CE\x04" +
        "\u01CF\t\u01CF\x04\u01D0\t\u01D0\x04\u01D1\t\u01D1\x04\u01D2\t\u01D2\x04" +
        "\u01D3\t\u01D3\x04\u01D4\t\u01D4\x04\u01D5\t\u01D5\x04\u01D6\t\u01D6\x04" +
        "\u01D7\t\u01D7\x04\u01D8\t\u01D8\x04\u01D9\t\u01D9\x04\u01DA\t\u01DA\x04" +
        "\u01DB\t\u01DB\x04\u01DC\t\u01DC\x04\u01DD\t\u01DD\x04\u01DE\t\u01DE\x04" +
        "\u01DF\t\u01DF\x04\u01E0\t\u01E0\x04\u01E1\t\u01E1\x04\u01E2\t\u01E2\x04" +
        "\u01E3\t\u01E3\x04\u01E4\t\u01E4\x04\u01E5\t\u01E5\x04\u01E6\t\u01E6\x04" +
        "\u01E7\t\u01E7\x04\u01E8\t\u01E8\x04\u01E9\t\u01E9\x04\u01EA\t\u01EA\x04" +
        "\u01EB\t\u01EB\x04\u01EC\t\u01EC\x04\u01ED\t\u01ED\x04\u01EE\t\u01EE\x04" +
        "\u01EF\t\u01EF\x04\u01F0\t\u01F0\x04\u01F1\t\u01F1\x04\u01F2\t\u01F2\x04" +
        "\u01F3\t\u01F3\x04\u01F4\t\u01F4\x04\u01F5\t\u01F5\x04\u01F6\t\u01F6\x04" +
        "\u01F7\t\u01F7\x04\u01F8\t\u01F8\x04\u01F9\t\u01F9\x04\u01FA\t\u01FA\x04" +
        "\u01FB\t\u01FB\x04\u01FC\t\u01FC\x04\u01FD\t\u01FD\x04\u01FE\t\u01FE\x04" +
        "\u01FF\t\u01FF\x04\u0200\t\u0200\x04\u0201\t\u0201\x04\u0202\t\u0202\x04" +
        "\u0203\t\u0203\x04\u0204\t\u0204\x04\u0205\t\u0205\x04\u0206\t\u0206\x04" +
        "\u0207\t\u0207\x04\u0208\t\u0208\x04\u0209\t\u0209\x04\u020A\t\u020A\x04" +
        "\u020B\t\u020B\x04\u020C\t\u020C\x04\u020D\t\u020D\x04\u020E\t\u020E\x04" +
        "\u020F\t\u020F\x04\u0210\t\u0210\x04\u0211\t\u0211\x04\u0212\t\u0212\x04" +
        "\u0213\t\u0213\x04\u0214\t\u0214\x04\u0215\t\u0215\x04\u0216\t\u0216\x04" +
        "\u0217\t\u0217\x04\u0218\t\u0218\x04\u0219\t\u0219\x04\u021A\t\u021A\x04" +
        "\u021B\t\u021B\x04\u021C\t\u021C\x04\u021D\t\u021D\x04\u021E\t\u021E\x04" +
        "\u021F\t\u021F\x04\u0220\t\u0220\x04\u0221\t\u0221\x04\u0222\t\u0222\x04" +
        "\u0223\t\u0223\x04\u0224\t\u0224\x04\u0225\t\u0225\x04\u0226\t\u0226\x04" +
        "\u0227\t\u0227\x04\u0228\t\u0228\x04\u0229\t\u0229\x04\u022A\t\u022A\x04" +
        "\u022B\t\u022B\x04\u022C\t\u022C\x04\u022D\t\u022D\x04\u022E\t\u022E\x04" +
        "\u022F\t\u022F\x04\u0230\t\u0230\x04\u0231\t\u0231\x04\u0232\t\u0232\x04" +
        "\u0233\t\u0233\x04\u0234\t\u0234\x04\u0235\t\u0235\x04\u0236\t\u0236\x04" +
        "\u0237\t\u0237\x04\u0238\t\u0238\x04\u0239\t\u0239\x04\u023A\t\u023A\x04" +
        "\u023B\t\u023B\x04\u023C\t\u023C\x04\u023D\t\u023D\x04\u023E\t\u023E\x04" +
        "\u023F\t\u023F\x04\u0240\t\u0240\x04\u0241\t\u0241\x04\u0242\t\u0242\x04" +
        "\u0243\t\u0243\x04\u0244\t\u0244\x04\u0245\t\u0245\x04\u0246\t\u0246\x04" +
        "\u0247\t\u0247\x04\u0248\t\u0248\x04\u0249\t\u0249\x04\u024A\t\u024A\x04" +
        "\u024B\t\u024B\x04\u024C\t\u024C\x04\u024D\t\u024D\x04\u024E\t\u024E\x04" +
        "\u024F\t\u024F\x04\u0250\t\u0250\x04\u0251\t\u0251\x04\u0252\t\u0252\x04" +
        "\u0253\t\u0253\x04\u0254\t\u0254\x03\x02\x03\x02\x03\x02\x03\x03\x06\x03" +
        "\u04AD\n\x03\r\x03\x0E\x03\u04AE\x03\x04\x03\x04\x05\x04\u04B3\n\x04\x03" +
        "\x04\x05\x04\u04B6\n\x04\x03\x04\x05\x04\u04B9\n\x04\x03\x04\x07\x04\u04BC" +
        "\n\x04\f\x04\x0E\x04\u04BF\v\x04\x03\x04\x05\x04\u04C2\n\x04\x03\x05\x03" +
        "\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x07" +
        "\x06\u04CE\n\x06\f\x06\x0E\x06\u04D1\v\x06\x03\x07\x03\x07\x03\x07\x03" +
        "\x07\x03\x07\x03\x07\x05\x07\u04D9\n\x07\x03\b\x03\b\x03\b\x03\b\x05\b" +
        "\u04DF\n\b\x03\b\x03\b\x05\b\u04E3\n\b\x05\b\u04E5\n\b\x03\b\x05\b\u04E8" +
        "\n\b\x03\b\x05\b\u04EB\n\b\x03\t\x03\t\x03\t\x05\t\u04F0\n\t\x03\n\x03" +
        "\n\x03\n\x05\n\u04F5\n\n\x03\v\x03\v\x03\v\x05\v\u04FA\n\v\x03\f\x03\f" +
        "\x03\f\x05\f\u04FF\n\f\x03\r\x03\r\x03\r\x05\r\u0504\n\r\x03\x0E\x03\x0E" +
        "\x03\x0E\x05\x0E\u0509\n\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F\u050F" +
        "\n\x0F\f\x0F\x0E\x0F\u0512\v\x0F\x03\x10\x03\x10\x03\x10\x05\x10\u0517" +
        "\n\x10\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11\u051D\n\x11\f\x11\x0E\x11" +
        "\u0520\v\x11\x03\x12\x03\x12\x03\x12\x05\x12\u0525\n\x12\x03\x13\x03\x13" +
        "\x03\x13\x03\x13\x05\x13\u052B\n\x13\x03\x13\x03\x13\x05\x13\u052F\n\x13" +
        "\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\u0537\n\x14\f" +
        "\x14\x0E\x14\u053A\v\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15" +
        "\x03\x15\x05\x15\u0543\n\x15\x03\x16\x03\x16\x05\x16\u0547\n\x16\x03\x16" +
        "\x03\x16\x05\x16\u054B\n\x16\x03\x16\x05\x16\u054E\n\x16\x03\x17\x03\x17" +
        "\x05\x17\u0552\n\x17\x03\x17\x05\x17\u0555\n\x17\x03\x17\x03\x17\x05\x17" +
        "\u0559\n\x17\x03\x17\x05\x17\u055C\n\x17\x03\x18\x05\x18\u055F\n\x18\x03" +
        "\x18\x05\x18\u0562\n\x18\x03\x18\x03\x18\x05\x18\u0566\n\x18\x03\x18\x06" +
        "\x18\u0569\n\x18\r\x18\x0E\x18\u056A\x03\x18\x05\x18\u056E\n\x18\x03\x18" +
        "\x05\x18\u0571\n\x18\x03\x19\x05\x19\u0574\n\x19\x03\x19\x03\x19\x05\x19" +
        "\u0578\n\x19\x03\x19\x03\x19\x03\x1A\x05\x1A\u057D\n\x1A\x03\x1A\x03\x1A" +
        "\x05\x1A\u0581\n\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x05\x1B\u0587\n\x1B" +
        "\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D" +
        "\x06\x1D\u0592\n\x1D\r\x1D\x0E\x1D\u0593\x03\x1D\x03\x1D\x05\x1D\u0598" +
        "\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E" +
        "\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u05A5\n\x1E\x03\x1F\x03\x1F\x05\x1F\u05A9" +
        "\n\x1F\x03 \x03 \x03 \x03 \x05 \u05AF\n \x03 \x05 \u05B2\n \x03 \x03 " +
        "\x03 \x03 \x03 \x03 \x03 \x06 \u05BB\n \r \x0E \u05BC\x05 \u05BF\n \x03" +
        "!\x03!\x03!\x06!\u05C4\n!\r!\x0E!\u05C5\x05!\u05C8\n!\x03\"\x03\"\x03" +
        "\"\x03#\x03#\x06#\u05CF\n#\r#\x0E#\u05D0\x03$\x03$\x03$\x05$\u05D6\n$" +
        "\x03$\x03$\x05$\u05DA\n$\x03$\x03$\x03$\x05$\u05DF\n$\x03%\x03%\x03%\x05" +
        "%\u05E4\n%\x03%\x03%\x03&\x03&\x03&\x05&\u05EB\n&\x03&\x05&\u05EE\n&\x03" +
        "&\x05&\u05F1\n&\x03&\x06&\u05F4\n&\r&\x0E&\u05F5\x03\'\x03\'\x03\'\x05" +
        "\'\u05FB\n\'\x03(\x03(\x05(\u05FF\n(\x03)\x03)\x05)\u0603\n)\x03*\x03" +
        "*\x05*\u0607\n*\x03*\x05*\u060A\n*\x03*\x03*\x05*\u060E\n*\x03*\x03*\x03" +
        "*\x05*\u0613\n*\x03+\x03+\x05+\u0617\n+\x03+\x03+\x03,\x03,\x05,\u061D" +
        "\n,\x03,\x03,\x05,\u0621\n,\x05,\u0623\n,\x03,\x05,\u0626\n,\x03,\x03" +
        ",\x05,\u062A\n,\x03-\x03-\x03-\x05-\u062F\n-\x05-\u0631\n-\x03-\x03-\x03" +
        "-\x05-\u0636\n-\x05-\u0638\n-\x03.\x03.\x05.\u063C\n.\x03.\x03.\x05.\u0640" +
        "\n.\x03.\x05.\u0643\n.\x03/\x03/\x05/\u0647\n/\x03/\x05/\u064A\n/\x03" +
        "/\x03/\x03/\x05/\u064F\n/\x03/\x05/\u0652\n/\x03/\x05/\u0655\n/\x03/\x03" +
        "/\x05/\u0659\n/\x03/\x05/\u065C\n/\x03/\x03/\x03/\x05/\u0661\n/\x03/\x05" +
        "/\u0664\n/\x03/\x05/\u0667\n/\x05/\u0669\n/\x030\x030\x050\u066D\n0\x03" +
        "0\x030\x031\x031\x051\u0673\n1\x031\x051\u0676\n1\x031\x051\u0679\n1\x03" +
        "1\x031\x051\u067D\n1\x032\x032\x052\u0681\n2\x032\x052\u0684\n2\x032\x05" +
        "2\u0687\n2\x032\x062\u068A\n2\r2\x0E2\u068B\x032\x032\x052\u0690\n2\x03" +
        "3\x063\u0693\n3\r3\x0E3\u0694\x033\x053\u0698\n3\x033\x063\u069B\n3\r" +
        "3\x0E3\u069C\x034\x034\x034\x034\x074\u06A3\n4\f4\x0E4\u06A6\v4\x035\x03" +
        "5\x055\u06AA\n5\x036\x036\x056\u06AE\n6\x036\x076\u06B1\n6\f6\x0E6\u06B4" +
        "\v6\x036\x036\x037\x037\x077\u06BA\n7\f7\x0E7\u06BD\v7\x038\x038\x058" +
        "\u06C1\n8\x038\x038\x039\x039\x039\x039\x039\x039\x039\x039\x039\x039" +
        "\x039\x059\u06D0\n9\x03:\x03:\x05:\u06D4\n:\x03:\x03:\x03:\x03:\x03:\x03" +
        ":\x03:\x03:\x03:\x03:\x03:\x05:\u06E1\n:\x03;\x03;\x03;\x05;\u06E6\n;" +
        "\x03;\x05;\u06E9\n;\x03;\x05;\u06EC\n;\x03<\x03<\x05<\u06F0\n<\x05<\u06F2" +
        "\n<\x03<\x03<\x03<\x03<\x03<\x05<\u06F9\n<\x03<\x03<\x03=\x03=\x05=\u06FF" +
        "\n=\x03=\x05=\u0702\n=\x03=\x03=\x05=\u0706\n=\x03>\x03>\x03>\x05>\u070B" +
        "\n>\x03>\x03>\x03>\x05>\u0710\n>\x03?\x03?\x05?\u0714\n?\x03?\x05?\u0717" +
        "\n?\x03?\x03?\x03@\x03@\x05@\u071D\n@\x03@\x05@\u0720\n@\x03@\x03@\x05" +
        "@\u0724\n@\x03@\x05@\u0727\n@\x03@\x05@\u072A\n@\x03A\x03A\x03A\x05A\u072F" +
        "\nA\x03A\x05A\u0732\nA\x03A\x03A\x05A\u0736\nA\x03A\x05A\u0739\nA\x03" +
        "A\x05A\u073C\nA\x03B\x03B\x05B\u0740\nB\x03B\x03B\x03C\x05C\u0745\nC\x03" +
        "C\x03C\x05C\u0749\nC\x03C\x03C\x05C\u074D\nC\x03D\x03D\x05D\u0751\nD\x03" +
        "D\x05D\u0754\nD\x03D\x03D\x03E\x03E\x03E\x03E\x03E\x05E\u075D\nE\x03E" +
        "\x07E\u0760\nE\fE\x0EE\u0763\vE\x03E\x05E\u0766\nE\x03F\x03F\x03F\x03" +
        "F\x05F\u076C\nF\x03G\x03G\x03G\x03G\x05G\u0772\nG\x05G\u0774\nG\x03G\x03" +
        "G\x03G\x03G\x05G\u077A\nG\x03H\x03H\x03H\x03I\x05I\u0780\nI\x03I\x05I" +
        "\u0783\nI\x03I\x03I\x03I\x03I\x03J\x03J\x05J\u078B\nJ\x03K\x03K\x05K\u078F" +
        "\nK\x03K\x05K\u0792\nK\x03K\x05K\u0795\nK\x03K\x06K\u0798\nK\rK\x0EK\u0799" +
        "\x03L\x03L\x03L\x05L\u079F\nL\x03L\x05L\u07A2\nL\x03L\x06L\u07A5\nL\r" +
        "L\x0EL\u07A6\x03M\x03M\x03M\x05M\u07AC\nM\x03N\x03N\x03N\x05N\u07B1\n" +
        "N\x03N\x03N\x03O\x03O\x03O\x03O\x07O\u07B9\nO\fO\x0EO\u07BC\vO\x03P\x03" +
        "P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x05P\u07C7\nP\x03Q\x03Q\x03Q\x03" +
        "Q\x07Q\u07CD\nQ\fQ\x0EQ\u07D0\vQ\x03R\x03R\x03R\x05R\u07D5\nR\x03R\x07" +
        "R\u07D8\nR\fR\x0ER\u07DB\vR\x03R\x03R\x07R\u07DF\nR\fR\x0ER\u07E2\vR\x03" +
        "S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x05S\u07EF\nS\x03" +
        "T\x05T\u07F2\nT\x03T\x03T\x03U\x05U\u07F7\nU\x03U\x03U\x03V\x03V\x05V" +
        "\u07FD\nV\x03V\x03V\x05V\u0801\nV\x03V\x05V\u0804\nV\x03W\x03W\x03W\x03" +
        "X\x03X\x03X\x03X\x05X\u080D\nX\x03Y\x05Y\u0810\nY\x03Y\x03Y\x05Y\u0814" +
        "\nY\x03Z\x05Z\u0817\nZ\x03Z\x03Z\x05Z\u081B\nZ\x03Z\x05Z\u081E\nZ\x03" +
        "Z\x05Z\u0821\nZ\x03Z\x03Z\x05Z\u0825\nZ\x03Z\x05Z\u0828\nZ\x05Z\u082A" +
        "\nZ\x03Z\x03Z\x05Z\u082E\nZ\x03Z\x05Z\u0831\nZ\x03[\x05[\u0834\n[\x03" +
        "[\x03[\x03[\x05[\u0839\n[\x03\\\x03\\\x03\\\x03]\x03]\x03]\x05]\u0841" +
        "\n]\x03]\x03]\x05]\u0845\n]\x05]\u0847\n]\x03]\x03]\x03]\x06]\u084C\n" +
        "]\r]\x0E]\u084D\x05]\u0850\n]\x03^\x03^\x03^\x06^\u0855\n^\r^\x0E^\u0856" +
        "\x03_\x03_\x05_\u085B\n_\x03_\x03_\x05_\u085F\n_\x03`\x03`\x03`\x05`\u0864" +
        "\n`\x03`\x03`\x05`\u0868\n`\x05`\u086A\n`\x03`\x06`\u086D\n`\r`\x0E`\u086E" +
        "\x03a\x03a\x05a\u0873\na\x03a\x03a\x05a\u0877\na\x03a\x05a\u087A\na\x03" +
        "a\x07a\u087D\na\fa\x0Ea\u0880\va\x03b\x03b\x03b\x05b\u0885\nb\x03c\x05" +
        "c\u0888\nc\x03c\x03c\x05c\u088C\nc\x03c\x03c\x05c\u0890\nc\x03d\x05d\u0893" +
        "\nd\x03d\x05d\u0896\nd\x03d\x03d\x03d\x05d\u089B\nd\x03e\x05e\u089E\n" +
        "e\x03e\x05e\u08A1\ne\x03e\x03e\x03e\x05e\u08A6\ne\x03f\x03f\x05f\u08AA" +
        "\nf\x03f\x05f\u08AD\nf\x03f\x03f\x03g\x03g\x03h\x03h\x05h\u08B5\nh\x03" +
        "h\x03h\x03i\x03i\x05i\u08BB\ni\x03i\x03i\x05i\u08BF\ni\x05i\u08C1\ni\x03" +
        "i\x06i\u08C4\ni\ri\x0Ei\u08C5\x03j\x03j\x03j\x03j\x07j\u08CC\nj\fj\x0E" +
        "j\u08CF\vj\x03k\x03k\x03k\x03k\x03k\x03l\x03l\x03l\x03l\x07l\u08DA\nl" +
        "\fl\x0El\u08DD\vl\x03m\x03m\x03m\x03m\x07m\u08E3\nm\fm\x0Em\u08E6\vm\x03" +
        "n\x03n\x03n\x03n\x03n\x07n\u08ED\nn\fn\x0En\u08F0\vn\x03o\x03o\x03o\x05" +
        "o\u08F5\no\x03p\x03p\x03p\x05p\u08FA\np\x03p\x05p\u08FD\np\x03p\x03p\x03" +
        "p\x03p\x03p\x03p\x03p\x03p\x03p\x03p\x05p\u0909\np\x03p\x07p\u090C\np" +
        "\fp\x0Ep\u090F\vp\x03p\x03p\x03q\x03q\x03q\x05q\u0916\nq\x03q\x03q\x03" +
        "q\x03q\x03q\x03q\x03q\x07q\u091F\nq\fq\x0Eq\u0922\vq\x03q\x03q\x03r\x03" +
        "r\x03r\x05r\u0929\nr\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x05r\u0933" +
        "\nr\x03r\x07r\u0936\nr";
    Cobol85Parser._serializedATNSegment1 = "\fr\x0Er\u0939\vr\x03r\x03r\x03s\x03s\x03s\x05s\u0940\ns\x03s\x03s\x03" +
        "t\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x06t\u094C\nt\rt\x0Et\u094D\x05t" +
        "\u0950\nt\x03u\x03u\x03u\x05u\u0955\nu\x03u\x03u\x03v\x03v\x03v\x05v\u095C" +
        "\nv\x03v\x03v\x03w\x05w\u0961\nw\x03w\x03w\x05w\u0965\nw\x03w\x03w\x03" +
        "x\x03x\x03x\x05x\u096C\nx\x03x\x03x\x03y\x03y\x03y\x05y\u0973\ny\x03y" +
        "\x03y\x03z\x03z\x03z\x05z\u097A\nz\x03z\x03z\x03{\x05{\u097F\n{\x03{\x03" +
        "{\x05{\u0983\n{\x03{\x03{\x03|\x05|\u0988\n|\x03|\x03|\x05|\u098C\n|\x03" +
        "|\x03|\x03}\x05}\u0991\n}\x03}\x03}\x05}\u0995\n}\x03}\x03}\x03~\x05~" +
        "\u099A\n~\x03~\x03~\x05~\u099E\n~\x03~\x03~\x03\x7F\x05\x7F\u09A3\n\x7F" +
        "\x03\x7F\x03\x7F\x05\x7F\u09A7\n\x7F\x03\x7F\x03\x7F\x03\x80\x03\x80\x03" +
        "\x80\x05\x80\u09AE\n\x80\x03\x80\x03\x80\x03\x81\x03\x81\x03\x81\x03\x81" +
        "\x03\x81\x03\x81\x03\x81\x05\x81\u09B9\n\x81\x03\x81\x07\x81\u09BC\n\x81" +
        "\f\x81\x0E\x81\u09BF\v\x81\x03\x82\x03\x82\x03\x82\x03\x82\x07\x82\u09C5" +
        "\n\x82\f\x82\x0E\x82\u09C8\v\x82\x03\x83\x03\x83\x03\x83\x05\x83\u09CD" +
        "\n\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83" +
        "\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83" +
        "\x03\x83\x05\x83\u09E1\n\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03" +
        "\x83\x03\x83\x03\x83\x03\x83\x03\x83\x07\x83\u09ED\n\x83\f\x83\x0E\x83" +
        "\u09F0\v\x83\x03\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x85\x03\x85\x03" +
        "\x86\x03\x86\x03\x87\x03\x87\x03\x87\x03\x88\x03\x88\x03\x89\x03\x89\x03" +
        "\x8A\x03\x8A\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x05\x8C\u0A08\n\x8C\x03\x8C" +
        "\x03\x8C\x05\x8C\u0A0C\n\x8C\x03\x8D\x03\x8D\x05\x8D\u0A10\n\x8D\x03\x8D" +
        "\x05\x8D\u0A13\n\x8D\x03\x8D\x05\x8D\u0A16\n\x8D\x03\x8D\x03\x8D\x05\x8D" +
        "\u0A1A\n\x8D\x03\x8E\x03\x8E\x05\x8E\u0A1E\n\x8E\x03\x8E\x05\x8E\u0A21" +
        "\n\x8E\x03\x8E\x05\x8E\u0A24\n\x8E\x03\x8E\x03\x8E\x05\x8E\u0A28\n\x8E" +
        "\x03\x8F\x03\x8F\x05\x8F\u0A2C\n\x8F\x03\x8F\x03\x8F\x05\x8F\u0A30\n\x8F" +
        "\x03\x90\x03\x90\x05\x90\u0A34\n\x90\x03\x90\x03\x90\x05\x90\u0A38\n\x90" +
        "\x03\x91\x03\x91\x05\x91\u0A3C\n\x91\x03\x91\x03\x91\x03\x92\x03\x92\x05" +
        "\x92\u0A42\n\x92\x03\x92\x03\x92\x03\x93\x03\x93\x05\x93\u0A48\n\x93\x03" +
        "\x93\x03\x93\x03\x94\x03\x94\x03\x94\x05\x94\u0A4F\n\x94\x03\x94\x05\x94" +
        "\u0A52\n\x94\x03\x95\x03\x95\x03\x95\x03\x96\x03\x96\x03\x96\x03\x97\x03" +
        "\x97\x05\x97\u0A5C\n\x97\x03\x97\x03\x97\x03\x98\x03\x98\x05\x98\u0A62" +
        "\n\x98\x03\x98\x03\x98\x03\x99\x03\x99\x05\x99\u0A68\n\x99\x03\x9A\x03" +
        "\x9A\x05\x9A\u0A6C\n\x9A\x05\x9A\u0A6E\n\x9A\x03\x9A\x03\x9A\x03\x9A\x05" +
        "\x9A\u0A73\n\x9A\x05\x9A\u0A75\n\x9A\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03" +
        "\x9D\x03\x9D\x03\x9E\x03\x9E\x05\x9E\u0A7F\n\x9E\x03\x9E\x05\x9E\u0A82" +
        "\n\x9E\x03\x9E\x03\x9E\x05\x9E\u0A86\n\x9E\x03\x9E\x05\x9E\u0A89\n\x9E" +
        "\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0A8E\n\x9F\x03\xA0\x03\xA0\x03\xA1\x03" +
        "\xA1\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x07\xA2\u0A98\n\xA2\f\xA2\x0E\xA2" +
        "\u0A9B\v\xA2\x03\xA3\x03\xA3\x06\xA3\u0A9F\n\xA3\r\xA3\x0E\xA3\u0AA0\x03" +
        "\xA4\x03\xA4\x03\xA4\x05\xA4\u0AA6\n\xA4\x03\xA4\x03\xA4\x05\xA4\u0AAA" +
        "\n\xA4\x03\xA4\x05\xA4\u0AAD\n\xA4\x03\xA4\x05\xA4\u0AB0\n\xA4\x03\xA4" +
        "\x05\xA4\u0AB3\n\xA4\x05\xA4\u0AB5\n\xA4\x03\xA4\x03\xA4\x03\xA5\x05\xA5" +
        "\u0ABA\n\xA5\x03\xA5\x03\xA5\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u0AC1\n\xA6" +
        "\x03\xA6\x03\xA6\x05\xA6\u0AC5\n\xA6\x05\xA6\u0AC7\n\xA6\x03\xA6\x03\xA6" +
        "\x05\xA6\u0ACB\n\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x03\xA8\x03" +
        "\xA8\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x03\xAA\x03\xAB\x03" +
        "\xAB\x03\xAB\x05\xAB\u0ADE\n\xAB\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0AE3" +
        "\n\xAC\x03\xAC\x05\xAC\u0AE6\n\xAC\x03\xAC\x03\xAC\x05\xAC\u0AEA\n\xAC" +
        "\x03\xAC\x03\xAC\x03\xAD\x03\xAD\x05\xAD\u0AF0\n\xAD\x03\xAD\x05\xAD\u0AF3" +
        "\n\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x05\xAE\u0AFA\n\xAE\x03" +
        "\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03" +
        "\xAE\x03\xAE\x05\xAE\u0B07\n\xAE\x03\xAE\x07\xAE\u0B0A\n\xAE\f\xAE\x0E" +
        "\xAE\u0B0D\v\xAE\x03\xAE\x03\xAE\x03\xAF\x03\xAF\x05\xAF\u0B13\n\xAF\x03" +
        "\xAF\x03\xAF\x03\xB0\x03\xB0\x05\xB0\u0B19\n\xB0\x03\xB0\x05\xB0\u0B1C" +
        "\n\xB0\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x05\xB1\u0B22\n\xB1\x03\xB2\x03" +
        "\xB2\x05\xB2\u0B26\n\xB2\x03\xB3\x05\xB3\u0B29\n\xB3\x03\xB3\x05\xB3\u0B2C" +
        "\n\xB3\x03\xB3\x05\xB3\u0B2F\n\xB3\x03\xB3\x03\xB3\x05\xB3\u0B33\n\xB3" +
        "\x03\xB4\x03\xB4\x05\xB4\u0B37\n\xB4\x03\xB4\x03\xB4\x05\xB4\u0B3B\n\xB4" +
        "\x03\xB5\x03\xB5\x03\xB5\x03\xB6\x03\xB6\x03\xB6\x05\xB6\u0B43\n\xB6\x03" +
        "\xB6\x03\xB6\x03\xB6\x05\xB6\u0B48\n\xB6\x03\xB7\x03\xB7\x03\xB7\x03\xB8" +
        "\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x05\xB9\u0B52\n\xB9\x03\xB9\x03\xB9\x03" +
        "\xBA\x03\xBA\x05\xBA\u0B58\n\xBA\x03\xBA\x03\xBA\x05\xBA\u0B5C\n\xBA\x03" +
        "\xBB\x03\xBB\x05\xBB\u0B60\n\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u0B65" +
        "\n\xBB\x03\xBC\x03\xBC\x05\xBC\u0B69\n\xBC\x03\xBC\x03\xBC\x03\xBD\x03" +
        "\xBD\x03\xBD\x05\xBD\u0B70\n\xBD\x03\xBD\x07\xBD\u0B73\n\xBD\f\xBD\x0E" +
        "\xBD\u0B76\v\xBD\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u0B7B\n\xBD\x03\xBD\x07" +
        "\xBD\u0B7E\n\xBD\f\xBD\x0E\xBD\u0B81\v\xBD\x05\xBD\u0B83\n\xBD\x03\xBE" +
        "\x03\xBE\x05\xBE\u0B87\n\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03" +
        "\xBE\x03\xBE\x05\xBE\u0B90\n\xBE\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u0B95" +
        "\n\xBF\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u0B9A\n\xC0\x03\xC1\x03\xC1\x03" +
        "\xC1\x05\xC1\u0B9F\n\xC1\x03\xC1\x03\xC1\x05\xC1\u0BA3\n\xC1\x03\xC2\x03" +
        "\xC2\x03\xC3\x03\xC3\x03\xC3\x05\xC3\u0BAA\n\xC3\x03\xC3\x03\xC3\x05\xC3" +
        "\u0BAE\n\xC3\x03\xC4\x03\xC4\x05\xC4\u0BB2\n\xC4\x05\xC4\u0BB4\n\xC4\x03" +
        "\xC4\x03\xC4\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u0BBB\n\xC5\x03\xC6\x03\xC6" +
        "\x03\xC6\x05\xC6\u0BC0\n\xC6\x03\xC7\x03\xC7\x05\xC7\u0BC4\n\xC7\x03\xC7" +
        "\x03\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x07\xC8\u0BCC\n\xC8\f\xC8\x0E" +
        "\xC8\u0BCF\v\xC8\x03\xC9\x03\xC9\x05\xC9\u0BD3\n\xC9\x03\xCA\x03\xCA\x03" +
        "\xCA\x03\xCA\x05\xCA\u0BD9\n\xCA\x03\xCA\x05\xCA\u0BDC\n\xCA\x03\xCB\x03" +
        "\xCB\x03\xCB\x03\xCB\x05\xCB\u0BE2\n\xCB\x03\xCB\x05\xCB\u0BE5\n\xCB\x03" +
        "\xCB\x03\xCB\x07\xCB\u0BE9\n\xCB\f\xCB\x0E\xCB\u0BEC\v\xCB\x03\xCC\x03" +
        "\xCC\x03\xCC\x05\xCC\u0BF1\n\xCC\x03\xCC\x05\xCC\u0BF4\n\xCC\x03\xCD\x03" +
        "\xCD\x05\xCD\u0BF8\n\xCD\x03\xCD\x03\xCD\x05\xCD\u0BFC\n\xCD\x03\xCD\x05" +
        "\xCD\u0BFF\n\xCD\x03\xCD\x05\xCD\u0C02\n\xCD\x03\xCD\x05\xCD\u0C05\n\xCD" +
        "\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCF\x03\xCF\x05\xCF\u0C0D\n\xCF\x03" +
        "\xCF\x03\xCF\x03\xD0\x03\xD0\x05\xD0\u0C13\n\xD0\x03\xD0\x03\xD0\x03\xD1" +
        "\x03\xD1\x03\xD1\x05\xD1\u0C1A\n\xD1\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u0C1F" +
        "\n\xD2\x03\xD2\x05\xD2\u0C22\n\xD2\x03\xD2\x05\xD2\u0C25\n\xD2\x03\xD2" +
        "\x05\xD2\u0C28\n\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD4\x03\xD4\x03\xD4\x03" +
        "\xD5\x03\xD5\x06\xD5\u0C32\n\xD5\r\xD5\x0E\xD5\u0C33\x03\xD6\x03\xD6\x05" +
        "\xD6\u0C38\n\xD6\x03\xD7\x03\xD7\x06\xD7\u0C3C\n\xD7\r\xD7\x0E\xD7\u0C3D" +
        "\x03\xD8\x03\xD8\x05\xD8\u0C42\n\xD8\x03\xD9\x05\xD9\u0C45\n\xD9\x03\xD9" +
        "\x03\xD9\x03\xDA\x05\xDA\u0C4A\n\xDA\x03\xDA\x03\xDA\x03\xDB\x03\xDB\x03" +
        "\xDB\x03\xDB\x05\xDB\u0C52\n\xDB\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u0C57" +
        "\n\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC" +
        "\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC" +
        "\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x07\xDC\u0C6E\n\xDC\f\xDC\x0E\xDC\u0C71" +
        "\v\xDC\x03\xDC\x03\xDC\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDE" +
        "\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDF\x06\xDF\u0C80\n\xDF\r\xDF\x0E" +
        "\xDF\u0C81\x03\xDF\x05\xDF\u0C85\n\xDF\x03\xE0\x03\xE0\x03\xE1\x03\xE1" +
        "\x05\xE1\u0C8B\n\xE1\x03\xE1\x03\xE1\x03\xE2\x03\xE2\x03\xE3\x05\xE3\u0C92" +
        "\n\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u0C97\n\xE3\x03\xE4\x05\xE4\u0C9A" +
        "\n\xE4\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x05\xE6\u0CA2\n" +
        "\xE6\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0CA7\n\xE7\x03\xE7\x05\xE7\u0CAA" +
        "\n\xE7\x03\xE7\x03\xE7\x05\xE7\u0CAE\n\xE7\x03\xE7\x05\xE7\u0CB1\n\xE7" +
        "\x03\xE7\x07\xE7\u0CB4\n\xE7\f\xE7\x0E\xE7\u0CB7\v\xE7\x03\xE7\x03\xE7" +
        "\x05\xE7\u0CBB\n\xE7\x03\xE7\x05\xE7\u0CBE\n\xE7\x03\xE7\x06\xE7\u0CC1" +
        "\n\xE7\r\xE7\x0E\xE7\u0CC2\x05\xE7\u0CC5\n\xE7\x03\xE8\x03\xE8\x03\xE8" +
        "\x03\xE9\x03\xE9\x05\xE9\u0CCC\n\xE9\x03\xE9\x05\xE9\u0CCF\n\xE9\x03\xE9" +
        "\x06\xE9\u0CD2\n\xE9\r\xE9\x0E\xE9\u0CD3\x03\xEA\x03\xEA\x05\xEA\u0CD8" +
        "\n\xEA\x03\xEA\x03\xEA\x03\xEB\x06\xEB\u0CDD\n\xEB\r\xEB\x0E\xEB\u0CDE" +
        "\x03\xEB\x05\xEB\u0CE2\n\xEB\x06\xEB\u0CE4\n\xEB\r\xEB\x0E\xEB\u0CE5\x03" +
        "\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03" +
        "\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x05\xEC\u0CF8\n\xEC" +
        "\x03\xED\x03\xED\x03\xED\x03\xED\x03\xEE\x05\xEE\u0CFF\n\xEE\x03\xEE\x05" +
        "\xEE\u0D02\n\xEE\x03\xEE\x03\xEE\x03\xEF\x03\xEF\x03\xEF\x03\xF0\x03\xF0" +
        "\x03\xF0\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x05\xF1\u0D10\n\xF1\x03\xF2\x03" +
        "\xF2\x05\xF2\u0D14\n\xF2\x05\xF2\u0D16\n\xF2\x03\xF2\x03\xF2\x03\xF2\x05" +
        "\xF2\u0D1B\n\xF2\x05\xF2\u0D1D\n\xF2\x03\xF3\x03\xF3\x05\xF3\u0D21\n\xF3" +
        "\x03\xF4\x05\xF4\u0D24\n\xF4\x03\xF4\x03\xF4\x03\xF5\x03\xF5\x05\xF5\u0D2A" +
        "\n\xF5\x03\xF5\x03\xF5\x03\xF6\x05\xF6\u0D2F\n\xF6\x03\xF6\x03\xF6\x03" +
        "\xF7\x03\xF7\x05\xF7\u0D35\n\xF7\x05\xF7\u0D37\n\xF7\x03\xF7\x03\xF7\x05" +
        "\xF7\u0D3B\n\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7" +
        "\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7" +
        "\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7" +
        "\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x05\xF7\u0D5A\n\xF7\x03\xF8\x03\xF8\x03" +
        "\xF8\x05\xF8\u0D5F\n\xF8\x03\xF8\x03\xF8\x05\xF8\u0D63\n\xF8\x03\xF9\x03" +
        "\xF9\x05\xF9\u0D67\n\xF9\x03\xF9\x03\xF9\x05\xF9\u0D6B\n\xF9\x05\xF9\u0D6D" +
        "\n\xF9\x03\xF9\x03\xF9\x05\xF9\u0D71\n\xF9\x03\xF9\x07\xF9\u0D74\n\xF9" +
        "\f\xF9\x0E\xF9\u0D77\v\xF9\x03\xFA\x03\xFA\x05\xFA\u0D7B\n\xFA\x03\xFB" +
        "\x03\xFB\x05\xFB\u0D7F\n\xFB\x03\xFC\x03\xFC\x03\xFC\x03\xFD\x05\xFD\u0D85" +
        "\n\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFE\x03\xFE\x03\xFE\x05\xFE\u0D8D\n" +
        "\xFE\x03\xFE\x05\xFE\u0D90\n\xFE\x03\xFE\x03\xFE\x05\xFE\u0D94\n\xFE\x03" +
        "\xFE\x03\xFE\x03\xFF\x03\xFF\x06\xFF\u0D9A\n\xFF\r\xFF\x0E\xFF\u0D9B\x03" +
        "\u0100\x03\u0100\x03\u0100\x03\u0101\x03\u0101\x05\u0101\u0DA3\n\u0101" +
        "\x03\u0102\x05\u0102\u0DA6\n\u0102\x03\u0102\x05\u0102\u0DA9\n\u0102\x03" +
        "\u0102\x06\u0102\u0DAC\n\u0102\r\u0102\x0E\u0102\u0DAD\x03\u0103\x05\u0103" +
        "\u0DB1\n\u0103\x03\u0103\x03\u0103\x05\u0103\u0DB5\n\u0103\x03\u0103\x05" +
        "\u0103\u0DB8\n\u0103\x03\u0104\x05\u0104\u0DBB\n\u0104\x03\u0104\x03\u0104" +
        "\x06\u0104\u0DBF\n\u0104\r\u0104\x0E\u0104\u0DC0\x03\u0105\x03\u0105\x03" +
        "\u0105\x05\u0105\u0DC6\n\u0105\x03\u0106\x03\u0106\x03\u0106\x06\u0106" +
        "\u0DCB\n\u0106\r\u0106\x0E\u0106\u0DCC\x03\u0106\x03\u0106\x03\u0106\x03" +
        "\u0106\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03" +
        "\u0108\x03\u0108\x03\u0108\x05\u0108\u0DDC\n\u0108\x03\u0109\x03\u0109" +
        "\x07\u0109\u0DE0\n\u0109\f\u0109\x0E\u0109\u0DE3\v\u0109\x03\u010A\x03" +
        "\u010A\x03\u010A\x03\u010A\x03\u010B\x07\u010B\u0DEA\n\u010B\f\u010B\x0E" +
        "\u010B\u0DED\v\u010B\x03\u010B\x07\u010B\u0DF0\n\u010B\f\u010B\x0E\u010B" +
        "\u0DF3\v\u010B\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x07\u010C\u0DF9" +
        "\n\u010C\f\u010C\x0E\u010C\u0DFC\v\u010C\x05\u010C\u0DFE\n\u010C\x03\u010D" +
        "\x07\u010D\u0E01\n\u010D\f\u010D\x0E\u010D\u0E04\v\u010D\x03\u010D\x03" +
        "\u010D\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
        "\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
        "\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
        "\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
        "\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
        "\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
        "\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
        "\u010E\x05\u010E\u0E39\n\u010E\x03\u010F\x03\u010F\x03\u010F\x03\u010F" +
        "\x03\u010F\x03\u010F\x05\u010F\u0E41\n\u010F\x03\u010F\x05\u010F\u0E44" +
        "\n\u010F\x03\u010F\x05\u010F\u0E47\n\u010F\x03\u010F\x05\u010F\u0E4A\n" +
        "\u010F\x03\u0110\x03\u0110\x03\u0110\x05\u0110\u0E4F\n\u0110\x03\u0110" +
        "\x03\u0110\x05\u0110\u0E53\n\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
        "\x03\u0110\x05\u0110\u0E5A\n\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
        "\x05\u0110\u0E60\n\u0110\x03\u0111\x03\u0111\x03\u0111\x03\u0112\x03\u0112" +
        "\x03\u0112\x03\u0112\x03\u0113\x05\u0113\u0E6A\n\u0113\x03\u0113\x03\u0113" +
        "\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x05\u0114\u0E72\n\u0114\x03\u0114" +
        "\x05\u0114\u0E75\n\u0114\x03\u0114\x05\u0114\u0E78\n\u0114\x03\u0114\x05" +
        "\u0114\u0E7B\n\u0114\x03\u0115\x06\u0115\u0E7E\n\u0115\r\u0115\x0E\u0115" +
        "\u0E7F\x03\u0115\x03\u0115\x06\u0115\u0E84\n\u0115\r\u0115\x0E\u0115\u0E85" +
        "\x03\u0116\x06\u0116\u0E89\n\u0116\r\u0116\x0E\u0116\u0E8A\x03\u0116\x03" +
        "\u0116\x06\u0116\u0E8F\n\u0116\r\u0116\x0E\u0116\u0E90\x05\u0116\u0E93" +
        "\n\u0116\x03\u0116\x03\u0116\x06\u0116\u0E97\n\u0116\r\u0116\x0E\u0116" +
        "\u0E98\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0118\x03" +
        "\u0118\x05\u0118\u0EA2\n\u0118\x03\u0119\x03\u0119\x05\u0119\u0EA6\n\u0119" +
        "\x03\u011A\x03\u011A\x05\u011A\u0EAA\n\u011A\x03\u011B\x03\u011B\x05\u011B" +
        "\u0EAE\n\u011B\x03\u011C\x03\u011C\x05\u011C\u0EB2\n\u011C\x03\u011C\x03" +
        "\u011C\x03\u011D\x03\u011D\x06\u011D\u0EB8\n\u011D\r\u011D\x0E\u011D\u0EB9" +
        "\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x05\u011E\u0EC0\n\u011E\x03\u011E" +
        "\x03\u011E\x03\u011F\x03\u011F\x03\u011F\x05\u011F\u0EC7\n\u011F\x03\u011F" +
        "\x05\u011F\u0ECA\n\u011F\x03\u011F\x05\u011F\u0ECD\n\u011F\x03\u011F\x05" +
        "\u011F\u0ED0\n\u011F\x03\u011F\x05\u011F\u0ED3\n\u011F\x03\u011F\x05\u011F" +
        "\u0ED6\n\u011F\x03\u011F\x05\u011F\u0ED9\n\u011F\x03\u0120\x03\u0120\x06" +
        "\u0120\u0EDD\n\u0120\r\u0120\x0E\u0120\u0EDE\x03\u0121\x03\u0121\x03\u0121" +
        "\x05\u0121\u0EE4\n\u0121\x03\u0122\x05\u0122\u0EE7\n\u0122\x03\u0122\x05" +
        "\u0122\u0EEA\n\u0122\x03\u0122\x06\u0122\u0EED\n\u0122\r\u0122\x0E\u0122" +
        "\u0EEE\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x05\u0123\u0EF5\n\u0123" +
        "\x03\u0123\x03\u0123\x03\u0123\x05\u0123\u0EFA\n\u0123\x03\u0123\x05\u0123" +
        "\u0EFD\n\u0123\x03\u0124\x05\u0124\u0F00\n\u0124\x03\u0124\x03\u0124\x06" +
        "\u0124\u0F04\n\u0124\r\u0124\x0E\u0124\u0F05\x03\u0125\x03\u0125\x03\u0125" +
        "\x03\u0125\x05\u0125\u0F0C\n\u0125\x05\u0125\u0F0E\n\u0125\x03\u0125\x03" +
        "\u0125\x05\u0125\u0F12\n\u0125\x03\u0126\x05\u0126\u0F15\n\u0126\x03\u0126" +
        "\x03\u0126\x06\u0126\u0F19\n\u0126\r\u0126\x0E\u0126\u0F1A\x03\u0127\x03" +
        "\u0127\x03\u0127\x03\u0127\x05\u0127\u0F21\n\u0127\x05\u0127\u0F23\n\u0127" +
        "\x03\u0127\x03\u0127\x03\u0127\x05\u0127\u0F28\n\u0127\x03\u0128\x03\u0128" +
        "\x03\u0128\x03\u0129\x03\u0129\x06\u0129\u0F2F\n\u0129\r\u0129\x0E\u0129" +
        "\u0F30\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x05\u012A\u0F38" +
        "\n\u012A\x03\u012B\x03\u012B\x06\u012B\u0F3C\n\u012B\r\u012B\x0E\u012B" +
        "\u0F3D\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u0F44\n\u012C" +
        "\x03\u012D\x03\u012D\x05\u012D\u0F48\n\u012D\x03\u012D\x05\u012D\u0F4B" +
        "\n\u012D\x03\u012D\x05\u012D\u0F4E\n\u012D\x03\u012D\x03\u012D\x03\u012D" +
        "\x05\u012D\u0F53\n\u012D\x05\u012D\u0F55\n\u012D\x03\u012E\x05\u012E\u0F58" +
        "\n\u012E\x03\u012E\x03\u012E\x03\u012E\x05\u012E\u0F5D\n\u012E\x03\u012F" +
        "\x05\u012F\u0F60\n\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x05\u012F" +
        "\u0F66\n\u012F\x03\u012F\x03\u012F\x06\u012F\u0F6A\n\u012F\r\u012F\x0E" +
        "\u012F\u0F6B\x05\u012F\u0F6E\n\u012F\x03\u0130\x03\u0130\x03\u0130\x05" +
        "\u0130\u0F73\n\u0130\x03\u0131\x03\u0131\x05\u0131\u0F77\n\u0131\x03\u0131" +
        "\x03\u0131\x03\u0132\x03\u0132\x03\u0132\x05\u0132\u0F7E\n\u0132\x03\u0133" +
        "\x03\u0133\x05\u0133\u0F82\n\u0133\x03\u0133\x03\u0133\x05\u0133\u0F86" +
        "\n\u0133\x03\u0134\x03\u0134\x06\u0134\u0F8A\n\u0134\r\u0134\x0E\u0134" +
        "\u0F8B\x03\u0134\x03\u0134\x03\u0134\x05\u0134\u0F91\n\u0134\x03\u0134" +
        "\x05\u0134\u0F94\n\u0134\x03\u0134\x05\u0134\u0F97\n\u0134\x03\u0135\x03" +
        "\u0135\x05\u0135\u0F9B\n\u0135\x03\u0136\x03\u0136\x03\u0137\x03\u0137" +
        "\x03\u0137\x05\u0137\u0FA2\n\u0137\x03\u0137\x05\u0137\u0FA5\n\u0137\x03" +
        "\u0137\x05\u0137\u0FA8\n\u0137\x03\u0137\x05\u0137\u0FAB\n\u0137\x03\u0138" +
        "\x03\u0138\x03\u0138\x05\u0138\u0FB0\n\u0138\x03\u0138\x03\u0138\x03\u0138" +
        "\x05\u0138\u0FB5\n\u0138\x03\u0138\x03\u0138\x05\u0138\u0FB9\n\u0138\x03" +
        "\u0138\x03\u0138\x03\u0138\x05\u0138\u0FBE\n\u0138\x03\u0139\x03\u0139" +
        "\x06\u0139\u0FC2\n\u0139\r\u0139\x0E\u0139\u0FC3\x03\u0139\x05\u0139\u0FC7" +
        "\n\u0139\x03\u0139\x05\u0139\u0FCA\n\u0139\x03\u0139\x05\u0139\u0FCD\n" +
        "\u0139\x03\u013A\x03\u013A\x05\u013A\u0FD1\n\u013A\x03\u013B\x03\u013B" +
        "\x03\u013B\x05\u013B\u0FD6\n\u013B\x03\u013C\x03\u013C\x03\u013C\x05\u013C" +
        "\u0FDB\n\u013C\x03\u013D\x05\u013D\u0FDE\n\u013D\x03\u013D\x03\u013D\x03" +
        "\u013D\x03\u013E\x03\u013E\x03\u013E\x05\u013E\u0FE6\n\u013E\x03\u013E" +
        "\x03\u013E\x03\u013E\x05\u013E\u0FEB\n\u013E\x03\u013E\x05\u013E\u0FEE" +
        "\n\u013E\x03\u013E\x05\u013E\u0FF1\n\u013E\x03\u013E\x05\u013E\u0FF4\n" +
        "\u013E\x03\u013E\x05\u013E\u0FF7\n\u013E\x03\u013F\x03\u013F\x06\u013F" +
        "\u0FFB\n\u013F\r\u013F\x0E\u013F\u0FFC\x03\u0140\x03\u0140\x03\u0140\x05" +
        "\u0140\u1002\n\u0140\x03\u0140\x05\u0140\u1005\n\u0140\x03\u0141\x03\u0141" +
        "\x03\u0141\x05\u0141\u100A\n\u0141\x03\u0141\x05\u0141\u100D\n\u0141\x03" +
        "\u0142\x03\u0142\x06\u0142\u1011\n\u0142\r\u0142\x0E\u0142\u1012\x03\u0143" +
        "\x03\u0143\x05\u0143\u1017\n\u0143\x03\u0144\x03\u0144\x05\u0144\u101B" +
        "\n\u0144\x03\u0145\x03\u0145\x03\u0145\x03\u0146\x03\u0146\x03\u0146\x05" +
        "\u0146\u1023\n\u0146\x03\u0146\x03\u0146\x03\u0146\x05\u0146\u1028\n\u0146" +
        "\x03\u0146\x03\u0146\x05\u0146\u102C\n\u0146\x03\u0146\x03\u0146\x03\u0146" +
        "\x05\u0146\u1031\n\u0146\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x06\u0147" +
        "\u1037\n\u0147\r\u0147\x0E\u0147\u1038\x05\u0147\u103B\n\u0147\x03\u0148" +
        "\x03\u0148\x03\u0148\x07\u0148\u1040\n\u0148\f\u0148\x0E\u0148\u1043\v" +
        "\u0148\x03\u0148\x06\u0148\u1046\n\u0148\r\u0148\x0E\u0148\u1047\x03\u0148" +
        "\x05\u0148\u104B\n\u0148\x03\u0148\x05\u0148\u104E\n\u0148\x03\u0149\x03" +
        "\u0149\x03\u0149\x03\u0149\x05\u0149\u1054\n\u0149\x03\u014A\x03\u014A" +
        "\x03\u014A\x03\u014B\x06\u014B\u105A\n\u014B\r\u014B\x0E\u014B\u105B\x03" +
        "\u014B\x07\u014B\u105F\n\u014B\f\u014B\x0E\u014B\u1062\v\u014B\x03\u014C" +
        "\x03\u014C\x03\u014C\x07\u014C\u1067\n\u014C\f\u014C\x0E\u014C\u106A\v" +
        "\u014C\x03\u014D\x03\u014D\x05\u014D\u106E\n\u014D\x03\u014D\x03\u014D" +
        "\x05\u014D\u1072\n\u014D\x03\u014D\x03\u014D\x05\u014D\u1076\n\u014D\x03" +
        "\u014E\x03\u014E\x03\u014E\x03\u014F\x03\u014F\x03\u014F\x03\u0150\x03" +
        "\u0150\x03\u0150\x07\u0150\u1081\n\u0150\f\u0150\x0E\u0150\u1084\v\u0150" +
        "\x03\u0151\x03\u0151\x03\u0151\x05\u0151\u1089\n\u0151\x03\u0152\x06\u0152" +
        "\u108C\n\u0152\r\u0152\x0E\u0152\u108D\x03\u0153\x06\u0153\u1091\n\u0153" +
        "\r\u0153\x0E\u0153\u1092\x03\u0154\x06\u0154\u1096\n\u0154\r\u0154\x0E" +
        "\u0154\u1097\x03\u0155\x03\u0155\x05\u0155\u109C\n\u0155\x03\u0155\x05" +
        "\u0155\u109F\n\u0155\x03\u0155\x06\u0155\u10A2\n\u0155\r\u0155\x0E\u0155" +
        "\u10A3\x03\u0156\x03\u0156\x05\u0156\u10A8\n\u0156\x03\u0157\x03\u0157" +
        "\x05\u0157\u10AC\n\u0157\x03\u0158\x03\u0158\x03\u0158\x03\u0159\x03\u0159" +
        "\x03\u015A\x03\u015A\x05\u015A\u10B5\n\u015A\x03\u015A\x03\u015A\x05\u015A" +
        "\u10B9\n\u015A\x03\u015B\x03\u015B\x03\u015C\x03\u015C\x06\u015C\u10BF" +
        "\n\u015C\r\u015C\x0E\u015C\u10C0\x03\u015C\x03\u015C\x05\u015C\u10C5\n" +
        "\u015C\x03\u015C\x05\u015C\u10C8\n\u015C\x05\u015C\u10CA\n\u015C\x03\u015D" +
        "\x03\u015D\x03\u015D\x03\u015D\x05\u015D\u10D0\n\u015D\x03\u015D\x05\u015D" +
        "\u10D3\n\u015D\x03\u015E\x05\u015E\u10D6\n\u015E\x03\u015E\x03\u015E\x03" +
        "\u015E\x07\u015E\u10DB\n\u015E\f\u015E\x0E\u015E\u10DE\v\u015E\x05\u015E" +
        "\u10E0\n\u015E\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x07\u015F\u10E6" +
        "\n\u015F\f\u015F\x0E\u015F\u10E9\v\u015F\x05\u015F\u10EB\n\u015F\x03\u0160" +
        "\x03\u0160\x06\u0160\u10EF\n\u0160\r\u0160\x0E\u0160\u10F0\x03\u0160\x05" +
        "\u0160\u10F4\n\u0160\x03\u0161\x03\u0161\x06\u0161\u10F8\n\u0161\r\u0161" +
        "\x0E\u0161\u10F9\x03\u0162\x03\u0162\x05\u0162\u10FE\n\u0162\x03\u0162" +
        "\x03\u0162\x03\u0162\x05\u0162\u1103\n\u0162\x03\u0163\x03\u0163\x06\u0163" +
        "\u1107\n\u0163\r\u0163\x0E\u0163\u1108\x03\u0164\x03\u0164\x03\u0164\x03" +
        "\u0164\x03\u0164\x03\u0164\x05\u0164\u1111\n\u0164\x03\u0165\x03\u0165" +
        "\x06\u0165\u1115\n\u0165\r\u0165\x0E\u0165\u1116\x03\u0166\x03\u0166\x03" +
        "\u0166\x06\u0166\u111C\n\u0166\r\u0166\x0E\u0166\u111D\x03\u0167\x03\u0167" +
        "\x06\u0167\u1122\n\u0167\r\u0167\x0E\u0167\u1123\x03\u0167\x06\u0167\u1127" +
        "\n\u0167\r\u0167\x0E\u0167\u1128\x03\u0168\x03\u0168\x03\u0168\x05\u0168" +
        "\u112E\n\u0168\x03\u0168\x03\u0168\x07\u0168\u1132\n\u0168\f\u0168\x0E" +
        "\u0168\u1135\v\u0168\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x06\u0169" +
        "\u113B\n\u0169\r\u0169\x0E\u0169\u113C\x03\u016A\x03\u016A\x07\u016A\u1141" +
        "\n\u016A\f\u016A\x0E\u016A\u1144\v\u016A\x03\u016B\x03\u016B\x03\u016B" +
        "\x07\u016B\u1149\n\u016B\f\u016B\x0E\u016B\u114C\v\u016B\x03\u016C\x03" +
        "\u016C\x06\u016C\u1150\n\u016C\r\u016C\x0E\u016C\u1151\x03\u016D\x03\u016D" +
        "\x06\u016D\u1156\n\u016D\r\u016D\x0E\u016D\u1157\x03\u016E\x03\u016E\x05" +
        "\u016E\u115C\n\u016E\x03\u016E\x07\u016E\u115F\n\u016E\f\u016E\x0E\u016E" +
        "\u1162\v\u016E\x03\u016F\x03\u016F\x05\u016F\u1166\n\u016F\x03\u016F\x03" +
        "\u016F\x07\u016F\u116A\n\u016F\f\u016F\x0E\u016F\u116D\v\u016F\x03\u0170" +
        "\x03\u0170\x03\u0170\x05\u0170\u1172\n\u0170\x03\u0171\x03\u0171\x03\u0171" +
        "\x05\u0171\u1177\n\u0171\x03\u0172\x03\u0172\x05\u0172\u117B\n\u0172\x03" +
        "\u0172\x03\u0172\x05\u0172\u117F\n\u0172\x03\u0173\x03\u0173\x03\u0173" +
        "\x06\u0173\u1184\n\u0173\r\u0173\x0E\u0173\u1185\x03\u0173\x05\u0173\u1189" +
        "\n\u0173\x03\u0173\x07\u0173\u118C\n\u0173\f\u0173\x0E\u0173\u118F\v\u0173" +
        "\x03\u0173\x05\u0173\u1192\n\u0173\x03\u0173\x07\u0173\u1195\n\u0173\f" +
        "\u0173\x0E\u0173\u1198\v\u0173\x03\u0174\x05\u0174\u119B\n\u0174\x03\u0174" +
        "\x03\u0174\x05\u0174\u119F\n\u0174\x03\u0174\x06\u0174\u11A2\n\u0174\r" +
        "\u0174\x0E\u0174\u11A3\x03\u0175\x05\u0175\u11A7\n\u0175\x03\u0175\x03" +
        "\u0175\x05\u0175\u11AB\n\u0175\x03\u0175\x06\u0175\u11AE\n\u0175\r\u0175" +
        "\x0E\u0175\u11AF\x03\u0175\x05\u0175\u11B3\n\u0175\x03\u0175\x05\u0175" +
        "\u11B6\n\u0175\x03\u0176\x05\u0176\u11B9\n\u0176\x03\u0176\x03\u0176\x03" +
        "\u0176\x03\u0176\x03\u0177\x05\u0177\u11C0\n\u0177\x03\u0177\x03\u0177" +
        "\x05\u0177\u11C4\n\u0177\x03\u0177\x03\u0177\x03\u0178\x03\u0178\x06\u0178" +
        "\u11CA\n\u0178\r\u0178\x0E\u0178\u11CB\x03\u0179\x03\u0179\x03\u0179\x05" +
        "\u0179\u11D1\n\u0179\x03\u0179\x03\u0179\x05\u0179\u11D5\n\u0179\x03\u017A" +
        "\x03\u017A\x03\u017A\x03\u017B\x03\u017B\x06\u017B\u11DC\n\u017B\r\u017B" +
        "\x0E\u017B\u11DD\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
        "\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x05\u017C\u11EA\n\u017C" +
        "\x03\u017D\x03\u017D\x05\u017D\u11EE\n\u017D\x03\u017D\x03\u017D\x05\u017D" +
        "\u11F2\n\u017D\x03\u017E\x03\u017E\x03\u017E\x06\u017E\u11F7\n\u017E\r" +
        "\u017E\x0E\u017E\u11F8\x03\u017F\x03\u017F\x05\u017F\u11FD\n\u017F\x03" +
        "\u0180\x03\u0180\x03";
    Cobol85Parser._serializedATNSegment2 = "\u0180\x03\u0180\x06\u0180\u1203\n\u0180\r\u0180\x0E\u0180\u1204\x03\u0181" +
        "\x03\u0181\x03\u0182\x03\u0182\x03\u0182\x05\u0182\u120C\n\u0182\x03\u0182" +
        "\x03\u0182\x03\u0182\x05\u0182\u1211\n\u0182\x03\u0182\x05\u0182\u1214" +
        "\n\u0182\x03\u0182\x05\u0182\u1217\n\u0182\x03\u0182\x05\u0182\u121A\n" +
        "\u0182\x03\u0183\x06\u0183\u121D\n\u0183\r\u0183\x0E\u0183\u121E\x03\u0184" +
        "\x03\u0184\x05\u0184\u1223\n\u0184\x03\u0185\x03\u0185\x03\u0185\x06\u0185" +
        "\u1228\n\u0185\r\u0185\x0E\u0185\u1229\x03\u0186\x03\u0186\x05\u0186\u122E" +
        "\n\u0186\x03\u0187\x03\u0187\x05\u0187\u1232\n\u0187\x03\u0188\x03\u0188" +
        "\x03\u0188\x03\u0188\x03\u0188\x06\u0188\u1239\n\u0188\r\u0188\x0E\u0188" +
        "\u123A\x03\u0189\x03\u0189\x06\u0189\u123F\n\u0189\r\u0189\x0E\u0189\u1240" +
        "\x03\u018A\x03\u018A\x03\u018A\x05\u018A\u1246\n\u018A\x03\u018A\x03\u018A" +
        "\x05\u018A\u124A\n\u018A\x03\u018B\x03\u018B\x06\u018B\u124E\n\u018B\r" +
        "\u018B\x0E\u018B\u124F\x03\u018C\x03\u018C\x05\u018C\u1254\n\u018C\x03" +
        "\u018C\x03\u018C\x05\u018C\u1258\n\u018C\x03\u018D\x03\u018D\x06\u018D" +
        "\u125C\n\u018D\r\u018D\x0E\u018D\u125D\x03\u018E\x03\u018E\x06\u018E\u1262" +
        "\n\u018E\r\u018E\x0E\u018E\u1263\x03\u018F\x03\u018F\x03\u018F\x05\u018F" +
        "\u1269\n\u018F\x03\u0190\x05\u0190\u126C\n\u0190\x03\u0190\x07\u0190\u126F" +
        "\n\u0190\f\u0190\x0E\u0190\u1272\v\u0190\x03\u0190\x03\u0190\x03\u0191" +
        "\x03\u0191\x03\u0191\x05\u0191\u1279\n\u0191\x03\u0191\x05\u0191\u127C" +
        "\n\u0191\x03\u0192\x03\u0192\x03\u0192\x05\u0192\u1281\n\u0192\x03\u0193" +
        "\x03\u0193\x05\u0193\u1285\n\u0193\x03\u0193\x03\u0193\x03\u0194\x05\u0194" +
        "\u128A\n\u0194\x03\u0194\x03\u0194\x03\u0194\x03\u0195\x03\u0195\x03\u0195" +
        "\x03\u0195\x03\u0195\x05\u0195\u1294\n\u0195\x05\u0195\u1296\n\u0195\x03" +
        "\u0196\x03\u0196\x03\u0196\x07\u0196\u129B\n\u0196\f\u0196\x0E\u0196\u129E" +
        "\v\u0196\x03\u0197\x03\u0197\x05\u0197\u12A2\n\u0197\x03\u0197\x03\u0197" +
        "\x03\u0197\x03\u0197\x03\u0198\x03\u0198\x03\u0198\x03\u0199\x03\u0199" +
        "\x03\u0199\x03\u0199\x05\u0199\u12AF\n\u0199\x03\u019A\x03\u019A\x03\u019A" +
        "\x03\u019A\x05\u019A\u12B5\n\u019A\x03\u019B\x05\u019B\u12B8\n\u019B\x03" +
        "\u019B\x03\u019B\x03\u019B\x03\u019C\x03\u019C\x06\u019C\u12BF\n\u019C" +
        "\r\u019C\x0E\u019C\u12C0\x03\u019D\x03\u019D\x03\u019D\x05\u019D\u12C6" +
        "\n\u019D\x03\u019D\x05\u019D\u12C9\n\u019D\x03\u019D\x05\u019D\u12CC\n" +
        "\u019D\x03\u019D\x05\u019D\u12CF\n\u019D\x03\u019D\x05\u019D\u12D2\n\u019D" +
        "\x03\u019D\x05\u019D\u12D5\n\u019D\x03\u019D\x05\u019D\u12D8\n\u019D\x03" +
        "\u019D\x05\u019D\u12DB\n\u019D\x03\u019D\x05\u019D\u12DE\n\u019D\x03\u019D" +
        "\x05\u019D\u12E1\n\u019D\x03\u019E\x03\u019E\x03\u019E\x03\u019F\x05\u019F" +
        "\u12E7\n\u019F\x03\u019F\x03\u019F\x03\u019F\x05\u019F\u12EC\n\u019F\x03" +
        "\u01A0\x03\u01A0\x05\u01A0\u12F0\n\u01A0\x03\u01A0\x03\u01A0\x03\u01A1" +
        "\x03\u01A1\x03\u01A1\x05\u01A1\u12F7\n\u01A1\x03\u01A1\x05\u01A1\u12FA" +
        "\n\u01A1\x03\u01A1\x05\u01A1\u12FD\n\u01A1\x03\u01A1\x05\u01A1\u1300\n" +
        "\u01A1\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03" +
        "\u01A2\x03\u01A2\x07\u01A2\u130A\n\u01A2\f\u01A2\x0E\u01A2\u130D\v\u01A2" +
        "\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x05\u01A3" +
        "\u1315\n\u01A3\x03\u01A4\x03\u01A4\x03\u01A4\x05\u01A4\u131A\n\u01A4\x03" +
        "\u01A4\x03\u01A4\x05\u01A4\u131E\n\u01A4\x03\u01A4\x05\u01A4\u1321\n\u01A4" +
        "\x03\u01A5\x03\u01A5\x03\u01A5\x07\u01A5\u1326\n\u01A5\f\u01A5\x0E\u01A5" +
        "\u1329\v\u01A5\x03\u01A6\x03\u01A6\x03\u01A6\x07\u01A6\u132E\n\u01A6\f" +
        "\u01A6\x0E\u01A6\u1331\v\u01A6\x03\u01A7\x03\u01A7\x05\u01A7\u1335\n\u01A7" +
        "\x03\u01A7\x03\u01A7\x05\u01A7\u1339\n\u01A7\x03\u01A8\x05\u01A8\u133C" +
        "\n\u01A8\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A9\x03\u01A9\x05\u01A9\u1343" +
        "\n\u01A9\x03\u01A9\x03\u01A9\x03\u01AA\x03\u01AA\x05\u01AA\u1349\n\u01AA" +
        "\x03\u01AA\x03\u01AA\x05\u01AA\u134D\n\u01AA\x03\u01AB\x03\u01AB\x05\u01AB" +
        "\u1351\n\u01AB\x03\u01AB\x03\u01AB\x03\u01AC\x03\u01AC\x03\u01AC\x03\u01AC" +
        "\x05\u01AC\u1359\n\u01AC\x03\u01AD\x03\u01AD\x03\u01AD\x05\u01AD\u135E" +
        "\n\u01AD\x03\u01AD\x05\u01AD\u1361\n\u01AD\x03\u01AD\x03\u01AD\x05\u01AD" +
        "\u1365\n\u01AD\x03\u01AD\x05\u01AD\u1368\n\u01AD\x03\u01AE\x03\u01AE\x03" +
        "\u01AE\x03\u01AF\x03\u01AF\x03\u01AF\x05\u01AF\u1370\n\u01AF\x03\u01AF" +
        "\x05\u01AF\u1373\n\u01AF\x03\u01AF\x05\u01AF\u1376\n\u01AF\x03\u01AF\x05" +
        "\u01AF\u1379\n\u01AF\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B1\x03\u01B1" +
        "\x05\u01B1\u1380\n\u01B1\x03\u01B1\x03\u01B1\x05\u01B1\u1384\n\u01B1\x03" +
        "\u01B1\x05\u01B1\u1387\n\u01B1\x03\u01B1\x06\u01B1\u138A\n\u01B1\r\u01B1" +
        "\x0E\u01B1\u138B\x03\u01B1\x05\u01B1\u138F\n\u01B1\x03\u01B2\x03\u01B2" +
        "\x03\u01B2\x03\u01B3\x03\u01B3\x03\u01B3\x03\u01B3\x03\u01B3\x07\u01B3" +
        "\u1399\n\u01B3\f\u01B3\x0E\u01B3\u139C\v\u01B3\x05\u01B3\u139E\n\u01B3" +
        "\x03\u01B4\x03\u01B4\x03\u01B4\x05\u01B4\u13A3\n\u01B4\x03\u01B4\x05\u01B4" +
        "\u13A6\n\u01B4\x03\u01B4\x05\u01B4\u13A9\n\u01B4\x03\u01B5\x03\u01B5\x05" +
        "\u01B5\u13AD\n\u01B5\x03\u01B5\x05\u01B5\u13B0\n\u01B5\x03\u01B5\x05\u01B5" +
        "\u13B3\n\u01B5\x03\u01B5\x05\u01B5\u13B6\n\u01B5\x03\u01B5\x05\u01B5\u13B9" +
        "\n\u01B5\x03\u01B6\x03\u01B6\x03\u01B6\x03\u01B6\x03\u01B7\x03\u01B7\x03" +
        "\u01B7\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x05\u01B8\u13C7" +
        "\n\u01B8\x03\u01B9\x03\u01B9\x05\u01B9\u13CB\n\u01B9\x03\u01BA\x03\u01BA" +
        "\x05\u01BA\u13CF\n\u01BA\x03\u01BA\x03\u01BA\x03\u01BA\x05\u01BA\u13D4" +
        "\n\u01BA\x03\u01BB\x03\u01BB\x03\u01BC\x03\u01BC\x05\u01BC\u13DA\n\u01BC" +
        "\x03\u01BC\x05\u01BC\u13DD\n\u01BC\x03\u01BD\x03\u01BD\x03\u01BE\x03\u01BE" +
        "\x06\u01BE\u13E3\n\u01BE\r\u01BE\x0E\u01BE\u13E4\x03\u01BE\x05\u01BE\u13E8" +
        "\n\u01BE\x03\u01BF\x06\u01BF\u13EB\n\u01BF\r\u01BF\x0E\u01BF\u13EC\x03" +
        "\u01BF\x03\u01BF\x06\u01BF\u13F1\n\u01BF\r\u01BF\x0E\u01BF\u13F2\x03\u01C0" +
        "\x06\u01C0\u13F6\n\u01C0\r\u01C0\x0E\u01C0\u13F7\x03\u01C0\x03\u01C0\x03" +
        "\u01C0\x03\u01C0\x05\u01C0\u13FE\n\u01C0\x03\u01C0\x03\u01C0\x03\u01C1" +
        "\x03\u01C1\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x05\u01C2" +
        "\u1409\n\u01C2\x03\u01C2\x03\u01C2\x05\u01C2\u140D\n\u01C2\x03\u01C3\x03" +
        "\u01C3\x05\u01C3\u1411\n\u01C3\x03\u01C4\x03\u01C4\x03\u01C4\x06\u01C4" +
        "\u1416\n\u01C4\r\u01C4\x0E\u01C4\u1417\x03\u01C4\x05\u01C4\u141B\n\u01C4" +
        "\x03\u01C4\x05\u01C4\u141E\n\u01C4\x03\u01C4\x05\u01C4\u1421\n\u01C4\x03" +
        "\u01C4\x07\u01C4\u1424\n\u01C4\f\u01C4\x0E\u01C4\u1427\v\u01C4\x03\u01C4" +
        "\x05\u01C4\u142A\n\u01C4\x03\u01C4\x07\u01C4\u142D\n\u01C4\f\u01C4\x0E" +
        "\u01C4\u1430\v\u01C4\x03\u01C5\x05\u01C5\u1433\n\u01C5\x03\u01C5\x03\u01C5" +
        "\x05\u01C5\u1437\n\u01C5\x03\u01C5\x06\u01C5\u143A\n\u01C5\r\u01C5\x0E" +
        "\u01C5\u143B\x03\u01C6\x05\u01C6\u143F\n\u01C6\x03\u01C6\x03\u01C6\x05" +
        "\u01C6\u1443\n\u01C6\x03\u01C6\x05\u01C6\u1446\n\u01C6\x03\u01C7\x05\u01C7" +
        "\u1449\n\u01C7\x03\u01C7\x03\u01C7\x05\u01C7\u144D\n\u01C7\x03\u01C7\x06" +
        "\u01C7\u1450\n\u01C7\r\u01C7\x0E\u01C7\u1451\x03\u01C7\x05\u01C7\u1455" +
        "\n\u01C7\x03\u01C7\x05\u01C7\u1458\n\u01C7\x03\u01C8\x05\u01C8\u145B\n" +
        "\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C9\x05\u01C9\u1462" +
        "\n\u01C9\x03\u01C9\x03\u01C9\x05\u01C9\u1466\n\u01C9\x03\u01C9\x03\u01C9" +
        "\x03\u01CA\x03\u01CA\x03\u01CA\x05\u01CA\u146D\n\u01CA\x03\u01CA\x03\u01CA" +
        "\x05\u01CA\u1471\n\u01CA\x03\u01CB\x03\u01CB\x03\u01CB\x03\u01CC\x03\u01CC" +
        "\x06\u01CC\u1478\n\u01CC\r\u01CC\x0E\u01CC\u1479\x03\u01CD\x03\u01CD\x03" +
        "\u01CD\x05\u01CD\u147F\n\u01CD\x03\u01CD\x03\u01CD\x05\u01CD\u1483\n\u01CD" +
        "\x03\u01CE\x03\u01CE\x03\u01CE\x03\u01CF\x03\u01CF\x06\u01CF\u148A\n\u01CF" +
        "\r\u01CF\x0E\u01CF\u148B\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0" +
        "\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x05\u01D0\u1498\n\u01D0" +
        "\x03\u01D1\x03\u01D1\x03\u01D1\x05\u01D1\u149D\n\u01D1\x03\u01D1\x05\u01D1" +
        "\u14A0\n\u01D1\x03\u01D1\x05\u01D1\u14A3\n\u01D1\x03\u01D1\x05\u01D1\u14A6" +
        "\n\u01D1\x03\u01D2\x03\u01D2\x05\u01D2\u14AA\n\u01D2\x03\u01D2\x03\u01D2" +
        "\x05\u01D2\u14AE\n\u01D2\x03\u01D2\x03\u01D2\x03\u01D2\x05\u01D2\u14B3" +
        "\n\u01D2\x03\u01D2\x03\u01D2\x03\u01D2\x03\u01D2\x05\u01D2\u14B9\n\u01D2" +
        "\x03\u01D2\x03\u01D2\x03\u01D2\x03\u01D2\x05\u01D2\u14BF\n\u01D2\x03\u01D2" +
        "\x03\u01D2\x03\u01D2\x05\u01D2\u14C4\n\u01D2\x03\u01D2\x05\u01D2\u14C7" +
        "\n\u01D2\x03\u01D2\x03\u01D2\x03\u01D3\x03\u01D3\x03\u01D3\x05\u01D3\u14CE" +
        "\n\u01D3\x03\u01D4\x03\u01D4\x06\u01D4\u14D2\n\u01D4\r\u01D4\x0E\u01D4" +
        "\u14D3\x03\u01D4\x03\u01D4\x05\u01D4\u14D8\n\u01D4\x03\u01D4\x05\u01D4" +
        "\u14DB\n\u01D4\x03\u01D4\x05\u01D4\u14DE\n\u01D4\x03\u01D4\x05\u01D4\u14E1" +
        "\n\u01D4\x03\u01D5\x06\u01D5\u14E4\n\u01D5\r\u01D5\x0E\u01D5\u14E5\x03" +
        "\u01D5\x03\u01D5\x05\u01D5\u14EA\n\u01D5\x03\u01D6\x03\u01D6\x05\u01D6" +
        "\u14EE\n\u01D6\x03\u01D7\x03\u01D7\x05\u01D7\u14F2\n\u01D7\x03\u01D7\x03" +
        "\u01D7\x03\u01D7\x05\u01D7\u14F7\n\u01D7\x03\u01D8\x03\u01D8\x03\u01D8" +
        "\x05\u01D8\u14FC\n\u01D8\x03\u01D9\x03\u01D9\x03\u01D9\x03\u01DA\x05\u01DA" +
        "\u1502\n\u01DA\x03\u01DA\x03\u01DA\x03\u01DA\x03\u01DB\x03\u01DB\x03\u01DB" +
        "\x03\u01DB\x05\u01DB\u150B\n\u01DB\x03\u01DB\x05\u01DB\u150E\n\u01DB\x03" +
        "\u01DB\x05\u01DB\u1511\n\u01DB\x03\u01DB\x05\u01DB\u1514\n\u01DB\x03\u01DC" +
        "\x06\u01DC\u1517\n\u01DC\r\u01DC\x0E\u01DC\u1518\x03\u01DC\x03\u01DC\x06" +
        "\u01DC\u151D\n\u01DC\r\u01DC\x0E\u01DC\u151E\x03\u01DD\x06\u01DD\u1522" +
        "\n\u01DD\r\u01DD\x0E\u01DD\u1523\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD" +
        "\x06\u01DD\u152A\n\u01DD\r\u01DD\x0E\u01DD\u152B\x03\u01DE\x03\u01DE\x03" +
        "\u01DE\x03\u01DE\x03\u01DE\x03\u01DF\x03\u01DF\x05\u01DF\u1535\n\u01DF" +
        "\x03\u01E0\x03\u01E0\x05\u01E0\u1539\n\u01E0\x03\u01E1\x03\u01E1\x05\u01E1" +
        "\u153D\n\u01E1\x03\u01E2\x03\u01E2\x05\u01E2\u1541\n\u01E2\x03\u01E3\x03" +
        "\u01E3\x05\u01E3\u1545\n\u01E3\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E5" +
        "\x03\u01E5\x03\u01E5\x03\u01E5\x05\u01E5\u154E\n\u01E5\x03\u01E5\x05\u01E5" +
        "\u1551\n\u01E5\x03\u01E5\x05\u01E5\u1554\n\u01E5\x03\u01E5\x05\u01E5\u1557" +
        "\n\u01E5\x03\u01E5\x05\u01E5\u155A\n\u01E5\x03\u01E6\x03\u01E6\x03\u01E6" +
        "\x07\u01E6\u155F\n\u01E6\f\u01E6\x0E\u01E6\u1562\v\u01E6\x05\u01E6\u1564" +
        "\n\u01E6\x03\u01E7\x03\u01E7\x05\u01E7\u1568\n\u01E7\x03\u01E7\x05\u01E7" +
        "\u156B\n\u01E7\x03\u01E7\x03\u01E7\x05\u01E7\u156F\n\u01E7\x03\u01E8\x03" +
        "\u01E8\x05\u01E8\u1573\n\u01E8\x03\u01E8\x03\u01E8\x05\u01E8\u1577\n\u01E8" +
        "\x03\u01E9\x03\u01E9\x06\u01E9\u157B\n\u01E9\r\u01E9\x0E\u01E9\u157C\x03" +
        "\u01EA\x03\u01EA\x05\u01EA\u1581\n\u01EA\x03\u01EA\x05\u01EA\u1584\n\u01EA" +
        "\x03\u01EB\x03\u01EB\x05\u01EB\u1588\n\u01EB\x03\u01EB\x03\u01EB\x03\u01EC" +
        "\x03\u01EC\x05\u01EC\u158E\n\u01EC\x03\u01EC\x03\u01EC\x03\u01ED\x05\u01ED" +
        "\u1593\n\u01ED\x03\u01ED\x03\u01ED\x03\u01ED\x03\u01EE\x03\u01EE\x05\u01EE" +
        "\u159A\n\u01EE\x03\u01EE\x03\u01EE\x03\u01EF\x03\u01EF\x03\u01EF\x05\u01EF" +
        "\u15A1\n\u01EF\x03\u01F0\x05\u01F0\u15A4\n\u01F0\x03\u01F0\x03\u01F0\x05" +
        "\u01F0\u15A8\n\u01F0\x03\u01F0\x03\u01F0\x03\u01F0\x05\u01F0\u15AD\n\u01F0" +
        "\x03\u01F0\x03\u01F0\x03\u01F1\x03\u01F1\x03\u01F1\x03\u01F1\x03\u01F1" +
        "\x06\u01F1\u15B6\n\u01F1\r\u01F1\x0E\u01F1\u15B7\x05\u01F1\u15BA\n\u01F1" +
        "\x03\u01F2\x05\u01F2\u15BD\n\u01F2\x03\u01F2\x03\u01F2\x05\u01F2\u15C1" +
        "\n\u01F2\x03\u01F2\x06\u01F2\u15C4\n\u01F2\r\u01F2\x0E\u01F2\u15C5\x03" +
        "\u01F3\x03\u01F3\x03\u01F3\x03\u01F3\x05\u01F3\u15CC\n\u01F3\x03\u01F3" +
        "\x05\u01F3\u15CF\n\u01F3\x03\u01F3\x03\u01F3\x03\u01F3\x05\u01F3\u15D4" +
        "\n\u01F3\x03\u01F4\x03\u01F4\x03\u01F4\x05\u01F4\u15D9\n\u01F4\x03\u01F4" +
        "\x05\u01F4\u15DC\n\u01F4\x03\u01F4\x05\u01F4\u15DF\n\u01F4\x03\u01F4\x05" +
        "\u01F4\u15E2\n\u01F4\x03\u01F4\x05\u01F4\u15E5\n\u01F4\x03\u01F4\x05\u01F4" +
        "\u15E8\n\u01F4\x03\u01F4\x05\u01F4\u15EB\n\u01F4\x03\u01F5\x03\u01F5\x03" +
        "\u01F5\x05\u01F5\u15F0\n\u01F5\x03\u01F6\x03\u01F6\x05\u01F6\u15F4\n\u01F6" +
        "\x03\u01F6\x03\u01F6\x03\u01F6\x05\u01F6\u15F9\n\u01F6\x03\u01F7\x03\u01F7" +
        "\x03\u01F8\x03\u01F8\x05\u01F8\u15FF\n\u01F8\x03\u01F8\x05\u01F8\u1602" +
        "\n\u01F8\x03\u01F9\x03\u01F9\x03\u01FA\x05\u01FA\u1607\n\u01FA\x03\u01FA" +
        "\x03\u01FA\x07\u01FA\u160B\n\u01FA\f\u01FA\x0E\u01FA\u160E\v\u01FA\x03" +
        "\u01FB\x03\u01FB\x05\u01FB\u1612\n\u01FB\x03\u01FB\x03\u01FB\x07\u01FB" +
        "\u1616\n\u01FB\f\u01FB\x0E\u01FB\u1619\v\u01FB\x03\u01FC\x05\u01FC\u161C" +
        "\n\u01FC\x03\u01FC\x03\u01FC\x07\u01FC\u1620\n\u01FC\f\u01FC\x0E\u01FC" +
        "\u1623\v\u01FC\x03\u01FD\x03\u01FD\x05\u01FD\u1627\n\u01FD\x03\u01FD\x03" +
        "\u01FD\x07\u01FD\u162B\n\u01FD\f\u01FD\x0E\u01FD\u162E\v\u01FD\x03\u01FE" +
        "\x03\u01FE\x05\u01FE\u1632\n\u01FE\x03\u01FE\x07\u01FE\u1635\n\u01FE\f" +
        "\u01FE\x0E\u01FE\u1638\v\u01FE\x03\u01FF\x03\u01FF\x03\u01FF\x05\u01FF" +
        "\u163D\n\u01FF\x03\u01FF\x07\u01FF\u1640\n\u01FF\f\u01FF\x0E\u01FF\u1643" +
        "\v\u01FF\x03\u0200\x05\u0200\u1646\n\u0200\x03\u0200\x03\u0200\x07\u0200" +
        "\u164A\n\u0200\f\u0200\x0E\u0200\u164D\v\u0200\x03\u0201\x03\u0201\x05" +
        "\u0201\u1651\n\u0201\x03\u0201\x03\u0201\x07\u0201\u1655\n\u0201\f\u0201" +
        "\x0E\u0201\u1658\v\u0201\x03\u0202\x05\u0202\u165B\n\u0202\x03\u0202\x03" +
        "\u0202\x03\u0202\x07\u0202\u1660\n\u0202\f\u0202\x0E\u0202\u1663\v\u0202" +
        "\x03\u0203\x03\u0203\x05\u0203\u1667\n\u0203\x03\u0203\x03\u0203\x03\u0203" +
        "\x07\u0203\u166C\n\u0203\f\u0203\x0E\u0203\u166F\v\u0203\x03\u0204\x05" +
        "\u0204\u1672\n\u0204\x03\u0204\x03\u0204\x07\u0204\u1676\n\u0204\f\u0204" +
        "\x0E\u0204\u1679\v\u0204\x03\u0205\x03\u0205\x05\u0205\u167D\n\u0205\x03" +
        "\u0205\x03\u0205\x07\u0205\u1681\n\u0205\f\u0205\x0E\u0205\u1684\v\u0205" +
        "\x03\u0206\x03\u0206\x07\u0206\u1688\n\u0206\f\u0206\x0E\u0206\u168B\v" +
        "\u0206\x03\u0207\x03\u0207\x03\u0207\x03\u0208\x03\u0208\x07\u0208\u1692" +
        "\n\u0208\f\u0208\x0E\u0208\u1695\v\u0208\x03\u0209\x03\u0209\x03\u0209" +
        "\x03\u020A\x05\u020A\u169B\n\u020A\x03\u020A\x03\u020A\x07\u020A\u169F" +
        "\n\u020A\f\u020A\x0E\u020A\u16A2\v\u020A\x03\u020B\x03\u020B\x03\u020B" +
        "\x03\u020C\x03\u020C\x03\u020C\x03\u020C\x03\u020C\x03\u020C\x05\u020C" +
        "\u16AD\n\u020C\x03\u020D\x03\u020D\x07\u020D\u16B1\n\u020D\f\u020D\x0E" +
        "\u020D\u16B4\v\u020D\x03\u020E\x03\u020E\x03\u020E\x06\u020E\u16B9\n\u020E" +
        "\r\u020E\x0E\u020E\u16BA\x05\u020E\u16BD\n\u020E\x03\u020F\x05\u020F\u16C0" +
        "\n\u020F\x03\u020F\x03\u020F\x03\u0210\x03\u0210\x03\u0210\x03\u0210\x03" +
        "\u0210\x03\u0210\x03\u0210\x05\u0210\u16CB\n\u0210\x03\u0211\x03\u0211" +
        "\x05\u0211\u16CF\n\u0211\x03\u0211\x05\u0211\u16D2\n\u0211\x03\u0211\x03" +
        "\u0211\x03\u0211\x03\u0211\x03\u0211\x03\u0211\x03\u0211\x05\u0211\u16DB" +
        "\n\u0211\x03\u0212\x03\u0212\x07\u0212\u16DF\n\u0212\f\u0212\x0E\u0212" +
        "\u16E2\v\u0212\x03\u0212\x05\u0212\u16E5\n\u0212\x03\u0212\x07\u0212\u16E8" +
        "\n\u0212\f\u0212\x0E\u0212\u16EB\v\u0212\x03\u0212\x07\u0212\u16EE\n\u0212" +
        "\f\u0212\x0E\u0212\u16F1\v\u0212\x05\u0212\u16F3\n\u0212\x03\u0213\x03" +
        "\u0213\x03\u0213\x05\u0213\u16F8\n\u0213\x03\u0213\x07\u0213\u16FB\n\u0213" +
        "\f\u0213\x0E\u0213\u16FE\v\u0213\x03\u0213\x03\u0213\x03\u0214\x03\u0214" +
        "\x03\u0214\x05\u0214\u1705\n\u0214\x03\u0215\x03\u0215\x05\u0215\u1709" +
        "\n\u0215\x03\u0215\x05\u0215\u170C\n\u0215\x03\u0215\x03\u0215\x03\u0216" +
        "\x03\u0216\x03\u0216\x03\u0216\x03\u0217\x03\u0217\x03\u0217\x03\u0217" +
        "\x03\u0217\x03\u0217\x03\u0218\x03\u0218\x03\u0218\x06\u0218\u171D\n\u0218" +
        "\r\u0218\x0E\u0218\u171E\x03\u0219\x05\u0219\u1722\n\u0219\x03\u0219\x05" +
        "\u0219\u1725\n\u0219\x03\u0219\x03\u0219\x05\u0219\u1729\n\u0219\x03\u0219" +
        "\x03\u0219\x03\u0219\x05\u0219\u172E\n\u0219\x03\u0219\x03\u0219\x03\u0219" +
        "\x05\u0219\u1733\n\u0219\x03\u0219\x05\u0219\u1736\n\u0219\x03\u0219\x03" +
        "\u0219\x03\u0219\x05\u0219\u173B\n\u0219\x03\u0219\x03\u0219\x03\u0219" +
        "\x05\u0219\u1740\n\u0219\x03\u0219\x03\u0219\x03\u0219\x05\u0219\u1745" +
        "\n\u0219\x03\u0219\x03\u0219\x03\u0219\x05\u0219\u174A\n\u0219\x03\u0219" +
        "\x05\u0219\u174D\n\u0219\x03\u021A\x05\u021A\u1750\n\u021A\x03\u021A\x05" +
        "\u021A\u1753\n\u021A\x03\u021A\x03\u021A\x03\u021A\x03\u021A\x03\u021A" +
        "\x03\u021A\x05\u021A\u175B\n\u021A\x03\u021B\x03\u021B\x03\u021B\x03\u021B" +
        "\x05\u021B\u1761\n\u021B\x03\u021C\x03\u021C\x03\u021C\x03\u021C\x05\u021C" +
        "\u1767\n\u021C\x03\u021C\x07\u021C\u176A\n\u021C\f\u021C\x0E\u021C\u176D" +
        "\v\u021C\x03\u021C\x03\u021C\x07\u021C\u1771\n\u021C\f\u021C\x0E\u021C" +
        "\u1774\v\u021C\x03\u021C\x05\u021C\u1777\n\u021C\x03\u021D\x03\u021D\x03" +
        "\u021D\x03\u021D\x03\u021D\x05\u021D\u177E\n\u021D\x03\u021D\x07\u021D" +
        "\u1781\n\u021D\f\u021D\x0E\u021D\u1784\v\u021D\x03\u021D\x03\u021D\x07" +
        "\u021D\u1788\n\u021D\f\u021D\x0E\u021D\u178B\v\u021D\x03\u021D\x05\u021D" +
        "\u178E\n\u021D\x03\u021E\x03\u021E\x03\u021E\x03\u021E\x05\u021E\u1794" +
        "\n\u021E\x03\u021E\x03\u021E\x03\u021F\x03\u021F\x03\u0220\x03\u0220\x03" +
        "\u0221\x03\u0221\x03\u0221\x03\u0221\x05\u0221\u17A0\n\u0221\x03\u0221" +
        "\x03\u0221\x05\u0221\u17A4\n\u0221\x03\u0221\x05\u0221\u17A7\n\u0221\x03" +
        "\u0222\x03\u0222\x03\u0222\x03\u0222\x05\u0222\u17AD\n\u0222\x03\u0222" +
        "\x03\u0222\x05\u0222\u17B1\n\u0222\x03\u0222\x05\u0222\u17B4\n\u0222\x03" +
        "\u0223\x03\u0223\x03\u0223\x03\u0223\x05\u0223\u17BA\n\u0223\x03\u0224" +
        "\x03\u0224\x05\u0224\u17BE\n\u0224\x03\u0224\x06\u0224\u17C1\n\u0224\r" +
        "\u0224\x0E\u0224\u17C2\x03\u0224\x05\u0224\u17C6\n\u0224\x03\u0224\x05" +
        "\u0224\u17C9\n\u0224\x03\u0225\x03\u0225\x03\u0225\x03\u0226\x03\u0226" +
        "\x03\u0226\x03\u0227\x03\u0227\x03\u0227\x03\u0228\x03\u0228\x05\u0228" +
        "\u17D6\n\u0228\x03\u0229\x03\u0229\x03\u0229\x03\u022A\x03\u022A\x03\u022A" +
        "\x03\u022B\x03\u022B\x03\u022B\x03\u022C\x03\u022C\x03\u022C\x03\u022D" +
        "\x03\u022D\x03\u022D\x03\u022E\x03\u022E\x03\u022E\x03\u022F\x03\u022F" +
        "\x03\u0230\x03\u0230\x03\u0231\x03\u0231\x03\u0232\x03\u0232\x03\u0233" +
        "\x03\u0233\x03\u0234\x03\u0234\x03\u0235\x03\u0235\x03\u0236\x03\u0236" +
        "\x03\u0237\x03\u0237\x03\u0237\x05\u0237\u17FD\n\u0237\x03\u0238\x03\u0238" +
        "\x03\u0239\x03\u0239\x03\u023A\x03\u023A\x03\u023A\x03\u023A\x03\u023A" +
        "\x03\u023A\x05\u023A\u1809\n\u023A\x03\u023B\x03\u023B\x03\u023C\x03\u023C" +
        "\x03\u023D\x03\u023D\x03\u023E\x03\u023E\x03\u023F\x03\u023F\x03\u0240" +
        "\x03\u0240\x05\u0240\u1817\n\u0240\x03\u0241\x03\u0241\x05\u0241\u181B" +
        "\n\u0241\x03\u0241\x05\u0241\u181E\n\u0241\x03\u0242\x03\u0242\x05\u0242" +
        "\u1822\n\u0242\x03\u0243\x03\u0243\x03\u0244\x03\u0244\x03\u0245\x03\u0245" +
        "\x03\u0246\x03\u0246\x03\u0247\x03\u0247\x05\u0247\u182E\n\u0247\x03\u0248" +
        "\x03\u0248\x03\u0249\x03\u0249\x03\u024A\x03\u024A\x03\u024B\x03\u024B" +
        "\x03\u024C\x03\u024C\x03\u024C\x03\u024C\x03\u024C\x03\u024C\x05\u024C" +
        "\u183E\n\u024C\x03\u024D\x03\u024D\x03\u024E\x03\u024E\x03\u024E\x05\u024E" +
        "\u1845\n\u024E\x03\u024F\x03\u024F\x03\u0250\x03\u0250\x03\u0250\x03\u0250" +
        "\x05\u0250\u184D\n\u0250\x03\u0250\x03\u0250\x03\u0251\x03\u0251\x03\u0251" +
        "\x03\u0251\x05\u0251\u1855\n\u0251\x03\u0251\x03\u0251\x03\u0252\x03\u0252" +
        "\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252" +
        "\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x05\u0252" +
        "\u1868\n\u0252\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253" +
        "\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253" +
        "\x03\u0253\x03\u0253\x05\u0253\u1879\n\u0253\x03\u0253\x03\u0253\x03\u0253" +
        "\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253" +
        "\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x05\u0253" +
        "\u188B\n\u0253\x03\u0254\x06\u0254\u188E\n\u0254\r\u0254\x0E\u0254\u188F" +
        "\x03\u0254\x02\x02\x02\u0255\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02" +
        "\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02" +
        " \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02" +
        "<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02" +
        "X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02" +
        "t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02" +
        "\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02" +
        "\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02" +
        "\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02" +
        "\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02" +
        "\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02" +
        "\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02" +
        "\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02" +
        "\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02" +
        "\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02" +
        "\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02" +
        "\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02" +
        "\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02" +
        "\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02" +
        "\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02" +
        "\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02" +
        "\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02" +
        "\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02" +
        "\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02" +
        "\u01A0\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02" +
        "\u01AE\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02" +
        "\u01BC\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02" +
        "\u01CA\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02" +
        "\u01D8\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02" +
        "\u01E6\x02\u01E8\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02" +
        "\u01F4\x02\u01F6\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02" +
        "\u0202\x02\u0204\x02\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02" +
        "\u0210\x02\u0212\x02\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02" +
        "\u021E\x02\u0220\x02\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02" +
        "\u022C\x02\u022E\x02\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02" +
        "\u023A\x02\u023C\x02\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02" +
        "\u0248\x02\u024A\x02\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02" +
        "\u0256\x02\u0258\x02\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02" +
        "\u0264\x02\u0266\x02\u0268\x02\u026A\x02\u026C\x02\u026E\x02\u0270\x02" +
        "\u0272\x02\u0274\x02\u0276\x02\u0278\x02\u027A\x02\u027C\x02\u027E\x02" +
        "\u0280\x02\u0282\x02\u0284\x02\u0286\x02\u0288\x02\u028A\x02\u028C\x02" +
        "\u028E\x02\u0290\x02\u0292\x02\u0294\x02\u0296\x02\u0298\x02\u029A\x02" +
        "\u029C\x02\u029E\x02\u02A0\x02\u02A2\x02\u02A4\x02\u02A6\x02\u02A8\x02" +
        "\u02AA\x02\u02AC\x02\u02AE\x02\u02B0\x02\u02B2\x02\u02B4\x02\u02B6\x02" +
        "\u02B8\x02\u02BA\x02\u02BC\x02\u02BE\x02\u02C0\x02\u02C2\x02\u02C4\x02" +
        "\u02C6\x02\u02C8\x02\u02CA\x02\u02CC\x02\u02CE\x02\u02D0\x02\u02D2\x02" +
        "\u02D4\x02\u02D6\x02\u02D8\x02\u02DA\x02\u02DC\x02\u02DE\x02\u02E0\x02" +
        "\u02E2\x02\u02E4\x02\u02E6\x02\u02E8\x02\u02EA\x02\u02EC\x02\u02EE\x02" +
        "\u02F0\x02\u02F2\x02\u02F4\x02\u02F6\x02\u02F8\x02\u02FA\x02\u02FC\x02" +
        "\u02FE\x02\u0300\x02\u0302\x02\u0304\x02\u0306\x02\u0308\x02\u030A\x02" +
        "\u030C\x02\u030E\x02\u0310\x02\u0312\x02\u0314\x02\u0316\x02\u0318\x02" +
        "\u031A\x02\u031C\x02\u031E\x02\u0320\x02\u0322\x02\u0324\x02\u0326\x02" +
        "\u0328\x02\u032A\x02\u032C\x02\u032E\x02\u0330\x02\u0332\x02\u0334\x02" +
        "\u0336\x02\u0338\x02\u033A\x02\u033C\x02\u033E\x02\u0340\x02\u0342\x02" +
        "\u0344\x02\u0346\x02\u0348\x02\u034A\x02\u034C\x02\u034E\x02\u0350\x02" +
        "\u0352\x02\u0354\x02\u0356\x02\u0358\x02\u035A\x02\u035C\x02\u035E\x02" +
        "\u0360\x02\u0362\x02\u0364\x02\u0366\x02\u0368\x02\u036A\x02\u036C\x02" +
        "\u036E\x02\u0370\x02\u0372\x02\u0374\x02\u0376\x02\u0378\x02\u037A\x02" +
        "\u037C\x02\u037E\x02\u0380\x02\u0382\x02\u0384\x02\u0386\x02\u0388\x02" +
        "\u038A\x02\u038C\x02\u038E\x02\u0390\x02\u0392\x02\u0394\x02\u0396\x02" +
        "\u0398\x02\u039A\x02\u039C\x02\u039E\x02\u03A0\x02\u03A2\x02\u03A4\x02" +
        "\u03A6\x02\u03A8\x02\u03AA\x02\u03AC\x02\u03AE\x02\u03B0\x02\u03B2\x02" +
        "\u03B4\x02\u03B6\x02\u03B8\x02\u03BA\x02\u03BC\x02\u03BE\x02\u03C0\x02" +
        "\u03C2\x02\u03C4\x02\u03C6\x02\u03C8\x02\u03CA\x02\u03CC\x02\u03CE\x02" +
        "\u03D0\x02\u03D2\x02\u03D4\x02\u03D6\x02\u03D8\x02\u03DA\x02\u03DC\x02" +
        "\u03DE\x02\u03E0\x02\u03E2\x02\u03E4\x02\u03E6\x02\u03E8\x02\u03EA\x02" +
        "\u03EC\x02\u03EE\x02\u03F0\x02\u03F2\x02\u03F4\x02\u03F6\x02\u03F8\x02" +
        "\u03FA\x02\u03FC\x02\u03FE\x02\u0400\x02\u0402\x02\u0404\x02\u0406\x02" +
        "\u0408\x02\u040A\x02\u040C\x02\u040E\x02\u0410\x02\u0412\x02\u0414\x02" +
        "\u0416\x02\u0418\x02\u041A\x02\u041C\x02\u041E\x02\u0420\x02\u0422\x02" +
        "\u0424\x02\u0426\x02\u0428\x02\u042A\x02\u042C\x02\u042E\x02\u0430\x02" +
        "\u0432\x02\u0434\x02\u0436\x02\u0438\x02\u043A\x02\u043C\x02\u043E\x02" +
        "\u0440\x02\u0442\x02\u0444\x02\u0446\x02\u0448\x02\u044A\x02\u044C\x02" +
        "\u044E\x02\u0450\x02\u0452\x02\u0454\x02\u0456\x02\u0458\x02\u045A\x02" +
        "\u045C\x02\u045E\x02\u0460\x02\u0462\x02\u0464\x02\u0466\x02\u0468\x02" +
        "\u046A\x02\u046C\x02\u046E\x02\u0470\x02\u0472\x02\u0474\x02\u0476\x02" +
        "\u0478\x02\u047A\x02\u047C\x02\u047E\x02\u0480\x02\u0482\x02\u0484\x02" +
        "\u0486\x02\u0488\x02\u048A\x02\u048C\x02\u048E\x02\u0490\x02\u0492\x02" +
        "\u0494\x02\u0496\x02\u0498\x02\u049A\x02\u049C\x02\u049E\x02\u04A0\x02" +
        "\u04A2\x02\u04A4\x02\u04A6\x02\x02H\x03\x02\xEC\xED\x07\x02PP\x84\x84" +
        "\xF5\xF5\u0114\u0114\u017E\u017E\x05\x02AA\u012C\u012C\u0205\u0205\x04" +
        "\x02\u012C\u012C\u0205\u0205\x03\x02\u01E5\u01E6\x04\x02\x10\x10\u0132" +
        "\u0132\x04\x02RRXX\x04\x02\u010C\u010C\u01EF\u01EF\x04\x02\x17\x17\u0100" +
        "\u0100\x03\x02\x18\x19\x05";
    Cobol85Parser._serializedATNSegment3 = "\x02\xF3\xF3\u0184\u0184\u01AF\u01AF\x06\x02\x98\x98\xC7\xC7\u0173\u0173" +
        "\u01AF\u01AF\x04\x02\u0180\u0180\u01F5\u01F5\x05\x02\u017B\u017B\u01BA" +
        "\u01BA\u01BE\u01BE\x04\x02\xCF\xCF\u01A3\u01A3\x04\x02AA\u017D\u017D\x03" +
        "\x02\u01CE\u01D0\x04\x02\u0119\u0119\u01A2\u01A2\x04\x02((++\x03\x02\xBF" +
        "\xC0\x04\x02\xE7\xE7\u0124\u0124\x05\x02\xE4\xE4\u010E\u010E\u0152\u0152" +
        "\x05\x02\u015E\u015E\u0221\u0221\u0225\u0225\x03\x02KL\x03\x02\xD7\xD8" +
        "\x03\x02%&\x03\x02\u015C\u015D\x03\x02\x90\x91\x03\x02\u0101\u0102\x03" +
        "\x02#$\x04\x02\u0139\u0139\u01A6\u01A6\x04\x02\x9E\x9E\u0190\u0190\x04" +
        "\x02\xDA\xDA\u0110\u0110\x03\x02\u0119\u011A\x04\x02ww\x8B\x8B\x05\x02" +
        "\x94\x94\u0165\u0165\u01B2\u01B3\x03\x0245\x04\x02\u022B\u022B\u022D\u022D" +
        "\x04\x02\u020B\u020B\u020D\u020E\x05\x02PP\u011E\u011E\u0153\u0153\x04" +
        "\x02\xFC\xFC\u01CD\u01CD\x04\x02\x1B\x1B\x89\x89\x04\x02aa\u0181\u0182" +
        "\x03\x02\u01D6\u01D7\x04\x02\u010D\u010D\u019D\u019D\x06\x02\u0121\u0122" +
        "\u013F\u013F\u0141\u0141\u01B7\u01B7\x04\x02\xCC\xCC\u01F1\u01F1\x04\x02" +
        "ff\u0108\u0108\x04\x02==\u01FC\u01FC\x04\x02\xE0\xE0\u0197\u0197\x03\x02" +
        "ij\x04\x02\x03\x03\u014D\u014D\x04\x02\xBC\xBC\u021A\u021A\t\x02\r\r\x10" +
        "\x11vv\x9A\x9A\u0132\u0133\u013E\u013E\u0140\u0140\x04\x02\v\v\u010C\u010C" +
        "\x05\x02\v\v\xD4\xD4\u010C\u010C\x04\x02\t\t))\x04\x02\u0104\u0104\u0138" +
        "\u0138\x04\x02\u0129\u0129\u01A8\u01A8\x04\x0222\u01EE\u01EE\x04\x02\xBE" +
        "\xBE\xC6\xC6\x04\x02\xAA\xAA\xBB\xBB\x04\x02\u0221\u0221\u0225\u0225\x04" +
        "\x02\u0210\u0210\u0228\u0228\x04\x02\x15\x15\u014B\u014B\x05\x02\u0135" +
        "\u0135\u0161\u0161\u020B\u020B\x04\x02\xF1\xF1\u0145\u0145W\x02\x03\x03" +
        "\x1A\x1A\x1C\x1C\x1E\x1F!!#&((+-//1189>?FGOOddffllnn\x82\x84\x8C\x8D\x8F" +
        "\x8F\x94\x95\x99\x99\x9E\x9E\xB7\xB7\xB9\xB9\xBD\xBD\xBF\xC1\xC4\xC4\xC7" +
        "\xC7\xCA\xCA\xCC\xCC\xD7\xD8\xDA\xDA\xDC\xDD\xE4\xE4\xE7\xE7\xEF\xF0\xFC" +
        "\xFC\u0104\u0104\u0106\u0106\u0108\u0108\u010A\u010B\u010E\u010E\u0110" +
        "\u0110\u0112\u0114\u011D\u011E\u0121\u0124\u012A\u012A\u0131\u0133\u0136" +
        "\u0136\u0139\u0139\u013F\u013F\u0141\u0141\u0144\u0144\u014D\u014D\u0152" +
        "\u0153\u0158\u0158\u0162\u0163\u0165\u0165\u016A\u016B\u016E\u016E\u0174" +
        "\u0175\u0177\u0177\u017A\u017A\u017E\u017E\u0181\u0181\u0189\u0189\u0190" +
        "\u0190\u0193\u0193\u01A1\u01A1\u01A6\u01A6\u01B1\u01B4\u01B7\u01B7\u01D4" +
        "\u01D4\u01DB\u01DB\u01E3\u01E4\u01E8\u01E8\u01EC\u01ED\u01F1\u01F1\u01F3" +
        "\u01F4\u0200\u0201\u0208\u020A\u020C\u020C\u022F\u022F\x04\x02\xCE\xCE" +
        "\u01F0\u01F0\x03\x02\u022A\u022D\x02\u1B95\x02\u04A8\x03\x02\x02\x02\x04" +
        "\u04AC\x03\x02\x02\x02\x06\u04B0\x03\x02\x02\x02\b\u04C3\x03\x02\x02\x02" +
        "\n\u04C8\x03\x02\x02\x02\f\u04D8\x03\x02\x02\x02\x0E\u04DA\x03\x02\x02" +
        "\x02\x10\u04EC\x03\x02\x02\x02\x12\u04F1\x03\x02\x02\x02\x14\u04F6\x03" +
        "\x02\x02\x02\x16\u04FB\x03\x02\x02\x02\x18\u0500\x03\x02\x02\x02\x1A\u0505" +
        "\x03\x02\x02\x02\x1C\u050A\x03\x02\x02\x02\x1E\u0516\x03\x02\x02\x02 " +
        "\u0518\x03\x02\x02\x02\"\u0524\x03\x02\x02\x02$\u0526\x03\x02\x02\x02" +
        "&\u0532\x03\x02\x02\x02(\u0542\x03\x02\x02\x02*\u0544\x03\x02\x02\x02" +
        ",\u054F\x03\x02\x02\x02.\u055E\x03\x02\x02\x020\u0573\x03\x02\x02\x02" +
        "2\u057C\x03\x02\x02\x024\u0584\x03\x02\x02\x026\u058A\x03\x02\x02\x02" +
        "8\u058E\x03\x02\x02\x02:\u05A4\x03\x02\x02\x02<\u05A8\x03\x02\x02\x02" +
        ">\u05AA\x03\x02\x02\x02@\u05C0\x03\x02\x02\x02B\u05C9\x03\x02\x02\x02" +
        "D\u05CC\x03\x02\x02\x02F\u05D2\x03\x02\x02\x02H\u05E0\x03\x02\x02\x02" +
        "J\u05E7\x03\x02\x02\x02L\u05F7\x03\x02\x02\x02N\u05FE\x03\x02\x02\x02" +
        "P\u0602\x03\x02\x02\x02R\u0604\x03\x02\x02\x02T\u0614\x03\x02\x02\x02" +
        "V\u061A\x03\x02\x02\x02X\u062B\x03\x02\x02\x02Z\u0642\x03\x02\x02\x02" +
        "\\\u0668\x03\x02\x02\x02^\u066A\x03\x02\x02\x02`\u0670\x03\x02\x02\x02" +
        "b\u067E\x03\x02\x02\x02d\u0692\x03\x02\x02\x02f\u069E\x03\x02\x02\x02" +
        "h\u06A9\x03\x02\x02\x02j\u06AB\x03\x02\x02\x02l\u06B7\x03\x02\x02\x02" +
        "n\u06BE\x03\x02\x02\x02p\u06CF\x03\x02\x02\x02r\u06D1\x03\x02\x02\x02" +
        "t\u06E2\x03\x02\x02\x02v\u06F1\x03\x02\x02\x02x\u06FC\x03\x02\x02\x02" +
        "z\u0707\x03\x02\x02\x02|\u0711\x03\x02\x02\x02~\u071A\x03\x02\x02\x02" +
        "\x80\u072B\x03\x02\x02\x02\x82\u073D\x03\x02\x02\x02\x84\u0744\x03\x02" +
        "\x02\x02\x86\u074E\x03\x02\x02\x02\x88\u0757\x03\x02\x02\x02\x8A\u076B" +
        "\x03\x02\x02\x02\x8C\u076D\x03\x02\x02\x02\x8E\u077B\x03\x02\x02\x02\x90" +
        "\u077F\x03\x02\x02\x02\x92\u0788\x03\x02\x02\x02\x94\u078C\x03\x02\x02" +
        "\x02\x96\u079B\x03\x02\x02\x02\x98\u07A8\x03\x02\x02\x02\x9A\u07AD\x03" +
        "\x02\x02\x02\x9C\u07B4\x03\x02\x02\x02\x9E\u07C6\x03\x02\x02\x02\xA0\u07C8" +
        "\x03\x02\x02\x02\xA2\u07D1\x03\x02\x02\x02\xA4\u07EE\x03\x02\x02\x02\xA6" +
        "\u07F1\x03\x02\x02\x02\xA8\u07F6\x03\x02\x02\x02\xAA\u07FA\x03\x02\x02" +
        "\x02\xAC\u0805\x03\x02\x02\x02\xAE\u0808\x03\x02\x02\x02\xB0\u080F\x03" +
        "\x02\x02\x02\xB2\u0816\x03\x02\x02\x02\xB4\u0833\x03\x02\x02\x02\xB6\u083A" +
        "\x03\x02\x02\x02\xB8\u083D\x03\x02\x02\x02\xBA\u0851\x03\x02\x02\x02\xBC" +
        "\u0858\x03\x02\x02\x02\xBE\u0860\x03\x02\x02\x02\xC0\u0870\x03\x02\x02" +
        "\x02\xC2\u0884\x03\x02\x02\x02\xC4\u0887\x03\x02\x02\x02\xC6\u0892\x03" +
        "\x02\x02\x02\xC8\u089D\x03\x02\x02\x02\xCA\u08A7\x03\x02\x02\x02\xCC\u08B0" +
        "\x03\x02\x02\x02\xCE\u08B2\x03\x02\x02\x02\xD0\u08C0\x03\x02\x02\x02\xD2" +
        "\u08C7\x03\x02\x02\x02\xD4\u08D0\x03\x02\x02\x02\xD6\u08D5\x03\x02\x02" +
        "\x02\xD8\u08DE\x03\x02\x02\x02\xDA\u08E7\x03\x02\x02\x02\xDC\u08F4\x03" +
        "\x02\x02\x02\xDE\u08F6\x03\x02\x02\x02\xE0\u0912\x03\x02\x02\x02\xE2\u0925" +
        "\x03\x02\x02\x02\xE4\u093C\x03\x02\x02\x02\xE6\u0943\x03\x02\x02\x02\xE8" +
        "\u0951\x03\x02\x02\x02\xEA\u0958\x03\x02\x02\x02\xEC\u0960\x03\x02\x02" +
        "\x02\xEE\u0968\x03\x02\x02\x02\xF0\u096F\x03\x02\x02\x02\xF2\u0976\x03" +
        "\x02\x02\x02\xF4\u097E\x03\x02\x02\x02\xF6\u0987\x03\x02\x02\x02\xF8\u0990" +
        "\x03\x02\x02\x02\xFA\u0999\x03\x02\x02\x02\xFC\u09A2\x03\x02\x02\x02\xFE" +
        "\u09AA\x03\x02\x02\x02\u0100\u09B1\x03\x02\x02\x02\u0102\u09C0\x03\x02" +
        "\x02\x02\u0104\u09C9\x03\x02\x02\x02\u0106\u09F3\x03\x02\x02\x02\u0108" +
        "\u09F6\x03\x02\x02\x02\u010A\u09F8\x03\x02\x02\x02\u010C\u09FA\x03\x02" +
        "\x02\x02\u010E\u09FD\x03\x02\x02\x02\u0110\u09FF\x03\x02\x02\x02\u0112" +
        "\u0A01\x03\x02\x02\x02\u0114\u0A03\x03\x02\x02\x02\u0116\u0A05\x03\x02" +
        "\x02\x02\u0118\u0A0D\x03\x02\x02\x02\u011A\u0A1B\x03\x02\x02\x02\u011C" +
        "\u0A29\x03\x02\x02\x02\u011E\u0A31\x03\x02\x02\x02\u0120\u0A39\x03\x02" +
        "\x02\x02\u0122\u0A3F\x03\x02\x02\x02\u0124\u0A45\x03\x02\x02\x02\u0126" +
        "\u0A4B\x03\x02\x02\x02\u0128\u0A53\x03\x02\x02\x02\u012A\u0A56\x03\x02" +
        "\x02\x02\u012C\u0A59\x03\x02\x02\x02\u012E\u0A5F\x03\x02\x02\x02\u0130" +
        "\u0A65\x03\x02\x02\x02\u0132\u0A6D\x03\x02\x02\x02\u0134\u0A76\x03\x02" +
        "\x02\x02\u0136\u0A78\x03\x02\x02\x02\u0138\u0A7A\x03\x02\x02\x02\u013A" +
        "\u0A7C\x03\x02\x02\x02\u013C\u0A8A\x03\x02\x02\x02\u013E\u0A8F\x03\x02" +
        "\x02\x02\u0140\u0A91\x03\x02\x02\x02\u0142\u0A93\x03\x02\x02\x02\u0144" +
        "\u0A9C\x03\x02\x02\x02\u0146\u0AA2\x03\x02\x02\x02\u0148\u0AB9\x03\x02" +
        "\x02\x02\u014A\u0ABD\x03\x02\x02\x02\u014C\u0ACC\x03\x02\x02\x02\u014E" +
        "\u0ACF\x03\x02\x02\x02\u0150\u0AD3\x03\x02\x02\x02\u0152\u0AD7\x03\x02" +
        "\x02\x02\u0154\u0ADD\x03\x02\x02\x02\u0156\u0ADF\x03\x02\x02\x02\u0158" +
        "\u0AED\x03\x02\x02\x02\u015A\u0AF7\x03\x02\x02\x02\u015C\u0B10\x03\x02" +
        "\x02\x02\u015E\u0B16\x03\x02\x02\x02\u0160\u0B1F\x03\x02\x02\x02\u0162" +
        "\u0B23\x03\x02\x02\x02\u0164\u0B28\x03\x02\x02\x02\u0166\u0B34\x03\x02" +
        "\x02\x02\u0168\u0B3C\x03\x02\x02\x02\u016A\u0B3F\x03\x02\x02\x02\u016C" +
        "\u0B49\x03\x02\x02\x02\u016E\u0B4C\x03\x02\x02\x02\u0170\u0B4F\x03\x02" +
        "\x02\x02\u0172\u0B55\x03\x02\x02\x02\u0174\u0B5D\x03\x02\x02\x02\u0176" +
        "\u0B66\x03\x02\x02\x02\u0178\u0B6C\x03\x02\x02\x02\u017A\u0B84\x03\x02" +
        "\x02\x02\u017C\u0B94\x03\x02\x02\x02\u017E\u0B99\x03\x02\x02\x02\u0180" +
        "\u0B9E\x03\x02\x02\x02\u0182\u0BA4\x03\x02\x02\x02\u0184\u0BA9\x03\x02" +
        "\x02\x02\u0186\u0BB3\x03\x02\x02\x02\u0188\u0BBA\x03\x02\x02\x02\u018A" +
        "\u0BBF\x03\x02\x02\x02\u018C\u0BC1\x03\x02\x02\x02\u018E\u0BC7\x03\x02" +
        "\x02\x02\u0190\u0BD2\x03\x02\x02\x02\u0192\u0BD4\x03\x02\x02\x02\u0194" +
        "\u0BDD\x03\x02\x02\x02\u0196\u0BED\x03\x02\x02\x02\u0198\u0BF5\x03\x02" +
        "\x02\x02\u019A\u0C06\x03\x02\x02\x02\u019C\u0C0A\x03\x02\x02\x02\u019E" +
        "\u0C10\x03\x02\x02\x02\u01A0\u0C16\x03\x02\x02\x02\u01A2\u0C1B\x03\x02" +
        "\x02\x02\u01A4\u0C29\x03\x02\x02\x02\u01A6\u0C2C\x03\x02\x02\x02\u01A8" +
        "\u0C2F\x03\x02\x02\x02\u01AA\u0C37\x03\x02\x02\x02\u01AC\u0C39\x03\x02" +
        "\x02\x02\u01AE\u0C41\x03\x02\x02\x02\u01B0\u0C44\x03\x02\x02\x02\u01B2" +
        "\u0C49\x03\x02\x02\x02\u01B4\u0C51\x03\x02\x02\x02\u01B6\u0C53\x03\x02" +
        "\x02\x02\u01B8\u0C74\x03\x02\x02\x02\u01BA\u0C79\x03\x02\x02\x02\u01BC" +
        "\u0C7F\x03\x02\x02\x02\u01BE\u0C86\x03\x02\x02\x02\u01C0\u0C88\x03\x02" +
        "\x02\x02\u01C2\u0C8E\x03\x02\x02\x02\u01C4\u0C91\x03\x02\x02\x02\u01C6" +
        "\u0C99\x03\x02\x02\x02\u01C8\u0C9D\x03\x02\x02\x02\u01CA\u0C9F\x03\x02" +
        "\x02\x02\u01CC\u0CA3\x03\x02\x02\x02\u01CE\u0CC6\x03\x02\x02\x02\u01D0" +
        "\u0CC9\x03\x02\x02\x02\u01D2\u0CD5\x03\x02\x02\x02\u01D4\u0CE3\x03\x02" +
        "\x02\x02\u01D6\u0CF7\x03\x02\x02\x02\u01D8\u0CF9\x03\x02\x02\x02\u01DA" +
        "\u0CFE\x03\x02\x02\x02\u01DC\u0D05\x03\x02\x02\x02\u01DE\u0D08\x03\x02" +
        "\x02\x02\u01E0\u0D0B\x03\x02\x02\x02\u01E2\u0D15\x03\x02\x02\x02\u01E4" +
        "\u0D1E\x03\x02\x02\x02\u01E6\u0D23\x03\x02\x02\x02\u01E8\u0D27\x03\x02" +
        "\x02\x02\u01EA\u0D2E\x03\x02\x02\x02\u01EC\u0D36\x03\x02\x02\x02\u01EE" +
        "\u0D5B\x03\x02\x02\x02\u01F0\u0D6C\x03\x02\x02\x02\u01F2\u0D78\x03\x02" +
        "\x02\x02\u01F4\u0D7E\x03\x02\x02\x02\u01F6\u0D80\x03\x02\x02\x02\u01F8" +
        "\u0D84\x03\x02\x02\x02\u01FA\u0D89\x03\x02\x02\x02\u01FC\u0D97\x03\x02" +
        "\x02\x02\u01FE\u0D9D\x03\x02\x02\x02\u0200\u0DA2\x03\x02\x02\x02\u0202" +
        "\u0DA8\x03\x02\x02\x02\u0204\u0DB7\x03\x02\x02\x02\u0206\u0DBA\x03\x02" +
        "\x02\x02\u0208\u0DC5\x03\x02\x02\x02\u020A\u0DC7\x03\x02\x02\x02\u020C" +
        "\u0DD2\x03\x02\x02\x02\u020E\u0DD8\x03\x02\x02\x02\u0210\u0DDD\x03\x02" +
        "\x02\x02\u0212\u0DE4\x03\x02\x02\x02\u0214\u0DEB\x03\x02\x02\x02\u0216" +
        "\u0DF4\x03\x02\x02\x02\u0218\u0E02\x03\x02\x02\x02\u021A\u0E38\x03\x02" +
        "\x02\x02\u021C\u0E3A\x03\x02\x02\x02\u021E\u0E4B\x03\x02\x02\x02\u0220" +
        "\u0E61\x03\x02\x02\x02\u0222\u0E64\x03\x02\x02\x02\u0224\u0E69\x03\x02" +
        "\x02\x02\u0226\u0E6D\x03\x02\x02\x02\u0228\u0E7D\x03\x02\x02\x02\u022A" +
        "\u0E88\x03\x02\x02\x02\u022C\u0E9A\x03\x02\x02\x02\u022E\u0EA1\x03\x02" +
        "\x02\x02\u0230\u0EA3\x03\x02\x02\x02\u0232\u0EA9\x03\x02\x02\x02\u0234" +
        "\u0EAB\x03\x02\x02\x02\u0236\u0EAF\x03\x02\x02\x02\u0238\u0EB5\x03\x02" +
        "\x02\x02\u023A\u0EBB\x03\x02\x02\x02\u023C\u0EC3\x03\x02\x02\x02\u023E" +
        "\u0EDA\x03\x02\x02\x02\u0240\u0EE3\x03\x02\x02\x02\u0242\u0EE9\x03\x02" +
        "\x02\x02\u0244\u0EFC\x03\x02\x02\x02\u0246\u0EFF\x03\x02\x02\x02\u0248" +
        "\u0F0D\x03\x02\x02\x02\u024A\u0F14\x03\x02\x02\x02\u024C\u0F27\x03\x02" +
        "\x02\x02\u024E\u0F29\x03\x02\x02\x02\u0250\u0F2C\x03\x02\x02\x02\u0252" +
        "\u0F37\x03\x02\x02\x02\u0254\u0F39\x03\x02\x02\x02\u0256\u0F3F\x03\x02" +
        "\x02\x02\u0258\u0F45\x03\x02\x02\x02\u025A\u0F57\x03\x02\x02\x02\u025C" +
        "\u0F65\x03\x02\x02\x02\u025E\u0F72\x03\x02\x02\x02\u0260\u0F74\x03\x02" +
        "\x02\x02\u0262\u0F7A\x03\x02\x02\x02\u0264\u0F7F\x03\x02\x02\x02\u0266" +
        "\u0F87\x03\x02\x02\x02\u0268\u0F98\x03\x02\x02\x02\u026A\u0F9C\x03\x02" +
        "\x02\x02\u026C\u0F9E\x03\x02\x02\x02\u026E\u0FAC\x03\x02\x02\x02\u0270" +
        "\u0FBF\x03\x02\x02\x02\u0272\u0FD0\x03\x02\x02\x02\u0274\u0FD2\x03\x02" +
        "\x02\x02\u0276\u0FD7\x03\x02\x02\x02\u0278\u0FDD\x03\x02\x02\x02\u027A" +
        "\u0FE2\x03\x02\x02\x02\u027C\u0FF8\x03\x02\x02\x02\u027E\u0FFE\x03\x02" +
        "\x02\x02\u0280\u1006\x03\x02\x02\x02\u0282\u100E\x03\x02\x02\x02\u0284" +
        "\u1014\x03\x02\x02\x02\u0286\u1018\x03\x02\x02\x02\u0288\u101C\x03\x02" +
        "\x02\x02\u028A\u101F\x03\x02\x02\x02\u028C\u1032\x03\x02\x02\x02\u028E" +
        "\u103C\x03\x02\x02\x02\u0290\u1053\x03\x02\x02\x02\u0292\u1055\x03\x02" +
        "\x02\x02\u0294\u1059\x03\x02\x02\x02\u0296\u1063\x03\x02\x02\x02\u0298" +
        "\u1075\x03\x02\x02\x02\u029A\u1077\x03\x02\x02\x02\u029C\u107A\x03\x02" +
        "\x02\x02\u029E\u107D\x03\x02\x02\x02\u02A0\u1088\x03\x02\x02\x02\u02A2" +
        "\u108B\x03\x02\x02\x02\u02A4\u1090\x03\x02\x02\x02\u02A6\u1095\x03\x02" +
        "\x02\x02\u02A8\u1099\x03\x02\x02\x02\u02AA\u10A7\x03\x02\x02\x02\u02AC" +
        "\u10A9\x03\x02\x02\x02\u02AE\u10AD\x03\x02\x02\x02\u02B0\u10B0\x03\x02" +
        "\x02\x02\u02B2\u10B2\x03\x02\x02\x02\u02B4\u10BA\x03\x02\x02\x02\u02B6" +
        "\u10C9\x03\x02\x02\x02\u02B8\u10CB\x03\x02\x02\x02\u02BA\u10D5\x03\x02" +
        "\x02\x02\u02BC\u10E1\x03\x02\x02\x02\u02BE\u10EC\x03\x02\x02\x02\u02C0" +
        "\u10F5\x03\x02\x02\x02\u02C2\u10FB\x03\x02\x02\x02\u02C4\u1104\x03\x02" +
        "\x02\x02\u02C6\u110A\x03\x02\x02\x02\u02C8\u1112\x03\x02\x02\x02\u02CA" +
        "\u1118\x03\x02\x02\x02\u02CC\u111F\x03\x02\x02\x02\u02CE\u112A\x03\x02" +
        "\x02\x02\u02D0\u1136\x03\x02\x02\x02\u02D2\u113E\x03\x02\x02\x02\u02D4" +
        "\u1145\x03\x02\x02\x02\u02D6\u114D\x03\x02\x02\x02\u02D8\u1153\x03\x02" +
        "\x02\x02\u02DA\u115B\x03\x02\x02\x02\u02DC\u1165\x03\x02\x02\x02\u02DE" +
        "\u116E\x03\x02\x02\x02\u02E0\u1173\x03\x02\x02\x02\u02E2\u1178\x03\x02" +
        "\x02\x02\u02E4\u1180\x03\x02\x02\x02\u02E6\u119A\x03\x02\x02\x02\u02E8" +
        "\u11A6\x03\x02\x02\x02\u02EA\u11B8\x03\x02\x02\x02\u02EC\u11BF\x03\x02" +
        "\x02\x02\u02EE\u11C7\x03\x02\x02\x02\u02F0\u11CD\x03\x02\x02\x02\u02F2" +
        "\u11D6\x03\x02\x02\x02\u02F4\u11D9\x03\x02\x02\x02\u02F6\u11DF\x03\x02" +
        "\x02\x02\u02F8\u11EB\x03\x02\x02\x02\u02FA\u11F3\x03\x02\x02\x02\u02FC" +
        "\u11FC\x03\x02\x02\x02\u02FE\u11FE\x03\x02\x02\x02\u0300\u1206\x03\x02" +
        "\x02\x02\u0302\u1208\x03\x02\x02\x02\u0304\u121C\x03\x02\x02\x02\u0306" +
        "\u1220\x03\x02\x02\x02\u0308\u1224\x03\x02\x02\x02\u030A\u122D\x03\x02" +
        "\x02\x02\u030C\u122F\x03\x02\x02\x02\u030E\u1233\x03\x02\x02\x02\u0310" +
        "\u123C\x03\x02\x02\x02\u0312\u1242\x03\x02\x02\x02\u0314\u124B\x03\x02" +
        "\x02\x02\u0316\u1251\x03\x02\x02\x02\u0318\u1259\x03\x02\x02\x02\u031A" +
        "\u125F\x03\x02\x02\x02\u031C\u1265\x03\x02\x02\x02\u031E\u126B\x03\x02" +
        "\x02\x02\u0320\u1275\x03\x02\x02\x02\u0322\u1280\x03\x02\x02\x02\u0324" +
        "\u1284\x03\x02\x02\x02\u0326\u1289\x03\x02\x02\x02\u0328\u1295\x03\x02" +
        "\x02\x02\u032A\u1297\x03\x02\x02\x02\u032C\u12A1\x03\x02\x02\x02\u032E" +
        "\u12A7\x03\x02\x02\x02\u0330\u12AA\x03\x02\x02\x02\u0332\u12B0\x03\x02" +
        "\x02\x02\u0334\u12B7\x03\x02\x02\x02\u0336\u12BC\x03\x02\x02\x02\u0338" +
        "\u12C2\x03\x02\x02\x02\u033A\u12E2\x03\x02\x02\x02\u033C\u12E6\x03\x02" +
        "\x02\x02\u033E\u12ED\x03\x02\x02\x02\u0340\u12F3\x03\x02\x02\x02\u0342" +
        "\u1301\x03\x02\x02\x02\u0344\u1314\x03\x02\x02\x02\u0346\u1316\x03\x02" +
        "\x02\x02\u0348\u1322\x03\x02\x02\x02\u034A\u132A\x03\x02\x02\x02\u034C" +
        "\u1332\x03\x02\x02\x02\u034E\u133B\x03\x02\x02\x02\u0350\u1340\x03\x02" +
        "\x02\x02\u0352\u1346\x03\x02\x02\x02\u0354\u134E\x03\x02\x02\x02\u0356" +
        "\u1354\x03\x02\x02\x02\u0358\u135A\x03\x02\x02\x02\u035A\u1369\x03\x02" +
        "\x02\x02\u035C\u136C\x03\x02\x02\x02\u035E\u137A\x03\x02\x02\x02\u0360" +
        "\u137D\x03\x02\x02\x02\u0362\u1390\x03\x02\x02\x02\u0364\u1393\x03\x02" +
        "\x02\x02\u0366\u139F\x03\x02\x02\x02\u0368\u13AC\x03\x02\x02\x02\u036A" +
        "\u13BA\x03\x02\x02\x02\u036C\u13BE\x03\x02\x02\x02\u036E\u13C1\x03\x02" +
        "\x02\x02\u0370\u13C8\x03\x02\x02\x02\u0372\u13CC\x03\x02\x02\x02\u0374" +
        "\u13D5\x03\x02\x02\x02\u0376\u13D9\x03\x02\x02\x02\u0378\u13DE\x03\x02" +
        "\x02\x02\u037A\u13E0\x03\x02\x02\x02\u037C\u13EA\x03\x02\x02\x02\u037E" +
        "\u13F5\x03\x02\x02\x02\u0380\u1401\x03\x02\x02\x02\u0382\u140C\x03\x02" +
        "\x02\x02\u0384\u1410\x03\x02\x02\x02\u0386\u1412\x03\x02\x02\x02\u0388" +
        "\u1432\x03\x02\x02\x02\u038A\u143E\x03\x02\x02\x02\u038C\u1448\x03\x02" +
        "\x02\x02\u038E\u145A\x03\x02\x02\x02\u0390\u1461\x03\x02\x02\x02\u0392" +
        "\u1469\x03\x02\x02\x02\u0394\u1472\x03\x02\x02\x02\u0396\u1475\x03\x02" +
        "\x02\x02\u0398\u147B\x03\x02\x02\x02\u039A\u1484\x03\x02\x02\x02\u039C" +
        "\u1487\x03\x02\x02\x02\u039E\u148D\x03\x02\x02\x02\u03A0\u1499\x03\x02" +
        "\x02\x02\u03A2\u14A7\x03\x02\x02\x02\u03A4\u14CA\x03\x02\x02\x02\u03A6" +
        "\u14CF\x03\x02\x02\x02\u03A8\u14E3\x03\x02\x02\x02\u03AA\u14ED\x03\x02" +
        "\x02\x02\u03AC\u14EF\x03\x02\x02\x02\u03AE\u14F8\x03\x02\x02\x02\u03B0" +
        "\u14FD\x03\x02\x02\x02\u03B2\u1501\x03\x02\x02\x02\u03B4\u1506\x03\x02" +
        "\x02\x02\u03B6\u1516\x03\x02\x02\x02\u03B8\u1521\x03\x02\x02\x02\u03BA" +
        "\u152D\x03\x02\x02\x02\u03BC\u1534\x03\x02\x02\x02\u03BE\u1536\x03\x02" +
        "\x02\x02\u03C0\u153C\x03\x02\x02\x02\u03C2\u153E\x03\x02\x02\x02\u03C4" +
        "\u1542\x03\x02\x02\x02\u03C6\u1546\x03\x02\x02\x02\u03C8\u1549\x03\x02" +
        "\x02\x02\u03CA\u155B\x03\x02\x02\x02\u03CC\u1565\x03\x02\x02\x02\u03CE" +
        "\u1570\x03\x02\x02\x02\u03D0\u1578\x03\x02\x02\x02\u03D2\u157E\x03\x02" +
        "\x02\x02\u03D4\u1585\x03\x02\x02\x02\u03D6\u158B\x03\x02\x02\x02\u03D8" +
        "\u1592\x03\x02\x02\x02\u03DA\u1597\x03\x02\x02\x02\u03DC\u159D\x03\x02" +
        "\x02\x02\u03DE\u15A3\x03\x02\x02\x02\u03E0\u15B9\x03\x02\x02\x02\u03E2" +
        "\u15BC\x03\x02\x02\x02\u03E4\u15D3\x03\x02\x02\x02\u03E6\u15D5\x03\x02" +
        "\x02\x02\u03E8\u15EC\x03\x02\x02\x02\u03EA\u15F1\x03\x02\x02\x02\u03EC" +
        "\u15FA\x03\x02\x02\x02\u03EE\u15FE\x03\x02\x02\x02\u03F0\u1603\x03\x02" +
        "\x02\x02\u03F2\u1606\x03\x02\x02\x02\u03F4\u160F\x03\x02\x02\x02\u03F6" +
        "\u161B\x03\x02\x02\x02\u03F8\u1624\x03\x02\x02\x02\u03FA\u162F\x03\x02" +
        "\x02\x02\u03FC\u1639\x03\x02\x02\x02\u03FE\u1645\x03\x02\x02\x02\u0400" +
        "\u164E\x03\x02\x02\x02\u0402\u165A\x03\x02\x02\x02\u0404\u1664\x03\x02" +
        "\x02\x02\u0406\u1671\x03\x02\x02\x02\u0408\u167A\x03\x02\x02\x02\u040A" +
        "\u1685\x03\x02\x02\x02\u040C\u168C\x03\x02\x02\x02\u040E\u168F\x03\x02" +
        "\x02\x02\u0410\u1696\x03\x02\x02\x02\u0412\u169A\x03\x02\x02\x02\u0414" +
        "\u16A3\x03\x02\x02\x02\u0416\u16AC\x03\x02\x02\x02\u0418\u16AE\x03\x02" +
        "\x02\x02\u041A\u16B5\x03\x02\x02\x02\u041C\u16BF\x03\x02\x02\x02\u041E" +
        "\u16CA\x03\x02\x02\x02\u0420\u16CC\x03\x02\x02\x02\u0422\u16DC\x03\x02" +
        "\x02\x02\u0424\u16F4\x03\x02\x02\x02\u0426\u1704\x03\x02\x02\x02\u0428" +
        "\u1706\x03\x02\x02\x02\u042A\u170F\x03\x02\x02\x02\u042C\u1713\x03\x02" +
        "\x02\x02\u042E\u1719\x03\x02\x02\x02\u0430\u1721\x03\x02\x02\x02\u0432" +
        "\u174F\x03\x02\x02\x02\u0434\u1760\x03\x02\x02\x02\u0436\u1762\x03\x02" +
        "\x02\x02\u0438\u1778\x03\x02\x02\x02\u043A\u178F\x03\x02\x02\x02\u043C" +
        "\u1797\x03\x02\x02\x02\u043E\u1799\x03\x02\x02\x02\u0440\u17A6\x03\x02" +
        "\x02\x02\u0442\u17B3\x03\x02\x02\x02\u0444\u17B9\x03\x02\x02\x02\u0446" +
        "\u17BD\x03\x02\x02\x02\u0448\u17CA\x03\x02\x02\x02\u044A\u17CD\x03\x02" +
        "\x02\x02\u044C\u17D0\x03\x02\x02\x02\u044E\u17D5\x03\x02\x02\x02\u0450" +
        "\u17D7\x03\x02\x02\x02\u0452\u17DA\x03\x02\x02\x02\u0454\u17DD\x03\x02" +
        "\x02\x02\u0456\u17E0\x03\x02\x02\x02\u0458\u17E3\x03\x02\x02\x02\u045A" +
        "\u17E6\x03\x02\x02\x02\u045C\u17E9\x03\x02\x02\x02\u045E\u17EB\x03\x02" +
        "\x02\x02\u0460\u17ED\x03\x02\x02\x02\u0462\u17EF\x03\x02\x02\x02\u0464" +
        "\u17F1\x03\x02\x02\x02\u0466\u17F3\x03\x02\x02\x02\u0468\u17F5\x03\x02" +
        "\x02\x02\u046A\u17F7\x03\x02\x02\x02\u046C\u17FC\x03\x02\x02\x02\u046E" +
        "\u17FE\x03\x02\x02\x02\u0470\u1800\x03\x02\x02\x02\u0472\u1808\x03\x02" +
        "\x02\x02\u0474\u180A\x03\x02\x02\x02\u0476\u180C\x03\x02\x02\x02\u0478" +
        "\u180E\x03\x02\x02\x02\u047A\u1810\x03\x02\x02\x02\u047C\u1812\x03\x02" +
        "\x02\x02\u047E\u1816\x03\x02\x02\x02\u0480\u181D\x03\x02\x02\x02\u0482" +
        "\u1821\x03\x02\x02\x02\u0484\u1823\x03\x02\x02\x02\u0486\u1825\x03\x02" +
        "\x02\x02\u0488\u1827\x03\x02\x02\x02\u048A\u1829\x03\x02\x02\x02\u048C" +
        "\u182D\x03\x02\x02\x02\u048E\u182F\x03\x02\x02\x02\u0490\u1831\x03\x02" +
        "\x02\x02\u0492\u1833\x03\x02\x02\x02\u0494\u1835\x03\x02\x02\x02\u0496" +
        "\u183D\x03\x02\x02\x02\u0498\u183F\x03\x02\x02\x02\u049A\u1844\x03\x02" +
        "\x02\x02\u049C\u1846\x03\x02\x02\x02\u049E\u1848\x03\x02\x02\x02\u04A0" +
        "\u1850\x03\x02\x02\x02\u04A2\u1867\x03\x02\x02\x02\u04A4\u188A\x03\x02" +
        "\x02\x02\u04A6\u188D\x03\x02\x02\x02\u04A8\u04A9\x05\x04\x03\x02\u04A9" +
        "\u04AA\x07\x02\x02\x03\u04AA\x03\x03\x02\x02\x02\u04AB\u04AD\x05\x06\x04" +
        "\x02\u04AC\u04AB\x03\x02\x02\x02\u04AD\u04AE\x03\x02\x02\x02\u04AE\u04AC" +
        "\x03\x02\x02\x02\u04AE\u04AF\x03\x02\x02\x02\u04AF\x05\x03\x02\x02\x02" +
        "\u04B0\u04B2\x05\n\x06\x02\u04B1\u04B3\x05\x1C\x0F\x02\u04B2\u04B1\x03" +
        "\x02\x02\x02\u04B2\u04B3\x03\x02\x02\x02\u04B3\u04B5\x03\x02\x02\x02\u04B4" +
        "\u04B6\x05\x9CO\x02\u04B5\u04B4\x03\x02\x02\x02\u04B5\u04B6\x03\x02\x02" +
        "\x02\u04B6\u04B8\x03\x02\x02\x02\u04B7\u04B9\x05\u01FA\xFE\x02\u04B8\u04B7" +
        "\x03\x02\x02\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04BD\x03\x02\x02\x02" +
        "\u04BA\u04BC\x05\x06\x04\x02\u04BB\u04BA\x03\x02\x02\x02\u04BC\u04BF\x03" +
        "\x02\x02\x02\u04BD\u04BB\x03\x02\x02\x02\u04BD\u04BE\x03\x02\x02\x02\u04BE" +
        "\u04C1\x03\x02\x02\x02\u04BF\u04BD\x03\x02\x02\x02\u04C0\u04C2\x05\b\x05" +
        "\x02\u04C1\u04C0\x03\x02\x02\x02\u04C1\u04C2\x03\x02\x02\x02\u04C2\x07" +
        "\x03\x02\x02\x02\u04C3\u04C4\x07\xA0\x02\x02\u04C4\u04C5\x07\u016B\x02" +
        "\x02\u04C5\u04C6\x05\u0482\u0242\x02\u04C6\u04C7\x07\u0218\x02\x02\u04C7" +
        "\t\x03\x02\x02\x02\u04C8\u04C9\t\x02\x02\x02\u04C9\u04CA\x07\x93\x02\x02" +
        "\u04CA\u04CB\x07\u0218\x02\x02\u04CB\u04CF\x05\x0E\b\x02\u04CC\u04CE\x05" +
        "\f\x07\x02\u04CD\u04CC\x03\x02\x02\x02\u04CE\u04D1\x03\x02\x02\x02\u04CF" +
        "\u04CD\x03\x02\x02\x02\u04CF\u04D0\x03\x02\x02\x02\u04D0\v\x03\x02\x02" +
        "\x02\u04D1\u04CF\x03\x02\x02\x02\u04D2\u04D9\x05\x10\t\x02\u04D3\u04D9" +
        "\x05\x12\n\x02\u04D4\u04D9\x05\x14\v\x02\u04D5\u04D9\x05\x16\f\x02\u04D6" +
        "\u04D9\x05\x18\r\x02\u04D7\u04D9\x05\x1A\x0E\x02\u04D8\u04D2\x03\x02\x02" +
        "\x02\u04D8\u04D3\x03\x02\x02\x02\u04D8\u04D4\x03\x02\x02\x02\u04D8\u04D5" +
        "\x03\x02\x02\x02\u04D8\u04D6\x03\x02\x02\x02\u04D8\u04D7\x03\x02\x02\x02" +
        "\u04D9\r\x03\x02\x02\x02\u04DA\u04DB\x07\u016C\x02\x02\u04DB\u04DC\x07" +
        "\u0218\x02\x02\u04DC\u04E4\x05\u0482\u0242\x02\u04DD\u04DF\x07\u0100\x02" +
        "\x02\u04DE\u04DD\x03\x02\x02\x02\u04DE\u04DF\x03\x02\x02\x02\u04DF\u04E0" +
        "\x03\x02\x02\x02\u04E0\u04E2\t\x03\x02\x02\u04E1\u04E3\x07\u016B\x02\x02" +
        "\u04E2\u04E1\x03\x02\x02\x02\u04E2\u04E3\x03\x02\x02\x02\u04E3\u04E5\x03" +
        "\x02\x02\x02\u04E4\u04DE\x03\x02\x02\x02\u04E4\u04E5\x03\x02\x02\x02\u04E5" +
        "\u04E7\x03\x02\x02\x02\u04E6\u04E8\x07\u0218\x02\x02\u04E7\u04E6\x03\x02" +
        "\x02\x02\u04E7\u04E8\x03\x02\x02\x02\u04E8\u04EA\x03\x02\x02\x02\u04E9" +
        "\u04EB\x05\u04A6\u0254\x02\u04EA\u04E9\x03\x02\x02\x02\u04EA\u04EB\x03" +
        "\x02\x02\x02\u04EB\x0F\x03\x02\x02\x02\u04EC\u04ED\x07\"\x02\x02\u04ED" +
        "\u04EF\x07\u0218\x02\x02\u04EE\u04F0\x05\u04A6\u0254\x02\u04EF\u04EE\x03" +
        "\x02\x02\x02\u04EF\u04F0\x03\x02\x02\x02\u04F0\x11\x03\x02\x02\x02\u04F1" +
        "\u04F2\x07\xFB\x02\x02\u04F2\u04F4\x07\u0218\x02\x02\u04F3\u04F5\x05\u04A6" +
        "\u0254\x02\u04F4\u04F3\x03\x02\x02\x02\u04F4\u04F5\x03\x02\x02\x02\u04F5" +
        "\x13\x03\x02\x02\x02\u04F6\u04F7\x07s\x02\x02\u04F7\u04F9\x07\u0218\x02" +
        "\x02\u04F8\u04FA\x05\u04A6\u0254\x02\u04F9\u04F8\x03\x02\x02\x02\u04F9" +
        "\u04FA\x03\x02\x02\x02\u04FA\x15\x03\x02\x02\x02\u04FB\u04FC\x07r\x02" +
        "\x02\u04FC\u04FE\x07\u0218\x02\x02\u04FD\u04FF\x05\u04A6\u0254\x02\u04FE" +
        "\u04FD\x03\x02\x02\x02\u04FE\u04FF\x03\x02\x02\x02\u04FF\x17\x03\x02\x02" +
        "\x02\u0500\u0501\x07\u01A7\x02\x02\u0501\u0503\x07\u0218\x02\x02\u0502" +
        "\u0504\x05\u04A6\u0254\x02\u0503\u0502\x03\x02\x02\x02\u0503\u0504\x03" +
        "\x02\x02\x02\u0504\x19\x03\x02\x02\x02\u0505\u0506\x07\u0187\x02\x02\u0506" +
        "\u0508\x07\u0218\x02\x02\u0507\u0509\x05\u04A6\u0254\x02\u0508\u0507\x03" +
        "\x02\x02\x02\u0508\u0509\x03\x02\x02\x02\u0509\x1B\x03\x02\x02\x02\u050A" +
        "\u050B\x07\xBA\x02\x02\u050B\u050C\x07\x93\x02\x02\u050C\u0510\x07\u0218" +
        "\x02\x02\u050D\u050F\x05\x1E\x10\x02\u050E\u050D\x03\x02\x02\x02\u050F" +
        "\u0512\x03\x02\x02\x02\u0510\u050E\x03\x02\x02\x02\u0510\u0511\x03\x02" +
        "\x02\x02\u0511\x1D\x03\x02\x02\x02\u0512\u0510\x03\x02\x02\x02\u0513\u0517" +
        "\x05 \x11\x02\u0514\u0517\x058\x1D\x02\u0515\u0517\x05f4\x02\u0516\u0513" +
        "\x03\x02\x02\x02\u0516\u0514\x03\x02\x02\x02\u0516\u0515\x03\x02\x02\x02" +
        "\u0517\x1F\x03\x02\x02\x02\u0518\u0519\x07_\x02\x02\u0519\u051A\x07\u01A5" +
        "\x02\x02\u051A\u051E\x07\u0218\x02\x02\u051B\u051D\x05\"\x12\x02\u051C" +
        "\u051B\x03\x02\x02\x02\u051D\u0520\x03\x02\x02\x02\u051E\u051C\x03\x02" +
        "\x02\x02\u051E\u051F\x03\x02\x02\x02\u051F!\x03\x02\x02\x02\u0520\u051E" +
        "\x03\x02\x02\x02\u0521\u0525\x05$\x13\x02\u0522\u0525\x05";
    Cobol85Parser._serializedATNSegment4 = "&\x14\x02\u0523\u0525\x058\x1D\x02\u0524\u0521\x03\x02\x02\x02\u0524\u0522" +
        "\x03\x02\x02\x02\u0524\u0523\x03\x02\x02\x02\u0525#\x03\x02\x02\x02\u0526" +
        "\u0527\x07\u01C3\x02\x02\u0527\u0528\x07\u0218\x02\x02\u0528\u052E\x05" +
        "\u0466\u0234\x02\u0529\u052B\x07\u0204\x02\x02\u052A\u0529\x03\x02\x02" +
        "\x02\u052A\u052B\x03\x02\x02\x02\u052B\u052C\x03\x02\x02\x02\u052C\u052D" +
        "\x07\x7F\x02\x02\u052D\u052F\x07\u012B\x02\x02\u052E\u052A\x03\x02\x02" +
        "\x02\u052E\u052F\x03\x02\x02\x02\u052F\u0530\x03\x02\x02\x02\u0530\u0531" +
        "\x07\u0218\x02\x02\u0531%\x03\x02\x02\x02\u0532\u0533\x07\u0142\x02\x02" +
        "\u0533\u0534\x07\u0218\x02\x02\u0534\u0538\x05\u0466\u0234\x02\u0535\u0537" +
        "\x05(\x15\x02\u0536\u0535\x03\x02\x02\x02\u0537\u053A\x03\x02\x02\x02" +
        "\u0538\u0536\x03\x02\x02\x02\u0538\u0539\x03\x02\x02\x02\u0539\u053B\x03" +
        "\x02\x02\x02\u053A\u0538\x03\x02\x02\x02\u053B\u053C\x07\u0218\x02\x02" +
        "\u053C\'\x03\x02\x02\x02\u053D\u0543\x05*\x16\x02\u053E\u0543\x05,\x17" +
        "\x02\u053F\u0543\x05.\x18\x02\u0540\u0543\x054\x1B\x02\u0541\u0543\x05" +
        "6\x1C\x02\u0542\u053D\x03\x02\x02\x02\u0542\u053E\x03\x02\x02\x02\u0542" +
        "\u053F\x03\x02\x02\x02\u0542\u0540\x03\x02\x02\x02\u0542\u0541\x03\x02" +
        "\x02\x02\u0543)\x03\x02\x02\x02\u0544\u0546\x07\u0127\x02\x02\u0545\u0547" +
        "\x07\u01B9\x02\x02\u0546\u0545\x03\x02\x02\x02\u0546\u0547\x03\x02\x02" +
        "\x02\u0547\u054A\x03\x02\x02\x02\u0548\u054B\x05\u049C\u024F\x02\u0549" +
        "\u054B\x05\u0494\u024B\x02\u054A\u0548\x03\x02\x02\x02\u054A\u0549\x03" +
        "\x02\x02\x02\u054B\u054D\x03\x02\x02\x02\u054C\u054E\t\x04\x02\x02\u054D" +
        "\u054C\x03\x02\x02\x02\u054D\u054E\x03\x02\x02\x02\u054E+\x03\x02\x02" +
        "\x02\u054F\u0551\x07\x8F\x02\x02\u0550\u0552\x07\u01B9\x02\x02\u0551\u0550" +
        "\x03\x02\x02\x02\u0551\u0552\x03\x02\x02\x02\u0552\u0554\x03\x02\x02\x02" +
        "\u0553\u0555\x07\u0100\x02\x02\u0554\u0553\x03\x02\x02\x02\u0554\u0555" +
        "\x03\x02\x02\x02\u0555\u0558\x03\x02\x02\x02\u0556\u0559\x05\u049C\u024F" +
        "\x02\u0557\u0559\x05\u0494\u024B\x02\u0558\u0556\x03\x02\x02\x02\u0558" +
        "\u0557\x03\x02\x02\x02\u0559\u055B\x03\x02\x02\x02\u055A\u055C\t\x05\x02" +
        "\x02\u055B\u055A\x03\x02\x02\x02\u055B\u055C\x03\x02\x02\x02\u055C-\x03" +
        "\x02\x02\x02\u055D\u055F\x07\u016B\x02\x02\u055E\u055D\x03\x02\x02\x02" +
        "\u055E\u055F\x03\x02\x02\x02\u055F\u0561\x03\x02\x02\x02\u0560\u0562\x07" +
        "J\x02\x02\u0561\u0560\x03\x02\x02\x02\u0561\u0562\x03\x02\x02\x02\u0562" +
        "\u0563\x03\x02\x02\x02\u0563\u0565\x07\u01AE\x02\x02\u0564\u0566\x07\u0100" +
        "\x02\x02\u0565\u0564\x03\x02\x02\x02\u0565\u0566\x03\x02\x02\x02\u0566" +
        "\u0568\x03\x02\x02\x02\u0567\u0569\x05\u045C\u022F\x02\u0568\u0567\x03" +
        "\x02\x02\x02\u0569\u056A\x03\x02\x02\x02\u056A\u0568\x03\x02\x02\x02\u056A" +
        "\u056B\x03\x02\x02\x02\u056B\u056D\x03\x02\x02\x02\u056C\u056E\x050\x19" +
        "\x02\u056D\u056C\x03\x02\x02\x02\u056D\u056E\x03\x02\x02\x02\u056E\u0570" +
        "\x03\x02\x02\x02\u056F\u0571\x052\x1A\x02\u0570\u056F\x03\x02\x02\x02" +
        "\u0570\u0571\x03\x02\x02\x02\u0571/\x03\x02\x02\x02\u0572\u0574\x07\xD6" +
        "\x02\x02\u0573\u0572\x03\x02\x02\x02\u0573\u0574\x03\x02\x02\x02\u0574" +
        "\u0575\x03\x02\x02\x02\u0575\u0577\x07\x10\x02\x02\u0576\u0578\x07\u0100" +
        "\x02\x02\u0577\u0576\x03\x02\x02\x02\u0577\u0578\x03\x02\x02\x02\u0578" +
        "\u0579\x03\x02\x02\x02\u0579\u057A\x05\u045C\u022F\x02\u057A1\x03\x02" +
        "\x02\x02\u057B\u057D\x07\xD6\x02\x02\u057C\u057B\x03\x02\x02\x02\u057C" +
        "\u057D\x03\x02\x02\x02\u057D\u057E\x03\x02\x02\x02\u057E\u0580\x07\u0132" +
        "\x02\x02\u057F\u0581\x07\u0100\x02\x02\u0580\u057F\x03\x02\x02\x02\u0580" +
        "\u0581\x03\x02\x02\x02\u0581\u0582\x03\x02\x02\x02\u0582\u0583\x05\u045C" +
        "\u022F\x02\u05833\x03\x02\x02\x02\u0584\u0586\x07\u01A9\x02\x02\u0585" +
        "\u0587\x07\u0100\x02\x02\u0586\u0585\x03\x02\x02\x02\u0586\u0587\x03\x02" +
        "\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588\u0589\x05\u049C\u024F\x02\u0589" +
        "5\x03\x02\x02\x02\u058A\u058B\x07@\x02\x02\u058B\u058C\x07\u01B0\x02\x02" +
        "\u058C\u058D\x07\u0218\x02\x02\u058D7\x03\x02\x02\x02\u058E\u058F\x07" +
        "\u01C6\x02\x02\u058F\u0597\x07\u0218\x02\x02\u0590\u0592\x05:\x1E\x02" +
        "\u0591\u0590\x03\x02\x02\x02\u0592\u0593\x03\x02\x02\x02\u0593\u0591\x03" +
        "\x02\x02\x02\u0593\u0594\x03\x02\x02\x02\u0594\u0595\x03\x02\x02\x02\u0595" +
        "\u0596\x07\u0218\x02\x02\u0596\u0598\x03\x02\x02\x02\u0597\u0591\x03\x02" +
        "\x02\x02\u0597\u0598\x03\x02\x02\x02\u05989\x03\x02\x02\x02\u0599\u05A5" +
        "\x05H%\x02\u059A\u05A5\x05^0\x02\u059B\u05A5\x05<\x1F\x02\u059C\u05A5" +
        "\x05J&\x02\u059D\u05A5\x05R*\x02\u059E\u05A5\x05T+\x02\u059F\u05A5\x05" +
        "b2\x02\u05A0\u05A5\x05Z.\x02\u05A1\u05A5\x05X-\x02\u05A2\u05A5\x05V,\x02" +
        "\u05A3\u05A5\x05`1\x02\u05A4\u0599\x03\x02\x02\x02\u05A4\u059A\x03\x02" +
        "\x02\x02\u05A4\u059B\x03\x02\x02\x02\u05A4\u059C\x03\x02\x02\x02\u05A4" +
        "\u059D\x03\x02\x02\x02\u05A4\u059E\x03\x02\x02\x02\u05A4\u059F\x03\x02" +
        "\x02\x02\u05A4\u05A0\x03\x02\x02\x02\u05A4\u05A1\x03\x02\x02\x02\u05A4" +
        "\u05A2\x03\x02\x02\x02\u05A4\u05A3\x03\x02\x02\x02\u05A5;\x03\x02\x02" +
        "\x02\u05A6\u05A9\x05> \x02\u05A7\u05A9\x05F$\x02\u05A8\u05A6\x03\x02\x02" +
        "\x02\u05A8\u05A7\x03\x02\x02\x02\u05A9=\x03\x02\x02\x02\u05AA\u05AB\x07" +
        "\f\x02\x02\u05AB\u05AE\x05\u045C\u022F\x02\u05AC\u05AD\x07\xD6\x02\x02" +
        "\u05AD\u05AF\x07\x10\x02\x02\u05AE\u05AC\x03\x02\x02\x02\u05AE\u05AF\x03" +
        "\x02\x02\x02\u05AF\u05B1\x03\x02\x02\x02\u05B0\u05B2\x07\u0100\x02\x02" +
        "\u05B1\u05B0\x03\x02\x02\x02\u05B1\u05B2\x03\x02\x02\x02\u05B2\u05BE\x03" +
        "\x02\x02\x02\u05B3\u05BF\x07\x99\x02\x02\u05B4\u05BF\x07\x1C\x02\x02\u05B5" +
        "\u05BF\x07\u01C8\x02\x02\u05B6\u05BF\x07\u01C9\x02\x02\u05B7\u05BF\x07" +
        "\u0134\x02\x02\u05B8\u05BF\x05\u0494\u024B\x02\u05B9\u05BB\x05@!\x02\u05BA" +
        "\u05B9\x03\x02\x02\x02\u05BB\u05BC\x03\x02\x02\x02\u05BC\u05BA\x03\x02" +
        "\x02\x02\u05BC\u05BD\x03\x02\x02\x02\u05BD\u05BF\x03\x02\x02\x02\u05BE" +
        "\u05B3\x03\x02\x02\x02\u05BE\u05B4\x03\x02\x02\x02\u05BE\u05B5\x03\x02" +
        "\x02\x02\u05BE\u05B6\x03\x02\x02\x02\u05BE\u05B7\x03\x02\x02\x02\u05BE" +
        "\u05B8\x03\x02\x02\x02\u05BE\u05BA\x03\x02\x02\x02\u05BF?\x03\x02\x02" +
        "\x02\u05C0\u05C7\x05\u0496\u024C\x02\u05C1\u05C8\x05B\"\x02\u05C2\u05C4" +
        "\x05D#\x02\u05C3\u05C2\x03\x02\x02\x02\u05C4\u05C5\x03\x02\x02\x02\u05C5" +
        "\u05C3\x03\x02\x02\x02\u05C5\u05C6\x03\x02\x02\x02\u05C6\u05C8\x03\x02" +
        "\x02\x02\u05C7\u05C1\x03\x02\x02\x02\u05C7\u05C3\x03\x02\x02\x02\u05C7" +
        "\u05C8\x03\x02\x02\x02\u05C8A\x03\x02\x02\x02\u05C9\u05CA\t\x06\x02\x02" +
        "\u05CA\u05CB\x05\u0496\u024C\x02\u05CBC\x03\x02\x02\x02\u05CC\u05CE\x07" +
        "\x12\x02\x02\u05CD\u05CF\x05\u0496\u024C\x02\u05CE\u05CD\x03\x02\x02\x02" +
        "\u05CF\u05D0\x03\x02\x02\x02\u05D0\u05CE\x03\x02\x02\x02\u05D0\u05D1\x03" +
        "\x02\x02\x02\u05D1E\x03\x02\x02\x02\u05D2\u05D3\x07\f\x02\x02\u05D3\u05D5" +
        "\x05\u045C\u022F\x02\u05D4\u05D6\x07\xD6\x02\x02\u05D5\u05D4\x03\x02\x02" +
        "\x02\u05D5\u05D6\x03\x02\x02\x02\u05D6\u05D7\x03\x02\x02\x02\u05D7\u05D9" +
        "\x07\u0132\x02\x02\u05D8\u05DA\x07\u0100\x02\x02\u05D9\u05D8\x03\x02\x02" +
        "\x02\u05D9\u05DA\x03\x02\x02\x02\u05DA\u05DE\x03\x02\x02\x02\u05DB\u05DF" +
        "\x07\u0134\x02\x02\u05DC\u05DD\x079\x02\x02\u05DD\u05DF\x05\u0496\u024C" +
        "\x02\u05DE\u05DB\x03\x02\x02\x02\u05DE\u05DC\x03\x02\x02\x02\u05DFG\x03" +
        "\x02\x02\x02\u05E0\u05E1\x07?\x02\x02\u05E1\u05E3\x05\u049C\u024F\x02" +
        "\u05E2\u05E4\x07\u0100\x02\x02\u05E3\u05E2\x03\x02\x02\x02\u05E3\u05E4" +
        "\x03\x02\x02\x02\u05E4\u05E5\x03\x02\x02\x02\u05E5\u05E6\x05\u047C\u023F" +
        "\x02\u05E6I\x03\x02\x02\x02\u05E7\u05E8\x07B\x02\x02\u05E8\u05ED\x05\u0464" +
        "\u0233\x02\u05E9\u05EB\x07\xD6\x02\x02\u05EA\u05E9\x03\x02\x02\x02\u05EA" +
        "\u05EB\x03\x02\x02\x02\u05EB\u05EC\x03\x02\x02\x02\u05EC\u05EE\t\x07\x02" +
        "\x02\u05ED\u05EA\x03\x02\x02\x02\u05ED\u05EE\x03\x02\x02\x02\u05EE\u05F0" +
        "\x03\x02\x02\x02\u05EF\u05F1\x07\u0100\x02\x02\u05F0\u05EF\x03\x02\x02" +
        "\x02\u05F0\u05F1\x03\x02\x02\x02\u05F1\u05F3\x03\x02\x02\x02\u05F2\u05F4" +
        "\x05L\'\x02\u05F3\u05F2\x03\x02\x02\x02\u05F4\u05F5\x03\x02\x02\x02\u05F5" +
        "\u05F3\x03\x02\x02\x02\u05F5\u05F6\x03\x02\x02\x02\u05F6K\x03\x02\x02" +
        "\x02\u05F7\u05FA\x05N(\x02\u05F8\u05F9\t\x06\x02\x02\u05F9\u05FB\x05P" +
        ")\x02\u05FA\u05F8\x03\x02\x02\x02\u05FA\u05FB\x03\x02\x02\x02\u05FBM\x03" +
        "\x02\x02\x02\u05FC\u05FF\x05\u0434\u021B\x02\u05FD\u05FF\x05\u0496\u024C" +
        "\x02\u05FE\u05FC\x03\x02\x02\x02\u05FE\u05FD\x03\x02\x02\x02\u05FFO\x03" +
        "\x02\x02\x02\u0600\u0603\x05\u0434\u021B\x02\u0601\u0603\x05\u0496\u024C" +
        "\x02\u0602\u0600\x03\x02\x02\x02\u0602\u0601\x03\x02\x02\x02\u0603Q\x03" +
        "\x02\x02\x02\u0604\u0606\x07m\x02\x02\u0605\u0607\x07\u01B8\x02\x02\u0606" +
        "\u0605\x03\x02\x02\x02\u0606\u0607\x03\x02\x02\x02\u0607\u0609\x03\x02" +
        "\x02\x02\u0608\u060A\x07\u0100\x02\x02\u0609\u0608\x03\x02\x02\x02\u0609" +
        "\u060A\x03\x02\x02\x02\u060A\u060B\x03\x02\x02\x02\u060B\u0612\x05\u0496" +
        "\u024C\x02\u060C\u060E\x07\u0204\x02\x02\u060D\u060C\x03\x02\x02\x02\u060D" +
        "\u060E\x03\x02\x02\x02\u060E\u060F\x03\x02\x02\x02\u060F\u0610\x07\u015D" +
        "\x02\x02\u0610\u0611\x07\u01D4\x02\x02\u0611\u0613\x05\u0496\u024C\x02" +
        "\u0612\u060D\x03\x02\x02\x02\u0612\u0613\x03\x02\x02\x02\u0613S\x03\x02" +
        "\x02\x02\u0614\u0616\x07\x80\x02\x02\u0615\u0617\x07\u0100\x02\x02\u0616" +
        "\u0615\x03\x02\x02\x02\u0616\u0617\x03\x02\x02\x02\u0617\u0618\x03\x02" +
        "\x02\x02\u0618\u0619\x07N\x02\x02\u0619U\x03\x02\x02\x02\u061A\u061C\x07" +
        "\x82\x02\x02\u061B\u061D\t\b\x02\x02\u061C\u061B\x03\x02\x02\x02\u061C" +
        "\u061D\x03\x02\x02\x02\u061D\u0622\x03\x02\x02\x02\u061E\u0620\x07\u01B8" +
        "\x02\x02\u061F\u0621\x07\u0100\x02\x02\u0620\u061F\x03\x02\x02\x02\u0620" +
        "\u0621\x03\x02\x02\x02\u0621\u0623\x03\x02\x02\x02\u0622\u061E\x03\x02" +
        "\x02\x02\u0622\u0623\x03\x02\x02\x02\u0623\u0625\x03\x02\x02\x02\u0624" +
        "\u0626\t\t\x02\x02\u0625\u0624\x03\x02\x02\x02\u0625\u0626\x03\x02\x02" +
        "\x02\u0626\u0627\x03\x02\x02\x02\u0627\u0629\x07\u01AD\x02\x02\u0628\u062A" +
        "\x07@\x02\x02\u0629\u0628\x03\x02\x02\x02\u0629\u062A\x03\x02\x02\x02" +
        "\u062AW\x03\x02\x02\x02\u062B\u0630\x07\x83\x02\x02\u062C\u062E\x07\u01B8" +
        "\x02\x02\u062D\u062F\x07\u0100\x02\x02\u062E\u062D\x03\x02\x02\x02\u062E" +
        "\u062F\x03\x02\x02\x02\u062F\u0631\x03\x02\x02\x02\u0630\u062C\x03\x02" +
        "\x02\x02\u0630\u0631\x03\x02\x02\x02\u0631\u0632\x03\x02\x02\x02\u0632" +
        "\u0637\t\t\x02\x02\u0633\u0635\x07\u01AD\x02\x02\u0634\u0636\x07@\x02" +
        "\x02\u0635\u0634\x03\x02\x02\x02\u0635\u0636\x03\x02\x02\x02\u0636\u0638" +
        "\x03\x02\x02\x02\u0637\u0633\x03\x02\x02\x02\u0637\u0638\x03\x02\x02\x02" +
        "\u0638Y\x03\x02\x02\x02\u0639\u063B\x05\u046E\u0238\x02\u063A\u063C\x07" +
        "\u0100\x02\x02\u063B\u063A\x03\x02\x02\x02\u063B\u063C\x03\x02\x02\x02" +
        "\u063C\u063D\x03\x02\x02\x02\u063D\u063F\x05\u047C\u023F\x02\u063E\u0640" +
        "\x05\\/\x02\u063F\u063E\x03\x02\x02\x02\u063F\u0640\x03\x02\x02\x02\u0640" +
        "\u0643\x03\x02\x02\x02\u0641\u0643\x05\\/\x02\u0642\u0639\x03\x02\x02" +
        "\x02\u0642\u0641\x03\x02\x02\x02\u0643[\x03\x02\x02\x02\u0644\u0646\x07" +
        "\u0148\x02\x02\u0645\u0647\x07\u01CB\x02\x02\u0646\u0645\x03\x02\x02\x02" +
        "\u0646\u0647\x03\x02\x02\x02\u0647\u0649\x03\x02\x02\x02\u0648\u064A\x07" +
        "\u0100\x02\x02\u0649\u0648\x03\x02\x02\x02\u0649\u064A\x03\x02\x02\x02" +
        "\u064A\u064B\x03\x02\x02\x02\u064B\u0654\x05\u0418\u020D\x02\u064C\u064E" +
        "\x07\u0146\x02\x02\u064D\u064F\x07\u01CB\x02\x02\u064E\u064D\x03\x02\x02" +
        "\x02\u064E\u064F\x03\x02\x02\x02\u064F\u0651\x03\x02\x02\x02\u0650\u0652" +
        "\x07\u0100\x02\x02\u0651\u0650\x03\x02\x02\x02\u0651\u0652\x03\x02\x02" +
        "\x02\u0652\u0653\x03\x02\x02\x02\u0653\u0655\x05\u0418\u020D\x02\u0654" +
        "\u064C\x03\x02\x02\x02\u0654\u0655\x03\x02\x02\x02\u0655\u0669\x03\x02" +
        "\x02\x02\u0656\u0658\x07\u0146\x02\x02\u0657\u0659\x07\u01CB\x02\x02\u0658" +
        "\u0657\x03\x02\x02\x02\u0658\u0659\x03\x02\x02\x02\u0659\u065B\x03\x02" +
        "\x02\x02\u065A\u065C\x07\u0100\x02\x02\u065B\u065A\x03\x02\x02\x02\u065B" +
        "\u065C\x03\x02\x02\x02\u065C\u065D\x03\x02\x02\x02\u065D\u0666\x05\u0418" +
        "\u020D\x02\u065E\u0660\x07\u0148\x02\x02\u065F\u0661\x07\u01CB\x02\x02" +
        "\u0660\u065F\x03\x02\x02\x02\u0660\u0661\x03\x02\x02\x02\u0661\u0663\x03" +
        "\x02\x02\x02\u0662\u0664\x07\u0100\x02\x02\u0663\u0662\x03\x02\x02\x02" +
        "\u0663\u0664\x03\x02\x02\x02\u0664\u0665\x03\x02\x02\x02\u0665\u0667\x05" +
        "\u0418\u020D\x02\u0666\u065E\x03\x02\x02\x02\u0666\u0667\x03\x02\x02\x02" +
        "\u0667\u0669\x03\x02\x02\x02\u0668\u0644\x03\x02\x02\x02\u0668\u0656\x03" +
        "\x02\x02\x02\u0669]\x03\x02\x02\x02\u066A\u066C\x07\u0144\x02\x02\u066B" +
        "\u066D\x07\u0100\x02\x02\u066C\u066B\x03\x02\x02\x02\u066C\u066D\x03\x02" +
        "\x02\x02\u066D\u066E\x03\x02\x02\x02\u066E\u066F\x05\u047C\u023F\x02\u066F" +
        "_\x03\x02\x02\x02\u0670\u0672\x07\u0192\x02\x02\u0671\u0673\x07\u0205" +
        "\x02\x02\u0672\u0671\x03\x02\x02\x02\u0672\u0673\x03\x02\x02\x02\u0673" +
        "\u0675\x03\x02\x02\x02\u0674\u0676\x07\u011D\x02\x02\u0675\u0674\x03\x02" +
        "\x02\x02\u0675\u0676\x03\x02\x02\x02\u0676\u0678\x03\x02\x02\x02\u0677" +
        "\u0679\x07\u0100\x02\x02\u0678\u0677\x03\x02\x02\x02\u0678\u0679\x03\x02" +
        "\x02\x02\u0679\u067A\x03\x02\x02\x02\u067A\u067C\x07\u0136\x02\x02\u067B" +
        "\u067D\x078\x02\x02\u067C\u067B\x03\x02\x02\x02\u067C\u067D\x03\x02\x02" +
        "\x02\u067Da\x03\x02\x02\x02\u067E\u0680\x07\u01D5\x02\x02\u067F\u0681" +
        "\x07A\x02\x02\u0680\u067F\x03\x02\x02\x02\u0680\u0681\x03\x02\x02\x02" +
        "\u0681\u0686\x03\x02\x02\x02\u0682\u0684\x07\xD6\x02\x02\u0683\u0682\x03" +
        "\x02\x02\x02\u0683\u0684\x03\x02\x02\x02\u0684\u0685\x03\x02\x02\x02\u0685" +
        "\u0687\t\x07\x02\x02\u0686\u0683\x03\x02\x02\x02\u0686\u0687\x03\x02\x02" +
        "\x02\u0687\u0689\x03\x02\x02\x02\u0688\u068A\x05d3\x02\u0689\u0688\x03" +
        "\x02\x02\x02\u068A\u068B\x03\x02\x02\x02\u068B\u0689\x03\x02\x02\x02\u068B" +
        "\u068C\x03\x02\x02\x02\u068C\u068F\x03\x02\x02\x02\u068D\u068E\x07\xF1" +
        "\x02\x02\u068E\u0690\x05\u045C\u022F\x02\u068F\u068D\x03\x02\x02\x02\u068F" +
        "\u0690\x03\x02\x02\x02\u0690c\x03\x02\x02\x02\u0691\u0693\x05\u0490\u0249" +
        "\x02\u0692\u0691\x03\x02\x02\x02\u0693\u0694\x03\x02\x02\x02\u0694\u0692" +
        "\x03\x02\x02\x02\u0694\u0695\x03\x02\x02\x02\u0695\u0697\x03\x02\x02\x02" +
        "\u0696\u0698\t\n\x02\x02\u0697\u0696\x03\x02\x02\x02\u0697\u0698\x03\x02" +
        "\x02\x02\u0698\u069A\x03\x02\x02\x02\u0699\u069B\x05\u049C\u024F\x02\u069A" +
        "\u0699\x03\x02\x02\x02\u069B\u069C\x03\x02\x02\x02\u069C\u069A\x03\x02" +
        "\x02\x02\u069C\u069D\x03\x02\x02\x02\u069De\x03\x02\x02\x02\u069E\u069F" +
        "\x07\xF9\x02\x02\u069F\u06A0\x07\u01A5\x02\x02\u06A0\u06A4\x07\u0218\x02" +
        "\x02\u06A1\u06A3\x05h5\x02\u06A2\u06A1\x03\x02\x02\x02\u06A3\u06A6\x03" +
        "\x02\x02\x02\u06A4\u06A2\x03\x02\x02\x02\u06A4\u06A5\x03\x02\x02\x02\u06A5" +
        "g\x03\x02\x02\x02\u06A6\u06A4\x03\x02\x02\x02\u06A7\u06AA\x05j6\x02\u06A8" +
        "\u06AA\x05\x88E\x02\u06A9\u06A7\x03\x02\x02\x02\u06A9\u06A8\x03\x02\x02" +
        "\x02\u06AAi\x03\x02\x02\x02\u06AB\u06B2\x07\xD1\x02\x02\u06AC\u06AE\x07" +
        "\u0218\x02\x02\u06AD\u06AC\x03\x02\x02\x02\u06AD\u06AE\x03\x02\x02\x02" +
        "\u06AE\u06AF\x03\x02\x02\x02\u06AF\u06B1\x05l7\x02\u06B0\u06AD\x03\x02" +
        "\x02\x02\u06B1\u06B4\x03\x02\x02\x02\u06B2\u06B0\x03\x02\x02\x02\u06B2" +
        "\u06B3\x03\x02\x02\x02\u06B3\u06B5\x03\x02\x02\x02\u06B4\u06B2\x03\x02" +
        "\x02\x02\u06B5\u06B6\x07\u0218\x02\x02\u06B6k\x03\x02\x02\x02\u06B7\u06BB" +
        "\x05n8\x02\u06B8\u06BA\x05p9\x02\u06B9\u06B8\x03\x02\x02\x02\u06BA\u06BD" +
        "\x03\x02\x02\x02\u06BB\u06B9\x03\x02\x02\x02\u06BB\u06BC\x03\x02\x02\x02" +
        "\u06BCm\x03\x02\x02\x02\u06BD\u06BB\x03\x02\x02\x02\u06BE\u06C0\x07\u01AA" +
        "\x02\x02\u06BF\u06C1\x07\u014A\x02\x02\u06C0\u06BF\x03\x02\x02\x02\u06C0" +
        "\u06C1\x03\x02\x02\x02\u06C1\u06C2\x03\x02\x02\x02\u06C2\u06C3\x05\u0470" +
        "\u0239\x02\u06C3o\x03\x02\x02\x02\u06C4\u06D0\x05r:\x02\u06C5\u06D0\x05" +
        "t;\x02\u06C6\u06D0\x05v<\x02\u06C7\u06D0\x05x=\x02\u06C8\u06D0\x05z>\x02" +
        "\u06C9\u06D0\x05|?\x02\u06CA\u06D0\x05~@\x02\u06CB\u06D0\x05\x80A\x02" +
        "\u06CC\u06D0\x05\x84C\x02\u06CD\u06D0\x05\x82B\x02\u06CE\u06D0\x05\x86" +
        "D\x02\u06CF\u06C4\x03\x02\x02\x02\u06CF\u06C5\x03\x02\x02\x02\u06CF\u06C6" +
        "\x03\x02\x02\x02\u06CF\u06C7\x03\x02\x02\x02\u06CF\u06C8\x03\x02\x02\x02" +
        "\u06CF\u06C9\x03\x02\x02\x02\u06CF\u06CA\x03\x02\x02\x02\u06CF\u06CB\x03" +
        "\x02\x02\x02\u06CF\u06CC\x03\x02\x02\x02\u06CF\u06CD\x03\x02\x02\x02\u06CF" +
        "\u06CE\x03\x02\x02\x02\u06D0q\x03\x02\x02\x02\u06D1\u06D3\x07\x1D\x02" +
        "\x02\u06D2\u06D4\x07\u01EB\x02\x02\u06D3\u06D2\x03\x02\x02\x02\u06D3\u06D4" +
        "\x03\x02\x02\x02\u06D4\u06E0\x03\x02\x02\x02\u06D5\u06E1\x07\x8F\x02\x02" +
        "\u06D6\u06E1\x07\x90\x02\x02\u06D7\u06E1\x07\u0106\x02\x02\u06D8\u06E1" +
        "\x07\u0162\x02\x02\u06D9\u06E1\x07\u0163\x02\x02\u06DA\u06E1\x07\u0174" +
        "\x02\x02\u06DB\u06E1\x07\u0175\x02\x02\u06DC\u06E1\x07\u01DC\x02\x02\u06DD" +
        "\u06E1\x07\u0200\x02\x02\u06DE\u06E1\x05\u045E\u0230\x02\u06DF\u06E1\x05" +
        "\u0496\u024C\x02\u06E0\u06D5\x03\x02\x02\x02\u06E0\u06D6\x03\x02\x02\x02" +
        "\u06E0\u06D7\x03\x02\x02\x02\u06E0\u06D8\x03\x02\x02\x02\u06E0\u06D9\x03" +
        "\x02\x02\x02\u06E0\u06DA\x03\x02\x02\x02\u06E0\u06DB\x03\x02\x02\x02\u06E0" +
        "\u06DC\x03\x02\x02\x02\u06E0\u06DD\x03\x02\x02\x02\u06E0\u06DE\x03\x02" +
        "\x02\x02\u06E0\u06DF\x03\x02\x02\x02\u06E1s\x03\x02\x02\x02\u06E2\u06E5" +
        "\x07\u0192\x02\x02\u06E3\u06E6\x07\u0138\x02\x02\u06E4\u06E6\x05\u049C" +
        "\u024F\x02\u06E5\u06E3\x03\x02\x02\x02\u06E5\u06E4\x03\x02\x02\x02\u06E6" +
        "\u06E8\x03\x02\x02\x02\u06E7\u06E9\x07\x14\x02\x02\u06E8\u06E7\x03\x02" +
        "\x02\x02\u06E8\u06E9\x03\x02\x02\x02\u06E9\u06EB\x03\x02\x02\x02\u06EA" +
        "\u06EC\t\v\x02\x02\u06EB\u06EA\x03\x02\x02\x02\u06EB\u06EC\x03\x02\x02" +
        "\x02\u06ECu\x03\x02\x02\x02\u06ED\u06EF\x07\u014E\x02\x02\u06EE\u06F0" +
        "\x07\u0100\x02\x02\u06EF\u06EE\x03\x02\x02\x02\u06EF\u06F0\x03\x02\x02" +
        "\x02\u06F0\u06F2\x03\x02\x02\x02\u06F1\u06ED\x03\x02\x02\x02\u06F1\u06F2" +
        "\x03\x02\x02\x02\u06F2\u06F8\x03\x02\x02\x02\u06F3\u06F9\x07\u0119\x02" +
        "\x02\u06F4\u06F5\x07\u017B\x02\x02\u06F5\u06F9\x07,\x02\x02\u06F6\u06F9" +
        "\x07\u017B\x02\x02\u06F7\u06F9\x07,\x02\x02\u06F8\u06F3\x03\x02\x02\x02" +
        "\u06F8\u06F4\x03\x02\x02\x02\u06F8\u06F6\x03\x02\x02\x02\u06F8\u06F7\x03" +
        "\x02\x02\x02\u06F8\u06F9\x03\x02\x02\x02\u06F9\u06FA\x03\x02\x02\x02\u06FA" +
        "\u06FB\t\f\x02\x02\u06FBw\x03\x02\x02\x02\u06FC\u06FE\x07\u0155\x02\x02" +
        "\u06FD\u06FF\x07@\x02\x02\u06FE\u06FD\x03\x02\x02\x02\u06FE\u06FF\x03" +
        "\x02\x02\x02\u06FF\u0701\x03\x02\x02\x02\u0700\u0702\x07\u0100\x02\x02" +
        "\u0701\u0700\x03\x02\x02\x02\u0701\u0702\x03\x02\x02\x02\u0702\u0705\x03" +
        "\x02\x02\x02\u0703\u0706\x05\u0444\u0223\x02\u0704\u0706\x05\u0496\u024C" +
        "\x02\u0705\u0703\x03\x02\x02\x02\u0705\u0704\x03\x02\x02\x02\u0706y\x03" +
        "\x02\x02\x02\u0707\u0708\x07\u017B\x02\x02\u0708\u070A\x07\x87\x02\x02" +
        "\u0709\u070B\x07\u0100\x02\x02\u070A\u0709\x03\x02\x02\x02\u070A\u070B" +
        "\x03\x02\x02\x02\u070B\u070F\x03\x02\x02\x02\u070C\u0710\x07\u01C8\x02" +
        "\x02\u070D\u0710\x07\xEF\x02\x02\u070E\u0710\x05\u045E\u0230\x02\u070F" +
        "\u070C\x03\x02\x02\x02\u070F\u070D\x03\x02\x02\x02\u070F\u070E\x03\x02" +
        "\x02\x02\u0710{\x03\x02\x02\x02\u0711\u0713\x07\x05\x02\x02\u0712\u0714" +
        "\x07\u012B\x02\x02\u0713\u0712\x03\x02\x02\x02\u0713\u0714\x03\x02\x02" +
        "\x02\u0714\u0716\x03\x02\x02\x02\u0715\u0717\x07\u0100\x02\x02\u0716\u0715" +
        "\x03\x02\x02\x02\u0716\u0717\x03\x02\x02\x02\u0717\u0718\x03\x02\x02\x02" +
        "\u0718\u0719\t\r\x02\x02\u0719}\x03\x02\x02\x02\u071A\u071C\x07\u017B" +
        "\x02\x02\u071B\u071D\x07\u0105\x02\x02\u071C\u071B\x03\x02\x02\x02\u071C" +
        "\u071D\x03\x02\x02\x02\u071D\u071F\x03\x02\x02\x02\u071E\u0720\x07\u0100" +
        "\x02\x02\u071F\u071E\x03\x02\x02\x02\u071F\u0720\x03\x02\x02\x02\u0720" +
        "\u0721\x03\x02\x02\x02\u0721\u0723\x05\u0444\u0223\x02\u0722\u0724\x05" +
        "\x82B\x02\u0723\u0722\x03\x02\x02\x02\u0723\u0724\x03\x02\x02\x02\u0724" +
        "\u0729\x03\x02\x02\x02\u0725\u0727\x07\u0204\x02\x02\u0726\u0725\x03\x02" +
        "\x02\x02\u0726\u0727\x03\x02\x02\x02\u0727\u0728\x03\x02\x02\x02\u0728" +
        "\u072A\x07\x97\x02\x02\u0729\u0726\x03\x02\x02\x02\u0729\u072A\x03\x02" +
        "\x02\x02\u072A\x7F\x03\x02\x02\x02\u072B\u072C\x07\x14\x02\x02\u072C\u072E" +
        "\x07\u017B\x02\x02\u072D\u072F\x07\u0105\x02\x02\u072E\u072D\x03\x02\x02" +
        "\x02\u072E\u072F\x03\x02\x02\x02\u072F\u0731\x03\x02\x02\x02\u0730\u0732" +
        "\x07\u0100\x02\x02\u0731\u0730\x03\x02\x02\x02\u0731\u0732\x03\x02\x02" +
        "\x02\u0732\u0733\x03\x02\x02\x02\u0733\u0735\x05\u0444\u0223\x02\u0734" +
        "\u0736\x05\x82B\x02\u0735\u0734\x03\x02\x02\x02\u0735\u0736\x03\x02\x02" +
        "\x02\u0736\u073B\x03\x02\x02\x02\u0737\u0739\x07\u0204\x02\x02\u0738\u0737" +
        "\x03\x02\x02\x02\u0738\u0739\x03\x02\x02\x02\u0739\u073A\x03\x02\x02\x02" +
        "\u073A\u073C\x07\x97\x02\x02\u073B\u0738\x03\x02\x02\x02\u073B\u073C\x03" +
        "\x02\x02\x02\u073C\x81\x03\x02\x02\x02\u073D\u073F\x07\u0158\x02\x02\u073E" +
        "\u0740\x07\u0100\x02\x02\u073F\u073E\x03\x02\x02\x02\u073F\u0740\x03\x02" +
        "\x02\x02\u0740\u0741\x03\x02\x02\x02\u0741\u0742\x05\u046A\u0236\x02\u0742" +
        "\x83\x03\x02\x02\x02\u0743\u0745\x07\xD0\x02\x02\u0744\u0743\x03\x02\x02" +
        "\x02\u0744\u0745\x03\x02\x02\x02\u0745\u0746\x03\x02\x02\x02\u0746\u0748" +
        "\x07\u01CB\x02\x02\u0747\u0749\x07\u0100\x02\x02\u0748\u0747\x03\x02\x02" +
        "\x02\u0748\u0749\x03\x02\x02\x02\u0749\u074A\x03\x02\x02\x02\u074A\u074C" +
        "\x05\u0444\u0223\x02\u074B\u074D\x05\u0444\u0223\x02\u074C\u074B\x03\x02" +
        "\x02\x02\u074C\u074D\x03\x02\x02\x02\u074D\x85\x03\x02\x02\x02\u074E\u0750" +
        "\x07\u0184\x02\x02\u074F\u0751\x07\u0105\x02\x02\u0750\u074F\x03\x02\x02" +
        "\x02\u0750\u0751\x03\x02\x02\x02\u0751\u0753\x03\x02\x02\x02\u0752\u0754" +
        "\x07\u0100\x02\x02\u0753\u0752\x03\x02\x02\x02\u0753\u0754\x03\x02\x02" +
        "\x02\u0754\u0755\x03\x02\x02\x02\u0755\u0756\x05\u0444\u0223\x02\u0756" +
        "\x87\x03\x02\x02\x02\u0757\u0758\x07\xEB\x02\x02\u0758\u075C\x07\u0218" +
        "\x02\x02\u0759\u075A\x05\u0470\u0239\x02\u075A\u075B\x07\u0218\x02\x02" +
        "\u075B\u075D\x03\x02\x02\x02\u075C\u0759\x03\x02\x02\x02\u075C\u075D\x03" +
        "\x02\x02\x02\u075D\u0765\x03\x02\x02\x02\u075E\u0760\x05\x8AF\x02\u075F" +
        "\u075E\x03\x02\x02\x02\u0760\u0763\x03\x02\x02\x02\u0761\u075F\x03\x02" +
        "\x02\x02\u0761\u0762\x03\x02\x02\x02\u0762\u0764\x03\x02\x02\x02\u0763" +
        "\u0761\x03\x02\x02\x02\u0764\u0766\x07\u0218\x02\x02\u0765\u0761\x03\x02" +
        "\x02\x02\u0765\u0766\x03\x02\x02\x02\u0766\x89\x03\x02\x02\x02\u0767\u076C" +
        "\x05\x8CG\x02\u0768\u076C\x05\x94K\x02\u0769\u076C\x05\x96L\x02\u076A" +
        "\u076C\x05\x9AN\x02\u076B\u0767\x03\x02\x02\x02\u076B\u0768\x03\x02\x02" +
        "\x02\u076B\u0769\x03\x02\x02\x02\u076B\u076A\x03\x02\x02\x02\u076C\x8B" +
        "\x03\x02\x02\x02\u076D\u0773\x07\u0191\x02\x02\u076E\u0771\x07\u0148\x02" +
        "\x02\u076F\u0772\x05\u045E\u0230\x02\u0770\u0772\x05\u0470\u0239\x02\u0771" +
        "\u076F\x03\x02\x02\x02\u0771\u0770\x03\x02\x02\x02\u0772\u0774\x03\x02" +
        "\x02\x02\u0773\u076E\x03\x02\x02\x02\u0773\u0774\x03\x02\x02\x02\u0774" +
        "\u0775\x03\x02\x02\x02\u0775\u0779\x07\xC5\x02\x02\u0776\u077A\x05\x8E" +
        "H\x02\u0777\u077A\x05\x90I\x02\u0778\u077A\x05\x92J\x02\u0779\u0776\x03" +
        "\x02\x02\x02\u0779\u0777\x03\x02\x02\x02\u0779\u0778\x03\x02\x02\x02\u077A" +
        "\x8D\x03\x02\x02\x02\u077B\u077C\x05\u049C\u024F\x02\u077C\u077D\x07\u017D" +
        "\x02\x02\u077D\x8F\x03\x02\x02\x02\u077E\u0780\x07\xA0\x02\x02\u077F\u077E" +
        "\x03\x02\x02\x02\u077F\u0780\x03\x02\x02\x02\u0780\u0782\x03\x02\x02\x02" +
        "\u0781\u0783\x07\u0145\x02\x02\u0782\u0781\x03\x02\x02\x02\u0782\u0783" +
        "\x03\x02\x02\x02\u0783\u0784\x03\x02\x02\x02\u0784\u0785\t\x0E\x02\x02" +
        "\u0785\u0786\x07\u0145\x02\x02\u0786\u0787\x05\u0470\u0239\x02\u0787\x91" +
        "\x03\x02\x02\x02\u0788\u078A\x05\u049C\u024F\x02\u0789\u078B\x07D\x02" +
        "\x02\u078A\u0789\x03\x02\x02\x02\u078A\u078B\x03\x02\x02\x02\u078B\x93" +
        "\x03\x02\x02\x02\u078C\u078E\x07\u01A0\x02\x02\u078D\u078F\t\x0F\x02\x02" +
        "\u078E\u078D\x03\x02\x02\x02\u078E\u078F\x03\x02\x02\x02\u078F\u0791\x03" +
        "\x02\x02\x02\u0790\u0792\x07\x18\x02\x02\u0791\u0790\x03\x02\x02\x02\u0791" +
        "\u0792\x03\x02\x02\x02\u0792\u0794\x03\x02\x02\x02\u0793\u0795\x07\xD6" +
        "\x02\x02\u0794\u0793\x03\x02\x02\x02\u0794\u0795\x03\x02\x02\x02\u0795" +
        "\u0797\x03\x02\x02\x02\u0796\u0798\x05\u0470\u0239\x02\u0797\u0796\x03" +
        "\x02\x02\x02\u0798\u0799\x03\x02\x02\x02\u0799\u0797\x03\x02\x02\x02\u0799" +
        "\u079A\x03\x02\x02\x02\u079A\x95\x03\x02\x02\x02\u079B\u079C\x07\u012F" +
        "\x02\x02\u079C\u079E\x07\xD0\x02\x02\u079D\u079F\x07\u01DC\x02\x02\u079E" +
        "\u079D\x03\x02\x02\x02\u079E\u079F\x03\x02\x02\x02\u079F\u07A1\x03\x02" +
        "\x02\x02\u07A0\u07A2\x07`\x02\x02\u07A1\u07A0\x03\x02\x02\x02\u07A1\u07A2" +
        "\x03\x02\x02\x02\u07A2\u07A4\x03\x02\x02\x02\u07A3\u07A5\x05\x98M\x02" +
        "\u07A4\u07A3\x03\x02\x02\x02\u07A5\u07A6\x03\x02\x02\x02\u07A6\u07A4\x03" +
        "\x02\x02\x02\u07A6\u07A7\x03\x02\x02\x02\u07A7\x97\x03\x02\x02\x02\u07A8" +
        "\u07AB\x05\u0470\u0239\x02\u07A9\u07AA\x07\u0160\x02\x02\u07AA\u07AC\x05" +
        "\u049C\u024F";
    Cobol85Parser._serializedATNSegment5 = "\x02\u07AB\u07A9\x03\x02\x02\x02\u07AB\u07AC\x03\x02\x02\x02\u07AC\x99" +
        "\x03\x02\x02\x02\u07AD\u07AE\x07O\x02\x02\u07AE\u07B0\x07c\x02\x02\u07AF" +
        "\u07B1\x07\xD6\x02\x02\u07B0\u07AF\x03\x02\x02\x02\u07B0\u07B1\x03\x02" +
        "\x02\x02\u07B1\u07B2\x03\x02\x02\x02\u07B2\u07B3\x05\u0470\u0239\x02\u07B3" +
        "\x9B\x03\x02\x02\x02\u07B4\u07B5\x07o\x02\x02\u07B5\u07B6\x07\x93\x02" +
        "\x02\u07B6\u07BA\x07\u0218\x02\x02\u07B7\u07B9\x05\x9EP\x02\u07B8\u07B7" +
        "\x03\x02\x02\x02\u07B9\u07BC\x03\x02\x02\x02\u07BA\u07B8\x03\x02\x02\x02" +
        "\u07BA\u07BB\x03\x02\x02\x02\u07BB\x9D\x03\x02\x02\x02\u07BC\u07BA\x03" +
        "\x02\x02\x02\u07BD\u07C7\x05\xA0Q\x02\u07BE\u07C7\x05\xD2j\x02\u07BF\u07C7" +
        "\x05\xD6l\x02\u07C0\u07C7\x05\xD8m\x02\u07C1\u07C7\x05\xDAn\x02\u07C2" +
        "\u07C7\x05\u0100\x81\x02\u07C3\u07C7\x05\u0102\x82\x02\u07C4\u07C7\x05" +
        "\u0142\xA2\x02\u07C5\u07C7\x05\u018E\xC8\x02\u07C6\u07BD\x03\x02\x02\x02" +
        "\u07C6\u07BE\x03\x02\x02\x02\u07C6\u07BF\x03\x02\x02\x02\u07C6\u07C0\x03" +
        "\x02\x02\x02\u07C6\u07C1\x03\x02\x02\x02\u07C6\u07C2\x03\x02\x02\x02\u07C6" +
        "\u07C3\x03\x02\x02\x02\u07C6\u07C4\x03\x02\x02\x02\u07C6\u07C5\x03\x02" +
        "\x02\x02\u07C7\x9F\x03\x02\x02\x02\u07C8\u07C9\x07\xD0\x02\x02\u07C9\u07CA" +
        "\x07\u01A5\x02\x02\u07CA\u07CE\x07\u0218\x02\x02\u07CB\u07CD\x05\xA2R" +
        "\x02\u07CC\u07CB\x03\x02\x02\x02\u07CD\u07D0\x03\x02\x02\x02\u07CE\u07CC" +
        "\x03\x02\x02\x02\u07CE\u07CF\x03\x02\x02\x02\u07CF\xA1\x03\x02\x02\x02" +
        "\u07D0\u07CE\x03\x02\x02\x02\u07D1\u07D2\t\x10\x02\x02\u07D2\u07D9\x05" +
        "\u0470\u0239\x02\u07D3\u07D5\x07\u0218\x02\x02\u07D4\u07D3\x03\x02\x02" +
        "\x02\u07D4\u07D5\x03\x02\x02\x02\u07D5\u07D6\x03\x02\x02\x02\u07D6\u07D8" +
        "\x05\xA4S\x02\u07D7\u07D4\x03\x02\x02\x02\u07D8\u07DB\x03\x02\x02\x02" +
        "\u07D9\u07D7\x03\x02\x02\x02\u07D9\u07DA\x03\x02\x02\x02\u07DA\u07DC\x03" +
        "\x02\x02\x02\u07DB\u07D9\x03\x02\x02\x02\u07DC\u07E0\x07\u0218\x02\x02" +
        "\u07DD\u07DF\x05\u01B4\xDB\x02\u07DE\u07DD\x03\x02\x02\x02\u07DF\u07E2" +
        "\x03\x02\x02\x02\u07E0\u07DE\x03\x02\x02\x02\u07E0\u07E1\x03\x02\x02\x02" +
        "\u07E1\xA3\x03\x02\x02\x02\u07E2\u07E0\x03\x02\x02\x02\u07E3\u07EF\x05" +
        "\xA6T\x02\u07E4\u07EF\x05\xA8U\x02\u07E5\u07EF\x05\xAAV\x02\u07E6\u07EF" +
        "\x05\xAEX\x02\u07E7\u07EF\x05\xB8]\x02\u07E8\u07EF\x05\xBA^\x02\u07E9" +
        "\u07EF\x05\xBE`\x02\u07EA\u07EF\x05\xC0a\x02\u07EB\u07EF\x05\xCEh\x02" +
        "\u07EC\u07EF\x05\xD0i\x02\u07ED\u07EF\x05\xCAf\x02\u07EE\u07E3\x03\x02" +
        "\x02\x02\u07EE\u07E4\x03\x02\x02\x02\u07EE\u07E5\x03\x02\x02\x02\u07EE" +
        "\u07E6\x03\x02\x02\x02\u07EE\u07E7\x03\x02\x02\x02\u07EE\u07E8\x03\x02" +
        "\x02\x02\u07EE\u07E9\x03\x02\x02\x02\u07EE\u07EA\x03\x02\x02\x02\u07EE" +
        "\u07EB\x03\x02\x02\x02\u07EE\u07EC\x03\x02\x02\x02\u07EE\u07ED\x03\x02" +
        "\x02\x02\u07EF\xA5\x03\x02\x02\x02\u07F0\u07F2\x07\u0100\x02\x02\u07F1" +
        "\u07F0\x03\x02\x02\x02\u07F1\u07F2\x03\x02\x02\x02\u07F2\u07F3\x03\x02" +
        "\x02\x02\u07F3\u07F4\x07\xCD\x02\x02\u07F4\xA7\x03\x02\x02\x02\u07F5\u07F7" +
        "\x07\u0100\x02\x02\u07F6\u07F5\x03\x02\x02\x02\u07F6\u07F7\x03\x02\x02" +
        "\x02\u07F7\u07F8\x03\x02\x02\x02\u07F8\u07F9\x07\xE1\x02\x02\u07F9\xA9" +
        "\x03\x02\x02\x02\u07FA\u07FC\x070\x02\x02\u07FB\u07FD\x07`\x02\x02\u07FC" +
        "\u07FB\x03\x02\x02\x02\u07FC\u07FD\x03\x02\x02\x02\u07FD\u07FE\x03\x02" +
        "\x02\x02\u07FE\u0800\x05\u049C\u024F\x02\u07FF\u0801\x05\xACW\x02\u0800" +
        "\u07FF\x03\x02\x02\x02\u0800\u0801\x03\x02\x02\x02\u0801\u0803\x03\x02" +
        "\x02\x02\u0802\u0804\t\x11\x02\x02\u0803\u0802\x03\x02\x02\x02\u0803\u0804" +
        "\x03\x02\x02\x02\u0804\xAB\x03\x02\x02\x02\u0805\u0806\x07\u01EB\x02\x02" +
        "\u0806\u0807\x05\u049C\u024F\x02\u0807\xAD\x03\x02\x02\x02\u0808\u080C" +
        "\x07\u017B\x02\x02\u0809\u080D\x05\xB0Y\x02\u080A\u080D\x05\xB2Z\x02\u080B" +
        "\u080D\x05\xB4[\x02\u080C\u0809\x03\x02\x02\x02\u080C\u080A\x03\x02\x02" +
        "\x02\u080C\u080B\x03\x02\x02\x02\u080D\xAF\x03\x02\x02\x02\u080E\u0810" +
        "\x07`\x02\x02\u080F\u080E\x03\x02\x02\x02\u080F\u0810\x03\x02\x02\x02" +
        "\u0810\u0811\x03\x02\x02\x02\u0811\u0813\x05\u049C\u024F\x02\u0812\u0814" +
        "\x07A\x02\x02\u0813\u0812\x03\x02\x02\x02\u0813\u0814\x03\x02\x02\x02" +
        "\u0814\xB1\x03\x02\x02\x02\u0815\u0817\x07\u0100\x02\x02\u0816\u0815\x03" +
        "\x02\x02\x02\u0816\u0817\x03\x02\x02\x02\u0817\u0818\x03\x02\x02\x02\u0818" +
        "\u081A\x07\u01FF\x02\x02\u0819\u081B\x07\xF1\x02\x02\u081A\u0819\x03\x02" +
        "\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\u081D\x03\x02\x02\x02\u081C" +
        "\u081E\x07\u01B9\x02\x02\u081D\u081C\x03\x02\x02\x02\u081D\u081E\x03\x02" +
        "\x02\x02\u081E\u0829\x03\x02\x02\x02\u081F\u0821\x07\xD9\x02\x02\u0820" +
        "\u081F\x03\x02\x02\x02\u0820\u0821\x03\x02\x02\x02\u0821\u0822\x03\x02" +
        "\x02\x02\u0822\u0824\x05\u049C\u024F\x02\u0823\u0825\x05\xB6\\\x02\u0824" +
        "\u0823\x03\x02\x02\x02\u0824\u0825\x03\x02\x02\x02\u0825\u0827\x03\x02" +
        "\x02\x02\u0826\u0828\x07A\x02\x02\u0827\u0826\x03\x02\x02\x02\u0827\u0828" +
        "\x03\x02\x02\x02\u0828\u082A\x03\x02\x02\x02\u0829\u0820\x03\x02\x02\x02" +
        "\u0829\u082A\x03\x02\x02\x02\u082A\u0830\x03\x02\x02\x02\u082B\u082D\x07" +
        "\x88\x02\x02\u082C\u082E\x07\u0148\x02\x02\u082D\u082C\x03\x02\x02\x02" +
        "\u082D\u082E\x03\x02\x02\x02\u082E\u082F\x03\x02\x02\x02\u082F\u0831\x05" +
        "\u0444\u0223\x02\u0830\u082B\x03\x02\x02\x02\u0830\u0831\x03\x02\x02\x02" +
        "\u0831\xB3\x03\x02\x02\x02\u0832\u0834\x07`\x02\x02\u0833\u0832\x03\x02" +
        "\x02\x02\u0833\u0834\x03\x02\x02\x02\u0834\u0835\x03\x02\x02\x02\u0835" +
        "\u0836\x05\u049C\u024F\x02\u0836\u0838\x05\xB6\\\x02\u0837\u0839\x07A" +
        "\x02\x02\u0838\u0837\x03\x02\x02\x02\u0838\u0839\x03\x02\x02\x02\u0839" +
        "\xB5\x03\x02\x02\x02\u083A\u083B\x07\u01EB\x02\x02\u083B\u083C\x05\u049C" +
        "\u024F\x02\u083C\xB7\x03\x02\x02\x02\u083D\u0846\x07\u0107\x02\x02\u083E" +
        "\u0840\x07\u017B\x02\x02\u083F\u0841\x07\u0100\x02\x02\u0840\u083F\x03" +
        "\x02\x02\x02\u0840\u0841\x03\x02\x02\x02\u0841\u0847\x03\x02\x02\x02\u0842" +
        "\u0844\x07\u017D\x02\x02\u0843\u0845\x07\x17\x02\x02\u0844\u0843\x03\x02" +
        "\x02\x02\u0844\u0845\x03\x02\x02\x02\u0845\u0847\x03\x02\x02\x02\u0846" +
        "\u083E\x03\x02\x02\x02\u0846\u0842\x03\x02\x02\x02\u0847\u084F\x03\x02" +
        "\x02\x02\u0848\u0850\x07\u0147\x02\x02\u0849\u0850\x07\u01C7\x02\x02\u084A" +
        "\u084C\x05\u046A\u0236\x02\u084B\u084A\x03\x02\x02\x02\u084C\u084D\x03" +
        "\x02\x02\x02\u084D\u084B\x03\x02\x02\x02\u084D\u084E\x03\x02\x02\x02\u084E" +
        "\u0850\x03\x02\x02\x02\u084F\u0848\x03\x02\x02\x02\u084F\u0849\x03\x02" +
        "\x02\x02\u084F\u084B\x03\x02\x02\x02\u0850\xB9\x03\x02\x02\x02\u0851\u0852" +
        "\x07\u01FD\x02\x02\u0852\u0854\x07\u0145\x02\x02\u0853\u0855\x05\xBC_" +
        "\x02\u0854\u0853\x03\x02\x02\x02\u0855\u0856\x03\x02\x02\x02\u0856\u0854" +
        "\x03\x02\x02\x02\u0856\u0857\x03\x02\x02\x02\u0857\xBB\x03\x02\x02\x02" +
        "\u0858\u085A\x05\u048E\u0248\x02\u0859\u085B\x07\u0100\x02\x02\u085A\u0859" +
        "\x03\x02\x02\x02\u085A\u085B\x03\x02\x02\x02\u085B\u085E\x03\x02\x02\x02" +
        "\u085C\u085F\x05\u0444\u0223\x02\u085D\u085F\x05\u0496\u024C\x02\u085E" +
        "\u085C\x03\x02\x02\x02\u085E\u085D\x03\x02\x02\x02\u085F\xBD\x03\x02\x02" +
        "\x02\u0860\u0869\x07o\x02\x02\u0861\u0863\x07\u017B\x02\x02\u0862\u0864" +
        "\x07\u0100\x02\x02\u0863\u0862\x03\x02\x02\x02\u0863\u0864\x03\x02\x02" +
        "\x02\u0864\u086A\x03\x02\x02\x02\u0865\u0867\x07\u017D\x02\x02\u0866\u0868" +
        "\x07\x17\x02\x02\u0867\u0866\x03\x02\x02\x02\u0867\u0868\x03\x02\x02\x02" +
        "\u0868\u086A\x03\x02\x02\x02\u0869\u0861\x03\x02\x02\x02\u0869\u0865\x03" +
        "\x02\x02\x02\u086A\u086C\x03\x02\x02\x02\u086B\u086D\x05\u046A\u0236\x02" +
        "\u086C\u086B\x03\x02\x02\x02\u086D\u086E\x03\x02\x02\x02\u086E\u086C\x03" +
        "\x02\x02\x02\u086E\u086F\x03\x02\x02\x02\u086F\xBF\x03\x02\x02\x02\u0870" +
        "\u0872\x07\u0117\x02\x02\u0871\u0873\x07\u0100\x02\x02\u0872\u0871\x03" +
        "\x02\x02\x02\u0872\u0873\x03\x02\x02\x02\u0873\u0876\x03\x02\x02\x02\u0874" +
        "\u0877\x05\u046A\u0236\x02\u0875\u0877\x05\u049C\u024F\x02\u0876\u0874" +
        "\x03\x02\x02\x02\u0876\u0875\x03\x02\x02\x02\u0877\u0879\x03\x02\x02\x02" +
        "\u0878\u087A\x07\u011A\x02\x02\u0879\u0878\x03\x02\x02\x02\u0879\u087A" +
        "\x03\x02\x02\x02\u087A\u087E\x03\x02\x02\x02\u087B\u087D\x05\xC2b\x02" +
        "\u087C\u087B\x03\x02\x02\x02\u087D\u0880\x03\x02\x02\x02\u087E\u087C\x03" +
        "\x02\x02\x02\u087E\u087F\x03\x02\x02\x02\u087F\xC1\x03\x02\x02\x02\u0880" +
        "\u087E\x03\x02\x02\x02\u0881\u0885\x05\xC4c\x02\u0882\u0885\x05\xC6d\x02" +
        "\u0883\u0885\x05\xC8e\x02\u0884\u0881\x03\x02\x02\x02\u0884\u0882\x03" +
        "\x02\x02\x02\u0884\u0883\x03\x02\x02\x02\u0885\xC3\x03\x02\x02\x02\u0886" +
        "\u0888\x07\u0204\x02\x02\u0887\u0886\x03\x02\x02\x02\u0887\u0888\x03\x02" +
        "\x02\x02\u0888\u0889\x03\x02\x02\x02\u0889\u088B\x07\xD5\x02\x02\u088A" +
        "\u088C\x07 \x02\x02\u088B\u088A\x03\x02\x02\x02\u088B\u088C\x03\x02\x02" +
        "\x02\u088C\u088F\x03\x02\x02\x02\u088D\u0890\x05\u046A\u0236\x02\u088E" +
        "\u0890\x05\u049C\u024F\x02\u088F\u088D\x03\x02\x02\x02\u088F\u088E\x03" +
        "\x02\x02\x02\u0890\xC5\x03\x02\x02\x02\u0891\u0893\x07\u011A\x02\x02\u0892" +
        "\u0891\x03\x02\x02\x02\u0892\u0893\x03\x02\x02\x02\u0893\u0895\x03\x02" +
        "\x02\x02\u0894\u0896\x07 \x02\x02\u0895\u0894\x03\x02\x02\x02\u0895\u0896" +
        "\x03\x02\x02\x02\u0896\u0897\x03\x02\x02\x02\u0897\u089A\x07\u01EE\x02" +
        "\x02\u0898\u089B\x05\u046A\u0236\x02\u0899\u089B\x05\u049C\u024F\x02\u089A" +
        "\u0898\x03\x02\x02\x02\u089A\u0899\x03\x02\x02\x02\u089B\xC7\x03\x02\x02" +
        "\x02\u089C\u089E\x07\u011A\x02\x02\u089D\u089C\x03\x02\x02\x02\u089D\u089E" +
        "\x03\x02\x02\x02\u089E\u08A0\x03\x02\x02\x02\u089F\u08A1\x07 \x02\x02" +
        "\u08A0\u089F\x03\x02\x02\x02\u08A0\u08A1\x03\x02\x02\x02\u08A1\u08A2\x03" +
        "\x02\x02\x02\u08A2\u08A5\x072\x02\x02\u08A3\u08A6\x05\u046A\u0236\x02" +
        "\u08A4\u08A6\x05\u049C\u024F\x02\u08A5\u08A3\x03\x02\x02\x02\u08A5\u08A4" +
        "\x03\x02\x02\x02\u08A6\xC9\x03\x02\x02\x02\u08A7\u08A9\x07\u017C\x02\x02" +
        "\u08A8\u08AA\x07\u012B\x02\x02\u08A9\u08A8\x03\x02\x02\x02\u08A9\u08AA" +
        "\x03\x02\x02\x02\u08AA\u08AC\x03\x02\x02\x02\u08AB\u08AD\x07\u0100\x02" +
        "\x02\u08AC\u08AB\x03\x02\x02\x02\u08AC\u08AD\x03\x02\x02\x02\u08AD\u08AE" +
        "\x03\x02\x02\x02\u08AE\u08AF\x05\xCCg\x02\u08AF\xCB\x03\x02\x02\x02\u08B0" +
        "\u08B1\x05\u0494\u024B\x02\u08B1\xCD\x03\x02\x02\x02\u08B2\u08B4\x07I" +
        "\x02\x02\u08B3\u08B5\x07\u0100\x02\x02\u08B4\u08B3\x03\x02\x02\x02\u08B4" +
        "\u08B5\x03\x02\x02\x02\u08B5\u08B6\x03\x02\x02\x02\u08B6\u08B7\x05\u045C" +
        "\u022F\x02\u08B7\xCF\x03\x02\x02\x02\u08B8\u08BA\x07\u018D\x02\x02\u08B9" +
        "\u08BB\x07\u0100\x02\x02\u08BA\u08B9\x03\x02\x02\x02\u08BA\u08BB\x03\x02" +
        "\x02\x02\u08BB\u08C1\x03\x02\x02\x02\u08BC\u08BE\x07\u018F\x02\x02\u08BD" +
        "\u08BF\x07\x17\x02\x02\u08BE\u08BD\x03\x02\x02\x02\u08BE\u08BF\x03\x02" +
        "\x02\x02\u08BF\u08C1\x03\x02\x02\x02\u08C0\u08B8\x03\x02\x02\x02\u08C0" +
        "\u08BC\x03\x02\x02\x02\u08C1\u08C3\x03\x02\x02\x02\u08C2\u08C4\x05\u0486" +
        "\u0244\x02\u08C3\u08C2\x03\x02\x02\x02\u08C4\u08C5\x03\x02\x02\x02\u08C5" +
        "\u08C3\x03\x02\x02\x02\u08C5\u08C6\x03\x02\x02\x02\u08C6\xD1\x03\x02\x02" +
        "\x02\u08C7\u08C8\x07p\x02\x02\u08C8\u08C9\x07\u01A5\x02\x02\u08C9\u08CD" +
        "\x07\u0218\x02\x02\u08CA\u08CC\x05\xD4k\x02\u08CB\u08CA\x03\x02\x02\x02" +
        "\u08CC\u08CF\x03\x02\x02\x02\u08CD\u08CB\x03\x02\x02\x02\u08CD\u08CE\x03" +
        "\x02\x02\x02\u08CE\xD3\x03\x02\x02\x02\u08CF\u08CD\x03\x02\x02\x02\u08D0" +
        "\u08D1\x05\u049C\u024F\x02\u08D1\u08D2\x05\u0496\u024C\x02\u08D2\u08D3" +
        "\x07\xFF\x02\x02\u08D3\u08D4\x05\u0496\u024C\x02\u08D4\xD5\x03\x02\x02" +
        "\x02\u08D5\u08D6\x07\u0206\x02\x02\u08D6\u08D7\x07\u01A5\x02\x02\u08D7" +
        "\u08DB\x07\u0218\x02\x02\u08D8\u08DA\x05\u01B4\xDB\x02\u08D9\u08D8\x03" +
        "\x02\x02\x02\u08DA\u08DD\x03\x02\x02\x02\u08DB\u08D9\x03\x02\x02\x02\u08DB" +
        "\u08DC\x03\x02\x02\x02\u08DC\xD7\x03\x02\x02\x02\u08DD\u08DB\x03\x02\x02" +
        "\x02\u08DE\u08DF\x07\u011C\x02\x02\u08DF\u08E0\x07\u01A5\x02\x02\u08E0" +
        "\u08E4\x07\u0218\x02\x02\u08E1\u08E3\x05\u01B4\xDB\x02\u08E2\u08E1\x03" +
        "\x02\x02\x02\u08E3\u08E6\x03\x02\x02\x02\u08E4\u08E2\x03\x02\x02\x02\u08E4" +
        "\u08E5\x03\x02\x02\x02\u08E5\xD9\x03\x02\x02\x02\u08E6\u08E4\x03\x02\x02" +
        "\x02\u08E7\u08E8\x07Q\x02\x02\u08E8\u08E9\x07\u01A5\x02\x02\u08E9\u08EE" +
        "\x07\u0218\x02\x02\u08EA\u08ED\x05\xDCo\x02\u08EB\u08ED\x05\u01B4\xDB" +
        "\x02\u08EC\u08EA\x03\x02\x02\x02\u08EC\u08EB\x03\x02\x02\x02\u08ED\u08F0" +
        "\x03\x02\x02\x02\u08EE\u08EC\x03\x02\x02\x02\u08EE\u08EF\x03\x02\x02\x02" +
        "\u08EF\xDB\x03\x02\x02\x02\u08F0\u08EE\x03\x02\x02\x02\u08F1\u08F5\x05" +
        "\xDEp\x02\u08F2\u08F5\x05\xE0q\x02\u08F3\u08F5\x05\xE2r\x02\u08F4\u08F1" +
        "\x03\x02\x02\x02\u08F4\u08F2\x03\x02\x02\x02\u08F4\u08F3\x03\x02\x02\x02" +
        "\u08F5\xDD\x03\x02\x02\x02\u08F6\u08F7\x07:\x02\x02\u08F7\u08F9\x05\u0462" +
        "\u0232\x02\u08F8\u08FA\x07\xD6\x02\x02\u08F9\u08F8\x03\x02\x02\x02\u08F9" +
        "\u08FA\x03\x02\x02\x02\u08FA\u08FC\x03\x02\x02\x02\u08FB\u08FD\x07\xF5" +
        "\x02\x02\u08FC\u08FB\x03\x02\x02\x02\u08FC\u08FD\x03\x02\x02\x02\u08FD" +
        "\u08FE\x03\x02\x02\x02\u08FE\u090D\x07\xF8\x02\x02\u08FF\u0909\x05\xF6" +
        "|\x02\u0900\u0909\x05\xFC\x7F\x02\u0901\u0909\x05\xEEx\x02\u0902\u0909" +
        "\x05\xF0y\x02\u0903\u0909\x05\xF8}\x02\u0904\u0909\x05\xFE\x80\x02\u0905" +
        "\u0909\x05\xE8u\x02\u0906\u0909\x05\xF2z\x02\u0907\u0909\x05\xECw\x02" +
        "\u0908\u08FF\x03\x02\x02\x02\u0908\u0900\x03\x02\x02\x02\u0908\u0901\x03" +
        "\x02\x02\x02\u0908\u0902\x03\x02\x02\x02\u0908\u0903\x03\x02\x02\x02\u0908" +
        "\u0904\x03\x02\x02\x02\u0908\u0905\x03\x02\x02\x02\u0908\u0906\x03\x02" +
        "\x02\x02\u0908\u0907\x03\x02\x02\x02\u0909\u090C\x03\x02\x02\x02\u090A" +
        "\u090C\x05\u046C\u0237\x02\u090B\u0908\x03\x02\x02\x02\u090B\u090A\x03" +
        "\x02\x02\x02\u090C\u090F\x03\x02\x02\x02\u090D\u090B\x03\x02\x02\x02\u090D" +
        "\u090E\x03\x02\x02\x02\u090E\u0910\x03\x02\x02\x02\u090F\u090D\x03\x02" +
        "\x02\x02\u0910\u0911\x07\u0218\x02\x02\u0911\xDF\x03\x02\x02\x02\u0912" +
        "\u0913\x07:\x02\x02\u0913\u0915\x05\u0462\u0232\x02\u0914\u0916\x07\xD6" +
        "\x02\x02\u0915\u0914\x03\x02\x02\x02\u0915\u0916\x03\x02\x02\x02\u0916" +
        "\u0917\x03\x02\x02\x02\u0917\u0920\x07\u0150\x02\x02\u0918\u091F\x05\xE4" +
        "s\x02\u0919\u091F\x05\xFE\x80\x02\u091A\u091F\x05\xF2z\x02\u091B\u091F" +
        "\x05\xE6t\x02\u091C\u091F\x05\xEAv\x02\u091D\u091F\x05\xF4{\x02\u091E" +
        "\u0918\x03\x02\x02\x02\u091E\u0919\x03\x02\x02\x02\u091E\u091A\x03\x02" +
        "\x02\x02\u091E\u091B\x03\x02\x02\x02\u091E\u091C\x03\x02\x02\x02\u091E" +
        "\u091D\x03\x02\x02\x02\u091F\u0922\x03\x02\x02\x02\u0920\u091E\x03\x02" +
        "\x02\x02\u0920\u0921\x03\x02\x02\x02\u0921\u0923\x03\x02\x02\x02\u0922" +
        "\u0920\x03\x02\x02\x02\u0923\u0924\x07\u0218\x02\x02\u0924\xE1\x03\x02" +
        "\x02\x02\u0925\u0926\x07:\x02\x02\u0926\u0928\x05\u0462\u0232\x02\u0927" +
        "\u0929\x07\xD6\x02\x02\u0928\u0927\x03\x02\x02\x02\u0928\u0929\x03\x02" +
        "\x02\x02\u0929\u092A\x03\x02\x02\x02\u092A\u092B\x07\xF5\x02\x02\u092B" +
        "\u0937\x07\xEA\x02\x02\u092C\u0933\x05\xEEx\x02\u092D\u0933\x05\xF0y\x02" +
        "\u092E\u0933\x05\xFA~\x02\u092F\u0933\x05\xFE\x80\x02\u0930\u0933\x05" +
        "\xE8u\x02\u0931\u0933\x05\xF2z\x02\u0932\u092C\x03\x02\x02\x02\u0932\u092D" +
        "\x03\x02\x02\x02\u0932\u092E\x03\x02\x02\x02\u0932\u092F\x03\x02\x02\x02" +
        "\u0932\u0930\x03\x02\x02\x02\u0932\u0931\x03\x02\x02\x02\u0933\u0936\x03" +
        "\x02\x02\x02\u0934\u0936\x05\u046C\u0237\x02\u0935\u0932\x03\x02\x02\x02" +
        "\u0935\u0934\x03\x02\x02\x02\u0936\u0939\x03\x02\x02\x02\u0937\u0935\x03" +
        "\x02\x02\x02\u0937\u0938\x03\x02\x02\x02\u0938\u093A\x03\x02\x02\x02\u0939" +
        "\u0937\x03\x02\x02\x02\u093A\u093B\x07\u0218\x02\x02\u093B\xE3\x03\x02" +
        "\x02\x02\u093C\u093D\x07\x8A\x02\x02\u093D\u093F\x07k\x02\x02\u093E\u0940" +
        "\x07\u0100\x02\x02\u093F\u093E\x03\x02\x02\x02\u093F\u0940\x03\x02\x02" +
        "\x02\u0940\u0941\x03\x02\x02\x02\u0941\u0942\x05\u046C\u0237\x02\u0942" +
        "\xE5\x03\x02\x02\x02\u0943\u0944\x07\x8A\x02\x02\u0944\u0945\x07\u01D8" +
        "\x02\x02\u0945\u0946\x07\u0143\x02\x02\u0946\u0947\x05\u049C\u024F\x02" +
        "\u0947\u094F\x07\u01E9\x02\x02\u0948\u0949\x07\xF3\x02\x02\u0949\u094B" +
        "\x073\x02\x02\u094A\u094C\x05\u0474\u023B\x02\u094B\u094A\x03\x02\x02" +
        "\x02\u094C\u094D\x03\x02\x02\x02\u094D\u094B\x03\x02\x02\x02\u094D\u094E" +
        "\x03\x02\x02\x02\u094E\u0950\x03\x02\x02\x02\u094F\u0948\x03\x02\x02\x02" +
        "\u094F\u0950\x03\x02\x02\x02\u0950\xE7\x03\x02\x02\x02\u0951\u0952\x07" +
        "\xA0\x02\x02\u0952\u0954\x07\u0105\x02\x02\u0953\u0955\x07\u0100\x02\x02" +
        "\u0954\u0953\x03\x02\x02\x02\u0954\u0955\x03\x02\x02\x02\u0955\u0956\x03" +
        "\x02\x02\x02\u0956\u0957\x05\u046C\u0237\x02\u0957\xE9\x03\x02\x02\x02" +
        "\u0958\u0959\x07\xBE\x02\x02\u0959\u095B\x07\u0105\x02\x02\u095A\u095C" +
        "\x07\u0100\x02\x02\u095B\u095A\x03\x02\x02\x02\u095B\u095C\x03\x02\x02" +
        "\x02\u095C\u095D\x03\x02\x02\x02\u095D\u095E\x05\u046C\u0237\x02\u095E" +
        "\xEB\x03\x02\x02\x02\u095F\u0961\x07\u0129\x02\x02\u0960\u095F\x03\x02" +
        "\x02\x02\u0960\u0961\x03\x02\x02\x02\u0961\u0962\x03\x02\x02\x02\u0962" +
        "\u0964\x07k\x02\x02\u0963\u0965\x07\u0100\x02\x02\u0964\u0963\x03\x02" +
        "\x02\x02\u0964\u0965\x03\x02\x02\x02\u0965\u0966\x03\x02\x02\x02\u0966" +
        "\u0967\x05\u046C\u0237\x02\u0967\xED\x03\x02\x02\x02\u0968\u0969\x07\u0129" +
        "\x02\x02\u0969\u096B\x07q\x02\x02\u096A\u096C\x07\u0100\x02\x02\u096B" +
        "\u096A\x03\x02\x02\x02\u096B\u096C\x03\x02\x02\x02\u096C\u096D\x03\x02" +
        "\x02\x02\u096D\u096E\x05\u046C\u0237\x02\u096E\xEF\x03\x02\x02\x02\u096F" +
        "\u0970\x07\u0129\x02\x02\u0970\u0972\x07\u01E7\x02\x02\u0971\u0973\x07" +
        "\u0100\x02\x02\u0972\u0971\x03\x02\x02\x02\u0972\u0973\x03\x02\x02\x02" +
        "\u0973\u0974\x03\x02\x02\x02\u0974\u0975\x05\u046C\u0237\x02\u0975\xF1" +
        "\x03\x02\x02\x02\u0976\u0977\x07\u01CB\x02\x02\u0977\u0979\x07\u0105\x02" +
        "\x02\u0978\u097A\x07\u0100\x02\x02\u0979\u0978\x03\x02\x02\x02\u0979\u097A" +
        "\x03\x02\x02\x02\u097A\u097B\x03\x02\x02\x02\u097B\u097C\x05\u046C\u0237" +
        "\x02\u097C\xF3\x03\x02\x02\x02\u097D\u097F\x07\u01D5\x02\x02\u097E\u097D" +
        "\x03\x02\x02\x02\u097E\u097F\x03\x02\x02\x02\u097F\u0980\x03\x02\x02\x02" +
        "\u0980\u0982\x07\x8A\x02\x02\u0981\u0983\x07\u0100\x02\x02\u0982\u0981" +
        "\x03\x02\x02\x02\u0982\u0983\x03\x02\x02\x02\u0983\u0984\x03\x02\x02\x02" +
        "\u0984\u0985\x05\u046C\u0237\x02\u0985\xF5\x03\x02\x02\x02\u0986\u0988" +
        "\x07\u01D5\x02\x02\u0987\u0986\x03\x02\x02\x02\u0987\u0988\x03\x02\x02" +
        "\x02\u0988\u0989\x03\x02\x02\x02\u0989\u098B\x07\u0170\x02\x02\u098A\u098C" +
        "\x07\u0100\x02\x02\u098B\u098A\x03\x02\x02\x02\u098B\u098C\x03\x02\x02" +
        "\x02\u098C\u098D\x03\x02\x02\x02\u098D\u098E\x05\u046C\u0237\x02\u098E" +
        "\xF7\x03\x02\x02\x02\u098F\u0991\x07\u01D5\x02\x02\u0990\u098F\x03\x02" +
        "\x02\x02\u0990\u0991\x03\x02\x02\x02\u0991\u0992\x03\x02\x02\x02\u0992" +
        "\u0994\x07\u01C2\x02\x02\u0993\u0995\x07\u0100\x02\x02\u0994\u0993\x03" +
        "\x02\x02\x02\u0994\u0995\x03\x02\x02\x02\u0995\u0996\x03\x02\x02\x02\u0996" +
        "\u0997\x05\u046C\u0237\x02\u0997\xF9\x03\x02\x02\x02\u0998\u099A\x07\u01D5" +
        "\x02\x02\u0999\u0998\x03\x02\x02\x02\u0999\u099A\x03\x02\x02\x02\u099A" +
        "\u099B\x03\x02\x02\x02\u099B\u099D\x07\u01DD\x02\x02\u099C\u099E\x07\u0100" +
        "\x02\x02\u099D\u099C\x03\x02\x02\x02\u099D\u099E\x03\x02\x02\x02\u099E" +
        "\u099F\x03\x02\x02\x02\u099F\u09A0\x05\u046C\u0237\x02\u09A0\xFB\x03\x02" +
        "\x02\x02\u09A1\u09A3\x07\u01D5\x02\x02\u09A2\u09A1\x03\x02\x02\x02\u09A2" +
        "\u09A3\x03\x02\x02\x02\u09A3\u09A4\x03\x02\x02\x02\u09A4\u09A6\t\x12\x02" +
        "\x02\u09A5\u09A7\x07\u0100\x02\x02\u09A6\u09A5\x03\x02\x02\x02\u09A6\u09A7" +
        "\x03\x02\x02\x02\u09A7\u09A8\x03\x02\x02\x02\u09A8\u09A9\x05\u046C\u0237" +
        "\x02\u09A9\xFD\x03\x02\x02\x02\u09AA\u09AB\x07\u01E0\x02\x02\u09AB\u09AD" +
        "\x07\u010F\x02\x02\u09AC\u09AE\x07\u0100\x02\x02\u09AD\u09AC\x03\x02\x02" +
        "\x02\u09AD\u09AE\x03\x02\x02\x02\u09AE\u09AF\x03\x02\x02\x02\u09AF\u09B0" +
        "\x05\u046C\u0237\x02\u09B0\xFF\x03\x02\x02\x02\u09B1\u09B2\x07\u011F\x02" +
        "\x02\u09B2\u09B3\x07\u01A5\x02\x02\u09B3\u09B8\x07\u0218\x02\x02\u09B4" +
        "\u09B5\x07\u010B\x02\x02\u09B5\u09B6\x05\u047A\u023E\x02\u09B6\u09B7\x07" +
        "\u0218\x02\x02\u09B7\u09B9\x03\x02\x02\x02\u09B8\u09B4\x03\x02\x02\x02" +
        "\u09B8\u09B9\x03\x02\x02\x02\u09B9\u09BD\x03\x02\x02\x02\u09BA\u09BC\x05" +
        "\u01B4\xDB\x02\u09BB\u09BA\x03\x02\x02\x02\u09BC\u09BF\x03\x02\x02\x02" +
        "\u09BD\u09BB\x03\x02\x02\x02\u09BD\u09BE\x03\x02\x02\x02\u09BE\u0101\x03" +
        "\x02\x02\x02\u09BF\u09BD\x03\x02\x02\x02\u09C0\u09C1\x07\u01A2\x02\x02" +
        "\u09C1\u09C2\x07\u01A5\x02\x02\u09C2\u09C6\x07\u0218\x02\x02\u09C3\u09C5" +
        "\x05\u0104\x83\x02\u09C4\u09C3\x03\x02\x02\x02\u09C5\u09C8\x03\x02\x02" +
        "\x02\u09C6\u09C4\x03\x02\x02\x02\u09C6\u09C7\x03\x02\x02\x02\u09C7\u0103" +
        "\x03\x02\x02\x02\u09C8\u09C6\x03\x02\x02\x02\u09C9\u09CC\x07\u022D\x02" +
        "\x02\u09CA\u09CD\x07\xD2\x02\x02\u09CB\u09CD\x05\u048A\u0246\x02\u09CC" +
        "\u09CA\x03\x02\x02\x02\u09CC\u09CB\x03\x02\x02\x02\u09CC\u09CD\x03\x02" +
        "\x02\x02\u09CD\u09EE\x03\x02\x02\x02\u09CE\u09ED\x05\u0106\x84\x02\u09CF" +
        "\u09ED\x05\u0108\x85\x02\u09D0\u09ED\x05\u010A\x86\x02\u09D1\u09ED\x05" +
        "\u010C\x87\x02\u09D2\u09ED\x05\u010E\x88\x02\u09D3\u09ED\x05\u0110\x89" +
        "\x02\u09D4\u09ED\x05\u0112\x8A\x02\u09D5\u09ED\x05\u0114\x8B\x02\u09D6" +
        "\u09ED\x05\u0116\x8C\x02\u09D7\u09ED\x05\u0118\x8D\x02\u09D8\u09ED\x05" +
        "\u011A\x8E\x02\u09D9\u09ED\x05\u011C\x8F\x02\u09DA\u09ED\x05\u011E\x90" +
        "\x02\u09DB\u09ED\x05\u0120\x91\x02\u09DC\u09ED\x05\u0122\x92\x02\u09DD" +
        "\u09ED\x05\u0124\x93\x02\u09DE\u09E1\x05\u0126\x94\x02\u09DF\u09E1\x05" +
        "\u012A\x96\x02\u09E0\u09DE\x03\x02\x02\x02\u09E0\u09DF\x03\x02\x02\x02" +
        "\u09E1\u09ED\x03\x02\x02\x02\u09E2\u09ED\x05\u012C\x97\x02\u09E3\u09ED" +
        "\x05\u012E\x98\x02\u09E4\u09ED\x05\u0130\x99\x02\u09E5\u09ED\x05\u0132" +
        "\x9A\x02\u09E6\u09ED\x05\u0134\x9B\x02\u09E7\u09ED\x05\u0136\x9C\x02\u09E8" +
        "\u09ED\x05\u0138\x9D\x02\u09E9\u09ED\x05\u013A\x9E\x02\u09EA\u09ED\x05" +
        "\u013E\xA0\x02\u09EB\u09ED\x05\u0140\xA1\x02\u09EC\u09CE\x03\x02\x02\x02" +
        "\u09EC\u09CF\x03\x02\x02\x02\u09EC\u09D0\x03\x02\x02\x02\u09EC\u09D1\x03" +
        "\x02\x02\x02\u09EC\u09D2\x03\x02\x02\x02\u09EC\u09D3\x03\x02\x02\x02\u09EC" +
        "\u09D4\x03\x02\x02\x02\u09EC\u09D5\x03\x02\x02\x02\u09EC\u09D6\x03\x02" +
        "\x02\x02\u09EC\u09D7\x03\x02\x02\x02\u09EC\u09D8\x03\x02\x02\x02\u09EC" +
        "\u09D9\x03\x02\x02\x02\u09EC\u09DA\x03\x02\x02\x02\u09EC\u09DB\x03\x02" +
        "\x02\x02\u09EC\u09DC\x03\x02\x02\x02\u09EC\u09DD\x03\x02\x02\x02\u09EC" +
        "\u09E0\x03\x02\x02\x02\u09EC\u09E2\x03\x02\x02\x02\u09EC\u09E3\x03\x02" +
        "\x02\x02\u09EC\u09E4\x03\x02\x02\x02\u09EC\u09E5\x03\x02\x02\x02\u09EC" +
        "\u09E6\x03\x02\x02\x02\u09EC\u09E7\x03\x02\x02\x02\u09EC\u09E8\x03\x02" +
        "\x02\x02\u09EC\u09E9\x03\x02\x02\x02\u09EC\u09EA\x03\x02\x02\x02\u09EC" +
        "\u09EB\x03\x02\x02\x02\u09ED\u09F0\x03\x02\x02\x02\u09EE\u09EC\x03\x02" +
        "\x02\x02\u09EE\u09EF\x03\x02\x02\x02\u09EF\u09F1\x03\x02\x02\x02\u09F0" +
        "\u09EE\x03\x02\x02\x02\u09F1\u09F2\x07\u0218\x02\x02\u09F2\u0105\x03\x02" +
        "\x02\x02\u09F3\u09F4\x07.\x02\x02\u09F4\u09F5\t\x13\x02\x02\u09F5\u0107" +
        "\x03\x02\x02\x02\u09F6\u09F7\t\x14\x02\x02\u09F7\u0109\x03\x02\x02\x02" +
        "\u09F8\u09F9\x07/\x02\x02\u09F9\u010B\x03\x02\x02\x02\u09FA\u09FB\x07" +
        "\xBD\x02\x02\u09FB\u09FC\t\x15\x02\x02\u09FC\u010D\x03\x02\x02\x02\u09FD" +
        "\u09FE\t\x16\x02\x02\u09FE\u010F\x03\x02\x02\x02\u09FF\u0A00\t\x17\x02" +
        "\x02\u0A00\u0111\x03\x02\x02\x02\u0A01\u0A02\x07\u0193\x02\x02\u0A02\u0113" +
        "\x03\x02\x02\x02\u0A03\u0A04\x07\u01F4\x02\x02\u0A04\u0115\x03\x02\x02" +
        "\x02\u0A05\u0A07\x07\u01B9\x02\x02\u0A06\u0A08\x07\u0100\x02\x02\u0A07" +
        "\u0A06\x03\x02\x02\x02\u0A07\u0A08\x03\x02\x02\x02\u0A08\u0A0B\x03\x02" +
        "\x02\x02\u0A09\u0A0C\x05\u0434\u021B\x02\u0A0A\u0A0C\x05\u049C\u024F\x02" +
        "\u0A0B\u0A09\x03\x02\x02\x02\u0A0B\u0A0A\x03\x02\x02\x02\u0A0C\u0117\x03" +
        "\x02\x02\x02\u0A0D\u0A15\x07\u0119\x02\x02\u0A0E\u0A10\x07\u013D\x02\x02" +
        "\u0A0F\u0A0E\x03\x02\x02\x02\u0A0F\u0A10\x03\x02\x02\x02\u0A10\u0A12\x03" +
        "\x02\x02\x02\u0A11\u0A13\x07\u0100\x02\x02\u0A12\u0A11\x03\x02\x02\x02" +
        "\u0A12\u0A13\x03\x02\x02\x02\u0A13\u0A14\x03\x02\x02\x02\u0A14\u0A16\t" +
        "\x18\x02\x02\u0A15\u0A0F\x03\x02\x02\x02\u0A15\u0A16\x03\x02\x02\x02\u0A16" +
        "\u0A19\x03\x02\x02\x02\u0A17\u0A1A\x05\u0434\u021B\x02\u0A18\u0A1A\x05" +
        "\u049C\u024F\x02\u0A19\u0A17\x03\x02\x02\x02\u0A19\u0A18\x03\x02\x02\x02" +
        "\u0A1A\u0119\x03\x02\x02\x02\u0A1B\u0A23\t\x19\x02\x02\u0A1C\u0A1E\x07" +
        "\u013D\x02\x02\u0A1D\u0A1C\x03\x02\x02\x02\u0A1D\u0A1E\x03\x02\x02\x02" +
        "\u0A1E\u0A20\x03\x02\x02\x02\u0A1F\u0A21\x07\u0100\x02\x02\u0A20\u0A1F" +
        "\x03\x02\x02\x02\u0A20\u0A21\x03\x02\x02\x02\u0A21\u0A22\x03\x02\x02\x02" +
        "\u0A22\u0A24\t\x18\x02\x02\u0A23\u0A1D\x03\x02\x02\x02\u0A23\u0A24\x03" +
        "\x02\x02\x02\u0A24\u0A27\x03\x02\x02\x02\u0A25\u0A28\x05\u0434\u021B\x02" +
        "\u0A26\u0A28\x05\u049C\u024F\x02\u0A27\u0A25\x03\x02\x02\x02\u0A27\u0A26" +
        "\x03\x02\x02\x02\u0A28\u011B\x03\x02\x02\x02\u0A29\u0A2B\t\x1A\x02\x02" +
        "\u0A2A\u0A2C\x07\u0100\x02\x02\u0A2B\u0A2A\x03\x02\x02\x02\u0A2B\u0A2C" +
        "\x03\x02\x02\x02\u0A2C\u0A2F\x03\x02\x02\x02\u0A2D\u0A30\x05\u0434\u021B" +
        "\x02\u0A2E\u0A30\x05\u049C\u024F\x02\u0A2F\u0A2D\x03\x02\x02\x02\u0A2F" +
        "\u0A2E\x03\x02\x02\x02\u0A30\u011D\x03\x02\x02\x02\u0A31\u0A33\t\x1B\x02" +
        "\x02\u0A32\u0A34\x07\u0100\x02\x02\u0A33\u0A32\x03\x02\x02\x02\u0A33\u0A34" +
        "\x03\x02\x02\x02\u0A34\u0A37\x03\x02\x02\x02\u0A35\u0A38\x05\u0434\u021B" +
        "\x02\u0A36\u0A38\x05\u049C\u024F\x02\u0A37";
    Cobol85Parser._serializedATNSegment6 = "\u0A35\x03\x02\x02\x02\u0A37\u0A36\x03\x02\x02\x02\u0A38\u011F\x03\x02" +
        "\x02\x02\u0A39\u0A3B\x07c\x02\x02\u0A3A\u0A3C\x07\u0100\x02\x02\u0A3B" +
        "\u0A3A\x03\x02\x02\x02\u0A3B\u0A3C\x03\x02\x02\x02\u0A3C\u0A3D\x03\x02" +
        "\x02\x02\u0A3D\u0A3E\x05\u0434\u021B\x02\u0A3E\u0121\x03\x02\x02\x02\u0A3F" +
        "\u0A41\x07\u01FD\x02\x02\u0A40\u0A42\x07\u0100\x02\x02\u0A41\u0A40\x03" +
        "\x02\x02\x02\u0A41\u0A42\x03\x02\x02\x02\u0A42\u0A43\x03\x02\x02\x02\u0A43" +
        "\u0A44\x05\u0496\u024C\x02\u0A44\u0123\x03\x02\x02\x02\u0A45\u0A47\t\x1C" +
        "\x02\x02\u0A46\u0A48\x07\u0100\x02\x02\u0A47\u0A46\x03\x02\x02\x02\u0A47" +
        "\u0A48\x03\x02\x02\x02\u0A48\u0A49\x03\x02\x02\x02\u0A49\u0A4A\x05\u01D4" +
        "\xEB\x02\u0A4A\u0125\x03\x02\x02\x02\u0A4B\u0A4E\x07\xD9\x02\x02\u0A4C" +
        "\u0A4F\x05\u0434\u021B\x02\u0A4D\u0A4F\x05\u0496\u024C\x02\u0A4E\u0A4C" +
        "\x03\x02\x02\x02\u0A4E\u0A4D\x03\x02\x02\x02\u0A4F\u0A51\x03\x02\x02\x02" +
        "\u0A50\u0A52\x05\u0128\x95\x02\u0A51\u0A50\x03\x02\x02\x02\u0A51\u0A52" +
        "\x03\x02\x02\x02\u0A52\u0127\x03\x02\x02\x02\u0A53\u0A54\x07\u01EB\x02" +
        "\x02\u0A54\u0A55\x05\u0434\u021B\x02\u0A55\u0129\x03\x02\x02\x02\u0A56" +
        "\u0A57\x07\u01FC\x02\x02\u0A57\u0A58\x05\u0434\u021B\x02\u0A58\u012B\x03" +
        "\x02\x02\x02\u0A59\u0A5B\x07\u01FA\x02\x02\u0A5A\u0A5C\x07\u0100\x02\x02" +
        "\u0A5B\u0A5A\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5D\x03" +
        "\x02\x02\x02\u0A5D\u0A5E\t\x1D\x02\x02\u0A5E\u012D\x03\x02\x02\x02\u0A5F" +
        "\u0A61\x07.\x02\x02\u0A60\u0A62\x07\u0202\x02\x02\u0A61\u0A60\x03\x02" +
        "\x02\x02\u0A61\u0A62\x03\x02\x02\x02\u0A62\u0A63\x03\x02\x02\x02\u0A63" +
        "\u0A64\x07\u020B\x02\x02\u0A64\u012F\x03\x02\x02\x02\u0A65\u0A67\t\x1E" +
        "\x02\x02\u0A66\u0A68\x07\u019D\x02\x02\u0A67\u0A66\x03\x02\x02\x02\u0A67" +
        "\u0A68\x03\x02\x02\x02\u0A68\u0131\x03\x02\x02\x02\u0A69\u0A6B\x07\u01B8" +
        "\x02\x02\u0A6A\u0A6C\x07\u0100\x02\x02\u0A6B\u0A6A\x03\x02\x02\x02\u0A6B" +
        "\u0A6C\x03\x02\x02\x02\u0A6C\u0A6E\x03\x02\x02\x02\u0A6D\u0A69\x03\x02" +
        "\x02\x02\u0A6D\u0A6E\x03\x02\x02\x02\u0A6E\u0A6F\x03\x02\x02\x02\u0A6F" +
        "\u0A74\t\t\x02\x02\u0A70\u0A72\x07\u01AD\x02\x02\u0A71\u0A73\x07@\x02" +
        "\x02\u0A72\u0A71\x03\x02\x02\x02\u0A72\u0A73\x03\x02\x02\x02\u0A73\u0A75" +
        "\x03\x02\x02\x02\u0A74\u0A70\x03\x02\x02\x02\u0A74\u0A75\x03\x02\x02\x02" +
        "\u0A75\u0133\x03\x02\x02\x02\u0A76\u0A77\t\x1F\x02\x02\u0A77\u0135\x03" +
        "\x02\x02\x02\u0A78\u0A79\t \x02\x02\u0A79\u0137\x03\x02\x02\x02\u0A7A" +
        "\u0A7B\t!\x02\x02\u0A7B\u0139\x03\x02\x02\x02\u0A7C\u0A7E\x07\u016E\x02" +
        "\x02\u0A7D\u0A7F\x07@\x02\x02\u0A7E\u0A7D\x03\x02\x02\x02\u0A7E\u0A7F" +
        "\x03\x02\x02\x02\u0A7F\u0A81\x03\x02\x02\x02\u0A80\u0A82\x07\u0100\x02" +
        "\x02\u0A81\u0A80\x03\x02\x02\x02\u0A81\u0A82\x03\x02\x02\x02\u0A82\u0A85" +
        "\x03\x02\x02\x02\u0A83\u0A86\x05\u0434\u021B\x02\u0A84\u0A86\x05\u0496" +
        "\u024C\x02\u0A85\u0A83\x03\x02\x02\x02\u0A85\u0A84\x03\x02\x02\x02\u0A86" +
        "\u0A88\x03\x02\x02\x02\u0A87\u0A89\x05\u013C\x9F\x02\u0A88\u0A87\x03\x02" +
        "\x02\x02\u0A88\u0A89\x03\x02\x02\x02\u0A89\u013B\x03\x02\x02\x02\u0A8A" +
        "\u0A8B\x07\u0143\x02\x02\u0A8B\u0A8D\x05\u049C\u024F\x02\u0A8C\u0A8E\x07" +
        "\u01E9\x02\x02\u0A8D\u0A8C\x03\x02\x02\x02\u0A8D\u0A8E\x03\x02\x02\x02" +
        "\u0A8E\u013D\x03\x02\x02\x02\u0A8F\u0A90\t\"\x02\x02\u0A90\u013F\x03\x02" +
        "\x02\x02\u0A91\u0A92\x07\u020C\x02\x02\u0A92\u0141\x03\x02\x02\x02\u0A93" +
        "\u0A94\x07\u018D\x02\x02\u0A94\u0A95\x07\u01A5\x02\x02\u0A95\u0A99\x07" +
        "\u0218\x02\x02\u0A96\u0A98\x05\u0144\xA3\x02\u0A97\u0A96\x03\x02\x02\x02" +
        "\u0A98\u0A9B\x03\x02\x02\x02\u0A99\u0A97\x03\x02\x02\x02\u0A99\u0A9A\x03" +
        "\x02\x02\x02\u0A9A\u0143\x03\x02\x02\x02\u0A9B\u0A99\x03\x02\x02\x02\u0A9C" +
        "\u0A9E\x05\u0146\xA4\x02\u0A9D\u0A9F\x05\u0154\xAB\x02\u0A9E\u0A9D\x03" +
        "\x02\x02\x02\u0A9F\u0AA0\x03\x02\x02\x02\u0AA0\u0A9E\x03\x02\x02\x02\u0AA0" +
        "\u0AA1\x03\x02\x02\x02\u0AA1\u0145\x03\x02\x02\x02\u0AA2\u0AA3\x07\u0176" +
        "\x02\x02\u0AA3\u0AA5\x05\u0486\u0244\x02\u0AA4\u0AA6\x05\u0148\xA5\x02" +
        "\u0AA5\u0AA4\x03\x02\x02\x02\u0AA5\u0AA6\x03\x02\x02\x02\u0AA6\u0AB4\x03" +
        "\x02\x02\x02\u0AA7\u0AA9\x05\u014A\xA6\x02\u0AA8\u0AAA\x05\u014C\xA7\x02" +
        "\u0AA9\u0AA8\x03\x02\x02\x02\u0AA9\u0AAA\x03\x02\x02\x02\u0AAA\u0AAC\x03" +
        "\x02\x02\x02\u0AAB\u0AAD\x05\u014E\xA8\x02\u0AAC\u0AAB\x03\x02\x02\x02" +
        "\u0AAC\u0AAD\x03\x02\x02\x02\u0AAD\u0AAF\x03\x02\x02\x02\u0AAE\u0AB0\x05" +
        "\u0150\xA9\x02\u0AAF\u0AAE\x03\x02\x02\x02\u0AAF\u0AB0\x03\x02\x02\x02" +
        "\u0AB0\u0AB2\x03\x02\x02\x02\u0AB1\u0AB3\x05\u0152\xAA\x02\u0AB2\u0AB1" +
        "\x03\x02\x02\x02\u0AB2\u0AB3\x03\x02\x02\x02\u0AB3\u0AB5\x03\x02\x02\x02" +
        "\u0AB4\u0AA7\x03\x02\x02\x02\u0AB4\u0AB5\x03\x02\x02\x02\u0AB5\u0AB6\x03" +
        "\x02\x02\x02\u0AB6\u0AB7\x07\u0218\x02\x02\u0AB7\u0147\x03\x02\x02\x02" +
        "\u0AB8\u0ABA\x07\u0100\x02\x02\u0AB9\u0AB8\x03\x02\x02\x02\u0AB9\u0ABA" +
        "\x03\x02\x02\x02\u0ABA\u0ABB\x03\x02\x02\x02\u0ABB\u0ABC\x07\xE1\x02\x02" +
        "\u0ABC\u0149\x03\x02\x02\x02\u0ABD\u0AC6\x07\u0156\x02\x02\u0ABE\u0AC0" +
        "\x07\u0115\x02\x02\u0ABF\u0AC1\x07\u0100\x02\x02\u0AC0\u0ABF\x03\x02\x02" +
        "\x02\u0AC0\u0AC1\x03\x02\x02\x02\u0AC1\u0AC7\x03\x02\x02\x02\u0AC2\u0AC4" +
        "\x07\u0116\x02\x02\u0AC3\u0AC5\x07\x17\x02\x02\u0AC4\u0AC3\x03\x02\x02" +
        "\x02\u0AC4\u0AC5\x03\x02\x02\x02\u0AC5\u0AC7\x03\x02\x02\x02\u0AC6\u0ABE" +
        "\x03\x02\x02\x02\u0AC6\u0AC2\x03\x02\x02\x02\u0AC6\u0AC7\x03\x02\x02\x02" +
        "\u0AC7\u0AC8\x03\x02\x02\x02\u0AC8\u0ACA\x05\u049C\u024F\x02\u0AC9\u0ACB" +
        "\t#\x02\x02\u0ACA\u0AC9\x03\x02\x02\x02\u0ACA\u0ACB\x03\x02\x02\x02\u0ACB" +
        "\u014B\x03\x02\x02\x02\u0ACC\u0ACD\x07\xE6\x02\x02\u0ACD\u0ACE\x05\u049C" +
        "\u024F\x02\u0ACE\u014D\x03\x02\x02\x02\u0ACF\u0AD0\x07\xD4\x02\x02\u0AD0" +
        "\u0AD1\x07\x8B\x02\x02\u0AD1\u0AD2\x05\u049C\u024F\x02\u0AD2\u014F\x03" +
        "\x02\x02\x02\u0AD3\u0AD4\x07\u0109\x02\x02\u0AD4\u0AD5\x07\x8B\x02\x02" +
        "\u0AD5\u0AD6\x05\u049C\u024F\x02\u0AD6\u0151\x03\x02\x02\x02\u0AD7\u0AD8" +
        "\x07\xD5\x02\x02\u0AD8\u0AD9\x05\u049C\u024F\x02\u0AD9\u0153\x03\x02\x02" +
        "\x02\u0ADA\u0ADE\x05\u0156\xAC\x02\u0ADB\u0ADE\x05\u0158\xAD\x02\u0ADC" +
        "\u0ADE\x05\u015A\xAE\x02\u0ADD\u0ADA\x03\x02\x02\x02\u0ADD\u0ADB\x03\x02" +
        "\x02\x02\u0ADD\u0ADC\x03\x02\x02\x02\u0ADE\u0155\x03\x02\x02\x02\u0ADF" +
        "\u0AE0\x05\u049C\u024F\x02\u0AE0\u0AE2\x05\u046A\u0236\x02\u0AE1\u0AE3" +
        "\x05\u0164\xB3\x02\u0AE2\u0AE1\x03\x02\x02\x02\u0AE2\u0AE3\x03\x02\x02" +
        "\x02\u0AE3\u0AE5\x03\x02\x02\x02\u0AE4\u0AE6\x05\u016A\xB6\x02\u0AE5\u0AE4" +
        "\x03\x02\x02\x02\u0AE5\u0AE6\x03\x02\x02\x02\u0AE6\u0AE7\x03\x02\x02\x02" +
        "\u0AE7\u0AE9\x05\u017A\xBE\x02\u0AE8\u0AEA\x05\u0186\xC4\x02\u0AE9\u0AE8" +
        "\x03\x02\x02\x02\u0AE9\u0AEA\x03\x02\x02\x02\u0AEA\u0AEB\x03\x02\x02\x02" +
        "\u0AEB\u0AEC\x07\u0218\x02\x02\u0AEC\u0157\x03\x02\x02\x02\u0AED\u0AEF" +
        "\x05\u049C\u024F\x02\u0AEE\u0AF0\x05\u046A\u0236\x02\u0AEF\u0AEE\x03\x02" +
        "\x02\x02\u0AEF\u0AF0\x03\x02\x02\x02\u0AF0\u0AF2\x03\x02\x02\x02\u0AF1" +
        "\u0AF3\x05\u0164\xB3\x02\u0AF2\u0AF1\x03\x02\x02\x02\u0AF2\u0AF3\x03\x02" +
        "\x02\x02\u0AF3\u0AF4\x03\x02\x02\x02\u0AF4\u0AF5\x05\u0186\xC4\x02\u0AF5" +
        "\u0AF6\x07\u0218\x02\x02\u0AF6\u0159\x03\x02\x02\x02\u0AF7\u0AF9\x05\u049C" +
        "\u024F\x02\u0AF8\u0AFA\x05\u046A\u0236\x02\u0AF9\u0AF8\x03\x02\x02\x02" +
        "\u0AF9\u0AFA\x03\x02\x02\x02\u0AFA\u0B0B\x03\x02\x02\x02\u0AFB\u0B0A\x05" +
        "\u0170\xB9\x02\u0AFC\u0B0A\x05\u0186\xC4\x02\u0AFD\u0B0A\x05\u0174\xBB" +
        "\x02\u0AFE\u0B0A\x05\u0162\xB2\x02\u0AFF\u0B0A\x05\u015C\xAF\x02\u0B00" +
        "\u0B0A\x05\u0164\xB3\x02\u0B01\u0B0A\x05\u015E\xB0\x02\u0B02\u0B07\x05" +
        "\u0176\xBC\x02\u0B03\u0B07\x05\u018C\xC7\x02\u0B04\u0B07\x05\u0178\xBD" +
        "\x02\u0B05\u0B07\x05\u0172\xBA\x02\u0B06\u0B02\x03\x02\x02\x02\u0B06\u0B03" +
        "\x03\x02\x02\x02\u0B06\u0B04\x03\x02\x02\x02\u0B06\u0B05\x03\x02\x02\x02" +
        "\u0B07\u0B0A\x03\x02\x02\x02\u0B08\u0B0A\x05\u0160\xB1\x02\u0B09\u0AFB" +
        "\x03\x02\x02\x02\u0B09\u0AFC\x03\x02\x02\x02\u0B09\u0AFD\x03\x02\x02\x02" +
        "\u0B09\u0AFE\x03\x02\x02\x02\u0B09\u0AFF\x03\x02\x02\x02\u0B09\u0B00\x03" +
        "\x02\x02\x02\u0B09\u0B01\x03\x02\x02\x02\u0B09\u0B06\x03\x02\x02\x02\u0B09" +
        "\u0B08\x03\x02\x02\x02\u0B0A\u0B0D\x03\x02\x02\x02\u0B0B\u0B09\x03\x02" +
        "\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02\u0B0C\u0B0E\x03\x02\x02\x02\u0B0D" +
        "\u0B0B\x03\x02\x02\x02\u0B0E\u0B0F\x07\u0218\x02\x02\u0B0F\u015B\x03\x02" +
        "\x02\x02\u0B10\u0B12\x07.\x02\x02\u0B11\u0B13\x07\u0202\x02\x02\u0B12" +
        "\u0B11\x03\x02\x02\x02\u0B12\u0B13\x03\x02\x02\x02\u0B13\u0B14\x03\x02" +
        "\x02\x02\u0B14\u0B15\x07\u020B\x02\x02\u0B15\u015D\x03\x02\x02\x02\u0B16" +
        "\u0B18\x07L\x02\x02\u0B17\u0B19\x07\u013D\x02\x02\u0B18\u0B17\x03\x02" +
        "\x02\x02\u0B18\u0B19\x03\x02\x02\x02\u0B19\u0B1B\x03\x02\x02\x02\u0B1A" +
        "\u0B1C\x07\u0100\x02\x02\u0B1B\u0B1A\x03\x02\x02\x02\u0B1B\u0B1C\x03\x02" +
        "\x02\x02\u0B1C\u0B1D\x03\x02\x02\x02\u0B1D\u0B1E\x05\u049C\u024F\x02\u0B1E" +
        "\u015F\x03\x02\x02\x02\u0B1F\u0B21\x07\xE5\x02\x02\u0B20\u0B22\x07\xF4" +
        "\x02\x02\u0B21\u0B20\x03\x02\x02\x02\u0B21\u0B22\x03\x02\x02\x02\u0B22" +
        "\u0161\x03\x02\x02\x02\u0B23\u0B25\t\x1E\x02\x02\u0B24\u0B26\x07\u019D" +
        "\x02\x02\u0B25\u0B24\x03\x02\x02\x02\u0B25\u0B26\x03\x02\x02\x02\u0B26" +
        "\u0163\x03\x02\x02\x02\u0B27\u0B29\x07\u0119\x02\x02\u0B28\u0B27\x03\x02" +
        "\x02\x02\u0B28\u0B29\x03\x02\x02\x02\u0B29\u0B2B\x03\x02\x02\x02\u0B2A" +
        "\u0B2C\x07\u013D\x02\x02\u0B2B\u0B2A\x03\x02\x02\x02\u0B2B\u0B2C\x03\x02" +
        "\x02\x02\u0B2C\u0B2E\x03\x02\x02\x02\u0B2D\u0B2F\x07\u0100\x02\x02\u0B2E" +
        "\u0B2D\x03\x02\x02\x02\u0B2E\u0B2F\x03\x02\x02\x02\u0B2F\u0B32\x03\x02" +
        "\x02\x02\u0B30\u0B33\x05\u0166\xB4\x02\u0B31\u0B33\x05\u0168\xB5\x02\u0B32" +
        "\u0B30\x03\x02\x02\x02\u0B32\u0B31\x03\x02\x02\x02\u0B33\u0165\x03\x02" +
        "\x02\x02\u0B34\u0B3A\x05\u049C\u024F\x02\u0B35\u0B37\x07\u0148\x02\x02" +
        "\u0B36\u0B35\x03\x02\x02\x02\u0B36\u0B37\x03\x02\x02\x02\u0B37\u0B38\x03" +
        "\x02\x02\x02\u0B38\u0B39\x07\u0137\x02\x02\u0B39\u0B3B\x07\u0156\x02\x02" +
        "\u0B3A\u0B36\x03\x02\x02\x02\u0B3A\u0B3B\x03\x02\x02\x02\u0B3B\u0167\x03" +
        "\x02\x02\x02\u0B3C\u0B3D\x07\u015E\x02\x02\u0B3D\u0B3E\x05\u049C\u024F" +
        "\x02\u0B3E\u0169\x03\x02\x02\x02\u0B3F\u0B40\x07\u0137\x02\x02\u0B40\u0B42" +
        "\x07\xE5\x02\x02\u0B41\u0B43\x07\u0100\x02\x02\u0B42\u0B41\x03\x02\x02" +
        "\x02\u0B42\u0B43\x03\x02\x02\x02\u0B43\u0B47\x03\x02\x02\x02\u0B44\u0B48" +
        "\x05\u049C\u024F\x02\u0B45\u0B48\x05\u016E\xB8\x02\u0B46\u0B48\x05\u016C" +
        "\xB7\x02\u0B47\u0B44\x03\x02\x02\x02\u0B47\u0B45\x03\x02\x02\x02\u0B47" +
        "\u0B46\x03\x02\x02\x02\u0B48\u016B\x03\x02\x02\x02\u0B49\u0B4A\x07\u015E" +
        "\x02\x02\u0B4A\u0B4B\x05\u049C\u024F\x02\u0B4B\u016D\x03\x02\x02\x02\u0B4C" +
        "\u0B4D\x07\u0137\x02\x02\u0B4D\u0B4E\x07\u0156\x02\x02\u0B4E\u016F\x03" +
        "\x02\x02\x02\u0B4F\u0B51\t\x1C\x02\x02\u0B50\u0B52\x07\u0100\x02\x02\u0B51" +
        "\u0B50\x03\x02\x02\x02\u0B51\u0B52\x03\x02\x02\x02\u0B52\u0B53\x03\x02" +
        "\x02\x02\u0B53\u0B54\x05\u01D4\xEB\x02\u0B54\u0171\x03\x02\x02\x02\u0B55" +
        "\u0B57\x07\u0194\x02\x02\u0B56\u0B58\x07\u0148\x02\x02\u0B57\u0B56\x03" +
        "\x02\x02\x02\u0B57\u0B58\x03\x02\x02\x02\u0B58\u0B5B\x03\x02\x02\x02\u0B59" +
        "\u0B5C\x07\xD3\x02\x02\u0B5A\u0B5C\x05\u046A\u0236\x02\u0B5B\u0B59\x03" +
        "\x02\x02\x02\u0B5B\u0B5A\x03\x02\x02\x02\u0B5C\u0173\x03\x02\x02\x02\u0B5D" +
        "\u0B5F\x07\u01B8\x02\x02\u0B5E\u0B60\x07\u0100\x02\x02\u0B5F\u0B5E\x03" +
        "\x02\x02\x02\u0B5F\u0B60\x03\x02\x02\x02\u0B60\u0B61\x03\x02\x02\x02\u0B61" +
        "\u0B62\t\t\x02\x02\u0B62\u0B64\x07\u01AD\x02\x02\u0B63\u0B65\x07@\x02" +
        "\x02\u0B64\u0B63\x03\x02\x02\x02\u0B64\u0B65\x03\x02\x02\x02\u0B65\u0175" +
        "\x03\x02\x02\x02\u0B66\u0B68\x07\u01C2\x02\x02\u0B67\u0B69\x07\u0100\x02" +
        "\x02\u0B68\u0B67\x03\x02\x02\x02\u0B68\u0B69\x03\x02\x02\x02\u0B69\u0B6A" +
        "\x03\x02\x02\x02\u0B6A\u0B6B\x05\u0434\u021B\x02\u0B6B\u0177\x03\x02\x02" +
        "\x02\u0B6C\u0B6D\x07\u01D2\x02\x02\u0B6D\u0B74\x05\u0434\u021B\x02\u0B6E" +
        "\u0B70\x07\u0213\x02\x02\u0B6F\u0B6E\x03\x02\x02\x02\u0B6F\u0B70\x03\x02" +
        "\x02\x02\u0B70\u0B71\x03\x02\x02\x02\u0B71\u0B73\x05\u0434\u021B\x02\u0B72" +
        "\u0B6F\x03\x02\x02\x02\u0B73\u0B76\x03\x02\x02\x02\u0B74\u0B72\x03\x02" +
        "\x02\x02\u0B74\u0B75\x03\x02\x02\x02\u0B75\u0B82\x03\x02\x02\x02\u0B76" +
        "\u0B74\x03\x02\x02\x02\u0B77\u0B78\x07\u01F9\x02\x02\u0B78\u0B7F\x05\u046A" +
        "\u0236\x02\u0B79\u0B7B\x07\u0213\x02\x02\u0B7A\u0B79\x03\x02\x02\x02\u0B7A" +
        "\u0B7B\x03\x02\x02\x02\u0B7B\u0B7C\x03\x02\x02\x02\u0B7C\u0B7E\x05\u046A" +
        "\u0236\x02\u0B7D\u0B7A\x03\x02\x02\x02\u0B7E\u0B81\x03\x02\x02\x02\u0B7F" +
        "\u0B7D\x03\x02\x02\x02\u0B7F\u0B80\x03\x02\x02\x02\u0B80\u0B83\x03\x02" +
        "\x02\x02\u0B81\u0B7F\x03\x02\x02\x02\u0B82\u0B77\x03\x02\x02\x02\u0B82" +
        "\u0B83\x03\x02\x02\x02\u0B83\u0179\x03\x02\x02\x02\u0B84\u0B86\x07\u01F2" +
        "\x02\x02\u0B85\u0B87\x07\u0100\x02\x02\u0B86\u0B85\x03\x02\x02\x02\u0B86" +
        "\u0B87\x03\x02\x02\x02\u0B87\u0B8F\x03\x02\x02\x02\u0B88\u0B90\x05\u017C" +
        "\xBF\x02\u0B89\u0B90\x05\u017E\xC0\x02\u0B8A\u0B90\x05\u0180\xC1\x02\u0B8B" +
        "\u0B90\x05\u0182\xC2\x02\u0B8C\u0B90\x05\u0184\xC3\x02\u0B8D\u0B90\x05" +
        "\u0188\xC5\x02\u0B8E\u0B90\x05\u018A\xC6\x02\u0B8F\u0B88\x03\x02\x02\x02" +
        "\u0B8F\u0B89\x03\x02\x02\x02\u0B8F\u0B8A\x03\x02\x02\x02\u0B8F\u0B8B\x03" +
        "\x02\x02\x02\u0B8F\u0B8C\x03\x02\x02\x02\u0B8F\u0B8D\x03\x02\x02\x02\u0B8F" +
        "\u0B8E\x03\x02\x02\x02\u0B90\u017B\x03\x02\x02\x02\u0B91\u0B92\x07\u018D" +
        "\x02\x02\u0B92\u0B95\x07\xE6\x02\x02\u0B93\u0B95\x07\u019C\x02\x02\u0B94" +
        "\u0B91\x03\x02\x02\x02\u0B94\u0B93\x03\x02\x02\x02\u0B95\u017D\x03\x02" +
        "\x02\x02\u0B96\u0B97\x07\u0156\x02\x02\u0B97\u0B9A\x07\xE6\x02\x02\u0B98" +
        "\u0B9A\x07\u015B\x02\x02\u0B99\u0B96\x03\x02\x02\x02\u0B99\u0B98\x03\x02" +
        "\x02\x02\u0B9A\u017F\x03\x02\x02\x02\u0B9B\u0B9C\x07c\x02\x02\u0B9C\u0B9F" +
        "\x07\xE6\x02\x02\u0B9D\u0B9F\x07<\x02\x02\u0B9E\u0B9B\x03\x02\x02\x02" +
        "\u0B9E\u0B9D\x03\x02\x02\x02\u0B9F\u0BA2\x03\x02\x02\x02\u0BA0\u0BA3\x07" +
        "\xD3\x02\x02\u0BA1\u0BA3\x05\u046A\u0236\x02\u0BA2\u0BA0\x03\x02\x02\x02" +
        "\u0BA2\u0BA1\x03\x02\x02\x02\u0BA3\u0181\x03\x02\x02\x02\u0BA4\u0BA5\t" +
        "$\x02\x02\u0BA5\u0183\x03\x02\x02\x02\u0BA6\u0BA7\x07c\x02\x02\u0BA7\u0BAA" +
        "\x07\xD5\x02\x02\u0BA8\u0BAA\x07;\x02\x02\u0BA9\u0BA6\x03\x02\x02\x02" +
        "\u0BA9\u0BA8\x03\x02\x02\x02\u0BAA\u0BAD\x03\x02\x02\x02\u0BAB\u0BAE\x07" +
        "\xD3\x02\x02\u0BAC\u0BAE\x05\u046A\u0236\x02\u0BAD\u0BAB\x03\x02\x02\x02" +
        "\u0BAD\u0BAC\x03\x02\x02\x02\u0BAE\u0185\x03\x02\x02\x02\u0BAF\u0BB1\x07" +
        "\u01FA\x02\x02\u0BB0\u0BB2\x07\u0100\x02\x02\u0BB1\u0BB0\x03\x02\x02\x02" +
        "\u0BB1\u0BB2\x03\x02\x02\x02\u0BB2\u0BB4\x03\x02\x02\x02\u0BB3\u0BAF\x03" +
        "\x02\x02\x02\u0BB3\u0BB4\x03\x02\x02\x02\u0BB4\u0BB5\x03\x02\x02\x02\u0BB5" +
        "\u0BB6\t\x1D\x02\x02\u0BB6\u0187\x03\x02\x02\x02\u0BB7\u0BB8\x07\u0156" +
        "\x02\x02\u0BB8\u0BBB\x07\xD5\x02\x02\u0BB9\u0BBB\x07\u015A\x02\x02\u0BBA" +
        "\u0BB7\x03\x02\x02\x02\u0BBA\u0BB9\x03\x02\x02\x02\u0BBB\u0189\x03\x02" +
        "\x02\x02\u0BBC\u0BBD\x07\u018D\x02\x02\u0BBD\u0BC0\x07\xD5\x02\x02\u0BBE" +
        "\u0BC0\x07\u019B\x02\x02\u0BBF\u0BBC\x03\x02\x02\x02\u0BBF\u0BBE\x03\x02" +
        "\x02\x02\u0BC0\u018B\x03\x02\x02\x02\u0BC1\u0BC3\x07\u01FD\x02\x02\u0BC2" +
        "\u0BC4\x07\u0100\x02\x02\u0BC3\u0BC2\x03\x02\x02\x02\u0BC3\u0BC4\x03\x02" +
        "\x02\x02\u0BC4\u0BC5\x03\x02\x02\x02\u0BC5\u0BC6\x05\u0496\u024C\x02\u0BC6" +
        "\u018D\x03\x02\x02\x02\u0BC7\u0BC8\x07\u016D\x02\x02\u0BC8\u0BC9\x07\u01A5" +
        "\x02\x02\u0BC9\u0BCD\x07\u0218\x02\x02\u0BCA\u0BCC\x05\u0190\xC9\x02\u0BCB" +
        "\u0BCA\x03\x02\x02\x02\u0BCC\u0BCF\x03\x02\x02\x02\u0BCD\u0BCB\x03\x02" +
        "\x02\x02\u0BCD\u0BCE\x03\x02\x02\x02\u0BCE\u018F\x03\x02\x02\x02\u0BCF" +
        "\u0BCD\x03\x02\x02\x02\u0BD0\u0BD3\x05\u0192\xCA\x02\u0BD1\u0BD3\x05\u0194" +
        "\xCB\x02\u0BD2\u0BD0\x03\x02\x02\x02\u0BD2\u0BD1\x03\x02\x02\x02\u0BD3" +
        "\u0191\x03\x02\x02\x02\u0BD4\u0BD5\x07\u010B\x02\x02\u0BD5\u0BD6\x05\u0478" +
        "\u023D\x02\u0BD6\u0BD8\x07\xCA\x02\x02\u0BD7\u0BD9\x05\u0196\xCC\x02\u0BD8" +
        "\u0BD7\x03\x02\x02\x02\u0BD8\u0BD9\x03\x02\x02\x02\u0BD9\u0BDB\x03\x02" +
        "\x02\x02\u0BDA\u0BDC\x05\u01A0\xD1\x02\u0BDB\u0BDA\x03\x02\x02\x02\u0BDB" +
        "\u0BDC\x03\x02\x02\x02\u0BDC\u0193\x03\x02\x02\x02\u0BDD\u0BDE\x07\u010A" +
        "\x02\x02\u0BDE\u0BDF\x05\u0478\u023D\x02\u0BDF\u0BE1\x07\xF0\x02\x02\u0BE0" +
        "\u0BE2\x05\u01B2\xDA\x02\u0BE1\u0BE0\x03\x02\x02\x02\u0BE1\u0BE2\x03\x02" +
        "\x02\x02\u0BE2\u0BE4\x03\x02\x02\x02\u0BE3\u0BE5\x05\u01B0\xD9\x02\u0BE4" +
        "\u0BE3\x03\x02\x02\x02\u0BE4\u0BE5\x03\x02\x02\x02\u0BE5\u0BEA\x03\x02" +
        "\x02\x02\u0BE6\u0BE9\x05\u0198\xCD\x02\u0BE7\u0BE9\x05\u01A2\xD2\x02\u0BE8" +
        "\u0BE6\x03\x02\x02\x02\u0BE8\u0BE7\x03\x02\x02\x02\u0BE9\u0BEC\x03\x02" +
        "\x02\x02\u0BEA\u0BE8\x03\x02\x02\x02\u0BEA\u0BEB\x03\x02\x02\x02\u0BEB" +
        "\u0195\x03\x02\x02\x02\u0BEC\u0BEA\x03\x02\x02\x02\u0BED\u0BF3\x07!\x02" +
        "\x02\u0BEE\u0BF0\x07\u01B4\x02\x02\u0BEF\u0BF1\x07\u0100\x02\x02\u0BF0" +
        "\u0BEF\x03\x02\x02\x02\u0BF0\u0BF1\x03\x02\x02\x02\u0BF1\u0BF2\x03\x02" +
        "\x02\x02\u0BF2\u0BF4\t%\x02\x02\u0BF3\u0BEE\x03\x02\x02\x02\u0BF3\u0BF4" +
        "\x03\x02\x02\x02\u0BF4\u0197\x03\x02\x02\x02\u0BF5\u0BF7\x07!\x02\x02" +
        "\u0BF6\u0BF8\x05\u019A\xCE\x02\u0BF7\u0BF6\x03\x02\x02\x02\u0BF7\u0BF8" +
        "\x03\x02\x02\x02\u0BF8\u0BFE\x03\x02\x02\x02\u0BF9\u0BFB\x07\u0112\x02" +
        "\x02\u0BFA\u0BFC\x07\u0100\x02\x02\u0BFB\u0BFA\x03\x02\x02\x02\u0BFB\u0BFC" +
        "\x03\x02\x02\x02\u0BFC\u0BFD\x03\x02\x02\x02\u0BFD\u0BFF\t&\x02\x02\u0BFE" +
        "\u0BF9\x03\x02\x02\x02\u0BFE\u0BFF\x03\x02\x02\x02\u0BFF\u0C01\x03\x02" +
        "\x02\x02\u0C00\u0C02\x05\u019C\xCF\x02\u0C01\u0C00\x03\x02\x02\x02\u0C01" +
        "\u0C02\x03\x02\x02\x02\u0C02\u0C04\x03\x02\x02\x02\u0C03\u0C05\x05\u019E" +
        "\xD0\x02\u0C04\u0C03\x03\x02\x02\x02\u0C04\u0C05\x03\x02\x02\x02\u0C05" +
        "\u0199\x03\x02\x02\x02\u0C06\u0C07\x07\xDC\x02\x02\u0C07\u0C08\x07\u0100" +
        "\x02\x02\u0C08\u0C09\x05\u0496\u024C\x02\u0C09\u019B\x03\x02\x02\x02\u0C0A" +
        "\u0C0C\x07\u0113\x02\x02\u0C0B\u0C0D\x07\u0100\x02\x02\u0C0C\u0C0B\x03" +
        "\x02\x02\x02\u0C0C\u0C0D\x03\x02\x02\x02\u0C0D\u0C0E\x03\x02\x02\x02\u0C0E" +
        "\u0C0F\x05\u0496\u024C\x02\u0C0F\u019D\x03\x02\x02\x02\u0C10\u0C12\x07" +
        "\u01EA\x02\x02\u0C11\u0C13\x07\u0100\x02\x02\u0C12\u0C11\x03\x02\x02\x02" +
        "\u0C12\u0C13\x03\x02\x02\x02\u0C13\u0C14\x03\x02\x02\x02\u0C14\u0C15\x05" +
        "\u0496\u024C\x02\u0C15\u019F\x03\x02\x02\x02\u0C16\u0C17\x07\xB9\x02\x02" +
        "\u0C17\u0C19\x05\u0482\u0242\x02\u0C18\u0C1A\x05\u01A4\xD3\x02\u0C19\u0C18" +
        "\x03\x02\x02\x02\u0C19\u0C1A\x03\x02\x02\x02\u0C1A\u01A1\x03\x02\x02\x02" +
        "\u0C1B\u0C1C\x07\xB9\x02\x02\u0C1C\u0C1E\x05\u0482\u0242\x02\u0C1D\u0C1F" +
        "\x05\u01A4\xD3\x02\u0C1E\u0C1D\x03\x02\x02\x02\u0C1E\u0C1F\x03\x02\x02" +
        "\x02\u0C1F\u0C21\x03\x02\x02\x02\u0C20\u0C22\x05\u01AC\xD7\x02\u0C21\u0C20" +
        "\x03\x02\x02\x02\u0C21\u0C22\x03\x02\x02\x02\u0C22\u0C24\x03\x02\x02\x02" +
        "\u0C23\u0C25\x05\u01A8\xD5\x02\u0C24\u0C23\x03\x02\x02\x02\u0C24\u0C25" +
        "\x03\x02\x02\x02\u0C25\u0C27\x03\x02\x02\x02\u0C26\u0C28\x05\u01A6\xD4" +
        "\x02\u0C27\u0C26\x03\x02\x02\x02\u0C27\u0C28\x03\x02\x02\x02\u0C28\u01A3" +
        "\x03\x02\x02\x02\u0C29\u0C2A\x07\xD6\x02\x02\u0C2A\u0C2B\x05\u0496\u024C" +
        "\x02\u0C2B\u01A5\x03\x02\x02\x02\u0C2C\u0C2D\x07\xE0\x02\x02\u0C2D\u0C2E" +
        "\x05\u046A\u0236\x02\u0C2E\u01A7\x03\x02\x02\x02\u0C2F\u0C31\x07\u01FC" +
        "\x02\x02\u0C30\u0C32\x05\u01AA\xD6\x02\u0C31\u0C30\x03\x02\x02\x02\u0C32" +
        "\u0C33\x03\x02\x02\x02\u0C33\u0C31\x03\x02\x02\x02\u0C33\u0C34\x03\x02" +
        "\x02\x02\u0C34\u01A9\x03\x02\x02\x02\u0C35\u0C38\x05\u046A\u0236\x02\u0C36" +
        "\u0C38\x05\u0470\u0239\x02\u0C37\u0C35\x03\x02\x02\x02\u0C37\u0C36\x03" +
        "\x02\x02\x02\u0C38\u01AB\x03\x02\x02\x02\u0C39\u0C3B\x07\u0204\x02\x02" +
        "\u0C3A\u0C3C\x05\u01AE\xD8\x02\u0C3B\u0C3A\x03\x02\x02\x02\u0C3C\u0C3D" +
        "\x03\x02\x02\x02\u0C3D\u0C3B\x03\x02\x02\x02\u0C3D\u0C3E\x03\x02\x02\x02" +
        "\u0C3E\u01AD\x03\x02\x02\x02\u0C3F\u0C42\x05\u047A\u023E\x02\u0C40\u0C42" +
        "\x05\u0470\u0239\x02\u0C41\u0C3F\x03\x02\x02\x02\u0C41\u0C40\x03\x02\x02" +
        "\x02\u0C42\u01AF\x03\x02\x02\x02\u0C43\u0C45\x07\u0100\x02\x02\u0C44\u0C43" +
        "\x03\x02\x02\x02\u0C44\u0C45\x03\x02\x02\x02\u0C45\u0C46\x03\x02\x02\x02" +
        "\u0C46\u0C47\x07P\x02\x02\u0C47\u01B1\x03\x02\x02\x02\u0C48\u0C4A\x07" +
        "\u0100\x02\x02\u0C49\u0C48\x03\x02\x02\x02\u0C49\u0C4A\x03\x02\x02\x02" +
        "\u0C4A\u0C4B\x03\x02\x02\x02\u0C4B\u0C4C\x07\xE1\x02\x02\u0C4C\u01B3\x03" +
        "\x02\x02\x02\u0C4D\u0C52\x05\u01B6\xDC\x02\u0C4E\u0C52\x05\u01B8\xDD\x02" +
        "\u0C4F\u0C52\x05\u01BA\xDE\x02\u0C50\u0C52\x05\u01BC\xDF\x02\u0C51\u0C4D" +
        "\x03\x02\x02\x02\u0C51\u0C4E\x03\x02\x02\x02\u0C51\u0C4F\x03\x02\x02\x02" +
        "\u0C51\u0C50\x03\x02\x02\x02\u0C52\u01B5\x03\x02\x02\x02\u0C53\u0C56\t" +
        "\'\x02\x02\u0C54\u0C57\x07\xD2\x02\x02\u0C55\u0C57\x05\u046A\u0236\x02" +
        "\u0C56\u0C54\x03\x02\x02\x02\u0C56\u0C55\x03\x02\x02\x02\u0C56\u0C57\x03" +
        "\x02\x02\x02\u0C57\u0C6F\x03\x02\x02\x02\u0C58\u0C6E\x05\u01DE\xF0\x02" +
        "\u0C59\u0C6E\x05\u01C8\xE5\x02\u0C5A\u0C6E\x05\u01C4\xE3\x02\u0C5B\u0C6E" +
        "\x05\u01C6\xE4\x02\u0C5C\u0C6E\x05\u01EA\xF6\x02\u0C5D\u0C6E\x05\u01E6" +
        "\xF4\x02\u0C5E\u0C6E\x05\u01D2\xEA\x02\u0C5F\u0C6E\x05\u01C2\xE2\x02\u0C60" +
        "\u0C6E\x05\u01E8\xF5\x02\u0C61\u0C6E\x05\u01EE\xF8\x02\u0C62\u0C6E\x05" +
        "\u01EC\xF7\x02\u0C63\u0C6E\x05\u01F0\xF9\x02\u0C64\u0C6E\x05\u01DA\xEE" +
        "\x02\u0C65\u0C6E\x05\u01CC\xE7\x02\u0C66\u0C6E\x05\u01E2\xF2\x02\u0C67" +
        "\u0C6E\x05\u01E4\xF3\x02\u0C68\u0C6E\x05\u01CA\xE6\x02\u0C69\u0C6E\x05" +
        "\u01C0\xE1\x02\u0C6A\u0C6E\x05\u01F8\xFD\x02\u0C6B\u0C6E\x05\u01BE\xE0" +
        "\x02\u0C6C\u0C6E\x05\u01DC\xEF\x02\u0C6D\u0C58\x03\x02\x02\x02\u0C6D\u0C59" +
        "\x03\x02\x02\x02\u0C6D\u0C5A\x03\x02\x02\x02\u0C6D\u0C5B\x03\x02\x02\x02" +
        "\u0C6D\u0C5C\x03\x02\x02\x02\u0C6D\u0C5D\x03\x02\x02\x02\u0C6D\u0C5E\x03" +
        "\x02\x02\x02\u0C6D\u0C5F\x03\x02\x02\x02\u0C6D\u0C60\x03\x02\x02\x02\u0C6D" +
        "\u0C61\x03\x02\x02\x02\u0C6D\u0C62\x03\x02\x02\x02\u0C6D\u0C63\x03\x02" +
        "\x02\x02\u0C6D\u0C64\x03\x02\x02\x02\u0C6D\u0C65\x03\x02\x02\x02\u0C6D" +
        "\u0C66\x03\x02\x02\x02\u0C6D\u0C67\x03\x02\x02\x02\u0C6D\u0C68\x03\x02" +
        "\x02\x02\u0C6D\u0C69\x03\x02\x02\x02\u0C6D\u0C6A\x03\x02\x02\x02\u0C6D" +
        "\u0C6B\x03\x02\x02\x02\u0C6D\u0C6C\x03\x02\x02\x02\u0C6E\u0C71\x03\x02" +
        "\x02\x02\u0C6F\u0C6D\x03\x02\x02\x02\u0C6F\u0C70\x03\x02\x02\x02\u0C70" +
        "\u0C72\x03\x02\x02\x02\u0C71\u0C6F\x03\x02\x02\x02\u0C72\u0C73\x07\u0218" +
        "\x02\x02\u0C73\u01B7\x03\x02\x02\x02\u0C74\u0C75\x07\u022A\x02\x02\u0C75" +
        "\u0C76\x05\u046A\u0236\x02\u0C76\u0C77\x05\u01E0\xF1\x02\u0C77\u0C78\x07" +
        "\u0218\x02\x02\u0C78\u01B9\x03\x02\x02\x02\u0C79\u0C7A\x07\u022C\x02\x02" +
        "\u0C7A\u0C7B\x05\u0468\u0235\x02\u0C7B\u0C7C\x05\u01F0\xF9\x02\u0C7C\u0C7D" +
        "\x07\u0218\x02\x02\u0C7D\u01BB\x03\x02\x02\x02\u0C7E\u0C80\x07\u0233\x02" +
        "\x02\u0C7F\u0C7E\x03\x02\x02\x02\u0C80\u0C81\x03\x02\x02\x02\u0C81\u0C7F" +
        "\x03\x02\x02\x02\u0C81\u0C82\x03\x02\x02\x02\u0C82\u0C84\x03\x02\x02\x02" +
        "\u0C83\u0C85\x07\u0218\x02\x02\u0C84\u0C83\x03\x02\x02\x02\u0C84\u0C85" +
        "\x03\x02\x02\x02\u0C85\u01BD\x03\x02\x02\x02\u0C86\u0C87\x07\n\x02\x02" +
        "\u0C87\u01BF\x03\x02\x02\x02\u0C88\u0C8A\x07.\x02\x02\u0C89\u0C8B\x07" +
        "\u0202\x02\x02\u0C8A\u0C89\x03\x02\x02\x02\u0C8A\u0C8B\x03\x02\x02\x02" +
        "\u0C8B\u0C8C\x03\x02\x02\x02\u0C8C\u0C8D\t(\x02\x02\u0C8D\u01C1\x03\x02" +
        "\x02\x02\u0C8E\u0C8F\t)\x02\x02\u0C8F\u01C3\x03\x02\x02\x02\u0C90\u0C92" +
        "\x07\u0100\x02\x02\u0C91\u0C90\x03\x02\x02\x02\u0C91\u0C92\x03\x02\x02" +
        "\x02\u0C92\u0C93\x03\x02\x02\x02\u0C93\u0C96\x07\xCD\x02\x02\u0C94\u0C95" +
        "\x073\x02\x02\u0C95\u0C97\x05\u0496\u024C\x02\u0C96\u0C94\x03\x02\x02" +
        "\x02\u0C96\u0C97\x03\x02\x02\x02\u0C97\u01C5\x03\x02\x02\x02\u0C98\u0C9A" +
        "\x07\u0100\x02\x02\u0C99\u0C98\x03\x02\x02\x02\u0C99\u0C9A\x03\x02\x02" +
        "\x02\u0C9A\u0C9B\x03\x02\x02\x02\u0C9B\u0C9C\x07\xE1\x02\x02\u0C9C\u01C7" +
        "\x03\x02\x02\x02\u0C9D\u0C9E\t*\x02\x02\u0C9E\u01C9\x03\x02\x02\x02\u0C9F" +
        "\u0CA1\t\x1E\x02\x02\u0CA0\u0CA2\x07\u019D\x02\x02\u0CA1\u0CA0\x03\x02" +
        "\x02\x02\u0CA1\u0CA2\x03\x02\x02\x02\u0CA2\u01CB\x03\x02\x02\x02\u0CA3" +
        "\u0CA4\x07\u0143\x02\x02\u0CA4\u0CA6\x05\u049C\u024F\x02\u0CA5\u0CA7\x05" +
        "\u01CE\xE8\x02\u0CA6\u0CA5\x03\x02\x02\x02\u0CA6\u0CA7\x03\x02\x02\x02" +
        "\u0CA7\u0CA9\x03\x02\x02\x02\u0CA8\u0CAA\x07\u01E9\x02\x02\u0CA9\u0CA8" +
        "\x03\x02\x02\x02\u0CA9\u0CAA\x03\x02\x02\x02\u0CAA\u0CB0\x03\x02\x02\x02" +
        "\u0CAB\u0CAD\x07\x88\x02\x02\u0CAC\u0CAE\x07\u0148\x02\x02\u0CAD\u0CAC" +
        "\x03\x02\x02\x02\u0CAD\u0CAE\x03\x02\x02\x02\u0CAE\u0CAF\x03\x02\x02\x02" +
        "\u0CAF\u0CB1\x05\u0444\u0223\x02\u0CB0\u0CAB\x03\x02\x02\x02\u0CB0\u0CB1" +
        "\x03\x02\x02\x02\u0CB1\u0CB5\x03\x02\x02\x02\u0CB2\u0CB4\x05\u01D0\xE9" +
        "\x02\u0CB3\u0CB2\x03\x02\x02\x02\u0CB4\u0CB7\x03\x02\x02\x02\u0CB5\u0CB3" +
        "\x03\x02\x02\x02\u0CB5\u0CB6\x03\x02\x02\x02\u0CB6\u0CC4\x03\x02\x02\x02" +
        "\u0CB7\u0CB5\x03\x02\x02\x02\u0CB8\u0CBA\x07\xF3\x02\x02\u0CB9\u0CBB\x07" +
        "3\x02\x02\u0CBA\u0CB9\x03\x02\x02\x02\u0CBA\u0CBB\x03\x02\x02\x02\u0CBB" +
        "\u0CBD\x03\x02\x02\x02\u0CBC\u0CBE\x07\u011E\x02\x02\u0CBD\u0CBC\x03\x02" +
        "\x02\x02\u0CBD\u0CBE\x03\x02\x02\x02\u0CBE\u0CC0\x03\x02\x02\x02\u0CBF" +
        "\u0CC1\x05\u0474\u023B\x02\u0CC0\u0CBF\x03\x02\x02\x02\u0CC1\u0CC2\x03" +
        "\x02\x02\x02\u0CC2\u0CC0\x03\x02\x02\x02\u0CC2\u0CC3\x03\x02\x02\x02\u0CC3" +
        "\u0CC5\x03\x02\x02\x02\u0CC4\u0CB8\x03\x02\x02\x02\u0CC4\u0CC5\x03\x02" +
        "\x02\x02\u0CC5\u01CD\x03\x02\x02\x02\u0CC6\u0CC7\x07\u01EB\x02\x02\u0CC7" +
        "\u0CC8\x05\u049C\u024F\x02\u0CC8\u01CF\x03\x02\x02\x02\u0CC9\u0CCB\t+" +
        "\x02\x02\u0CCA\u0CCC\x07\u0105\x02\x02\u0CCB\u0CCA\x03\x02\x02\x02\u0CCB" +
        "\u0CCC\x03\x02\x02\x02\u0CCC\u0CCE\x03\x02\x02\x02\u0CCD\u0CCF\x07\u0100" +
        "\x02\x02\u0CCE\u0CCD\x03\x02\x02\x02\u0CCE\u0CCF\x03\x02\x02\x02\u0CCF" +
        "\u0CD1\x03\x02\x02\x02\u0CD0\u0CD2\x05\u0444\u0223\x02\u0CD1\u0CD0\x03";
    Cobol85Parser._serializedATNSegment7 = "\x02\x02\x02\u0CD2\u0CD3\x03\x02\x02\x02\u0CD3\u0CD1\x03\x02\x02\x02\u0CD3" +
        "\u0CD4\x03\x02\x02\x02\u0CD4\u01D1\x03\x02\x02\x02\u0CD5\u0CD7\t\x1C\x02" +
        "\x02\u0CD6\u0CD8\x07\u0100\x02\x02\u0CD7\u0CD6\x03\x02\x02\x02\u0CD7\u0CD8" +
        "\x03\x02\x02\x02\u0CD8\u0CD9\x03\x02\x02\x02\u0CD9\u0CDA\x05\u01D4\xEB" +
        "\x02\u0CDA\u01D3\x03\x02\x02\x02\u0CDB\u0CDD\x05\u01D6\xEC\x02\u0CDC\u0CDB" +
        "\x03\x02\x02\x02\u0CDD\u0CDE\x03\x02\x02\x02\u0CDE\u0CDC\x03\x02\x02\x02" +
        "\u0CDE\u0CDF\x03\x02\x02\x02\u0CDF\u0CE1\x03\x02\x02\x02\u0CE0\u0CE2\x05" +
        "\u01D8\xED\x02\u0CE1\u0CE0\x03\x02\x02\x02\u0CE1\u0CE2\x03\x02\x02\x02" +
        "\u0CE2\u0CE4\x03\x02\x02\x02\u0CE3\u0CDC\x03\x02\x02\x02\u0CE4\u0CE5\x03" +
        "\x02\x02\x02\u0CE5\u0CE3\x03\x02\x02\x02\u0CE5\u0CE6\x03\x02\x02\x02\u0CE6" +
        "\u01D5\x03\x02\x02\x02\u0CE7\u0CF8\x07\u0216\x02\x02\u0CE8\u0CF8\x07\u022F" +
        "\x02\x02\u0CE9\u0CF8\x07\u022E\x02\x02\u0CEA\u0CF8\x07\u0228\x02\x02\u0CEB" +
        "\u0CF8\x07\u0213\x02\x02\u0CEC\u0CF8\x07\u0219\x02\x02\u0CED\u0CF8\x07" +
        "\u0212\x02\x02\u0CEE\u0CF8\x07\u0210\x02\x02\u0CEF\u0CF8\x07\u0211\x02" +
        "\x02\u0CF0\u0CF8\x07\u0220\x02\x02\u0CF1\u0CF8\x07\u0227\x02\x02\u0CF2" +
        "\u0CF8\x07\u0225\x02\x02\u0CF3\u0CF8\x07\u0221\x02\x02\u0CF4\u0CF8\x07" +
        "\u021E\x02\x02\u0CF5\u0CF8\x07\u0222\x02\x02\u0CF6\u0CF8\x05\u049C\u024F" +
        "\x02\u0CF7\u0CE7\x03\x02\x02\x02\u0CF7\u0CE8\x03\x02\x02\x02\u0CF7\u0CE9" +
        "\x03\x02\x02\x02\u0CF7\u0CEA\x03\x02\x02\x02\u0CF7\u0CEB\x03\x02\x02\x02" +
        "\u0CF7\u0CEC\x03\x02\x02\x02\u0CF7\u0CED\x03\x02\x02\x02\u0CF7\u0CEE\x03" +
        "\x02\x02\x02\u0CF7\u0CEF\x03\x02\x02\x02\u0CF7\u0CF0\x03\x02\x02\x02\u0CF7" +
        "\u0CF1\x03\x02\x02\x02\u0CF7\u0CF2\x03\x02\x02\x02\u0CF7\u0CF3\x03\x02" +
        "\x02\x02\u0CF7\u0CF4\x03\x02\x02\x02\u0CF7\u0CF5\x03\x02\x02\x02\u0CF7" +
        "\u0CF6\x03\x02\x02\x02\u0CF8\u01D7\x03\x02\x02\x02\u0CF9\u0CFA\x07\u0220" +
        "\x02\x02\u0CFA\u0CFB\x05\u049C\u024F\x02\u0CFB\u0CFC\x07\u0227\x02\x02" +
        "\u0CFC\u01D9\x03\x02\x02\x02\u0CFD\u0CFF\x07\u017A\x02\x02\u0CFE\u0CFD" +
        "\x03\x02\x02\x02\u0CFE\u0CFF\x03\x02\x02\x02\u0CFF\u0D01\x03\x02\x02\x02" +
        "\u0D00\u0D02\x073\x02\x02\u0D01\u0D00\x03\x02\x02\x02\u0D01\u0D02\x03" +
        "\x02\x02\x02\u0D02\u0D03\x03\x02\x02\x02\u0D03\u0D04\t,\x02\x02\u0D04" +
        "\u01DB\x03\x02\x02\x02\u0D05\u0D06\x07\u017B\x02\x02\u0D06\u0D07\x07\x18" +
        "\x02\x02\u0D07\u01DD\x03\x02\x02\x02\u0D08\u0D09\x07\u017F\x02\x02\u0D09" +
        "\u0D0A\x05\u046A\u0236\x02\u0D0A\u01DF\x03\x02\x02\x02\u0D0B\u0D0C\x07" +
        "\u018A\x02\x02\u0D0C\u0D0F\x05\u0444\u0223\x02\u0D0D\u0D0E\t\x06\x02\x02" +
        "\u0D0E\u0D10\x05\u0444\u0223\x02\u0D0F\u0D0D\x03\x02\x02\x02\u0D0F\u0D10" +
        "\x03\x02\x02\x02\u0D10\u01E1\x03\x02\x02\x02\u0D11\u0D13\x07\u01B8\x02" +
        "\x02\u0D12\u0D14\x07\u0100\x02\x02\u0D13\u0D12\x03\x02\x02\x02\u0D13\u0D14" +
        "\x03\x02\x02\x02\u0D14\u0D16\x03\x02\x02\x02\u0D15\u0D11\x03\x02\x02\x02" +
        "\u0D15\u0D16\x03\x02\x02\x02\u0D16\u0D17\x03\x02\x02\x02\u0D17\u0D1C\t" +
        "\t\x02\x02\u0D18\u0D1A\x07\u01AD\x02\x02\u0D19\u0D1B\x07@\x02\x02\u0D1A" +
        "\u0D19\x03\x02\x02\x02\u0D1A\u0D1B\x03\x02\x02\x02\u0D1B\u0D1D\x03\x02" +
        "\x02\x02\u0D1C\u0D18\x03\x02\x02\x02\u0D1C\u0D1D\x03\x02\x02\x02\u0D1D" +
        "\u01E3\x03\x02\x02\x02\u0D1E\u0D20\t-\x02\x02\u0D1F\u0D21\t.\x02\x02\u0D20" +
        "\u0D1F\x03\x02\x02\x02\u0D20\u0D21\x03\x02\x02\x02\u0D21\u01E5\x03\x02" +
        "\x02\x02\u0D22\u0D24\x07\u0100\x02\x02\u0D23\u0D22\x03\x02\x02\x02\u0D23" +
        "\u0D24\x03\x02\x02\x02\u0D24\u0D25\x03\x02\x02\x02\u0D25\u0D26\x07\u01E4" +
        "\x02\x02\u0D26\u01E7\x03\x02\x02\x02\u0D27\u0D29\x07\u01F2\x02\x02\u0D28" +
        "\u0D2A\x07\u0100\x02\x02\u0D29\u0D28\x03\x02\x02\x02\u0D29\u0D2A\x03\x02" +
        "\x02\x02\u0D2A\u0D2B\x03\x02\x02\x02\u0D2B\u0D2C\t/\x02\x02\u0D2C\u01E9" +
        "\x03\x02\x02\x02\u0D2D\u0D2F\x07\u0100\x02\x02\u0D2E\u0D2D\x03\x02\x02" +
        "\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D30\x03\x02\x02\x02\u0D30\u0D31" +
        "\x07\u01F3\x02\x02\u0D31\u01EB\x03\x02\x02\x02\u0D32\u0D34\x07\u01FA\x02" +
        "\x02\u0D33\u0D35\x07\u0100\x02\x02\u0D34\u0D33\x03\x02\x02\x02\u0D34\u0D35" +
        "\x03\x02\x02\x02\u0D35\u0D37\x03\x02\x02\x02\u0D36\u0D32\x03\x02\x02\x02" +
        "\u0D36\u0D37\x03\x02\x02\x02\u0D37\u0D59\x03\x02\x02\x02\u0D38\u0D3A\x07" +
        ",\x02\x02\u0D39\u0D3B\t0\x02\x02\u0D3A\u0D39\x03\x02\x02\x02\u0D3A\u0D3B" +
        "\x03\x02\x02\x02\u0D3B\u0D5A\x03\x02\x02\x02\u0D3C\u0D5A\x07-\x02\x02" +
        "\u0D3D\u0D5A\x07R\x02\x02\u0D3E\u0D5A\x07S\x02\x02\u0D3F\u0D5A\x07T\x02" +
        "\x02\u0D40\u0D5A\x07U\x02\x02\u0D41\u0D5A\x07V\x02\x02\u0D42\u0D5A\x07" +
        "W\x02\x02\u0D43\u0D5A\x07X\x02\x02\u0D44\u0D5A\x07Y\x02\x02\u0D45\u0D5A" +
        "\x07Z\x02\x02\u0D46\u0D5A\x07[\x02\x02\u0D47\u0D5A\x07\\\x02\x02\u0D48" +
        "\u0D5A\x07]\x02\x02\u0D49\u0D5A\x07d\x02\x02\u0D4A\u0D5A\x07q\x02\x02" +
        "\u0D4B\u0D5A\x07\x90\x02\x02\u0D4C\u0D5A\x07\x91\x02\x02\u0D4D\u0D5A\x07" +
        "\x95\x02\x02\u0D4E\u0D5A\x07\xC4\x02\x02\u0D4F\u0D5A\x07\xDD\x02\x02\u0D50" +
        "\u0D5A\x07\xF2\x02\x02\u0D51\u0D5A\x07\u0103\x02\x02\u0D52\u0D5A\x07\u0120" +
        "\x02\x02\u0D53\u0D5A\x07\u0132\x02\x02\u0D54\u0D5A\x07\u0154\x02\x02\u0D55" +
        "\u0D5A\x07\u015F\x02\x02\u0D56\u0D5A\x07\u0167\x02\x02\u0D57\u0D5A\x07" +
        "\u0177\x02\x02\u0D58\u0D5A\x07\u01DB\x02\x02\u0D59\u0D38\x03\x02\x02\x02" +
        "\u0D59\u0D3C\x03\x02\x02\x02\u0D59\u0D3D\x03\x02\x02\x02\u0D59\u0D3E\x03" +
        "\x02\x02\x02\u0D59\u0D3F\x03\x02\x02\x02\u0D59\u0D40\x03\x02\x02\x02\u0D59" +
        "\u0D41\x03\x02\x02\x02\u0D59\u0D42\x03\x02\x02\x02\u0D59\u0D43\x03\x02" +
        "\x02\x02\u0D59\u0D44\x03\x02\x02\x02\u0D59\u0D45\x03\x02\x02\x02\u0D59" +
        "\u0D46\x03\x02\x02\x02\u0D59\u0D47\x03\x02\x02\x02\u0D59\u0D48\x03\x02" +
        "\x02\x02\u0D59\u0D49\x03\x02\x02\x02\u0D59\u0D4A\x03\x02\x02\x02\u0D59" +
        "\u0D4B\x03\x02\x02\x02\u0D59\u0D4C\x03\x02\x02\x02\u0D59\u0D4D\x03\x02" +
        "\x02\x02\u0D59\u0D4E\x03\x02\x02\x02\u0D59\u0D4F\x03\x02\x02\x02\u0D59" +
        "\u0D50\x03\x02\x02\x02\u0D59\u0D51\x03\x02\x02\x02\u0D59\u0D52\x03\x02" +
        "\x02\x02\u0D59\u0D53\x03\x02\x02\x02\u0D59\u0D54\x03\x02\x02\x02\u0D59" +
        "\u0D55\x03\x02\x02\x02\u0D59\u0D56\x03\x02\x02\x02\u0D59\u0D57\x03\x02" +
        "\x02\x02\u0D59\u0D58\x03\x02\x02\x02\u0D5A\u01ED\x03\x02\x02\x02\u0D5B" +
        "\u0D5C\x07\u01FC\x02\x02\u0D5C\u0D5E\t1\x02\x02\u0D5D\u0D5F\x07\u0145" +
        "\x02\x02\u0D5E\u0D5D\x03\x02\x02\x02\u0D5E\u0D5F\x03\x02\x02\x02\u0D5F" +
        "\u0D62\x03\x02\x02\x02\u0D60\u0D63\x05\u0494\u024B\x02\u0D61\u0D63\x05" +
        "\u046A\u0236\x02\u0D62\u0D60\x03\x02\x02\x02\u0D62\u0D61\x03\x02\x02\x02" +
        "\u0D63\u01EF\x03\x02\x02\x02\u0D64\u0D66\x07\u01FD\x02\x02\u0D65\u0D67" +
        "\x07\u0100\x02\x02\u0D66\u0D65\x03\x02\x02\x02\u0D66\u0D67\x03\x02\x02" +
        "\x02\u0D67\u0D6D\x03\x02\x02\x02\u0D68\u0D6A\x07\u01FE\x02\x02\u0D69\u0D6B" +
        "\x07\x17\x02\x02\u0D6A\u0D69\x03\x02\x02\x02\u0D6A\u0D6B\x03\x02\x02\x02" +
        "\u0D6B\u0D6D\x03\x02\x02\x02\u0D6C\u0D64\x03\x02\x02\x02\u0D6C\u0D68\x03" +
        "\x02\x02\x02\u0D6C\u0D6D\x03\x02\x02\x02\u0D6D\u0D6E\x03\x02\x02\x02\u0D6E" +
        "\u0D75\x05\u01F2\xFA\x02\u0D6F\u0D71\x07\u0213\x02\x02\u0D70\u0D6F\x03" +
        "\x02\x02\x02\u0D70\u0D71\x03\x02\x02\x02\u0D71\u0D72\x03\x02\x02\x02\u0D72" +
        "\u0D74\x05\u01F2\xFA\x02\u0D73\u0D70\x03\x02\x02\x02\u0D74\u0D77\x03\x02" +
        "\x02\x02\u0D75\u0D73\x03\x02\x02\x02\u0D75\u0D76\x03\x02\x02\x02\u0D76" +
        "\u01F1\x03\x02\x02\x02\u0D77\u0D75\x03\x02\x02\x02\u0D78\u0D7A\x05\u01F4" +
        "\xFB\x02\u0D79\u0D7B\x05\u01F6\xFC\x02\u0D7A\u0D79\x03\x02\x02\x02\u0D7A" +
        "\u0D7B\x03\x02\x02\x02\u0D7B\u01F3\x03\x02\x02\x02\u0D7C\u0D7F\x05\u0496" +
        "\u024C\x02\u0D7D\u0D7F\x05\u0494\u024B\x02\u0D7E\u0D7C\x03\x02\x02\x02" +
        "\u0D7E\u0D7D\x03\x02\x02\x02\u0D7F\u01F5\x03\x02\x02\x02\u0D80\u0D81\t" +
        "\x06\x02\x02\u0D81\u0D82\x05\u0496\u024C\x02\u0D82\u01F7\x03\x02\x02\x02" +
        "\u0D83\u0D85\x07\u0204\x02\x02\u0D84\u0D83\x03\x02\x02\x02\u0D84\u0D85" +
        "\x03\x02\x02\x02\u0D85\u0D86\x03\x02\x02\x02\u0D86\u0D87\x07\u0123\x02" +
        "\x02\u0D87\u0D88\x071\x02\x02\u0D88\u01F9\x03\x02\x02\x02\u0D89\u0D8A" +
        "\x07\u0166\x02\x02\u0D8A\u0D8C\x07\x93\x02\x02\u0D8B\u0D8D\x05\u01FC\xFF" +
        "\x02\u0D8C\u0D8B\x03\x02\x02\x02\u0D8C\u0D8D\x03\x02\x02\x02\u0D8D\u0D8F" +
        "\x03\x02\x02\x02\u0D8E\u0D90\x05\u01FE\u0100\x02\u0D8F\u0D8E\x03\x02\x02" +
        "\x02\u0D8F\u0D90\x03\x02\x02\x02\u0D90\u0D91\x03\x02\x02\x02\u0D91\u0D93" +
        "\x07\u0218\x02\x02\u0D92\u0D94\x05\u020A\u0106\x02\u0D93\u0D92\x03\x02" +
        "\x02\x02\u0D93\u0D94\x03\x02\x02\x02\u0D94\u0D95\x03\x02\x02\x02\u0D95" +
        "\u0D96\x05\u0210\u0109\x02\u0D96\u01FB\x03\x02\x02\x02\u0D97\u0D99\t2" +
        "\x02\x02\u0D98\u0D9A\x05\u0200\u0101\x02\u0D99\u0D98\x03\x02\x02\x02\u0D9A" +
        "\u0D9B\x03\x02\x02\x02\u0D9B\u0D99\x03\x02\x02\x02\u0D9B\u0D9C\x03\x02" +
        "\x02\x02\u0D9C\u01FD\x03\x02\x02\x02\u0D9D\u0D9E\t3\x02\x02\u0D9E\u0D9F" +
        "\x05\u046A\u0236\x02\u0D9F\u01FF\x03\x02\x02\x02\u0DA0\u0DA3\x05\u0202" +
        "\u0102\x02\u0DA1\u0DA3\x05\u0206\u0104\x02\u0DA2\u0DA0\x03\x02\x02\x02" +
        "\u0DA2\u0DA1\x03\x02\x02\x02\u0DA3\u0201\x03\x02\x02\x02\u0DA4\u0DA6\x07" +
        "3\x02\x02\u0DA5\u0DA4\x03\x02\x02\x02\u0DA5\u0DA6\x03\x02\x02\x02\u0DA6" +
        "\u0DA7\x03\x02\x02\x02\u0DA7\u0DA9\x07\u0182\x02\x02\u0DA8\u0DA5\x03\x02" +
        "\x02\x02\u0DA8\u0DA9\x03\x02\x02\x02\u0DA9\u0DAB\x03\x02\x02\x02\u0DAA" +
        "\u0DAC\x05\u0204\u0103\x02\u0DAB\u0DAA\x03\x02\x02\x02\u0DAC\u0DAD\x03" +
        "\x02\x02\x02\u0DAD\u0DAB\x03\x02\x02\x02\u0DAD\u0DAE\x03\x02\x02\x02\u0DAE" +
        "\u0203\x03\x02\x02\x02\u0DAF\u0DB1\x07\u014A\x02\x02\u0DB0\u0DAF\x03\x02" +
        "\x02\x02\u0DB0\u0DB1\x03\x02\x02\x02\u0DB1\u0DB4\x03\x02\x02\x02\u0DB2" +
        "\u0DB5\x05\u0434\u021B\x02\u0DB3\u0DB5\x05\u0470\u0239\x02\u0DB4\u0DB2" +
        "\x03\x02\x02\x02\u0DB4\u0DB3\x03\x02\x02\x02\u0DB5\u0DB8\x03\x02\x02\x02" +
        "\u0DB6\u0DB8\x07\x16\x02\x02\u0DB7\u0DB0\x03\x02\x02\x02\u0DB7\u0DB6\x03" +
        "\x02\x02\x02\u0DB8\u0205\x03\x02\x02\x02\u0DB9\u0DBB\x073\x02\x02\u0DBA" +
        "\u0DB9\x03\x02\x02\x02\u0DBA\u0DBB\x03\x02\x02\x02\u0DBB\u0DBC\x03\x02" +
        "\x02\x02\u0DBC\u0DBE\x07\u01FD\x02\x02\u0DBD\u0DBF\x05\u0208\u0105\x02" +
        "\u0DBE\u0DBD\x03\x02\x02\x02\u0DBF\u0DC0\x03\x02\x02\x02\u0DC0\u0DBE\x03" +
        "\x02\x02\x02\u0DC0\u0DC1\x03\x02\x02\x02\u0DC1\u0207\x03\x02\x02\x02\u0DC2" +
        "\u0DC6\x05\u0434\u021B\x02\u0DC3\u0DC6\x05\u0496\u024C\x02\u0DC4\u0DC6" +
        "\x07\x16\x02\x02\u0DC5\u0DC2\x03\x02\x02\x02\u0DC5\u0DC3\x03\x02\x02\x02" +
        "\u0DC5\u0DC4\x03\x02\x02\x02\u0DC6\u0209\x03\x02\x02\x02\u0DC7\u0DC8\x07" +
        "\x81\x02\x02\u0DC8\u0DCA\x07\u0218\x02\x02\u0DC9\u0DCB\x05\u020C\u0107" +
        "\x02\u0DCA\u0DC9\x03\x02\x02\x02\u0DCB\u0DCC\x03\x02\x02\x02\u0DCC\u0DCA" +
        "\x03\x02\x02\x02\u0DCC\u0DCD\x03\x02\x02\x02\u0DCD\u0DCE\x03\x02\x02\x02" +
        "\u0DCE\u0DCF\x07\xA0\x02\x02\u0DCF\u0DD0\x07\x81\x02\x02\u0DD0\u0DD1\x07" +
        "\u0218\x02\x02\u0DD1\u020B\x03\x02\x02\x02\u0DD2\u0DD3\x05\u020E\u0108" +
        "\x02\u0DD3\u0DD4\x07\u0218\x02\x02\u0DD4\u0DD5\x05\u03DC\u01EF\x02\u0DD5" +
        "\u0DD6\x07\u0218\x02\x02\u0DD6\u0DD7\x05\u0214\u010B\x02\u0DD7\u020D\x03" +
        "\x02\x02\x02\u0DD8\u0DD9\x05\u048C\u0247\x02\u0DD9\u0DDB\x07\u01A5\x02" +
        "\x02\u0DDA\u0DDC\x05\u049C\u024F\x02\u0DDB\u0DDA\x03\x02\x02\x02\u0DDB" +
        "\u0DDC\x03\x02\x02\x02\u0DDC\u020F\x03\x02\x02\x02\u0DDD\u0DE1\x05\u0214" +
        "\u010B\x02\u0DDE\u0DE0\x05\u0212\u010A\x02\u0DDF\u0DDE\x03\x02\x02\x02" +
        "\u0DE0\u0DE3\x03\x02\x02\x02\u0DE1\u0DDF\x03\x02\x02\x02\u0DE1\u0DE2\x03" +
        "\x02\x02\x02\u0DE2\u0211\x03\x02\x02\x02\u0DE3\u0DE1\x03\x02\x02\x02\u0DE4" +
        "\u0DE5\x05\u020E\u0108\x02\u0DE5\u0DE6\x07\u0218\x02\x02\u0DE6\u0DE7\x05" +
        "\u0214\u010B\x02\u0DE7\u0213\x03\x02\x02\x02\u0DE8\u0DEA\x05\u0218\u010D" +
        "\x02\u0DE9\u0DE8\x03\x02\x02\x02\u0DEA\u0DED\x03\x02\x02\x02\u0DEB\u0DE9" +
        "\x03\x02\x02\x02\u0DEB\u0DEC\x03\x02\x02\x02\u0DEC\u0DF1\x03\x02\x02\x02" +
        "\u0DED\u0DEB\x03\x02\x02\x02\u0DEE\u0DF0\x05\u0216\u010C\x02\u0DEF\u0DEE" +
        "\x03\x02\x02\x02\u0DF0\u0DF3\x03\x02\x02\x02\u0DF1\u0DEF\x03\x02\x02\x02" +
        "\u0DF1\u0DF2\x03\x02\x02\x02\u0DF2\u0215\x03\x02\x02\x02\u0DF3\u0DF1\x03" +
        "\x02\x02\x02\u0DF4\u0DF5\x05\u047E\u0240\x02\u0DF5\u0DFD\x07\u0218\x02" +
        "\x02\u0DF6\u0DFE\x05\u0236\u011C\x02\u0DF7\u0DF9\x05\u0218\u010D\x02\u0DF8" +
        "\u0DF7\x03\x02\x02\x02\u0DF9\u0DFC\x03\x02\x02\x02\u0DFA\u0DF8\x03\x02" +
        "\x02\x02\u0DFA\u0DFB\x03\x02\x02\x02\u0DFB\u0DFE\x03\x02\x02\x02\u0DFC" +
        "\u0DFA\x03\x02\x02\x02\u0DFD\u0DF6\x03\x02\x02\x02\u0DFD\u0DFA\x03\x02" +
        "\x02\x02\u0DFE\u0217\x03\x02\x02\x02\u0DFF\u0E01\x05\u021A\u010E\x02\u0E00" +
        "\u0DFF\x03\x02\x02\x02\u0E01\u0E04\x03\x02\x02\x02\u0E02\u0E00\x03\x02" +
        "\x02\x02\u0E02\u0E03\x03\x02\x02\x02\u0E03\u0E05\x03\x02\x02\x02\u0E04" +
        "\u0E02\x03\x02\x02\x02\u0E05\u0E06\x07\u0218\x02\x02\u0E06\u0219\x03\x02" +
        "\x02\x02\u0E07\u0E39\x05\u021C\u010F\x02\u0E08\u0E39\x05\u0226\u0114\x02" +
        "\u0E09\u0E39\x05\u0238\u011D\x02\u0E0A\u0E39\x05\u023C\u011F\x02\u0E0B" +
        "\u0E39\x05\u0250\u0129\x02\u0E0C\u0E39\x05\u0254\u012B\x02\u0E0D\u0E39" +
        "\x05\u0266\u0134\x02\u0E0E\u0E39\x05\u026A\u0136\x02\u0E0F\u0E39\x05\u026C" +
        "\u0137\x02\u0E10\u0E39\x05\u026E\u0138\x02\u0E11\u0E39\x05\u0270\u0139" +
        "\x02\u0E12\u0E39\x05\u027A\u013E\x02\u0E13\u0E39\x05\u028A\u0146\x02\u0E14" +
        "\u0E39\x05\u028C\u0147\x02\u0E15\u0E39\x05\u028E\u0148\x02\u0E16\u0E39" +
        "\x05\u02A8\u0155\x02\u0E17\u0E39\x05\u02A2\u0152\x02\u0E18\u0E39\x05\u02A4" +
        "\u0153\x02\u0E19\u0E39\x05\u02A6\u0154\x02\u0E1A\u0E39\x05\u02AC\u0157" +
        "\x02\u0E1B\u0E39\x05\u02AE\u0158\x02\u0E1C\u0E39\x05\u02B0\u0159\x02\u0E1D" +
        "\u0E39\x05\u02B2\u015A\x02\u0E1E\u0E39\x05\u02B8\u015D\x02\u0E1F\u0E39" +
        "\x05\u02BE\u0160\x02\u0E20\u0E39\x05\u02C4\u0163\x02\u0E21\u0E39\x05\u02C6" +
        "\u0164\x02\u0E22\u0E39\x05\u02E4\u0173\x02\u0E23\u0E39\x05\u02F8\u017D" +
        "\x02\u0E24\u0E39\x05\u0302\u0182\x02\u0E25\u0E39\x05\u030E\u0188\x02\u0E26" +
        "\u0E39\x05\u031C\u018F\x02\u0E27\u0E39\x05\u0336\u019C\x02\u0E28\u0E39" +
        "\x05\u0338\u019D\x02\u0E29\u0E39\x05\u0340\u01A1\x02\u0E2A\u0E39\x05\u0356" +
        "\u01AC\x02\u0E2B\u0E39\x05\u0358\u01AD\x02\u0E2C\u0E39\x05\u035C\u01AF" +
        "\x02\u0E2D\u0E39\x05\u0360\u01B1\x02\u0E2E\u0E39\x05\u0366\u01B4\x02\u0E2F" +
        "\u0E39\x05\u037A\u01BE\x02\u0E30\u0E39\x05\u0386\u01C4\x02\u0E31\u0E39" +
        "\x05\u03A0\u01D1\x02\u0E32\u0E39\x05\u03A4\u01D3\x02\u0E33\u0E39\x05\u03A6" +
        "\u01D4\x02\u0E34\u0E39\x05\u03B4\u01DB\x02\u0E35\u0E39\x05\u03C6\u01E4" +
        "\x02\u0E36\u0E39\x05\u03C8\u01E5\x02\u0E37\u0E39\x05\u03E6\u01F4\x02\u0E38" +
        "\u0E07\x03\x02\x02\x02\u0E38\u0E08\x03\x02\x02\x02\u0E38\u0E09\x03\x02" +
        "\x02\x02\u0E38\u0E0A\x03\x02\x02\x02\u0E38\u0E0B\x03\x02\x02\x02\u0E38" +
        "\u0E0C\x03\x02\x02\x02\u0E38\u0E0D\x03\x02\x02\x02\u0E38\u0E0E\x03\x02" +
        "\x02\x02\u0E38\u0E0F\x03\x02\x02\x02\u0E38\u0E10\x03\x02\x02\x02\u0E38" +
        "\u0E11\x03\x02\x02\x02\u0E38\u0E12\x03\x02\x02\x02\u0E38\u0E13\x03\x02" +
        "\x02\x02\u0E38\u0E14\x03\x02\x02\x02\u0E38\u0E15\x03\x02\x02\x02\u0E38" +
        "\u0E16\x03\x02\x02\x02\u0E38\u0E17\x03\x02\x02\x02\u0E38\u0E18\x03\x02" +
        "\x02\x02\u0E38\u0E19\x03\x02\x02\x02\u0E38\u0E1A\x03\x02\x02\x02\u0E38" +
        "\u0E1B\x03\x02\x02\x02\u0E38\u0E1C\x03\x02\x02\x02\u0E38\u0E1D\x03\x02" +
        "\x02\x02\u0E38\u0E1E\x03\x02\x02\x02\u0E38\u0E1F\x03\x02\x02\x02\u0E38" +
        "\u0E20\x03\x02\x02\x02\u0E38\u0E21\x03\x02\x02\x02\u0E38\u0E22\x03\x02" +
        "\x02\x02\u0E38\u0E23\x03\x02\x02\x02\u0E38\u0E24\x03\x02\x02\x02\u0E38" +
        "\u0E25\x03\x02\x02\x02\u0E38\u0E26\x03\x02\x02\x02\u0E38\u0E27\x03\x02" +
        "\x02\x02\u0E38\u0E28\x03\x02\x02\x02\u0E38\u0E29\x03\x02\x02\x02\u0E38" +
        "\u0E2A\x03\x02\x02\x02\u0E38\u0E2B\x03\x02\x02\x02\u0E38\u0E2C\x03\x02" +
        "\x02\x02\u0E38\u0E2D\x03\x02\x02\x02\u0E38\u0E2E\x03\x02\x02\x02\u0E38" +
        "\u0E2F\x03\x02\x02\x02\u0E38\u0E30\x03\x02\x02\x02\u0E38\u0E31\x03\x02" +
        "\x02\x02\u0E38\u0E32\x03\x02\x02\x02\u0E38\u0E33\x03\x02\x02\x02\u0E38" +
        "\u0E34\x03\x02\x02\x02\u0E38\u0E35\x03\x02\x02\x02\u0E38\u0E36\x03\x02" +
        "\x02\x02\u0E38\u0E37\x03\x02\x02\x02\u0E39\u021B\x03\x02\x02\x02\u0E3A" +
        "\u0E3B\x07\x04\x02\x02\u0E3B\u0E40\x05\u0434\u021B\x02\u0E3C\u0E41\x05" +
        "\u021E\u0110\x02\u0E3D\u0E41\x05\u0222\u0112\x02\u0E3E\u0E41\x05\u0220" +
        "\u0111\x02\u0E3F\u0E41\x05\u0224\u0113\x02\u0E40\u0E3C\x03\x02\x02\x02" +
        "\u0E40\u0E3D\x03\x02\x02\x02\u0E40\u0E3E\x03\x02\x02\x02\u0E40\u0E3F\x03" +
        "\x02\x02\x02\u0E40\u0E41\x03\x02\x02\x02\u0E41\u0E43\x03\x02\x02\x02\u0E42" +
        "\u0E44\x05\u0406\u0204\x02\u0E43\u0E42\x03\x02\x02\x02\u0E43\u0E44\x03" +
        "\x02\x02\x02\u0E44\u0E46\x03\x02\x02\x02\u0E45\u0E47\x05\u0408\u0205\x02" +
        "\u0E46\u0E45\x03\x02\x02\x02\u0E46\u0E47\x03\x02\x02\x02\u0E47\u0E49\x03" +
        "\x02\x02\x02\u0E48\u0E4A\x07\xA1\x02\x02\u0E49\u0E48\x03\x02\x02\x02\u0E49" +
        "\u0E4A\x03\x02\x02\x02\u0E4A\u021D\x03\x02\x02\x02\u0E4B\u0E5F\x07\xD9" +
        "\x02\x02\u0E4C\u0E4E\x07q\x02\x02\u0E4D\u0E4F\x07\u0209\x02\x02\u0E4E" +
        "\u0E4D\x03\x02\x02\x02\u0E4E\u0E4F\x03\x02\x02\x02\u0E4F\u0E60\x03\x02" +
        "\x02\x02\u0E50\u0E52\x07t\x02\x02\u0E51\u0E53\x07\u020A\x02\x02\u0E52" +
        "\u0E51\x03\x02\x02\x02\u0E52\u0E53\x03\x02\x02\x02\u0E53\u0E60\x03\x02" +
        "\x02\x02\u0E54\u0E60\x07u\x02\x02\u0E55\u0E60\x07\u01E7\x02\x02\u0E56" +
        "\u0E60\x07\u01E8\x02\x02\u0E57\u0E59\x07\u01EC\x02\x02\u0E58\u0E5A\x07" +
        "\u012A\x02\x02\u0E59\u0E58\x03\x02\x02\x02\u0E59\u0E5A\x03\x02\x02\x02" +
        "\u0E5A\u0E60\x03\x02\x02\x02\u0E5B\u0E60\x07\u01ED\x02\x02\u0E5C\u0E60" +
        "\x07\u0208\x02\x02\u0E5D\u0E60\x07\u0209\x02\x02\u0E5E\u0E60\x07\u020A" +
        "\x02\x02\u0E5F\u0E4C\x03\x02\x02\x02\u0E5F\u0E50\x03\x02\x02\x02\u0E5F" +
        "\u0E54\x03\x02\x02\x02\u0E5F\u0E55\x03\x02\x02\x02\u0E5F\u0E56\x03\x02" +
        "\x02\x02\u0E5F\u0E57\x03\x02\x02\x02\u0E5F\u0E5B\x03\x02\x02\x02\u0E5F" +
        "\u0E5C\x03\x02\x02\x02\u0E5F\u0E5D\x03\x02\x02\x02\u0E5F\u0E5E\x03\x02" +
        "\x02\x02\u0E60\u021F\x03\x02\x02\x02\u0E61\u0E62\x07\xD9\x02\x02\u0E62" +
        "\u0E63\x05\u047C\u023F\x02\u0E63\u0221\x03\x02\x02\x02\u0E64\u0E65\x07" +
        "\xD9\x02\x02\u0E65\u0E66\x07\xC1\x02\x02\u0E66\u0E67\x07\u0105\x02\x02" +
        "\u0E67\u0223\x03\x02\x02\x02\u0E68\u0E6A\x07\u0129\x02\x02\u0E69\u0E68" +
        "\x03\x02\x02\x02\u0E69\u0E6A\x03\x02\x02\x02\u0E6A\u0E6B\x03\x02\x02\x02" +
        "\u0E6B\u0E6C\x07k\x02\x02\u0E6C\u0225\x03\x02\x02\x02\u0E6D\u0E71\x07" +
        "\x06\x02\x02\u0E6E\u0E72\x05\u0228\u0115\x02\u0E6F\u0E72\x05\u022A\u0116" +
        "\x02\u0E70\u0E72\x05\u022C\u0117\x02\u0E71\u0E6E\x03\x02\x02\x02\u0E71" +
        "\u0E6F\x03\x02\x02\x02\u0E71\u0E70\x03\x02\x02\x02\u0E72\u0E74\x03\x02" +
        "\x02\x02\u0E73\u0E75\x05\u0402\u0202\x02\u0E74\u0E73\x03\x02\x02\x02\u0E74" +
        "\u0E75\x03\x02\x02\x02\u0E75\u0E77\x03\x02\x02\x02\u0E76\u0E78\x05\u0404" +
        "\u0203\x02\u0E77\u0E76\x03\x02\x02\x02\u0E77\u0E78\x03\x02\x02\x02\u0E78" +
        "\u0E7A\x03\x02\x02\x02\u0E79\u0E7B\x07\xA2\x02\x02\u0E7A\u0E79\x03\x02" +
        "\x02\x02\u0E7A\u0E7B\x03\x02\x02\x02\u0E7B\u0227\x03\x02\x02\x02\u0E7C" +
        "\u0E7E\x05\u022E\u0118\x02\u0E7D\u0E7C\x03\x02\x02\x02\u0E7E\u0E7F\x03" +
        "\x02\x02\x02\u0E7F\u0E7D\x03\x02\x02\x02\u0E7F\u0E80\x03\x02\x02\x02\u0E80" +
        "\u0E81\x03\x02\x02\x02\u0E81\u0E83\x07\u01EB\x02\x02\u0E82\u0E84\x05\u0230" +
        "\u0119\x02\u0E83\u0E82\x03\x02\x02\x02\u0E84\u0E85\x03\x02\x02\x02\u0E85" +
        "\u0E83\x03\x02\x02\x02\u0E85\u0E86\x03\x02\x02\x02\u0E86\u0229\x03\x02" +
        "\x02\x02\u0E87\u0E89\x05\u022E\u0118\x02\u0E88\u0E87\x03\x02\x02\x02\u0E89" +
        "\u0E8A\x03\x02\x02\x02\u0E8A\u0E88\x03\x02\x02\x02\u0E8A\u0E8B\x03\x02" +
        "\x02\x02\u0E8B\u0E92\x03\x02\x02\x02\u0E8C\u0E8E\x07\u01EB\x02\x02\u0E8D" +
        "\u0E8F\x05\u0232\u011A\x02\u0E8E\u0E8D\x03\x02\x02\x02\u0E8F\u0E90\x03" +
        "\x02\x02\x02\u0E90\u0E8E\x03\x02\x02\x02\u0E90\u0E91\x03\x02\x02\x02\u0E91" +
        "\u0E93\x03\x02\x02\x02\u0E92\u0E8C\x03\x02\x02\x02\u0E92\u0E93\x03\x02" +
        "\x02\x02\u0E93\u0E94\x03\x02\x02\x02\u0E94\u0E96\x07\xE0\x02\x02\u0E95" +
        "\u0E97\x05\u0234\u011B\x02\u0E96\u0E95\x03\x02\x02\x02\u0E97\u0E98\x03" +
        "\x02\x02\x02\u0E98\u0E96\x03\x02\x02\x02\u0E98\u0E99\x03\x02\x02\x02\u0E99" +
        "\u022B\x03\x02\x02\x02\u0E9A\u0E9B\t4\x02\x02\u0E9B\u0E9C\x05\u0434\u021B" +
        "\x02\u0E9C\u0E9D\x07\u01EB\x02\x02\u0E9D\u0E9E\x05\u0230\u0119\x02\u0E9E" +
        "\u022D\x03\x02\x02\x02\u0E9F\u0EA2\x05\u0434\u021B\x02\u0EA0\u0EA2\x05" +
        "\u0496\u024C\x02\u0EA1\u0E9F\x03\x02\x02\x02\u0EA1\u0EA0\x03\x02\x02\x02" +
        "\u0EA2\u022F\x03\x02\x02\x02\u0EA3\u0EA5\x05\u0434\u021B\x02\u0EA4\u0EA6" +
        "\x07\u019E\x02\x02\u0EA5\u0EA4\x03\x02\x02\x02\u0EA5\u0EA6\x03\x02\x02" +
        "\x02\u0EA6\u0231\x03\x02\x02\x02\u0EA7\u0EAA\x05\u0434\u021B\x02\u0EA8" +
        "\u0EAA\x05\u0496\u024C\x02\u0EA9\u0EA7\x03\x02\x02\x02\u0EA9\u0EA8\x03" +
        "\x02\x02\x02\u0EAA\u0233\x03\x02\x02\x02\u0EAB\u0EAD\x05\u0434\u021B\x02" +
        "\u0EAC\u0EAE\x07\u019E\x02\x02\u0EAD\u0EAC\x03\x02\x02\x02\u0EAD\u0EAE" +
        "\x03\x02\x02\x02\u0EAE\u0235\x03\x02\x02\x02\u0EAF\u0EB1\x07\xE2\x02\x02" +
        "\u0EB0\u0EB2\x07\u01EB\x02\x02\u0EB1\u0EB0\x03\x02\x02\x02\u0EB1\u0EB2" +
        "\x03\x02\x02\x02\u0EB2\u0EB3\x03\x02\x02\x02\u0EB3\u0EB4\x07\u0218\x02" +
        "\x02\u0EB4\u0237\x03\x02\x02\x02\u0EB5\u0EB7\x07\x13\x02\x02\u0EB6\u0EB8" +
        "\x05\u023A\u011E\x02\u0EB7\u0EB6\x03\x02\x02\x02\u0EB8\u0EB9\x03\x02\x02" +
        "\x02\u0EB9\u0EB7\x03\x02\x02\x02\u0EB9\u0EBA\x03\x02\x02\x02\u0EBA\u0239" +
        "\x03\x02\x02\x02\u0EBB\u0EBC\x05\u0480\u0241\x02\u0EBC\u0EBF\x07\u01EB" +
        "\x02\x02\u0EBD\u0EBE\x07\u0169\x02\x02\u0EBE\u0EC0\x07\u01EB\x02\x02\u0EBF" +
        "\u0EBD\x03\x02\x02\x02\u0EBF\u0EC0\x03\x02\x02\x02\u0EC0\u0EC1\x03\x02" +
        "\x02\x02\u0EC1\u0EC2\x05\u0480\u0241\x02\u0EC2\u023B\x03\x02\x02\x02\u0EC3" +
        "\u0EC6\x076\x02\x02\u0EC4\u0EC7\x05\u0434\u021B\x02\u0EC5\u0EC7\x05\u0496" +
        "\u024C\x02\u0EC6\u0EC4\x03\x02\x02\x02\u0EC6\u0EC5\x03\x02\x02\x02\u0EC7" +
        "\u0EC9\x03\x02\x02\x02\u0EC8\u0ECA\x05\u023E\u0120\x02\u0EC9\u0EC8\x03" +
        "\x02\x02\x02\u0EC9\u0ECA\x03\x02\x02\x02\u0ECA\u0ECC\x03\x02\x02\x02\u0ECB" +
        "\u0ECD\x05\u024E\u0128\x02\u0ECC\u0ECB\x03\x02\x02\x02\u0ECC\u0ECD\x03" +
        "\x02\x02\x02\u0ECD\u0ECF\x03\x02\x02\x02\u0ECE\u0ED0\x05\u03FE\u0200\x02" +
        "\u0ECF\u0ECE\x03\x02\x02\x02\u0ECF\u0ED0\x03\x02\x02\x02\u0ED0\u0ED2\x03" +
        "\x02\x02\x02\u0ED1\u0ED3\x05\u0406\u0204\x02\u0ED2\u0ED1\x03\x02\x02\x02" +
        "\u0ED2\u0ED3\x03\x02\x02\x02\u0ED3\u0ED5\x03\x02\x02\x02\u0ED4\u0ED6\x05" +
        "\u0408\u0205\x02\u0ED5\u0ED4\x03\x02\x02\x02\u0ED5\u0ED6\x03\x02\x02\x02" +
        "\u0ED6\u0ED8\x03\x02\x02\x02\u0ED7\u0ED9\x07\xA3\x02\x02\u0ED8\u0ED7\x03" +
        "\x02\x02\x02\u0ED8\u0ED9\x03\x02\x02\x02\u0ED9\u023D\x03\x02\x02\x02\u0EDA" +
        "\u0EDC\x07\u01FC\x02\x02\u0EDB\u0EDD\x05\u0240\u0121\x02\u0EDC\u0EDB\x03" +
        "\x02\x02\x02\u0EDD\u0EDE\x03\x02\x02\x02\u0EDE\u0EDC\x03\x02\x02\x02\u0EDE" +
        "\u0EDF\x03\x02\x02\x02\u0EDF\u023F\x03\x02\x02\x02\u0EE0\u0EE4\x05\u0242" +
        "\u0122\x02\u0EE1\u0EE4\x05\u0246\u0124\x02\u0EE2\u0EE4\x05\u024A\u0126" +
        "\x02\u0EE3\u0EE0\x03\x02\x02\x02\u0EE3\u0EE1\x03\x02\x02\x02\u0EE3\u0EE2" +
        "\x03\x02\x02\x02\u0EE4\u0241\x03\x02\x02\x02\u0EE5\u0EE7\x073\x02\x02" +
        "\u0EE6\u0EE5\x03\x02\x02\x02\u0EE6\u0EE7\x03\x02\x02\x02\u0EE7\u0EE8\x03" +
        "\x02\x02\x02\u0EE8\u0EEA\x07\u0182\x02\x02\u0EE9\u0EE6\x03\x02\x02\x02" +
        "\u0EE9\u0EEA\x03\x02\x02\x02\u0EEA\u0EEC\x03\x02\x02\x02\u0EEB\u0EED\x05" +
        "\u0244\u0123\x02\u0EEC\u0EEB\x03\x02\x02\x02\u0EED\u0EEE\x03\x02\x02\x02" +
        "\u0EEE\u0EEC\x03\x02\x02\x02\u0EEE\u0EEF\x03\x02\x02\x02\u0EEF\u0243\x03" +
        "\x02\x02\x02\u0EF0\u0EF1\x07\x07\x02\x02\u0EF1\u0EF5\x07\u0145\x02\x02" +
        "\u0EF2\u0EF5\x07\xFC\x02\x02\u0EF3\u0EF5\x07\u01CD\x02\x02\u0EF4\u0EF0" +
        "\x03\x02\x02\x02\u0EF4\u0EF2\x03\x02\x02\x02\u0EF4\u0EF3\x03\x02\x02\x02" +
        "\u0EF4\u0EF5\x03\x02\x02\x02\u0EF5\u0EF6\x03\x02\x02\x02\u0EF6\u0EFA\x05" +
        "\u0434\u021B\x02\u0EF7\u0EFA\x05\u0496\u024C\x02\u0EF8\u0EFA\x05\u0470" +
        "\u0239\x02\u0EF9\u0EF4\x03\x02\x02\x02\u0EF9\u0EF7\x03\x02\x02\x02\u0EF9" +
        "\u0EF8\x03\x02\x02\x02\u0EFA\u0EFD\x03\x02\x02\x02\u0EFB\u0EFD\x07\u0147" +
        "\x02\x02\u0EFC\u0EF9\x03\x02\x02\x02\u0EFC\u0EFB\x03\x02\x02\x02\u0EFD" +
        "\u0245\x03\x02\x02\x02\u0EFE\u0F00\x073\x02\x02\u0EFF\u0EFE\x03\x02\x02" +
        "\x02\u0EFF\u0F00\x03\x02\x02\x02\u0F00\u0F01\x03\x02\x02\x02\u0F01\u0F03" +
        "\x07\u01FD\x02\x02\u0F02\u0F04\x05\u0248\u0125\x02\u0F03\u0F02\x03\x02" +
        "\x02\x02\u0F04\u0F05\x03\x02\x02\x02\u0F05\u0F03\x03\x02\x02\x02\u0F05" +
        "\u0F06\x03\x02\x02\x02\u0F06\u0247\x03\x02\x02\x02\u0F07\u0F08\x07\x07" +
        "\x02\x02\u0F08\u0F0E\x07\u0145\x02\x02\u0F09\u0F0B\x07\u010F\x02\x02\u0F0A" +
        "\u0F0C\x07\u0145\x02\x02\u0F0B\u0F0A\x03\x02\x02\x02\u0F0B\u0F0C\x03\x02" +
        "\x02\x02\u0F0C\u0F0E\x03\x02\x02\x02\u0F0D\u0F07\x03\x02\x02\x02\u0F0D" +
        "\u0F09\x03\x02\x02\x02\u0F0D\u0F0E\x03\x02\x02\x02\u0F0E\u0F11\x03\x02" +
        "\x02\x02\u0F0F\u0F12\x05\u0434\u021B\x02\u0F10\u0F12\x05\u0496\u024C\x02" +
        "\u0F11\u0F0F\x03\x02\x02\x02\u0F11\u0F10\x03\x02\x02\x02\u0F12\u0249\x03" +
        "\x02\x02\x02\u0F13\u0F15\x073\x02\x02\u0F14\u0F13\x03\x02\x02\x02\u0F14" +
        "\u0F15\x03\x02\x02\x02\u0F15\u0F16\x03\x02\x02\x02\u0F16\u0F18\x07a\x02" +
        "\x02\u0F17\u0F19\x05\u024C\u0127\x02\u0F18\u0F17\x03\x02\x02\x02\u0F19" +
        "\u0F1A\x03\x02\x02\x02\u0F1A\u0F18\x03\x02\x02\x02\u0F1A\u0F1B\x03\x02" +
        "\x02\x02\u0F1B\u024B\x03\x02\x02\x02\u0F1C\u0F1D\x07\x07\x02\x02\u0F1D" +
        "\u0F23\x07\u0145\x02\x02\u0F1E\u0F20\x07\u010F\x02\x02\u0F1F\u0F21\x07" +
        "\u0145\x02\x02\u0F20\u0F1F\x03\x02\x02\x02\u0F20\u0F21\x03\x02\x02\x02" +
        "\u0F21\u0F23\x03\x02\x02\x02\u0F22\u0F1C\x03\x02\x02\x02\u0F22\u0F1E\x03" +
        "\x02\x02\x02\u0F22\u0F23\x03\x02\x02\x02\u0F23\u0F24\x03\x02\x02\x02\u0F24" +
        "\u0F28\x05\u0434\u021B\x02\u0F25\u0F28\x05\u0496\u024C\x02\u0F26\u0F28" +
        "\x07\u0147\x02\x02\u0F27\u0F22\x03\x02\x02\x02\u0F27\u0F25\x03\x02\x02" +
        "\x02\u0F27\u0F26\x03\x02\x02\x02\u0F28\u024D\x03\x02\x02\x02\u0F29\u0F2A" +
        "\t3\x02\x02\u0F2A\u0F2B\x05\u0434\u021B\x02\u0F2B\u024F\x03\x02\x02\x02" +
        "\u0F2C\u0F2E\x077\x02\x02\u0F2D\u0F2F\x05\u0252\u012A\x02\u0F2E\u0F2D" +
        "\x03\x02\x02\x02\u0F2F\u0F30\x03\x02\x02\x02\u0F30\u0F2E\x03\x02\x02\x02" +
        "\u0F30\u0F31\x03\x02\x02\x02\u0F31\u0251\x03\x02\x02\x02\u0F32\u0F33\x05" +
        "\u0478\u023D\x02\u0F33\u0F34\t&\x02\x02\u0F34\u0F38\x03\x02\x02\x02\u0F35" +
        "\u0F38\x05\u0434\u021B\x02\u0F36\u0F38\x05\u0496\u024C\x02\u0F37\u0F32" +
        "\x03\x02\x02\x02\u0F37\u0F35\x03\x02\x02\x02\u0F37\u0F36\x03\x02\x02\x02" +
        "\u0F38\u0253\x03\x02\x02";
    Cobol85Parser._serializedATNSegment8 = "\x02\u0F39\u0F3B\x07E\x02\x02\u0F3A\u0F3C\x05\u0256\u012C\x02\u0F3B\u0F3A" +
        "\x03\x02\x02\x02\u0F3C\u0F3D\x03\x02\x02\x02\u0F3D\u0F3B\x03\x02\x02\x02" +
        "\u0F3D\u0F3E\x03\x02\x02\x02\u0F3E\u0255\x03\x02\x02\x02\u0F3F\u0F43\x05" +
        "\u0470\u0239\x02\u0F40\u0F44\x05\u0258\u012D\x02\u0F41\u0F44\x05\u025A" +
        "\u012E\x02\u0F42\u0F44\x05\u025C\u012F\x02\u0F43\u0F40\x03\x02\x02\x02" +
        "\u0F43\u0F41\x03\x02\x02\x02\u0F43\u0F42\x03\x02\x02\x02\u0F43\u0F44\x03" +
        "\x02\x02\x02\u0F44\u0257\x03\x02\x02\x02\u0F45\u0F4A\t\x0E\x02\x02\u0F46" +
        "\u0F48\x07\xD6\x02\x02\u0F47\u0F46\x03\x02\x02\x02\u0F47\u0F48\x03\x02" +
        "\x02\x02\u0F48\u0F49\x03\x02\x02\x02\u0F49\u0F4B\x07\u0188\x02\x02\u0F4A" +
        "\u0F47\x03\x02\x02\x02\u0F4A\u0F4B\x03\x02\x02\x02\u0F4B\u0F54\x03\x02" +
        "\x02\x02\u0F4C\u0F4E\x07\u0204\x02\x02\u0F4D\u0F4C\x03\x02\x02\x02\u0F4D" +
        "\u0F4E\x03\x02\x02\x02\u0F4E\u0F52\x03\x02\x02\x02\u0F4F\u0F50\x07\u0138" +
        "\x02\x02\u0F50\u0F53\x07\u0199\x02\x02\u0F51\u0F53\x07\u0120\x02\x02\u0F52" +
        "\u0F4F\x03\x02\x02\x02\u0F52\u0F51\x03\x02\x02\x02\u0F53\u0F55\x03\x02" +
        "\x02\x02\u0F54\u0F4D\x03\x02\x02\x02\u0F54\u0F55\x03\x02\x02\x02\u0F55" +
        "\u0259\x03\x02\x02\x02\u0F56\u0F58\x07\u0204\x02\x02\u0F57\u0F56\x03\x02" +
        "\x02\x02\u0F57\u0F58\x03\x02\x02\x02\u0F58\u0F5C\x03\x02\x02\x02\u0F59" +
        "\u0F5A\x07\u0138\x02\x02\u0F5A\u0F5D\x07\u0199\x02\x02\u0F5B\u0F5D\x07" +
        "\u0120\x02\x02\u0F5C\u0F59\x03\x02\x02\x02\u0F5C\u0F5B\x03\x02\x02\x02" +
        "\u0F5D\u025B\x03\x02\x02\x02\u0F5E\u0F60\x07\u0204\x02\x02\u0F5F\u0F5E" +
        "\x03\x02\x02\x02\u0F5F\u0F60\x03\x02\x02\x02\u0F60\u0F61\x03\x02\x02\x02" +
        "\u0F61\u0F62\x07\u0138\x02\x02\u0F62\u0F66\x07\u0201\x02\x02\u0F63\u0F64" +
        "\x07\u0204\x02\x02\u0F64\u0F66\x07\u0201\x02\x02\u0F65\u0F5F\x03\x02\x02" +
        "\x02\u0F65\u0F63\x03\x02\x02\x02\u0F66\u0F6D\x03\x02\x02\x02\u0F67\u0F69" +
        "\x07\u01FC\x02\x02\u0F68\u0F6A\x05\u025E\u0130\x02\u0F69\u0F68\x03\x02" +
        "\x02\x02\u0F6A\u0F6B\x03\x02\x02\x02\u0F6B\u0F69\x03\x02\x02\x02\u0F6B" +
        "\u0F6C\x03\x02\x02\x02\u0F6C\u0F6E\x03\x02\x02\x02\u0F6D\u0F67\x03\x02" +
        "\x02\x02\u0F6D\u0F6E\x03\x02\x02\x02\u0F6E\u025D\x03\x02\x02\x02\u0F6F" +
        "\u0F73\x05\u0260\u0131\x02\u0F70\u0F73\x05\u0262\u0132\x02\u0F71\u0F73" +
        "\x05\u0264\u0133\x02\u0F72\u0F6F\x03\x02\x02\x02\u0F72\u0F70\x03\x02\x02" +
        "\x02\u0F72\u0F71\x03\x02\x02\x02\u0F73\u025F\x03\x02\x02\x02\u0F74\u0F76" +
        "\x07F\x02\x02\u0F75\u0F77\x07\u0145\x02\x02\u0F76\u0F75\x03\x02\x02\x02" +
        "\u0F76\u0F77\x03\x02\x02\x02\u0F77\u0F78\x03\x02\x02\x02\u0F78\u0F79\t" +
        "5\x02\x02\u0F79\u0261\x03\x02\x02\x02\u0F7A\u0F7D\x07\x1E\x02\x02\u0F7B" +
        "\u0F7E\x05\u0434\u021B\x02\u0F7C\u0F7E\x05\u049C\u024F\x02\u0F7D\u0F7B" +
        "\x03\x02\x02\x02\u0F7D\u0F7C\x03\x02\x02\x02\u0F7E\u0263\x03\x02\x02\x02" +
        "\u0F7F\u0F81\x07\x1F\x02\x02\u0F80\u0F82\x07\u0145\x02\x02\u0F81\u0F80" +
        "\x03\x02\x02\x02\u0F81\u0F82\x03\x02\x02\x02\u0F82\u0F85\x03\x02\x02\x02" +
        "\u0F83\u0F86\x05\u0434\u021B\x02\u0F84\u0F86\x05\u049C\u024F\x02\u0F85" +
        "\u0F83\x03\x02\x02\x02\u0F85\u0F84\x03\x02\x02\x02\u0F86\u0265\x03\x02" +
        "\x02\x02\u0F87\u0F89\x07^\x02\x02\u0F88\u0F8A\x05\u0268\u0135\x02\u0F89" +
        "\u0F88\x03\x02\x02\x02\u0F8A\u0F8B\x03\x02\x02\x02\u0F8B\u0F89\x03\x02" +
        "\x02\x02\u0F8B\u0F8C\x03\x02\x02\x02\u0F8C\u0F8D\x03\x02\x02\x02\u0F8D" +
        "\u0F8E\t6\x02\x02\u0F8E\u0F90\x05\u040A\u0206\x02\u0F8F\u0F91\x05\u0402" +
        "\u0202\x02\u0F90\u0F8F\x03\x02\x02\x02\u0F90\u0F91\x03\x02\x02\x02\u0F91" +
        "\u0F93\x03\x02\x02\x02\u0F92\u0F94\x05\u0404\u0203\x02\u0F93\u0F92\x03" +
        "\x02\x02\x02\u0F93\u0F94\x03\x02\x02\x02\u0F94\u0F96\x03\x02\x02\x02\u0F95" +
        "\u0F97\x07\xA4\x02\x02\u0F96\u0F95\x03\x02\x02\x02\u0F96\u0F97\x03\x02" +
        "\x02\x02\u0F97\u0267\x03\x02\x02\x02\u0F98\u0F9A\x05\u0434\u021B\x02\u0F99" +
        "\u0F9B\x07\u019E\x02\x02\u0F9A\u0F99\x03\x02\x02\x02\u0F9A\u0F9B\x03\x02" +
        "\x02\x02\u0F9B\u0269\x03\x02\x02\x02\u0F9C\u0F9D\x07b\x02\x02\u0F9D\u026B" +
        "\x03\x02\x02\x02\u0F9E\u0F9F\x07\x85\x02\x02\u0F9F\u0FA1\x05\u0470\u0239" +
        "\x02\u0FA0\u0FA2\x07\u017B\x02\x02\u0FA1\u0FA0\x03\x02\x02\x02\u0FA1\u0FA2" +
        "\x03\x02\x02\x02\u0FA2\u0FA4\x03\x02\x02\x02\u0FA3\u0FA5\x05\u03FA\u01FE" +
        "\x02\u0FA4\u0FA3\x03\x02\x02\x02\u0FA4\u0FA5\x03\x02\x02\x02\u0FA5\u0FA7" +
        "\x03\x02\x02\x02\u0FA6\u0FA8\x05\u03FC\u01FF\x02\u0FA7\u0FA6\x03\x02\x02" +
        "\x02\u0FA7\u0FA8\x03\x02\x02\x02\u0FA8\u0FAA\x03\x02\x02\x02\u0FA9\u0FAB" +
        "\x07\xA5\x02\x02\u0FAA\u0FA9\x03\x02\x02\x02\u0FAA\u0FAB\x03\x02\x02\x02" +
        "\u0FAB\u026D\x03\x02\x02\x02\u0FAC\u0FB4\x07\x8E\x02\x02\u0FAD\u0FAF\x07" +
        "\xF8\x02\x02\u0FAE\u0FB0\x07\u01DD\x02\x02\u0FAF\u0FAE\x03\x02\x02\x02" +
        "\u0FAF\u0FB0\x03\x02\x02\x02\u0FB0\u0FB5\x03\x02\x02\x02\u0FB1\u0FB2\x07" +
        "\xEA\x02\x02\u0FB2\u0FB5\x07\u01DD\x02\x02\u0FB3\u0FB5\x07\u0150\x02\x02" +
        "\u0FB4\u0FAD\x03\x02\x02\x02\u0FB4\u0FB1\x03\x02\x02\x02\u0FB4\u0FB3\x03" +
        "\x02\x02\x02\u0FB5\u0FB6\x03\x02\x02\x02\u0FB6\u0FB8\x05\u0462\u0232\x02" +
        "\u0FB7\u0FB9\x07\u0204\x02\x02\u0FB8\u0FB7\x03\x02\x02\x02\u0FB8\u0FB9" +
        "\x03\x02\x02\x02\u0FB9\u0FBA\x03\x02\x02\x02\u0FBA\u0FBD\x07\u0105\x02" +
        "\x02\u0FBB\u0FBE\x05\u0434\u021B\x02\u0FBC\u0FBE\x05\u0496\u024C\x02\u0FBD" +
        "\u0FBB\x03\x02\x02\x02\u0FBD\u0FBC\x03\x02\x02\x02\u0FBE\u026F\x03\x02" +
        "\x02\x02\u0FBF\u0FC1\x07\x90\x02\x02\u0FC0\u0FC2\x05\u0272\u013A\x02\u0FC1" +
        "\u0FC0\x03\x02\x02\x02\u0FC2\u0FC3\x03\x02\x02\x02\u0FC3\u0FC1\x03\x02" +
        "\x02\x02\u0FC3\u0FC4\x03\x02\x02\x02\u0FC4\u0FC6\x03\x02\x02\x02\u0FC5" +
        "\u0FC7\x05\u0274\u013B\x02\u0FC6\u0FC5\x03\x02\x02\x02\u0FC6\u0FC7\x03" +
        "\x02\x02\x02\u0FC7\u0FC9\x03\x02\x02\x02\u0FC8\u0FCA\x05\u0276\u013C\x02" +
        "\u0FC9\u0FC8\x03\x02\x02\x02\u0FC9\u0FCA\x03\x02\x02\x02\u0FCA\u0FCC\x03" +
        "\x02\x02\x02\u0FCB\u0FCD\x05\u0278\u013D\x02\u0FCC\u0FCB\x03\x02\x02\x02" +
        "\u0FCC\u0FCD\x03\x02\x02\x02\u0FCD\u0271\x03\x02\x02\x02\u0FCE\u0FD1\x05" +
        "\u0434\u021B\x02\u0FCF\u0FD1\x05\u0496\u024C\x02\u0FD0\u0FCE\x03\x02\x02" +
        "\x02\u0FD0\u0FCF\x03\x02\x02\x02\u0FD1\u0273\x03\x02\x02\x02\u0FD2\u0FD5" +
        "\x07 \x02\x02\u0FD3\u0FD6\x05\u0434\u021B\x02\u0FD4\u0FD6\x05\u0496\u024C" +
        "\x02\u0FD5\u0FD3\x03\x02\x02\x02\u0FD5\u0FD4\x03\x02\x02\x02\u0FD6\u0275" +
        "\x03\x02\x02\x02\u0FD7\u0FDA\x07\u01F9\x02\x02\u0FD8\u0FDB\x05\u047C\u023F" +
        "\x02\u0FD9\u0FDB\x05\u046E\u0238\x02\u0FDA\u0FD8\x03\x02\x02\x02\u0FDA" +
        "\u0FD9\x03\x02\x02\x02\u0FDB\u0277\x03\x02\x02\x02\u0FDC\u0FDE\x07\u0204" +
        "\x02\x02\u0FDD\u0FDC\x03\x02\x02\x02\u0FDD\u0FDE\x03\x02\x02\x02\u0FDE" +
        "\u0FDF\x03\x02\x02\x02\u0FDF\u0FE0\x07\u0138\x02\x02\u0FE0\u0FE1\x07\b" +
        "\x02\x02\u0FE1\u0279\x03\x02\x02\x02\u0FE2\u0FE5\x07\x92\x02\x02\u0FE3" +
        "\u0FE6\x05\u0434\u021B\x02\u0FE4\u0FE6\x05\u0496\u024C\x02\u0FE5\u0FE3" +
        "\x03\x02\x02\x02\u0FE5\u0FE4\x03\x02\x02\x02\u0FE6\u0FEA\x03\x02\x02\x02" +
        "\u0FE7\u0FEB\x05\u027C\u013F\x02\u0FE8\u0FEB\x05\u027E\u0140\x02\u0FE9" +
        "\u0FEB\x05\u0280\u0141\x02\u0FEA\u0FE7\x03\x02\x02\x02\u0FEA\u0FE8\x03" +
        "\x02\x02\x02\u0FEA\u0FE9\x03\x02\x02\x02\u0FEB\u0FED\x03\x02\x02\x02\u0FEC" +
        "\u0FEE\x05\u0288\u0145\x02\u0FED\u0FEC\x03\x02\x02\x02\u0FED\u0FEE\x03" +
        "\x02\x02\x02\u0FEE\u0FF0\x03\x02\x02\x02\u0FEF\u0FF1\x05\u0402\u0202\x02" +
        "\u0FF0\u0FEF\x03\x02\x02\x02\u0FF0\u0FF1\x03\x02\x02\x02\u0FF1\u0FF3\x03" +
        "\x02\x02\x02\u0FF2\u0FF4\x05\u0404\u0203\x02\u0FF3\u0FF2\x03\x02\x02\x02" +
        "\u0FF3\u0FF4\x03\x02\x02\x02\u0FF4\u0FF6\x03\x02\x02\x02\u0FF5\u0FF7\x07" +
        "\xA6\x02\x02\u0FF6\u0FF5\x03\x02\x02\x02\u0FF6\u0FF7\x03\x02\x02\x02\u0FF7" +
        "\u027B\x03\x02\x02\x02\u0FF8\u0FFA\x07\xFD\x02\x02\u0FF9\u0FFB\x05\u0284" +
        "\u0143\x02\u0FFA\u0FF9\x03\x02\x02\x02\u0FFB\u0FFC\x03\x02\x02\x02\u0FFC" +
        "\u0FFA\x03\x02\x02\x02\u0FFC\u0FFD\x03\x02\x02\x02\u0FFD\u027D\x03\x02" +
        "\x02\x02\u0FFE\u1001\x07\xFD\x02\x02\u0FFF\u1002\x05\u0434\u021B\x02\u1000" +
        "\u1002\x05\u0496\u024C\x02\u1001\u0FFF\x03\x02\x02\x02\u1001\u1000\x03" +
        "\x02\x02\x02\u1002\u1004\x03\x02\x02\x02\u1003\u1005\x05\u0282\u0142\x02" +
        "\u1004\u1003\x03\x02\x02\x02\u1004\u1005\x03\x02\x02\x02\u1005\u027F\x03" +
        "\x02\x02\x02\u1006\u1009\x073\x02\x02\u1007\u100A\x05\u0434\u021B\x02" +
        "\u1008\u100A\x05\u0496\u024C\x02\u1009\u1007\x03\x02\x02\x02\u1009\u1008" +
        "\x03\x02\x02\x02\u100A\u100C\x03\x02\x02\x02\u100B\u100D\x05\u0282\u0142" +
        "\x02\u100C\u100B\x03\x02\x02\x02\u100C\u100D\x03\x02\x02\x02\u100D\u0281" +
        "\x03\x02\x02\x02\u100E\u1010\x07\xE0\x02\x02\u100F\u1011\x05\u0286\u0144" +
        "\x02\u1010\u100F\x03\x02\x02\x02\u1011\u1012\x03\x02\x02\x02\u1012\u1010" +
        "\x03\x02\x02\x02\u1012\u1013\x03\x02\x02\x02\u1013\u0283\x03\x02\x02\x02" +
        "\u1014\u1016\x05\u0434\u021B\x02\u1015\u1017\x07\u019E\x02\x02\u1016\u1015" +
        "\x03\x02\x02\x02\u1016\u1017\x03\x02\x02\x02\u1017\u0285\x03\x02\x02\x02" +
        "\u1018\u101A\x05\u0434\u021B\x02\u1019\u101B\x07\u019E\x02\x02\u101A\u1019" +
        "\x03\x02\x02\x02\u101A\u101B\x03\x02\x02\x02\u101B\u0287\x03\x02\x02\x02" +
        "\u101C\u101D\x07\u0186\x02\x02\u101D\u101E\x05\u0434\u021B\x02\u101E\u0289" +
        "\x03\x02\x02\x02\u101F\u1027\x07\x9F\x02\x02\u1020\u1022\x07\xF8\x02\x02" +
        "\u1021\u1023\x07\u01DD\x02\x02\u1022\u1021\x03\x02\x02\x02\u1022\u1023" +
        "\x03\x02\x02\x02\u1023\u1028\x03\x02\x02\x02\u1024\u1025\x07\xEA\x02\x02" +
        "\u1025\u1028\x07\u01DD\x02\x02\u1026\u1028\x07\u0150\x02\x02\u1027\u1020" +
        "\x03\x02\x02\x02\u1027\u1024\x03\x02\x02\x02\u1027\u1026\x03\x02\x02\x02" +
        "\u1028\u1029\x03\x02\x02\x02\u1029\u102B\x05\u0462\u0232\x02\u102A\u102C" +
        "\x07\u0204\x02\x02\u102B\u102A\x03\x02\x02\x02\u102B\u102C\x03\x02\x02" +
        "\x02\u102C\u102D\x03\x02\x02\x02\u102D\u1030\x07\u0105\x02\x02\u102E\u1031" +
        "\x05\u0496\u024C\x02\u102F\u1031\x05\u0434\u021B\x02\u1030\u102E\x03\x02" +
        "\x02\x02\u1030\u102F\x03\x02\x02\x02\u1031\u028B\x03\x02\x02\x02\u1032" +
        "\u1033\x07\xB8\x02\x02\u1033\u103A\x05\u0496\u024C\x02\u1034\u1036\x07" +
        "\u01FC\x02\x02\u1035\u1037\x05\u0434\u021B\x02\u1036\u1035\x03\x02\x02" +
        "\x02\u1037\u1038\x03\x02\x02\x02\u1038\u1036\x03\x02\x02\x02\u1038\u1039" +
        "\x03\x02\x02\x02\u1039\u103B\x03\x02\x02\x02\u103A\u1034\x03\x02\x02\x02" +
        "\u103A\u103B\x03\x02\x02\x02\u103B\u028D\x03\x02\x02\x02\u103C\u103D\x07" +
        "\xC3\x02\x02\u103D\u1041\x05\u0290\u0149\x02\u103E\u1040\x05\u0292\u014A" +
        "\x02\u103F\u103E\x03\x02\x02\x02\u1040\u1043\x03\x02\x02\x02\u1041\u103F" +
        "\x03\x02\x02\x02\u1041\u1042\x03\x02\x02\x02\u1042\u1045\x03\x02\x02\x02" +
        "\u1043\u1041\x03\x02\x02\x02\u1044\u1046\x05\u0294\u014B\x02\u1045\u1044" +
        "\x03\x02\x02\x02\u1046\u1047\x03\x02\x02\x02\u1047\u1045\x03\x02\x02\x02" +
        "\u1047\u1048\x03\x02\x02\x02\u1048\u104A\x03\x02\x02\x02\u1049\u104B\x05" +
        "\u029E\u0150\x02\u104A\u1049\x03\x02\x02\x02\u104A\u104B\x03\x02\x02\x02" +
        "\u104B\u104D\x03\x02\x02\x02\u104C\u104E\x07\xA7\x02\x02\u104D\u104C\x03" +
        "\x02\x02\x02\u104D\u104E\x03\x02\x02\x02\u104E\u028F\x03\x02\x02\x02\u104F" +
        "\u1054\x05\u0434\u021B\x02\u1050\u1054\x05\u0496\u024C\x02\u1051\u1054" +
        "\x05\u040A\u0206\x02\u1052\u1054\x05\u0418\u020D\x02\u1053\u104F\x03\x02" +
        "\x02\x02\u1053\u1050\x03\x02\x02\x02\u1053\u1051\x03\x02\x02\x02\u1053" +
        "\u1052\x03\x02\x02\x02\u1054\u0291\x03\x02\x02\x02\u1055\u1056\x07\x12" +
        "\x02\x02\u1056\u1057\x05\u0290\u0149\x02\u1057\u0293\x03\x02\x02\x02\u1058" +
        "\u105A\x05\u0296\u014C\x02\u1059\u1058\x03\x02\x02\x02\u105A\u105B\x03" +
        "\x02\x02\x02\u105B\u1059\x03\x02\x02\x02\u105B\u105C\x03\x02\x02\x02\u105C" +
        "\u1060\x03\x02\x02\x02\u105D\u105F\x05\u021A\u010E\x02\u105E\u105D\x03" +
        "\x02\x02\x02\u105F\u1062\x03\x02\x02\x02\u1060\u105E\x03\x02\x02\x02\u1060" +
        "\u1061\x03\x02\x02\x02\u1061\u0295\x03\x02\x02\x02\u1062\u1060\x03\x02" +
        "\x02\x02\u1063\u1064\x07\u0202\x02\x02\u1064\u1068\x05\u0298\u014D\x02" +
        "\u1065\u1067\x05\u029C\u014F\x02\u1066\u1065\x03\x02\x02\x02\u1067\u106A" +
        "\x03\x02\x02\x02\u1068\u1066\x03\x02\x02\x02\u1068\u1069\x03\x02\x02\x02" +
        "\u1069\u0297\x03\x02\x02\x02\u106A\u1068\x03\x02\x02\x02\u106B\u1076\x07" +
        "\x16\x02\x02\u106C\u106E\x07\u013A\x02\x02\u106D\u106C\x03\x02\x02\x02" +
        "\u106D\u106E\x03\x02\x02\x02\u106E\u106F\x03\x02\x02\x02\u106F\u1071\x05" +
        "\u02A0\u0151\x02\u1070\u1072\x05\u029A\u014E\x02\u1071\u1070\x03\x02\x02" +
        "\x02\u1071\u1072\x03\x02\x02\x02\u1072\u1076\x03\x02\x02\x02\u1073\u1076" +
        "\x05\u0418\u020D\x02\u1074\u1076\x05\u0498\u024D\x02\u1075\u106B\x03\x02" +
        "\x02\x02\u1075\u106D\x03\x02\x02\x02\u1075\u1073\x03\x02\x02\x02\u1075" +
        "\u1074\x03\x02\x02\x02\u1076\u0299\x03\x02\x02\x02\u1077\u1078\t\x06\x02" +
        "\x02\u1078\u1079\x05\u02A0\u0151\x02\u1079\u029B\x03\x02\x02\x02\u107A" +
        "\u107B\x07\x12\x02\x02\u107B\u107C\x05\u0298\u014D\x02\u107C\u029D\x03" +
        "\x02\x02\x02\u107D\u107E\x07\u0202\x02\x02\u107E\u1082\x07\u014F\x02\x02" +
        "\u107F\u1081\x05\u021A\u010E\x02\u1080\u107F\x03\x02\x02\x02\u1081\u1084" +
        "\x03\x02\x02\x02\u1082\u1080\x03\x02\x02\x02\u1082\u1083\x03\x02\x02\x02" +
        "\u1083\u029F\x03\x02\x02\x02\u1084\u1082\x03\x02\x02\x02\u1085\u1089\x05" +
        "\u0434\u021B\x02\u1086\u1089\x05\u0496\u024C\x02\u1087\u1089\x05\u040A" +
        "\u0206\x02\u1088\u1085\x03\x02\x02\x02\u1088\u1086\x03\x02\x02\x02\u1088" +
        "\u1087\x03\x02\x02\x02\u1089\u02A1\x03\x02\x02\x02\u108A\u108C\x07\u0231" +
        "\x02\x02\u108B\u108A\x03\x02\x02\x02\u108C\u108D\x03\x02\x02\x02\u108D" +
        "\u108B\x03\x02\x02\x02\u108D\u108E\x03\x02\x02\x02\u108E\u02A3\x03\x02" +
        "\x02\x02\u108F\u1091\x07\u0233\x02\x02\u1090\u108F\x03\x02\x02\x02\u1091" +
        "\u1092\x03\x02\x02\x02\u1092\u1090\x03\x02\x02\x02\u1092\u1093\x03\x02" +
        "\x02\x02\u1093\u02A5\x03\x02\x02\x02\u1094\u1096\x07\u0232\x02\x02\u1095" +
        "\u1094\x03\x02\x02\x02\u1096\u1097\x03\x02\x02\x02\u1097\u1095\x03\x02" +
        "\x02\x02\u1097\u1098\x03\x02\x02\x02\u1098\u02A7\x03\x02\x02\x02\u1099" +
        "\u109B\x07\xC8\x02\x02\u109A\u109C\x07\u0131\x02\x02\u109B\u109A\x03\x02" +
        "\x02\x02\u109B\u109C\x03\x02\x02\x02\u109C\u109E\x03\x02\x02\x02\u109D" +
        "\u109F\x07>\x02\x02\u109E\u109D\x03\x02\x02\x02\u109E\u109F\x03\x02\x02" +
        "\x02\u109F\u10A1\x03\x02\x02\x02\u10A0\u10A2\x05\u02AA\u0156\x02\u10A1" +
        "\u10A0\x03\x02\x02\x02\u10A2\u10A3\x03\x02\x02\x02\u10A3\u10A1\x03\x02" +
        "\x02\x02\u10A3\u10A4\x03\x02\x02\x02\u10A4\u02A9\x03\x02\x02\x02\u10A5" +
        "\u10A8\x05\u0434\u021B\x02\u10A6\u10A8\x05\u0496\u024C\x02\u10A7\u10A5" +
        "\x03\x02\x02\x02\u10A7\u10A6\x03\x02\x02\x02\u10A8\u02AB\x03\x02\x02\x02" +
        "\u10A9\u10AB\x07\xC9\x02\x02\u10AA\u10AC\x07\u016B\x02\x02\u10AB\u10AA" +
        "\x03\x02\x02\x02\u10AB\u10AC\x03\x02\x02\x02\u10AC\u02AD\x03\x02\x02\x02" +
        "\u10AD\u10AE\x07\xDE\x02\x02\u10AE\u10AF\x05\u0486\u0244\x02\u10AF\u02AF" +
        "\x03\x02\x02\x02\u10B0\u10B1\x07\xDF\x02\x02\u10B1\u02B1\x03\x02\x02\x02" +
        "\u10B2\u10B4\x07\xE2\x02\x02\u10B3\u10B5\x07\u01EB\x02\x02\u10B4\u10B3" +
        "\x03\x02\x02\x02\u10B4\u10B5\x03\x02\x02\x02\u10B5\u10B8\x03\x02\x02\x02" +
        "\u10B6\u10B9\x05\u02B4\u015B\x02\u10B7\u10B9\x05\u02B6\u015C\x02\u10B8" +
        "\u10B6\x03\x02\x02\x02\u10B8\u10B7\x03\x02\x02\x02\u10B9\u02B3\x03\x02" +
        "\x02\x02\u10BA\u10BB\x05\u0480\u0241\x02\u10BB\u02B5\x03\x02\x02\x02\u10BC" +
        "\u10CA\x07\u012D\x02\x02\u10BD\u10BF\x05\u0480\u0241\x02\u10BE\u10BD\x03" +
        "\x02\x02\x02\u10BF\u10C0\x03\x02\x02\x02\u10C0\u10BE\x03\x02\x02\x02\u10C0" +
        "\u10C1\x03\x02\x02\x02\u10C1\u10C7\x03\x02\x02\x02\u10C2\u10C4\x07\x88" +
        "\x02\x02\u10C3\u10C5\x07\u0148\x02\x02\u10C4\u10C3\x03\x02\x02\x02\u10C4" +
        "\u10C5\x03\x02\x02\x02\u10C5\u10C6\x03\x02\x02\x02\u10C6\u10C8\x05\u0434" +
        "\u021B\x02\u10C7\u10C2\x03\x02\x02\x02\u10C7\u10C8\x03\x02\x02\x02\u10C8" +
        "\u10CA\x03\x02\x02\x02\u10C9\u10BC\x03\x02\x02\x02\u10C9\u10BE\x03\x02" +
        "\x02\x02\u10CA\u02B7\x03\x02\x02\x02\u10CB\u10CC\x07\xEE\x02\x02\u10CC" +
        "\u10CD\x05\u0418\u020D\x02\u10CD\u10CF\x05\u02BA\u015E\x02\u10CE\u10D0" +
        "\x05\u02BC\u015F\x02\u10CF\u10CE\x03\x02\x02\x02\u10CF\u10D0\x03\x02\x02" +
        "\x02\u10D0\u10D2\x03\x02\x02\x02\u10D1\u10D3\x07\xA8\x02\x02\u10D2\u10D1" +
        "\x03\x02\x02\x02\u10D2\u10D3\x03\x02\x02\x02\u10D3\u02B9\x03\x02\x02\x02" +
        "\u10D4\u10D6\x07\u01E2\x02\x02\u10D5\u10D4\x03\x02\x02\x02\u10D5\u10D6" +
        "\x03\x02\x02\x02\u10D6\u10DF\x03\x02\x02\x02\u10D7\u10D8\x07\u0137\x02" +
        "\x02\u10D8\u10E0\x07\u01AC\x02\x02\u10D9\u10DB\x05\u021A\u010E\x02\u10DA" +
        "\u10D9\x03\x02\x02\x02\u10DB\u10DE\x03\x02\x02\x02\u10DC\u10DA\x03\x02" +
        "\x02\x02\u10DC\u10DD\x03\x02\x02\x02\u10DD\u10E0\x03\x02\x02\x02\u10DE" +
        "\u10DC\x03\x02\x02\x02\u10DF\u10D7\x03\x02\x02\x02\u10DF\u10DC\x03\x02" +
        "\x02\x02\u10E0\u02BB\x03\x02\x02\x02\u10E1\u10EA\x07\x9C\x02\x02\u10E2" +
        "\u10E3\x07\u0137\x02\x02\u10E3\u10EB\x07\u01AC\x02\x02\u10E4\u10E6\x05" +
        "\u021A\u010E\x02\u10E5\u10E4\x03\x02\x02\x02\u10E6\u10E9\x03\x02\x02\x02" +
        "\u10E7\u10E5\x03\x02\x02\x02\u10E7\u10E8\x03\x02\x02\x02\u10E8\u10EB\x03" +
        "\x02\x02\x02\u10E9\u10E7\x03\x02\x02\x02\u10EA\u10E2\x03\x02\x02\x02\u10EA" +
        "\u10E7\x03\x02\x02\x02\u10EB\u02BD\x03\x02\x02\x02\u10EC\u10EE\x07\xF6" +
        "\x02\x02\u10ED\u10EF\x05\u0434\u021B\x02\u10EE\u10ED\x03\x02\x02\x02\u10EF" +
        "\u10F0\x03\x02\x02\x02\u10F0\u10EE\x03\x02\x02\x02\u10F0\u10F1\x03\x02" +
        "\x02\x02\u10F1\u10F3\x03\x02\x02\x02\u10F2\u10F4\x05\u02C0\u0161\x02\u10F3" +
        "\u10F2\x03\x02\x02\x02\u10F3\u10F4\x03\x02\x02\x02\u10F4\u02BF\x03\x02" +
        "\x02\x02\u10F5\u10F7\x07\u018C\x02\x02\u10F6\u10F8\x05\u02C2\u0162\x02" +
        "\u10F7\u10F6\x03\x02\x02\x02\u10F8\u10F9\x03\x02\x02\x02\u10F9\u10F7\x03" +
        "\x02\x02\x02\u10F9\u10FA\x03\x02\x02\x02\u10FA\u02C1\x03\x02\x02\x02\u10FB" +
        "\u10FD\t7\x02\x02\u10FC\u10FE\x07o\x02\x02\u10FD\u10FC\x03\x02\x02\x02" +
        "\u10FD\u10FE\x03\x02\x02\x02\u10FE\u10FF\x03\x02\x02\x02\u10FF\u1102\x07" +
        "3\x02\x02\u1100\u1103\x05\u0434\u021B\x02\u1101\u1103\x05\u0496\u024C" +
        "\x02\u1102\u1100\x03\x02\x02\x02\u1102\u1101\x03\x02\x02\x02\u1103\u02C3" +
        "\x03\x02\x02\x02\u1104\u1106\x07\xF7\x02\x02\u1105\u1107\x05\u0486\u0244" +
        "\x02\u1106\u1105\x03\x02\x02\x02\u1107\u1108\x03\x02\x02\x02\u1108\u1106" +
        "\x03\x02\x02\x02\u1108\u1109\x03\x02\x02\x02\u1109\u02C5\x03\x02\x02\x02" +
        "\u110A\u110B\x07\xFA\x02\x02\u110B\u1110\x05\u0434\u021B\x02\u110C\u1111" +
        "\x05\u02C8\u0165\x02\u110D\u1111\x05\u02CA\u0166\x02\u110E\u1111\x05\u02CC" +
        "\u0167\x02\u110F\u1111\x05\u02CE\u0168\x02\u1110\u110C\x03\x02\x02\x02" +
        "\u1110\u110D\x03\x02\x02\x02\u1110\u110E\x03\x02\x02\x02\u1110\u110F\x03" +
        "\x02\x02\x02\u1111\u02C7\x03\x02\x02\x02\u1112\u1114\x07\u01DA\x02\x02" +
        "\u1113\u1115\x05\u02D0\u0169\x02\u1114\u1113\x03\x02\x02\x02\u1115\u1116" +
        "\x03\x02\x02\x02\u1116\u1114\x03\x02\x02\x02\u1116\u1117\x03\x02\x02\x02" +
        "\u1117\u02C9\x03\x02\x02\x02\u1118\u111B\x07\u018C\x02\x02\u1119\u111C" +
        "\x05\u02D4\u016B\x02\u111A\u111C\x05\u02D8\u016D\x02\u111B\u1119\x03\x02" +
        "\x02\x02\u111B\u111A\x03\x02\x02\x02\u111C\u111D\x03\x02\x02\x02\u111D" +
        "\u111B\x03\x02\x02\x02\u111D\u111E\x03\x02\x02\x02\u111E\u02CB\x03\x02" +
        "\x02\x02\u111F\u1121\x07\u01DA\x02\x02\u1120\u1122\x05\u02D0\u0169\x02" +
        "\u1121\u1120\x03\x02\x02\x02\u1122\u1123\x03\x02\x02\x02\u1123\u1121\x03" +
        "\x02\x02\x02\u1123\u1124\x03\x02\x02\x02\u1124\u1126\x03\x02\x02\x02\u1125" +
        "\u1127\x05\u02CA\u0166\x02\u1126\u1125\x03\x02\x02\x02\u1127\u1128\x03" +
        "\x02\x02\x02\u1128\u1126\x03\x02\x02\x02\u1128\u1129\x03\x02\x02\x02\u1129" +
        "\u02CD\x03\x02\x02\x02\u112A\u112D\x07g\x02\x02\u112B\u112E\x05\u0434" +
        "\u021B\x02\u112C\u112E\x05\u0496\u024C\x02\u112D\u112B\x03\x02\x02\x02" +
        "\u112D\u112C\x03\x02\x02\x02\u112E\u112F\x03\x02\x02\x02\u112F\u1133\x05" +
        "\u02E0\u0171\x02\u1130\u1132\x05\u02E2\u0172\x02\u1131\u1130\x03\x02\x02" +
        "\x02\u1132\u1135\x03\x02\x02\x02\u1133\u1131\x03\x02\x02\x02\u1133\u1134" +
        "\x03\x02\x02\x02\u1134\u02CF\x03\x02\x02\x02\u1135\u1133\x03\x02\x02\x02" +
        "\u1136\u1137\x05\u0434\u021B\x02\u1137\u113A\x07\xD6\x02\x02\u1138\u113B" +
        "\x05\u02D2\u016A\x02\u1139\u113B\x05\u02D6\u016C\x02\u113A\u1138\x03\x02" +
        "\x02\x02\u113A\u1139\x03\x02\x02\x02\u113B\u113C\x03\x02\x02\x02\u113C" +
        "\u113A\x03\x02\x02\x02\u113C\u113D\x03\x02\x02\x02\u113D\u02D1\x03\x02" +
        "\x02\x02\u113E\u1142\x07A\x02\x02\u113F\u1141\x05\u02E2\u0172\x02\u1140" +
        "\u113F\x03\x02\x02\x02\u1141\u1144\x03\x02\x02\x02\u1142\u1140\x03\x02" +
        "\x02\x02\u1142\u1143\x03\x02\x02\x02\u1143\u02D3\x03\x02\x02\x02\u1144" +
        "\u1142\x03\x02\x02\x02\u1145\u1146\x07A\x02\x02\u1146\u114A\x05\u02DE" +
        "\u0170\x02\u1147\u1149\x05\u02E2\u0172\x02\u1148\u1147\x03\x02\x02\x02" +
        "\u1149\u114C\x03\x02\x02\x02\u114A\u1148\x03\x02\x02\x02\u114A\u114B\x03" +
        "\x02\x02\x02\u114B\u02D5\x03\x02\x02\x02\u114C\u114A\x03\x02\x02\x02\u114D" +
        "\u114F\t8\x02\x02\u114E\u1150\x05\u02DA\u016E\x02\u114F\u114E\x03\x02" +
        "\x02\x02\u1150\u1151\x03\x02\x02\x02\u1151\u114F\x03\x02\x02\x02\u1151" +
        "\u1152\x03\x02\x02\x02\u1152\u02D7\x03\x02\x02\x02\u1153\u1155\t9\x02" +
        "\x02\u1154\u1156\x05\u02DC\u016F\x02\u1155\u1154\x03\x02\x02\x02\u1156" +
        "\u1157\x03\x02\x02\x02\u1157\u1155\x03\x02\x02\x02\u1157\u1158\x03\x02" +
        "\x02\x02\u1158\u02D9\x03\x02\x02\x02\u1159\u115C\x05\u0434\u021B\x02\u115A" +
        "\u115C\x05\u0496\u024C\x02\u115B\u1159\x03\x02\x02\x02\u115B\u115A\x03" +
        "\x02\x02\x02\u115C\u1160\x03\x02\x02\x02\u115D\u115F\x05\u02E2\u0172\x02" +
        "\u115E\u115D\x03\x02\x02\x02\u115F\u1162\x03\x02\x02\x02\u1160\u115E\x03" +
        "\x02\x02\x02\u1160\u1161\x03\x02\x02\x02\u1161\u02DB\x03\x02\x02\x02\u1162" +
        "\u1160\x03\x02\x02\x02\u1163\u1166\x05\u0434\u021B\x02\u1164\u1166\x05" +
        "\u0496\u024C\x02\u1165\u1163\x03\x02\x02\x02\u1165\u1164\x03\x02\x02\x02" +
        "\u1166\u1167\x03\x02\x02\x02\u1167\u116B\x05\u02DE\u0170\x02\u1168\u116A" +
        "\x05\u02E2\u0172\x02\u1169\u1168\x03\x02\x02\x02\u116A\u116D\x03\x02\x02" +
        "\x02\u116B\u1169\x03\x02\x02\x02\u116B\u116C\x03\x02\x02\x02\u116C\u02DD" +
        "\x03\x02\x02\x02\u116D\u116B\x03\x02\x02\x02\u116E\u1171\x073\x02\x02" +
        "\u116F\u1172\x05\u0434\u021B\x02\u1170\u1172\x05\u0496\u024C\x02\u1171" +
        "\u116F\x03\x02\x02\x02\u1171\u1170\x03\x02\x02\x02\u1172\u02DF\x03\x02" +
        "\x02\x02\u1173\u1176\x07\u01EB\x02\x02\u1174\u1177\x05\u0434\u021B\x02" +
        "\u1175\u1177\x05\u0496\u024C\x02\u1176\u1174\x03\x02\x02\x02\u1176\u1175" +
        "\x03\x02\x02\x02\u1177\u02E1\x03\x02\x02\x02\u1178\u117A\t:\x02\x02\u1179" +
        "\u117B\x07\xF5\x02\x02\u117A\u1179\x03\x02\x02\x02\u117A\u117B\x03\x02" +
        "\x02\x02\u117B\u117E\x03\x02\x02\x02\u117C\u117F\x05\u0434\u021B\x02\u117D" +
        "\u117F\x05\u0496\u024C\x02\u117E\u117C\x03\x02\x02\x02\u117E\u117D\x03" +
        "\x02\x02\x02\u117F\u02E3\x03\x02\x02\x02\u1180\u1181\x07\u0128\x02\x02" +
        "\u1181\u1183\x05\u0470\u0239\x02\u1182\u1184\x05\u02E6\u0174\x02\u1183" +
        "\u1182\x03\x02\x02\x02\u1184\u1185\x03\x02\x02\x02\u1185\u1183\x03\x02" +
        "\x02\x02\u1185\u1186\x03\x02\x02\x02\u1186\u1188\x03\x02\x02\x02\u1187" +
        "\u1189\x05\u02E8\u0175\x02\u1188\u1187\x03\x02\x02\x02\u1188\u1189\x03" +
        "\x02\x02\x02\u1189\u118D\x03\x02\x02\x02\u118A\u118C\x05\u02EE\u0178\x02" +
        "\u118B\u118A\x03\x02\x02\x02\u118C\u118F\x03\x02\x02\x02\u118D\u118B\x03" +
        "\x02\x02\x02\u118D\u118E\x03\x02\x02\x02\u118E\u1191\x03\x02\x02\x02\u118F" +
        "\u118D\x03\x02\x02\x02\u1190\u1192\x05\u02F0\u0179\x02\u1191\u1190\x03" +
        "\x02\x02\x02\u1191\u1192\x03\x02\x02\x02\u1192\u1196\x03\x02\x02\x02\u1193" +
        "\u1195\x05\u02F4\u017B\x02\u1194\u1193\x03\x02\x02\x02\u1195\u1198\x03" +
        "\x02\x02\x02\u1196\u1194\x03\x02\x02\x02\u1196\u1197\x03\x02\x02\x02\u1197" +
        "\u02E5\x03\x02\x02\x02\u1198\u1196\x03\x02\x02\x02\u1199\u119B\x07\u0148" +
        "\x02\x02\u119A\u1199\x03\x02\x02\x02\u119A\u119B\x03\x02\x02\x02\u119B" +
        "\u119C\x03\x02\x02\x02\u119C\u119E\t+\x02\x02\u119D\u119F\x07\u0105\x02" +
        "\x02\u119E\u119D\x03\x02\x02\x02\u119E\u119F\x03\x02\x02\x02\u119F\u11A1" +
        "\x03\x02\x02\x02\u11A0\u11A2\x05\u0444\u0223\x02\u11A1\u11A0\x03\x02\x02" +
        "\x02\u11A2\u11A3\x03\x02\x02\x02\u11A3\u11A1\x03\x02\x02\x02\u11A3\u11A4" +
        "\x03\x02\x02\x02\u11A4\u02E7\x03\x02\x02\x02\u11A5\u11A7\x07J\x02\x02" +
        "\u11A6\u11A5\x03\x02\x02\x02\u11A6\u11A7\x03\x02\x02\x02\u11A7\u11A8\x03" +
        "\x02\x02\x02\u11A8\u11AA\x07\u01AE\x02\x02\u11A9\u11AB\x07\u0100\x02\x02" +
        "\u11AA\u11A9\x03\x02\x02\x02\u11AA\u11AB\x03\x02\x02\x02\u11AB\u11AD\x03" +
        "\x02\x02\x02\u11AC\u11AE\x05\u045C\u022F\x02\u11AD\u11AC\x03\x02\x02\x02" +
        "\u11AE\u11AF\x03\x02\x02\x02\u11AF\u11AD\x03\x02\x02\x02\u11AF\u11B0\x03" +
        "\x02\x02\x02\u11B0\u11B2\x03\x02\x02\x02\u11B1\u11B3\x05\u02EA\u0176\x02" +
        "\u11B2\u11B1\x03\x02\x02\x02\u11B2\u11B3\x03\x02\x02\x02\u11B3\u11B5\x03" +
        "\x02\x02\x02\u11B4\u11B6\x05\u02EC\u0177\x02\u11B5\u11B4\x03\x02\x02\x02" +
        "\u11B5\u11B6\x03\x02\x02\x02\u11B6\u02E9\x03\x02\x02\x02\u11B7\u11B9\x07" +
        "\xD6\x02\x02\u11B8\u11B7\x03\x02\x02\x02\u11B8\u11B9\x03\x02\x02\x02\u11B9" +
        "\u11BA\x03\x02\x02\x02\u11BA\u11BB\x07\x10\x02\x02\u11BB\u11BC\x07\u0100" +
        "\x02\x02\u11BC\u11BD\x05\u045C\u022F\x02\u11BD\u02EB\x03\x02\x02\x02\u11BE" +
        "\u11C0\x07\xD6\x02\x02\u11BF\u11BE\x03\x02\x02\x02\u11BF\u11C0\x03\x02" +
        "\x02\x02\u11C0\u11C1\x03\x02\x02\x02\u11C1\u11C3\x07\u0132\x02\x02\u11C2" +
        "\u11C4\x07\u0100\x02\x02\u11C3\u11C2\x03\x02\x02\x02\u11C3\u11C4\x03\x02" +
        "\x02\x02\u11C4\u11C5\x03\x02\x02\x02\u11C5\u11C6\x05\u045C\u022F\x02\u11C6" +
        "\u02ED\x03\x02\x02\x02\u11C7\u11C9\x07\u01FC\x02\x02\u11C8\u11CA\x05\u0470" +
        "\u0239\x02\u11C9\u11C8\x03\x02\x02\x02\u11CA\u11CB\x03\x02\x02\x02\u11CB" +
        "\u11C9\x03\x02\x02\x02\u11CB\u11CC\x03\x02\x02\x02\u11CC\u02EF\x03\x02" +
        "\x02\x02\u11CD\u11CE\x07\u0150\x02\x02\u11CE\u11D0\x07\u0166\x02\x02\u11CF" +
        "\u11D1\x07\u0100\x02\x02\u11D0\u11CF\x03\x02\x02\x02\u11D0\u11D1\x03\x02" +
        "\x02\x02\u11D1\u11D2\x03\x02\x02\x02\u11D2\u11D4\x05\u0480\u0241\x02\u11D3" +
        "\u11D5\x05\u02F2\u017A\x02\u11D4\u11D3\x03\x02\x02\x02\u11D4\u11D5\x03" +
        "\x02\x02\x02\u11D5\u02F1\x03\x02\x02\x02\u11D6\u11D7\t\x06\x02\x02\u11D7" +
        "\u11D8\x05\u0480\u0241\x02\u11D8\u02F3\x03\x02\x02\x02\u11D9\u11DB\x07" +
        "\xE0\x02\x02\u11DA\u11DC\x05\u02F6\u017C\x02\u11DB\u11DA\x03\x02\x02\x02" +
        "\u11DC\u11DD\x03\x02\x02\x02\u11DD\u11DB\x03\x02\x02\x02\u11DD\u11DE\x03" +
        "\x02\x02\x02\u11DE\u02F5\x03\x02\x02\x02\u11DF\u11E9\x05\u0470\u0239\x02" +
        "\u11E0";
    Cobol85Parser._serializedATNSegment9 = "\u11EA\x07\u0120\x02\x02\u11E1\u11EA\x07\u01A1\x02\x02\u11E2\u11E3\x07" +
        "\u0138\x02\x02\u11E3\u11EA\x07\u0199\x02\x02\u11E4\u11EA\x07l\x02\x02" +
        "\u11E5\u11EA\x07\u0185\x02\x02\u11E6\u11E7\x07\u0204\x02\x02\u11E7\u11E8" +
        "\x07\u0189\x02\x02\u11E8\u11EA\x07l\x02\x02\u11E9\u11E0\x03\x02\x02\x02" +
        "\u11E9\u11E1\x03\x02\x02\x02\u11E9\u11E2\x03\x02\x02\x02\u11E9\u11E4\x03" +
        "\x02\x02\x02\u11E9\u11E5\x03\x02\x02\x02\u11E9\u11E6\x03\x02\x02\x02\u11E9" +
        "\u11EA\x03\x02\x02\x02\u11EA\u02F7\x03\x02\x02\x02\u11EB\u11ED\x07\u012E" +
        "\x02\x02\u11EC\u11EE\x07\v\x02\x02\u11ED\u11EC\x03\x02\x02\x02\u11ED\u11EE" +
        "\x03\x02\x02\x02\u11EE\u11F1\x03\x02\x02\x02\u11EF\u11F2\x05\u02FA\u017E" +
        "\x02\u11F0\u11F2\x05\u02FE\u0180\x02\u11F1\u11EF\x03\x02\x02\x02\u11F1" +
        "\u11F0\x03\x02\x02\x02\u11F2\u02F9\x03\x02\x02\x02\u11F3\u11F4\x05\u02FC" +
        "\u017F\x02\u11F4\u11F6\x07\u01EB\x02\x02\u11F5\u11F7\x05\u0434\u021B\x02" +
        "\u11F6\u11F5\x03\x02\x02\x02\u11F7\u11F8\x03\x02\x02\x02\u11F8\u11F6\x03" +
        "\x02\x02\x02\u11F8\u11F9\x03\x02\x02\x02\u11F9\u02FB\x03\x02\x02\x02\u11FA" +
        "\u11FD\x05\u0434\u021B\x02\u11FB\u11FD\x05\u0496\u024C\x02\u11FC\u11FA" +
        "\x03\x02\x02\x02\u11FC\u11FB\x03\x02\x02\x02\u11FD\u02FD\x03\x02\x02\x02" +
        "\u11FE\u11FF\t4\x02\x02\u11FF\u1200\x05\u0300\u0181\x02\u1200\u1202\x07" +
        "\u01EB\x02\x02\u1201\u1203\x05\u0434\u021B\x02\u1202\u1201\x03\x02\x02" +
        "\x02\u1203\u1204\x03\x02\x02\x02\u1204\u1202\x03\x02\x02\x02\u1204\u1205" +
        "\x03\x02\x02\x02\u1205\u02FF\x03\x02\x02\x02\u1206\u1207\x05\u0434\u021B" +
        "\x02\u1207\u0301\x03\x02\x02\x02\u1208\u120B\x07\u0130\x02\x02\u1209\u120C" +
        "\x05\u0434\u021B\x02\u120A\u120C\x05\u0496\u024C\x02\u120B\u1209\x03\x02" +
        "\x02\x02\u120B\u120A\x03\x02\x02\x02\u120C\u120D\x03\x02\x02\x02\u120D" +
        "\u1210\x073\x02\x02\u120E\u1211\x05\u0304\u0183\x02\u120F\u1211\x05\u0308" +
        "\u0185\x02\u1210\u120E\x03\x02\x02\x02\u1210\u120F\x03\x02\x02\x02\u1211" +
        "\u1213\x03\x02\x02\x02\u1212\u1214\x05\u0402\u0202\x02\u1213\u1212\x03" +
        "\x02\x02\x02\u1213\u1214\x03\x02\x02\x02\u1214\u1216\x03\x02\x02\x02\u1215" +
        "\u1217\x05\u0404\u0203\x02\u1216\u1215\x03\x02\x02\x02\u1216\u1217\x03" +
        "\x02\x02\x02\u1217\u1219\x03\x02\x02\x02\u1218\u121A\x07\xA9\x02\x02\u1219" +
        "\u1218\x03\x02\x02\x02\u1219\u121A\x03\x02\x02\x02\u121A\u0303\x03\x02" +
        "\x02\x02\u121B\u121D\x05\u0306\u0184\x02\u121C\u121B\x03\x02\x02\x02\u121D" +
        "\u121E\x03\x02\x02\x02\u121E\u121C\x03\x02\x02\x02\u121E\u121F\x03\x02" +
        "\x02\x02\u121F\u0305\x03\x02\x02\x02\u1220\u1222\x05\u0434\u021B\x02\u1221" +
        "\u1223\x07\u019E\x02\x02\u1222\u1221\x03\x02\x02\x02\u1222\u1223\x03\x02" +
        "\x02\x02\u1223\u0307\x03\x02\x02\x02\u1224\u1225\x05\u030A\u0186\x02\u1225" +
        "\u1227\x07\xE0\x02\x02\u1226\u1228\x05\u030C\u0187\x02\u1227\u1226\x03" +
        "\x02\x02\x02\u1228\u1229\x03\x02\x02\x02\u1229\u1227\x03\x02\x02\x02\u1229" +
        "\u122A\x03\x02\x02\x02\u122A\u0309\x03\x02\x02\x02\u122B\u122E\x05\u0434" +
        "\u021B\x02\u122C\u122E\x05\u0496\u024C\x02\u122D\u122B\x03\x02\x02\x02" +
        "\u122D\u122C\x03\x02\x02\x02\u122E\u030B\x03\x02\x02\x02\u122F\u1231\x05" +
        "\u0434\u021B\x02\u1230\u1232\x07\u019E\x02\x02\u1231\u1230\x03\x02\x02" +
        "\x02\u1231\u1232\x03\x02\x02\x02\u1232\u030D\x03\x02\x02\x02\u1233\u1238" +
        "\x07\u0149\x02\x02\u1234\u1239\x05\u0310\u0189\x02\u1235\u1239\x05\u0314" +
        "\u018B\x02\u1236\u1239\x05\u0318\u018D\x02\u1237\u1239\x05\u031A\u018E" +
        "\x02\u1238\u1234\x03\x02\x02\x02\u1238\u1235\x03\x02\x02\x02\u1238\u1236" +
        "\x03\x02\x02\x02\u1238\u1237\x03\x02\x02\x02\u1239\u123A\x03\x02\x02\x02" +
        "\u123A\u1238\x03\x02\x02\x02\u123A\u123B\x03\x02\x02\x02\u123B\u030F\x03" +
        "\x02\x02\x02\u123C\u123E\x07\xF8\x02\x02\u123D\u123F\x05\u0312\u018A\x02" +
        "\u123E\u123D\x03\x02\x02\x02\u123F\u1240\x03\x02\x02\x02\u1240\u123E\x03" +
        "\x02\x02\x02\u1240\u1241\x03\x02\x02\x02\u1241\u0311\x03\x02\x02\x02\u1242" +
        "\u1249\x05\u0470\u0239\x02\u1243\u124A\x07\u0198\x02\x02\u1244\u1246\x07" +
        "\u0204\x02\x02\u1245\u1244\x03\x02\x02\x02\u1245\u1246\x03\x02\x02\x02" +
        "\u1246\u1247\x03\x02\x02\x02\u1247\u1248\x07\u0138\x02\x02\u1248\u124A" +
        "\x07\u0199\x02\x02\u1249\u1243\x03\x02\x02\x02\u1249\u1245\x03\x02\x02" +
        "\x02\u1249\u124A\x03\x02\x02\x02\u124A\u0313\x03\x02\x02\x02\u124B\u124D" +
        "\x07\u0150\x02\x02\u124C\u124E\x05\u0316\u018C\x02\u124D\u124C\x03\x02" +
        "\x02\x02\u124E\u124F\x03\x02\x02\x02\u124F\u124D\x03\x02\x02\x02\u124F" +
        "\u1250\x03\x02\x02\x02\u1250\u0315\x03\x02\x02\x02\u1251\u1257\x05\u0470" +
        "\u0239\x02\u1252\u1254\x07\u0204\x02\x02\u1253\u1252\x03\x02\x02\x02\u1253" +
        "\u1254\x03\x02\x02\x02\u1254\u1255\x03\x02\x02\x02\u1255\u1256\x07\u0138" +
        "\x02\x02\u1256\u1258\x07\u0199\x02\x02\u1257\u1253\x03\x02\x02\x02\u1257" +
        "\u1258\x03\x02\x02\x02\u1258\u0317\x03\x02\x02\x02\u1259\u125B\x07\xEA" +
        "\x02\x02\u125A\u125C\x05\u0470\u0239\x02\u125B\u125A\x03\x02\x02\x02\u125C" +
        "\u125D\x03\x02\x02\x02\u125D\u125B\x03\x02\x02\x02\u125D\u125E\x03\x02" +
        "\x02\x02\u125E\u0319\x03\x02\x02\x02\u125F\u1261\x07\xCB\x02\x02\u1260" +
        "\u1262\x05\u0470\u0239\x02\u1261\u1260\x03\x02\x02\x02\u1262\u1263\x03" +
        "\x02\x02\x02\u1263\u1261\x03\x02\x02\x02\u1263\u1264\x03\x02\x02\x02\u1264" +
        "\u031B\x03\x02\x02\x02\u1265\u1268\x07\u0159\x02\x02\u1266\u1269\x05\u031E" +
        "\u0190\x02\u1267\u1269\x05\u0320\u0191\x02\u1268\u1266\x03\x02\x02\x02" +
        "\u1268\u1267\x03\x02\x02\x02\u1269\u031D\x03\x02\x02\x02\u126A\u126C\x05" +
        "\u0322\u0192\x02\u126B\u126A\x03\x02\x02\x02\u126B\u126C\x03\x02\x02\x02" +
        "\u126C\u1270\x03\x02\x02\x02\u126D\u126F\x05\u021A\u010E\x02\u126E\u126D" +
        "\x03\x02\x02\x02\u126F\u1272\x03\x02\x02\x02\u1270\u126E\x03\x02\x02\x02" +
        "\u1270\u1271\x03\x02\x02\x02\u1271\u1273\x03\x02\x02\x02\u1272\u1270\x03" +
        "\x02\x02\x02\u1273\u1274\x07\xAB\x02\x02\u1274\u031F\x03\x02\x02\x02\u1275" +
        "\u1278\x05\u0480\u0241\x02\u1276\u1277\t\x06\x02\x02\u1277\u1279\x05\u0480" +
        "\u0241\x02\u1278\u1276\x03\x02\x02\x02\u1278\u1279\x03\x02\x02\x02\u1279" +
        "\u127B\x03\x02\x02\x02\u127A\u127C\x05\u0322\u0192\x02\u127B\u127A\x03" +
        "\x02\x02\x02\u127B\u127C\x03\x02\x02\x02\u127C\u0321\x03\x02\x02\x02\u127D" +
        "\u1281\x05\u0324\u0193\x02\u127E\u1281\x05\u0326\u0194\x02\u127F\u1281" +
        "\x05\u0328\u0195\x02\u1280\u127D\x03\x02\x02\x02\u1280\u127E\x03\x02\x02" +
        "\x02\u1280\u127F\x03\x02\x02\x02\u1281\u0323\x03\x02\x02\x02\u1282\u1285" +
        "\x05\u0434\u021B\x02\u1283\u1285\x05\u049C\u024F\x02\u1284\u1282\x03\x02" +
        "\x02\x02\u1284\u1283\x03\x02\x02\x02\u1285\u1286\x03\x02\x02\x02\u1286" +
        "\u1287\x07\u01E9\x02\x02\u1287\u0325\x03\x02\x02\x02\u1288\u128A\x05\u0334" +
        "\u019B\x02\u1289\u1288\x03\x02\x02\x02\u1289\u128A\x03\x02\x02\x02\u128A" +
        "\u128B\x03\x02\x02\x02\u128B\u128C\x07\u01F7\x02\x02\u128C\u128D\x05\u0418" +
        "\u020D\x02\u128D\u0327\x03\x02\x02\x02\u128E\u128F\x05\u0334\u019B\x02" +
        "\u128F\u1290\x05\u032A\u0196\x02\u1290\u1296\x03\x02\x02\x02\u1291\u1293" +
        "\x05\u032A\u0196\x02\u1292\u1294\x05\u0334\u019B\x02\u1293\u1292\x03\x02" +
        "\x02\x02\u1293\u1294\x03\x02\x02\x02\u1294\u1296\x03\x02\x02\x02\u1295" +
        "\u128E\x03\x02\x02\x02\u1295\u1291\x03\x02\x02\x02\u1296\u0329\x03\x02" +
        "\x02\x02\u1297\u1298\x07\u01FF\x02\x02\u1298\u129C\x05\u032C\u0197\x02" +
        "\u1299\u129B\x05\u032E\u0198\x02\u129A\u1299\x03\x02\x02\x02\u129B\u129E" +
        "\x03\x02\x02\x02\u129C\u129A\x03\x02\x02\x02\u129C\u129D\x03\x02\x02\x02" +
        "\u129D\u032B\x03\x02\x02\x02\u129E\u129C\x03\x02\x02\x02\u129F\u12A2\x05" +
        "\u0434\u021B\x02\u12A0\u12A2\x05\u0496\u024C\x02\u12A1\u129F\x03\x02\x02" +
        "\x02\u12A1\u12A0\x03\x02\x02\x02\u12A2\u12A3\x03\x02\x02\x02\u12A3\u12A4" +
        "\x05\u0330\u0199\x02\u12A4\u12A5\x05\u0332\u019A\x02\u12A5\u12A6\x05\u0326" +
        "\u0194\x02\u12A6\u032D\x03\x02\x02\x02\u12A7\u12A8\x07\t\x02\x02\u12A8" +
        "\u12A9\x05\u032C\u0197\x02\u12A9\u032F\x03\x02\x02\x02\u12AA\u12AE\x07" +
        "\xD9\x02\x02\u12AB\u12AF\x05\u0434\u021B\x02\u12AC\u12AF\x05\u0496\u024C" +
        "\x02\u12AD\u12AF\x05\u040A\u0206\x02\u12AE\u12AB\x03\x02\x02\x02\u12AE" +
        "\u12AC\x03\x02\x02\x02\u12AE\u12AD\x03\x02\x02\x02\u12AF\u0331\x03\x02" +
        "\x02\x02\u12B0\u12B4\x073\x02\x02\u12B1\u12B5\x05\u0434\u021B\x02\u12B2" +
        "\u12B5\x05\u0496\u024C\x02\u12B3\u12B5\x05\u040A\u0206\x02\u12B4\u12B1" +
        "\x03\x02\x02\x02\u12B4\u12B2\x03\x02\x02\x02\u12B4\u12B3\x03\x02\x02\x02" +
        "\u12B5\u0333\x03\x02\x02\x02\u12B6\u12B8\x07\u0204\x02\x02\u12B7\u12B6" +
        "\x03\x02\x02\x02\u12B7\u12B8\x03\x02\x02\x02\u12B8\u12B9\x03\x02\x02\x02" +
        "\u12B9\u12BA\x07\u01DF\x02\x02\u12BA\u12BB\t:\x02\x02\u12BB\u0335\x03" +
        "\x02\x02\x02\u12BC\u12BE\x07\u016F\x02\x02\u12BD\u12BF\x05\u0462\u0232" +
        "\x02\u12BE\u12BD\x03\x02\x02\x02\u12BF\u12C0\x03\x02\x02\x02\u12C0\u12BE" +
        "\x03\x02\x02\x02\u12C0\u12C1\x03\x02\x02\x02\u12C1\u0337\x03\x02\x02\x02" +
        "\u12C2\u12C3\x07\u0178\x02\x02\u12C3\u12C5\x05\u0470\u0239\x02\u12C4\u12C6" +
        "\x07\u0137\x02\x02\u12C5\u12C4\x03\x02\x02\x02\u12C5\u12C6\x03\x02\x02" +
        "\x02\u12C6\u12C8\x03\x02\x02\x02\u12C7\u12C9\x07\u017B\x02\x02\u12C8\u12C7" +
        "\x03\x02\x02\x02\u12C8\u12C9\x03\x02\x02\x02\u12C9\u12CB\x03\x02\x02\x02" +
        "\u12CA\u12CC\x05\u033A\u019E\x02\u12CB\u12CA\x03\x02\x02\x02\u12CB\u12CC" +
        "\x03\x02\x02\x02\u12CC\u12CE\x03\x02\x02\x02\u12CD\u12CF\x05\u033C\u019F" +
        "\x02\u12CE\u12CD\x03\x02\x02\x02\u12CE\u12CF\x03\x02\x02\x02\u12CF\u12D1" +
        "\x03\x02\x02\x02\u12D0\u12D2\x05\u033E\u01A0\x02\u12D1\u12D0\x03\x02\x02" +
        "\x02\u12D1\u12D2\x03\x02\x02\x02\u12D2\u12D4\x03\x02\x02\x02\u12D3\u12D5" +
        "\x05\u03FA\u01FE\x02\u12D4\u12D3\x03\x02\x02\x02\u12D4\u12D5\x03\x02\x02" +
        "\x02\u12D5\u12D7\x03\x02\x02\x02\u12D6\u12D8\x05\u03FC\u01FF\x02\u12D7" +
        "\u12D6\x03\x02\x02\x02\u12D7\u12D8\x03\x02\x02\x02\u12D8\u12DA\x03\x02" +
        "\x02\x02\u12D9\u12DB\x05\u03F6\u01FC\x02\u12DA\u12D9\x03\x02\x02\x02\u12DA" +
        "\u12DB\x03\x02\x02\x02\u12DB\u12DD\x03\x02\x02\x02\u12DC\u12DE\x05\u03F8" +
        "\u01FD\x02\u12DD\u12DC\x03\x02\x02\x02\u12DD\u12DE\x03\x02\x02\x02\u12DE" +
        "\u12E0\x03\x02\x02\x02\u12DF\u12E1\x07\xAC\x02\x02\u12E0\u12DF\x03\x02" +
        "\x02\x02\u12E0\u12E1\x03\x02\x02\x02\u12E1\u0339\x03\x02\x02\x02\u12E2" +
        "\u12E3\x07\xFD\x02\x02\u12E3\u12E4\x05\u0434\u021B\x02\u12E4\u033B\x03" +
        "\x02\x02\x02\u12E5\u12E7\x07\u0204\x02\x02\u12E6\u12E5\x03\x02\x02\x02" +
        "\u12E6\u12E7\x03\x02\x02\x02\u12E7\u12EB\x03\x02\x02\x02\u12E8\u12E9\t" +
        ";\x02\x02\u12E9\u12EC\x07\u0120\x02\x02\u12EA\u12EC\x07\u0201\x02\x02" +
        "\u12EB\u12E8\x03\x02\x02\x02\u12EB\u12EA\x03\x02\x02\x02\u12EC\u033D\x03" +
        "\x02\x02\x02\u12ED\u12EF\x07\u0105\x02\x02\u12EE\u12F0\x07\u0100\x02\x02" +
        "\u12EF\u12EE\x03\x02\x02\x02\u12EF\u12F0\x03\x02\x02\x02\u12F0\u12F1\x03" +
        "\x02\x02\x02\u12F1\u12F2\x05\u0444\u0223\x02\u12F2\u033F\x03\x02\x02\x02" +
        "\u12F3\u12F6\x07\u0179\x02\x02\u12F4\u12F7\x05\u0342\u01A2\x02\u12F5\u12F7" +
        "\x05\u0346\u01A4\x02\u12F6\u12F4\x03\x02\x02\x02\u12F6\u12F5\x03\x02\x02" +
        "\x02\u12F7\u12F9\x03\x02\x02\x02\u12F8\u12FA\x05\u0406\u0204\x02\u12F9" +
        "\u12F8\x03\x02\x02\x02\u12F9\u12FA\x03\x02\x02\x02\u12FA\u12FC\x03\x02" +
        "\x02\x02\u12FB\u12FD\x05\u0408\u0205\x02\u12FC\u12FB\x03\x02\x02\x02\u12FC" +
        "\u12FD\x03\x02\x02\x02\u12FD\u12FF\x03\x02\x02\x02\u12FE\u1300\x07\xAD" +
        "\x02\x02\u12FF\u12FE\x03\x02\x02\x02\u12FF\u1300\x03\x02\x02\x02\u1300" +
        "\u0341\x03\x02\x02\x02\u1301\u1302\x05\u046A\u0236\x02\u1302\u1303\x07" +
        "\xD9\x02\x02\u1303\u130B\x05\u0344\u01A3\x02\u1304\u130A\x05\u034C\u01A7" +
        "\x02\u1305\u130A\x05\u034E\u01A8\x02\u1306\u130A\x05\u0350\u01A9\x02\u1307" +
        "\u130A\x05\u0352\u01AA\x02\u1308\u130A\x05\u0354\u01AB\x02\u1309\u1304" +
        "\x03\x02\x02\x02\u1309\u1305\x03\x02\x02\x02\u1309\u1306\x03\x02\x02\x02" +
        "\u1309\u1307\x03\x02\x02\x02\u1309\u1308\x03\x02\x02\x02\u130A\u130D\x03" +
        "\x02\x02\x02\u130B\u1309\x03\x02\x02\x02\u130B\u130C\x03\x02\x02\x02\u130C" +
        "\u0343\x03\x02\x02\x02\u130D\u130B\x03\x02\x02\x02\u130E\u130F\x07\u01E3" +
        "\x02\x02\u130F\u1315\x05\u046A\u0236\x02\u1310\u1311\x07\u0109\x02\x02" +
        "\u1311\u1315\x07\u01E3\x02\x02\u1312\u1313\x07\x16\x02\x02\u1313\u1315" +
        "\x07\u01E3\x02\x02\u1314\u130E\x03\x02\x02\x02\u1314\u1310\x03\x02\x02" +
        "\x02\u1314\u1312\x03\x02\x02\x02\u1315\u0345\x03\x02\x02\x02\u1316\u1317" +
        "\x05\u0462\u0232\x02\u1317\u1319\t<\x02\x02\u1318\u131A\x07\xFD\x02\x02" +
        "\u1319\u1318\x03\x02\x02\x02\u1319\u131A\x03\x02\x02\x02\u131A\u131B\x03" +
        "\x02\x02\x02\u131B\u131D\x05\u0434\u021B\x02\u131C\u131E\x05\u0348\u01A5" +
        "\x02\u131D\u131C\x03\x02\x02\x02\u131D\u131E\x03\x02\x02\x02\u131E\u1320" +
        "\x03\x02\x02\x02\u131F\u1321\x05\u034A\u01A6\x02\u1320\u131F\x03\x02\x02" +
        "\x02\u1320\u1321\x03\x02\x02\x02\u1321\u0347\x03\x02\x02\x02\u1322\u1323" +
        "\x07\u0138\x02\x02\u1323\u1327\x07o\x02\x02\u1324\u1326\x05\u021A\u010E" +
        "\x02\u1325\u1324\x03\x02\x02\x02\u1326\u1329\x03\x02\x02\x02\u1327\u1325" +
        "\x03\x02\x02\x02\u1327\u1328\x03\x02\x02\x02\u1328\u0349\x03\x02\x02\x02" +
        "\u1329\u1327\x03\x02\x02\x02\u132A\u132B\x07\u0204\x02\x02\u132B\u132F" +
        "\x07o\x02\x02\u132C\u132E\x05\u021A\u010E\x02\u132D\u132C\x03\x02\x02" +
        "\x02\u132E\u1331\x03\x02\x02\x02\u132F\u132D\x03\x02\x02\x02\u132F\u1330" +
        "\x03\x02\x02\x02\u1330\u034B\x03\x02\x02\x02\u1331\u132F\x03\x02\x02\x02" +
        "\u1332\u1334\x07)\x02\x02\u1333\u1335\x07\u01E7\x02\x02\u1334\u1333\x03" +
        "\x02\x02\x02\u1334\u1335\x03\x02\x02\x02\u1335\u1338\x03\x02\x02\x02\u1336" +
        "\u1339\x05\u049A\u024E\x02\u1337\u1339\x05\u0434\u021B\x02\u1338\u1336" +
        "\x03\x02\x02\x02\u1338\u1337\x03\x02\x02\x02\u1339\u034D\x03\x02\x02\x02" +
        "\u133A\u133C\x07\u0204\x02\x02\u133B\u133A\x03\x02\x02\x02\u133B\u133C" +
        "\x03\x02\x02\x02\u133C\u133D\x03\x02\x02\x02\u133D\u133E\x07\u0138\x02" +
        "\x02\u133E\u133F\x07\u0201\x02\x02\u133F\u034F\x03\x02\x02\x02\u1340\u1342" +
        "\x07\u01E3\x02\x02\u1341\u1343\x07\xF1\x02\x02\u1342\u1341\x03\x02\x02" +
        "\x02\u1342\u1343\x03\x02\x02\x02\u1343\u1344\x03\x02\x02\x02\u1344\u1345" +
        "\x05\u046A\u0236\x02\u1345\u0351\x03\x02\x02\x02\u1346\u1348\x07\u01B9" +
        "\x02\x02\u1347\u1349\x07\xF1\x02\x02\u1348\u1347\x03\x02\x02\x02\u1348" +
        "\u1349\x03\x02\x02\x02\u1349\u134C\x03\x02\x02\x02\u134A\u134D\x05\u049A" +
        "\u024E\x02\u134B\u134D\x05\u0434\u021B\x02\u134C\u134A\x03\x02\x02\x02" +
        "\u134C\u134B\x03\x02\x02\x02\u134D\u0353\x03\x02\x02\x02\u134E\u1350\x07" +
        "\u01CB\x02\x02\u134F\u1351\x07\xF1\x02\x02\u1350\u134F\x03\x02\x02\x02" +
        "\u1350\u1351\x03\x02\x02\x02\u1351\u1352\x03\x02\x02\x02\u1352\u1353\x05" +
        "\u0434\u021B\x02\u1353\u0355\x03\x02\x02\x02\u1354\u1355\x07\u0185\x02" +
        "\x02\u1355\u1358\x05\u0484\u0243\x02\u1356\u1357\x07\xD9\x02\x02\u1357" +
        "\u1359\x05\u0444\u0223\x02\u1358\u1356\x03\x02\x02\x02\u1358\u1359\x03" +
        "\x02\x02\x02\u1359\u0357\x03\x02\x02\x02\u135A\u135B\x07\u0195\x02\x02" +
        "\u135B\u135D\x05\u0470\u0239\x02\u135C\u135E\x07\u017B\x02\x02\u135D\u135C" +
        "\x03\x02\x02\x02\u135D\u135E\x03\x02\x02\x02\u135E\u1360\x03\x02\x02\x02" +
        "\u135F\u1361\x05\u035A\u01AE\x02\u1360\u135F\x03\x02\x02\x02\u1360\u1361" +
        "\x03\x02\x02\x02\u1361\u1362\x03\x02\x02\x02\u1362\u1364\x05\u03F6\u01FC" +
        "\x02\u1363\u1365\x05\u03F8\u01FD\x02\u1364\u1363\x03\x02\x02\x02\u1364" +
        "\u1365\x03\x02\x02\x02\u1365\u1367\x03\x02\x02\x02\u1366\u1368\x07\xAE" +
        "\x02\x02\u1367\u1366\x03\x02\x02\x02\u1367\u1368\x03\x02\x02\x02\u1368" +
        "\u0359\x03\x02\x02\x02\u1369\u136A\x07\xFD\x02\x02\u136A\u136B\x05\u0444" +
        "\u0223\x02\u136B\u035B\x03\x02\x02\x02\u136C\u136D\x07\u019A\x02\x02\u136D" +
        "\u136F\x05\u0484\u0243\x02\u136E\u1370\x05\u035E\u01B0\x02\u136F\u136E" +
        "\x03\x02\x02\x02\u136F\u1370\x03\x02\x02\x02\u1370\u1372\x03\x02\x02\x02" +
        "\u1371\u1373\x05\u03FA\u01FE\x02\u1372\u1371\x03\x02\x02\x02\u1372\u1373" +
        "\x03\x02\x02\x02\u1373\u1375\x03\x02\x02\x02\u1374\u1376\x05\u03FC\u01FF" +
        "\x02\u1375\u1374\x03\x02\x02\x02\u1375\u1376\x03\x02\x02\x02\u1376\u1378" +
        "\x03\x02\x02\x02\u1377\u1379\x07\xAF\x02\x02\u1378\u1377\x03\x02\x02\x02" +
        "\u1378\u1379\x03\x02\x02\x02\u1379\u035D\x03\x02\x02\x02\u137A\u137B\x07" +
        "\xD9\x02\x02\u137B\u137C\x05\u0434\u021B\x02\u137C\u035F\x03\x02\x02\x02" +
        "\u137D\u137F\x07\u01A4\x02\x02\u137E\u1380\x07\v\x02\x02\u137F\u137E\x03" +
        "\x02\x02\x02\u137F\u1380\x03\x02\x02\x02\u1380\u1381\x03\x02\x02\x02\u1381" +
        "\u1383\x05\u0444\u0223\x02\u1382\u1384\x05\u0362\u01B2\x02\u1383\u1382" +
        "\x03\x02\x02\x02\u1383\u1384\x03\x02\x02\x02\u1384\u1386\x03\x02\x02\x02" +
        "\u1385\u1387\x05\u03F6\u01FC\x02\u1386\u1385\x03\x02\x02\x02\u1386\u1387" +
        "\x03\x02\x02\x02\u1387\u1389\x03\x02\x02\x02\u1388\u138A\x05\u0364\u01B3" +
        "\x02\u1389\u1388\x03\x02\x02\x02\u138A\u138B\x03\x02\x02\x02\u138B\u1389" +
        "\x03\x02\x02\x02\u138B\u138C\x03\x02\x02\x02\u138C\u138E\x03\x02\x02\x02" +
        "\u138D\u138F\x07\xB0\x02\x02\u138E\u138D\x03\x02\x02\x02\u138E\u138F\x03" +
        "\x02\x02\x02\u138F\u0361\x03\x02\x02\x02\u1390\u1391\x07\u01FF\x02\x02" +
        "\u1391\u1392\x05\u0444\u0223\x02\u1392\u0363\x03\x02\x02\x02\u1393\u1394" +
        "\x07\u0202\x02\x02\u1394\u139D\x05\u0418\u020D\x02\u1395\u1396\x07\u0137" +
        "\x02\x02\u1396\u139E\x07\u01AC\x02\x02\u1397\u1399\x05\u021A\u010E\x02" +
        "\u1398\u1397\x03\x02\x02\x02\u1399\u139C\x03\x02\x02\x02\u139A\u1398\x03" +
        "\x02\x02\x02\u139A\u139B\x03\x02\x02\x02\u139B\u139E\x03\x02\x02\x02\u139C" +
        "\u139A\x03\x02\x02\x02\u139D\u1395\x03\x02\x02\x02\u139D\u139A\x03\x02" +
        "\x02\x02\u139E\u0365\x03\x02\x02\x02\u139F\u13A2\x07\u01AB\x02\x02\u13A0" +
        "\u13A3\x05\u0368\u01B5\x02\u13A1\u13A3\x05\u036A\u01B6\x02\u13A2\u13A0" +
        "\x03\x02\x02\x02\u13A2\u13A1\x03\x02\x02\x02\u13A3\u13A5\x03\x02\x02\x02" +
        "\u13A4\u13A6\x05\u0406\u0204\x02\u13A5\u13A4\x03\x02\x02\x02\u13A5\u13A6" +
        "\x03\x02\x02\x02\u13A6\u13A8\x03\x02\x02\x02\u13A7\u13A9\x05\u0408\u0205" +
        "\x02\u13A8\u13A7\x03\x02\x02\x02\u13A8\u13A9\x03\x02\x02\x02\u13A9\u0367" +
        "\x03\x02\x02\x02\u13AA\u13AD\x05\u0434\u021B\x02\u13AB\u13AD\x05\u0496" +
        "\u024C\x02\u13AC\u13AA\x03\x02\x02\x02\u13AC\u13AB\x03\x02\x02\x02\u13AD" +
        "\u13AF\x03\x02\x02\x02\u13AE\u13B0\x05\u036C\u01B7\x02\u13AF\u13AE\x03" +
        "\x02\x02\x02\u13AF\u13B0\x03\x02\x02\x02\u13B0\u13B2\x03\x02\x02\x02\u13B1" +
        "\u13B3\x05\u036E\u01B8\x02\u13B2\u13B1\x03\x02\x02\x02\u13B2\u13B3\x03" +
        "\x02\x02\x02\u13B3\u13B5\x03\x02\x02\x02\u13B4\u13B6\x05\u0370\u01B9\x02" +
        "\u13B5\u13B4\x03\x02\x02\x02\u13B5\u13B6\x03\x02\x02\x02\u13B6\u13B8\x03" +
        "\x02\x02\x02\u13B7\u13B9\x05\u0372\u01BA\x02\u13B8\u13B7\x03\x02\x02\x02" +
        "\u13B8\u13B9\x03\x02\x02\x02\u13B9\u0369\x03\x02\x02\x02\u13BA\u13BB\x07" +
        "\u01EB\x02\x02\u13BB\u13BC\t=\x02\x02\u13BC\u13BD\x05\u0434\u021B\x02" +
        "\u13BD\u036B\x03\x02\x02\x02\u13BE\u13BF\x07\xD9\x02\x02\u13BF\u13C0\x05" +
        "\u0434\u021B\x02\u13C0\u036D\x03\x02\x02\x02\u13C1\u13C6\x07\u0204\x02" +
        "\x02\u13C2\u13C7\x07\x9B\x02\x02\u13C3\u13C7\x07\x9D\x02\x02\u13C4\u13C7" +
        "\x07\xC2\x02\x02\u13C5\u13C7\x05\u0434\u021B\x02\u13C6\u13C2\x03\x02\x02" +
        "\x02\u13C6\u13C3\x03\x02\x02\x02\u13C6\u13C4\x03\x02\x02\x02\u13C6\u13C5" +
        "\x03\x02\x02\x02\u13C7\u036F\x03\x02\x02\x02\u13C8\u13CA\x07\u018C\x02" +
        "\x02\u13C9\u13CB\x07\u0119\x02\x02\u13CA\u13C9\x03\x02\x02\x02\u13CA\u13CB" +
        "\x03\x02\x02\x02\u13CB\u0371\x03\x02\x02\x02\u13CC\u13CE\t:\x02\x02\u13CD" +
        "\u13CF\x07\b\x02\x02\u13CE\u13CD\x03\x02\x02\x02\u13CE\u13CF\x03\x02\x02" +
        "\x02\u13CF\u13D3\x03\x02\x02\x02\u13D0\u13D4\x05\u0374\u01BB\x02\u13D1" +
        "\u13D4\x05\u0376\u01BC\x02\u13D2\u13D4\x05\u0378\u01BD\x02\u13D3\u13D0" +
        "\x03\x02\x02\x02\u13D3\u13D1\x03\x02\x02\x02\u13D3\u13D2\x03\x02\x02\x02" +
        "\u13D4\u0373\x03\x02\x02\x02\u13D5\u13D6\x07\u0156\x02\x02\u13D6\u0375" +
        "\x03\x02\x02\x02\u13D7\u13DA\x05\u0434\u021B\x02\u13D8\u13DA\x05\u0496" +
        "\u024C\x02\u13D9\u13D7\x03\x02\x02\x02\u13D9\u13D8\x03\x02\x02\x02\u13DA" +
        "\u13DC\x03\x02\x02\x02\u13DB\u13DD\t#\x02\x02\u13DC\u13DB\x03\x02\x02" +
        "\x02\u13DC\u13DD\x03\x02\x02\x02\u13DD\u0377\x03\x02\x02\x02\u13DE\u13DF" +
        "\x05\u047C\u023F\x02\u13DF\u0379\x03\x02\x02\x02\u13E0\u13E7\x07\u01B0" +
        "\x02\x02\u13E1\u13E3\x05\u037C\u01BF\x02\u13E2\u13E1\x03\x02\x02\x02\u13E3" +
        "\u13E4\x03\x02\x02\x02\u13E4\u13E2\x03\x02\x02\x02\u13E4\u13E5\x03\x02" +
        "\x02\x02\u13E5\u13E8\x03\x02\x02\x02\u13E6\u13E8\x05\u037E\u01C0\x02\u13E7" +
        "\u13E2\x03\x02\x02\x02\u13E7\u13E6\x03\x02\x02\x02\u13E8\u037B\x03\x02" +
        "\x02\x02\u13E9\u13EB\x05\u0380\u01C1\x02\u13EA\u13E9\x03\x02\x02\x02\u13EB" +
        "\u13EC\x03\x02\x02\x02\u13EC\u13EA\x03\x02\x02\x02\u13EC\u13ED\x03\x02" +
        "\x02\x02\u13ED\u13EE\x03\x02\x02\x02\u13EE\u13F0\x07\u01EB\x02\x02\u13EF" +
        "\u13F1\x05\u0382\u01C2\x02\u13F0\u13EF\x03\x02\x02\x02\u13F1\u13F2\x03" +
        "\x02\x02\x02\u13F2\u13F0\x03\x02\x02\x02\u13F2\u13F3\x03\x02\x02\x02\u13F3" +
        "\u037D\x03\x02\x02\x02\u13F4\u13F6\x05\u0380\u01C1\x02\u13F5\u13F4\x03" +
        "\x02\x02\x02\u13F6\u13F7\x03\x02\x02\x02\u13F7\u13F5\x03\x02\x02\x02\u13F7" +
        "\u13F8\x03\x02\x02\x02\u13F8\u13FD\x03\x02\x02\x02\u13F9\u13FA\x07\u01F8" +
        "\x02\x02\u13FA\u13FE\x073\x02\x02\u13FB\u13FC\x07\x96\x02\x02\u13FC\u13FE" +
        "\x073\x02\x02\u13FD\u13F9\x03\x02\x02\x02\u13FD\u13FB\x03\x02\x02\x02" +
        "\u13FE\u13FF\x03\x02\x02\x02\u13FF\u1400\x05\u0384\u01C3\x02\u1400\u037F" +
        "\x03\x02\x02\x02\u1401\u1402\x05\u0434\u021B\x02\u1402\u0381\x03\x02\x02" +
        "\x02\u1403\u140D\x07\u0148\x02\x02\u1404\u140D\x07\u0146\x02\x02\u1405" +
        "\u1408\x07\xB8\x02\x02\u1406\u1409\x05\u0434\u021B\x02\u1407\u1409\x05" +
        "\u0496\u024C\x02\u1408\u1406\x03\x02\x02\x02\u1408\u1407\x03\x02\x02\x02" +
        "\u1409\u140D\x03\x02\x02\x02\u140A\u140D\x05\u0434\u021B\x02\u140B\u140D" +
        "\x05\u0496\u024C\x02\u140C\u1403\x03\x02\x02\x02\u140C\u1404\x03\x02\x02" +
        "\x02\u140C\u1405\x03\x02\x02\x02\u140C\u140A\x03\x02\x02\x02\u140C\u140B" +
        "\x03\x02\x02\x02\u140D\u0383\x03\x02\x02\x02\u140E\u1411\x05\u0434\u021B" +
        "\x02\u140F\u1411\x05\u0496\u024C\x02\u1410\u140E\x03\x02\x02\x02\u1410" +
        "\u140F\x03\x02\x02\x02\u1411\u0385\x03\x02\x02\x02\u1412\u1413\x07\u01BA" +
        "\x02\x02\u1413\u1415\x05\u0470\u0239\x02\u1414\u1416\x05\u0388\u01C5\x02" +
        "\u1415\u1414\x03\x02\x02\x02\u1416\u1417\x03\x02\x02\x02\u1417\u1415\x03" +
        "\x02\x02\x02\u1417\u1418\x03\x02\x02\x02\u1418\u141A\x03\x02\x02\x02\u1419" +
        "\u141B\x05\u038A\u01C6\x02\u141A\u1419\x03\x02\x02\x02\u141A\u141B\x03" +
        "\x02\x02\x02\u141B\u141D\x03\x02\x02\x02\u141C\u141E\x05\u038C\u01C7\x02" +
        "\u141D\u141C\x03\x02\x02\x02\u141D\u141E\x03\x02\x02\x02\u141E\u1420\x03" +
        "\x02\x02\x02\u141F\u1421\x05\u0392\u01CA\x02\u1420\u141F\x03\x02\x02\x02" +
        "\u1420\u1421\x03\x02\x02\x02\u1421\u1425\x03\x02\x02\x02\u1422\u1424\x05" +
        "\u0396\u01CC\x02\u1423\u1422\x03\x02\x02\x02\u1424\u1427\x03\x02\x02\x02" +
        "\u1425\u1423\x03\x02\x02\x02\u1425\u1426\x03\x02\x02\x02\u1426\u1429\x03" +
        "\x02\x02\x02\u1427\u1425\x03\x02\x02\x02\u1428\u142A\x05\u0398\u01CD\x02" +
        "\u1429\u1428\x03\x02\x02\x02\u1429\u142A\x03\x02\x02\x02\u142A\u142E\x03" +
        "\x02\x02\x02\u142B\u142D\x05\u039C\u01CF\x02\u142C\u142B\x03\x02\x02\x02" +
        "\u142D\u1430\x03\x02\x02\x02\u142E\u142C\x03\x02\x02\x02\u142E\u142F\x03" +
        "\x02\x02\x02\u142F\u0387\x03\x02\x02\x02\u1430\u142E\x03\x02\x02\x02\u1431" +
        "\u1433\x07\u0148\x02\x02\u1432\u1431\x03\x02\x02\x02\u1432\u1433\x03\x02" +
        "\x02\x02\u1433\u1434\x03\x02\x02\x02\u1434\u1436\t+\x02\x02\u1435\u1437" +
        "\x07\u0105\x02\x02\u1436\u1435\x03\x02\x02\x02\u1436\u1437\x03\x02\x02" +
        "\x02\u1437\u1439\x03\x02\x02\x02\u1438\u143A\x05\u0444\u0223\x02\u1439" +
        "\u1438\x03\x02\x02\x02\u143A\u143B\x03\x02\x02\x02\u143B\u1439\x03\x02" +
        "\x02\x02\u143B\u143C\x03\x02\x02\x02\u143C\u0389\x03\x02\x02\x02\u143D" +
        "\u143F\x07\u0204\x02\x02\u143E\u143D\x03\x02\x02\x02\u143E\u143F\x03\x02" +
        "\x02\x02\u143F\u1440\x03\x02\x02\x02\u1440\u1442\x07\x97\x02\x02\u1441" +
        "\u1443\x07\xF1\x02\x02\u1442\u1441\x03\x02\x02\x02\u1442\u1443\x03\x02" +
        "\x02\x02\u1443\u1445\x03\x02\x02\x02\u1444\u1446\x07\u014C\x02\x02\u1445" +
        "\u1444\x03\x02\x02\x02\u1445\u1446\x03\x02\x02\x02\u1446\u038B\x03\x02" +
        "\x02\x02\u1447\u1449\x07J\x02\x02\u1448\u1447\x03\x02\x02\x02\u1448\u1449" +
        "\x03\x02\x02\x02\u1449\u144A\x03\x02\x02\x02\u144A\u144C\x07\u01AE\x02" +
        "\x02\u144B\u144D\x07\u0100\x02\x02\u144C\u144B\x03\x02\x02\x02\u144C\u144D" +
        "\x03\x02\x02\x02\u144D\u144F\x03\x02\x02\x02\u144E\u1450\x05\u045C\u022F" +
        "\x02\u144F\u144E\x03\x02\x02\x02\u1450\u1451\x03\x02\x02\x02\u1451\u144F" +
        "\x03\x02\x02\x02\u1451\u1452\x03\x02\x02\x02\u1452\u1454\x03\x02\x02\x02" +
        "\u1453\u1455\x05\u038E\u01C8\x02\u1454\u1453\x03\x02\x02\x02\u1454\u1455" +
        "\x03\x02\x02\x02\u1455\u1457\x03\x02\x02\x02\u1456\u1458\x05\u0390\u01C9" +
        "\x02\u1457\u1456\x03\x02\x02\x02\u1457\u1458\x03\x02\x02\x02\u1458\u038D" +
        "\x03\x02\x02\x02\u1459\u145B\x07\xD6\x02\x02\u145A\u1459\x03\x02\x02\x02" +
        "\u145A\u145B\x03\x02\x02\x02\u145B\u145C\x03\x02\x02\x02\u145C\u145D\x07" +
        "\x10\x02\x02\u145D\u145E\x07\u0100\x02\x02\u145E\u145F\x05\u045C\u022F" +
        "\x02\u145F\u038F\x03\x02\x02\x02\u1460\u1462\x07\xD6\x02\x02\u1461\u1460" +
        "\x03\x02\x02\x02\u1461\u1462\x03\x02\x02\x02\u1462\u1463\x03\x02\x02\x02" +
        "\u1463\u1465\x07\u0132\x02\x02\u1464\u1466\x07\u0100\x02\x02\u1465\u1464" +
        "\x03\x02\x02\x02\u1465\u1466\x03\x02\x02\x02\u1466\u1467\x03\x02\x02\x02" +
        "\u1467\u1468\x05\u045C\u022F\x02\u1468\u0391\x03\x02\x02\x02\u1469\u146A" +
        "\x07\xF8\x02\x02\u146A\u146C\x07\u0166\x02\x02\u146B\u146D\x07\u0100\x02" +
        "\x02\u146C\u146B\x03\x02\x02\x02\u146C\u146D\x03\x02\x02\x02\u146D\u146E" +
        "\x03\x02\x02\x02\u146E\u1470\x05\u0480\u0241\x02\u146F\u1471\x05\u0394" +
        "\u01CB\x02\u1470\u146F\x03\x02\x02\x02\u1470\u1471\x03\x02\x02\x02\u1471" +
        "\u0393\x03\x02\x02\x02\u1472\u1473\t\x06\x02\x02\u1473\u1474\x05\u0480" +
        "\u0241\x02\u1474\u0395\x03\x02\x02\x02\u1475\u1477\x07\u01FC\x02\x02\u1476" +
        "\u1478\x05\u0470\u0239\x02\u1477\u1476\x03\x02\x02\x02\u1478\u1479\x03" +
        "\x02\x02\x02\u1479\u1477\x03\x02\x02\x02\u1479\u147A\x03\x02\x02\x02\u147A" +
        "\u0397\x03\x02\x02\x02\u147B\u147C\x07\u0150\x02\x02\u147C\u147E\x07\u0166" +
        "\x02\x02\u147D\u147F\x07\u0100\x02\x02\u147E\u147D\x03\x02\x02\x02\u147E" +
        "\u147F\x03\x02\x02\x02\u147F\u1480\x03\x02\x02\x02\u1480\u1482\x05\u0480" +
        "\u0241\x02\u1481\u1483\x05\u039A\u01CE\x02\u1482\u1481\x03";
    Cobol85Parser._serializedATNSegment10 = "\x02\x02\x02\u1482\u1483\x03\x02\x02\x02\u1483\u0399\x03\x02\x02\x02\u1484" +
        "\u1485\t\x06\x02\x02\u1485\u1486\x05\u0480\u0241\x02\u1486\u039B\x03\x02" +
        "\x02\x02\u1487\u1489\x07\xE0\x02\x02\u1488\u148A\x05\u039E\u01D0\x02\u1489" +
        "\u1488\x03\x02\x02\x02\u148A\u148B\x03\x02\x02\x02\u148B\u1489\x03\x02" +
        "\x02\x02\u148B\u148C\x03\x02\x02\x02\u148C\u039D\x03\x02\x02\x02\u148D" +
        "\u1497\x05\u0470\u0239\x02\u148E\u1498\x07\u0120\x02\x02\u148F\u1498\x07" +
        "\u01A1\x02\x02\u1490\u1491\x07\u0138\x02\x02\u1491\u1498\x07\u0199\x02" +
        "\x02\u1492\u1498\x07l\x02\x02\u1493\u1498\x07\u0185\x02\x02\u1494\u1495" +
        "\x07\u0204\x02\x02\u1495\u1496\x07\u0189\x02\x02\u1496\u1498\x07l\x02" +
        "\x02\u1497\u148E\x03\x02\x02\x02\u1497\u148F\x03\x02\x02\x02\u1497\u1490" +
        "\x03\x02\x02\x02\u1497\u1492\x03\x02\x02\x02\u1497\u1493\x03\x02\x02\x02" +
        "\u1497\u1494\x03\x02\x02\x02\u1497\u1498\x03\x02\x02\x02\u1498\u039F\x03" +
        "\x02\x02\x02\u1499\u149A\x07\u01CA\x02\x02\u149A\u149C\x05\u0470\u0239" +
        "\x02\u149B\u149D\x05\u03A2\u01D2\x02\u149C\u149B\x03\x02\x02\x02\u149C" +
        "\u149D\x03\x02\x02\x02\u149D\u149F\x03\x02\x02\x02\u149E\u14A0\x05\u03FA" +
        "\u01FE\x02\u149F\u149E\x03\x02\x02\x02\u149F\u14A0\x03\x02\x02\x02\u14A0" +
        "\u14A2\x03\x02\x02\x02\u14A1\u14A3\x05\u03FC\u01FF\x02\u14A2\u14A1\x03" +
        "\x02\x02\x02\u14A2\u14A3\x03\x02\x02\x02\u14A3\u14A5\x03\x02\x02\x02\u14A4" +
        "\u14A6\x07\xB1\x02\x02\u14A5\u14A4\x03\x02\x02\x02\u14A5\u14A6\x03\x02" +
        "\x02\x02\u14A6\u03A1\x03\x02\x02\x02\u14A7\u14A9\x07\u0105\x02\x02\u14A8" +
        "\u14AA\x07\u0100\x02\x02\u14A9\u14A8\x03\x02\x02\x02\u14A9\u14AA\x03\x02" +
        "\x02\x02\u14AA\u14C6\x03\x02\x02\x02\u14AB\u14AD\x07\xBC\x02\x02\u14AC" +
        "\u14AE\x07\u01EB\x02\x02\u14AD\u14AC\x03\x02\x02\x02\u14AD\u14AE\x03\x02" +
        "\x02\x02\u14AE\u14C7\x03\x02\x02\x02\u14AF\u14C7\x07\u021A\x02\x02\u14B0" +
        "\u14B2\x07\xE3\x02\x02\u14B1\u14B3\x07\u01E1\x02\x02\u14B2\u14B1\x03\x02" +
        "\x02\x02\u14B2\u14B3\x03\x02\x02\x02\u14B3\u14C7\x03\x02\x02\x02\u14B4" +
        "\u14C7\x07\u0222\x02\x02\u14B5\u14B6\x07\u013A\x02\x02\u14B6\u14B8\x07" +
        "\u0111\x02\x02\u14B7\u14B9\x07\u01E1\x02\x02\u14B8\u14B7\x03\x02\x02\x02" +
        "\u14B8\u14B9\x03\x02\x02\x02\u14B9\u14C7\x03\x02\x02\x02\u14BA\u14BB\x07" +
        "\u013A\x02\x02\u14BB\u14C7\x07\u021E\x02\x02\u14BC\u14BE\x07\xE3\x02\x02" +
        "\u14BD\u14BF\x07\u01E1\x02\x02\u14BE\u14BD\x03\x02\x02\x02\u14BE\u14BF" +
        "\x03\x02\x02\x02\u14BF\u14C0\x03\x02\x02\x02\u14C0\u14C1\x07\u014B\x02" +
        "\x02\u14C1\u14C3\x07\xBC\x02\x02\u14C2\u14C4\x07\u01EB\x02\x02\u14C3\u14C2" +
        "\x03\x02\x02\x02\u14C3\u14C4\x03\x02\x02\x02\u14C4\u14C7\x03\x02\x02\x02" +
        "\u14C5\u14C7\x07\u0223\x02\x02\u14C6\u14AB\x03\x02\x02\x02\u14C6\u14AF" +
        "\x03\x02\x02\x02\u14C6\u14B0\x03\x02\x02\x02\u14C6\u14B4\x03\x02\x02\x02" +
        "\u14C6\u14B5\x03\x02\x02\x02\u14C6\u14BA\x03\x02\x02\x02\u14C6\u14BC\x03" +
        "\x02\x02\x02\u14C6\u14C5\x03\x02\x02\x02\u14C7\u14C8\x03\x02\x02\x02\u14C8" +
        "\u14C9\x05\u0444\u0223\x02\u14C9\u03A3\x03\x02\x02\x02\u14CA\u14CD\x07" +
        "\u01CC\x02\x02\u14CB\u14CE\x07\u019F\x02\x02\u14CC\u14CE\x05\u0496\u024C" +
        "\x02\u14CD\u14CB\x03\x02\x02\x02\u14CD\u14CC\x03\x02\x02\x02\u14CE\u03A5" +
        "\x03\x02\x02\x02\u14CF\u14D1\x07\u01CD\x02\x02\u14D0\u14D2\x05\u03A8\u01D5" +
        "\x02\u14D1\u14D0\x03\x02\x02\x02\u14D2\u14D3\x03\x02\x02\x02\u14D3\u14D1" +
        "\x03\x02\x02\x02\u14D3\u14D4\x03\x02\x02\x02\u14D4\u14D5\x03\x02\x02\x02" +
        "\u14D5\u14D7\x05\u03B0\u01D9\x02\u14D6\u14D8\x05\u03B2\u01DA\x02\u14D7" +
        "\u14D6\x03\x02\x02\x02\u14D7\u14D8\x03\x02\x02\x02\u14D8\u14DA\x03\x02" +
        "\x02\x02\u14D9\u14DB\x05\u03FE\u0200\x02\u14DA\u14D9\x03\x02\x02\x02\u14DA" +
        "\u14DB\x03\x02\x02\x02\u14DB\u14DD\x03\x02\x02\x02\u14DC\u14DE\x05\u0400" +
        "\u0201\x02\u14DD\u14DC\x03\x02\x02\x02\u14DD\u14DE\x03\x02\x02\x02\u14DE" +
        "\u14E0\x03\x02\x02\x02\u14DF\u14E1\x07\xB2\x02\x02\u14E0\u14DF\x03\x02" +
        "\x02\x02\u14E0\u14E1\x03\x02\x02\x02\u14E1\u03A7\x03\x02\x02\x02\u14E2" +
        "\u14E4\x05\u03AA\u01D6\x02\u14E3\u14E2\x03\x02\x02\x02\u14E4\u14E5\x03" +
        "\x02\x02\x02\u14E5\u14E3\x03\x02\x02\x02\u14E5\u14E6\x03\x02\x02\x02\u14E6" +
        "\u14E9\x03\x02\x02\x02\u14E7\u14EA\x05\u03AC\u01D7\x02\u14E8\u14EA\x05" +
        "\u03AE\u01D8\x02\u14E9\u14E7\x03\x02\x02\x02\u14E9\u14E8\x03\x02\x02\x02" +
        "\u14EA\u03A9\x03\x02\x02\x02\u14EB\u14EE\x05\u0434\u021B\x02\u14EC\u14EE" +
        "\x05\u0496\u024C\x02\u14ED\u14EB\x03\x02\x02\x02\u14ED\u14EC\x03\x02\x02" +
        "\x02\u14EE\u03AB\x03\x02\x02\x02\u14EF\u14F1\x07\x86\x02\x02\u14F0\u14F2" +
        "\x073\x02\x02\u14F1\u14F0\x03\x02\x02\x02\u14F1\u14F2\x03\x02\x02\x02" +
        "\u14F2\u14F6\x03\x02\x02\x02\u14F3\u14F7\x07\u01B9\x02\x02\u14F4\u14F7" +
        "\x05\u0434\u021B\x02\u14F5\u14F7\x05\u0496\u024C\x02\u14F6\u14F3\x03\x02" +
        "\x02\x02\u14F6\u14F4\x03\x02\x02\x02\u14F6\u14F5\x03\x02\x02\x02\u14F7" +
        "\u03AD\x03\x02\x02\x02\u14F8\u14FB\x07\xD6\x02\x02\u14F9\u14FC\x05\u0434" +
        "\u021B\x02\u14FA\u14FC\x05\u0496\u024C\x02\u14FB\u14F9\x03\x02\x02\x02" +
        "\u14FB\u14FA\x03\x02\x02\x02\u14FC\u03AF\x03\x02\x02\x02\u14FD\u14FE\x07" +
        "\xFD\x02\x02\u14FE\u14FF\x05\u0434\u021B\x02\u14FF\u03B1\x03\x02\x02\x02" +
        "\u1500\u1502\x07\u0204\x02\x02\u1501\u1500\x03\x02\x02\x02\u1501\u1502" +
        "\x03\x02\x02\x02\u1502\u1503\x03\x02\x02\x02\u1503\u1504\x07\u015F\x02" +
        "\x02\u1504\u1505\x05\u0444\u0223\x02\u1505\u03B3\x03\x02\x02\x02\u1506" +
        "\u150A\x07\u01D1\x02\x02\u1507\u150B\x05\u03B6\u01DC\x02\u1508\u150B\x05" +
        "\u03B8\u01DD\x02\u1509\u150B\x05\u03BA\u01DE\x02\u150A\u1507\x03\x02\x02" +
        "\x02\u150A\u1508\x03\x02\x02\x02\u150A\u1509\x03\x02\x02\x02\u150B\u150D" +
        "\x03\x02\x02\x02\u150C\u150E\x05\u0402\u0202\x02\u150D\u150C\x03\x02\x02" +
        "\x02\u150D\u150E\x03\x02\x02\x02\u150E\u1510\x03\x02\x02\x02\u150F\u1511" +
        "\x05\u0404\u0203\x02\u1510\u150F\x03\x02\x02\x02\u1510\u1511\x03\x02\x02" +
        "\x02\u1511\u1513\x03\x02\x02\x02\u1512\u1514\x07\xB3\x02\x02\u1513\u1512" +
        "\x03\x02\x02\x02\u1513\u1514\x03\x02\x02\x02\u1514\u03B5\x03\x02\x02\x02" +
        "\u1515\u1517\x05\u03BC\u01DF\x02\u1516\u1515\x03\x02\x02\x02\u1517\u1518" +
        "\x03\x02\x02\x02\u1518\u1516\x03\x02\x02\x02\u1518\u1519\x03\x02\x02\x02" +
        "\u1519\u151A\x03\x02\x02\x02\u151A\u151C\x07\xD9\x02\x02\u151B\u151D\x05" +
        "\u03BE\u01E0\x02\u151C\u151B\x03\x02\x02\x02\u151D\u151E\x03\x02\x02\x02" +
        "\u151E\u151C\x03\x02\x02\x02\u151E\u151F\x03\x02\x02\x02\u151F\u03B7\x03" +
        "\x02\x02\x02\u1520\u1522\x05\u03BC\u01DF\x02\u1521\u1520\x03\x02\x02\x02" +
        "\u1522\u1523\x03\x02\x02\x02\u1523\u1521\x03\x02\x02\x02\u1523\u1524\x03" +
        "\x02\x02\x02\u1524\u1525\x03\x02\x02\x02\u1525\u1526\x07\xD9\x02\x02\u1526" +
        "\u1527\x05\u03C0\u01E1\x02\u1527\u1529\x07\xE0\x02\x02\u1528\u152A\x05" +
        "\u03C2\u01E2\x02\u1529\u1528\x03\x02\x02\x02\u152A\u152B\x03\x02\x02\x02" +
        "\u152B\u1529\x03\x02\x02\x02\u152B\u152C\x03\x02\x02\x02\u152C\u03B9\x03" +
        "\x02\x02\x02\u152D\u152E\t4\x02\x02\u152E\u152F\x05\u0444\u0223\x02\u152F" +
        "\u1530\x07\xD9\x02\x02\u1530\u1531\x05\u03C4\u01E3\x02\u1531\u03BB\x03" +
        "\x02\x02\x02\u1532\u1535\x05\u0434\u021B\x02\u1533\u1535\x05\u0496\u024C" +
        "\x02\u1534\u1532\x03\x02\x02\x02\u1534\u1533\x03\x02\x02\x02\u1535\u03BD" +
        "\x03\x02\x02\x02\u1536\u1538\x05\u0434\u021B\x02\u1537\u1539\x07\u019E" +
        "\x02\x02\u1538\u1537\x03\x02\x02\x02\u1538\u1539\x03\x02\x02\x02\u1539" +
        "\u03BF\x03\x02\x02\x02\u153A\u153D\x05\u0434\u021B\x02\u153B\u153D\x05" +
        "\u0496\u024C\x02\u153C\u153A\x03\x02\x02\x02\u153C\u153B\x03\x02\x02\x02" +
        "\u153D\u03C1\x03\x02\x02\x02\u153E\u1540\x05\u0434\u021B\x02\u153F\u1541" +
        "\x07\u019E\x02\x02\u1540\u153F\x03\x02\x02\x02\u1540\u1541\x03\x02\x02" +
        "\x02\u1541\u03C3\x03\x02\x02\x02\u1542\u1544\x05\u0444\u0223\x02\u1543" +
        "\u1545\x07\u019E\x02\x02\u1544\u1543\x03\x02\x02\x02\u1544\u1545\x03\x02" +
        "\x02\x02\u1545\u03C5\x03\x02\x02\x02\u1546\u1547\x07\u01DE\x02\x02\u1547" +
        "\u1548\x05\u0486\u0244\x02\u1548\u03C7\x03\x02\x02\x02\u1549\u154A\x07" +
        "\u01F6\x02\x02\u154A\u154B\x05\u03CA\u01E6\x02\u154B\u154D\x05\u03D0\u01E9" +
        "\x02\u154C\u154E\x05\u03D8\u01ED\x02\u154D\u154C\x03\x02\x02\x02\u154D" +
        "\u154E\x03\x02\x02\x02\u154E\u1550\x03\x02\x02\x02\u154F\u1551\x05\u03DA" +
        "\u01EE\x02\u1550\u154F\x03\x02\x02\x02\u1550\u1551\x03\x02\x02\x02\u1551" +
        "\u1553\x03\x02\x02\x02\u1552\u1554\x05\u03FE\u0200\x02\u1553\u1552\x03" +
        "\x02\x02\x02\u1553\u1554\x03\x02\x02\x02\u1554\u1556\x03\x02\x02\x02\u1555" +
        "\u1557\x05\u0400\u0201\x02\u1556\u1555\x03\x02\x02\x02\u1556\u1557\x03" +
        "\x02\x02\x02\u1557\u1559\x03\x02\x02\x02\u1558\u155A\x07\xB4\x02\x02\u1559" +
        "\u1558\x03\x02\x02\x02\u1559\u155A\x03\x02\x02\x02\u155A\u03C9\x03\x02" +
        "\x02\x02\u155B\u1563\x05\u0434\u021B\x02\u155C\u1560\x05\u03CC\u01E7\x02" +
        "\u155D\u155F\x05\u03CE\u01E8\x02\u155E\u155D\x03\x02\x02\x02\u155F\u1562" +
        "\x03\x02\x02\x02\u1560\u155E\x03\x02\x02\x02\u1560\u1561\x03\x02\x02\x02" +
        "\u1561\u1564\x03\x02\x02\x02\u1562\u1560\x03\x02\x02\x02\u1563\u155C\x03" +
        "\x02\x02\x02\u1563\u1564\x03\x02\x02\x02\u1564\u03CB\x03\x02\x02\x02\u1565" +
        "\u1567\x07\x86\x02\x02\u1566\u1568\x073\x02\x02\u1567\u1566\x03\x02\x02" +
        "\x02\u1567\u1568\x03\x02\x02\x02\u1568\u156A\x03\x02\x02\x02\u1569\u156B" +
        "\x07\v\x02\x02\u156A\u1569\x03\x02\x02\x02\u156A\u156B\x03\x02\x02\x02" +
        "\u156B\u156E\x03\x02\x02\x02\u156C\u156F\x05\u0434\u021B\x02\u156D\u156F" +
        "\x05\u0496\u024C\x02\u156E\u156C\x03\x02\x02\x02\u156E\u156D\x03\x02\x02" +
        "\x02\u156F\u03CD\x03\x02\x02\x02\u1570\u1572\x07\u014B\x02\x02\u1571\u1573" +
        "\x07\v\x02\x02\u1572\u1571\x03\x02\x02\x02\u1572\u1573\x03\x02\x02\x02" +
        "\u1573\u1576\x03\x02\x02\x02\u1574\u1577\x05\u0434\u021B\x02\u1575\u1577" +
        "\x05\u0496\u024C\x02\u1576\u1574\x03\x02\x02\x02\u1576\u1575\x03\x02\x02" +
        "\x02\u1577\u03CF\x03\x02\x02\x02\u1578\u157A\x07\xFD\x02\x02\u1579\u157B" +
        "\x05\u03D2\u01EA\x02\u157A\u1579\x03\x02\x02\x02\u157B\u157C\x03\x02\x02" +
        "\x02\u157C\u157A\x03\x02\x02\x02\u157C\u157D\x03\x02\x02\x02\u157D\u03D1" +
        "\x03\x02\x02\x02\u157E\u1580\x05\u0434\u021B\x02\u157F\u1581\x05\u03D4" +
        "\u01EB\x02\u1580\u157F\x03\x02\x02\x02\u1580\u1581\x03\x02\x02\x02\u1581" +
        "\u1583\x03\x02\x02\x02\u1582\u1584\x05\u03D6\u01EC\x02\u1583\u1582\x03" +
        "\x02\x02\x02\u1583\u1584\x03\x02\x02\x02\u1584\u03D3\x03\x02\x02\x02\u1585" +
        "\u1587\x07\x87\x02\x02\u1586\u1588\x07\xF1\x02\x02\u1587\u1586\x03\x02" +
        "\x02\x02\u1587\u1588\x03\x02\x02\x02\u1588\u1589\x03\x02\x02\x02\u1589" +
        "\u158A\x05\u0434\u021B\x02\u158A\u03D5\x03\x02\x02\x02\u158B\u158D\x07" +
        "k\x02\x02\u158C\u158E\x07\xF1\x02\x02\u158D\u158C\x03\x02\x02\x02\u158D" +
        "\u158E\x03\x02\x02\x02\u158E\u158F\x03\x02\x02\x02\u158F\u1590\x05\u0434" +
        "\u021B\x02\u1590\u03D7\x03\x02\x02\x02\u1591\u1593\x07\u0204\x02\x02\u1592" +
        "\u1591\x03\x02\x02\x02\u1592\u1593\x03\x02\x02\x02\u1593\u1594\x03\x02" +
        "\x02\x02\u1594\u1595\x07\u015F\x02\x02\u1595\u1596\x05\u0444\u0223\x02" +
        "\u1596\u03D9\x03\x02\x02\x02\u1597\u1599\x07\u01DA\x02\x02\u1598\u159A" +
        "\x07\xF1\x02\x02\u1599\u1598\x03\x02\x02\x02\u1599\u159A\x03\x02\x02\x02" +
        "\u159A\u159B\x03\x02\x02\x02\u159B\u159C\x05\u0444\u0223\x02\u159C\u03DB" +
        "\x03\x02\x02\x02\u159D\u15A0\x07\u01FB\x02\x02\u159E\u15A1\x05\u03DE\u01F0" +
        "\x02\u159F\u15A1\x05\u03E2\u01F2\x02\u15A0\u159E\x03\x02\x02\x02\u15A0" +
        "\u159F\x03\x02\x02\x02\u15A1\u03DD\x03\x02\x02\x02\u15A2\u15A4\x07\xE1" +
        "\x02\x02\u15A3\u15A2\x03\x02\x02\x02\u15A3\u15A4\x03\x02\x02\x02\u15A4" +
        "\u15A5\x03\x02\x02\x02\u15A5\u15A7\x07\t\x02\x02\u15A6\u15A8\x07\u01C7" +
        "\x02\x02\u15A7\u15A6\x03\x02\x02\x02\u15A7\u15A8\x03\x02\x02\x02\u15A8" +
        "\u15A9\x03\x02\x02\x02\u15A9\u15AA\t>\x02\x02\u15AA\u15AC\x07\u0166\x02" +
        "\x02\u15AB\u15AD\x07\u0148\x02\x02\u15AC\u15AB\x03\x02\x02\x02\u15AC\u15AD" +
        "\x03\x02\x02\x02\u15AD\u15AE\x03\x02\x02\x02\u15AE\u15AF\x05\u03E0\u01F1" +
        "\x02\u15AF\u03DF\x03\x02\x02\x02\u15B0\u15BA\x07\xF8\x02\x02\u15B1\u15BA" +
        "\x07\u0150\x02\x02\u15B2\u15BA\x07\xEA\x02\x02\u15B3\u15BA\x07\xCB\x02" +
        "\x02\u15B4\u15B6\x05\u0470\u0239\x02\u15B5\u15B4\x03\x02\x02\x02\u15B6" +
        "\u15B7\x03\x02\x02\x02\u15B7\u15B5\x03\x02\x02\x02\u15B7\u15B8\x03\x02" +
        "\x02\x02\u15B8\u15BA\x03\x02\x02\x02\u15B9\u15B0\x03\x02\x02\x02\u15B9" +
        "\u15B1\x03\x02\x02\x02\u15B9\u15B2\x03\x02\x02\x02\u15B9\u15B3\x03\x02" +
        "\x02\x02\u15B9\u15B5\x03\x02\x02\x02\u15BA\u03E1\x03\x02\x02\x02\u15BB" +
        "\u15BD\x07\xD6\x02\x02\u15BC\u15BB\x03\x02\x02\x02\u15BC\u15BD\x03\x02" +
        "\x02\x02\u15BD\u15BE\x03\x02\x02\x02\u15BE\u15C0\x07\x7F\x02\x02\u15BF" +
        "\u15C1\x07\u0148\x02\x02\u15C0\u15BF\x03\x02\x02\x02\u15C0\u15C1\x03\x02" +
        "\x02\x02\u15C1\u15C3\x03\x02\x02\x02\u15C2\u15C4\x05\u03E4\u01F3\x02\u15C3" +
        "\u15C2\x03\x02\x02\x02\u15C4\u15C5\x03\x02\x02\x02\u15C5\u15C3\x03\x02" +
        "\x02\x02\u15C5\u15C6\x03\x02\x02\x02\u15C6\u03E3\x03\x02\x02\x02\u15C7" +
        "\u15C8\x07\v\x02\x02\u15C8\u15D4\x07\u0168\x02\x02\u15C9\u15CB\x07\v\x02" +
        "\x02\u15CA\u15CC\x07\u0183\x02\x02\u15CB\u15CA\x03\x02\x02\x02\u15CB\u15CC" +
        "\x03\x02\x02\x02\u15CC\u15CE\x03\x02\x02\x02\u15CD\u15CF\x07\u0145\x02" +
        "\x02\u15CE\u15CD\x03\x02\x02\x02\u15CE\u15CF\x03\x02\x02\x02\u15CF\u15D0" +
        "\x03\x02\x02\x02\u15D0\u15D4\x05\u0434\u021B\x02\u15D1\u15D4\x05\u0480" +
        "\u0241\x02\u15D2\u15D4\x05\u0470\u0239\x02\u15D3\u15C7\x03\x02\x02\x02" +
        "\u15D3\u15C9\x03\x02\x02\x02\u15D3\u15D1\x03\x02\x02\x02\u15D3\u15D2\x03" +
        "\x02\x02\x02\u15D4\u03E5\x03\x02\x02\x02\u15D5\u15D6\x07\u0207\x02\x02" +
        "\u15D6\u15D8\x05\u0484\u0243\x02\u15D7\u15D9\x05\u03E8\u01F5\x02\u15D8" +
        "\u15D7\x03\x02\x02\x02\u15D8\u15D9\x03\x02\x02\x02\u15D9\u15DB\x03\x02" +
        "\x02\x02\u15DA\u15DC\x05\u03EA\u01F6\x02\u15DB\u15DA\x03\x02\x02\x02\u15DB" +
        "\u15DC\x03\x02\x02\x02\u15DC\u15DE\x03\x02\x02\x02\u15DD\u15DF\x05\u03F2" +
        "\u01FA\x02\u15DE\u15DD\x03\x02\x02\x02\u15DE\u15DF\x03\x02\x02\x02\u15DF" +
        "\u15E1\x03\x02\x02\x02\u15E0\u15E2\x05\u03F4\u01FB\x02\u15E1\u15E0\x03" +
        "\x02\x02\x02\u15E1\u15E2\x03\x02\x02\x02\u15E2\u15E4\x03\x02\x02\x02\u15E3" +
        "\u15E5\x05\u03FA\u01FE\x02\u15E4\u15E3\x03\x02\x02\x02\u15E4\u15E5\x03" +
        "\x02\x02\x02\u15E5\u15E7\x03\x02\x02\x02\u15E6\u15E8\x05\u03FC\u01FF\x02" +
        "\u15E7\u15E6\x03\x02\x02\x02\u15E7\u15E8\x03\x02\x02\x02\u15E8\u15EA\x03" +
        "\x02\x02\x02\u15E9\u15EB\x07\xB5\x02\x02\u15EA\u15E9\x03\x02\x02\x02\u15EA" +
        "\u15EB\x03\x02\x02\x02\u15EB\u03E7\x03\x02\x02\x02\u15EC\u15EF\x07\xD9" +
        "\x02\x02\u15ED\u15F0\x05\u0434\u021B\x02\u15EE\u15F0\x05\u0496\u024C\x02" +
        "\u15EF\u15ED\x03\x02\x02\x02\u15EF\u15EE\x03\x02\x02\x02\u15F0\u03E9\x03" +
        "\x02\x02\x02\u15F1\u15F3\t:\x02\x02\u15F2\u15F4\x07\b\x02\x02\u15F3\u15F2" +
        "\x03\x02\x02\x02\u15F3\u15F4\x03\x02\x02\x02\u15F4\u15F8\x03\x02\x02\x02" +
        "\u15F5\u15F9\x05\u03EC\u01F7\x02\u15F6\u15F9\x05\u03EE\u01F8\x02\u15F7" +
        "\u15F9\x05\u03F0\u01F9\x02\u15F8\u15F5\x03\x02\x02\x02\u15F8\u15F6\x03" +
        "\x02\x02\x02\u15F8\u15F7\x03\x02\x02\x02\u15F9\u03EB\x03\x02\x02\x02\u15FA" +
        "\u15FB\x07\u0156\x02\x02\u15FB\u03ED\x03\x02\x02\x02\u15FC\u15FF\x05\u0434" +
        "\u021B\x02\u15FD\u15FF\x05\u0496\u024C\x02\u15FE\u15FC\x03\x02\x02\x02" +
        "\u15FE\u15FD\x03\x02\x02\x02\u15FF\u1601\x03\x02\x02\x02\u1600\u1602\t" +
        "#\x02\x02\u1601\u1600\x03\x02\x02\x02\u1601\u1602\x03\x02\x02\x02\u1602" +
        "\u03EF\x03\x02\x02\x02\u1603\u1604\x05\u047C\u023F\x02\u1604\u03F1\x03" +
        "\x02\x02\x02\u1605\u1607\x07 \x02\x02\u1606\u1605\x03\x02\x02\x02\u1606" +
        "\u1607\x03\x02\x02\x02\u1607\u1608\x03\x02\x02\x02\u1608\u160C\t?\x02" +
        "\x02\u1609\u160B\x05\u021A\u010E\x02\u160A\u1609\x03\x02\x02\x02\u160B" +
        "\u160E\x03\x02\x02\x02\u160C\u160A\x03\x02\x02\x02\u160C\u160D\x03\x02" +
        "\x02\x02\u160D\u03F3\x03\x02\x02\x02\u160E\u160C\x03\x02\x02\x02\u160F" +
        "\u1611\x07\u013A\x02\x02\u1610\u1612\x07 \x02\x02\u1611\u1610\x03\x02" +
        "\x02\x02\u1611\u1612\x03\x02\x02\x02\u1612\u1613\x03\x02\x02\x02\u1613" +
        "\u1617\t?\x02\x02\u1614\u1616\x05\u021A\u010E\x02\u1615\u1614\x03\x02" +
        "\x02\x02\u1616\u1619\x03\x02\x02\x02\u1617\u1615\x03\x02\x02\x02\u1617" +
        "\u1618\x03\x02\x02\x02\u1618\u03F5\x03\x02\x02\x02\u1619\u1617\x03\x02" +
        "\x02\x02\u161A\u161C\x07 \x02\x02\u161B\u161A\x03\x02\x02\x02\u161B\u161C" +
        "\x03\x02\x02\x02\u161C\u161D\x03\x02\x02\x02\u161D\u1621\x07\xA0\x02\x02" +
        "\u161E\u1620\x05\u021A\u010E\x02\u161F\u161E\x03\x02\x02\x02\u1620\u1623" +
        "\x03\x02\x02\x02\u1621\u161F\x03\x02\x02\x02\u1621\u1622\x03\x02\x02\x02" +
        "\u1622\u03F7\x03\x02\x02\x02\u1623\u1621\x03\x02\x02\x02\u1624\u1626\x07" +
        "\u013A\x02\x02\u1625\u1627\x07 \x02\x02\u1626\u1625\x03\x02\x02\x02\u1626" +
        "\u1627\x03\x02\x02\x02\u1627\u1628\x03\x02\x02\x02\u1628\u162C\x07\xA0" +
        "\x02\x02\u1629\u162B\x05\u021A\u010E\x02\u162A\u1629\x03\x02\x02\x02\u162B" +
        "\u162E\x03\x02\x02\x02\u162C\u162A\x03\x02\x02\x02\u162C\u162D\x03\x02" +
        "\x02\x02\u162D\u03F9\x03\x02\x02\x02\u162E\u162C\x03\x02\x02\x02\u162F" +
        "\u1631\x07\xFE\x02\x02\u1630\u1632\x07\u0105\x02\x02\u1631\u1630\x03\x02" +
        "\x02\x02\u1631\u1632\x03\x02\x02\x02\u1632\u1636\x03\x02\x02\x02\u1633" +
        "\u1635\x05\u021A\u010E\x02\u1634\u1633\x03\x02\x02\x02\u1635\u1638\x03" +
        "\x02\x02\x02\u1636\u1634\x03\x02\x02\x02\u1636\u1637\x03\x02\x02\x02\u1637" +
        "\u03FB\x03\x02\x02\x02\u1638\u1636\x03\x02\x02\x02\u1639\u163A\x07\u013A" +
        "\x02\x02\u163A\u163C\x07\xFE\x02\x02\u163B\u163D\x07\u0105\x02\x02\u163C" +
        "\u163B\x03\x02\x02\x02\u163C\u163D\x03\x02\x02\x02\u163D\u1641\x03\x02" +
        "\x02\x02\u163E\u1640\x05\u021A\u010E\x02\u163F\u163E\x03\x02\x02\x02\u1640" +
        "\u1643\x03\x02\x02\x02\u1641\u163F\x03\x02\x02\x02\u1641\u1642\x03\x02" +
        "\x02\x02\u1642\u03FD\x03\x02\x02\x02\u1643\u1641\x03\x02\x02\x02\u1644" +
        "\u1646\x07\u0148\x02\x02\u1645\u1644\x03\x02\x02\x02\u1645\u1646\x03\x02" +
        "\x02\x02\u1646\u1647\x03\x02\x02\x02\u1647\u164B\x07\u0151\x02\x02\u1648" +
        "\u164A\x05\u021A\u010E\x02\u1649\u1648\x03\x02\x02\x02\u164A\u164D\x03" +
        "\x02\x02\x02\u164B\u1649\x03\x02\x02\x02\u164B\u164C\x03\x02\x02\x02\u164C" +
        "\u03FF\x03\x02\x02\x02\u164D\u164B\x03\x02\x02\x02\u164E\u1650\x07\u013A" +
        "\x02\x02\u164F\u1651\x07\u0148\x02\x02\u1650\u164F\x03\x02\x02\x02\u1650" +
        "\u1651\x03\x02\x02\x02\u1651\u1652\x03\x02\x02\x02\u1652\u1656\x07\u0151" +
        "\x02\x02\u1653\u1655\x05\u021A\u010E\x02\u1654\u1653\x03\x02\x02\x02\u1655" +
        "\u1658\x03\x02\x02\x02\u1656\u1654\x03\x02\x02\x02\u1656\u1657\x03\x02" +
        "\x02\x02\u1657\u0401\x03\x02\x02\x02\u1658\u1656\x03\x02\x02\x02\u1659" +
        "\u165B\x07\u0148\x02\x02\u165A\u1659\x03\x02\x02\x02\u165A\u165B\x03\x02" +
        "\x02\x02\u165B\u165C\x03\x02\x02\x02\u165C\u165D\x07\u01B9\x02\x02\u165D" +
        "\u1661\x07\xBE\x02\x02\u165E\u1660\x05\u021A\u010E\x02\u165F\u165E\x03" +
        "\x02\x02\x02\u1660\u1663\x03\x02\x02\x02\u1661\u165F\x03\x02\x02\x02\u1661" +
        "\u1662\x03\x02\x02\x02\u1662\u0403\x03\x02\x02\x02\u1663\u1661\x03\x02" +
        "\x02\x02\u1664\u1666\x07\u013A\x02\x02\u1665\u1667\x07\u0148\x02\x02\u1666" +
        "\u1665\x03\x02\x02\x02\u1666\u1667\x03\x02\x02\x02\u1667\u1668\x03\x02" +
        "\x02\x02\u1668\u1669\x07\u01B9\x02\x02\u1669\u166D\x07\xBE\x02\x02\u166A" +
        "\u166C\x05\u021A\u010E\x02\u166B\u166A\x03\x02\x02\x02\u166C\u166F\x03" +
        "\x02\x02\x02\u166D\u166B\x03\x02\x02\x02\u166D\u166E\x03\x02\x02\x02\u166E" +
        "\u0405\x03\x02\x02\x02\u166F\u166D\x03\x02\x02\x02\u1670\u1672\x07\u0148" +
        "\x02\x02\u1671\u1670\x03\x02\x02\x02\u1671\u1672\x03\x02\x02\x02\u1672" +
        "\u1673\x03\x02\x02\x02\u1673\u1677\x07\xC6\x02\x02\u1674\u1676\x05\u021A" +
        "\u010E\x02\u1675\u1674\x03\x02\x02\x02\u1676\u1679\x03\x02\x02\x02\u1677" +
        "\u1675\x03\x02\x02\x02\u1677\u1678\x03\x02\x02\x02\u1678\u0407\x03\x02" +
        "\x02\x02\u1679\u1677\x03\x02\x02\x02\u167A\u167C\x07\u013A\x02\x02\u167B" +
        "\u167D\x07\u0148\x02\x02\u167C\u167B\x03\x02\x02\x02\u167C\u167D\x03\x02" +
        "\x02\x02\u167D\u167E\x03\x02\x02\x02\u167E\u1682\x07\xC6\x02\x02\u167F" +
        "\u1681\x05\u021A\u010E\x02\u1680\u167F\x03\x02\x02\x02\u1681\u1684\x03" +
        "\x02\x02\x02\u1682\u1680\x03\x02\x02\x02\u1682\u1683\x03\x02\x02\x02\u1683" +
        "\u0409\x03\x02\x02\x02\u1684\u1682\x03\x02\x02\x02\u1685\u1689\x05\u040E" +
        "\u0208\x02\u1686\u1688\x05\u040C\u0207\x02\u1687\u1686\x03\x02\x02\x02" +
        "\u1688\u168B\x03\x02\x02\x02\u1689\u1687\x03\x02\x02\x02\u1689\u168A\x03" +
        "\x02\x02\x02\u168A\u040B\x03\x02\x02\x02\u168B\u1689\x03\x02\x02\x02\u168C" +
        "\u168D\t@\x02\x02\u168D\u168E\x05\u040E\u0208\x02\u168E\u040D\x03\x02" +
        "\x02\x02\u168F\u1693\x05\u0412\u020A\x02\u1690\u1692\x05\u0410\u0209\x02" +
        "\u1691\u1690\x03\x02\x02\x02\u1692\u1695\x03\x02\x02\x02\u1693\u1691\x03" +
        "\x02\x02\x02\u1693\u1694\x03\x02\x02\x02\u1694\u040F\x03\x02\x02\x02\u1695" +
        "\u1693\x03\x02\x02\x02\u1696\u1697\tA\x02\x02\u1697\u1698\x05\u0412\u020A" +
        "\x02\u1698\u0411\x03\x02\x02\x02\u1699\u169B\t@\x02\x02\u169A\u1699\x03" +
        "\x02\x02\x02\u169A\u169B\x03\x02\x02\x02\u169B\u169C\x03\x02\x02\x02\u169C" +
        "\u16A0\x05\u0416\u020C\x02\u169D\u169F\x05\u0414\u020B\x02\u169E\u169D" +
        "\x03\x02\x02\x02\u169F\u16A2\x03\x02\x02\x02\u16A0\u169E\x03\x02\x02\x02" +
        "\u16A0\u16A1\x03\x02\x02\x02\u16A1\u0413\x03\x02\x02\x02\u16A2\u16A0\x03" +
        "\x02\x02\x02\u16A3\u16A4\x07\u0211\x02\x02\u16A4\u16A5\x05\u0416\u020C" +
        "\x02\u16A5\u0415\x03\x02\x02\x02\u16A6\u16A7\x07\u0220\x02\x02\u16A7\u16A8" +
        "\x05\u040A\u0206\x02\u16A8\u16A9\x07\u0227\x02\x02\u16A9\u16AD\x03\x02" +
        "\x02\x02\u16AA\u16AD\x05\u0434\u021B\x02\u16AB\u16AD\x05\u0496\u024C\x02" +
        "\u16AC\u16A6\x03\x02\x02\x02\u16AC\u16AA\x03\x02\x02\x02\u16AC\u16AB\x03" +
        "\x02\x02\x02\u16AD\u0417\x03\x02\x02\x02\u16AE\u16B2\x05\u041C\u020F\x02" +
        "\u16AF\u16B1\x05\u041A\u020E\x02\u16B0\u16AF\x03\x02\x02\x02\u16B1\u16B4" +
        "\x03\x02\x02\x02\u16B2\u16B0\x03\x02\x02\x02\u16B2\u16B3\x03\x02\x02\x02" +
        "\u16B3\u0419\x03\x02\x02\x02\u16B4\u16B2\x03\x02\x02\x02\u16B5\u16BC\t" +
        "B\x02\x02\u16B6\u16BD\x05\u041C\u020F\x02\u16B7\u16B9\x05\u0432\u021A" +
        "\x02\u16B8\u16B7\x03\x02\x02\x02\u16B9\u16BA\x03\x02\x02\x02\u16BA\u16B8" +
        "\x03\x02\x02\x02\u16BA\u16BB\x03\x02\x02\x02\u16BB\u16BD\x03\x02\x02\x02" +
        "\u16BC\u16B6\x03\x02\x02\x02\u16BC\u16B8\x03\x02\x02\x02\u16BD\u041B\x03" +
        "\x02\x02\x02\u16BE\u16C0\x07\u013A\x02\x02\u16BF\u16BE\x03\x02\x02\x02" +
        "\u16BF\u16C0\x03\x02\x02\x02\u16C0\u16C1\x03\x02\x02\x02\u16C1\u16C2\x05" +
        "\u041E\u0210\x02\u16C2\u041D\x03\x02\x02\x02\u16C3\u16C4\x07\u0220\x02" +
        "\x02\u16C4\u16C5\x05\u0418\u020D\x02\u16C5\u16C6\x07\u0227\x02\x02\u16C6" +
        "\u16CB\x03\x02\x02\x02\u16C7\u16CB\x05\u0426\u0214\x02\u16C8\u16CB\x05" +
        "\u0420\u0211\x02\u16C9\u16CB\x05\u0422\u0212\x02\u16CA\u16C3\x03\x02\x02" +
        "\x02\u16CA\u16C7\x03\x02\x02\x02\u16CA\u16C8\x03\x02\x02\x02\u16CA\u16C9" +
        "\x03\x02\x02\x02\u16CB\u041F\x03\x02\x02\x02\u16CC\u16CE\x05\u0434\u021B" +
        "\x02\u16CD\u16CF\x07\u0100\x02\x02\u16CE\u16CD\x03\x02\x02\x02\u16CE\u16CF" +
        "\x03\x02\x02\x02\u16CF\u16D1\x03\x02\x02\x02\u16D0\u16D2\x07\u013A\x02" +
        "\x02\u16D1\u16D0\x03\x02\x02\x02\u16D1\u16D2\x03\x02\x02\x02\u16D2\u16DA" +
        "\x03\x02\x02\x02\u16D3\u16DB\x07\u013E\x02\x02\u16D4\u16DB\x07\r\x02\x02" +
        "\u16D5\u16DB\x07\x0E\x02\x02\u16D6\u16DB\x07\x0F\x02\x02\u16D7\u16DB\x07" +
        "v\x02\x02\u16D8\u16DB\x07\u0103\x02\x02\u16D9\u16DB\x05\u0464\u0233\x02" +
        "\u16DA\u16D3\x03\x02\x02\x02\u16DA\u16D4\x03\x02\x02\x02\u16DA\u16D5\x03" +
        "\x02\x02\x02\u16DA\u16D6\x03\x02\x02\x02\u16DA\u16D7\x03\x02\x02\x02\u16DA" +
        "\u16D8\x03\x02\x02\x02\u16DA\u16D9\x03\x02\x02\x02\u16DB\u0421\x03\x02" +
        "\x02\x02\u16DC\u16F2\x05\u0468\u0235\x02\u16DD\u16DF\x05\u0450\u0229\x02" +
        "\u16DE\u16DD\x03\x02\x02\x02\u16DF\u16E2\x03\x02\x02\x02\u16E0\u16DE\x03" +
        "\x02\x02\x02\u16E0\u16E1\x03\x02\x02\x02\u16E1\u16E4\x03\x02\x02\x02\u16E2" +
        "\u16E0\x03\x02\x02\x02\u16E3\u16E5\x05\u0452\u022A\x02\u16E4\u16E3\x03" +
        "\x02\x02\x02\u16E4\u16E5\x03\x02\x02\x02\u16E5\u16E9\x03\x02\x02\x02\u16E6" +
        "\u16E8\x05\u0424\u0213\x02\u16E7\u16E6\x03\x02\x02\x02\u16E8\u16EB\x03" +
        "\x02\x02\x02\u16E9\u16E7\x03\x02\x02\x02\u16E9\u16EA\x03\x02\x02\x02\u16EA" +
        "\u16F3\x03\x02\x02\x02\u16EB\u16E9\x03\x02\x02\x02\u16EC\u16EE\x05\u0454" +
        "\u022B\x02\u16ED\u16EC\x03\x02\x02\x02\u16EE\u16F1\x03\x02\x02\x02\u16EF" +
        "\u16ED\x03\x02\x02\x02\u16EF\u16F0\x03\x02\x02\x02\u16F0\u16F3\x03\x02" +
        "\x02\x02\u16F1\u16EF\x03\x02\x02\x02\u16F2\u16E0\x03\x02\x02\x02\u16F2" +
        "\u16EF\x03\x02\x02\x02\u16F3\u0423\x03\x02\x02\x02\u16F4\u16F5\x07\u0220" +
        "\x02\x02\u16F5\u16FC\x05\u0440\u0221\x02\u16F6\u16F8\x07\u0213\x02\x02" +
        "\u16F7\u16F6\x03\x02\x02\x02\u16F7\u16F8\x03\x02\x02\x02\u16F8\u16F9\x03" +
        "\x02\x02\x02\u16F9\u16FB\x05\u0440\u0221\x02\u16FA\u16F7\x03\x02\x02\x02" +
        "\u16FB\u16FE\x03\x02\x02\x02\u16FC\u16FA\x03\x02\x02\x02\u16FC\u16FD\x03" +
        "\x02\x02\x02\u16FD\u16FF\x03\x02\x02\x02\u16FE\u16FC\x03\x02\x02\x02\u16FF" +
        "\u1700\x07\u0227\x02\x02\u1700\u0425\x03\x02\x02\x02\u1701\u1705\x05\u0428" +
        "\u0215\x02\u1702\u1705\x05\u042A\u0216\x02\u1703\u1705\x05\u042C\u0217" +
        "\x02\u1704\u1701\x03\x02\x02\x02\u1704\u1702\x03\x02\x02\x02\u1704\u1703" +
        "\x03\x02\x02\x02\u1705\u0427\x03\x02\x02\x02\u1706\u1708\x05\u040A\u0206" +
        "\x02\u1707\u1709\x07\u0100\x02\x02\u1708\u1707\x03\x02\x02\x02\u1708\u1709" +
        "\x03\x02\x02\x02\u1709\u170B\x03\x02\x02\x02\u170A\u170C\x07\u013A\x02" +
        "\x02\u170B\u170A\x03\x02\x02\x02\u170B\u170C\x03\x02\x02\x02\u170C\u170D" +
        "\x03\x02\x02\x02\u170D\u170E\tC\x02\x02\u170E\u0429\x03\x02\x02\x02\u170F" +
        "\u1710\x05\u040A\u0206\x02\u1710\u1711\x05\u0430\u0219\x02\u1711\u1712" +
        "\x05\u040A\u0206\x02\u1712\u042B\x03\x02\x02\x02\u1713\u1714\x05\u040A" +
        "\u0206\x02\u1714\u1715\x05\u0430\u0219\x02\u1715\u1716\x07\u0220\x02\x02" +
        "\u1716\u1717\x05\u042E\u0218\x02\u1717\u1718\x07\u0227\x02\x02\u1718\u042D" +
        "\x03\x02\x02\x02\u1719\u171C\x05\u040A\u0206\x02\u171A\u171B\tB\x02\x02" +
        "\u171B\u171D\x05\u040A\u0206\x02\u171C\u171A\x03\x02\x02\x02\u171D\u171E" +
        "\x03\x02\x02\x02\u171E\u171C\x03\x02\x02\x02\u171E\u171F\x03\x02\x02\x02" +
        "\u171F\u042F\x03\x02\x02\x02\u1720\u1722\t\n\x02\x02\u1721\u1720\x03\x02" +
        "\x02\x02\u1721\u1722\x03\x02\x02\x02\u1722\u174C\x03\x02\x02\x02\u1723" +
        "\u1725\x07\u013A\x02";
    Cobol85Parser._serializedATNSegment11 = "\x02\u1724\u1723\x03\x02\x02\x02\u1724\u1725\x03\x02\x02\x02\u1725\u1735" +
        "\x03\x02\x02\x02\u1726\u1728\x07\xE3\x02\x02\u1727\u1729\x07\u01E1\x02" +
        "\x02\u1728\u1727\x03\x02\x02\x02\u1728\u1729\x03\x02\x02\x02\u1729\u1736" +
        "\x03\x02\x02\x02\u172A\u1736\x07\u0222\x02\x02\u172B\u172D\x07\u0111\x02" +
        "\x02\u172C\u172E\x07\u01E1\x02\x02\u172D\u172C\x03\x02\x02\x02\u172D\u172E" +
        "\x03\x02\x02\x02\u172E\u1736\x03\x02\x02\x02\u172F\u1736\x07\u021E\x02" +
        "\x02\u1730\u1732\x07\xBC\x02\x02\u1731\u1733\x07\u01EB\x02\x02\u1732\u1731" +
        "\x03\x02\x02\x02\u1732\u1733\x03\x02\x02\x02\u1733\u1736\x03\x02\x02\x02" +
        "\u1734\u1736\x07\u021A\x02\x02\u1735\u1726\x03\x02\x02\x02\u1735\u172A" +
        "\x03\x02\x02\x02\u1735\u172B\x03\x02\x02\x02\u1735\u172F\x03\x02\x02\x02" +
        "\u1735\u1730\x03\x02\x02\x02\u1735\u1734\x03\x02\x02\x02\u1736\u174D\x03" +
        "\x02\x02\x02\u1737\u174D\x07\u0224\x02\x02\u1738\u173A\x07\xE3\x02\x02" +
        "\u1739\u173B\x07\u01E1\x02\x02\u173A\u1739\x03\x02\x02\x02\u173A\u173B" +
        "\x03\x02\x02\x02\u173B\u173C\x03\x02\x02\x02\u173C\u173D\x07\u014B\x02" +
        "\x02\u173D\u173F\x07\xBC\x02\x02\u173E\u1740\x07\u01EB\x02\x02\u173F\u173E" +
        "\x03\x02\x02\x02\u173F\u1740\x03\x02\x02\x02\u1740\u174D\x03\x02\x02\x02" +
        "\u1741\u174D\x07\u0223\x02\x02\u1742\u1744\x07\u0111\x02\x02\u1743\u1745" +
        "\x07\u01E1\x02\x02\u1744\u1743\x03\x02\x02\x02\u1744\u1745\x03\x02\x02" +
        "\x02\u1745\u1746\x03\x02\x02\x02\u1746\u1747\x07\u014B\x02\x02\u1747\u1749" +
        "\x07\xBC\x02\x02\u1748\u174A\x07\u01EB\x02\x02\u1749\u1748\x03\x02\x02" +
        "\x02\u1749\u174A\x03\x02\x02\x02\u174A\u174D\x03\x02\x02\x02\u174B\u174D" +
        "\x07\u021F\x02\x02\u174C\u1724\x03\x02\x02\x02\u174C\u1737\x03\x02\x02" +
        "\x02\u174C\u1738\x03\x02\x02\x02\u174C\u1741\x03\x02\x02\x02\u174C\u1742" +
        "\x03\x02\x02\x02\u174C\u174B\x03\x02\x02\x02\u174D\u0431\x03\x02\x02\x02" +
        "\u174E\u1750\x07\u013A\x02\x02\u174F\u174E\x03\x02\x02\x02\u174F\u1750" +
        "\x03\x02\x02\x02\u1750\u1752\x03\x02\x02\x02\u1751\u1753\x05\u0430\u0219" +
        "\x02\u1752\u1751\x03\x02\x02\x02\u1752\u1753\x03\x02\x02\x02\u1753\u175A" +
        "\x03\x02\x02\x02\u1754\u175B\x05\u040A\u0206\x02\u1755\u1756\x07\u0220" +
        "\x02\x02\u1756\u1757\x05\u040A\u0206\x02\u1757\u1758\x05\u0432\u021A\x02" +
        "\u1758\u1759\x07\u0227\x02\x02\u1759\u175B\x03\x02\x02\x02\u175A\u1754" +
        "\x03\x02\x02\x02\u175A\u1755\x03\x02\x02\x02\u175B\u0433\x03\x02\x02\x02" +
        "\u175C\u1761\x05\u0444\u0223\x02\u175D\u1761\x05\u0436\u021C\x02\u175E" +
        "\u1761\x05\u0438\u021D\x02\u175F\u1761\x05\u04A4\u0253\x02\u1760\u175C" +
        "\x03\x02\x02\x02\u1760\u175D\x03\x02\x02\x02\u1760\u175E\x03\x02\x02\x02" +
        "\u1760\u175F\x03\x02\x02\x02\u1761\u0435\x03\x02\x02\x02\u1762\u1772\x05" +
        "\u0444\u0223\x02\u1763\u1764\x07\u0220\x02\x02\u1764\u176B\x05\u0440\u0221" +
        "\x02\u1765\u1767\x07\u0213\x02\x02\u1766\u1765\x03\x02\x02\x02\u1766\u1767" +
        "\x03\x02\x02\x02\u1767\u1768\x03\x02\x02\x02\u1768\u176A\x05\u0440\u0221" +
        "\x02\u1769\u1766\x03\x02\x02\x02\u176A\u176D\x03\x02\x02\x02\u176B\u1769" +
        "\x03\x02\x02\x02\u176B\u176C\x03\x02\x02\x02\u176C\u176E\x03\x02\x02\x02" +
        "\u176D\u176B\x03\x02\x02\x02\u176E\u176F\x07\u0227\x02\x02\u176F\u1771" +
        "\x03\x02\x02\x02\u1770\u1763\x03\x02\x02\x02\u1771\u1774\x03\x02\x02\x02" +
        "\u1772\u1770\x03\x02\x02\x02\u1772\u1773\x03\x02\x02\x02\u1773\u1776\x03" +
        "\x02\x02\x02\u1774\u1772\x03\x02\x02\x02\u1775\u1777\x05\u043A\u021E\x02" +
        "\u1776\u1775\x03\x02\x02\x02\u1776\u1777\x03\x02\x02\x02\u1777\u0437\x03" +
        "\x02\x02\x02\u1778\u1779\x07\xDB\x02\x02\u1779\u1789\x05\u0472\u023A\x02" +
        "\u177A\u177B\x07\u0220\x02\x02\u177B\u1782\x05\u0442\u0222\x02\u177C\u177E" +
        "\x07\u0213\x02\x02\u177D\u177C\x03\x02\x02\x02\u177D\u177E\x03\x02\x02" +
        "\x02\u177E\u177F\x03\x02\x02\x02\u177F\u1781\x05\u0442\u0222\x02\u1780" +
        "\u177D\x03\x02\x02\x02\u1781\u1784\x03\x02\x02\x02\u1782\u1780\x03\x02" +
        "\x02\x02\u1782\u1783\x03\x02\x02\x02\u1783\u1785\x03\x02\x02\x02\u1784" +
        "\u1782\x03\x02\x02\x02\u1785\u1786\x07\u0227\x02\x02\u1786\u1788\x03\x02" +
        "\x02\x02\u1787\u177A\x03\x02\x02\x02\u1788\u178B\x03\x02\x02\x02\u1789" +
        "\u1787\x03\x02\x02\x02\u1789\u178A\x03\x02\x02\x02\u178A\u178D\x03\x02" +
        "\x02\x02\u178B\u1789\x03\x02\x02\x02\u178C\u178E\x05\u043A\u021E\x02\u178D" +
        "\u178C\x03\x02\x02\x02\u178D\u178E\x03\x02\x02\x02\u178E\u0439\x03\x02" +
        "\x02\x02\u178F\u1790\x07\u0220\x02\x02\u1790\u1791\x05\u043C\u021F\x02" +
        "\u1791\u1793\x07\u0212\x02\x02\u1792\u1794\x05\u043E\u0220\x02\u1793\u1792" +
        "\x03\x02\x02\x02\u1793\u1794\x03\x02\x02\x02\u1794\u1795\x03\x02\x02\x02" +
        "\u1795\u1796\x07\u0227\x02\x02\u1796\u043B\x03\x02\x02\x02\u1797\u1798" +
        "\x05\u040A\u0206\x02\u1798\u043D\x03\x02\x02\x02\u1799\u179A\x05\u040A" +
        "\u0206\x02\u179A\u043F\x03\x02\x02\x02\u179B\u17A7\x07\v\x02\x02\u179C" +
        "\u17A7\x05\u049C\u024F\x02\u179D\u179F\x05\u0444\u0223\x02\u179E\u17A0" +
        "\x05\u049C\u024F\x02\u179F\u179E\x03\x02\x02\x02\u179F\u17A0\x03\x02\x02" +
        "\x02\u17A0\u17A7\x03\x02\x02\x02\u17A1\u17A3\x05\u0474\u023B\x02\u17A2" +
        "\u17A4\x05\u049C\u024F\x02\u17A3\u17A2\x03\x02\x02\x02\u17A3\u17A4\x03" +
        "\x02\x02\x02\u17A4\u17A7\x03\x02\x02\x02\u17A5\u17A7\x05\u040A\u0206\x02" +
        "\u17A6\u179B\x03\x02\x02\x02\u17A6\u179C\x03\x02\x02\x02\u17A6\u179D\x03" +
        "\x02\x02\x02\u17A6\u17A1\x03\x02\x02\x02\u17A6\u17A5\x03\x02\x02\x02\u17A7" +
        "\u0441\x03\x02\x02\x02\u17A8\u17B4\x05\u0496\u024C\x02\u17A9\u17B4\x05" +
        "\u0434\u021B\x02\u17AA\u17AC\x05\u0444\u0223\x02\u17AB\u17AD\x05\u049C" +
        "\u024F\x02\u17AC\u17AB\x03\x02\x02\x02\u17AC\u17AD\x03\x02\x02\x02\u17AD" +
        "\u17B4\x03\x02\x02\x02\u17AE\u17B0\x05\u0474\u023B\x02\u17AF\u17B1\x05" +
        "\u049C\u024F\x02\u17B0\u17AF\x03\x02\x02\x02\u17B0\u17B1\x03\x02\x02\x02" +
        "\u17B1\u17B4\x03\x02\x02\x02\u17B2\u17B4\x05\u040A\u0206\x02\u17B3\u17A8" +
        "\x03\x02\x02\x02\u17B3\u17A9\x03\x02\x02\x02\u17B3\u17AA\x03\x02\x02\x02" +
        "\u17B3\u17AE\x03\x02\x02\x02\u17B3\u17B2\x03\x02\x02\x02\u17B4\u0443\x03" +
        "\x02\x02\x02\u17B5\u17BA\x05\u0446\u0224\x02\u17B6\u17BA\x05\u0448\u0225" +
        "\x02\u17B7\u17BA\x05\u044A\u0226\x02\u17B8\u17BA\x05\u044C\u0227\x02\u17B9" +
        "\u17B5\x03\x02\x02\x02\u17B9\u17B6\x03\x02\x02\x02\u17B9\u17B7\x03\x02" +
        "\x02\x02\u17B9\u17B8\x03\x02\x02\x02\u17BA\u0445\x03\x02\x02\x02\u17BB" +
        "\u17BE\x05\u046A\u0236\x02\u17BC\u17BE\x05\u0468\u0235\x02\u17BD\u17BB" +
        "\x03\x02\x02\x02\u17BD\u17BC\x03\x02\x02\x02\u17BE\u17C8\x03\x02\x02\x02" +
        "\u17BF\u17C1\x05\u044E\u0228\x02\u17C0\u17BF\x03\x02\x02\x02\u17C1\u17C2" +
        "\x03\x02\x02\x02\u17C2\u17C0\x03\x02\x02\x02\u17C2\u17C3\x03\x02\x02\x02" +
        "\u17C3\u17C5\x03\x02\x02\x02\u17C4\u17C6\x05\u0452\u022A\x02\u17C5\u17C4" +
        "\x03\x02\x02\x02\u17C5\u17C6\x03\x02\x02\x02\u17C6\u17C9\x03\x02\x02\x02" +
        "\u17C7\u17C9\x05\u0452\u022A\x02\u17C8\u17C0\x03\x02\x02\x02\u17C8\u17C7" +
        "\x03\x02\x02\x02\u17C8\u17C9\x03\x02\x02\x02\u17C9\u0447\x03\x02\x02\x02" +
        "\u17CA\u17CB\x05\u047E\u0240\x02\u17CB\u17CC\x05\u0456\u022C\x02\u17CC" +
        "\u0449\x03\x02\x02\x02\u17CD\u17CE\x05\u0492\u024A\x02\u17CE\u17CF\x05" +
        "\u0458\u022D\x02\u17CF\u044B\x03\x02\x02\x02\u17D0\u17D1\x07\u0118\x02" +
        "\x02\u17D1\u17D2\x05\u0452\u022A\x02\u17D2\u044D\x03\x02\x02\x02\u17D3" +
        "\u17D6\x05\u0450\u0229\x02\u17D4\u17D6\x05\u045A\u022E\x02\u17D5\u17D3" +
        "\x03\x02\x02\x02\u17D5\u17D4\x03\x02\x02\x02\u17D6\u044F\x03\x02\x02\x02" +
        "\u17D7\u17D8\tD\x02\x02\u17D8\u17D9\x05\u046A\u0236\x02\u17D9\u0451\x03" +
        "\x02\x02\x02\u17DA\u17DB\tD\x02\x02\u17DB\u17DC\x05\u0470\u0239\x02\u17DC" +
        "\u0453\x03\x02\x02\x02\u17DD\u17DE\tD\x02\x02\u17DE\u17DF\x05\u047C\u023F" +
        "\x02\u17DF\u0455\x03\x02\x02\x02\u17E0\u17E1\tD\x02\x02\u17E1\u17E2\x05" +
        "\u048C\u0247\x02\u17E2\u0457\x03\x02\x02\x02\u17E3\u17E4\tD\x02\x02\u17E4" +
        "\u17E5\x05\u0478\u023D\x02\u17E5\u0459\x03\x02\x02\x02\u17E6\u17E7\tD" +
        "\x02\x02\u17E7\u17E8\x05\u0436\u021C\x02\u17E8\u045B\x03\x02\x02\x02\u17E9" +
        "\u17EA\x05\u0494\u024B\x02\u17EA\u045D\x03\x02\x02\x02\u17EB\u17EC\x05" +
        "\u048E\u0248\x02\u17EC\u045F\x03\x02\x02\x02\u17ED\u17EE\x05\u0482\u0242" +
        "\x02\u17EE\u0461\x03\x02\x02\x02\u17EF\u17F0\x05\u0494\u024B\x02\u17F0" +
        "\u0463\x03\x02\x02\x02\u17F1\u17F2\x05\u0494\u024B\x02\u17F2\u0465\x03" +
        "\x02\x02\x02\u17F3\u17F4\x05\u048E\u0248\x02\u17F4\u0467\x03\x02\x02\x02" +
        "\u17F5\u17F6\x05\u0494\u024B\x02\u17F6\u0469\x03\x02\x02\x02\u17F7\u17F8" +
        "\x05\u0494\u024B\x02\u17F8\u046B\x03\x02\x02\x02\u17F9\u17FD\x07\xD2\x02" +
        "\x02\u17FA\u17FD\x07n\x02\x02\u17FB\u17FD\x05\u046A\u0236\x02\u17FC\u17F9" +
        "\x03\x02\x02\x02\u17FC\u17FA\x03\x02\x02\x02\u17FC\u17FB\x03\x02\x02\x02" +
        "\u17FD\u046D\x03\x02\x02\x02\u17FE\u17FF\x05\u048E\u0248\x02\u17FF\u046F" +
        "\x03\x02\x02\x02\u1800\u1801\x05\u0494\u024B\x02\u1801\u0471\x03\x02\x02" +
        "\x02\u1802\u1809\x07\xFC\x02\x02\u1803\u1809\x07\u010F\x02\x02\u1804\u1809" +
        "\x07\u0173\x02\x02\u1805\u1809\x07\u01D2\x02\x02\u1806\u1809\x07\u0203" +
        "\x02\x02\u1807\u1809\x05\u0494\u024B\x02\u1808\u1802\x03\x02\x02\x02\u1808" +
        "\u1803\x03\x02\x02\x02\u1808\u1804\x03\x02\x02\x02\u1808\u1805\x03\x02" +
        "\x02\x02\u1808\u1806\x03\x02\x02\x02\u1808\u1807\x03\x02\x02\x02\u1809" +
        "\u0473\x03\x02\x02\x02\u180A\u180B\x05\u0494\u024B\x02\u180B\u0475\x03" +
        "\x02\x02\x02\u180C\u180D\x05\u048E\u0248\x02\u180D\u0477\x03\x02\x02\x02" +
        "\u180E\u180F\x05\u0494\u024B\x02\u180F\u0479\x03\x02\x02\x02\u1810\u1811" +
        "\x05\u0494\u024B\x02\u1811\u047B\x03\x02\x02\x02\u1812\u1813\x05\u0494" +
        "\u024B\x02\u1813\u047D\x03\x02\x02\x02\u1814\u1817\x05\u0494\u024B\x02" +
        "\u1815\u1817\x05\u049C\u024F\x02\u1816\u1814\x03\x02\x02\x02\u1816\u1815" +
        "\x03\x02\x02\x02\u1817\u047F\x03\x02\x02\x02\u1818\u181A\x05\u047E\u0240" +
        "\x02\u1819\u181B\x05\u0456\u022C\x02\u181A\u1819\x03\x02\x02\x02\u181A" +
        "\u181B\x03\x02\x02\x02\u181B\u181E\x03\x02\x02\x02\u181C\u181E\x05\u048C" +
        "\u0247\x02\u181D\u1818\x03\x02\x02\x02\u181D\u181C\x03\x02\x02\x02\u181E" +
        "\u0481\x03\x02\x02\x02\u181F\u1822\x07\u0229\x02\x02\u1820\u1822\x05\u0494" +
        "\u024B\x02\u1821\u181F\x03\x02\x02\x02\u1821\u1820\x03\x02\x02\x02\u1822" +
        "\u0483\x03\x02\x02\x02\u1823\u1824\x05\u0444\u0223\x02\u1824\u0485\x03" +
        "\x02\x02\x02\u1825\u1826\x05\u0444\u0223\x02\u1826\u0487\x03\x02\x02\x02" +
        "\u1827\u1828\x05\u0494\u024B\x02\u1828\u0489\x03\x02\x02\x02\u1829\u182A" +
        "\x05\u0494\u024B\x02\u182A\u048B\x03\x02\x02\x02\u182B\u182E\x05\u0494" +
        "\u024B\x02\u182C\u182E\x05\u049C\u024F\x02\u182D\u182B\x03\x02\x02\x02" +
        "\u182D\u182C\x03\x02\x02\x02\u182E\u048D\x03\x02\x02\x02\u182F\u1830\x05" +
        "\u0494\u024B\x02\u1830\u048F\x03\x02\x02\x02\u1831\u1832\x05\u0494\u024B" +
        "\x02\u1832\u0491\x03\x02\x02\x02\u1833\u1834\x05\u0494\u024B\x02\u1834" +
        "\u0493\x03\x02\x02\x02\u1835\u1836\tE\x02\x02\u1836\u0495\x03\x02\x02" +
        "\x02\u1837\u183E\x07\u0229\x02\x02\u1838\u183E\x05\u04A2\u0252\x02\u1839" +
        "\u183E\x05\u049A\u024E\x02\u183A\u183E\x05\u0498\u024D\x02\u183B\u183E" +
        "\x05\u049E\u0250\x02\u183C\u183E\x05\u04A0\u0251\x02\u183D\u1837\x03\x02" +
        "\x02\x02\u183D\u1838\x03\x02\x02\x02\u183D\u1839\x03\x02\x02\x02\u183D" +
        "\u183A\x03\x02\x02\x02\u183D\u183B\x03\x02\x02\x02\u183D\u183C\x03\x02" +
        "\x02\x02\u183E\u0497\x03\x02\x02\x02\u183F\u1840\tF\x02\x02\u1840\u0499" +
        "\x03\x02\x02\x02\u1841\u1845\x07\u022E\x02\x02\u1842\u1845\x07\u020B\x02" +
        "\x02\u1843\u1845\x05\u049C\u024F\x02\u1844\u1841\x03\x02\x02\x02\u1844" +
        "\u1842\x03\x02\x02\x02\u1844\u1843\x03\x02\x02\x02\u1845\u049B\x03\x02" +
        "\x02\x02\u1846\u1847\tG\x02\x02\u1847\u049D\x03\x02\x02\x02\u1848\u1849" +
        "\x07\x8C\x02\x02\u1849\u184C\x07\u0220\x02\x02\u184A\u184D\x05\u0494\u024B" +
        "\x02\u184B\u184D\x05\u0496\u024C\x02\u184C\u184A\x03\x02\x02\x02\u184C" +
        "\u184B\x03\x02\x02\x02\u184D\u184E\x03\x02\x02\x02\u184E\u184F\x07\u0227" +
        "\x02\x02\u184F\u049F\x03\x02\x02\x02\u1850\u1851\x07\x8D\x02\x02\u1851" +
        "\u1854\x07\u0220\x02\x02\u1852\u1855\x05\u0494\u024B\x02\u1853\u1855\x05" +
        "\u0496\u024C\x02\u1854\u1852\x03\x02\x02\x02\u1854\u1853\x03\x02\x02\x02" +
        "\u1855\u1856\x03\x02\x02\x02\u1856\u1857\x07\u0227\x02\x02\u1857\u04A1" +
        "\x03\x02\x02\x02\u1858\u1859\x07\v\x02\x02\u1859\u1868\x05\u0496\u024C" +
        "\x02\u185A\u1868\x07\xE8\x02\x02\u185B\u1868\x07\xE9\x02\x02\u185C\u1868" +
        "\x07\u0125\x02\x02\u185D\u1868\x07\u0126\x02\x02\u185E\u1868\x07\u013B" +
        "\x02\x02\u185F\u1868\x07\u013C\x02\x02\u1860\u1868\x07\u0171\x02\x02\u1861" +
        "\u1868\x07\u0172\x02\x02\u1862\u1868\x07\u01C4\x02\x02\u1863\u1868\x07" +
        "\u01C5\x02\x02\u1864\u1868\x07\u020B\x02\x02\u1865\u1868\x07\u020D\x02" +
        "\x02\u1866\u1868\x07\u020E\x02\x02\u1867\u1858\x03\x02\x02\x02\u1867\u185A" +
        "\x03\x02\x02\x02\u1867\u185B\x03\x02\x02\x02\u1867\u185C\x03\x02\x02\x02" +
        "\u1867\u185D\x03\x02\x02\x02\u1867\u185E\x03\x02\x02\x02\u1867\u185F\x03" +
        "\x02\x02\x02\u1867\u1860\x03\x02\x02\x02\u1867\u1861\x03\x02\x02\x02\u1867" +
        "\u1862\x03\x02\x02\x02\u1867\u1863\x03\x02\x02\x02\u1867\u1864\x03\x02" +
        "\x02\x02\u1867\u1865\x03\x02\x02\x02\u1867\u1866\x03\x02\x02\x02\u1868" +
        "\u04A3\x03\x02\x02\x02\u1869\u186A\x07\x07\x02\x02\u186A\u186B\x07\u0145" +
        "\x02\x02\u186B\u188B\x05\u0434\u021B\x02\u186C\u188B\x07q\x02\x02\u186D" +
        "\u188B\x07t\x02\x02\u186E\u188B\x07u\x02\x02\u186F\u188B\x07x\x02\x02" +
        "\u1870\u188B\x07y\x02\x02\u1871\u188B\x07z\x02\x02\u1872\u188B\x07{\x02" +
        "\x02\u1873\u188B\x07|\x02\x02\u1874\u188B\x07}\x02\x02\u1875\u188B\x07" +
        "~\x02\x02\u1876\u1878\x07\u010F\x02\x02\u1877\u1879\x07\u0145\x02\x02" +
        "\u1878\u1877\x03\x02\x02\x02\u1878\u1879\x03\x02\x02\x02\u1879\u187A\x03" +
        "\x02\x02\x02\u187A\u188B\x05\u0434\u021B\x02\u187B\u188B\x07\u0118\x02" +
        "\x02\u187C\u188B\x07\u011B\x02\x02\u187D\u188B\x07\u0157\x02\x02\u187E" +
        "\u188B\x07\u0196\x02\x02\u187F\u188B\x07\u01B5\x02\x02\u1880\u188B\x07" +
        "\u01B6\x02\x02\u1881\u188B\x07\u01BB\x02\x02\u1882\u188B\x07\u01BC\x02" +
        "\x02\u1883\u188B\x07\u01BD\x02\x02\u1884\u188B\x07\u01BF\x02\x02\u1885" +
        "\u188B\x07\u01C0\x02\x02\u1886\u188B\x07\u01C1\x02\x02\u1887\u188B\x07" +
        "\u01D9\x02\x02\u1888\u188B\x07\u01E7\x02\x02\u1889\u188B\x07\u0203\x02" +
        "\x02\u188A\u1869\x03\x02\x02\x02\u188A\u186C\x03\x02\x02\x02\u188A\u186D" +
        "\x03\x02\x02\x02\u188A\u186E\x03\x02\x02\x02\u188A\u186F\x03\x02\x02\x02" +
        "\u188A\u1870\x03\x02\x02\x02\u188A\u1871\x03\x02\x02\x02\u188A\u1872\x03" +
        "\x02\x02\x02\u188A\u1873\x03\x02\x02\x02\u188A\u1874\x03\x02\x02\x02\u188A" +
        "\u1875\x03\x02\x02\x02\u188A\u1876\x03\x02\x02\x02\u188A\u187B\x03\x02" +
        "\x02\x02\u188A\u187C\x03\x02\x02\x02\u188A\u187D\x03\x02\x02\x02\u188A" +
        "\u187E\x03\x02\x02\x02\u188A\u187F\x03\x02\x02\x02\u188A\u1880\x03\x02" +
        "\x02\x02\u188A\u1881\x03\x02\x02\x02\u188A\u1882\x03\x02\x02\x02\u188A" +
        "\u1883\x03\x02\x02\x02\u188A\u1884\x03\x02\x02\x02\u188A\u1885\x03\x02" +
        "\x02\x02\u188A\u1886\x03\x02\x02\x02\u188A\u1887\x03\x02\x02\x02\u188A" +
        "\u1888\x03\x02\x02\x02\u188A\u1889\x03\x02\x02\x02\u188B\u04A5\x03\x02" +
        "\x02\x02\u188C\u188E\x07\u0234\x02\x02\u188D\u188C\x03\x02\x02\x02\u188E" +
        "\u188F\x03\x02\x02\x02\u188F\u188D\x03\x02\x02\x02\u188F\u1890\x03\x02" +
        "\x02\x02\u1890\u04A7\x03\x02\x02\x02\u03D5\u04AE\u04B2\u04B5\u04B8\u04BD" +
        "\u04C1\u04CF\u04D8\u04DE\u04E2\u04E4\u04E7\u04EA\u04EF\u04F4\u04F9\u04FE" +
        "\u0503\u0508\u0510\u0516\u051E\u0524\u052A\u052E\u0538\u0542\u0546\u054A" +
        "\u054D\u0551\u0554\u0558\u055B\u055E\u0561\u0565\u056A\u056D\u0570\u0573" +
        "\u0577\u057C\u0580\u0586\u0593\u0597\u05A4\u05A8\u05AE\u05B1\u05BC\u05BE" +
        "\u05C5\u05C7\u05D0\u05D5\u05D9\u05DE\u05E3\u05EA\u05ED\u05F0\u05F5\u05FA" +
        "\u05FE\u0602\u0606\u0609\u060D\u0612\u0616\u061C\u0620\u0622\u0625\u0629" +
        "\u062E\u0630\u0635\u0637\u063B\u063F\u0642\u0646\u0649\u064E\u0651\u0654" +
        "\u0658\u065B\u0660\u0663\u0666\u0668\u066C\u0672\u0675\u0678\u067C\u0680" +
        "\u0683\u0686\u068B\u068F\u0694\u0697\u069C\u06A4\u06A9\u06AD\u06B2\u06BB" +
        "\u06C0\u06CF\u06D3\u06E0\u06E5\u06E8\u06EB\u06EF\u06F1\u06F8\u06FE\u0701" +
        "\u0705\u070A\u070F\u0713\u0716\u071C\u071F\u0723\u0726\u0729\u072E\u0731" +
        "\u0735\u0738\u073B\u073F\u0744\u0748\u074C\u0750\u0753\u075C\u0761\u0765" +
        "\u076B\u0771\u0773\u0779\u077F\u0782\u078A\u078E\u0791\u0794\u0799\u079E" +
        "\u07A1\u07A6\u07AB\u07B0\u07BA\u07C6\u07CE\u07D4\u07D9\u07E0\u07EE\u07F1" +
        "\u07F6\u07FC\u0800\u0803\u080C\u080F\u0813\u0816\u081A\u081D\u0820\u0824" +
        "\u0827\u0829\u082D\u0830\u0833\u0838\u0840\u0844\u0846\u084D\u084F\u0856" +
        "\u085A\u085E\u0863\u0867\u0869\u086E\u0872\u0876\u0879\u087E\u0884\u0887" +
        "\u088B\u088F\u0892\u0895\u089A\u089D\u08A0\u08A5\u08A9\u08AC\u08B4\u08BA" +
        "\u08BE\u08C0\u08C5\u08CD\u08DB\u08E4\u08EC\u08EE\u08F4\u08F9\u08FC\u0908" +
        "\u090B\u090D\u0915\u091E\u0920\u0928\u0932\u0935\u0937\u093F\u094D\u094F" +
        "\u0954\u095B\u0960\u0964\u096B\u0972\u0979\u097E\u0982\u0987\u098B\u0990" +
        "\u0994\u0999\u099D\u09A2\u09A6\u09AD\u09B8\u09BD\u09C6\u09CC\u09E0\u09EC" +
        "\u09EE\u0A07\u0A0B\u0A0F\u0A12\u0A15\u0A19\u0A1D\u0A20\u0A23\u0A27\u0A2B" +
        "\u0A2F\u0A33\u0A37\u0A3B\u0A41\u0A47\u0A4E\u0A51\u0A5B\u0A61\u0A67\u0A6B" +
        "\u0A6D\u0A72\u0A74\u0A7E\u0A81\u0A85\u0A88\u0A8D\u0A99\u0AA0\u0AA5\u0AA9" +
        "\u0AAC\u0AAF\u0AB2\u0AB4\u0AB9\u0AC0\u0AC4\u0AC6\u0ACA\u0ADD\u0AE2\u0AE5" +
        "\u0AE9\u0AEF\u0AF2\u0AF9\u0B06\u0B09\u0B0B\u0B12\u0B18\u0B1B\u0B21\u0B25" +
        "\u0B28\u0B2B\u0B2E\u0B32\u0B36\u0B3A\u0B42\u0B47\u0B51\u0B57\u0B5B\u0B5F" +
        "\u0B64\u0B68\u0B6F\u0B74\u0B7A\u0B7F\u0B82\u0B86\u0B8F\u0B94\u0B99\u0B9E" +
        "\u0BA2\u0BA9\u0BAD\u0BB1\u0BB3\u0BBA\u0BBF\u0BC3\u0BCD\u0BD2\u0BD8\u0BDB" +
        "\u0BE1\u0BE4\u0BE8\u0BEA\u0BF0\u0BF3\u0BF7\u0BFB\u0BFE\u0C01\u0C04\u0C0C" +
        "\u0C12\u0C19\u0C1E\u0C21\u0C24\u0C27\u0C33\u0C37\u0C3D\u0C41\u0C44\u0C49" +
        "\u0C51\u0C56\u0C6D\u0C6F\u0C81\u0C84\u0C8A\u0C91\u0C96\u0C99\u0CA1\u0CA6" +
        "\u0CA9\u0CAD\u0CB0\u0CB5\u0CBA\u0CBD\u0CC2\u0CC4\u0CCB\u0CCE\u0CD3\u0CD7" +
        "\u0CDE\u0CE1\u0CE5\u0CF7\u0CFE\u0D01\u0D0F\u0D13\u0D15\u0D1A\u0D1C\u0D20" +
        "\u0D23\u0D29\u0D2E\u0D34\u0D36\u0D3A\u0D59\u0D5E\u0D62\u0D66\u0D6A\u0D6C" +
        "\u0D70\u0D75\u0D7A\u0D7E\u0D84\u0D8C\u0D8F\u0D93\u0D9B\u0DA2\u0DA5\u0DA8" +
        "\u0DAD\u0DB0\u0DB4\u0DB7\u0DBA\u0DC0\u0DC5\u0DCC\u0DDB\u0DE1\u0DEB\u0DF1" +
        "\u0DFA\u0DFD\u0E02\u0E38\u0E40\u0E43\u0E46\u0E49\u0E4E\u0E52\u0E59\u0E5F" +
        "\u0E69\u0E71\u0E74\u0E77\u0E7A\u0E7F\u0E85\u0E8A\u0E90\u0E92\u0E98\u0EA1" +
        "\u0EA5\u0EA9\u0EAD\u0EB1\u0EB9\u0EBF\u0EC6\u0EC9\u0ECC\u0ECF\u0ED2\u0ED5" +
        "\u0ED8\u0EDE\u0EE3\u0EE6\u0EE9\u0EEE\u0EF4\u0EF9\u0EFC\u0EFF\u0F05\u0F0B" +
        "\u0F0D\u0F11\u0F14\u0F1A\u0F20\u0F22\u0F27\u0F30\u0F37\u0F3D\u0F43\u0F47" +
        "\u0F4A\u0F4D\u0F52\u0F54\u0F57\u0F5C\u0F5F\u0F65\u0F6B\u0F6D\u0F72\u0F76" +
        "\u0F7D\u0F81\u0F85\u0F8B\u0F90\u0F93\u0F96\u0F9A\u0FA1\u0FA4\u0FA7\u0FAA" +
        "\u0FAF\u0FB4\u0FB8\u0FBD\u0FC3\u0FC6\u0FC9\u0FCC\u0FD0\u0FD5\u0FDA\u0FDD" +
        "\u0FE5\u0FEA\u0FED\u0FF0\u0FF3\u0FF6\u0FFC\u1001\u1004\u1009\u100C\u1012" +
        "\u1016\u101A\u1022\u1027\u102B\u1030\u1038\u103A\u1041\u1047\u104A\u104D" +
        "\u1053\u105B\u1060\u1068\u106D\u1071\u1075\u1082\u1088\u108D\u1092\u1097" +
        "\u109B\u109E\u10A3\u10A7\u10AB\u10B4\u10B8\u10C0\u10C4\u10C7\u10C9\u10CF" +
        "\u10D2\u10D5\u10DC\u10DF\u10E7\u10EA\u10F0\u10F3\u10F9\u10FD\u1102\u1108" +
        "\u1110\u1116\u111B\u111D\u1123\u1128\u112D\u1133\u113A\u113C\u1142\u114A" +
        "\u1151\u1157\u115B\u1160\u1165\u116B\u1171\u1176\u117A\u117E\u1185\u1188" +
        "\u118D\u1191\u1196\u119A\u119E\u11A3\u11A6\u11AA\u11AF\u11B2\u11B5\u11B8" +
        "\u11BF\u11C3\u11CB\u11D0\u11D4\u11DD\u11E9\u11ED\u11F1\u11F8\u11FC\u1204" +
        "\u120B\u1210\u1213\u1216\u1219\u121E\u1222\u1229\u122D\u1231\u1238\u123A" +
        "\u1240\u1245\u1249\u124F\u1253\u1257\u125D\u1263\u1268\u126B\u1270\u1278" +
        "\u127B\u1280\u1284\u1289\u1293\u1295\u129C\u12A1\u12AE\u12B4\u12B7\u12C0" +
        "\u12C5\u12C8\u12CB\u12CE\u12D1\u12D4\u12D7\u12DA\u12DD\u12E0\u12E6\u12EB" +
        "\u12EF\u12F6\u12F9\u12FC\u12FF\u1309\u130B\u1314\u1319\u131D\u1320\u1327" +
        "\u132F\u1334\u1338\u133B\u1342\u1348\u134C\u1350\u1358\u135D\u1360\u1364" +
        "\u1367\u136F\u1372\u1375\u1378\u137F\u1383\u1386\u138B\u138E\u139A\u139D" +
        "\u13A2\u13A5\u13A8\u13AC\u13AF\u13B2\u13B5\u13B8\u13C6\u13CA\u13CE\u13D3" +
        "\u13D9\u13DC\u13E4\u13E7\u13EC\u13F2\u13F7\u13FD\u1408\u140C\u1410\u1417" +
        "\u141A\u141D\u1420\u1425\u1429\u142E\u1432\u1436\u143B\u143E\u1442\u1445" +
        "\u1448\u144C\u1451\u1454\u1457\u145A\u1461\u1465\u146C\u1470\u1479\u147E" +
        "\u1482\u148B\u1497\u149C\u149F\u14A2\u14A5\u14A9\u14AD\u14B2\u14B8\u14BE" +
        "\u14C3\u14C6\u14CD\u14D3\u14D7\u14DA\u14DD\u14E0\u14E5\u14E9\u14ED\u14F1" +
        "\u14F6\u14FB\u1501\u150A\u150D\u1510\u1513\u1518\u151E\u1523\u152B\u1534" +
        "\u1538\u153C\u1540\u1544\u154D\u1550\u1553\u1556\u1559\u1560\u1563\u1567" +
        "\u156A\u156E\u1572\u1576\u157C\u1580\u1583\u1587\u158D\u1592\u1599\u15A0" +
        "\u15A3\u15A7\u15AC\u15B7\u15B9\u15BC\u15C0\u15C5\u15CB\u15CE\u15D3\u15D8" +
        "\u15DB\u15DE\u15E1\u15E4\u15E7\u15EA\u15EF\u15F3\u15F8\u15FE\u1601\u1606" +
        "\u160C\u1611\u1617\u161B\u1621\u1626\u162C\u1631\u1636\u163C\u1641\u1645" +
        "\u164B\u1650\u1656\u165A\u1661\u1666\u166D\u1671\u1677\u167C\u1682\u1689" +
        "\u1693\u169A\u16A0\u16AC\u16B2\u16BA\u16BC\u16BF\u16CA\u16CE\u16D1\u16DA" +
        "\u16E0\u16E4\u16E9\u16EF\u16F2\u16F7\u16FC\u1704\u1708\u170B\u171E\u1721" +
        "\u1724\u1728\u172D\u1732\u1735\u173A\u173F\u1744\u1749\u174C\u174F\u1752" +
        "\u175A\u1760\u1766\u176B\u1772\u1776\u177D\u1782\u1789\u178D\u1793\u179F" +
        "\u17A3\u17A6\u17AC\u17B0\u17B3\u17B9\u17BD\u17C2\u17C5\u17C8\u17D5\u17FC" +
        "\u1808\u1816\u181A\u181D\u1821\u182D\u183D\u1844\u184C\u1854\u1867\u1878" +
        "\u188A\u188F";
    Cobol85Parser._serializedATN = Utils.join([
        Cobol85Parser._serializedATNSegment0,
        Cobol85Parser._serializedATNSegment1,
        Cobol85Parser._serializedATNSegment2,
        Cobol85Parser._serializedATNSegment3,
        Cobol85Parser._serializedATNSegment4,
        Cobol85Parser._serializedATNSegment5,
        Cobol85Parser._serializedATNSegment6,
        Cobol85Parser._serializedATNSegment7,
        Cobol85Parser._serializedATNSegment8,
        Cobol85Parser._serializedATNSegment9,
        Cobol85Parser._serializedATNSegment10,
        Cobol85Parser._serializedATNSegment11,
    ], "");
    return Cobol85Parser;
}(Parser_1.Parser));
exports.Cobol85Parser = Cobol85Parser;
var StartRuleContext = /** @class */ (function (_super) {
    __extends(StartRuleContext, _super);
    function StartRuleContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StartRuleContext.prototype.compilationUnit = function () {
        return this.getRuleContext(0, CompilationUnitContext);
    };
    StartRuleContext.prototype.EOF = function () { return this.getToken(Cobol85Parser.EOF, 0); };
    Object.defineProperty(StartRuleContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_startRule; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StartRuleContext.prototype.enterRule = function (listener) {
        if (listener.enterStartRule) {
            listener.enterStartRule(this);
        }
    };
    // @Override
    StartRuleContext.prototype.exitRule = function (listener) {
        if (listener.exitStartRule) {
            listener.exitStartRule(this);
        }
    };
    // @Override
    StartRuleContext.prototype.accept = function (visitor) {
        if (visitor.visitStartRule) {
            return visitor.visitStartRule(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StartRuleContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StartRuleContext = StartRuleContext;
var CompilationUnitContext = /** @class */ (function (_super) {
    __extends(CompilationUnitContext, _super);
    function CompilationUnitContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CompilationUnitContext.prototype.programUnit = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ProgramUnitContext);
        }
        else {
            return this.getRuleContext(i, ProgramUnitContext);
        }
    };
    Object.defineProperty(CompilationUnitContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_compilationUnit; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CompilationUnitContext.prototype.enterRule = function (listener) {
        if (listener.enterCompilationUnit) {
            listener.enterCompilationUnit(this);
        }
    };
    // @Override
    CompilationUnitContext.prototype.exitRule = function (listener) {
        if (listener.exitCompilationUnit) {
            listener.exitCompilationUnit(this);
        }
    };
    // @Override
    CompilationUnitContext.prototype.accept = function (visitor) {
        if (visitor.visitCompilationUnit) {
            return visitor.visitCompilationUnit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CompilationUnitContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CompilationUnitContext = CompilationUnitContext;
var ProgramUnitContext = /** @class */ (function (_super) {
    __extends(ProgramUnitContext, _super);
    function ProgramUnitContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProgramUnitContext.prototype.identificationDivision = function () {
        return this.getRuleContext(0, IdentificationDivisionContext);
    };
    ProgramUnitContext.prototype.environmentDivision = function () {
        return this.tryGetRuleContext(0, EnvironmentDivisionContext);
    };
    ProgramUnitContext.prototype.dataDivision = function () {
        return this.tryGetRuleContext(0, DataDivisionContext);
    };
    ProgramUnitContext.prototype.procedureDivision = function () {
        return this.tryGetRuleContext(0, ProcedureDivisionContext);
    };
    ProgramUnitContext.prototype.programUnit = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ProgramUnitContext);
        }
        else {
            return this.getRuleContext(i, ProgramUnitContext);
        }
    };
    ProgramUnitContext.prototype.endProgramStatement = function () {
        return this.tryGetRuleContext(0, EndProgramStatementContext);
    };
    Object.defineProperty(ProgramUnitContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_programUnit; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProgramUnitContext.prototype.enterRule = function (listener) {
        if (listener.enterProgramUnit) {
            listener.enterProgramUnit(this);
        }
    };
    // @Override
    ProgramUnitContext.prototype.exitRule = function (listener) {
        if (listener.exitProgramUnit) {
            listener.exitProgramUnit(this);
        }
    };
    // @Override
    ProgramUnitContext.prototype.accept = function (visitor) {
        if (visitor.visitProgramUnit) {
            return visitor.visitProgramUnit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProgramUnitContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProgramUnitContext = ProgramUnitContext;
var EndProgramStatementContext = /** @class */ (function (_super) {
    __extends(EndProgramStatementContext, _super);
    function EndProgramStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EndProgramStatementContext.prototype.END = function () { return this.getToken(Cobol85Parser.END, 0); };
    EndProgramStatementContext.prototype.PROGRAM = function () { return this.getToken(Cobol85Parser.PROGRAM, 0); };
    EndProgramStatementContext.prototype.programName = function () {
        return this.getRuleContext(0, ProgramNameContext);
    };
    EndProgramStatementContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    Object.defineProperty(EndProgramStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_endProgramStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EndProgramStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterEndProgramStatement) {
            listener.enterEndProgramStatement(this);
        }
    };
    // @Override
    EndProgramStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitEndProgramStatement) {
            listener.exitEndProgramStatement(this);
        }
    };
    // @Override
    EndProgramStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitEndProgramStatement) {
            return visitor.visitEndProgramStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EndProgramStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EndProgramStatementContext = EndProgramStatementContext;
var IdentificationDivisionContext = /** @class */ (function (_super) {
    __extends(IdentificationDivisionContext, _super);
    function IdentificationDivisionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IdentificationDivisionContext.prototype.DIVISION = function () { return this.getToken(Cobol85Parser.DIVISION, 0); };
    IdentificationDivisionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    IdentificationDivisionContext.prototype.programIdParagraph = function () {
        return this.getRuleContext(0, ProgramIdParagraphContext);
    };
    IdentificationDivisionContext.prototype.IDENTIFICATION = function () { return this.tryGetToken(Cobol85Parser.IDENTIFICATION, 0); };
    IdentificationDivisionContext.prototype.ID = function () { return this.tryGetToken(Cobol85Parser.ID, 0); };
    IdentificationDivisionContext.prototype.identificationDivisionBody = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentificationDivisionBodyContext);
        }
        else {
            return this.getRuleContext(i, IdentificationDivisionBodyContext);
        }
    };
    Object.defineProperty(IdentificationDivisionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_identificationDivision; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IdentificationDivisionContext.prototype.enterRule = function (listener) {
        if (listener.enterIdentificationDivision) {
            listener.enterIdentificationDivision(this);
        }
    };
    // @Override
    IdentificationDivisionContext.prototype.exitRule = function (listener) {
        if (listener.exitIdentificationDivision) {
            listener.exitIdentificationDivision(this);
        }
    };
    // @Override
    IdentificationDivisionContext.prototype.accept = function (visitor) {
        if (visitor.visitIdentificationDivision) {
            return visitor.visitIdentificationDivision(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IdentificationDivisionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IdentificationDivisionContext = IdentificationDivisionContext;
var IdentificationDivisionBodyContext = /** @class */ (function (_super) {
    __extends(IdentificationDivisionBodyContext, _super);
    function IdentificationDivisionBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IdentificationDivisionBodyContext.prototype.authorParagraph = function () {
        return this.tryGetRuleContext(0, AuthorParagraphContext);
    };
    IdentificationDivisionBodyContext.prototype.installationParagraph = function () {
        return this.tryGetRuleContext(0, InstallationParagraphContext);
    };
    IdentificationDivisionBodyContext.prototype.dateWrittenParagraph = function () {
        return this.tryGetRuleContext(0, DateWrittenParagraphContext);
    };
    IdentificationDivisionBodyContext.prototype.dateCompiledParagraph = function () {
        return this.tryGetRuleContext(0, DateCompiledParagraphContext);
    };
    IdentificationDivisionBodyContext.prototype.securityParagraph = function () {
        return this.tryGetRuleContext(0, SecurityParagraphContext);
    };
    IdentificationDivisionBodyContext.prototype.remarksParagraph = function () {
        return this.tryGetRuleContext(0, RemarksParagraphContext);
    };
    Object.defineProperty(IdentificationDivisionBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_identificationDivisionBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IdentificationDivisionBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterIdentificationDivisionBody) {
            listener.enterIdentificationDivisionBody(this);
        }
    };
    // @Override
    IdentificationDivisionBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitIdentificationDivisionBody) {
            listener.exitIdentificationDivisionBody(this);
        }
    };
    // @Override
    IdentificationDivisionBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitIdentificationDivisionBody) {
            return visitor.visitIdentificationDivisionBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IdentificationDivisionBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IdentificationDivisionBodyContext = IdentificationDivisionBodyContext;
var ProgramIdParagraphContext = /** @class */ (function (_super) {
    __extends(ProgramIdParagraphContext, _super);
    function ProgramIdParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProgramIdParagraphContext.prototype.PROGRAM_ID = function () { return this.getToken(Cobol85Parser.PROGRAM_ID, 0); };
    ProgramIdParagraphContext.prototype.DOT_FS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DOT_FS);
        }
        else {
            return this.getToken(Cobol85Parser.DOT_FS, i);
        }
    };
    ProgramIdParagraphContext.prototype.programName = function () {
        return this.getRuleContext(0, ProgramNameContext);
    };
    ProgramIdParagraphContext.prototype.commentEntry = function () {
        return this.tryGetRuleContext(0, CommentEntryContext);
    };
    ProgramIdParagraphContext.prototype.COMMON = function () { return this.tryGetToken(Cobol85Parser.COMMON, 0); };
    ProgramIdParagraphContext.prototype.INITIAL = function () { return this.tryGetToken(Cobol85Parser.INITIAL, 0); };
    ProgramIdParagraphContext.prototype.LIBRARY = function () { return this.tryGetToken(Cobol85Parser.LIBRARY, 0); };
    ProgramIdParagraphContext.prototype.DEFINITION = function () { return this.tryGetToken(Cobol85Parser.DEFINITION, 0); };
    ProgramIdParagraphContext.prototype.RECURSIVE = function () { return this.tryGetToken(Cobol85Parser.RECURSIVE, 0); };
    ProgramIdParagraphContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    ProgramIdParagraphContext.prototype.PROGRAM = function () { return this.tryGetToken(Cobol85Parser.PROGRAM, 0); };
    Object.defineProperty(ProgramIdParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_programIdParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProgramIdParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterProgramIdParagraph) {
            listener.enterProgramIdParagraph(this);
        }
    };
    // @Override
    ProgramIdParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitProgramIdParagraph) {
            listener.exitProgramIdParagraph(this);
        }
    };
    // @Override
    ProgramIdParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitProgramIdParagraph) {
            return visitor.visitProgramIdParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProgramIdParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProgramIdParagraphContext = ProgramIdParagraphContext;
var AuthorParagraphContext = /** @class */ (function (_super) {
    __extends(AuthorParagraphContext, _super);
    function AuthorParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AuthorParagraphContext.prototype.AUTHOR = function () { return this.getToken(Cobol85Parser.AUTHOR, 0); };
    AuthorParagraphContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    AuthorParagraphContext.prototype.commentEntry = function () {
        return this.tryGetRuleContext(0, CommentEntryContext);
    };
    Object.defineProperty(AuthorParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_authorParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AuthorParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterAuthorParagraph) {
            listener.enterAuthorParagraph(this);
        }
    };
    // @Override
    AuthorParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitAuthorParagraph) {
            listener.exitAuthorParagraph(this);
        }
    };
    // @Override
    AuthorParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitAuthorParagraph) {
            return visitor.visitAuthorParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AuthorParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AuthorParagraphContext = AuthorParagraphContext;
var InstallationParagraphContext = /** @class */ (function (_super) {
    __extends(InstallationParagraphContext, _super);
    function InstallationParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InstallationParagraphContext.prototype.INSTALLATION = function () { return this.getToken(Cobol85Parser.INSTALLATION, 0); };
    InstallationParagraphContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    InstallationParagraphContext.prototype.commentEntry = function () {
        return this.tryGetRuleContext(0, CommentEntryContext);
    };
    Object.defineProperty(InstallationParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_installationParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InstallationParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterInstallationParagraph) {
            listener.enterInstallationParagraph(this);
        }
    };
    // @Override
    InstallationParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitInstallationParagraph) {
            listener.exitInstallationParagraph(this);
        }
    };
    // @Override
    InstallationParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitInstallationParagraph) {
            return visitor.visitInstallationParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InstallationParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InstallationParagraphContext = InstallationParagraphContext;
var DateWrittenParagraphContext = /** @class */ (function (_super) {
    __extends(DateWrittenParagraphContext, _super);
    function DateWrittenParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DateWrittenParagraphContext.prototype.DATE_WRITTEN = function () { return this.getToken(Cobol85Parser.DATE_WRITTEN, 0); };
    DateWrittenParagraphContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    DateWrittenParagraphContext.prototype.commentEntry = function () {
        return this.tryGetRuleContext(0, CommentEntryContext);
    };
    Object.defineProperty(DateWrittenParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dateWrittenParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DateWrittenParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterDateWrittenParagraph) {
            listener.enterDateWrittenParagraph(this);
        }
    };
    // @Override
    DateWrittenParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitDateWrittenParagraph) {
            listener.exitDateWrittenParagraph(this);
        }
    };
    // @Override
    DateWrittenParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitDateWrittenParagraph) {
            return visitor.visitDateWrittenParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DateWrittenParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DateWrittenParagraphContext = DateWrittenParagraphContext;
var DateCompiledParagraphContext = /** @class */ (function (_super) {
    __extends(DateCompiledParagraphContext, _super);
    function DateCompiledParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DateCompiledParagraphContext.prototype.DATE_COMPILED = function () { return this.getToken(Cobol85Parser.DATE_COMPILED, 0); };
    DateCompiledParagraphContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    DateCompiledParagraphContext.prototype.commentEntry = function () {
        return this.tryGetRuleContext(0, CommentEntryContext);
    };
    Object.defineProperty(DateCompiledParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dateCompiledParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DateCompiledParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterDateCompiledParagraph) {
            listener.enterDateCompiledParagraph(this);
        }
    };
    // @Override
    DateCompiledParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitDateCompiledParagraph) {
            listener.exitDateCompiledParagraph(this);
        }
    };
    // @Override
    DateCompiledParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitDateCompiledParagraph) {
            return visitor.visitDateCompiledParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DateCompiledParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DateCompiledParagraphContext = DateCompiledParagraphContext;
var SecurityParagraphContext = /** @class */ (function (_super) {
    __extends(SecurityParagraphContext, _super);
    function SecurityParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SecurityParagraphContext.prototype.SECURITY = function () { return this.getToken(Cobol85Parser.SECURITY, 0); };
    SecurityParagraphContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    SecurityParagraphContext.prototype.commentEntry = function () {
        return this.tryGetRuleContext(0, CommentEntryContext);
    };
    Object.defineProperty(SecurityParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_securityParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SecurityParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterSecurityParagraph) {
            listener.enterSecurityParagraph(this);
        }
    };
    // @Override
    SecurityParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitSecurityParagraph) {
            listener.exitSecurityParagraph(this);
        }
    };
    // @Override
    SecurityParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitSecurityParagraph) {
            return visitor.visitSecurityParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SecurityParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SecurityParagraphContext = SecurityParagraphContext;
var RemarksParagraphContext = /** @class */ (function (_super) {
    __extends(RemarksParagraphContext, _super);
    function RemarksParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RemarksParagraphContext.prototype.REMARKS = function () { return this.getToken(Cobol85Parser.REMARKS, 0); };
    RemarksParagraphContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    RemarksParagraphContext.prototype.commentEntry = function () {
        return this.tryGetRuleContext(0, CommentEntryContext);
    };
    Object.defineProperty(RemarksParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_remarksParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RemarksParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterRemarksParagraph) {
            listener.enterRemarksParagraph(this);
        }
    };
    // @Override
    RemarksParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitRemarksParagraph) {
            listener.exitRemarksParagraph(this);
        }
    };
    // @Override
    RemarksParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitRemarksParagraph) {
            return visitor.visitRemarksParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RemarksParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RemarksParagraphContext = RemarksParagraphContext;
var EnvironmentDivisionContext = /** @class */ (function (_super) {
    __extends(EnvironmentDivisionContext, _super);
    function EnvironmentDivisionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnvironmentDivisionContext.prototype.ENVIRONMENT = function () { return this.getToken(Cobol85Parser.ENVIRONMENT, 0); };
    EnvironmentDivisionContext.prototype.DIVISION = function () { return this.getToken(Cobol85Parser.DIVISION, 0); };
    EnvironmentDivisionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    EnvironmentDivisionContext.prototype.environmentDivisionBody = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EnvironmentDivisionBodyContext);
        }
        else {
            return this.getRuleContext(i, EnvironmentDivisionBodyContext);
        }
    };
    Object.defineProperty(EnvironmentDivisionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_environmentDivision; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnvironmentDivisionContext.prototype.enterRule = function (listener) {
        if (listener.enterEnvironmentDivision) {
            listener.enterEnvironmentDivision(this);
        }
    };
    // @Override
    EnvironmentDivisionContext.prototype.exitRule = function (listener) {
        if (listener.exitEnvironmentDivision) {
            listener.exitEnvironmentDivision(this);
        }
    };
    // @Override
    EnvironmentDivisionContext.prototype.accept = function (visitor) {
        if (visitor.visitEnvironmentDivision) {
            return visitor.visitEnvironmentDivision(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnvironmentDivisionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnvironmentDivisionContext = EnvironmentDivisionContext;
var EnvironmentDivisionBodyContext = /** @class */ (function (_super) {
    __extends(EnvironmentDivisionBodyContext, _super);
    function EnvironmentDivisionBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnvironmentDivisionBodyContext.prototype.configurationSection = function () {
        return this.tryGetRuleContext(0, ConfigurationSectionContext);
    };
    EnvironmentDivisionBodyContext.prototype.specialNamesParagraph = function () {
        return this.tryGetRuleContext(0, SpecialNamesParagraphContext);
    };
    EnvironmentDivisionBodyContext.prototype.inputOutputSection = function () {
        return this.tryGetRuleContext(0, InputOutputSectionContext);
    };
    Object.defineProperty(EnvironmentDivisionBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_environmentDivisionBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnvironmentDivisionBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterEnvironmentDivisionBody) {
            listener.enterEnvironmentDivisionBody(this);
        }
    };
    // @Override
    EnvironmentDivisionBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitEnvironmentDivisionBody) {
            listener.exitEnvironmentDivisionBody(this);
        }
    };
    // @Override
    EnvironmentDivisionBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitEnvironmentDivisionBody) {
            return visitor.visitEnvironmentDivisionBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnvironmentDivisionBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnvironmentDivisionBodyContext = EnvironmentDivisionBodyContext;
var ConfigurationSectionContext = /** @class */ (function (_super) {
    __extends(ConfigurationSectionContext, _super);
    function ConfigurationSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConfigurationSectionContext.prototype.CONFIGURATION = function () { return this.getToken(Cobol85Parser.CONFIGURATION, 0); };
    ConfigurationSectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    ConfigurationSectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ConfigurationSectionContext.prototype.configurationSectionParagraph = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ConfigurationSectionParagraphContext);
        }
        else {
            return this.getRuleContext(i, ConfigurationSectionParagraphContext);
        }
    };
    Object.defineProperty(ConfigurationSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_configurationSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConfigurationSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterConfigurationSection) {
            listener.enterConfigurationSection(this);
        }
    };
    // @Override
    ConfigurationSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitConfigurationSection) {
            listener.exitConfigurationSection(this);
        }
    };
    // @Override
    ConfigurationSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitConfigurationSection) {
            return visitor.visitConfigurationSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConfigurationSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConfigurationSectionContext = ConfigurationSectionContext;
var ConfigurationSectionParagraphContext = /** @class */ (function (_super) {
    __extends(ConfigurationSectionParagraphContext, _super);
    function ConfigurationSectionParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConfigurationSectionParagraphContext.prototype.sourceComputerParagraph = function () {
        return this.tryGetRuleContext(0, SourceComputerParagraphContext);
    };
    ConfigurationSectionParagraphContext.prototype.objectComputerParagraph = function () {
        return this.tryGetRuleContext(0, ObjectComputerParagraphContext);
    };
    ConfigurationSectionParagraphContext.prototype.specialNamesParagraph = function () {
        return this.tryGetRuleContext(0, SpecialNamesParagraphContext);
    };
    Object.defineProperty(ConfigurationSectionParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_configurationSectionParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConfigurationSectionParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterConfigurationSectionParagraph) {
            listener.enterConfigurationSectionParagraph(this);
        }
    };
    // @Override
    ConfigurationSectionParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitConfigurationSectionParagraph) {
            listener.exitConfigurationSectionParagraph(this);
        }
    };
    // @Override
    ConfigurationSectionParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitConfigurationSectionParagraph) {
            return visitor.visitConfigurationSectionParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConfigurationSectionParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConfigurationSectionParagraphContext = ConfigurationSectionParagraphContext;
var SourceComputerParagraphContext = /** @class */ (function (_super) {
    __extends(SourceComputerParagraphContext, _super);
    function SourceComputerParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SourceComputerParagraphContext.prototype.SOURCE_COMPUTER = function () { return this.getToken(Cobol85Parser.SOURCE_COMPUTER, 0); };
    SourceComputerParagraphContext.prototype.DOT_FS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DOT_FS);
        }
        else {
            return this.getToken(Cobol85Parser.DOT_FS, i);
        }
    };
    SourceComputerParagraphContext.prototype.computerName = function () {
        return this.getRuleContext(0, ComputerNameContext);
    };
    SourceComputerParagraphContext.prototype.DEBUGGING = function () { return this.tryGetToken(Cobol85Parser.DEBUGGING, 0); };
    SourceComputerParagraphContext.prototype.MODE = function () { return this.tryGetToken(Cobol85Parser.MODE, 0); };
    SourceComputerParagraphContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(SourceComputerParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sourceComputerParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SourceComputerParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterSourceComputerParagraph) {
            listener.enterSourceComputerParagraph(this);
        }
    };
    // @Override
    SourceComputerParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitSourceComputerParagraph) {
            listener.exitSourceComputerParagraph(this);
        }
    };
    // @Override
    SourceComputerParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitSourceComputerParagraph) {
            return visitor.visitSourceComputerParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SourceComputerParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SourceComputerParagraphContext = SourceComputerParagraphContext;
var ObjectComputerParagraphContext = /** @class */ (function (_super) {
    __extends(ObjectComputerParagraphContext, _super);
    function ObjectComputerParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ObjectComputerParagraphContext.prototype.OBJECT_COMPUTER = function () { return this.getToken(Cobol85Parser.OBJECT_COMPUTER, 0); };
    ObjectComputerParagraphContext.prototype.DOT_FS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DOT_FS);
        }
        else {
            return this.getToken(Cobol85Parser.DOT_FS, i);
        }
    };
    ObjectComputerParagraphContext.prototype.computerName = function () {
        return this.getRuleContext(0, ComputerNameContext);
    };
    ObjectComputerParagraphContext.prototype.objectComputerClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ObjectComputerClauseContext);
        }
        else {
            return this.getRuleContext(i, ObjectComputerClauseContext);
        }
    };
    Object.defineProperty(ObjectComputerParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_objectComputerParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ObjectComputerParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterObjectComputerParagraph) {
            listener.enterObjectComputerParagraph(this);
        }
    };
    // @Override
    ObjectComputerParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitObjectComputerParagraph) {
            listener.exitObjectComputerParagraph(this);
        }
    };
    // @Override
    ObjectComputerParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitObjectComputerParagraph) {
            return visitor.visitObjectComputerParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ObjectComputerParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ObjectComputerParagraphContext = ObjectComputerParagraphContext;
var ObjectComputerClauseContext = /** @class */ (function (_super) {
    __extends(ObjectComputerClauseContext, _super);
    function ObjectComputerClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ObjectComputerClauseContext.prototype.memorySizeClause = function () {
        return this.tryGetRuleContext(0, MemorySizeClauseContext);
    };
    ObjectComputerClauseContext.prototype.diskSizeClause = function () {
        return this.tryGetRuleContext(0, DiskSizeClauseContext);
    };
    ObjectComputerClauseContext.prototype.collatingSequenceClause = function () {
        return this.tryGetRuleContext(0, CollatingSequenceClauseContext);
    };
    ObjectComputerClauseContext.prototype.segmentLimitClause = function () {
        return this.tryGetRuleContext(0, SegmentLimitClauseContext);
    };
    ObjectComputerClauseContext.prototype.characterSetClause = function () {
        return this.tryGetRuleContext(0, CharacterSetClauseContext);
    };
    Object.defineProperty(ObjectComputerClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_objectComputerClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ObjectComputerClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterObjectComputerClause) {
            listener.enterObjectComputerClause(this);
        }
    };
    // @Override
    ObjectComputerClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitObjectComputerClause) {
            listener.exitObjectComputerClause(this);
        }
    };
    // @Override
    ObjectComputerClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitObjectComputerClause) {
            return visitor.visitObjectComputerClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ObjectComputerClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ObjectComputerClauseContext = ObjectComputerClauseContext;
var MemorySizeClauseContext = /** @class */ (function (_super) {
    __extends(MemorySizeClauseContext, _super);
    function MemorySizeClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MemorySizeClauseContext.prototype.MEMORY = function () { return this.getToken(Cobol85Parser.MEMORY, 0); };
    MemorySizeClauseContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    MemorySizeClauseContext.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    MemorySizeClauseContext.prototype.SIZE = function () { return this.tryGetToken(Cobol85Parser.SIZE, 0); };
    MemorySizeClauseContext.prototype.WORDS = function () { return this.tryGetToken(Cobol85Parser.WORDS, 0); };
    MemorySizeClauseContext.prototype.CHARACTERS = function () { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); };
    MemorySizeClauseContext.prototype.MODULES = function () { return this.tryGetToken(Cobol85Parser.MODULES, 0); };
    Object.defineProperty(MemorySizeClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_memorySizeClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MemorySizeClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterMemorySizeClause) {
            listener.enterMemorySizeClause(this);
        }
    };
    // @Override
    MemorySizeClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitMemorySizeClause) {
            listener.exitMemorySizeClause(this);
        }
    };
    // @Override
    MemorySizeClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitMemorySizeClause) {
            return visitor.visitMemorySizeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MemorySizeClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MemorySizeClauseContext = MemorySizeClauseContext;
var DiskSizeClauseContext = /** @class */ (function (_super) {
    __extends(DiskSizeClauseContext, _super);
    function DiskSizeClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DiskSizeClauseContext.prototype.DISK = function () { return this.getToken(Cobol85Parser.DISK, 0); };
    DiskSizeClauseContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    DiskSizeClauseContext.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    DiskSizeClauseContext.prototype.SIZE = function () { return this.tryGetToken(Cobol85Parser.SIZE, 0); };
    DiskSizeClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    DiskSizeClauseContext.prototype.WORDS = function () { return this.tryGetToken(Cobol85Parser.WORDS, 0); };
    DiskSizeClauseContext.prototype.MODULES = function () { return this.tryGetToken(Cobol85Parser.MODULES, 0); };
    Object.defineProperty(DiskSizeClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_diskSizeClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DiskSizeClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDiskSizeClause) {
            listener.enterDiskSizeClause(this);
        }
    };
    // @Override
    DiskSizeClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDiskSizeClause) {
            listener.exitDiskSizeClause(this);
        }
    };
    // @Override
    DiskSizeClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDiskSizeClause) {
            return visitor.visitDiskSizeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DiskSizeClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DiskSizeClauseContext = DiskSizeClauseContext;
var CollatingSequenceClauseContext = /** @class */ (function (_super) {
    __extends(CollatingSequenceClauseContext, _super);
    function CollatingSequenceClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CollatingSequenceClauseContext.prototype.SEQUENCE = function () { return this.getToken(Cobol85Parser.SEQUENCE, 0); };
    CollatingSequenceClauseContext.prototype.PROGRAM = function () { return this.tryGetToken(Cobol85Parser.PROGRAM, 0); };
    CollatingSequenceClauseContext.prototype.COLLATING = function () { return this.tryGetToken(Cobol85Parser.COLLATING, 0); };
    CollatingSequenceClauseContext.prototype.collatingSequenceClauseAlphanumeric = function () {
        return this.tryGetRuleContext(0, CollatingSequenceClauseAlphanumericContext);
    };
    CollatingSequenceClauseContext.prototype.collatingSequenceClauseNational = function () {
        return this.tryGetRuleContext(0, CollatingSequenceClauseNationalContext);
    };
    CollatingSequenceClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    CollatingSequenceClauseContext.prototype.alphabetName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AlphabetNameContext);
        }
        else {
            return this.getRuleContext(i, AlphabetNameContext);
        }
    };
    Object.defineProperty(CollatingSequenceClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_collatingSequenceClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CollatingSequenceClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterCollatingSequenceClause) {
            listener.enterCollatingSequenceClause(this);
        }
    };
    // @Override
    CollatingSequenceClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitCollatingSequenceClause) {
            listener.exitCollatingSequenceClause(this);
        }
    };
    // @Override
    CollatingSequenceClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitCollatingSequenceClause) {
            return visitor.visitCollatingSequenceClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CollatingSequenceClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CollatingSequenceClauseContext = CollatingSequenceClauseContext;
var CollatingSequenceClauseAlphanumericContext = /** @class */ (function (_super) {
    __extends(CollatingSequenceClauseAlphanumericContext, _super);
    function CollatingSequenceClauseAlphanumericContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CollatingSequenceClauseAlphanumericContext.prototype.ALPHANUMERIC = function () { return this.getToken(Cobol85Parser.ALPHANUMERIC, 0); };
    CollatingSequenceClauseAlphanumericContext.prototype.alphabetName = function () {
        return this.getRuleContext(0, AlphabetNameContext);
    };
    CollatingSequenceClauseAlphanumericContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    CollatingSequenceClauseAlphanumericContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(CollatingSequenceClauseAlphanumericContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_collatingSequenceClauseAlphanumeric; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CollatingSequenceClauseAlphanumericContext.prototype.enterRule = function (listener) {
        if (listener.enterCollatingSequenceClauseAlphanumeric) {
            listener.enterCollatingSequenceClauseAlphanumeric(this);
        }
    };
    // @Override
    CollatingSequenceClauseAlphanumericContext.prototype.exitRule = function (listener) {
        if (listener.exitCollatingSequenceClauseAlphanumeric) {
            listener.exitCollatingSequenceClauseAlphanumeric(this);
        }
    };
    // @Override
    CollatingSequenceClauseAlphanumericContext.prototype.accept = function (visitor) {
        if (visitor.visitCollatingSequenceClauseAlphanumeric) {
            return visitor.visitCollatingSequenceClauseAlphanumeric(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CollatingSequenceClauseAlphanumericContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CollatingSequenceClauseAlphanumericContext = CollatingSequenceClauseAlphanumericContext;
var CollatingSequenceClauseNationalContext = /** @class */ (function (_super) {
    __extends(CollatingSequenceClauseNationalContext, _super);
    function CollatingSequenceClauseNationalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CollatingSequenceClauseNationalContext.prototype.NATIONAL = function () { return this.getToken(Cobol85Parser.NATIONAL, 0); };
    CollatingSequenceClauseNationalContext.prototype.alphabetName = function () {
        return this.getRuleContext(0, AlphabetNameContext);
    };
    CollatingSequenceClauseNationalContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    CollatingSequenceClauseNationalContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(CollatingSequenceClauseNationalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_collatingSequenceClauseNational; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CollatingSequenceClauseNationalContext.prototype.enterRule = function (listener) {
        if (listener.enterCollatingSequenceClauseNational) {
            listener.enterCollatingSequenceClauseNational(this);
        }
    };
    // @Override
    CollatingSequenceClauseNationalContext.prototype.exitRule = function (listener) {
        if (listener.exitCollatingSequenceClauseNational) {
            listener.exitCollatingSequenceClauseNational(this);
        }
    };
    // @Override
    CollatingSequenceClauseNationalContext.prototype.accept = function (visitor) {
        if (visitor.visitCollatingSequenceClauseNational) {
            return visitor.visitCollatingSequenceClauseNational(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CollatingSequenceClauseNationalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CollatingSequenceClauseNationalContext = CollatingSequenceClauseNationalContext;
var SegmentLimitClauseContext = /** @class */ (function (_super) {
    __extends(SegmentLimitClauseContext, _super);
    function SegmentLimitClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SegmentLimitClauseContext.prototype.SEGMENT_LIMIT = function () { return this.getToken(Cobol85Parser.SEGMENT_LIMIT, 0); };
    SegmentLimitClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    SegmentLimitClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(SegmentLimitClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_segmentLimitClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SegmentLimitClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSegmentLimitClause) {
            listener.enterSegmentLimitClause(this);
        }
    };
    // @Override
    SegmentLimitClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSegmentLimitClause) {
            listener.exitSegmentLimitClause(this);
        }
    };
    // @Override
    SegmentLimitClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSegmentLimitClause) {
            return visitor.visitSegmentLimitClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SegmentLimitClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SegmentLimitClauseContext = SegmentLimitClauseContext;
var CharacterSetClauseContext = /** @class */ (function (_super) {
    __extends(CharacterSetClauseContext, _super);
    function CharacterSetClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CharacterSetClauseContext.prototype.CHARACTER = function () { return this.getToken(Cobol85Parser.CHARACTER, 0); };
    CharacterSetClauseContext.prototype.SET = function () { return this.getToken(Cobol85Parser.SET, 0); };
    CharacterSetClauseContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    Object.defineProperty(CharacterSetClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_characterSetClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CharacterSetClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterCharacterSetClause) {
            listener.enterCharacterSetClause(this);
        }
    };
    // @Override
    CharacterSetClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitCharacterSetClause) {
            listener.exitCharacterSetClause(this);
        }
    };
    // @Override
    CharacterSetClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitCharacterSetClause) {
            return visitor.visitCharacterSetClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CharacterSetClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CharacterSetClauseContext = CharacterSetClauseContext;
var SpecialNamesParagraphContext = /** @class */ (function (_super) {
    __extends(SpecialNamesParagraphContext, _super);
    function SpecialNamesParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SpecialNamesParagraphContext.prototype.SPECIAL_NAMES = function () { return this.getToken(Cobol85Parser.SPECIAL_NAMES, 0); };
    SpecialNamesParagraphContext.prototype.DOT_FS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DOT_FS);
        }
        else {
            return this.getToken(Cobol85Parser.DOT_FS, i);
        }
    };
    SpecialNamesParagraphContext.prototype.specialNameClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SpecialNameClauseContext);
        }
        else {
            return this.getRuleContext(i, SpecialNameClauseContext);
        }
    };
    Object.defineProperty(SpecialNamesParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_specialNamesParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SpecialNamesParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecialNamesParagraph) {
            listener.enterSpecialNamesParagraph(this);
        }
    };
    // @Override
    SpecialNamesParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecialNamesParagraph) {
            listener.exitSpecialNamesParagraph(this);
        }
    };
    // @Override
    SpecialNamesParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitSpecialNamesParagraph) {
            return visitor.visitSpecialNamesParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SpecialNamesParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SpecialNamesParagraphContext = SpecialNamesParagraphContext;
var SpecialNameClauseContext = /** @class */ (function (_super) {
    __extends(SpecialNameClauseContext, _super);
    function SpecialNameClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SpecialNameClauseContext.prototype.channelClause = function () {
        return this.tryGetRuleContext(0, ChannelClauseContext);
    };
    SpecialNameClauseContext.prototype.odtClause = function () {
        return this.tryGetRuleContext(0, OdtClauseContext);
    };
    SpecialNameClauseContext.prototype.alphabetClause = function () {
        return this.tryGetRuleContext(0, AlphabetClauseContext);
    };
    SpecialNameClauseContext.prototype.classClause = function () {
        return this.tryGetRuleContext(0, ClassClauseContext);
    };
    SpecialNameClauseContext.prototype.currencySignClause = function () {
        return this.tryGetRuleContext(0, CurrencySignClauseContext);
    };
    SpecialNameClauseContext.prototype.decimalPointClause = function () {
        return this.tryGetRuleContext(0, DecimalPointClauseContext);
    };
    SpecialNameClauseContext.prototype.symbolicCharactersClause = function () {
        return this.tryGetRuleContext(0, SymbolicCharactersClauseContext);
    };
    SpecialNameClauseContext.prototype.environmentSwitchNameClause = function () {
        return this.tryGetRuleContext(0, EnvironmentSwitchNameClauseContext);
    };
    SpecialNameClauseContext.prototype.defaultDisplaySignClause = function () {
        return this.tryGetRuleContext(0, DefaultDisplaySignClauseContext);
    };
    SpecialNameClauseContext.prototype.defaultComputationalSignClause = function () {
        return this.tryGetRuleContext(0, DefaultComputationalSignClauseContext);
    };
    SpecialNameClauseContext.prototype.reserveNetworkClause = function () {
        return this.tryGetRuleContext(0, ReserveNetworkClauseContext);
    };
    Object.defineProperty(SpecialNameClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_specialNameClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SpecialNameClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecialNameClause) {
            listener.enterSpecialNameClause(this);
        }
    };
    // @Override
    SpecialNameClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecialNameClause) {
            listener.exitSpecialNameClause(this);
        }
    };
    // @Override
    SpecialNameClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSpecialNameClause) {
            return visitor.visitSpecialNameClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SpecialNameClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SpecialNameClauseContext = SpecialNameClauseContext;
var AlphabetClauseContext = /** @class */ (function (_super) {
    __extends(AlphabetClauseContext, _super);
    function AlphabetClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlphabetClauseContext.prototype.alphabetClauseFormat1 = function () {
        return this.tryGetRuleContext(0, AlphabetClauseFormat1Context);
    };
    AlphabetClauseContext.prototype.alphabetClauseFormat2 = function () {
        return this.tryGetRuleContext(0, AlphabetClauseFormat2Context);
    };
    Object.defineProperty(AlphabetClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alphabetClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlphabetClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterAlphabetClause) {
            listener.enterAlphabetClause(this);
        }
    };
    // @Override
    AlphabetClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitAlphabetClause) {
            listener.exitAlphabetClause(this);
        }
    };
    // @Override
    AlphabetClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitAlphabetClause) {
            return visitor.visitAlphabetClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlphabetClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlphabetClauseContext = AlphabetClauseContext;
var AlphabetClauseFormat1Context = /** @class */ (function (_super) {
    __extends(AlphabetClauseFormat1Context, _super);
    function AlphabetClauseFormat1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlphabetClauseFormat1Context.prototype.ALPHABET = function () { return this.getToken(Cobol85Parser.ALPHABET, 0); };
    AlphabetClauseFormat1Context.prototype.alphabetName = function () {
        return this.getRuleContext(0, AlphabetNameContext);
    };
    AlphabetClauseFormat1Context.prototype.EBCDIC = function () { return this.tryGetToken(Cobol85Parser.EBCDIC, 0); };
    AlphabetClauseFormat1Context.prototype.ASCII = function () { return this.tryGetToken(Cobol85Parser.ASCII, 0); };
    AlphabetClauseFormat1Context.prototype.STANDARD_1 = function () { return this.tryGetToken(Cobol85Parser.STANDARD_1, 0); };
    AlphabetClauseFormat1Context.prototype.STANDARD_2 = function () { return this.tryGetToken(Cobol85Parser.STANDARD_2, 0); };
    AlphabetClauseFormat1Context.prototype.NATIVE = function () { return this.tryGetToken(Cobol85Parser.NATIVE, 0); };
    AlphabetClauseFormat1Context.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    AlphabetClauseFormat1Context.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    AlphabetClauseFormat1Context.prototype.ALPHANUMERIC = function () { return this.tryGetToken(Cobol85Parser.ALPHANUMERIC, 0); };
    AlphabetClauseFormat1Context.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    AlphabetClauseFormat1Context.prototype.alphabetLiterals = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AlphabetLiteralsContext);
        }
        else {
            return this.getRuleContext(i, AlphabetLiteralsContext);
        }
    };
    Object.defineProperty(AlphabetClauseFormat1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alphabetClauseFormat1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlphabetClauseFormat1Context.prototype.enterRule = function (listener) {
        if (listener.enterAlphabetClauseFormat1) {
            listener.enterAlphabetClauseFormat1(this);
        }
    };
    // @Override
    AlphabetClauseFormat1Context.prototype.exitRule = function (listener) {
        if (listener.exitAlphabetClauseFormat1) {
            listener.exitAlphabetClauseFormat1(this);
        }
    };
    // @Override
    AlphabetClauseFormat1Context.prototype.accept = function (visitor) {
        if (visitor.visitAlphabetClauseFormat1) {
            return visitor.visitAlphabetClauseFormat1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlphabetClauseFormat1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlphabetClauseFormat1Context = AlphabetClauseFormat1Context;
var AlphabetLiteralsContext = /** @class */ (function (_super) {
    __extends(AlphabetLiteralsContext, _super);
    function AlphabetLiteralsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlphabetLiteralsContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    AlphabetLiteralsContext.prototype.alphabetThrough = function () {
        return this.tryGetRuleContext(0, AlphabetThroughContext);
    };
    AlphabetLiteralsContext.prototype.alphabetAlso = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AlphabetAlsoContext);
        }
        else {
            return this.getRuleContext(i, AlphabetAlsoContext);
        }
    };
    Object.defineProperty(AlphabetLiteralsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alphabetLiterals; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlphabetLiteralsContext.prototype.enterRule = function (listener) {
        if (listener.enterAlphabetLiterals) {
            listener.enterAlphabetLiterals(this);
        }
    };
    // @Override
    AlphabetLiteralsContext.prototype.exitRule = function (listener) {
        if (listener.exitAlphabetLiterals) {
            listener.exitAlphabetLiterals(this);
        }
    };
    // @Override
    AlphabetLiteralsContext.prototype.accept = function (visitor) {
        if (visitor.visitAlphabetLiterals) {
            return visitor.visitAlphabetLiterals(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlphabetLiteralsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlphabetLiteralsContext = AlphabetLiteralsContext;
var AlphabetThroughContext = /** @class */ (function (_super) {
    __extends(AlphabetThroughContext, _super);
    function AlphabetThroughContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlphabetThroughContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    AlphabetThroughContext.prototype.THROUGH = function () { return this.tryGetToken(Cobol85Parser.THROUGH, 0); };
    AlphabetThroughContext.prototype.THRU = function () { return this.tryGetToken(Cobol85Parser.THRU, 0); };
    Object.defineProperty(AlphabetThroughContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alphabetThrough; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlphabetThroughContext.prototype.enterRule = function (listener) {
        if (listener.enterAlphabetThrough) {
            listener.enterAlphabetThrough(this);
        }
    };
    // @Override
    AlphabetThroughContext.prototype.exitRule = function (listener) {
        if (listener.exitAlphabetThrough) {
            listener.exitAlphabetThrough(this);
        }
    };
    // @Override
    AlphabetThroughContext.prototype.accept = function (visitor) {
        if (visitor.visitAlphabetThrough) {
            return visitor.visitAlphabetThrough(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlphabetThroughContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlphabetThroughContext = AlphabetThroughContext;
var AlphabetAlsoContext = /** @class */ (function (_super) {
    __extends(AlphabetAlsoContext, _super);
    function AlphabetAlsoContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlphabetAlsoContext.prototype.ALSO = function () { return this.getToken(Cobol85Parser.ALSO, 0); };
    AlphabetAlsoContext.prototype.literal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }
        else {
            return this.getRuleContext(i, LiteralContext);
        }
    };
    Object.defineProperty(AlphabetAlsoContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alphabetAlso; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlphabetAlsoContext.prototype.enterRule = function (listener) {
        if (listener.enterAlphabetAlso) {
            listener.enterAlphabetAlso(this);
        }
    };
    // @Override
    AlphabetAlsoContext.prototype.exitRule = function (listener) {
        if (listener.exitAlphabetAlso) {
            listener.exitAlphabetAlso(this);
        }
    };
    // @Override
    AlphabetAlsoContext.prototype.accept = function (visitor) {
        if (visitor.visitAlphabetAlso) {
            return visitor.visitAlphabetAlso(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlphabetAlsoContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlphabetAlsoContext = AlphabetAlsoContext;
var AlphabetClauseFormat2Context = /** @class */ (function (_super) {
    __extends(AlphabetClauseFormat2Context, _super);
    function AlphabetClauseFormat2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlphabetClauseFormat2Context.prototype.ALPHABET = function () { return this.getToken(Cobol85Parser.ALPHABET, 0); };
    AlphabetClauseFormat2Context.prototype.alphabetName = function () {
        return this.getRuleContext(0, AlphabetNameContext);
    };
    AlphabetClauseFormat2Context.prototype.NATIONAL = function () { return this.getToken(Cobol85Parser.NATIONAL, 0); };
    AlphabetClauseFormat2Context.prototype.NATIVE = function () { return this.tryGetToken(Cobol85Parser.NATIVE, 0); };
    AlphabetClauseFormat2Context.prototype.CCSVERSION = function () { return this.tryGetToken(Cobol85Parser.CCSVERSION, 0); };
    AlphabetClauseFormat2Context.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    AlphabetClauseFormat2Context.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    AlphabetClauseFormat2Context.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(AlphabetClauseFormat2Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alphabetClauseFormat2; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlphabetClauseFormat2Context.prototype.enterRule = function (listener) {
        if (listener.enterAlphabetClauseFormat2) {
            listener.enterAlphabetClauseFormat2(this);
        }
    };
    // @Override
    AlphabetClauseFormat2Context.prototype.exitRule = function (listener) {
        if (listener.exitAlphabetClauseFormat2) {
            listener.exitAlphabetClauseFormat2(this);
        }
    };
    // @Override
    AlphabetClauseFormat2Context.prototype.accept = function (visitor) {
        if (visitor.visitAlphabetClauseFormat2) {
            return visitor.visitAlphabetClauseFormat2(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlphabetClauseFormat2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlphabetClauseFormat2Context = AlphabetClauseFormat2Context;
var ChannelClauseContext = /** @class */ (function (_super) {
    __extends(ChannelClauseContext, _super);
    function ChannelClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ChannelClauseContext.prototype.CHANNEL = function () { return this.getToken(Cobol85Parser.CHANNEL, 0); };
    ChannelClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    ChannelClauseContext.prototype.mnemonicName = function () {
        return this.getRuleContext(0, MnemonicNameContext);
    };
    ChannelClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ChannelClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_channelClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ChannelClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterChannelClause) {
            listener.enterChannelClause(this);
        }
    };
    // @Override
    ChannelClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitChannelClause) {
            listener.exitChannelClause(this);
        }
    };
    // @Override
    ChannelClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitChannelClause) {
            return visitor.visitChannelClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ChannelClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ChannelClauseContext = ChannelClauseContext;
var ClassClauseContext = /** @class */ (function (_super) {
    __extends(ClassClauseContext, _super);
    function ClassClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassClauseContext.prototype.CLASS = function () { return this.getToken(Cobol85Parser.CLASS, 0); };
    ClassClauseContext.prototype.className = function () {
        return this.getRuleContext(0, ClassNameContext);
    };
    ClassClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    ClassClauseContext.prototype.classClauseThrough = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassClauseThroughContext);
        }
        else {
            return this.getRuleContext(i, ClassClauseThroughContext);
        }
    };
    ClassClauseContext.prototype.ALPHANUMERIC = function () { return this.tryGetToken(Cobol85Parser.ALPHANUMERIC, 0); };
    ClassClauseContext.prototype.NATIONAL = function () { return this.tryGetToken(Cobol85Parser.NATIONAL, 0); };
    ClassClauseContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    Object.defineProperty(ClassClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_classClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterClassClause) {
            listener.enterClassClause(this);
        }
    };
    // @Override
    ClassClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitClassClause) {
            listener.exitClassClause(this);
        }
    };
    // @Override
    ClassClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitClassClause) {
            return visitor.visitClassClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassClauseContext = ClassClauseContext;
var ClassClauseThroughContext = /** @class */ (function (_super) {
    __extends(ClassClauseThroughContext, _super);
    function ClassClauseThroughContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassClauseThroughContext.prototype.classClauseFrom = function () {
        return this.getRuleContext(0, ClassClauseFromContext);
    };
    ClassClauseThroughContext.prototype.classClauseTo = function () {
        return this.tryGetRuleContext(0, ClassClauseToContext);
    };
    ClassClauseThroughContext.prototype.THROUGH = function () { return this.tryGetToken(Cobol85Parser.THROUGH, 0); };
    ClassClauseThroughContext.prototype.THRU = function () { return this.tryGetToken(Cobol85Parser.THRU, 0); };
    Object.defineProperty(ClassClauseThroughContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_classClauseThrough; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassClauseThroughContext.prototype.enterRule = function (listener) {
        if (listener.enterClassClauseThrough) {
            listener.enterClassClauseThrough(this);
        }
    };
    // @Override
    ClassClauseThroughContext.prototype.exitRule = function (listener) {
        if (listener.exitClassClauseThrough) {
            listener.exitClassClauseThrough(this);
        }
    };
    // @Override
    ClassClauseThroughContext.prototype.accept = function (visitor) {
        if (visitor.visitClassClauseThrough) {
            return visitor.visitClassClauseThrough(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassClauseThroughContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassClauseThroughContext = ClassClauseThroughContext;
var ClassClauseFromContext = /** @class */ (function (_super) {
    __extends(ClassClauseFromContext, _super);
    function ClassClauseFromContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassClauseFromContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ClassClauseFromContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(ClassClauseFromContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_classClauseFrom; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassClauseFromContext.prototype.enterRule = function (listener) {
        if (listener.enterClassClauseFrom) {
            listener.enterClassClauseFrom(this);
        }
    };
    // @Override
    ClassClauseFromContext.prototype.exitRule = function (listener) {
        if (listener.exitClassClauseFrom) {
            listener.exitClassClauseFrom(this);
        }
    };
    // @Override
    ClassClauseFromContext.prototype.accept = function (visitor) {
        if (visitor.visitClassClauseFrom) {
            return visitor.visitClassClauseFrom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassClauseFromContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassClauseFromContext = ClassClauseFromContext;
var ClassClauseToContext = /** @class */ (function (_super) {
    __extends(ClassClauseToContext, _super);
    function ClassClauseToContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassClauseToContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ClassClauseToContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(ClassClauseToContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_classClauseTo; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassClauseToContext.prototype.enterRule = function (listener) {
        if (listener.enterClassClauseTo) {
            listener.enterClassClauseTo(this);
        }
    };
    // @Override
    ClassClauseToContext.prototype.exitRule = function (listener) {
        if (listener.exitClassClauseTo) {
            listener.exitClassClauseTo(this);
        }
    };
    // @Override
    ClassClauseToContext.prototype.accept = function (visitor) {
        if (visitor.visitClassClauseTo) {
            return visitor.visitClassClauseTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassClauseToContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassClauseToContext = ClassClauseToContext;
var CurrencySignClauseContext = /** @class */ (function (_super) {
    __extends(CurrencySignClauseContext, _super);
    function CurrencySignClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CurrencySignClauseContext.prototype.CURRENCY = function () { return this.getToken(Cobol85Parser.CURRENCY, 0); };
    CurrencySignClauseContext.prototype.literal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }
        else {
            return this.getRuleContext(i, LiteralContext);
        }
    };
    CurrencySignClauseContext.prototype.SIGN = function () { return this.tryGetToken(Cobol85Parser.SIGN, 0); };
    CurrencySignClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    CurrencySignClauseContext.prototype.PICTURE = function () { return this.tryGetToken(Cobol85Parser.PICTURE, 0); };
    CurrencySignClauseContext.prototype.SYMBOL = function () { return this.tryGetToken(Cobol85Parser.SYMBOL, 0); };
    CurrencySignClauseContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(CurrencySignClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_currencySignClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CurrencySignClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterCurrencySignClause) {
            listener.enterCurrencySignClause(this);
        }
    };
    // @Override
    CurrencySignClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitCurrencySignClause) {
            listener.exitCurrencySignClause(this);
        }
    };
    // @Override
    CurrencySignClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitCurrencySignClause) {
            return visitor.visitCurrencySignClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CurrencySignClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CurrencySignClauseContext = CurrencySignClauseContext;
var DecimalPointClauseContext = /** @class */ (function (_super) {
    __extends(DecimalPointClauseContext, _super);
    function DecimalPointClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DecimalPointClauseContext.prototype.DECIMAL_POINT = function () { return this.getToken(Cobol85Parser.DECIMAL_POINT, 0); };
    DecimalPointClauseContext.prototype.COMMA = function () { return this.getToken(Cobol85Parser.COMMA, 0); };
    DecimalPointClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(DecimalPointClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_decimalPointClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DecimalPointClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDecimalPointClause) {
            listener.enterDecimalPointClause(this);
        }
    };
    // @Override
    DecimalPointClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDecimalPointClause) {
            listener.exitDecimalPointClause(this);
        }
    };
    // @Override
    DecimalPointClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDecimalPointClause) {
            return visitor.visitDecimalPointClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DecimalPointClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DecimalPointClauseContext = DecimalPointClauseContext;
var DefaultComputationalSignClauseContext = /** @class */ (function (_super) {
    __extends(DefaultComputationalSignClauseContext, _super);
    function DefaultComputationalSignClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DefaultComputationalSignClauseContext.prototype.DEFAULT = function () { return this.getToken(Cobol85Parser.DEFAULT, 0); };
    DefaultComputationalSignClauseContext.prototype.SEPARATE = function () { return this.tryGetToken(Cobol85Parser.SEPARATE, 0); };
    DefaultComputationalSignClauseContext.prototype.SIGN = function () { return this.tryGetToken(Cobol85Parser.SIGN, 0); };
    DefaultComputationalSignClauseContext.prototype.COMPUTATIONAL = function () { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL, 0); };
    DefaultComputationalSignClauseContext.prototype.COMP = function () { return this.tryGetToken(Cobol85Parser.COMP, 0); };
    DefaultComputationalSignClauseContext.prototype.LEADING = function () { return this.tryGetToken(Cobol85Parser.LEADING, 0); };
    DefaultComputationalSignClauseContext.prototype.TRAILING = function () { return this.tryGetToken(Cobol85Parser.TRAILING, 0); };
    DefaultComputationalSignClauseContext.prototype.CHARACTER = function () { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); };
    DefaultComputationalSignClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(DefaultComputationalSignClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_defaultComputationalSignClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DefaultComputationalSignClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDefaultComputationalSignClause) {
            listener.enterDefaultComputationalSignClause(this);
        }
    };
    // @Override
    DefaultComputationalSignClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDefaultComputationalSignClause) {
            listener.exitDefaultComputationalSignClause(this);
        }
    };
    // @Override
    DefaultComputationalSignClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDefaultComputationalSignClause) {
            return visitor.visitDefaultComputationalSignClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DefaultComputationalSignClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DefaultComputationalSignClauseContext = DefaultComputationalSignClauseContext;
var DefaultDisplaySignClauseContext = /** @class */ (function (_super) {
    __extends(DefaultDisplaySignClauseContext, _super);
    function DefaultDisplaySignClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DefaultDisplaySignClauseContext.prototype.DEFAULT_DISPLAY = function () { return this.getToken(Cobol85Parser.DEFAULT_DISPLAY, 0); };
    DefaultDisplaySignClauseContext.prototype.LEADING = function () { return this.tryGetToken(Cobol85Parser.LEADING, 0); };
    DefaultDisplaySignClauseContext.prototype.TRAILING = function () { return this.tryGetToken(Cobol85Parser.TRAILING, 0); };
    DefaultDisplaySignClauseContext.prototype.SIGN = function () { return this.tryGetToken(Cobol85Parser.SIGN, 0); };
    DefaultDisplaySignClauseContext.prototype.SEPARATE = function () { return this.tryGetToken(Cobol85Parser.SEPARATE, 0); };
    DefaultDisplaySignClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    DefaultDisplaySignClauseContext.prototype.CHARACTER = function () { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); };
    Object.defineProperty(DefaultDisplaySignClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_defaultDisplaySignClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DefaultDisplaySignClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDefaultDisplaySignClause) {
            listener.enterDefaultDisplaySignClause(this);
        }
    };
    // @Override
    DefaultDisplaySignClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDefaultDisplaySignClause) {
            listener.exitDefaultDisplaySignClause(this);
        }
    };
    // @Override
    DefaultDisplaySignClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDefaultDisplaySignClause) {
            return visitor.visitDefaultDisplaySignClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DefaultDisplaySignClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DefaultDisplaySignClauseContext = DefaultDisplaySignClauseContext;
var EnvironmentSwitchNameClauseContext = /** @class */ (function (_super) {
    __extends(EnvironmentSwitchNameClauseContext, _super);
    function EnvironmentSwitchNameClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnvironmentSwitchNameClauseContext.prototype.environmentName = function () {
        return this.tryGetRuleContext(0, EnvironmentNameContext);
    };
    EnvironmentSwitchNameClauseContext.prototype.mnemonicName = function () {
        return this.tryGetRuleContext(0, MnemonicNameContext);
    };
    EnvironmentSwitchNameClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    EnvironmentSwitchNameClauseContext.prototype.environmentSwitchNameSpecialNamesStatusPhrase = function () {
        return this.tryGetRuleContext(0, EnvironmentSwitchNameSpecialNamesStatusPhraseContext);
    };
    Object.defineProperty(EnvironmentSwitchNameClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_environmentSwitchNameClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnvironmentSwitchNameClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterEnvironmentSwitchNameClause) {
            listener.enterEnvironmentSwitchNameClause(this);
        }
    };
    // @Override
    EnvironmentSwitchNameClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitEnvironmentSwitchNameClause) {
            listener.exitEnvironmentSwitchNameClause(this);
        }
    };
    // @Override
    EnvironmentSwitchNameClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitEnvironmentSwitchNameClause) {
            return visitor.visitEnvironmentSwitchNameClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnvironmentSwitchNameClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnvironmentSwitchNameClauseContext = EnvironmentSwitchNameClauseContext;
var EnvironmentSwitchNameSpecialNamesStatusPhraseContext = /** @class */ (function (_super) {
    __extends(EnvironmentSwitchNameSpecialNamesStatusPhraseContext, _super);
    function EnvironmentSwitchNameSpecialNamesStatusPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnvironmentSwitchNameSpecialNamesStatusPhraseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    EnvironmentSwitchNameSpecialNamesStatusPhraseContext.prototype.condition = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ConditionContext);
        }
        else {
            return this.getRuleContext(i, ConditionContext);
        }
    };
    EnvironmentSwitchNameSpecialNamesStatusPhraseContext.prototype.STATUS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.STATUS);
        }
        else {
            return this.getToken(Cobol85Parser.STATUS, i);
        }
    };
    EnvironmentSwitchNameSpecialNamesStatusPhraseContext.prototype.IS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.IS);
        }
        else {
            return this.getToken(Cobol85Parser.IS, i);
        }
    };
    EnvironmentSwitchNameSpecialNamesStatusPhraseContext.prototype.OFF = function () { return this.tryGetToken(Cobol85Parser.OFF, 0); };
    Object.defineProperty(EnvironmentSwitchNameSpecialNamesStatusPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_environmentSwitchNameSpecialNamesStatusPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnvironmentSwitchNameSpecialNamesStatusPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterEnvironmentSwitchNameSpecialNamesStatusPhrase) {
            listener.enterEnvironmentSwitchNameSpecialNamesStatusPhrase(this);
        }
    };
    // @Override
    EnvironmentSwitchNameSpecialNamesStatusPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitEnvironmentSwitchNameSpecialNamesStatusPhrase) {
            listener.exitEnvironmentSwitchNameSpecialNamesStatusPhrase(this);
        }
    };
    // @Override
    EnvironmentSwitchNameSpecialNamesStatusPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitEnvironmentSwitchNameSpecialNamesStatusPhrase) {
            return visitor.visitEnvironmentSwitchNameSpecialNamesStatusPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnvironmentSwitchNameSpecialNamesStatusPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnvironmentSwitchNameSpecialNamesStatusPhraseContext = EnvironmentSwitchNameSpecialNamesStatusPhraseContext;
var OdtClauseContext = /** @class */ (function (_super) {
    __extends(OdtClauseContext, _super);
    function OdtClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OdtClauseContext.prototype.ODT = function () { return this.getToken(Cobol85Parser.ODT, 0); };
    OdtClauseContext.prototype.mnemonicName = function () {
        return this.getRuleContext(0, MnemonicNameContext);
    };
    OdtClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(OdtClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_odtClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OdtClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterOdtClause) {
            listener.enterOdtClause(this);
        }
    };
    // @Override
    OdtClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitOdtClause) {
            listener.exitOdtClause(this);
        }
    };
    // @Override
    OdtClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitOdtClause) {
            return visitor.visitOdtClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OdtClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OdtClauseContext = OdtClauseContext;
var ReserveNetworkClauseContext = /** @class */ (function (_super) {
    __extends(ReserveNetworkClauseContext, _super);
    function ReserveNetworkClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReserveNetworkClauseContext.prototype.RESERVE = function () { return this.getToken(Cobol85Parser.RESERVE, 0); };
    ReserveNetworkClauseContext.prototype.NETWORK = function () { return this.getToken(Cobol85Parser.NETWORK, 0); };
    ReserveNetworkClauseContext.prototype.WORDS = function () { return this.tryGetToken(Cobol85Parser.WORDS, 0); };
    ReserveNetworkClauseContext.prototype.LIST = function () { return this.tryGetToken(Cobol85Parser.LIST, 0); };
    ReserveNetworkClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    ReserveNetworkClauseContext.prototype.CAPABLE = function () { return this.tryGetToken(Cobol85Parser.CAPABLE, 0); };
    Object.defineProperty(ReserveNetworkClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reserveNetworkClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReserveNetworkClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReserveNetworkClause) {
            listener.enterReserveNetworkClause(this);
        }
    };
    // @Override
    ReserveNetworkClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReserveNetworkClause) {
            listener.exitReserveNetworkClause(this);
        }
    };
    // @Override
    ReserveNetworkClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReserveNetworkClause) {
            return visitor.visitReserveNetworkClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReserveNetworkClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReserveNetworkClauseContext = ReserveNetworkClauseContext;
var SymbolicCharactersClauseContext = /** @class */ (function (_super) {
    __extends(SymbolicCharactersClauseContext, _super);
    function SymbolicCharactersClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SymbolicCharactersClauseContext.prototype.SYMBOLIC = function () { return this.getToken(Cobol85Parser.SYMBOLIC, 0); };
    SymbolicCharactersClauseContext.prototype.CHARACTERS = function () { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); };
    SymbolicCharactersClauseContext.prototype.symbolicCharacters = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SymbolicCharactersContext);
        }
        else {
            return this.getRuleContext(i, SymbolicCharactersContext);
        }
    };
    SymbolicCharactersClauseContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    SymbolicCharactersClauseContext.prototype.alphabetName = function () {
        return this.tryGetRuleContext(0, AlphabetNameContext);
    };
    SymbolicCharactersClauseContext.prototype.ALPHANUMERIC = function () { return this.tryGetToken(Cobol85Parser.ALPHANUMERIC, 0); };
    SymbolicCharactersClauseContext.prototype.NATIONAL = function () { return this.tryGetToken(Cobol85Parser.NATIONAL, 0); };
    SymbolicCharactersClauseContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    Object.defineProperty(SymbolicCharactersClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_symbolicCharactersClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SymbolicCharactersClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSymbolicCharactersClause) {
            listener.enterSymbolicCharactersClause(this);
        }
    };
    // @Override
    SymbolicCharactersClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSymbolicCharactersClause) {
            listener.exitSymbolicCharactersClause(this);
        }
    };
    // @Override
    SymbolicCharactersClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSymbolicCharactersClause) {
            return visitor.visitSymbolicCharactersClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SymbolicCharactersClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SymbolicCharactersClauseContext = SymbolicCharactersClauseContext;
var SymbolicCharactersContext = /** @class */ (function (_super) {
    __extends(SymbolicCharactersContext, _super);
    function SymbolicCharactersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SymbolicCharactersContext.prototype.symbolicCharacter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SymbolicCharacterContext);
        }
        else {
            return this.getRuleContext(i, SymbolicCharacterContext);
        }
    };
    SymbolicCharactersContext.prototype.integerLiteral = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IntegerLiteralContext);
        }
        else {
            return this.getRuleContext(i, IntegerLiteralContext);
        }
    };
    SymbolicCharactersContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    SymbolicCharactersContext.prototype.ARE = function () { return this.tryGetToken(Cobol85Parser.ARE, 0); };
    Object.defineProperty(SymbolicCharactersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_symbolicCharacters; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SymbolicCharactersContext.prototype.enterRule = function (listener) {
        if (listener.enterSymbolicCharacters) {
            listener.enterSymbolicCharacters(this);
        }
    };
    // @Override
    SymbolicCharactersContext.prototype.exitRule = function (listener) {
        if (listener.exitSymbolicCharacters) {
            listener.exitSymbolicCharacters(this);
        }
    };
    // @Override
    SymbolicCharactersContext.prototype.accept = function (visitor) {
        if (visitor.visitSymbolicCharacters) {
            return visitor.visitSymbolicCharacters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SymbolicCharactersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SymbolicCharactersContext = SymbolicCharactersContext;
var InputOutputSectionContext = /** @class */ (function (_super) {
    __extends(InputOutputSectionContext, _super);
    function InputOutputSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InputOutputSectionContext.prototype.INPUT_OUTPUT = function () { return this.getToken(Cobol85Parser.INPUT_OUTPUT, 0); };
    InputOutputSectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    InputOutputSectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    InputOutputSectionContext.prototype.inputOutputSectionParagraph = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InputOutputSectionParagraphContext);
        }
        else {
            return this.getRuleContext(i, InputOutputSectionParagraphContext);
        }
    };
    Object.defineProperty(InputOutputSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inputOutputSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InputOutputSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterInputOutputSection) {
            listener.enterInputOutputSection(this);
        }
    };
    // @Override
    InputOutputSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitInputOutputSection) {
            listener.exitInputOutputSection(this);
        }
    };
    // @Override
    InputOutputSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitInputOutputSection) {
            return visitor.visitInputOutputSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InputOutputSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InputOutputSectionContext = InputOutputSectionContext;
var InputOutputSectionParagraphContext = /** @class */ (function (_super) {
    __extends(InputOutputSectionParagraphContext, _super);
    function InputOutputSectionParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InputOutputSectionParagraphContext.prototype.fileControlParagraph = function () {
        return this.tryGetRuleContext(0, FileControlParagraphContext);
    };
    InputOutputSectionParagraphContext.prototype.ioControlParagraph = function () {
        return this.tryGetRuleContext(0, IoControlParagraphContext);
    };
    Object.defineProperty(InputOutputSectionParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inputOutputSectionParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InputOutputSectionParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterInputOutputSectionParagraph) {
            listener.enterInputOutputSectionParagraph(this);
        }
    };
    // @Override
    InputOutputSectionParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitInputOutputSectionParagraph) {
            listener.exitInputOutputSectionParagraph(this);
        }
    };
    // @Override
    InputOutputSectionParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitInputOutputSectionParagraph) {
            return visitor.visitInputOutputSectionParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InputOutputSectionParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InputOutputSectionParagraphContext = InputOutputSectionParagraphContext;
var FileControlParagraphContext = /** @class */ (function (_super) {
    __extends(FileControlParagraphContext, _super);
    function FileControlParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FileControlParagraphContext.prototype.FILE_CONTROL = function () { return this.getToken(Cobol85Parser.FILE_CONTROL, 0); };
    FileControlParagraphContext.prototype.DOT_FS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DOT_FS);
        }
        else {
            return this.getToken(Cobol85Parser.DOT_FS, i);
        }
    };
    FileControlParagraphContext.prototype.fileControlEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileControlEntryContext);
        }
        else {
            return this.getRuleContext(i, FileControlEntryContext);
        }
    };
    Object.defineProperty(FileControlParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_fileControlParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FileControlParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterFileControlParagraph) {
            listener.enterFileControlParagraph(this);
        }
    };
    // @Override
    FileControlParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitFileControlParagraph) {
            listener.exitFileControlParagraph(this);
        }
    };
    // @Override
    FileControlParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitFileControlParagraph) {
            return visitor.visitFileControlParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FileControlParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FileControlParagraphContext = FileControlParagraphContext;
var FileControlEntryContext = /** @class */ (function (_super) {
    __extends(FileControlEntryContext, _super);
    function FileControlEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FileControlEntryContext.prototype.selectClause = function () {
        return this.getRuleContext(0, SelectClauseContext);
    };
    FileControlEntryContext.prototype.fileControlClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileControlClauseContext);
        }
        else {
            return this.getRuleContext(i, FileControlClauseContext);
        }
    };
    Object.defineProperty(FileControlEntryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_fileControlEntry; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FileControlEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterFileControlEntry) {
            listener.enterFileControlEntry(this);
        }
    };
    // @Override
    FileControlEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitFileControlEntry) {
            listener.exitFileControlEntry(this);
        }
    };
    // @Override
    FileControlEntryContext.prototype.accept = function (visitor) {
        if (visitor.visitFileControlEntry) {
            return visitor.visitFileControlEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FileControlEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FileControlEntryContext = FileControlEntryContext;
var SelectClauseContext = /** @class */ (function (_super) {
    __extends(SelectClauseContext, _super);
    function SelectClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SelectClauseContext.prototype.SELECT = function () { return this.getToken(Cobol85Parser.SELECT, 0); };
    SelectClauseContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    SelectClauseContext.prototype.OPTIONAL = function () { return this.tryGetToken(Cobol85Parser.OPTIONAL, 0); };
    Object.defineProperty(SelectClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_selectClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SelectClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSelectClause) {
            listener.enterSelectClause(this);
        }
    };
    // @Override
    SelectClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSelectClause) {
            listener.exitSelectClause(this);
        }
    };
    // @Override
    SelectClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SelectClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SelectClauseContext = SelectClauseContext;
var FileControlClauseContext = /** @class */ (function (_super) {
    __extends(FileControlClauseContext, _super);
    function FileControlClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FileControlClauseContext.prototype.assignClause = function () {
        return this.tryGetRuleContext(0, AssignClauseContext);
    };
    FileControlClauseContext.prototype.reserveClause = function () {
        return this.tryGetRuleContext(0, ReserveClauseContext);
    };
    FileControlClauseContext.prototype.organizationClause = function () {
        return this.tryGetRuleContext(0, OrganizationClauseContext);
    };
    FileControlClauseContext.prototype.paddingCharacterClause = function () {
        return this.tryGetRuleContext(0, PaddingCharacterClauseContext);
    };
    FileControlClauseContext.prototype.recordDelimiterClause = function () {
        return this.tryGetRuleContext(0, RecordDelimiterClauseContext);
    };
    FileControlClauseContext.prototype.accessModeClause = function () {
        return this.tryGetRuleContext(0, AccessModeClauseContext);
    };
    FileControlClauseContext.prototype.recordKeyClause = function () {
        return this.tryGetRuleContext(0, RecordKeyClauseContext);
    };
    FileControlClauseContext.prototype.alternateRecordKeyClause = function () {
        return this.tryGetRuleContext(0, AlternateRecordKeyClauseContext);
    };
    FileControlClauseContext.prototype.fileStatusClause = function () {
        return this.tryGetRuleContext(0, FileStatusClauseContext);
    };
    FileControlClauseContext.prototype.passwordClause = function () {
        return this.tryGetRuleContext(0, PasswordClauseContext);
    };
    FileControlClauseContext.prototype.relativeKeyClause = function () {
        return this.tryGetRuleContext(0, RelativeKeyClauseContext);
    };
    Object.defineProperty(FileControlClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_fileControlClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FileControlClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterFileControlClause) {
            listener.enterFileControlClause(this);
        }
    };
    // @Override
    FileControlClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitFileControlClause) {
            listener.exitFileControlClause(this);
        }
    };
    // @Override
    FileControlClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitFileControlClause) {
            return visitor.visitFileControlClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FileControlClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FileControlClauseContext = FileControlClauseContext;
var AssignClauseContext = /** @class */ (function (_super) {
    __extends(AssignClauseContext, _super);
    function AssignClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AssignClauseContext.prototype.ASSIGN = function () { return this.getToken(Cobol85Parser.ASSIGN, 0); };
    AssignClauseContext.prototype.DISK = function () { return this.tryGetToken(Cobol85Parser.DISK, 0); };
    AssignClauseContext.prototype.DISPLAY = function () { return this.tryGetToken(Cobol85Parser.DISPLAY, 0); };
    AssignClauseContext.prototype.KEYBOARD = function () { return this.tryGetToken(Cobol85Parser.KEYBOARD, 0); };
    AssignClauseContext.prototype.PORT = function () { return this.tryGetToken(Cobol85Parser.PORT, 0); };
    AssignClauseContext.prototype.PRINTER = function () { return this.tryGetToken(Cobol85Parser.PRINTER, 0); };
    AssignClauseContext.prototype.READER = function () { return this.tryGetToken(Cobol85Parser.READER, 0); };
    AssignClauseContext.prototype.REMOTE = function () { return this.tryGetToken(Cobol85Parser.REMOTE, 0); };
    AssignClauseContext.prototype.TAPE = function () { return this.tryGetToken(Cobol85Parser.TAPE, 0); };
    AssignClauseContext.prototype.VIRTUAL = function () { return this.tryGetToken(Cobol85Parser.VIRTUAL, 0); };
    AssignClauseContext.prototype.assignmentName = function () {
        return this.tryGetRuleContext(0, AssignmentNameContext);
    };
    AssignClauseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    AssignClauseContext.prototype.TO = function () { return this.tryGetToken(Cobol85Parser.TO, 0); };
    Object.defineProperty(AssignClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_assignClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AssignClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterAssignClause) {
            listener.enterAssignClause(this);
        }
    };
    // @Override
    AssignClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitAssignClause) {
            listener.exitAssignClause(this);
        }
    };
    // @Override
    AssignClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitAssignClause) {
            return visitor.visitAssignClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AssignClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AssignClauseContext = AssignClauseContext;
var ReserveClauseContext = /** @class */ (function (_super) {
    __extends(ReserveClauseContext, _super);
    function ReserveClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReserveClauseContext.prototype.RESERVE = function () { return this.getToken(Cobol85Parser.RESERVE, 0); };
    ReserveClauseContext.prototype.NO = function () { return this.tryGetToken(Cobol85Parser.NO, 0); };
    ReserveClauseContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    ReserveClauseContext.prototype.ALTERNATE = function () { return this.tryGetToken(Cobol85Parser.ALTERNATE, 0); };
    ReserveClauseContext.prototype.AREA = function () { return this.tryGetToken(Cobol85Parser.AREA, 0); };
    ReserveClauseContext.prototype.AREAS = function () { return this.tryGetToken(Cobol85Parser.AREAS, 0); };
    Object.defineProperty(ReserveClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reserveClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReserveClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReserveClause) {
            listener.enterReserveClause(this);
        }
    };
    // @Override
    ReserveClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReserveClause) {
            listener.exitReserveClause(this);
        }
    };
    // @Override
    ReserveClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReserveClause) {
            return visitor.visitReserveClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReserveClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReserveClauseContext = ReserveClauseContext;
var OrganizationClauseContext = /** @class */ (function (_super) {
    __extends(OrganizationClauseContext, _super);
    function OrganizationClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OrganizationClauseContext.prototype.SEQUENTIAL = function () { return this.tryGetToken(Cobol85Parser.SEQUENTIAL, 0); };
    OrganizationClauseContext.prototype.RELATIVE = function () { return this.tryGetToken(Cobol85Parser.RELATIVE, 0); };
    OrganizationClauseContext.prototype.INDEXED = function () { return this.tryGetToken(Cobol85Parser.INDEXED, 0); };
    OrganizationClauseContext.prototype.ORGANIZATION = function () { return this.tryGetToken(Cobol85Parser.ORGANIZATION, 0); };
    OrganizationClauseContext.prototype.LINE = function () { return this.tryGetToken(Cobol85Parser.LINE, 0); };
    OrganizationClauseContext.prototype.RECORD = function () { return this.tryGetToken(Cobol85Parser.RECORD, 0); };
    OrganizationClauseContext.prototype.BINARY = function () { return this.tryGetToken(Cobol85Parser.BINARY, 0); };
    OrganizationClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(OrganizationClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_organizationClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OrganizationClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterOrganizationClause) {
            listener.enterOrganizationClause(this);
        }
    };
    // @Override
    OrganizationClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitOrganizationClause) {
            listener.exitOrganizationClause(this);
        }
    };
    // @Override
    OrganizationClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitOrganizationClause) {
            return visitor.visitOrganizationClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OrganizationClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OrganizationClauseContext = OrganizationClauseContext;
var PaddingCharacterClauseContext = /** @class */ (function (_super) {
    __extends(PaddingCharacterClauseContext, _super);
    function PaddingCharacterClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PaddingCharacterClauseContext.prototype.PADDING = function () { return this.getToken(Cobol85Parser.PADDING, 0); };
    PaddingCharacterClauseContext.prototype.qualifiedDataName = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameContext);
    };
    PaddingCharacterClauseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    PaddingCharacterClauseContext.prototype.CHARACTER = function () { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); };
    PaddingCharacterClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(PaddingCharacterClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_paddingCharacterClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PaddingCharacterClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterPaddingCharacterClause) {
            listener.enterPaddingCharacterClause(this);
        }
    };
    // @Override
    PaddingCharacterClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitPaddingCharacterClause) {
            listener.exitPaddingCharacterClause(this);
        }
    };
    // @Override
    PaddingCharacterClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitPaddingCharacterClause) {
            return visitor.visitPaddingCharacterClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PaddingCharacterClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PaddingCharacterClauseContext = PaddingCharacterClauseContext;
var RecordDelimiterClauseContext = /** @class */ (function (_super) {
    __extends(RecordDelimiterClauseContext, _super);
    function RecordDelimiterClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RecordDelimiterClauseContext.prototype.RECORD = function () { return this.getToken(Cobol85Parser.RECORD, 0); };
    RecordDelimiterClauseContext.prototype.DELIMITER = function () { return this.getToken(Cobol85Parser.DELIMITER, 0); };
    RecordDelimiterClauseContext.prototype.STANDARD_1 = function () { return this.tryGetToken(Cobol85Parser.STANDARD_1, 0); };
    RecordDelimiterClauseContext.prototype.IMPLICIT = function () { return this.tryGetToken(Cobol85Parser.IMPLICIT, 0); };
    RecordDelimiterClauseContext.prototype.assignmentName = function () {
        return this.tryGetRuleContext(0, AssignmentNameContext);
    };
    RecordDelimiterClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(RecordDelimiterClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_recordDelimiterClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RecordDelimiterClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterRecordDelimiterClause) {
            listener.enterRecordDelimiterClause(this);
        }
    };
    // @Override
    RecordDelimiterClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitRecordDelimiterClause) {
            listener.exitRecordDelimiterClause(this);
        }
    };
    // @Override
    RecordDelimiterClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitRecordDelimiterClause) {
            return visitor.visitRecordDelimiterClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RecordDelimiterClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RecordDelimiterClauseContext = RecordDelimiterClauseContext;
var AccessModeClauseContext = /** @class */ (function (_super) {
    __extends(AccessModeClauseContext, _super);
    function AccessModeClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AccessModeClauseContext.prototype.ACCESS = function () { return this.getToken(Cobol85Parser.ACCESS, 0); };
    AccessModeClauseContext.prototype.SEQUENTIAL = function () { return this.tryGetToken(Cobol85Parser.SEQUENTIAL, 0); };
    AccessModeClauseContext.prototype.RANDOM = function () { return this.tryGetToken(Cobol85Parser.RANDOM, 0); };
    AccessModeClauseContext.prototype.DYNAMIC = function () { return this.tryGetToken(Cobol85Parser.DYNAMIC, 0); };
    AccessModeClauseContext.prototype.EXCLUSIVE = function () { return this.tryGetToken(Cobol85Parser.EXCLUSIVE, 0); };
    AccessModeClauseContext.prototype.MODE = function () { return this.tryGetToken(Cobol85Parser.MODE, 0); };
    AccessModeClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(AccessModeClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_accessModeClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AccessModeClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterAccessModeClause) {
            listener.enterAccessModeClause(this);
        }
    };
    // @Override
    AccessModeClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitAccessModeClause) {
            listener.exitAccessModeClause(this);
        }
    };
    // @Override
    AccessModeClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitAccessModeClause) {
            return visitor.visitAccessModeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AccessModeClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AccessModeClauseContext = AccessModeClauseContext;
var RecordKeyClauseContext = /** @class */ (function (_super) {
    __extends(RecordKeyClauseContext, _super);
    function RecordKeyClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RecordKeyClauseContext.prototype.RECORD = function () { return this.getToken(Cobol85Parser.RECORD, 0); };
    RecordKeyClauseContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    RecordKeyClauseContext.prototype.KEY = function () { return this.tryGetToken(Cobol85Parser.KEY, 0); };
    RecordKeyClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    RecordKeyClauseContext.prototype.passwordClause = function () {
        return this.tryGetRuleContext(0, PasswordClauseContext);
    };
    RecordKeyClauseContext.prototype.DUPLICATES = function () { return this.tryGetToken(Cobol85Parser.DUPLICATES, 0); };
    RecordKeyClauseContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(RecordKeyClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_recordKeyClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RecordKeyClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterRecordKeyClause) {
            listener.enterRecordKeyClause(this);
        }
    };
    // @Override
    RecordKeyClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitRecordKeyClause) {
            listener.exitRecordKeyClause(this);
        }
    };
    // @Override
    RecordKeyClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitRecordKeyClause) {
            return visitor.visitRecordKeyClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RecordKeyClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RecordKeyClauseContext = RecordKeyClauseContext;
var AlternateRecordKeyClauseContext = /** @class */ (function (_super) {
    __extends(AlternateRecordKeyClauseContext, _super);
    function AlternateRecordKeyClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlternateRecordKeyClauseContext.prototype.ALTERNATE = function () { return this.getToken(Cobol85Parser.ALTERNATE, 0); };
    AlternateRecordKeyClauseContext.prototype.RECORD = function () { return this.getToken(Cobol85Parser.RECORD, 0); };
    AlternateRecordKeyClauseContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    AlternateRecordKeyClauseContext.prototype.KEY = function () { return this.tryGetToken(Cobol85Parser.KEY, 0); };
    AlternateRecordKeyClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    AlternateRecordKeyClauseContext.prototype.passwordClause = function () {
        return this.tryGetRuleContext(0, PasswordClauseContext);
    };
    AlternateRecordKeyClauseContext.prototype.DUPLICATES = function () { return this.tryGetToken(Cobol85Parser.DUPLICATES, 0); };
    AlternateRecordKeyClauseContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(AlternateRecordKeyClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alternateRecordKeyClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlternateRecordKeyClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterAlternateRecordKeyClause) {
            listener.enterAlternateRecordKeyClause(this);
        }
    };
    // @Override
    AlternateRecordKeyClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitAlternateRecordKeyClause) {
            listener.exitAlternateRecordKeyClause(this);
        }
    };
    // @Override
    AlternateRecordKeyClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitAlternateRecordKeyClause) {
            return visitor.visitAlternateRecordKeyClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlternateRecordKeyClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlternateRecordKeyClauseContext = AlternateRecordKeyClauseContext;
var PasswordClauseContext = /** @class */ (function (_super) {
    __extends(PasswordClauseContext, _super);
    function PasswordClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PasswordClauseContext.prototype.PASSWORD = function () { return this.getToken(Cobol85Parser.PASSWORD, 0); };
    PasswordClauseContext.prototype.dataName = function () {
        return this.getRuleContext(0, DataNameContext);
    };
    PasswordClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(PasswordClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_passwordClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PasswordClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterPasswordClause) {
            listener.enterPasswordClause(this);
        }
    };
    // @Override
    PasswordClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitPasswordClause) {
            listener.exitPasswordClause(this);
        }
    };
    // @Override
    PasswordClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitPasswordClause) {
            return visitor.visitPasswordClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PasswordClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PasswordClauseContext = PasswordClauseContext;
var FileStatusClauseContext = /** @class */ (function (_super) {
    __extends(FileStatusClauseContext, _super);
    function FileStatusClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FileStatusClauseContext.prototype.STATUS = function () { return this.getToken(Cobol85Parser.STATUS, 0); };
    FileStatusClauseContext.prototype.qualifiedDataName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedDataNameContext);
        }
        else {
            return this.getRuleContext(i, QualifiedDataNameContext);
        }
    };
    FileStatusClauseContext.prototype.FILE = function () { return this.tryGetToken(Cobol85Parser.FILE, 0); };
    FileStatusClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(FileStatusClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_fileStatusClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FileStatusClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterFileStatusClause) {
            listener.enterFileStatusClause(this);
        }
    };
    // @Override
    FileStatusClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitFileStatusClause) {
            listener.exitFileStatusClause(this);
        }
    };
    // @Override
    FileStatusClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitFileStatusClause) {
            return visitor.visitFileStatusClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FileStatusClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FileStatusClauseContext = FileStatusClauseContext;
var RelativeKeyClauseContext = /** @class */ (function (_super) {
    __extends(RelativeKeyClauseContext, _super);
    function RelativeKeyClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RelativeKeyClauseContext.prototype.RELATIVE = function () { return this.getToken(Cobol85Parser.RELATIVE, 0); };
    RelativeKeyClauseContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    RelativeKeyClauseContext.prototype.KEY = function () { return this.tryGetToken(Cobol85Parser.KEY, 0); };
    RelativeKeyClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(RelativeKeyClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_relativeKeyClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RelativeKeyClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterRelativeKeyClause) {
            listener.enterRelativeKeyClause(this);
        }
    };
    // @Override
    RelativeKeyClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitRelativeKeyClause) {
            listener.exitRelativeKeyClause(this);
        }
    };
    // @Override
    RelativeKeyClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitRelativeKeyClause) {
            return visitor.visitRelativeKeyClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RelativeKeyClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RelativeKeyClauseContext = RelativeKeyClauseContext;
var IoControlParagraphContext = /** @class */ (function (_super) {
    __extends(IoControlParagraphContext, _super);
    function IoControlParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IoControlParagraphContext.prototype.I_O_CONTROL = function () { return this.getToken(Cobol85Parser.I_O_CONTROL, 0); };
    IoControlParagraphContext.prototype.DOT_FS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DOT_FS);
        }
        else {
            return this.getToken(Cobol85Parser.DOT_FS, i);
        }
    };
    IoControlParagraphContext.prototype.fileName = function () {
        return this.tryGetRuleContext(0, FileNameContext);
    };
    IoControlParagraphContext.prototype.ioControlClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IoControlClauseContext);
        }
        else {
            return this.getRuleContext(i, IoControlClauseContext);
        }
    };
    Object.defineProperty(IoControlParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_ioControlParagraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IoControlParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterIoControlParagraph) {
            listener.enterIoControlParagraph(this);
        }
    };
    // @Override
    IoControlParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitIoControlParagraph) {
            listener.exitIoControlParagraph(this);
        }
    };
    // @Override
    IoControlParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitIoControlParagraph) {
            return visitor.visitIoControlParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IoControlParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IoControlParagraphContext = IoControlParagraphContext;
var IoControlClauseContext = /** @class */ (function (_super) {
    __extends(IoControlClauseContext, _super);
    function IoControlClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IoControlClauseContext.prototype.rerunClause = function () {
        return this.tryGetRuleContext(0, RerunClauseContext);
    };
    IoControlClauseContext.prototype.sameClause = function () {
        return this.tryGetRuleContext(0, SameClauseContext);
    };
    IoControlClauseContext.prototype.multipleFileClause = function () {
        return this.tryGetRuleContext(0, MultipleFileClauseContext);
    };
    IoControlClauseContext.prototype.commitmentControlClause = function () {
        return this.tryGetRuleContext(0, CommitmentControlClauseContext);
    };
    Object.defineProperty(IoControlClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_ioControlClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IoControlClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterIoControlClause) {
            listener.enterIoControlClause(this);
        }
    };
    // @Override
    IoControlClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitIoControlClause) {
            listener.exitIoControlClause(this);
        }
    };
    // @Override
    IoControlClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitIoControlClause) {
            return visitor.visitIoControlClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IoControlClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IoControlClauseContext = IoControlClauseContext;
var RerunClauseContext = /** @class */ (function (_super) {
    __extends(RerunClauseContext, _super);
    function RerunClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RerunClauseContext.prototype.RERUN = function () { return this.getToken(Cobol85Parser.RERUN, 0); };
    RerunClauseContext.prototype.EVERY = function () { return this.getToken(Cobol85Parser.EVERY, 0); };
    RerunClauseContext.prototype.rerunEveryRecords = function () {
        return this.tryGetRuleContext(0, RerunEveryRecordsContext);
    };
    RerunClauseContext.prototype.rerunEveryOf = function () {
        return this.tryGetRuleContext(0, RerunEveryOfContext);
    };
    RerunClauseContext.prototype.rerunEveryClock = function () {
        return this.tryGetRuleContext(0, RerunEveryClockContext);
    };
    RerunClauseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    RerunClauseContext.prototype.assignmentName = function () {
        return this.tryGetRuleContext(0, AssignmentNameContext);
    };
    RerunClauseContext.prototype.fileName = function () {
        return this.tryGetRuleContext(0, FileNameContext);
    };
    Object.defineProperty(RerunClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_rerunClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RerunClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterRerunClause) {
            listener.enterRerunClause(this);
        }
    };
    // @Override
    RerunClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitRerunClause) {
            listener.exitRerunClause(this);
        }
    };
    // @Override
    RerunClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitRerunClause) {
            return visitor.visitRerunClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RerunClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RerunClauseContext = RerunClauseContext;
var RerunEveryRecordsContext = /** @class */ (function (_super) {
    __extends(RerunEveryRecordsContext, _super);
    function RerunEveryRecordsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RerunEveryRecordsContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    RerunEveryRecordsContext.prototype.RECORDS = function () { return this.getToken(Cobol85Parser.RECORDS, 0); };
    Object.defineProperty(RerunEveryRecordsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_rerunEveryRecords; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RerunEveryRecordsContext.prototype.enterRule = function (listener) {
        if (listener.enterRerunEveryRecords) {
            listener.enterRerunEveryRecords(this);
        }
    };
    // @Override
    RerunEveryRecordsContext.prototype.exitRule = function (listener) {
        if (listener.exitRerunEveryRecords) {
            listener.exitRerunEveryRecords(this);
        }
    };
    // @Override
    RerunEveryRecordsContext.prototype.accept = function (visitor) {
        if (visitor.visitRerunEveryRecords) {
            return visitor.visitRerunEveryRecords(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RerunEveryRecordsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RerunEveryRecordsContext = RerunEveryRecordsContext;
var RerunEveryOfContext = /** @class */ (function (_super) {
    __extends(RerunEveryOfContext, _super);
    function RerunEveryOfContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RerunEveryOfContext.prototype.OF = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.OF);
        }
        else {
            return this.getToken(Cobol85Parser.OF, i);
        }
    };
    RerunEveryOfContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    RerunEveryOfContext.prototype.REEL = function () { return this.tryGetToken(Cobol85Parser.REEL, 0); };
    RerunEveryOfContext.prototype.UNIT = function () { return this.tryGetToken(Cobol85Parser.UNIT, 0); };
    RerunEveryOfContext.prototype.END = function () { return this.tryGetToken(Cobol85Parser.END, 0); };
    Object.defineProperty(RerunEveryOfContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_rerunEveryOf; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RerunEveryOfContext.prototype.enterRule = function (listener) {
        if (listener.enterRerunEveryOf) {
            listener.enterRerunEveryOf(this);
        }
    };
    // @Override
    RerunEveryOfContext.prototype.exitRule = function (listener) {
        if (listener.exitRerunEveryOf) {
            listener.exitRerunEveryOf(this);
        }
    };
    // @Override
    RerunEveryOfContext.prototype.accept = function (visitor) {
        if (visitor.visitRerunEveryOf) {
            return visitor.visitRerunEveryOf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RerunEveryOfContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RerunEveryOfContext = RerunEveryOfContext;
var RerunEveryClockContext = /** @class */ (function (_super) {
    __extends(RerunEveryClockContext, _super);
    function RerunEveryClockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RerunEveryClockContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    RerunEveryClockContext.prototype.CLOCK_UNITS = function () { return this.tryGetToken(Cobol85Parser.CLOCK_UNITS, 0); };
    Object.defineProperty(RerunEveryClockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_rerunEveryClock; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RerunEveryClockContext.prototype.enterRule = function (listener) {
        if (listener.enterRerunEveryClock) {
            listener.enterRerunEveryClock(this);
        }
    };
    // @Override
    RerunEveryClockContext.prototype.exitRule = function (listener) {
        if (listener.exitRerunEveryClock) {
            listener.exitRerunEveryClock(this);
        }
    };
    // @Override
    RerunEveryClockContext.prototype.accept = function (visitor) {
        if (visitor.visitRerunEveryClock) {
            return visitor.visitRerunEveryClock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RerunEveryClockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RerunEveryClockContext = RerunEveryClockContext;
var SameClauseContext = /** @class */ (function (_super) {
    __extends(SameClauseContext, _super);
    function SameClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SameClauseContext.prototype.SAME = function () { return this.getToken(Cobol85Parser.SAME, 0); };
    SameClauseContext.prototype.AREA = function () { return this.tryGetToken(Cobol85Parser.AREA, 0); };
    SameClauseContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    SameClauseContext.prototype.fileName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileNameContext);
        }
        else {
            return this.getRuleContext(i, FileNameContext);
        }
    };
    SameClauseContext.prototype.RECORD = function () { return this.tryGetToken(Cobol85Parser.RECORD, 0); };
    SameClauseContext.prototype.SORT = function () { return this.tryGetToken(Cobol85Parser.SORT, 0); };
    SameClauseContext.prototype.SORT_MERGE = function () { return this.tryGetToken(Cobol85Parser.SORT_MERGE, 0); };
    Object.defineProperty(SameClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sameClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SameClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSameClause) {
            listener.enterSameClause(this);
        }
    };
    // @Override
    SameClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSameClause) {
            listener.exitSameClause(this);
        }
    };
    // @Override
    SameClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSameClause) {
            return visitor.visitSameClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SameClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SameClauseContext = SameClauseContext;
var MultipleFileClauseContext = /** @class */ (function (_super) {
    __extends(MultipleFileClauseContext, _super);
    function MultipleFileClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultipleFileClauseContext.prototype.MULTIPLE = function () { return this.getToken(Cobol85Parser.MULTIPLE, 0); };
    MultipleFileClauseContext.prototype.FILE = function () { return this.getToken(Cobol85Parser.FILE, 0); };
    MultipleFileClauseContext.prototype.TAPE = function () { return this.tryGetToken(Cobol85Parser.TAPE, 0); };
    MultipleFileClauseContext.prototype.CONTAINS = function () { return this.tryGetToken(Cobol85Parser.CONTAINS, 0); };
    MultipleFileClauseContext.prototype.multipleFilePosition = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MultipleFilePositionContext);
        }
        else {
            return this.getRuleContext(i, MultipleFilePositionContext);
        }
    };
    Object.defineProperty(MultipleFileClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_multipleFileClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultipleFileClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterMultipleFileClause) {
            listener.enterMultipleFileClause(this);
        }
    };
    // @Override
    MultipleFileClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitMultipleFileClause) {
            listener.exitMultipleFileClause(this);
        }
    };
    // @Override
    MultipleFileClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitMultipleFileClause) {
            return visitor.visitMultipleFileClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultipleFileClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultipleFileClauseContext = MultipleFileClauseContext;
var MultipleFilePositionContext = /** @class */ (function (_super) {
    __extends(MultipleFilePositionContext, _super);
    function MultipleFilePositionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultipleFilePositionContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    MultipleFilePositionContext.prototype.POSITION = function () { return this.tryGetToken(Cobol85Parser.POSITION, 0); };
    MultipleFilePositionContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(MultipleFilePositionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_multipleFilePosition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultipleFilePositionContext.prototype.enterRule = function (listener) {
        if (listener.enterMultipleFilePosition) {
            listener.enterMultipleFilePosition(this);
        }
    };
    // @Override
    MultipleFilePositionContext.prototype.exitRule = function (listener) {
        if (listener.exitMultipleFilePosition) {
            listener.exitMultipleFilePosition(this);
        }
    };
    // @Override
    MultipleFilePositionContext.prototype.accept = function (visitor) {
        if (visitor.visitMultipleFilePosition) {
            return visitor.visitMultipleFilePosition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultipleFilePositionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultipleFilePositionContext = MultipleFilePositionContext;
var CommitmentControlClauseContext = /** @class */ (function (_super) {
    __extends(CommitmentControlClauseContext, _super);
    function CommitmentControlClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CommitmentControlClauseContext.prototype.COMMITMENT = function () { return this.getToken(Cobol85Parser.COMMITMENT, 0); };
    CommitmentControlClauseContext.prototype.CONTROL = function () { return this.getToken(Cobol85Parser.CONTROL, 0); };
    CommitmentControlClauseContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    CommitmentControlClauseContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    Object.defineProperty(CommitmentControlClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_commitmentControlClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CommitmentControlClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterCommitmentControlClause) {
            listener.enterCommitmentControlClause(this);
        }
    };
    // @Override
    CommitmentControlClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitCommitmentControlClause) {
            listener.exitCommitmentControlClause(this);
        }
    };
    // @Override
    CommitmentControlClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitCommitmentControlClause) {
            return visitor.visitCommitmentControlClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CommitmentControlClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CommitmentControlClauseContext = CommitmentControlClauseContext;
var DataDivisionContext = /** @class */ (function (_super) {
    __extends(DataDivisionContext, _super);
    function DataDivisionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataDivisionContext.prototype.DATA = function () { return this.getToken(Cobol85Parser.DATA, 0); };
    DataDivisionContext.prototype.DIVISION = function () { return this.getToken(Cobol85Parser.DIVISION, 0); };
    DataDivisionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    DataDivisionContext.prototype.dataDivisionSection = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataDivisionSectionContext);
        }
        else {
            return this.getRuleContext(i, DataDivisionSectionContext);
        }
    };
    Object.defineProperty(DataDivisionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataDivision; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataDivisionContext.prototype.enterRule = function (listener) {
        if (listener.enterDataDivision) {
            listener.enterDataDivision(this);
        }
    };
    // @Override
    DataDivisionContext.prototype.exitRule = function (listener) {
        if (listener.exitDataDivision) {
            listener.exitDataDivision(this);
        }
    };
    // @Override
    DataDivisionContext.prototype.accept = function (visitor) {
        if (visitor.visitDataDivision) {
            return visitor.visitDataDivision(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataDivisionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataDivisionContext = DataDivisionContext;
var DataDivisionSectionContext = /** @class */ (function (_super) {
    __extends(DataDivisionSectionContext, _super);
    function DataDivisionSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataDivisionSectionContext.prototype.fileSection = function () {
        return this.tryGetRuleContext(0, FileSectionContext);
    };
    DataDivisionSectionContext.prototype.dataBaseSection = function () {
        return this.tryGetRuleContext(0, DataBaseSectionContext);
    };
    DataDivisionSectionContext.prototype.workingStorageSection = function () {
        return this.tryGetRuleContext(0, WorkingStorageSectionContext);
    };
    DataDivisionSectionContext.prototype.linkageSection = function () {
        return this.tryGetRuleContext(0, LinkageSectionContext);
    };
    DataDivisionSectionContext.prototype.communicationSection = function () {
        return this.tryGetRuleContext(0, CommunicationSectionContext);
    };
    DataDivisionSectionContext.prototype.localStorageSection = function () {
        return this.tryGetRuleContext(0, LocalStorageSectionContext);
    };
    DataDivisionSectionContext.prototype.screenSection = function () {
        return this.tryGetRuleContext(0, ScreenSectionContext);
    };
    DataDivisionSectionContext.prototype.reportSection = function () {
        return this.tryGetRuleContext(0, ReportSectionContext);
    };
    DataDivisionSectionContext.prototype.programLibrarySection = function () {
        return this.tryGetRuleContext(0, ProgramLibrarySectionContext);
    };
    Object.defineProperty(DataDivisionSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataDivisionSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataDivisionSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterDataDivisionSection) {
            listener.enterDataDivisionSection(this);
        }
    };
    // @Override
    DataDivisionSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitDataDivisionSection) {
            listener.exitDataDivisionSection(this);
        }
    };
    // @Override
    DataDivisionSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitDataDivisionSection) {
            return visitor.visitDataDivisionSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataDivisionSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataDivisionSectionContext = DataDivisionSectionContext;
var FileSectionContext = /** @class */ (function (_super) {
    __extends(FileSectionContext, _super);
    function FileSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FileSectionContext.prototype.FILE = function () { return this.getToken(Cobol85Parser.FILE, 0); };
    FileSectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    FileSectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    FileSectionContext.prototype.fileDescriptionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileDescriptionEntryContext);
        }
        else {
            return this.getRuleContext(i, FileDescriptionEntryContext);
        }
    };
    Object.defineProperty(FileSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_fileSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FileSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterFileSection) {
            listener.enterFileSection(this);
        }
    };
    // @Override
    FileSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitFileSection) {
            listener.exitFileSection(this);
        }
    };
    // @Override
    FileSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitFileSection) {
            return visitor.visitFileSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FileSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FileSectionContext = FileSectionContext;
var FileDescriptionEntryContext = /** @class */ (function (_super) {
    __extends(FileDescriptionEntryContext, _super);
    function FileDescriptionEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FileDescriptionEntryContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    FileDescriptionEntryContext.prototype.DOT_FS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DOT_FS);
        }
        else {
            return this.getToken(Cobol85Parser.DOT_FS, i);
        }
    };
    FileDescriptionEntryContext.prototype.FD = function () { return this.tryGetToken(Cobol85Parser.FD, 0); };
    FileDescriptionEntryContext.prototype.SD = function () { return this.tryGetToken(Cobol85Parser.SD, 0); };
    FileDescriptionEntryContext.prototype.fileDescriptionEntryClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileDescriptionEntryClauseContext);
        }
        else {
            return this.getRuleContext(i, FileDescriptionEntryClauseContext);
        }
    };
    FileDescriptionEntryContext.prototype.dataDescriptionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataDescriptionEntryContext);
        }
        else {
            return this.getRuleContext(i, DataDescriptionEntryContext);
        }
    };
    Object.defineProperty(FileDescriptionEntryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_fileDescriptionEntry; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FileDescriptionEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterFileDescriptionEntry) {
            listener.enterFileDescriptionEntry(this);
        }
    };
    // @Override
    FileDescriptionEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitFileDescriptionEntry) {
            listener.exitFileDescriptionEntry(this);
        }
    };
    // @Override
    FileDescriptionEntryContext.prototype.accept = function (visitor) {
        if (visitor.visitFileDescriptionEntry) {
            return visitor.visitFileDescriptionEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FileDescriptionEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FileDescriptionEntryContext = FileDescriptionEntryContext;
var FileDescriptionEntryClauseContext = /** @class */ (function (_super) {
    __extends(FileDescriptionEntryClauseContext, _super);
    function FileDescriptionEntryClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FileDescriptionEntryClauseContext.prototype.externalClause = function () {
        return this.tryGetRuleContext(0, ExternalClauseContext);
    };
    FileDescriptionEntryClauseContext.prototype.globalClause = function () {
        return this.tryGetRuleContext(0, GlobalClauseContext);
    };
    FileDescriptionEntryClauseContext.prototype.blockContainsClause = function () {
        return this.tryGetRuleContext(0, BlockContainsClauseContext);
    };
    FileDescriptionEntryClauseContext.prototype.recordContainsClause = function () {
        return this.tryGetRuleContext(0, RecordContainsClauseContext);
    };
    FileDescriptionEntryClauseContext.prototype.labelRecordsClause = function () {
        return this.tryGetRuleContext(0, LabelRecordsClauseContext);
    };
    FileDescriptionEntryClauseContext.prototype.valueOfClause = function () {
        return this.tryGetRuleContext(0, ValueOfClauseContext);
    };
    FileDescriptionEntryClauseContext.prototype.dataRecordsClause = function () {
        return this.tryGetRuleContext(0, DataRecordsClauseContext);
    };
    FileDescriptionEntryClauseContext.prototype.linageClause = function () {
        return this.tryGetRuleContext(0, LinageClauseContext);
    };
    FileDescriptionEntryClauseContext.prototype.codeSetClause = function () {
        return this.tryGetRuleContext(0, CodeSetClauseContext);
    };
    FileDescriptionEntryClauseContext.prototype.reportClause = function () {
        return this.tryGetRuleContext(0, ReportClauseContext);
    };
    FileDescriptionEntryClauseContext.prototype.recordingModeClause = function () {
        return this.tryGetRuleContext(0, RecordingModeClauseContext);
    };
    Object.defineProperty(FileDescriptionEntryClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_fileDescriptionEntryClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FileDescriptionEntryClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterFileDescriptionEntryClause) {
            listener.enterFileDescriptionEntryClause(this);
        }
    };
    // @Override
    FileDescriptionEntryClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitFileDescriptionEntryClause) {
            listener.exitFileDescriptionEntryClause(this);
        }
    };
    // @Override
    FileDescriptionEntryClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitFileDescriptionEntryClause) {
            return visitor.visitFileDescriptionEntryClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FileDescriptionEntryClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FileDescriptionEntryClauseContext = FileDescriptionEntryClauseContext;
var ExternalClauseContext = /** @class */ (function (_super) {
    __extends(ExternalClauseContext, _super);
    function ExternalClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExternalClauseContext.prototype.EXTERNAL = function () { return this.getToken(Cobol85Parser.EXTERNAL, 0); };
    ExternalClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ExternalClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_externalClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExternalClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterExternalClause) {
            listener.enterExternalClause(this);
        }
    };
    // @Override
    ExternalClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitExternalClause) {
            listener.exitExternalClause(this);
        }
    };
    // @Override
    ExternalClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitExternalClause) {
            return visitor.visitExternalClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExternalClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExternalClauseContext = ExternalClauseContext;
var GlobalClauseContext = /** @class */ (function (_super) {
    __extends(GlobalClauseContext, _super);
    function GlobalClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    GlobalClauseContext.prototype.GLOBAL = function () { return this.getToken(Cobol85Parser.GLOBAL, 0); };
    GlobalClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(GlobalClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_globalClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    GlobalClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterGlobalClause) {
            listener.enterGlobalClause(this);
        }
    };
    // @Override
    GlobalClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitGlobalClause) {
            listener.exitGlobalClause(this);
        }
    };
    // @Override
    GlobalClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitGlobalClause) {
            return visitor.visitGlobalClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return GlobalClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.GlobalClauseContext = GlobalClauseContext;
var BlockContainsClauseContext = /** @class */ (function (_super) {
    __extends(BlockContainsClauseContext, _super);
    function BlockContainsClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BlockContainsClauseContext.prototype.BLOCK = function () { return this.getToken(Cobol85Parser.BLOCK, 0); };
    BlockContainsClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    BlockContainsClauseContext.prototype.CONTAINS = function () { return this.tryGetToken(Cobol85Parser.CONTAINS, 0); };
    BlockContainsClauseContext.prototype.blockContainsTo = function () {
        return this.tryGetRuleContext(0, BlockContainsToContext);
    };
    BlockContainsClauseContext.prototype.RECORDS = function () { return this.tryGetToken(Cobol85Parser.RECORDS, 0); };
    BlockContainsClauseContext.prototype.CHARACTERS = function () { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); };
    Object.defineProperty(BlockContainsClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_blockContainsClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BlockContainsClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterBlockContainsClause) {
            listener.enterBlockContainsClause(this);
        }
    };
    // @Override
    BlockContainsClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitBlockContainsClause) {
            listener.exitBlockContainsClause(this);
        }
    };
    // @Override
    BlockContainsClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitBlockContainsClause) {
            return visitor.visitBlockContainsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BlockContainsClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BlockContainsClauseContext = BlockContainsClauseContext;
var BlockContainsToContext = /** @class */ (function (_super) {
    __extends(BlockContainsToContext, _super);
    function BlockContainsToContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BlockContainsToContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    BlockContainsToContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(BlockContainsToContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_blockContainsTo; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BlockContainsToContext.prototype.enterRule = function (listener) {
        if (listener.enterBlockContainsTo) {
            listener.enterBlockContainsTo(this);
        }
    };
    // @Override
    BlockContainsToContext.prototype.exitRule = function (listener) {
        if (listener.exitBlockContainsTo) {
            listener.exitBlockContainsTo(this);
        }
    };
    // @Override
    BlockContainsToContext.prototype.accept = function (visitor) {
        if (visitor.visitBlockContainsTo) {
            return visitor.visitBlockContainsTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BlockContainsToContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BlockContainsToContext = BlockContainsToContext;
var RecordContainsClauseContext = /** @class */ (function (_super) {
    __extends(RecordContainsClauseContext, _super);
    function RecordContainsClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RecordContainsClauseContext.prototype.RECORD = function () { return this.getToken(Cobol85Parser.RECORD, 0); };
    RecordContainsClauseContext.prototype.recordContainsClauseFormat1 = function () {
        return this.tryGetRuleContext(0, RecordContainsClauseFormat1Context);
    };
    RecordContainsClauseContext.prototype.recordContainsClauseFormat2 = function () {
        return this.tryGetRuleContext(0, RecordContainsClauseFormat2Context);
    };
    RecordContainsClauseContext.prototype.recordContainsClauseFormat3 = function () {
        return this.tryGetRuleContext(0, RecordContainsClauseFormat3Context);
    };
    Object.defineProperty(RecordContainsClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_recordContainsClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RecordContainsClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterRecordContainsClause) {
            listener.enterRecordContainsClause(this);
        }
    };
    // @Override
    RecordContainsClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitRecordContainsClause) {
            listener.exitRecordContainsClause(this);
        }
    };
    // @Override
    RecordContainsClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitRecordContainsClause) {
            return visitor.visitRecordContainsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RecordContainsClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RecordContainsClauseContext = RecordContainsClauseContext;
var RecordContainsClauseFormat1Context = /** @class */ (function (_super) {
    __extends(RecordContainsClauseFormat1Context, _super);
    function RecordContainsClauseFormat1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RecordContainsClauseFormat1Context.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    RecordContainsClauseFormat1Context.prototype.CONTAINS = function () { return this.tryGetToken(Cobol85Parser.CONTAINS, 0); };
    RecordContainsClauseFormat1Context.prototype.CHARACTERS = function () { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); };
    Object.defineProperty(RecordContainsClauseFormat1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_recordContainsClauseFormat1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RecordContainsClauseFormat1Context.prototype.enterRule = function (listener) {
        if (listener.enterRecordContainsClauseFormat1) {
            listener.enterRecordContainsClauseFormat1(this);
        }
    };
    // @Override
    RecordContainsClauseFormat1Context.prototype.exitRule = function (listener) {
        if (listener.exitRecordContainsClauseFormat1) {
            listener.exitRecordContainsClauseFormat1(this);
        }
    };
    // @Override
    RecordContainsClauseFormat1Context.prototype.accept = function (visitor) {
        if (visitor.visitRecordContainsClauseFormat1) {
            return visitor.visitRecordContainsClauseFormat1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RecordContainsClauseFormat1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.RecordContainsClauseFormat1Context = RecordContainsClauseFormat1Context;
var RecordContainsClauseFormat2Context = /** @class */ (function (_super) {
    __extends(RecordContainsClauseFormat2Context, _super);
    function RecordContainsClauseFormat2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RecordContainsClauseFormat2Context.prototype.VARYING = function () { return this.getToken(Cobol85Parser.VARYING, 0); };
    RecordContainsClauseFormat2Context.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    RecordContainsClauseFormat2Context.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    RecordContainsClauseFormat2Context.prototype.SIZE = function () { return this.tryGetToken(Cobol85Parser.SIZE, 0); };
    RecordContainsClauseFormat2Context.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    RecordContainsClauseFormat2Context.prototype.DEPENDING = function () { return this.tryGetToken(Cobol85Parser.DEPENDING, 0); };
    RecordContainsClauseFormat2Context.prototype.qualifiedDataName = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameContext);
    };
    RecordContainsClauseFormat2Context.prototype.FROM = function () { return this.tryGetToken(Cobol85Parser.FROM, 0); };
    RecordContainsClauseFormat2Context.prototype.recordContainsTo = function () {
        return this.tryGetRuleContext(0, RecordContainsToContext);
    };
    RecordContainsClauseFormat2Context.prototype.CHARACTERS = function () { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); };
    RecordContainsClauseFormat2Context.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    Object.defineProperty(RecordContainsClauseFormat2Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_recordContainsClauseFormat2; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RecordContainsClauseFormat2Context.prototype.enterRule = function (listener) {
        if (listener.enterRecordContainsClauseFormat2) {
            listener.enterRecordContainsClauseFormat2(this);
        }
    };
    // @Override
    RecordContainsClauseFormat2Context.prototype.exitRule = function (listener) {
        if (listener.exitRecordContainsClauseFormat2) {
            listener.exitRecordContainsClauseFormat2(this);
        }
    };
    // @Override
    RecordContainsClauseFormat2Context.prototype.accept = function (visitor) {
        if (visitor.visitRecordContainsClauseFormat2) {
            return visitor.visitRecordContainsClauseFormat2(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RecordContainsClauseFormat2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.RecordContainsClauseFormat2Context = RecordContainsClauseFormat2Context;
var RecordContainsClauseFormat3Context = /** @class */ (function (_super) {
    __extends(RecordContainsClauseFormat3Context, _super);
    function RecordContainsClauseFormat3Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RecordContainsClauseFormat3Context.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    RecordContainsClauseFormat3Context.prototype.recordContainsTo = function () {
        return this.getRuleContext(0, RecordContainsToContext);
    };
    RecordContainsClauseFormat3Context.prototype.CONTAINS = function () { return this.tryGetToken(Cobol85Parser.CONTAINS, 0); };
    RecordContainsClauseFormat3Context.prototype.CHARACTERS = function () { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); };
    Object.defineProperty(RecordContainsClauseFormat3Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_recordContainsClauseFormat3; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RecordContainsClauseFormat3Context.prototype.enterRule = function (listener) {
        if (listener.enterRecordContainsClauseFormat3) {
            listener.enterRecordContainsClauseFormat3(this);
        }
    };
    // @Override
    RecordContainsClauseFormat3Context.prototype.exitRule = function (listener) {
        if (listener.exitRecordContainsClauseFormat3) {
            listener.exitRecordContainsClauseFormat3(this);
        }
    };
    // @Override
    RecordContainsClauseFormat3Context.prototype.accept = function (visitor) {
        if (visitor.visitRecordContainsClauseFormat3) {
            return visitor.visitRecordContainsClauseFormat3(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RecordContainsClauseFormat3Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.RecordContainsClauseFormat3Context = RecordContainsClauseFormat3Context;
var RecordContainsToContext = /** @class */ (function (_super) {
    __extends(RecordContainsToContext, _super);
    function RecordContainsToContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RecordContainsToContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    RecordContainsToContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(RecordContainsToContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_recordContainsTo; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RecordContainsToContext.prototype.enterRule = function (listener) {
        if (listener.enterRecordContainsTo) {
            listener.enterRecordContainsTo(this);
        }
    };
    // @Override
    RecordContainsToContext.prototype.exitRule = function (listener) {
        if (listener.exitRecordContainsTo) {
            listener.exitRecordContainsTo(this);
        }
    };
    // @Override
    RecordContainsToContext.prototype.accept = function (visitor) {
        if (visitor.visitRecordContainsTo) {
            return visitor.visitRecordContainsTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RecordContainsToContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RecordContainsToContext = RecordContainsToContext;
var LabelRecordsClauseContext = /** @class */ (function (_super) {
    __extends(LabelRecordsClauseContext, _super);
    function LabelRecordsClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LabelRecordsClauseContext.prototype.LABEL = function () { return this.getToken(Cobol85Parser.LABEL, 0); };
    LabelRecordsClauseContext.prototype.RECORD = function () { return this.tryGetToken(Cobol85Parser.RECORD, 0); };
    LabelRecordsClauseContext.prototype.RECORDS = function () { return this.tryGetToken(Cobol85Parser.RECORDS, 0); };
    LabelRecordsClauseContext.prototype.OMITTED = function () { return this.tryGetToken(Cobol85Parser.OMITTED, 0); };
    LabelRecordsClauseContext.prototype.STANDARD = function () { return this.tryGetToken(Cobol85Parser.STANDARD, 0); };
    LabelRecordsClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    LabelRecordsClauseContext.prototype.ARE = function () { return this.tryGetToken(Cobol85Parser.ARE, 0); };
    LabelRecordsClauseContext.prototype.dataName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataNameContext);
        }
        else {
            return this.getRuleContext(i, DataNameContext);
        }
    };
    Object.defineProperty(LabelRecordsClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_labelRecordsClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LabelRecordsClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterLabelRecordsClause) {
            listener.enterLabelRecordsClause(this);
        }
    };
    // @Override
    LabelRecordsClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitLabelRecordsClause) {
            listener.exitLabelRecordsClause(this);
        }
    };
    // @Override
    LabelRecordsClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitLabelRecordsClause) {
            return visitor.visitLabelRecordsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LabelRecordsClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LabelRecordsClauseContext = LabelRecordsClauseContext;
var ValueOfClauseContext = /** @class */ (function (_super) {
    __extends(ValueOfClauseContext, _super);
    function ValueOfClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ValueOfClauseContext.prototype.VALUE = function () { return this.getToken(Cobol85Parser.VALUE, 0); };
    ValueOfClauseContext.prototype.OF = function () { return this.getToken(Cobol85Parser.OF, 0); };
    ValueOfClauseContext.prototype.valuePair = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValuePairContext);
        }
        else {
            return this.getRuleContext(i, ValuePairContext);
        }
    };
    Object.defineProperty(ValueOfClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_valueOfClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ValueOfClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterValueOfClause) {
            listener.enterValueOfClause(this);
        }
    };
    // @Override
    ValueOfClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitValueOfClause) {
            listener.exitValueOfClause(this);
        }
    };
    // @Override
    ValueOfClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitValueOfClause) {
            return visitor.visitValueOfClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ValueOfClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ValueOfClauseContext = ValueOfClauseContext;
var ValuePairContext = /** @class */ (function (_super) {
    __extends(ValuePairContext, _super);
    function ValuePairContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ValuePairContext.prototype.systemName = function () {
        return this.getRuleContext(0, SystemNameContext);
    };
    ValuePairContext.prototype.qualifiedDataName = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameContext);
    };
    ValuePairContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    ValuePairContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ValuePairContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_valuePair; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ValuePairContext.prototype.enterRule = function (listener) {
        if (listener.enterValuePair) {
            listener.enterValuePair(this);
        }
    };
    // @Override
    ValuePairContext.prototype.exitRule = function (listener) {
        if (listener.exitValuePair) {
            listener.exitValuePair(this);
        }
    };
    // @Override
    ValuePairContext.prototype.accept = function (visitor) {
        if (visitor.visitValuePair) {
            return visitor.visitValuePair(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ValuePairContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ValuePairContext = ValuePairContext;
var DataRecordsClauseContext = /** @class */ (function (_super) {
    __extends(DataRecordsClauseContext, _super);
    function DataRecordsClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataRecordsClauseContext.prototype.DATA = function () { return this.getToken(Cobol85Parser.DATA, 0); };
    DataRecordsClauseContext.prototype.RECORD = function () { return this.tryGetToken(Cobol85Parser.RECORD, 0); };
    DataRecordsClauseContext.prototype.RECORDS = function () { return this.tryGetToken(Cobol85Parser.RECORDS, 0); };
    DataRecordsClauseContext.prototype.dataName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataNameContext);
        }
        else {
            return this.getRuleContext(i, DataNameContext);
        }
    };
    DataRecordsClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    DataRecordsClauseContext.prototype.ARE = function () { return this.tryGetToken(Cobol85Parser.ARE, 0); };
    Object.defineProperty(DataRecordsClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataRecordsClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataRecordsClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataRecordsClause) {
            listener.enterDataRecordsClause(this);
        }
    };
    // @Override
    DataRecordsClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataRecordsClause) {
            listener.exitDataRecordsClause(this);
        }
    };
    // @Override
    DataRecordsClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataRecordsClause) {
            return visitor.visitDataRecordsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataRecordsClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataRecordsClauseContext = DataRecordsClauseContext;
var LinageClauseContext = /** @class */ (function (_super) {
    __extends(LinageClauseContext, _super);
    function LinageClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LinageClauseContext.prototype.LINAGE = function () { return this.getToken(Cobol85Parser.LINAGE, 0); };
    LinageClauseContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    LinageClauseContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    LinageClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    LinageClauseContext.prototype.LINES = function () { return this.tryGetToken(Cobol85Parser.LINES, 0); };
    LinageClauseContext.prototype.linageAt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LinageAtContext);
        }
        else {
            return this.getRuleContext(i, LinageAtContext);
        }
    };
    Object.defineProperty(LinageClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_linageClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LinageClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterLinageClause) {
            listener.enterLinageClause(this);
        }
    };
    // @Override
    LinageClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitLinageClause) {
            listener.exitLinageClause(this);
        }
    };
    // @Override
    LinageClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitLinageClause) {
            return visitor.visitLinageClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LinageClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LinageClauseContext = LinageClauseContext;
var LinageAtContext = /** @class */ (function (_super) {
    __extends(LinageAtContext, _super);
    function LinageAtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LinageAtContext.prototype.linageFootingAt = function () {
        return this.tryGetRuleContext(0, LinageFootingAtContext);
    };
    LinageAtContext.prototype.linageLinesAtTop = function () {
        return this.tryGetRuleContext(0, LinageLinesAtTopContext);
    };
    LinageAtContext.prototype.linageLinesAtBottom = function () {
        return this.tryGetRuleContext(0, LinageLinesAtBottomContext);
    };
    Object.defineProperty(LinageAtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_linageAt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LinageAtContext.prototype.enterRule = function (listener) {
        if (listener.enterLinageAt) {
            listener.enterLinageAt(this);
        }
    };
    // @Override
    LinageAtContext.prototype.exitRule = function (listener) {
        if (listener.exitLinageAt) {
            listener.exitLinageAt(this);
        }
    };
    // @Override
    LinageAtContext.prototype.accept = function (visitor) {
        if (visitor.visitLinageAt) {
            return visitor.visitLinageAt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LinageAtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LinageAtContext = LinageAtContext;
var LinageFootingAtContext = /** @class */ (function (_super) {
    __extends(LinageFootingAtContext, _super);
    function LinageFootingAtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LinageFootingAtContext.prototype.FOOTING = function () { return this.getToken(Cobol85Parser.FOOTING, 0); };
    LinageFootingAtContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    LinageFootingAtContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    LinageFootingAtContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    LinageFootingAtContext.prototype.AT = function () { return this.tryGetToken(Cobol85Parser.AT, 0); };
    Object.defineProperty(LinageFootingAtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_linageFootingAt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LinageFootingAtContext.prototype.enterRule = function (listener) {
        if (listener.enterLinageFootingAt) {
            listener.enterLinageFootingAt(this);
        }
    };
    // @Override
    LinageFootingAtContext.prototype.exitRule = function (listener) {
        if (listener.exitLinageFootingAt) {
            listener.exitLinageFootingAt(this);
        }
    };
    // @Override
    LinageFootingAtContext.prototype.accept = function (visitor) {
        if (visitor.visitLinageFootingAt) {
            return visitor.visitLinageFootingAt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LinageFootingAtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LinageFootingAtContext = LinageFootingAtContext;
var LinageLinesAtTopContext = /** @class */ (function (_super) {
    __extends(LinageLinesAtTopContext, _super);
    function LinageLinesAtTopContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LinageLinesAtTopContext.prototype.TOP = function () { return this.getToken(Cobol85Parser.TOP, 0); };
    LinageLinesAtTopContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    LinageLinesAtTopContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    LinageLinesAtTopContext.prototype.LINES = function () { return this.tryGetToken(Cobol85Parser.LINES, 0); };
    LinageLinesAtTopContext.prototype.AT = function () { return this.tryGetToken(Cobol85Parser.AT, 0); };
    Object.defineProperty(LinageLinesAtTopContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_linageLinesAtTop; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LinageLinesAtTopContext.prototype.enterRule = function (listener) {
        if (listener.enterLinageLinesAtTop) {
            listener.enterLinageLinesAtTop(this);
        }
    };
    // @Override
    LinageLinesAtTopContext.prototype.exitRule = function (listener) {
        if (listener.exitLinageLinesAtTop) {
            listener.exitLinageLinesAtTop(this);
        }
    };
    // @Override
    LinageLinesAtTopContext.prototype.accept = function (visitor) {
        if (visitor.visitLinageLinesAtTop) {
            return visitor.visitLinageLinesAtTop(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LinageLinesAtTopContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LinageLinesAtTopContext = LinageLinesAtTopContext;
var LinageLinesAtBottomContext = /** @class */ (function (_super) {
    __extends(LinageLinesAtBottomContext, _super);
    function LinageLinesAtBottomContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LinageLinesAtBottomContext.prototype.BOTTOM = function () { return this.getToken(Cobol85Parser.BOTTOM, 0); };
    LinageLinesAtBottomContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    LinageLinesAtBottomContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    LinageLinesAtBottomContext.prototype.LINES = function () { return this.tryGetToken(Cobol85Parser.LINES, 0); };
    LinageLinesAtBottomContext.prototype.AT = function () { return this.tryGetToken(Cobol85Parser.AT, 0); };
    Object.defineProperty(LinageLinesAtBottomContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_linageLinesAtBottom; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LinageLinesAtBottomContext.prototype.enterRule = function (listener) {
        if (listener.enterLinageLinesAtBottom) {
            listener.enterLinageLinesAtBottom(this);
        }
    };
    // @Override
    LinageLinesAtBottomContext.prototype.exitRule = function (listener) {
        if (listener.exitLinageLinesAtBottom) {
            listener.exitLinageLinesAtBottom(this);
        }
    };
    // @Override
    LinageLinesAtBottomContext.prototype.accept = function (visitor) {
        if (visitor.visitLinageLinesAtBottom) {
            return visitor.visitLinageLinesAtBottom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LinageLinesAtBottomContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LinageLinesAtBottomContext = LinageLinesAtBottomContext;
var RecordingModeClauseContext = /** @class */ (function (_super) {
    __extends(RecordingModeClauseContext, _super);
    function RecordingModeClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RecordingModeClauseContext.prototype.RECORDING = function () { return this.getToken(Cobol85Parser.RECORDING, 0); };
    RecordingModeClauseContext.prototype.modeStatement = function () {
        return this.getRuleContext(0, ModeStatementContext);
    };
    RecordingModeClauseContext.prototype.MODE = function () { return this.tryGetToken(Cobol85Parser.MODE, 0); };
    RecordingModeClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(RecordingModeClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_recordingModeClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RecordingModeClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterRecordingModeClause) {
            listener.enterRecordingModeClause(this);
        }
    };
    // @Override
    RecordingModeClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitRecordingModeClause) {
            listener.exitRecordingModeClause(this);
        }
    };
    // @Override
    RecordingModeClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitRecordingModeClause) {
            return visitor.visitRecordingModeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RecordingModeClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RecordingModeClauseContext = RecordingModeClauseContext;
var ModeStatementContext = /** @class */ (function (_super) {
    __extends(ModeStatementContext, _super);
    function ModeStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ModeStatementContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(ModeStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_modeStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ModeStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterModeStatement) {
            listener.enterModeStatement(this);
        }
    };
    // @Override
    ModeStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitModeStatement) {
            listener.exitModeStatement(this);
        }
    };
    // @Override
    ModeStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitModeStatement) {
            return visitor.visitModeStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ModeStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModeStatementContext = ModeStatementContext;
var CodeSetClauseContext = /** @class */ (function (_super) {
    __extends(CodeSetClauseContext, _super);
    function CodeSetClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CodeSetClauseContext.prototype.CODE_SET = function () { return this.getToken(Cobol85Parser.CODE_SET, 0); };
    CodeSetClauseContext.prototype.alphabetName = function () {
        return this.getRuleContext(0, AlphabetNameContext);
    };
    CodeSetClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(CodeSetClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_codeSetClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CodeSetClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterCodeSetClause) {
            listener.enterCodeSetClause(this);
        }
    };
    // @Override
    CodeSetClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitCodeSetClause) {
            listener.exitCodeSetClause(this);
        }
    };
    // @Override
    CodeSetClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitCodeSetClause) {
            return visitor.visitCodeSetClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CodeSetClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CodeSetClauseContext = CodeSetClauseContext;
var ReportClauseContext = /** @class */ (function (_super) {
    __extends(ReportClauseContext, _super);
    function ReportClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportClauseContext.prototype.REPORT = function () { return this.tryGetToken(Cobol85Parser.REPORT, 0); };
    ReportClauseContext.prototype.REPORTS = function () { return this.tryGetToken(Cobol85Parser.REPORTS, 0); };
    ReportClauseContext.prototype.reportName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportNameContext);
        }
        else {
            return this.getRuleContext(i, ReportNameContext);
        }
    };
    ReportClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    ReportClauseContext.prototype.ARE = function () { return this.tryGetToken(Cobol85Parser.ARE, 0); };
    Object.defineProperty(ReportClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportClause) {
            listener.enterReportClause(this);
        }
    };
    // @Override
    ReportClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportClause) {
            listener.exitReportClause(this);
        }
    };
    // @Override
    ReportClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportClause) {
            return visitor.visitReportClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportClauseContext = ReportClauseContext;
var DataBaseSectionContext = /** @class */ (function (_super) {
    __extends(DataBaseSectionContext, _super);
    function DataBaseSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataBaseSectionContext.prototype.DATA_BASE = function () { return this.getToken(Cobol85Parser.DATA_BASE, 0); };
    DataBaseSectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    DataBaseSectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    DataBaseSectionContext.prototype.dataBaseSectionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataBaseSectionEntryContext);
        }
        else {
            return this.getRuleContext(i, DataBaseSectionEntryContext);
        }
    };
    Object.defineProperty(DataBaseSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataBaseSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataBaseSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterDataBaseSection) {
            listener.enterDataBaseSection(this);
        }
    };
    // @Override
    DataBaseSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitDataBaseSection) {
            listener.exitDataBaseSection(this);
        }
    };
    // @Override
    DataBaseSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitDataBaseSection) {
            return visitor.visitDataBaseSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataBaseSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataBaseSectionContext = DataBaseSectionContext;
var DataBaseSectionEntryContext = /** @class */ (function (_super) {
    __extends(DataBaseSectionEntryContext, _super);
    function DataBaseSectionEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataBaseSectionEntryContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    DataBaseSectionEntryContext.prototype.literal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }
        else {
            return this.getRuleContext(i, LiteralContext);
        }
    };
    DataBaseSectionEntryContext.prototype.INVOKE = function () { return this.getToken(Cobol85Parser.INVOKE, 0); };
    Object.defineProperty(DataBaseSectionEntryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataBaseSectionEntry; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataBaseSectionEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterDataBaseSectionEntry) {
            listener.enterDataBaseSectionEntry(this);
        }
    };
    // @Override
    DataBaseSectionEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitDataBaseSectionEntry) {
            listener.exitDataBaseSectionEntry(this);
        }
    };
    // @Override
    DataBaseSectionEntryContext.prototype.accept = function (visitor) {
        if (visitor.visitDataBaseSectionEntry) {
            return visitor.visitDataBaseSectionEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataBaseSectionEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataBaseSectionEntryContext = DataBaseSectionEntryContext;
var WorkingStorageSectionContext = /** @class */ (function (_super) {
    __extends(WorkingStorageSectionContext, _super);
    function WorkingStorageSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WorkingStorageSectionContext.prototype.WORKING_STORAGE = function () { return this.getToken(Cobol85Parser.WORKING_STORAGE, 0); };
    WorkingStorageSectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    WorkingStorageSectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    WorkingStorageSectionContext.prototype.dataDescriptionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataDescriptionEntryContext);
        }
        else {
            return this.getRuleContext(i, DataDescriptionEntryContext);
        }
    };
    Object.defineProperty(WorkingStorageSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_workingStorageSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WorkingStorageSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterWorkingStorageSection) {
            listener.enterWorkingStorageSection(this);
        }
    };
    // @Override
    WorkingStorageSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitWorkingStorageSection) {
            listener.exitWorkingStorageSection(this);
        }
    };
    // @Override
    WorkingStorageSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitWorkingStorageSection) {
            return visitor.visitWorkingStorageSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WorkingStorageSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WorkingStorageSectionContext = WorkingStorageSectionContext;
var LinkageSectionContext = /** @class */ (function (_super) {
    __extends(LinkageSectionContext, _super);
    function LinkageSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LinkageSectionContext.prototype.LINKAGE = function () { return this.getToken(Cobol85Parser.LINKAGE, 0); };
    LinkageSectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    LinkageSectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    LinkageSectionContext.prototype.dataDescriptionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataDescriptionEntryContext);
        }
        else {
            return this.getRuleContext(i, DataDescriptionEntryContext);
        }
    };
    Object.defineProperty(LinkageSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_linkageSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LinkageSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterLinkageSection) {
            listener.enterLinkageSection(this);
        }
    };
    // @Override
    LinkageSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitLinkageSection) {
            listener.exitLinkageSection(this);
        }
    };
    // @Override
    LinkageSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitLinkageSection) {
            return visitor.visitLinkageSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LinkageSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LinkageSectionContext = LinkageSectionContext;
var CommunicationSectionContext = /** @class */ (function (_super) {
    __extends(CommunicationSectionContext, _super);
    function CommunicationSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CommunicationSectionContext.prototype.COMMUNICATION = function () { return this.getToken(Cobol85Parser.COMMUNICATION, 0); };
    CommunicationSectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    CommunicationSectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    CommunicationSectionContext.prototype.communicationDescriptionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CommunicationDescriptionEntryContext);
        }
        else {
            return this.getRuleContext(i, CommunicationDescriptionEntryContext);
        }
    };
    CommunicationSectionContext.prototype.dataDescriptionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataDescriptionEntryContext);
        }
        else {
            return this.getRuleContext(i, DataDescriptionEntryContext);
        }
    };
    Object.defineProperty(CommunicationSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_communicationSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CommunicationSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterCommunicationSection) {
            listener.enterCommunicationSection(this);
        }
    };
    // @Override
    CommunicationSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitCommunicationSection) {
            listener.exitCommunicationSection(this);
        }
    };
    // @Override
    CommunicationSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitCommunicationSection) {
            return visitor.visitCommunicationSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CommunicationSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CommunicationSectionContext = CommunicationSectionContext;
var CommunicationDescriptionEntryContext = /** @class */ (function (_super) {
    __extends(CommunicationDescriptionEntryContext, _super);
    function CommunicationDescriptionEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CommunicationDescriptionEntryContext.prototype.communicationDescriptionEntryFormat1 = function () {
        return this.tryGetRuleContext(0, CommunicationDescriptionEntryFormat1Context);
    };
    CommunicationDescriptionEntryContext.prototype.communicationDescriptionEntryFormat2 = function () {
        return this.tryGetRuleContext(0, CommunicationDescriptionEntryFormat2Context);
    };
    CommunicationDescriptionEntryContext.prototype.communicationDescriptionEntryFormat3 = function () {
        return this.tryGetRuleContext(0, CommunicationDescriptionEntryFormat3Context);
    };
    Object.defineProperty(CommunicationDescriptionEntryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_communicationDescriptionEntry; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CommunicationDescriptionEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterCommunicationDescriptionEntry) {
            listener.enterCommunicationDescriptionEntry(this);
        }
    };
    // @Override
    CommunicationDescriptionEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitCommunicationDescriptionEntry) {
            listener.exitCommunicationDescriptionEntry(this);
        }
    };
    // @Override
    CommunicationDescriptionEntryContext.prototype.accept = function (visitor) {
        if (visitor.visitCommunicationDescriptionEntry) {
            return visitor.visitCommunicationDescriptionEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CommunicationDescriptionEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CommunicationDescriptionEntryContext = CommunicationDescriptionEntryContext;
var CommunicationDescriptionEntryFormat1Context = /** @class */ (function (_super) {
    __extends(CommunicationDescriptionEntryFormat1Context, _super);
    function CommunicationDescriptionEntryFormat1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CommunicationDescriptionEntryFormat1Context.prototype.CD = function () { return this.getToken(Cobol85Parser.CD, 0); };
    CommunicationDescriptionEntryFormat1Context.prototype.cdName = function () {
        return this.getRuleContext(0, CdNameContext);
    };
    CommunicationDescriptionEntryFormat1Context.prototype.INPUT = function () { return this.getToken(Cobol85Parser.INPUT, 0); };
    CommunicationDescriptionEntryFormat1Context.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    CommunicationDescriptionEntryFormat1Context.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    CommunicationDescriptionEntryFormat1Context.prototype.INITIAL = function () { return this.tryGetToken(Cobol85Parser.INITIAL, 0); };
    CommunicationDescriptionEntryFormat1Context.prototype.dataDescName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataDescNameContext);
        }
        else {
            return this.getRuleContext(i, DataDescNameContext);
        }
    };
    CommunicationDescriptionEntryFormat1Context.prototype.symbolicQueueClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SymbolicQueueClauseContext);
        }
        else {
            return this.getRuleContext(i, SymbolicQueueClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat1Context.prototype.symbolicSubQueueClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SymbolicSubQueueClauseContext);
        }
        else {
            return this.getRuleContext(i, SymbolicSubQueueClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat1Context.prototype.messageDateClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MessageDateClauseContext);
        }
        else {
            return this.getRuleContext(i, MessageDateClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat1Context.prototype.messageTimeClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MessageTimeClauseContext);
        }
        else {
            return this.getRuleContext(i, MessageTimeClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat1Context.prototype.symbolicSourceClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SymbolicSourceClauseContext);
        }
        else {
            return this.getRuleContext(i, SymbolicSourceClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat1Context.prototype.textLengthClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TextLengthClauseContext);
        }
        else {
            return this.getRuleContext(i, TextLengthClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat1Context.prototype.endKeyClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EndKeyClauseContext);
        }
        else {
            return this.getRuleContext(i, EndKeyClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat1Context.prototype.statusKeyClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatusKeyClauseContext);
        }
        else {
            return this.getRuleContext(i, StatusKeyClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat1Context.prototype.messageCountClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MessageCountClauseContext);
        }
        else {
            return this.getRuleContext(i, MessageCountClauseContext);
        }
    };
    Object.defineProperty(CommunicationDescriptionEntryFormat1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_communicationDescriptionEntryFormat1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CommunicationDescriptionEntryFormat1Context.prototype.enterRule = function (listener) {
        if (listener.enterCommunicationDescriptionEntryFormat1) {
            listener.enterCommunicationDescriptionEntryFormat1(this);
        }
    };
    // @Override
    CommunicationDescriptionEntryFormat1Context.prototype.exitRule = function (listener) {
        if (listener.exitCommunicationDescriptionEntryFormat1) {
            listener.exitCommunicationDescriptionEntryFormat1(this);
        }
    };
    // @Override
    CommunicationDescriptionEntryFormat1Context.prototype.accept = function (visitor) {
        if (visitor.visitCommunicationDescriptionEntryFormat1) {
            return visitor.visitCommunicationDescriptionEntryFormat1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CommunicationDescriptionEntryFormat1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.CommunicationDescriptionEntryFormat1Context = CommunicationDescriptionEntryFormat1Context;
var CommunicationDescriptionEntryFormat2Context = /** @class */ (function (_super) {
    __extends(CommunicationDescriptionEntryFormat2Context, _super);
    function CommunicationDescriptionEntryFormat2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CommunicationDescriptionEntryFormat2Context.prototype.CD = function () { return this.getToken(Cobol85Parser.CD, 0); };
    CommunicationDescriptionEntryFormat2Context.prototype.cdName = function () {
        return this.getRuleContext(0, CdNameContext);
    };
    CommunicationDescriptionEntryFormat2Context.prototype.OUTPUT = function () { return this.getToken(Cobol85Parser.OUTPUT, 0); };
    CommunicationDescriptionEntryFormat2Context.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    CommunicationDescriptionEntryFormat2Context.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    CommunicationDescriptionEntryFormat2Context.prototype.destinationCountClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DestinationCountClauseContext);
        }
        else {
            return this.getRuleContext(i, DestinationCountClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat2Context.prototype.textLengthClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TextLengthClauseContext);
        }
        else {
            return this.getRuleContext(i, TextLengthClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat2Context.prototype.statusKeyClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatusKeyClauseContext);
        }
        else {
            return this.getRuleContext(i, StatusKeyClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat2Context.prototype.destinationTableClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DestinationTableClauseContext);
        }
        else {
            return this.getRuleContext(i, DestinationTableClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat2Context.prototype.errorKeyClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ErrorKeyClauseContext);
        }
        else {
            return this.getRuleContext(i, ErrorKeyClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat2Context.prototype.symbolicDestinationClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SymbolicDestinationClauseContext);
        }
        else {
            return this.getRuleContext(i, SymbolicDestinationClauseContext);
        }
    };
    Object.defineProperty(CommunicationDescriptionEntryFormat2Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_communicationDescriptionEntryFormat2; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CommunicationDescriptionEntryFormat2Context.prototype.enterRule = function (listener) {
        if (listener.enterCommunicationDescriptionEntryFormat2) {
            listener.enterCommunicationDescriptionEntryFormat2(this);
        }
    };
    // @Override
    CommunicationDescriptionEntryFormat2Context.prototype.exitRule = function (listener) {
        if (listener.exitCommunicationDescriptionEntryFormat2) {
            listener.exitCommunicationDescriptionEntryFormat2(this);
        }
    };
    // @Override
    CommunicationDescriptionEntryFormat2Context.prototype.accept = function (visitor) {
        if (visitor.visitCommunicationDescriptionEntryFormat2) {
            return visitor.visitCommunicationDescriptionEntryFormat2(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CommunicationDescriptionEntryFormat2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.CommunicationDescriptionEntryFormat2Context = CommunicationDescriptionEntryFormat2Context;
var CommunicationDescriptionEntryFormat3Context = /** @class */ (function (_super) {
    __extends(CommunicationDescriptionEntryFormat3Context, _super);
    function CommunicationDescriptionEntryFormat3Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CommunicationDescriptionEntryFormat3Context.prototype.CD = function () { return this.getToken(Cobol85Parser.CD, 0); };
    CommunicationDescriptionEntryFormat3Context.prototype.cdName = function () {
        return this.getRuleContext(0, CdNameContext);
    };
    CommunicationDescriptionEntryFormat3Context.prototype.INITIAL = function () { return this.getToken(Cobol85Parser.INITIAL, 0); };
    CommunicationDescriptionEntryFormat3Context.prototype.I_O = function () { return this.getToken(Cobol85Parser.I_O, 0); };
    CommunicationDescriptionEntryFormat3Context.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    CommunicationDescriptionEntryFormat3Context.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    CommunicationDescriptionEntryFormat3Context.prototype.dataDescName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataDescNameContext);
        }
        else {
            return this.getRuleContext(i, DataDescNameContext);
        }
    };
    CommunicationDescriptionEntryFormat3Context.prototype.messageDateClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MessageDateClauseContext);
        }
        else {
            return this.getRuleContext(i, MessageDateClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat3Context.prototype.messageTimeClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MessageTimeClauseContext);
        }
        else {
            return this.getRuleContext(i, MessageTimeClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat3Context.prototype.symbolicTerminalClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SymbolicTerminalClauseContext);
        }
        else {
            return this.getRuleContext(i, SymbolicTerminalClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat3Context.prototype.textLengthClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TextLengthClauseContext);
        }
        else {
            return this.getRuleContext(i, TextLengthClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat3Context.prototype.endKeyClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EndKeyClauseContext);
        }
        else {
            return this.getRuleContext(i, EndKeyClauseContext);
        }
    };
    CommunicationDescriptionEntryFormat3Context.prototype.statusKeyClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatusKeyClauseContext);
        }
        else {
            return this.getRuleContext(i, StatusKeyClauseContext);
        }
    };
    Object.defineProperty(CommunicationDescriptionEntryFormat3Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_communicationDescriptionEntryFormat3; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CommunicationDescriptionEntryFormat3Context.prototype.enterRule = function (listener) {
        if (listener.enterCommunicationDescriptionEntryFormat3) {
            listener.enterCommunicationDescriptionEntryFormat3(this);
        }
    };
    // @Override
    CommunicationDescriptionEntryFormat3Context.prototype.exitRule = function (listener) {
        if (listener.exitCommunicationDescriptionEntryFormat3) {
            listener.exitCommunicationDescriptionEntryFormat3(this);
        }
    };
    // @Override
    CommunicationDescriptionEntryFormat3Context.prototype.accept = function (visitor) {
        if (visitor.visitCommunicationDescriptionEntryFormat3) {
            return visitor.visitCommunicationDescriptionEntryFormat3(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CommunicationDescriptionEntryFormat3Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.CommunicationDescriptionEntryFormat3Context = CommunicationDescriptionEntryFormat3Context;
var DestinationCountClauseContext = /** @class */ (function (_super) {
    __extends(DestinationCountClauseContext, _super);
    function DestinationCountClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DestinationCountClauseContext.prototype.DESTINATION = function () { return this.getToken(Cobol85Parser.DESTINATION, 0); };
    DestinationCountClauseContext.prototype.COUNT = function () { return this.getToken(Cobol85Parser.COUNT, 0); };
    DestinationCountClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    DestinationCountClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(DestinationCountClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_destinationCountClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DestinationCountClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDestinationCountClause) {
            listener.enterDestinationCountClause(this);
        }
    };
    // @Override
    DestinationCountClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDestinationCountClause) {
            listener.exitDestinationCountClause(this);
        }
    };
    // @Override
    DestinationCountClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDestinationCountClause) {
            return visitor.visitDestinationCountClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DestinationCountClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DestinationCountClauseContext = DestinationCountClauseContext;
var DestinationTableClauseContext = /** @class */ (function (_super) {
    __extends(DestinationTableClauseContext, _super);
    function DestinationTableClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DestinationTableClauseContext.prototype.DESTINATION = function () { return this.getToken(Cobol85Parser.DESTINATION, 0); };
    DestinationTableClauseContext.prototype.TABLE = function () { return this.getToken(Cobol85Parser.TABLE, 0); };
    DestinationTableClauseContext.prototype.OCCURS = function () { return this.getToken(Cobol85Parser.OCCURS, 0); };
    DestinationTableClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    DestinationTableClauseContext.prototype.TIMES = function () { return this.getToken(Cobol85Parser.TIMES, 0); };
    DestinationTableClauseContext.prototype.INDEXED = function () { return this.tryGetToken(Cobol85Parser.INDEXED, 0); };
    DestinationTableClauseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    DestinationTableClauseContext.prototype.indexName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IndexNameContext);
        }
        else {
            return this.getRuleContext(i, IndexNameContext);
        }
    };
    Object.defineProperty(DestinationTableClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_destinationTableClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DestinationTableClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDestinationTableClause) {
            listener.enterDestinationTableClause(this);
        }
    };
    // @Override
    DestinationTableClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDestinationTableClause) {
            listener.exitDestinationTableClause(this);
        }
    };
    // @Override
    DestinationTableClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDestinationTableClause) {
            return visitor.visitDestinationTableClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DestinationTableClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DestinationTableClauseContext = DestinationTableClauseContext;
var EndKeyClauseContext = /** @class */ (function (_super) {
    __extends(EndKeyClauseContext, _super);
    function EndKeyClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EndKeyClauseContext.prototype.END = function () { return this.getToken(Cobol85Parser.END, 0); };
    EndKeyClauseContext.prototype.KEY = function () { return this.getToken(Cobol85Parser.KEY, 0); };
    EndKeyClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    EndKeyClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(EndKeyClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_endKeyClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EndKeyClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterEndKeyClause) {
            listener.enterEndKeyClause(this);
        }
    };
    // @Override
    EndKeyClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitEndKeyClause) {
            listener.exitEndKeyClause(this);
        }
    };
    // @Override
    EndKeyClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitEndKeyClause) {
            return visitor.visitEndKeyClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EndKeyClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EndKeyClauseContext = EndKeyClauseContext;
var ErrorKeyClauseContext = /** @class */ (function (_super) {
    __extends(ErrorKeyClauseContext, _super);
    function ErrorKeyClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ErrorKeyClauseContext.prototype.ERROR = function () { return this.getToken(Cobol85Parser.ERROR, 0); };
    ErrorKeyClauseContext.prototype.KEY = function () { return this.getToken(Cobol85Parser.KEY, 0); };
    ErrorKeyClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    ErrorKeyClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ErrorKeyClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_errorKeyClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ErrorKeyClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterErrorKeyClause) {
            listener.enterErrorKeyClause(this);
        }
    };
    // @Override
    ErrorKeyClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitErrorKeyClause) {
            listener.exitErrorKeyClause(this);
        }
    };
    // @Override
    ErrorKeyClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitErrorKeyClause) {
            return visitor.visitErrorKeyClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ErrorKeyClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ErrorKeyClauseContext = ErrorKeyClauseContext;
var MessageCountClauseContext = /** @class */ (function (_super) {
    __extends(MessageCountClauseContext, _super);
    function MessageCountClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MessageCountClauseContext.prototype.COUNT = function () { return this.getToken(Cobol85Parser.COUNT, 0); };
    MessageCountClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    MessageCountClauseContext.prototype.MESSAGE = function () { return this.tryGetToken(Cobol85Parser.MESSAGE, 0); };
    MessageCountClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(MessageCountClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_messageCountClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MessageCountClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterMessageCountClause) {
            listener.enterMessageCountClause(this);
        }
    };
    // @Override
    MessageCountClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitMessageCountClause) {
            listener.exitMessageCountClause(this);
        }
    };
    // @Override
    MessageCountClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitMessageCountClause) {
            return visitor.visitMessageCountClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MessageCountClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MessageCountClauseContext = MessageCountClauseContext;
var MessageDateClauseContext = /** @class */ (function (_super) {
    __extends(MessageDateClauseContext, _super);
    function MessageDateClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MessageDateClauseContext.prototype.MESSAGE = function () { return this.getToken(Cobol85Parser.MESSAGE, 0); };
    MessageDateClauseContext.prototype.DATE = function () { return this.getToken(Cobol85Parser.DATE, 0); };
    MessageDateClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    MessageDateClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(MessageDateClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_messageDateClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MessageDateClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterMessageDateClause) {
            listener.enterMessageDateClause(this);
        }
    };
    // @Override
    MessageDateClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitMessageDateClause) {
            listener.exitMessageDateClause(this);
        }
    };
    // @Override
    MessageDateClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitMessageDateClause) {
            return visitor.visitMessageDateClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MessageDateClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MessageDateClauseContext = MessageDateClauseContext;
var MessageTimeClauseContext = /** @class */ (function (_super) {
    __extends(MessageTimeClauseContext, _super);
    function MessageTimeClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MessageTimeClauseContext.prototype.MESSAGE = function () { return this.getToken(Cobol85Parser.MESSAGE, 0); };
    MessageTimeClauseContext.prototype.TIME = function () { return this.getToken(Cobol85Parser.TIME, 0); };
    MessageTimeClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    MessageTimeClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(MessageTimeClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_messageTimeClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MessageTimeClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterMessageTimeClause) {
            listener.enterMessageTimeClause(this);
        }
    };
    // @Override
    MessageTimeClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitMessageTimeClause) {
            listener.exitMessageTimeClause(this);
        }
    };
    // @Override
    MessageTimeClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitMessageTimeClause) {
            return visitor.visitMessageTimeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MessageTimeClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MessageTimeClauseContext = MessageTimeClauseContext;
var StatusKeyClauseContext = /** @class */ (function (_super) {
    __extends(StatusKeyClauseContext, _super);
    function StatusKeyClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StatusKeyClauseContext.prototype.STATUS = function () { return this.getToken(Cobol85Parser.STATUS, 0); };
    StatusKeyClauseContext.prototype.KEY = function () { return this.getToken(Cobol85Parser.KEY, 0); };
    StatusKeyClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    StatusKeyClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(StatusKeyClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_statusKeyClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StatusKeyClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterStatusKeyClause) {
            listener.enterStatusKeyClause(this);
        }
    };
    // @Override
    StatusKeyClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitStatusKeyClause) {
            listener.exitStatusKeyClause(this);
        }
    };
    // @Override
    StatusKeyClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitStatusKeyClause) {
            return visitor.visitStatusKeyClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StatusKeyClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StatusKeyClauseContext = StatusKeyClauseContext;
var SymbolicDestinationClauseContext = /** @class */ (function (_super) {
    __extends(SymbolicDestinationClauseContext, _super);
    function SymbolicDestinationClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SymbolicDestinationClauseContext.prototype.DESTINATION = function () { return this.getToken(Cobol85Parser.DESTINATION, 0); };
    SymbolicDestinationClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    SymbolicDestinationClauseContext.prototype.SYMBOLIC = function () { return this.tryGetToken(Cobol85Parser.SYMBOLIC, 0); };
    SymbolicDestinationClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(SymbolicDestinationClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_symbolicDestinationClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SymbolicDestinationClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSymbolicDestinationClause) {
            listener.enterSymbolicDestinationClause(this);
        }
    };
    // @Override
    SymbolicDestinationClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSymbolicDestinationClause) {
            listener.exitSymbolicDestinationClause(this);
        }
    };
    // @Override
    SymbolicDestinationClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSymbolicDestinationClause) {
            return visitor.visitSymbolicDestinationClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SymbolicDestinationClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SymbolicDestinationClauseContext = SymbolicDestinationClauseContext;
var SymbolicQueueClauseContext = /** @class */ (function (_super) {
    __extends(SymbolicQueueClauseContext, _super);
    function SymbolicQueueClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SymbolicQueueClauseContext.prototype.QUEUE = function () { return this.getToken(Cobol85Parser.QUEUE, 0); };
    SymbolicQueueClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    SymbolicQueueClauseContext.prototype.SYMBOLIC = function () { return this.tryGetToken(Cobol85Parser.SYMBOLIC, 0); };
    SymbolicQueueClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(SymbolicQueueClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_symbolicQueueClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SymbolicQueueClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSymbolicQueueClause) {
            listener.enterSymbolicQueueClause(this);
        }
    };
    // @Override
    SymbolicQueueClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSymbolicQueueClause) {
            listener.exitSymbolicQueueClause(this);
        }
    };
    // @Override
    SymbolicQueueClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSymbolicQueueClause) {
            return visitor.visitSymbolicQueueClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SymbolicQueueClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SymbolicQueueClauseContext = SymbolicQueueClauseContext;
var SymbolicSourceClauseContext = /** @class */ (function (_super) {
    __extends(SymbolicSourceClauseContext, _super);
    function SymbolicSourceClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SymbolicSourceClauseContext.prototype.SOURCE = function () { return this.getToken(Cobol85Parser.SOURCE, 0); };
    SymbolicSourceClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    SymbolicSourceClauseContext.prototype.SYMBOLIC = function () { return this.tryGetToken(Cobol85Parser.SYMBOLIC, 0); };
    SymbolicSourceClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(SymbolicSourceClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_symbolicSourceClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SymbolicSourceClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSymbolicSourceClause) {
            listener.enterSymbolicSourceClause(this);
        }
    };
    // @Override
    SymbolicSourceClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSymbolicSourceClause) {
            listener.exitSymbolicSourceClause(this);
        }
    };
    // @Override
    SymbolicSourceClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSymbolicSourceClause) {
            return visitor.visitSymbolicSourceClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SymbolicSourceClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SymbolicSourceClauseContext = SymbolicSourceClauseContext;
var SymbolicTerminalClauseContext = /** @class */ (function (_super) {
    __extends(SymbolicTerminalClauseContext, _super);
    function SymbolicTerminalClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SymbolicTerminalClauseContext.prototype.TERMINAL = function () { return this.getToken(Cobol85Parser.TERMINAL, 0); };
    SymbolicTerminalClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    SymbolicTerminalClauseContext.prototype.SYMBOLIC = function () { return this.tryGetToken(Cobol85Parser.SYMBOLIC, 0); };
    SymbolicTerminalClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(SymbolicTerminalClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_symbolicTerminalClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SymbolicTerminalClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSymbolicTerminalClause) {
            listener.enterSymbolicTerminalClause(this);
        }
    };
    // @Override
    SymbolicTerminalClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSymbolicTerminalClause) {
            listener.exitSymbolicTerminalClause(this);
        }
    };
    // @Override
    SymbolicTerminalClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSymbolicTerminalClause) {
            return visitor.visitSymbolicTerminalClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SymbolicTerminalClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SymbolicTerminalClauseContext = SymbolicTerminalClauseContext;
var SymbolicSubQueueClauseContext = /** @class */ (function (_super) {
    __extends(SymbolicSubQueueClauseContext, _super);
    function SymbolicSubQueueClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SymbolicSubQueueClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    SymbolicSubQueueClauseContext.prototype.SUB_QUEUE_1 = function () { return this.tryGetToken(Cobol85Parser.SUB_QUEUE_1, 0); };
    SymbolicSubQueueClauseContext.prototype.SUB_QUEUE_2 = function () { return this.tryGetToken(Cobol85Parser.SUB_QUEUE_2, 0); };
    SymbolicSubQueueClauseContext.prototype.SUB_QUEUE_3 = function () { return this.tryGetToken(Cobol85Parser.SUB_QUEUE_3, 0); };
    SymbolicSubQueueClauseContext.prototype.SYMBOLIC = function () { return this.tryGetToken(Cobol85Parser.SYMBOLIC, 0); };
    SymbolicSubQueueClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(SymbolicSubQueueClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_symbolicSubQueueClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SymbolicSubQueueClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSymbolicSubQueueClause) {
            listener.enterSymbolicSubQueueClause(this);
        }
    };
    // @Override
    SymbolicSubQueueClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSymbolicSubQueueClause) {
            listener.exitSymbolicSubQueueClause(this);
        }
    };
    // @Override
    SymbolicSubQueueClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSymbolicSubQueueClause) {
            return visitor.visitSymbolicSubQueueClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SymbolicSubQueueClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SymbolicSubQueueClauseContext = SymbolicSubQueueClauseContext;
var TextLengthClauseContext = /** @class */ (function (_super) {
    __extends(TextLengthClauseContext, _super);
    function TextLengthClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TextLengthClauseContext.prototype.TEXT = function () { return this.getToken(Cobol85Parser.TEXT, 0); };
    TextLengthClauseContext.prototype.LENGTH = function () { return this.getToken(Cobol85Parser.LENGTH, 0); };
    TextLengthClauseContext.prototype.dataDescName = function () {
        return this.getRuleContext(0, DataDescNameContext);
    };
    TextLengthClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(TextLengthClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_textLengthClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TextLengthClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterTextLengthClause) {
            listener.enterTextLengthClause(this);
        }
    };
    // @Override
    TextLengthClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitTextLengthClause) {
            listener.exitTextLengthClause(this);
        }
    };
    // @Override
    TextLengthClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitTextLengthClause) {
            return visitor.visitTextLengthClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TextLengthClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TextLengthClauseContext = TextLengthClauseContext;
var LocalStorageSectionContext = /** @class */ (function (_super) {
    __extends(LocalStorageSectionContext, _super);
    function LocalStorageSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LocalStorageSectionContext.prototype.LOCAL_STORAGE = function () { return this.getToken(Cobol85Parser.LOCAL_STORAGE, 0); };
    LocalStorageSectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    LocalStorageSectionContext.prototype.DOT_FS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DOT_FS);
        }
        else {
            return this.getToken(Cobol85Parser.DOT_FS, i);
        }
    };
    LocalStorageSectionContext.prototype.LD = function () { return this.tryGetToken(Cobol85Parser.LD, 0); };
    LocalStorageSectionContext.prototype.localName = function () {
        return this.tryGetRuleContext(0, LocalNameContext);
    };
    LocalStorageSectionContext.prototype.dataDescriptionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataDescriptionEntryContext);
        }
        else {
            return this.getRuleContext(i, DataDescriptionEntryContext);
        }
    };
    Object.defineProperty(LocalStorageSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_localStorageSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LocalStorageSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterLocalStorageSection) {
            listener.enterLocalStorageSection(this);
        }
    };
    // @Override
    LocalStorageSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitLocalStorageSection) {
            listener.exitLocalStorageSection(this);
        }
    };
    // @Override
    LocalStorageSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitLocalStorageSection) {
            return visitor.visitLocalStorageSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LocalStorageSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LocalStorageSectionContext = LocalStorageSectionContext;
var ScreenSectionContext = /** @class */ (function (_super) {
    __extends(ScreenSectionContext, _super);
    function ScreenSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenSectionContext.prototype.SCREEN = function () { return this.getToken(Cobol85Parser.SCREEN, 0); };
    ScreenSectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    ScreenSectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ScreenSectionContext.prototype.screenDescriptionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionEntryContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionEntryContext);
        }
    };
    Object.defineProperty(ScreenSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenSection) {
            listener.enterScreenSection(this);
        }
    };
    // @Override
    ScreenSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenSection) {
            listener.exitScreenSection(this);
        }
    };
    // @Override
    ScreenSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenSection) {
            return visitor.visitScreenSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenSectionContext = ScreenSectionContext;
var ScreenDescriptionEntryContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionEntryContext, _super);
    function ScreenDescriptionEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionEntryContext.prototype.INTEGERLITERAL = function () { return this.getToken(Cobol85Parser.INTEGERLITERAL, 0); };
    ScreenDescriptionEntryContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ScreenDescriptionEntryContext.prototype.FILLER = function () { return this.tryGetToken(Cobol85Parser.FILLER, 0); };
    ScreenDescriptionEntryContext.prototype.screenName = function () {
        return this.tryGetRuleContext(0, ScreenNameContext);
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionBlankClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionBlankClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionBlankClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionBellClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionBellClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionBellClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionBlinkClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionBlinkClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionBlinkClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionEraseClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionEraseClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionEraseClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionLightClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionLightClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionLightClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionGridClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionGridClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionGridClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionReverseVideoClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionReverseVideoClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionReverseVideoClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionUnderlineClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionUnderlineClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionUnderlineClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionSizeClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionSizeClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionSizeClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionLineClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionLineClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionLineClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionColumnClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionColumnClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionColumnClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionForegroundColorClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionForegroundColorClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionForegroundColorClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionBackgroundColorClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionBackgroundColorClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionBackgroundColorClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionControlClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionControlClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionControlClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionValueClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionValueClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionValueClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionPictureClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionPictureClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionPictureClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionUsageClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionUsageClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionUsageClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionBlankWhenZeroClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionBlankWhenZeroClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionBlankWhenZeroClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionJustifiedClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionJustifiedClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionJustifiedClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionSignClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionSignClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionSignClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionAutoClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionAutoClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionAutoClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionSecureClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionSecureClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionSecureClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionRequiredClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionRequiredClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionRequiredClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionPromptClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionPromptClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionPromptClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionFullClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionFullClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionFullClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionZeroFillClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionZeroFillClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionZeroFillClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionFromClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionFromClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionFromClauseContext);
        }
    };
    ScreenDescriptionEntryContext.prototype.screenDescriptionUsingClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ScreenDescriptionUsingClauseContext);
        }
        else {
            return this.getRuleContext(i, ScreenDescriptionUsingClauseContext);
        }
    };
    Object.defineProperty(ScreenDescriptionEntryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionEntry; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionEntry) {
            listener.enterScreenDescriptionEntry(this);
        }
    };
    // @Override
    ScreenDescriptionEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionEntry) {
            listener.exitScreenDescriptionEntry(this);
        }
    };
    // @Override
    ScreenDescriptionEntryContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionEntry) {
            return visitor.visitScreenDescriptionEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionEntryContext = ScreenDescriptionEntryContext;
var ScreenDescriptionBlankClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionBlankClauseContext, _super);
    function ScreenDescriptionBlankClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionBlankClauseContext.prototype.BLANK = function () { return this.getToken(Cobol85Parser.BLANK, 0); };
    ScreenDescriptionBlankClauseContext.prototype.SCREEN = function () { return this.tryGetToken(Cobol85Parser.SCREEN, 0); };
    ScreenDescriptionBlankClauseContext.prototype.LINE = function () { return this.tryGetToken(Cobol85Parser.LINE, 0); };
    Object.defineProperty(ScreenDescriptionBlankClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionBlankClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionBlankClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionBlankClause) {
            listener.enterScreenDescriptionBlankClause(this);
        }
    };
    // @Override
    ScreenDescriptionBlankClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionBlankClause) {
            listener.exitScreenDescriptionBlankClause(this);
        }
    };
    // @Override
    ScreenDescriptionBlankClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionBlankClause) {
            return visitor.visitScreenDescriptionBlankClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionBlankClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionBlankClauseContext = ScreenDescriptionBlankClauseContext;
var ScreenDescriptionBellClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionBellClauseContext, _super);
    function ScreenDescriptionBellClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionBellClauseContext.prototype.BELL = function () { return this.tryGetToken(Cobol85Parser.BELL, 0); };
    ScreenDescriptionBellClauseContext.prototype.BEEP = function () { return this.tryGetToken(Cobol85Parser.BEEP, 0); };
    Object.defineProperty(ScreenDescriptionBellClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionBellClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionBellClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionBellClause) {
            listener.enterScreenDescriptionBellClause(this);
        }
    };
    // @Override
    ScreenDescriptionBellClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionBellClause) {
            listener.exitScreenDescriptionBellClause(this);
        }
    };
    // @Override
    ScreenDescriptionBellClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionBellClause) {
            return visitor.visitScreenDescriptionBellClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionBellClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionBellClauseContext = ScreenDescriptionBellClauseContext;
var ScreenDescriptionBlinkClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionBlinkClauseContext, _super);
    function ScreenDescriptionBlinkClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionBlinkClauseContext.prototype.BLINK = function () { return this.getToken(Cobol85Parser.BLINK, 0); };
    Object.defineProperty(ScreenDescriptionBlinkClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionBlinkClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionBlinkClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionBlinkClause) {
            listener.enterScreenDescriptionBlinkClause(this);
        }
    };
    // @Override
    ScreenDescriptionBlinkClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionBlinkClause) {
            listener.exitScreenDescriptionBlinkClause(this);
        }
    };
    // @Override
    ScreenDescriptionBlinkClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionBlinkClause) {
            return visitor.visitScreenDescriptionBlinkClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionBlinkClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionBlinkClauseContext = ScreenDescriptionBlinkClauseContext;
var ScreenDescriptionEraseClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionEraseClauseContext, _super);
    function ScreenDescriptionEraseClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionEraseClauseContext.prototype.ERASE = function () { return this.getToken(Cobol85Parser.ERASE, 0); };
    ScreenDescriptionEraseClauseContext.prototype.EOL = function () { return this.tryGetToken(Cobol85Parser.EOL, 0); };
    ScreenDescriptionEraseClauseContext.prototype.EOS = function () { return this.tryGetToken(Cobol85Parser.EOS, 0); };
    Object.defineProperty(ScreenDescriptionEraseClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionEraseClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionEraseClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionEraseClause) {
            listener.enterScreenDescriptionEraseClause(this);
        }
    };
    // @Override
    ScreenDescriptionEraseClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionEraseClause) {
            listener.exitScreenDescriptionEraseClause(this);
        }
    };
    // @Override
    ScreenDescriptionEraseClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionEraseClause) {
            return visitor.visitScreenDescriptionEraseClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionEraseClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionEraseClauseContext = ScreenDescriptionEraseClauseContext;
var ScreenDescriptionLightClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionLightClauseContext, _super);
    function ScreenDescriptionLightClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionLightClauseContext.prototype.HIGHLIGHT = function () { return this.tryGetToken(Cobol85Parser.HIGHLIGHT, 0); };
    ScreenDescriptionLightClauseContext.prototype.LOWLIGHT = function () { return this.tryGetToken(Cobol85Parser.LOWLIGHT, 0); };
    Object.defineProperty(ScreenDescriptionLightClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionLightClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionLightClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionLightClause) {
            listener.enterScreenDescriptionLightClause(this);
        }
    };
    // @Override
    ScreenDescriptionLightClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionLightClause) {
            listener.exitScreenDescriptionLightClause(this);
        }
    };
    // @Override
    ScreenDescriptionLightClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionLightClause) {
            return visitor.visitScreenDescriptionLightClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionLightClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionLightClauseContext = ScreenDescriptionLightClauseContext;
var ScreenDescriptionGridClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionGridClauseContext, _super);
    function ScreenDescriptionGridClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionGridClauseContext.prototype.GRID = function () { return this.tryGetToken(Cobol85Parser.GRID, 0); };
    ScreenDescriptionGridClauseContext.prototype.LEFTLINE = function () { return this.tryGetToken(Cobol85Parser.LEFTLINE, 0); };
    ScreenDescriptionGridClauseContext.prototype.OVERLINE = function () { return this.tryGetToken(Cobol85Parser.OVERLINE, 0); };
    Object.defineProperty(ScreenDescriptionGridClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionGridClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionGridClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionGridClause) {
            listener.enterScreenDescriptionGridClause(this);
        }
    };
    // @Override
    ScreenDescriptionGridClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionGridClause) {
            listener.exitScreenDescriptionGridClause(this);
        }
    };
    // @Override
    ScreenDescriptionGridClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionGridClause) {
            return visitor.visitScreenDescriptionGridClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionGridClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionGridClauseContext = ScreenDescriptionGridClauseContext;
var ScreenDescriptionReverseVideoClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionReverseVideoClauseContext, _super);
    function ScreenDescriptionReverseVideoClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionReverseVideoClauseContext.prototype.REVERSE_VIDEO = function () { return this.getToken(Cobol85Parser.REVERSE_VIDEO, 0); };
    Object.defineProperty(ScreenDescriptionReverseVideoClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionReverseVideoClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionReverseVideoClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionReverseVideoClause) {
            listener.enterScreenDescriptionReverseVideoClause(this);
        }
    };
    // @Override
    ScreenDescriptionReverseVideoClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionReverseVideoClause) {
            listener.exitScreenDescriptionReverseVideoClause(this);
        }
    };
    // @Override
    ScreenDescriptionReverseVideoClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionReverseVideoClause) {
            return visitor.visitScreenDescriptionReverseVideoClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionReverseVideoClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionReverseVideoClauseContext = ScreenDescriptionReverseVideoClauseContext;
var ScreenDescriptionUnderlineClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionUnderlineClauseContext, _super);
    function ScreenDescriptionUnderlineClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionUnderlineClauseContext.prototype.UNDERLINE = function () { return this.getToken(Cobol85Parser.UNDERLINE, 0); };
    Object.defineProperty(ScreenDescriptionUnderlineClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionUnderlineClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionUnderlineClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionUnderlineClause) {
            listener.enterScreenDescriptionUnderlineClause(this);
        }
    };
    // @Override
    ScreenDescriptionUnderlineClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionUnderlineClause) {
            listener.exitScreenDescriptionUnderlineClause(this);
        }
    };
    // @Override
    ScreenDescriptionUnderlineClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionUnderlineClause) {
            return visitor.visitScreenDescriptionUnderlineClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionUnderlineClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionUnderlineClauseContext = ScreenDescriptionUnderlineClauseContext;
var ScreenDescriptionSizeClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionSizeClauseContext, _super);
    function ScreenDescriptionSizeClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionSizeClauseContext.prototype.SIZE = function () { return this.getToken(Cobol85Parser.SIZE, 0); };
    ScreenDescriptionSizeClauseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ScreenDescriptionSizeClauseContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    ScreenDescriptionSizeClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ScreenDescriptionSizeClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionSizeClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionSizeClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionSizeClause) {
            listener.enterScreenDescriptionSizeClause(this);
        }
    };
    // @Override
    ScreenDescriptionSizeClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionSizeClause) {
            listener.exitScreenDescriptionSizeClause(this);
        }
    };
    // @Override
    ScreenDescriptionSizeClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionSizeClause) {
            return visitor.visitScreenDescriptionSizeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionSizeClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionSizeClauseContext = ScreenDescriptionSizeClauseContext;
var ScreenDescriptionLineClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionLineClauseContext, _super);
    function ScreenDescriptionLineClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionLineClauseContext.prototype.LINE = function () { return this.getToken(Cobol85Parser.LINE, 0); };
    ScreenDescriptionLineClauseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ScreenDescriptionLineClauseContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    ScreenDescriptionLineClauseContext.prototype.PLUS = function () { return this.tryGetToken(Cobol85Parser.PLUS, 0); };
    ScreenDescriptionLineClauseContext.prototype.PLUSCHAR = function () { return this.tryGetToken(Cobol85Parser.PLUSCHAR, 0); };
    ScreenDescriptionLineClauseContext.prototype.MINUSCHAR = function () { return this.tryGetToken(Cobol85Parser.MINUSCHAR, 0); };
    ScreenDescriptionLineClauseContext.prototype.NUMBER = function () { return this.tryGetToken(Cobol85Parser.NUMBER, 0); };
    ScreenDescriptionLineClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ScreenDescriptionLineClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionLineClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionLineClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionLineClause) {
            listener.enterScreenDescriptionLineClause(this);
        }
    };
    // @Override
    ScreenDescriptionLineClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionLineClause) {
            listener.exitScreenDescriptionLineClause(this);
        }
    };
    // @Override
    ScreenDescriptionLineClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionLineClause) {
            return visitor.visitScreenDescriptionLineClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionLineClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionLineClauseContext = ScreenDescriptionLineClauseContext;
var ScreenDescriptionColumnClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionColumnClauseContext, _super);
    function ScreenDescriptionColumnClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionColumnClauseContext.prototype.COLUMN = function () { return this.tryGetToken(Cobol85Parser.COLUMN, 0); };
    ScreenDescriptionColumnClauseContext.prototype.COL = function () { return this.tryGetToken(Cobol85Parser.COL, 0); };
    ScreenDescriptionColumnClauseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ScreenDescriptionColumnClauseContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    ScreenDescriptionColumnClauseContext.prototype.PLUS = function () { return this.tryGetToken(Cobol85Parser.PLUS, 0); };
    ScreenDescriptionColumnClauseContext.prototype.PLUSCHAR = function () { return this.tryGetToken(Cobol85Parser.PLUSCHAR, 0); };
    ScreenDescriptionColumnClauseContext.prototype.MINUSCHAR = function () { return this.tryGetToken(Cobol85Parser.MINUSCHAR, 0); };
    ScreenDescriptionColumnClauseContext.prototype.NUMBER = function () { return this.tryGetToken(Cobol85Parser.NUMBER, 0); };
    ScreenDescriptionColumnClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ScreenDescriptionColumnClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionColumnClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionColumnClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionColumnClause) {
            listener.enterScreenDescriptionColumnClause(this);
        }
    };
    // @Override
    ScreenDescriptionColumnClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionColumnClause) {
            listener.exitScreenDescriptionColumnClause(this);
        }
    };
    // @Override
    ScreenDescriptionColumnClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionColumnClause) {
            return visitor.visitScreenDescriptionColumnClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionColumnClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionColumnClauseContext = ScreenDescriptionColumnClauseContext;
var ScreenDescriptionForegroundColorClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionForegroundColorClauseContext, _super);
    function ScreenDescriptionForegroundColorClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionForegroundColorClauseContext.prototype.FOREGROUND_COLOR = function () { return this.tryGetToken(Cobol85Parser.FOREGROUND_COLOR, 0); };
    ScreenDescriptionForegroundColorClauseContext.prototype.FOREGROUND_COLOUR = function () { return this.tryGetToken(Cobol85Parser.FOREGROUND_COLOUR, 0); };
    ScreenDescriptionForegroundColorClauseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ScreenDescriptionForegroundColorClauseContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    ScreenDescriptionForegroundColorClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ScreenDescriptionForegroundColorClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionForegroundColorClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionForegroundColorClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionForegroundColorClause) {
            listener.enterScreenDescriptionForegroundColorClause(this);
        }
    };
    // @Override
    ScreenDescriptionForegroundColorClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionForegroundColorClause) {
            listener.exitScreenDescriptionForegroundColorClause(this);
        }
    };
    // @Override
    ScreenDescriptionForegroundColorClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionForegroundColorClause) {
            return visitor.visitScreenDescriptionForegroundColorClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionForegroundColorClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionForegroundColorClauseContext = ScreenDescriptionForegroundColorClauseContext;
var ScreenDescriptionBackgroundColorClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionBackgroundColorClauseContext, _super);
    function ScreenDescriptionBackgroundColorClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionBackgroundColorClauseContext.prototype.BACKGROUND_COLOR = function () { return this.tryGetToken(Cobol85Parser.BACKGROUND_COLOR, 0); };
    ScreenDescriptionBackgroundColorClauseContext.prototype.BACKGROUND_COLOUR = function () { return this.tryGetToken(Cobol85Parser.BACKGROUND_COLOUR, 0); };
    ScreenDescriptionBackgroundColorClauseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ScreenDescriptionBackgroundColorClauseContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    ScreenDescriptionBackgroundColorClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ScreenDescriptionBackgroundColorClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionBackgroundColorClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionBackgroundColorClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionBackgroundColorClause) {
            listener.enterScreenDescriptionBackgroundColorClause(this);
        }
    };
    // @Override
    ScreenDescriptionBackgroundColorClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionBackgroundColorClause) {
            listener.exitScreenDescriptionBackgroundColorClause(this);
        }
    };
    // @Override
    ScreenDescriptionBackgroundColorClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionBackgroundColorClause) {
            return visitor.visitScreenDescriptionBackgroundColorClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionBackgroundColorClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionBackgroundColorClauseContext = ScreenDescriptionBackgroundColorClauseContext;
var ScreenDescriptionControlClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionControlClauseContext, _super);
    function ScreenDescriptionControlClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionControlClauseContext.prototype.CONTROL = function () { return this.getToken(Cobol85Parser.CONTROL, 0); };
    ScreenDescriptionControlClauseContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    ScreenDescriptionControlClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ScreenDescriptionControlClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionControlClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionControlClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionControlClause) {
            listener.enterScreenDescriptionControlClause(this);
        }
    };
    // @Override
    ScreenDescriptionControlClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionControlClause) {
            listener.exitScreenDescriptionControlClause(this);
        }
    };
    // @Override
    ScreenDescriptionControlClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionControlClause) {
            return visitor.visitScreenDescriptionControlClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionControlClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionControlClauseContext = ScreenDescriptionControlClauseContext;
var ScreenDescriptionValueClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionValueClauseContext, _super);
    function ScreenDescriptionValueClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionValueClauseContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    ScreenDescriptionValueClauseContext.prototype.VALUE = function () { return this.tryGetToken(Cobol85Parser.VALUE, 0); };
    ScreenDescriptionValueClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ScreenDescriptionValueClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionValueClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionValueClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionValueClause) {
            listener.enterScreenDescriptionValueClause(this);
        }
    };
    // @Override
    ScreenDescriptionValueClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionValueClause) {
            listener.exitScreenDescriptionValueClause(this);
        }
    };
    // @Override
    ScreenDescriptionValueClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionValueClause) {
            return visitor.visitScreenDescriptionValueClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionValueClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionValueClauseContext = ScreenDescriptionValueClauseContext;
var ScreenDescriptionPictureClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionPictureClauseContext, _super);
    function ScreenDescriptionPictureClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionPictureClauseContext.prototype.pictureString = function () {
        return this.getRuleContext(0, PictureStringContext);
    };
    ScreenDescriptionPictureClauseContext.prototype.PICTURE = function () { return this.tryGetToken(Cobol85Parser.PICTURE, 0); };
    ScreenDescriptionPictureClauseContext.prototype.PIC = function () { return this.tryGetToken(Cobol85Parser.PIC, 0); };
    ScreenDescriptionPictureClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ScreenDescriptionPictureClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionPictureClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionPictureClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionPictureClause) {
            listener.enterScreenDescriptionPictureClause(this);
        }
    };
    // @Override
    ScreenDescriptionPictureClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionPictureClause) {
            listener.exitScreenDescriptionPictureClause(this);
        }
    };
    // @Override
    ScreenDescriptionPictureClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionPictureClause) {
            return visitor.visitScreenDescriptionPictureClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionPictureClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionPictureClauseContext = ScreenDescriptionPictureClauseContext;
var ScreenDescriptionFromClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionFromClauseContext, _super);
    function ScreenDescriptionFromClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionFromClauseContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    ScreenDescriptionFromClauseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ScreenDescriptionFromClauseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    ScreenDescriptionFromClauseContext.prototype.screenDescriptionToClause = function () {
        return this.tryGetRuleContext(0, ScreenDescriptionToClauseContext);
    };
    Object.defineProperty(ScreenDescriptionFromClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionFromClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionFromClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionFromClause) {
            listener.enterScreenDescriptionFromClause(this);
        }
    };
    // @Override
    ScreenDescriptionFromClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionFromClause) {
            listener.exitScreenDescriptionFromClause(this);
        }
    };
    // @Override
    ScreenDescriptionFromClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionFromClause) {
            return visitor.visitScreenDescriptionFromClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionFromClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionFromClauseContext = ScreenDescriptionFromClauseContext;
var ScreenDescriptionToClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionToClauseContext, _super);
    function ScreenDescriptionToClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionToClauseContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    ScreenDescriptionToClauseContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(ScreenDescriptionToClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionToClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionToClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionToClause) {
            listener.enterScreenDescriptionToClause(this);
        }
    };
    // @Override
    ScreenDescriptionToClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionToClause) {
            listener.exitScreenDescriptionToClause(this);
        }
    };
    // @Override
    ScreenDescriptionToClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionToClause) {
            return visitor.visitScreenDescriptionToClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionToClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionToClauseContext = ScreenDescriptionToClauseContext;
var ScreenDescriptionUsingClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionUsingClauseContext, _super);
    function ScreenDescriptionUsingClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionUsingClauseContext.prototype.USING = function () { return this.getToken(Cobol85Parser.USING, 0); };
    ScreenDescriptionUsingClauseContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(ScreenDescriptionUsingClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionUsingClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionUsingClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionUsingClause) {
            listener.enterScreenDescriptionUsingClause(this);
        }
    };
    // @Override
    ScreenDescriptionUsingClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionUsingClause) {
            listener.exitScreenDescriptionUsingClause(this);
        }
    };
    // @Override
    ScreenDescriptionUsingClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionUsingClause) {
            return visitor.visitScreenDescriptionUsingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionUsingClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionUsingClauseContext = ScreenDescriptionUsingClauseContext;
var ScreenDescriptionUsageClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionUsageClauseContext, _super);
    function ScreenDescriptionUsageClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionUsageClauseContext.prototype.DISPLAY = function () { return this.tryGetToken(Cobol85Parser.DISPLAY, 0); };
    ScreenDescriptionUsageClauseContext.prototype.DISPLAY_1 = function () { return this.tryGetToken(Cobol85Parser.DISPLAY_1, 0); };
    ScreenDescriptionUsageClauseContext.prototype.USAGE = function () { return this.tryGetToken(Cobol85Parser.USAGE, 0); };
    ScreenDescriptionUsageClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ScreenDescriptionUsageClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionUsageClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionUsageClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionUsageClause) {
            listener.enterScreenDescriptionUsageClause(this);
        }
    };
    // @Override
    ScreenDescriptionUsageClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionUsageClause) {
            listener.exitScreenDescriptionUsageClause(this);
        }
    };
    // @Override
    ScreenDescriptionUsageClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionUsageClause) {
            return visitor.visitScreenDescriptionUsageClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionUsageClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionUsageClauseContext = ScreenDescriptionUsageClauseContext;
var ScreenDescriptionBlankWhenZeroClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionBlankWhenZeroClauseContext, _super);
    function ScreenDescriptionBlankWhenZeroClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionBlankWhenZeroClauseContext.prototype.BLANK = function () { return this.getToken(Cobol85Parser.BLANK, 0); };
    ScreenDescriptionBlankWhenZeroClauseContext.prototype.ZERO = function () { return this.getToken(Cobol85Parser.ZERO, 0); };
    ScreenDescriptionBlankWhenZeroClauseContext.prototype.WHEN = function () { return this.tryGetToken(Cobol85Parser.WHEN, 0); };
    Object.defineProperty(ScreenDescriptionBlankWhenZeroClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionBlankWhenZeroClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionBlankWhenZeroClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionBlankWhenZeroClause) {
            listener.enterScreenDescriptionBlankWhenZeroClause(this);
        }
    };
    // @Override
    ScreenDescriptionBlankWhenZeroClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionBlankWhenZeroClause) {
            listener.exitScreenDescriptionBlankWhenZeroClause(this);
        }
    };
    // @Override
    ScreenDescriptionBlankWhenZeroClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionBlankWhenZeroClause) {
            return visitor.visitScreenDescriptionBlankWhenZeroClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionBlankWhenZeroClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionBlankWhenZeroClauseContext = ScreenDescriptionBlankWhenZeroClauseContext;
var ScreenDescriptionJustifiedClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionJustifiedClauseContext, _super);
    function ScreenDescriptionJustifiedClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionJustifiedClauseContext.prototype.JUSTIFIED = function () { return this.tryGetToken(Cobol85Parser.JUSTIFIED, 0); };
    ScreenDescriptionJustifiedClauseContext.prototype.JUST = function () { return this.tryGetToken(Cobol85Parser.JUST, 0); };
    ScreenDescriptionJustifiedClauseContext.prototype.RIGHT = function () { return this.tryGetToken(Cobol85Parser.RIGHT, 0); };
    Object.defineProperty(ScreenDescriptionJustifiedClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionJustifiedClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionJustifiedClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionJustifiedClause) {
            listener.enterScreenDescriptionJustifiedClause(this);
        }
    };
    // @Override
    ScreenDescriptionJustifiedClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionJustifiedClause) {
            listener.exitScreenDescriptionJustifiedClause(this);
        }
    };
    // @Override
    ScreenDescriptionJustifiedClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionJustifiedClause) {
            return visitor.visitScreenDescriptionJustifiedClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionJustifiedClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionJustifiedClauseContext = ScreenDescriptionJustifiedClauseContext;
var ScreenDescriptionSignClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionSignClauseContext, _super);
    function ScreenDescriptionSignClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionSignClauseContext.prototype.LEADING = function () { return this.tryGetToken(Cobol85Parser.LEADING, 0); };
    ScreenDescriptionSignClauseContext.prototype.TRAILING = function () { return this.tryGetToken(Cobol85Parser.TRAILING, 0); };
    ScreenDescriptionSignClauseContext.prototype.SIGN = function () { return this.tryGetToken(Cobol85Parser.SIGN, 0); };
    ScreenDescriptionSignClauseContext.prototype.SEPARATE = function () { return this.tryGetToken(Cobol85Parser.SEPARATE, 0); };
    ScreenDescriptionSignClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    ScreenDescriptionSignClauseContext.prototype.CHARACTER = function () { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); };
    Object.defineProperty(ScreenDescriptionSignClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionSignClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionSignClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionSignClause) {
            listener.enterScreenDescriptionSignClause(this);
        }
    };
    // @Override
    ScreenDescriptionSignClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionSignClause) {
            listener.exitScreenDescriptionSignClause(this);
        }
    };
    // @Override
    ScreenDescriptionSignClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionSignClause) {
            return visitor.visitScreenDescriptionSignClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionSignClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionSignClauseContext = ScreenDescriptionSignClauseContext;
var ScreenDescriptionAutoClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionAutoClauseContext, _super);
    function ScreenDescriptionAutoClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionAutoClauseContext.prototype.AUTO = function () { return this.tryGetToken(Cobol85Parser.AUTO, 0); };
    ScreenDescriptionAutoClauseContext.prototype.AUTO_SKIP = function () { return this.tryGetToken(Cobol85Parser.AUTO_SKIP, 0); };
    Object.defineProperty(ScreenDescriptionAutoClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionAutoClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionAutoClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionAutoClause) {
            listener.enterScreenDescriptionAutoClause(this);
        }
    };
    // @Override
    ScreenDescriptionAutoClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionAutoClause) {
            listener.exitScreenDescriptionAutoClause(this);
        }
    };
    // @Override
    ScreenDescriptionAutoClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionAutoClause) {
            return visitor.visitScreenDescriptionAutoClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionAutoClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionAutoClauseContext = ScreenDescriptionAutoClauseContext;
var ScreenDescriptionSecureClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionSecureClauseContext, _super);
    function ScreenDescriptionSecureClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionSecureClauseContext.prototype.SECURE = function () { return this.tryGetToken(Cobol85Parser.SECURE, 0); };
    ScreenDescriptionSecureClauseContext.prototype.NO_ECHO = function () { return this.tryGetToken(Cobol85Parser.NO_ECHO, 0); };
    Object.defineProperty(ScreenDescriptionSecureClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionSecureClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionSecureClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionSecureClause) {
            listener.enterScreenDescriptionSecureClause(this);
        }
    };
    // @Override
    ScreenDescriptionSecureClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionSecureClause) {
            listener.exitScreenDescriptionSecureClause(this);
        }
    };
    // @Override
    ScreenDescriptionSecureClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionSecureClause) {
            return visitor.visitScreenDescriptionSecureClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionSecureClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionSecureClauseContext = ScreenDescriptionSecureClauseContext;
var ScreenDescriptionRequiredClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionRequiredClauseContext, _super);
    function ScreenDescriptionRequiredClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionRequiredClauseContext.prototype.REQUIRED = function () { return this.tryGetToken(Cobol85Parser.REQUIRED, 0); };
    ScreenDescriptionRequiredClauseContext.prototype.EMPTY_CHECK = function () { return this.tryGetToken(Cobol85Parser.EMPTY_CHECK, 0); };
    Object.defineProperty(ScreenDescriptionRequiredClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionRequiredClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionRequiredClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionRequiredClause) {
            listener.enterScreenDescriptionRequiredClause(this);
        }
    };
    // @Override
    ScreenDescriptionRequiredClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionRequiredClause) {
            listener.exitScreenDescriptionRequiredClause(this);
        }
    };
    // @Override
    ScreenDescriptionRequiredClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionRequiredClause) {
            return visitor.visitScreenDescriptionRequiredClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionRequiredClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionRequiredClauseContext = ScreenDescriptionRequiredClauseContext;
var ScreenDescriptionPromptClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionPromptClauseContext, _super);
    function ScreenDescriptionPromptClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionPromptClauseContext.prototype.PROMPT = function () { return this.getToken(Cobol85Parser.PROMPT, 0); };
    ScreenDescriptionPromptClauseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ScreenDescriptionPromptClauseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    ScreenDescriptionPromptClauseContext.prototype.CHARACTER = function () { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); };
    ScreenDescriptionPromptClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    ScreenDescriptionPromptClauseContext.prototype.screenDescriptionPromptOccursClause = function () {
        return this.tryGetRuleContext(0, ScreenDescriptionPromptOccursClauseContext);
    };
    Object.defineProperty(ScreenDescriptionPromptClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionPromptClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionPromptClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionPromptClause) {
            listener.enterScreenDescriptionPromptClause(this);
        }
    };
    // @Override
    ScreenDescriptionPromptClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionPromptClause) {
            listener.exitScreenDescriptionPromptClause(this);
        }
    };
    // @Override
    ScreenDescriptionPromptClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionPromptClause) {
            return visitor.visitScreenDescriptionPromptClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionPromptClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionPromptClauseContext = ScreenDescriptionPromptClauseContext;
var ScreenDescriptionPromptOccursClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionPromptOccursClauseContext, _super);
    function ScreenDescriptionPromptOccursClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionPromptOccursClauseContext.prototype.OCCURS = function () { return this.getToken(Cobol85Parser.OCCURS, 0); };
    ScreenDescriptionPromptOccursClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    ScreenDescriptionPromptOccursClauseContext.prototype.TIMES = function () { return this.tryGetToken(Cobol85Parser.TIMES, 0); };
    Object.defineProperty(ScreenDescriptionPromptOccursClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionPromptOccursClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionPromptOccursClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionPromptOccursClause) {
            listener.enterScreenDescriptionPromptOccursClause(this);
        }
    };
    // @Override
    ScreenDescriptionPromptOccursClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionPromptOccursClause) {
            listener.exitScreenDescriptionPromptOccursClause(this);
        }
    };
    // @Override
    ScreenDescriptionPromptOccursClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionPromptOccursClause) {
            return visitor.visitScreenDescriptionPromptOccursClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionPromptOccursClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionPromptOccursClauseContext = ScreenDescriptionPromptOccursClauseContext;
var ScreenDescriptionFullClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionFullClauseContext, _super);
    function ScreenDescriptionFullClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionFullClauseContext.prototype.FULL = function () { return this.tryGetToken(Cobol85Parser.FULL, 0); };
    ScreenDescriptionFullClauseContext.prototype.LENGTH_CHECK = function () { return this.tryGetToken(Cobol85Parser.LENGTH_CHECK, 0); };
    Object.defineProperty(ScreenDescriptionFullClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionFullClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionFullClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionFullClause) {
            listener.enterScreenDescriptionFullClause(this);
        }
    };
    // @Override
    ScreenDescriptionFullClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionFullClause) {
            listener.exitScreenDescriptionFullClause(this);
        }
    };
    // @Override
    ScreenDescriptionFullClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionFullClause) {
            return visitor.visitScreenDescriptionFullClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionFullClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionFullClauseContext = ScreenDescriptionFullClauseContext;
var ScreenDescriptionZeroFillClauseContext = /** @class */ (function (_super) {
    __extends(ScreenDescriptionZeroFillClauseContext, _super);
    function ScreenDescriptionZeroFillClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenDescriptionZeroFillClauseContext.prototype.ZERO_FILL = function () { return this.getToken(Cobol85Parser.ZERO_FILL, 0); };
    Object.defineProperty(ScreenDescriptionZeroFillClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenDescriptionZeroFillClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenDescriptionZeroFillClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenDescriptionZeroFillClause) {
            listener.enterScreenDescriptionZeroFillClause(this);
        }
    };
    // @Override
    ScreenDescriptionZeroFillClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenDescriptionZeroFillClause) {
            listener.exitScreenDescriptionZeroFillClause(this);
        }
    };
    // @Override
    ScreenDescriptionZeroFillClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenDescriptionZeroFillClause) {
            return visitor.visitScreenDescriptionZeroFillClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenDescriptionZeroFillClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenDescriptionZeroFillClauseContext = ScreenDescriptionZeroFillClauseContext;
var ReportSectionContext = /** @class */ (function (_super) {
    __extends(ReportSectionContext, _super);
    function ReportSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportSectionContext.prototype.REPORT = function () { return this.getToken(Cobol85Parser.REPORT, 0); };
    ReportSectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    ReportSectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ReportSectionContext.prototype.reportDescription = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportDescriptionContext);
        }
        else {
            return this.getRuleContext(i, ReportDescriptionContext);
        }
    };
    Object.defineProperty(ReportSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterReportSection) {
            listener.enterReportSection(this);
        }
    };
    // @Override
    ReportSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitReportSection) {
            listener.exitReportSection(this);
        }
    };
    // @Override
    ReportSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitReportSection) {
            return visitor.visitReportSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportSectionContext = ReportSectionContext;
var ReportDescriptionContext = /** @class */ (function (_super) {
    __extends(ReportDescriptionContext, _super);
    function ReportDescriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportDescriptionContext.prototype.reportDescriptionEntry = function () {
        return this.getRuleContext(0, ReportDescriptionEntryContext);
    };
    ReportDescriptionContext.prototype.reportGroupDescriptionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupDescriptionEntryContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupDescriptionEntryContext);
        }
    };
    Object.defineProperty(ReportDescriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportDescription; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportDescriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterReportDescription) {
            listener.enterReportDescription(this);
        }
    };
    // @Override
    ReportDescriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitReportDescription) {
            listener.exitReportDescription(this);
        }
    };
    // @Override
    ReportDescriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitReportDescription) {
            return visitor.visitReportDescription(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportDescriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportDescriptionContext = ReportDescriptionContext;
var ReportDescriptionEntryContext = /** @class */ (function (_super) {
    __extends(ReportDescriptionEntryContext, _super);
    function ReportDescriptionEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportDescriptionEntryContext.prototype.RD = function () { return this.getToken(Cobol85Parser.RD, 0); };
    ReportDescriptionEntryContext.prototype.reportName = function () {
        return this.getRuleContext(0, ReportNameContext);
    };
    ReportDescriptionEntryContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ReportDescriptionEntryContext.prototype.reportDescriptionGlobalClause = function () {
        return this.tryGetRuleContext(0, ReportDescriptionGlobalClauseContext);
    };
    ReportDescriptionEntryContext.prototype.reportDescriptionPageLimitClause = function () {
        return this.tryGetRuleContext(0, ReportDescriptionPageLimitClauseContext);
    };
    ReportDescriptionEntryContext.prototype.reportDescriptionHeadingClause = function () {
        return this.tryGetRuleContext(0, ReportDescriptionHeadingClauseContext);
    };
    ReportDescriptionEntryContext.prototype.reportDescriptionFirstDetailClause = function () {
        return this.tryGetRuleContext(0, ReportDescriptionFirstDetailClauseContext);
    };
    ReportDescriptionEntryContext.prototype.reportDescriptionLastDetailClause = function () {
        return this.tryGetRuleContext(0, ReportDescriptionLastDetailClauseContext);
    };
    ReportDescriptionEntryContext.prototype.reportDescriptionFootingClause = function () {
        return this.tryGetRuleContext(0, ReportDescriptionFootingClauseContext);
    };
    Object.defineProperty(ReportDescriptionEntryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportDescriptionEntry; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportDescriptionEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterReportDescriptionEntry) {
            listener.enterReportDescriptionEntry(this);
        }
    };
    // @Override
    ReportDescriptionEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitReportDescriptionEntry) {
            listener.exitReportDescriptionEntry(this);
        }
    };
    // @Override
    ReportDescriptionEntryContext.prototype.accept = function (visitor) {
        if (visitor.visitReportDescriptionEntry) {
            return visitor.visitReportDescriptionEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportDescriptionEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportDescriptionEntryContext = ReportDescriptionEntryContext;
var ReportDescriptionGlobalClauseContext = /** @class */ (function (_super) {
    __extends(ReportDescriptionGlobalClauseContext, _super);
    function ReportDescriptionGlobalClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportDescriptionGlobalClauseContext.prototype.GLOBAL = function () { return this.getToken(Cobol85Parser.GLOBAL, 0); };
    ReportDescriptionGlobalClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ReportDescriptionGlobalClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportDescriptionGlobalClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportDescriptionGlobalClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportDescriptionGlobalClause) {
            listener.enterReportDescriptionGlobalClause(this);
        }
    };
    // @Override
    ReportDescriptionGlobalClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportDescriptionGlobalClause) {
            listener.exitReportDescriptionGlobalClause(this);
        }
    };
    // @Override
    ReportDescriptionGlobalClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportDescriptionGlobalClause) {
            return visitor.visitReportDescriptionGlobalClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportDescriptionGlobalClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportDescriptionGlobalClauseContext = ReportDescriptionGlobalClauseContext;
var ReportDescriptionPageLimitClauseContext = /** @class */ (function (_super) {
    __extends(ReportDescriptionPageLimitClauseContext, _super);
    function ReportDescriptionPageLimitClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportDescriptionPageLimitClauseContext.prototype.PAGE = function () { return this.getToken(Cobol85Parser.PAGE, 0); };
    ReportDescriptionPageLimitClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    ReportDescriptionPageLimitClauseContext.prototype.LIMIT = function () { return this.tryGetToken(Cobol85Parser.LIMIT, 0); };
    ReportDescriptionPageLimitClauseContext.prototype.LIMITS = function () { return this.tryGetToken(Cobol85Parser.LIMITS, 0); };
    ReportDescriptionPageLimitClauseContext.prototype.LINE = function () { return this.tryGetToken(Cobol85Parser.LINE, 0); };
    ReportDescriptionPageLimitClauseContext.prototype.LINES = function () { return this.tryGetToken(Cobol85Parser.LINES, 0); };
    ReportDescriptionPageLimitClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    ReportDescriptionPageLimitClauseContext.prototype.ARE = function () { return this.tryGetToken(Cobol85Parser.ARE, 0); };
    Object.defineProperty(ReportDescriptionPageLimitClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportDescriptionPageLimitClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportDescriptionPageLimitClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportDescriptionPageLimitClause) {
            listener.enterReportDescriptionPageLimitClause(this);
        }
    };
    // @Override
    ReportDescriptionPageLimitClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportDescriptionPageLimitClause) {
            listener.exitReportDescriptionPageLimitClause(this);
        }
    };
    // @Override
    ReportDescriptionPageLimitClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportDescriptionPageLimitClause) {
            return visitor.visitReportDescriptionPageLimitClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportDescriptionPageLimitClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportDescriptionPageLimitClauseContext = ReportDescriptionPageLimitClauseContext;
var ReportDescriptionHeadingClauseContext = /** @class */ (function (_super) {
    __extends(ReportDescriptionHeadingClauseContext, _super);
    function ReportDescriptionHeadingClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportDescriptionHeadingClauseContext.prototype.HEADING = function () { return this.getToken(Cobol85Parser.HEADING, 0); };
    ReportDescriptionHeadingClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(ReportDescriptionHeadingClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportDescriptionHeadingClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportDescriptionHeadingClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportDescriptionHeadingClause) {
            listener.enterReportDescriptionHeadingClause(this);
        }
    };
    // @Override
    ReportDescriptionHeadingClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportDescriptionHeadingClause) {
            listener.exitReportDescriptionHeadingClause(this);
        }
    };
    // @Override
    ReportDescriptionHeadingClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportDescriptionHeadingClause) {
            return visitor.visitReportDescriptionHeadingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportDescriptionHeadingClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportDescriptionHeadingClauseContext = ReportDescriptionHeadingClauseContext;
var ReportDescriptionFirstDetailClauseContext = /** @class */ (function (_super) {
    __extends(ReportDescriptionFirstDetailClauseContext, _super);
    function ReportDescriptionFirstDetailClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportDescriptionFirstDetailClauseContext.prototype.FIRST = function () { return this.getToken(Cobol85Parser.FIRST, 0); };
    ReportDescriptionFirstDetailClauseContext.prototype.DETAIL = function () { return this.getToken(Cobol85Parser.DETAIL, 0); };
    ReportDescriptionFirstDetailClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(ReportDescriptionFirstDetailClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportDescriptionFirstDetailClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportDescriptionFirstDetailClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportDescriptionFirstDetailClause) {
            listener.enterReportDescriptionFirstDetailClause(this);
        }
    };
    // @Override
    ReportDescriptionFirstDetailClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportDescriptionFirstDetailClause) {
            listener.exitReportDescriptionFirstDetailClause(this);
        }
    };
    // @Override
    ReportDescriptionFirstDetailClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportDescriptionFirstDetailClause) {
            return visitor.visitReportDescriptionFirstDetailClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportDescriptionFirstDetailClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportDescriptionFirstDetailClauseContext = ReportDescriptionFirstDetailClauseContext;
var ReportDescriptionLastDetailClauseContext = /** @class */ (function (_super) {
    __extends(ReportDescriptionLastDetailClauseContext, _super);
    function ReportDescriptionLastDetailClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportDescriptionLastDetailClauseContext.prototype.LAST = function () { return this.getToken(Cobol85Parser.LAST, 0); };
    ReportDescriptionLastDetailClauseContext.prototype.DETAIL = function () { return this.getToken(Cobol85Parser.DETAIL, 0); };
    ReportDescriptionLastDetailClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(ReportDescriptionLastDetailClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportDescriptionLastDetailClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportDescriptionLastDetailClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportDescriptionLastDetailClause) {
            listener.enterReportDescriptionLastDetailClause(this);
        }
    };
    // @Override
    ReportDescriptionLastDetailClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportDescriptionLastDetailClause) {
            listener.exitReportDescriptionLastDetailClause(this);
        }
    };
    // @Override
    ReportDescriptionLastDetailClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportDescriptionLastDetailClause) {
            return visitor.visitReportDescriptionLastDetailClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportDescriptionLastDetailClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportDescriptionLastDetailClauseContext = ReportDescriptionLastDetailClauseContext;
var ReportDescriptionFootingClauseContext = /** @class */ (function (_super) {
    __extends(ReportDescriptionFootingClauseContext, _super);
    function ReportDescriptionFootingClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportDescriptionFootingClauseContext.prototype.FOOTING = function () { return this.getToken(Cobol85Parser.FOOTING, 0); };
    ReportDescriptionFootingClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(ReportDescriptionFootingClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportDescriptionFootingClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportDescriptionFootingClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportDescriptionFootingClause) {
            listener.enterReportDescriptionFootingClause(this);
        }
    };
    // @Override
    ReportDescriptionFootingClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportDescriptionFootingClause) {
            listener.exitReportDescriptionFootingClause(this);
        }
    };
    // @Override
    ReportDescriptionFootingClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportDescriptionFootingClause) {
            return visitor.visitReportDescriptionFootingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportDescriptionFootingClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportDescriptionFootingClauseContext = ReportDescriptionFootingClauseContext;
var ReportGroupDescriptionEntryContext = /** @class */ (function (_super) {
    __extends(ReportGroupDescriptionEntryContext, _super);
    function ReportGroupDescriptionEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupDescriptionEntryContext.prototype.reportGroupDescriptionEntryFormat1 = function () {
        return this.tryGetRuleContext(0, ReportGroupDescriptionEntryFormat1Context);
    };
    ReportGroupDescriptionEntryContext.prototype.reportGroupDescriptionEntryFormat2 = function () {
        return this.tryGetRuleContext(0, ReportGroupDescriptionEntryFormat2Context);
    };
    ReportGroupDescriptionEntryContext.prototype.reportGroupDescriptionEntryFormat3 = function () {
        return this.tryGetRuleContext(0, ReportGroupDescriptionEntryFormat3Context);
    };
    Object.defineProperty(ReportGroupDescriptionEntryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupDescriptionEntry; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupDescriptionEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupDescriptionEntry) {
            listener.enterReportGroupDescriptionEntry(this);
        }
    };
    // @Override
    ReportGroupDescriptionEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupDescriptionEntry) {
            listener.exitReportGroupDescriptionEntry(this);
        }
    };
    // @Override
    ReportGroupDescriptionEntryContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupDescriptionEntry) {
            return visitor.visitReportGroupDescriptionEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupDescriptionEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupDescriptionEntryContext = ReportGroupDescriptionEntryContext;
var ReportGroupDescriptionEntryFormat1Context = /** @class */ (function (_super) {
    __extends(ReportGroupDescriptionEntryFormat1Context, _super);
    function ReportGroupDescriptionEntryFormat1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupDescriptionEntryFormat1Context.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    ReportGroupDescriptionEntryFormat1Context.prototype.dataName = function () {
        return this.getRuleContext(0, DataNameContext);
    };
    ReportGroupDescriptionEntryFormat1Context.prototype.reportGroupTypeClause = function () {
        return this.getRuleContext(0, ReportGroupTypeClauseContext);
    };
    ReportGroupDescriptionEntryFormat1Context.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ReportGroupDescriptionEntryFormat1Context.prototype.reportGroupLineNumberClause = function () {
        return this.tryGetRuleContext(0, ReportGroupLineNumberClauseContext);
    };
    ReportGroupDescriptionEntryFormat1Context.prototype.reportGroupNextGroupClause = function () {
        return this.tryGetRuleContext(0, ReportGroupNextGroupClauseContext);
    };
    ReportGroupDescriptionEntryFormat1Context.prototype.reportGroupUsageClause = function () {
        return this.tryGetRuleContext(0, ReportGroupUsageClauseContext);
    };
    Object.defineProperty(ReportGroupDescriptionEntryFormat1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupDescriptionEntryFormat1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupDescriptionEntryFormat1Context.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupDescriptionEntryFormat1) {
            listener.enterReportGroupDescriptionEntryFormat1(this);
        }
    };
    // @Override
    ReportGroupDescriptionEntryFormat1Context.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupDescriptionEntryFormat1) {
            listener.exitReportGroupDescriptionEntryFormat1(this);
        }
    };
    // @Override
    ReportGroupDescriptionEntryFormat1Context.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupDescriptionEntryFormat1) {
            return visitor.visitReportGroupDescriptionEntryFormat1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupDescriptionEntryFormat1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupDescriptionEntryFormat1Context = ReportGroupDescriptionEntryFormat1Context;
var ReportGroupDescriptionEntryFormat2Context = /** @class */ (function (_super) {
    __extends(ReportGroupDescriptionEntryFormat2Context, _super);
    function ReportGroupDescriptionEntryFormat2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupDescriptionEntryFormat2Context.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    ReportGroupDescriptionEntryFormat2Context.prototype.reportGroupUsageClause = function () {
        return this.getRuleContext(0, ReportGroupUsageClauseContext);
    };
    ReportGroupDescriptionEntryFormat2Context.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ReportGroupDescriptionEntryFormat2Context.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    ReportGroupDescriptionEntryFormat2Context.prototype.reportGroupLineNumberClause = function () {
        return this.tryGetRuleContext(0, ReportGroupLineNumberClauseContext);
    };
    Object.defineProperty(ReportGroupDescriptionEntryFormat2Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupDescriptionEntryFormat2; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupDescriptionEntryFormat2Context.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupDescriptionEntryFormat2) {
            listener.enterReportGroupDescriptionEntryFormat2(this);
        }
    };
    // @Override
    ReportGroupDescriptionEntryFormat2Context.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupDescriptionEntryFormat2) {
            listener.exitReportGroupDescriptionEntryFormat2(this);
        }
    };
    // @Override
    ReportGroupDescriptionEntryFormat2Context.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupDescriptionEntryFormat2) {
            return visitor.visitReportGroupDescriptionEntryFormat2(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupDescriptionEntryFormat2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupDescriptionEntryFormat2Context = ReportGroupDescriptionEntryFormat2Context;
var ReportGroupDescriptionEntryFormat3Context = /** @class */ (function (_super) {
    __extends(ReportGroupDescriptionEntryFormat3Context, _super);
    function ReportGroupDescriptionEntryFormat3Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupDescriptionEntryFormat3Context.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ReportGroupDescriptionEntryFormat3Context.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupPictureClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupPictureClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupPictureClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupUsageClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupUsageClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupUsageClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupSignClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupSignClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupSignClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupJustifiedClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupJustifiedClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupJustifiedClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupBlankWhenZeroClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupBlankWhenZeroClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupBlankWhenZeroClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupLineNumberClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupLineNumberClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupLineNumberClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupColumnNumberClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupColumnNumberClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupColumnNumberClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupIndicateClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupIndicateClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupIndicateClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupSourceClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupSourceClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupSourceClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupValueClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupValueClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupValueClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupSumClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupSumClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupSumClauseContext);
        }
    };
    ReportGroupDescriptionEntryFormat3Context.prototype.reportGroupResetClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportGroupResetClauseContext);
        }
        else {
            return this.getRuleContext(i, ReportGroupResetClauseContext);
        }
    };
    Object.defineProperty(ReportGroupDescriptionEntryFormat3Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupDescriptionEntryFormat3; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupDescriptionEntryFormat3Context.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupDescriptionEntryFormat3) {
            listener.enterReportGroupDescriptionEntryFormat3(this);
        }
    };
    // @Override
    ReportGroupDescriptionEntryFormat3Context.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupDescriptionEntryFormat3) {
            listener.exitReportGroupDescriptionEntryFormat3(this);
        }
    };
    // @Override
    ReportGroupDescriptionEntryFormat3Context.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupDescriptionEntryFormat3) {
            return visitor.visitReportGroupDescriptionEntryFormat3(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupDescriptionEntryFormat3Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupDescriptionEntryFormat3Context = ReportGroupDescriptionEntryFormat3Context;
var ReportGroupBlankWhenZeroClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupBlankWhenZeroClauseContext, _super);
    function ReportGroupBlankWhenZeroClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupBlankWhenZeroClauseContext.prototype.BLANK = function () { return this.getToken(Cobol85Parser.BLANK, 0); };
    ReportGroupBlankWhenZeroClauseContext.prototype.ZERO = function () { return this.getToken(Cobol85Parser.ZERO, 0); };
    ReportGroupBlankWhenZeroClauseContext.prototype.WHEN = function () { return this.tryGetToken(Cobol85Parser.WHEN, 0); };
    Object.defineProperty(ReportGroupBlankWhenZeroClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupBlankWhenZeroClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupBlankWhenZeroClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupBlankWhenZeroClause) {
            listener.enterReportGroupBlankWhenZeroClause(this);
        }
    };
    // @Override
    ReportGroupBlankWhenZeroClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupBlankWhenZeroClause) {
            listener.exitReportGroupBlankWhenZeroClause(this);
        }
    };
    // @Override
    ReportGroupBlankWhenZeroClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupBlankWhenZeroClause) {
            return visitor.visitReportGroupBlankWhenZeroClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupBlankWhenZeroClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupBlankWhenZeroClauseContext = ReportGroupBlankWhenZeroClauseContext;
var ReportGroupColumnNumberClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupColumnNumberClauseContext, _super);
    function ReportGroupColumnNumberClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupColumnNumberClauseContext.prototype.COLUMN = function () { return this.getToken(Cobol85Parser.COLUMN, 0); };
    ReportGroupColumnNumberClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    ReportGroupColumnNumberClauseContext.prototype.NUMBER = function () { return this.tryGetToken(Cobol85Parser.NUMBER, 0); };
    ReportGroupColumnNumberClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ReportGroupColumnNumberClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupColumnNumberClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupColumnNumberClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupColumnNumberClause) {
            listener.enterReportGroupColumnNumberClause(this);
        }
    };
    // @Override
    ReportGroupColumnNumberClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupColumnNumberClause) {
            listener.exitReportGroupColumnNumberClause(this);
        }
    };
    // @Override
    ReportGroupColumnNumberClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupColumnNumberClause) {
            return visitor.visitReportGroupColumnNumberClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupColumnNumberClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupColumnNumberClauseContext = ReportGroupColumnNumberClauseContext;
var ReportGroupIndicateClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupIndicateClauseContext, _super);
    function ReportGroupIndicateClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupIndicateClauseContext.prototype.GROUP = function () { return this.getToken(Cobol85Parser.GROUP, 0); };
    ReportGroupIndicateClauseContext.prototype.INDICATE = function () { return this.tryGetToken(Cobol85Parser.INDICATE, 0); };
    Object.defineProperty(ReportGroupIndicateClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupIndicateClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupIndicateClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupIndicateClause) {
            listener.enterReportGroupIndicateClause(this);
        }
    };
    // @Override
    ReportGroupIndicateClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupIndicateClause) {
            listener.exitReportGroupIndicateClause(this);
        }
    };
    // @Override
    ReportGroupIndicateClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupIndicateClause) {
            return visitor.visitReportGroupIndicateClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupIndicateClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupIndicateClauseContext = ReportGroupIndicateClauseContext;
var ReportGroupJustifiedClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupJustifiedClauseContext, _super);
    function ReportGroupJustifiedClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupJustifiedClauseContext.prototype.JUSTIFIED = function () { return this.tryGetToken(Cobol85Parser.JUSTIFIED, 0); };
    ReportGroupJustifiedClauseContext.prototype.JUST = function () { return this.tryGetToken(Cobol85Parser.JUST, 0); };
    ReportGroupJustifiedClauseContext.prototype.RIGHT = function () { return this.tryGetToken(Cobol85Parser.RIGHT, 0); };
    Object.defineProperty(ReportGroupJustifiedClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupJustifiedClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupJustifiedClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupJustifiedClause) {
            listener.enterReportGroupJustifiedClause(this);
        }
    };
    // @Override
    ReportGroupJustifiedClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupJustifiedClause) {
            listener.exitReportGroupJustifiedClause(this);
        }
    };
    // @Override
    ReportGroupJustifiedClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupJustifiedClause) {
            return visitor.visitReportGroupJustifiedClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupJustifiedClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupJustifiedClauseContext = ReportGroupJustifiedClauseContext;
var ReportGroupLineNumberClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupLineNumberClauseContext, _super);
    function ReportGroupLineNumberClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupLineNumberClauseContext.prototype.reportGroupLineNumberNextPage = function () {
        return this.tryGetRuleContext(0, ReportGroupLineNumberNextPageContext);
    };
    ReportGroupLineNumberClauseContext.prototype.reportGroupLineNumberPlus = function () {
        return this.tryGetRuleContext(0, ReportGroupLineNumberPlusContext);
    };
    ReportGroupLineNumberClauseContext.prototype.LINE = function () { return this.tryGetToken(Cobol85Parser.LINE, 0); };
    ReportGroupLineNumberClauseContext.prototype.NUMBER = function () { return this.tryGetToken(Cobol85Parser.NUMBER, 0); };
    ReportGroupLineNumberClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ReportGroupLineNumberClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupLineNumberClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupLineNumberClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupLineNumberClause) {
            listener.enterReportGroupLineNumberClause(this);
        }
    };
    // @Override
    ReportGroupLineNumberClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupLineNumberClause) {
            listener.exitReportGroupLineNumberClause(this);
        }
    };
    // @Override
    ReportGroupLineNumberClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupLineNumberClause) {
            return visitor.visitReportGroupLineNumberClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupLineNumberClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupLineNumberClauseContext = ReportGroupLineNumberClauseContext;
var ReportGroupLineNumberNextPageContext = /** @class */ (function (_super) {
    __extends(ReportGroupLineNumberNextPageContext, _super);
    function ReportGroupLineNumberNextPageContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupLineNumberNextPageContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    ReportGroupLineNumberNextPageContext.prototype.NEXT = function () { return this.tryGetToken(Cobol85Parser.NEXT, 0); };
    ReportGroupLineNumberNextPageContext.prototype.PAGE = function () { return this.tryGetToken(Cobol85Parser.PAGE, 0); };
    ReportGroupLineNumberNextPageContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    Object.defineProperty(ReportGroupLineNumberNextPageContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupLineNumberNextPage; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupLineNumberNextPageContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupLineNumberNextPage) {
            listener.enterReportGroupLineNumberNextPage(this);
        }
    };
    // @Override
    ReportGroupLineNumberNextPageContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupLineNumberNextPage) {
            listener.exitReportGroupLineNumberNextPage(this);
        }
    };
    // @Override
    ReportGroupLineNumberNextPageContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupLineNumberNextPage) {
            return visitor.visitReportGroupLineNumberNextPage(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupLineNumberNextPageContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupLineNumberNextPageContext = ReportGroupLineNumberNextPageContext;
var ReportGroupLineNumberPlusContext = /** @class */ (function (_super) {
    __extends(ReportGroupLineNumberPlusContext, _super);
    function ReportGroupLineNumberPlusContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupLineNumberPlusContext.prototype.PLUS = function () { return this.getToken(Cobol85Parser.PLUS, 0); };
    ReportGroupLineNumberPlusContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(ReportGroupLineNumberPlusContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupLineNumberPlus; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupLineNumberPlusContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupLineNumberPlus) {
            listener.enterReportGroupLineNumberPlus(this);
        }
    };
    // @Override
    ReportGroupLineNumberPlusContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupLineNumberPlus) {
            listener.exitReportGroupLineNumberPlus(this);
        }
    };
    // @Override
    ReportGroupLineNumberPlusContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupLineNumberPlus) {
            return visitor.visitReportGroupLineNumberPlus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupLineNumberPlusContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupLineNumberPlusContext = ReportGroupLineNumberPlusContext;
var ReportGroupNextGroupClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupNextGroupClauseContext, _super);
    function ReportGroupNextGroupClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupNextGroupClauseContext.prototype.NEXT = function () { return this.getToken(Cobol85Parser.NEXT, 0); };
    ReportGroupNextGroupClauseContext.prototype.GROUP = function () { return this.getToken(Cobol85Parser.GROUP, 0); };
    ReportGroupNextGroupClauseContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    ReportGroupNextGroupClauseContext.prototype.reportGroupNextGroupNextPage = function () {
        return this.tryGetRuleContext(0, ReportGroupNextGroupNextPageContext);
    };
    ReportGroupNextGroupClauseContext.prototype.reportGroupNextGroupPlus = function () {
        return this.tryGetRuleContext(0, ReportGroupNextGroupPlusContext);
    };
    ReportGroupNextGroupClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ReportGroupNextGroupClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupNextGroupClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupNextGroupClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupNextGroupClause) {
            listener.enterReportGroupNextGroupClause(this);
        }
    };
    // @Override
    ReportGroupNextGroupClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupNextGroupClause) {
            listener.exitReportGroupNextGroupClause(this);
        }
    };
    // @Override
    ReportGroupNextGroupClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupNextGroupClause) {
            return visitor.visitReportGroupNextGroupClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupNextGroupClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupNextGroupClauseContext = ReportGroupNextGroupClauseContext;
var ReportGroupNextGroupPlusContext = /** @class */ (function (_super) {
    __extends(ReportGroupNextGroupPlusContext, _super);
    function ReportGroupNextGroupPlusContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupNextGroupPlusContext.prototype.PLUS = function () { return this.getToken(Cobol85Parser.PLUS, 0); };
    ReportGroupNextGroupPlusContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(ReportGroupNextGroupPlusContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupNextGroupPlus; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupNextGroupPlusContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupNextGroupPlus) {
            listener.enterReportGroupNextGroupPlus(this);
        }
    };
    // @Override
    ReportGroupNextGroupPlusContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupNextGroupPlus) {
            listener.exitReportGroupNextGroupPlus(this);
        }
    };
    // @Override
    ReportGroupNextGroupPlusContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupNextGroupPlus) {
            return visitor.visitReportGroupNextGroupPlus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupNextGroupPlusContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupNextGroupPlusContext = ReportGroupNextGroupPlusContext;
var ReportGroupNextGroupNextPageContext = /** @class */ (function (_super) {
    __extends(ReportGroupNextGroupNextPageContext, _super);
    function ReportGroupNextGroupNextPageContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupNextGroupNextPageContext.prototype.NEXT = function () { return this.getToken(Cobol85Parser.NEXT, 0); };
    ReportGroupNextGroupNextPageContext.prototype.PAGE = function () { return this.getToken(Cobol85Parser.PAGE, 0); };
    Object.defineProperty(ReportGroupNextGroupNextPageContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupNextGroupNextPage; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupNextGroupNextPageContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupNextGroupNextPage) {
            listener.enterReportGroupNextGroupNextPage(this);
        }
    };
    // @Override
    ReportGroupNextGroupNextPageContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupNextGroupNextPage) {
            listener.exitReportGroupNextGroupNextPage(this);
        }
    };
    // @Override
    ReportGroupNextGroupNextPageContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupNextGroupNextPage) {
            return visitor.visitReportGroupNextGroupNextPage(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupNextGroupNextPageContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupNextGroupNextPageContext = ReportGroupNextGroupNextPageContext;
var ReportGroupPictureClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupPictureClauseContext, _super);
    function ReportGroupPictureClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupPictureClauseContext.prototype.pictureString = function () {
        return this.getRuleContext(0, PictureStringContext);
    };
    ReportGroupPictureClauseContext.prototype.PICTURE = function () { return this.tryGetToken(Cobol85Parser.PICTURE, 0); };
    ReportGroupPictureClauseContext.prototype.PIC = function () { return this.tryGetToken(Cobol85Parser.PIC, 0); };
    ReportGroupPictureClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ReportGroupPictureClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupPictureClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupPictureClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupPictureClause) {
            listener.enterReportGroupPictureClause(this);
        }
    };
    // @Override
    ReportGroupPictureClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupPictureClause) {
            listener.exitReportGroupPictureClause(this);
        }
    };
    // @Override
    ReportGroupPictureClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupPictureClause) {
            return visitor.visitReportGroupPictureClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupPictureClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupPictureClauseContext = ReportGroupPictureClauseContext;
var ReportGroupResetClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupResetClauseContext, _super);
    function ReportGroupResetClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupResetClauseContext.prototype.RESET = function () { return this.getToken(Cobol85Parser.RESET, 0); };
    ReportGroupResetClauseContext.prototype.FINAL = function () { return this.tryGetToken(Cobol85Parser.FINAL, 0); };
    ReportGroupResetClauseContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    ReportGroupResetClauseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    Object.defineProperty(ReportGroupResetClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupResetClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupResetClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupResetClause) {
            listener.enterReportGroupResetClause(this);
        }
    };
    // @Override
    ReportGroupResetClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupResetClause) {
            listener.exitReportGroupResetClause(this);
        }
    };
    // @Override
    ReportGroupResetClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupResetClause) {
            return visitor.visitReportGroupResetClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupResetClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupResetClauseContext = ReportGroupResetClauseContext;
var ReportGroupSignClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupSignClauseContext, _super);
    function ReportGroupSignClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupSignClauseContext.prototype.SIGN = function () { return this.getToken(Cobol85Parser.SIGN, 0); };
    ReportGroupSignClauseContext.prototype.SEPARATE = function () { return this.getToken(Cobol85Parser.SEPARATE, 0); };
    ReportGroupSignClauseContext.prototype.LEADING = function () { return this.tryGetToken(Cobol85Parser.LEADING, 0); };
    ReportGroupSignClauseContext.prototype.TRAILING = function () { return this.tryGetToken(Cobol85Parser.TRAILING, 0); };
    ReportGroupSignClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    ReportGroupSignClauseContext.prototype.CHARACTER = function () { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); };
    Object.defineProperty(ReportGroupSignClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupSignClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupSignClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupSignClause) {
            listener.enterReportGroupSignClause(this);
        }
    };
    // @Override
    ReportGroupSignClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupSignClause) {
            listener.exitReportGroupSignClause(this);
        }
    };
    // @Override
    ReportGroupSignClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupSignClause) {
            return visitor.visitReportGroupSignClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupSignClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupSignClauseContext = ReportGroupSignClauseContext;
var ReportGroupSourceClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupSourceClauseContext, _super);
    function ReportGroupSourceClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupSourceClauseContext.prototype.SOURCE = function () { return this.getToken(Cobol85Parser.SOURCE, 0); };
    ReportGroupSourceClauseContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    ReportGroupSourceClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ReportGroupSourceClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupSourceClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupSourceClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupSourceClause) {
            listener.enterReportGroupSourceClause(this);
        }
    };
    // @Override
    ReportGroupSourceClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupSourceClause) {
            listener.exitReportGroupSourceClause(this);
        }
    };
    // @Override
    ReportGroupSourceClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupSourceClause) {
            return visitor.visitReportGroupSourceClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupSourceClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupSourceClauseContext = ReportGroupSourceClauseContext;
var ReportGroupSumClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupSumClauseContext, _super);
    function ReportGroupSumClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupSumClauseContext.prototype.SUM = function () { return this.getToken(Cobol85Parser.SUM, 0); };
    ReportGroupSumClauseContext.prototype.identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    };
    ReportGroupSumClauseContext.prototype.UPON = function () { return this.tryGetToken(Cobol85Parser.UPON, 0); };
    ReportGroupSumClauseContext.prototype.dataName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataNameContext);
        }
        else {
            return this.getRuleContext(i, DataNameContext);
        }
    };
    ReportGroupSumClauseContext.prototype.COMMACHAR = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.COMMACHAR);
        }
        else {
            return this.getToken(Cobol85Parser.COMMACHAR, i);
        }
    };
    Object.defineProperty(ReportGroupSumClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupSumClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupSumClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupSumClause) {
            listener.enterReportGroupSumClause(this);
        }
    };
    // @Override
    ReportGroupSumClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupSumClause) {
            listener.exitReportGroupSumClause(this);
        }
    };
    // @Override
    ReportGroupSumClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupSumClause) {
            return visitor.visitReportGroupSumClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupSumClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupSumClauseContext = ReportGroupSumClauseContext;
var ReportGroupTypeClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupTypeClauseContext, _super);
    function ReportGroupTypeClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupTypeClauseContext.prototype.TYPE = function () { return this.getToken(Cobol85Parser.TYPE, 0); };
    ReportGroupTypeClauseContext.prototype.reportGroupTypeReportHeading = function () {
        return this.tryGetRuleContext(0, ReportGroupTypeReportHeadingContext);
    };
    ReportGroupTypeClauseContext.prototype.reportGroupTypePageHeading = function () {
        return this.tryGetRuleContext(0, ReportGroupTypePageHeadingContext);
    };
    ReportGroupTypeClauseContext.prototype.reportGroupTypeControlHeading = function () {
        return this.tryGetRuleContext(0, ReportGroupTypeControlHeadingContext);
    };
    ReportGroupTypeClauseContext.prototype.reportGroupTypeDetail = function () {
        return this.tryGetRuleContext(0, ReportGroupTypeDetailContext);
    };
    ReportGroupTypeClauseContext.prototype.reportGroupTypeControlFooting = function () {
        return this.tryGetRuleContext(0, ReportGroupTypeControlFootingContext);
    };
    ReportGroupTypeClauseContext.prototype.reportGroupTypePageFooting = function () {
        return this.tryGetRuleContext(0, ReportGroupTypePageFootingContext);
    };
    ReportGroupTypeClauseContext.prototype.reportGroupTypeReportFooting = function () {
        return this.tryGetRuleContext(0, ReportGroupTypeReportFootingContext);
    };
    ReportGroupTypeClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ReportGroupTypeClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupTypeClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupTypeClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupTypeClause) {
            listener.enterReportGroupTypeClause(this);
        }
    };
    // @Override
    ReportGroupTypeClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupTypeClause) {
            listener.exitReportGroupTypeClause(this);
        }
    };
    // @Override
    ReportGroupTypeClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupTypeClause) {
            return visitor.visitReportGroupTypeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupTypeClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupTypeClauseContext = ReportGroupTypeClauseContext;
var ReportGroupTypeReportHeadingContext = /** @class */ (function (_super) {
    __extends(ReportGroupTypeReportHeadingContext, _super);
    function ReportGroupTypeReportHeadingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupTypeReportHeadingContext.prototype.REPORT = function () { return this.tryGetToken(Cobol85Parser.REPORT, 0); };
    ReportGroupTypeReportHeadingContext.prototype.HEADING = function () { return this.tryGetToken(Cobol85Parser.HEADING, 0); };
    ReportGroupTypeReportHeadingContext.prototype.RH = function () { return this.tryGetToken(Cobol85Parser.RH, 0); };
    Object.defineProperty(ReportGroupTypeReportHeadingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupTypeReportHeading; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupTypeReportHeadingContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupTypeReportHeading) {
            listener.enterReportGroupTypeReportHeading(this);
        }
    };
    // @Override
    ReportGroupTypeReportHeadingContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupTypeReportHeading) {
            listener.exitReportGroupTypeReportHeading(this);
        }
    };
    // @Override
    ReportGroupTypeReportHeadingContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupTypeReportHeading) {
            return visitor.visitReportGroupTypeReportHeading(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupTypeReportHeadingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupTypeReportHeadingContext = ReportGroupTypeReportHeadingContext;
var ReportGroupTypePageHeadingContext = /** @class */ (function (_super) {
    __extends(ReportGroupTypePageHeadingContext, _super);
    function ReportGroupTypePageHeadingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupTypePageHeadingContext.prototype.PAGE = function () { return this.tryGetToken(Cobol85Parser.PAGE, 0); };
    ReportGroupTypePageHeadingContext.prototype.HEADING = function () { return this.tryGetToken(Cobol85Parser.HEADING, 0); };
    ReportGroupTypePageHeadingContext.prototype.PH = function () { return this.tryGetToken(Cobol85Parser.PH, 0); };
    Object.defineProperty(ReportGroupTypePageHeadingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupTypePageHeading; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupTypePageHeadingContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupTypePageHeading) {
            listener.enterReportGroupTypePageHeading(this);
        }
    };
    // @Override
    ReportGroupTypePageHeadingContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupTypePageHeading) {
            listener.exitReportGroupTypePageHeading(this);
        }
    };
    // @Override
    ReportGroupTypePageHeadingContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupTypePageHeading) {
            return visitor.visitReportGroupTypePageHeading(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupTypePageHeadingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupTypePageHeadingContext = ReportGroupTypePageHeadingContext;
var ReportGroupTypeControlHeadingContext = /** @class */ (function (_super) {
    __extends(ReportGroupTypeControlHeadingContext, _super);
    function ReportGroupTypeControlHeadingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupTypeControlHeadingContext.prototype.CONTROL = function () { return this.tryGetToken(Cobol85Parser.CONTROL, 0); };
    ReportGroupTypeControlHeadingContext.prototype.HEADING = function () { return this.tryGetToken(Cobol85Parser.HEADING, 0); };
    ReportGroupTypeControlHeadingContext.prototype.CH = function () { return this.tryGetToken(Cobol85Parser.CH, 0); };
    ReportGroupTypeControlHeadingContext.prototype.FINAL = function () { return this.tryGetToken(Cobol85Parser.FINAL, 0); };
    ReportGroupTypeControlHeadingContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    Object.defineProperty(ReportGroupTypeControlHeadingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupTypeControlHeading; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupTypeControlHeadingContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupTypeControlHeading) {
            listener.enterReportGroupTypeControlHeading(this);
        }
    };
    // @Override
    ReportGroupTypeControlHeadingContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupTypeControlHeading) {
            listener.exitReportGroupTypeControlHeading(this);
        }
    };
    // @Override
    ReportGroupTypeControlHeadingContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupTypeControlHeading) {
            return visitor.visitReportGroupTypeControlHeading(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupTypeControlHeadingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupTypeControlHeadingContext = ReportGroupTypeControlHeadingContext;
var ReportGroupTypeDetailContext = /** @class */ (function (_super) {
    __extends(ReportGroupTypeDetailContext, _super);
    function ReportGroupTypeDetailContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupTypeDetailContext.prototype.DETAIL = function () { return this.tryGetToken(Cobol85Parser.DETAIL, 0); };
    ReportGroupTypeDetailContext.prototype.DE = function () { return this.tryGetToken(Cobol85Parser.DE, 0); };
    Object.defineProperty(ReportGroupTypeDetailContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupTypeDetail; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupTypeDetailContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupTypeDetail) {
            listener.enterReportGroupTypeDetail(this);
        }
    };
    // @Override
    ReportGroupTypeDetailContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupTypeDetail) {
            listener.exitReportGroupTypeDetail(this);
        }
    };
    // @Override
    ReportGroupTypeDetailContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupTypeDetail) {
            return visitor.visitReportGroupTypeDetail(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupTypeDetailContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupTypeDetailContext = ReportGroupTypeDetailContext;
var ReportGroupTypeControlFootingContext = /** @class */ (function (_super) {
    __extends(ReportGroupTypeControlFootingContext, _super);
    function ReportGroupTypeControlFootingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupTypeControlFootingContext.prototype.CONTROL = function () { return this.tryGetToken(Cobol85Parser.CONTROL, 0); };
    ReportGroupTypeControlFootingContext.prototype.FOOTING = function () { return this.tryGetToken(Cobol85Parser.FOOTING, 0); };
    ReportGroupTypeControlFootingContext.prototype.CF = function () { return this.tryGetToken(Cobol85Parser.CF, 0); };
    ReportGroupTypeControlFootingContext.prototype.FINAL = function () { return this.tryGetToken(Cobol85Parser.FINAL, 0); };
    ReportGroupTypeControlFootingContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    Object.defineProperty(ReportGroupTypeControlFootingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupTypeControlFooting; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupTypeControlFootingContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupTypeControlFooting) {
            listener.enterReportGroupTypeControlFooting(this);
        }
    };
    // @Override
    ReportGroupTypeControlFootingContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupTypeControlFooting) {
            listener.exitReportGroupTypeControlFooting(this);
        }
    };
    // @Override
    ReportGroupTypeControlFootingContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupTypeControlFooting) {
            return visitor.visitReportGroupTypeControlFooting(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupTypeControlFootingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupTypeControlFootingContext = ReportGroupTypeControlFootingContext;
var ReportGroupUsageClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupUsageClauseContext, _super);
    function ReportGroupUsageClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupUsageClauseContext.prototype.DISPLAY = function () { return this.tryGetToken(Cobol85Parser.DISPLAY, 0); };
    ReportGroupUsageClauseContext.prototype.DISPLAY_1 = function () { return this.tryGetToken(Cobol85Parser.DISPLAY_1, 0); };
    ReportGroupUsageClauseContext.prototype.USAGE = function () { return this.tryGetToken(Cobol85Parser.USAGE, 0); };
    ReportGroupUsageClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ReportGroupUsageClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupUsageClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupUsageClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupUsageClause) {
            listener.enterReportGroupUsageClause(this);
        }
    };
    // @Override
    ReportGroupUsageClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupUsageClause) {
            listener.exitReportGroupUsageClause(this);
        }
    };
    // @Override
    ReportGroupUsageClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupUsageClause) {
            return visitor.visitReportGroupUsageClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupUsageClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupUsageClauseContext = ReportGroupUsageClauseContext;
var ReportGroupTypePageFootingContext = /** @class */ (function (_super) {
    __extends(ReportGroupTypePageFootingContext, _super);
    function ReportGroupTypePageFootingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupTypePageFootingContext.prototype.PAGE = function () { return this.tryGetToken(Cobol85Parser.PAGE, 0); };
    ReportGroupTypePageFootingContext.prototype.FOOTING = function () { return this.tryGetToken(Cobol85Parser.FOOTING, 0); };
    ReportGroupTypePageFootingContext.prototype.PF = function () { return this.tryGetToken(Cobol85Parser.PF, 0); };
    Object.defineProperty(ReportGroupTypePageFootingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupTypePageFooting; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupTypePageFootingContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupTypePageFooting) {
            listener.enterReportGroupTypePageFooting(this);
        }
    };
    // @Override
    ReportGroupTypePageFootingContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupTypePageFooting) {
            listener.exitReportGroupTypePageFooting(this);
        }
    };
    // @Override
    ReportGroupTypePageFootingContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupTypePageFooting) {
            return visitor.visitReportGroupTypePageFooting(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupTypePageFootingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupTypePageFootingContext = ReportGroupTypePageFootingContext;
var ReportGroupTypeReportFootingContext = /** @class */ (function (_super) {
    __extends(ReportGroupTypeReportFootingContext, _super);
    function ReportGroupTypeReportFootingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupTypeReportFootingContext.prototype.REPORT = function () { return this.tryGetToken(Cobol85Parser.REPORT, 0); };
    ReportGroupTypeReportFootingContext.prototype.FOOTING = function () { return this.tryGetToken(Cobol85Parser.FOOTING, 0); };
    ReportGroupTypeReportFootingContext.prototype.RF = function () { return this.tryGetToken(Cobol85Parser.RF, 0); };
    Object.defineProperty(ReportGroupTypeReportFootingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupTypeReportFooting; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupTypeReportFootingContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupTypeReportFooting) {
            listener.enterReportGroupTypeReportFooting(this);
        }
    };
    // @Override
    ReportGroupTypeReportFootingContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupTypeReportFooting) {
            listener.exitReportGroupTypeReportFooting(this);
        }
    };
    // @Override
    ReportGroupTypeReportFootingContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupTypeReportFooting) {
            return visitor.visitReportGroupTypeReportFooting(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupTypeReportFootingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupTypeReportFootingContext = ReportGroupTypeReportFootingContext;
var ReportGroupValueClauseContext = /** @class */ (function (_super) {
    __extends(ReportGroupValueClauseContext, _super);
    function ReportGroupValueClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportGroupValueClauseContext.prototype.VALUE = function () { return this.getToken(Cobol85Parser.VALUE, 0); };
    ReportGroupValueClauseContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    ReportGroupValueClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ReportGroupValueClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportGroupValueClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportGroupValueClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterReportGroupValueClause) {
            listener.enterReportGroupValueClause(this);
        }
    };
    // @Override
    ReportGroupValueClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitReportGroupValueClause) {
            listener.exitReportGroupValueClause(this);
        }
    };
    // @Override
    ReportGroupValueClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitReportGroupValueClause) {
            return visitor.visitReportGroupValueClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportGroupValueClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportGroupValueClauseContext = ReportGroupValueClauseContext;
var ProgramLibrarySectionContext = /** @class */ (function (_super) {
    __extends(ProgramLibrarySectionContext, _super);
    function ProgramLibrarySectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProgramLibrarySectionContext.prototype.PROGRAM_LIBRARY = function () { return this.getToken(Cobol85Parser.PROGRAM_LIBRARY, 0); };
    ProgramLibrarySectionContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    ProgramLibrarySectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ProgramLibrarySectionContext.prototype.libraryDescriptionEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LibraryDescriptionEntryContext);
        }
        else {
            return this.getRuleContext(i, LibraryDescriptionEntryContext);
        }
    };
    Object.defineProperty(ProgramLibrarySectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_programLibrarySection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProgramLibrarySectionContext.prototype.enterRule = function (listener) {
        if (listener.enterProgramLibrarySection) {
            listener.enterProgramLibrarySection(this);
        }
    };
    // @Override
    ProgramLibrarySectionContext.prototype.exitRule = function (listener) {
        if (listener.exitProgramLibrarySection) {
            listener.exitProgramLibrarySection(this);
        }
    };
    // @Override
    ProgramLibrarySectionContext.prototype.accept = function (visitor) {
        if (visitor.visitProgramLibrarySection) {
            return visitor.visitProgramLibrarySection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProgramLibrarySectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProgramLibrarySectionContext = ProgramLibrarySectionContext;
var LibraryDescriptionEntryContext = /** @class */ (function (_super) {
    __extends(LibraryDescriptionEntryContext, _super);
    function LibraryDescriptionEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryDescriptionEntryContext.prototype.libraryDescriptionEntryFormat1 = function () {
        return this.tryGetRuleContext(0, LibraryDescriptionEntryFormat1Context);
    };
    LibraryDescriptionEntryContext.prototype.libraryDescriptionEntryFormat2 = function () {
        return this.tryGetRuleContext(0, LibraryDescriptionEntryFormat2Context);
    };
    Object.defineProperty(LibraryDescriptionEntryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryDescriptionEntry; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryDescriptionEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryDescriptionEntry) {
            listener.enterLibraryDescriptionEntry(this);
        }
    };
    // @Override
    LibraryDescriptionEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryDescriptionEntry) {
            listener.exitLibraryDescriptionEntry(this);
        }
    };
    // @Override
    LibraryDescriptionEntryContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryDescriptionEntry) {
            return visitor.visitLibraryDescriptionEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryDescriptionEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryDescriptionEntryContext = LibraryDescriptionEntryContext;
var LibraryDescriptionEntryFormat1Context = /** @class */ (function (_super) {
    __extends(LibraryDescriptionEntryFormat1Context, _super);
    function LibraryDescriptionEntryFormat1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryDescriptionEntryFormat1Context.prototype.LD = function () { return this.getToken(Cobol85Parser.LD, 0); };
    LibraryDescriptionEntryFormat1Context.prototype.libraryName = function () {
        return this.getRuleContext(0, LibraryNameContext);
    };
    LibraryDescriptionEntryFormat1Context.prototype.EXPORT = function () { return this.getToken(Cobol85Parser.EXPORT, 0); };
    LibraryDescriptionEntryFormat1Context.prototype.libraryAttributeClauseFormat1 = function () {
        return this.tryGetRuleContext(0, LibraryAttributeClauseFormat1Context);
    };
    LibraryDescriptionEntryFormat1Context.prototype.libraryEntryProcedureClauseFormat1 = function () {
        return this.tryGetRuleContext(0, LibraryEntryProcedureClauseFormat1Context);
    };
    Object.defineProperty(LibraryDescriptionEntryFormat1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryDescriptionEntryFormat1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryDescriptionEntryFormat1Context.prototype.enterRule = function (listener) {
        if (listener.enterLibraryDescriptionEntryFormat1) {
            listener.enterLibraryDescriptionEntryFormat1(this);
        }
    };
    // @Override
    LibraryDescriptionEntryFormat1Context.prototype.exitRule = function (listener) {
        if (listener.exitLibraryDescriptionEntryFormat1) {
            listener.exitLibraryDescriptionEntryFormat1(this);
        }
    };
    // @Override
    LibraryDescriptionEntryFormat1Context.prototype.accept = function (visitor) {
        if (visitor.visitLibraryDescriptionEntryFormat1) {
            return visitor.visitLibraryDescriptionEntryFormat1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryDescriptionEntryFormat1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryDescriptionEntryFormat1Context = LibraryDescriptionEntryFormat1Context;
var LibraryDescriptionEntryFormat2Context = /** @class */ (function (_super) {
    __extends(LibraryDescriptionEntryFormat2Context, _super);
    function LibraryDescriptionEntryFormat2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryDescriptionEntryFormat2Context.prototype.LB = function () { return this.getToken(Cobol85Parser.LB, 0); };
    LibraryDescriptionEntryFormat2Context.prototype.libraryName = function () {
        return this.getRuleContext(0, LibraryNameContext);
    };
    LibraryDescriptionEntryFormat2Context.prototype.IMPORT = function () { return this.getToken(Cobol85Parser.IMPORT, 0); };
    LibraryDescriptionEntryFormat2Context.prototype.libraryIsGlobalClause = function () {
        return this.tryGetRuleContext(0, LibraryIsGlobalClauseContext);
    };
    LibraryDescriptionEntryFormat2Context.prototype.libraryIsCommonClause = function () {
        return this.tryGetRuleContext(0, LibraryIsCommonClauseContext);
    };
    LibraryDescriptionEntryFormat2Context.prototype.libraryAttributeClauseFormat2 = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LibraryAttributeClauseFormat2Context);
        }
        else {
            return this.getRuleContext(i, LibraryAttributeClauseFormat2Context);
        }
    };
    LibraryDescriptionEntryFormat2Context.prototype.libraryEntryProcedureClauseFormat2 = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LibraryEntryProcedureClauseFormat2Context);
        }
        else {
            return this.getRuleContext(i, LibraryEntryProcedureClauseFormat2Context);
        }
    };
    Object.defineProperty(LibraryDescriptionEntryFormat2Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryDescriptionEntryFormat2; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryDescriptionEntryFormat2Context.prototype.enterRule = function (listener) {
        if (listener.enterLibraryDescriptionEntryFormat2) {
            listener.enterLibraryDescriptionEntryFormat2(this);
        }
    };
    // @Override
    LibraryDescriptionEntryFormat2Context.prototype.exitRule = function (listener) {
        if (listener.exitLibraryDescriptionEntryFormat2) {
            listener.exitLibraryDescriptionEntryFormat2(this);
        }
    };
    // @Override
    LibraryDescriptionEntryFormat2Context.prototype.accept = function (visitor) {
        if (visitor.visitLibraryDescriptionEntryFormat2) {
            return visitor.visitLibraryDescriptionEntryFormat2(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryDescriptionEntryFormat2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryDescriptionEntryFormat2Context = LibraryDescriptionEntryFormat2Context;
var LibraryAttributeClauseFormat1Context = /** @class */ (function (_super) {
    __extends(LibraryAttributeClauseFormat1Context, _super);
    function LibraryAttributeClauseFormat1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryAttributeClauseFormat1Context.prototype.ATTRIBUTE = function () { return this.getToken(Cobol85Parser.ATTRIBUTE, 0); };
    LibraryAttributeClauseFormat1Context.prototype.SHARING = function () { return this.tryGetToken(Cobol85Parser.SHARING, 0); };
    LibraryAttributeClauseFormat1Context.prototype.DONTCARE = function () { return this.tryGetToken(Cobol85Parser.DONTCARE, 0); };
    LibraryAttributeClauseFormat1Context.prototype.PRIVATE = function () { return this.tryGetToken(Cobol85Parser.PRIVATE, 0); };
    LibraryAttributeClauseFormat1Context.prototype.SHAREDBYRUNUNIT = function () { return this.tryGetToken(Cobol85Parser.SHAREDBYRUNUNIT, 0); };
    LibraryAttributeClauseFormat1Context.prototype.SHAREDBYALL = function () { return this.tryGetToken(Cobol85Parser.SHAREDBYALL, 0); };
    LibraryAttributeClauseFormat1Context.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(LibraryAttributeClauseFormat1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryAttributeClauseFormat1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryAttributeClauseFormat1Context.prototype.enterRule = function (listener) {
        if (listener.enterLibraryAttributeClauseFormat1) {
            listener.enterLibraryAttributeClauseFormat1(this);
        }
    };
    // @Override
    LibraryAttributeClauseFormat1Context.prototype.exitRule = function (listener) {
        if (listener.exitLibraryAttributeClauseFormat1) {
            listener.exitLibraryAttributeClauseFormat1(this);
        }
    };
    // @Override
    LibraryAttributeClauseFormat1Context.prototype.accept = function (visitor) {
        if (visitor.visitLibraryAttributeClauseFormat1) {
            return visitor.visitLibraryAttributeClauseFormat1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryAttributeClauseFormat1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryAttributeClauseFormat1Context = LibraryAttributeClauseFormat1Context;
var LibraryAttributeClauseFormat2Context = /** @class */ (function (_super) {
    __extends(LibraryAttributeClauseFormat2Context, _super);
    function LibraryAttributeClauseFormat2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryAttributeClauseFormat2Context.prototype.ATTRIBUTE = function () { return this.getToken(Cobol85Parser.ATTRIBUTE, 0); };
    LibraryAttributeClauseFormat2Context.prototype.libraryAttributeFunction = function () {
        return this.tryGetRuleContext(0, LibraryAttributeFunctionContext);
    };
    LibraryAttributeClauseFormat2Context.prototype.LIBACCESS = function () { return this.tryGetToken(Cobol85Parser.LIBACCESS, 0); };
    LibraryAttributeClauseFormat2Context.prototype.libraryAttributeParameter = function () {
        return this.tryGetRuleContext(0, LibraryAttributeParameterContext);
    };
    LibraryAttributeClauseFormat2Context.prototype.libraryAttributeTitle = function () {
        return this.tryGetRuleContext(0, LibraryAttributeTitleContext);
    };
    LibraryAttributeClauseFormat2Context.prototype.BYFUNCTION = function () { return this.tryGetToken(Cobol85Parser.BYFUNCTION, 0); };
    LibraryAttributeClauseFormat2Context.prototype.BYTITLE = function () { return this.tryGetToken(Cobol85Parser.BYTITLE, 0); };
    LibraryAttributeClauseFormat2Context.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(LibraryAttributeClauseFormat2Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryAttributeClauseFormat2; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryAttributeClauseFormat2Context.prototype.enterRule = function (listener) {
        if (listener.enterLibraryAttributeClauseFormat2) {
            listener.enterLibraryAttributeClauseFormat2(this);
        }
    };
    // @Override
    LibraryAttributeClauseFormat2Context.prototype.exitRule = function (listener) {
        if (listener.exitLibraryAttributeClauseFormat2) {
            listener.exitLibraryAttributeClauseFormat2(this);
        }
    };
    // @Override
    LibraryAttributeClauseFormat2Context.prototype.accept = function (visitor) {
        if (visitor.visitLibraryAttributeClauseFormat2) {
            return visitor.visitLibraryAttributeClauseFormat2(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryAttributeClauseFormat2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryAttributeClauseFormat2Context = LibraryAttributeClauseFormat2Context;
var LibraryAttributeFunctionContext = /** @class */ (function (_super) {
    __extends(LibraryAttributeFunctionContext, _super);
    function LibraryAttributeFunctionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryAttributeFunctionContext.prototype.FUNCTIONNAME = function () { return this.getToken(Cobol85Parser.FUNCTIONNAME, 0); };
    LibraryAttributeFunctionContext.prototype.IS = function () { return this.getToken(Cobol85Parser.IS, 0); };
    LibraryAttributeFunctionContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    Object.defineProperty(LibraryAttributeFunctionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryAttributeFunction; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryAttributeFunctionContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryAttributeFunction) {
            listener.enterLibraryAttributeFunction(this);
        }
    };
    // @Override
    LibraryAttributeFunctionContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryAttributeFunction) {
            listener.exitLibraryAttributeFunction(this);
        }
    };
    // @Override
    LibraryAttributeFunctionContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryAttributeFunction) {
            return visitor.visitLibraryAttributeFunction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryAttributeFunctionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryAttributeFunctionContext = LibraryAttributeFunctionContext;
var LibraryAttributeParameterContext = /** @class */ (function (_super) {
    __extends(LibraryAttributeParameterContext, _super);
    function LibraryAttributeParameterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryAttributeParameterContext.prototype.LIBPARAMETER = function () { return this.getToken(Cobol85Parser.LIBPARAMETER, 0); };
    LibraryAttributeParameterContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    LibraryAttributeParameterContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(LibraryAttributeParameterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryAttributeParameter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryAttributeParameterContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryAttributeParameter) {
            listener.enterLibraryAttributeParameter(this);
        }
    };
    // @Override
    LibraryAttributeParameterContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryAttributeParameter) {
            listener.exitLibraryAttributeParameter(this);
        }
    };
    // @Override
    LibraryAttributeParameterContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryAttributeParameter) {
            return visitor.visitLibraryAttributeParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryAttributeParameterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryAttributeParameterContext = LibraryAttributeParameterContext;
var LibraryAttributeTitleContext = /** @class */ (function (_super) {
    __extends(LibraryAttributeTitleContext, _super);
    function LibraryAttributeTitleContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryAttributeTitleContext.prototype.TITLE = function () { return this.getToken(Cobol85Parser.TITLE, 0); };
    LibraryAttributeTitleContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    LibraryAttributeTitleContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(LibraryAttributeTitleContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryAttributeTitle; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryAttributeTitleContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryAttributeTitle) {
            listener.enterLibraryAttributeTitle(this);
        }
    };
    // @Override
    LibraryAttributeTitleContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryAttributeTitle) {
            listener.exitLibraryAttributeTitle(this);
        }
    };
    // @Override
    LibraryAttributeTitleContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryAttributeTitle) {
            return visitor.visitLibraryAttributeTitle(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryAttributeTitleContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryAttributeTitleContext = LibraryAttributeTitleContext;
var LibraryEntryProcedureClauseFormat1Context = /** @class */ (function (_super) {
    __extends(LibraryEntryProcedureClauseFormat1Context, _super);
    function LibraryEntryProcedureClauseFormat1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryEntryProcedureClauseFormat1Context.prototype.ENTRY_PROCEDURE = function () { return this.getToken(Cobol85Parser.ENTRY_PROCEDURE, 0); };
    LibraryEntryProcedureClauseFormat1Context.prototype.programName = function () {
        return this.getRuleContext(0, ProgramNameContext);
    };
    LibraryEntryProcedureClauseFormat1Context.prototype.libraryEntryProcedureForClause = function () {
        return this.tryGetRuleContext(0, LibraryEntryProcedureForClauseContext);
    };
    Object.defineProperty(LibraryEntryProcedureClauseFormat1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryEntryProcedureClauseFormat1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryEntryProcedureClauseFormat1Context.prototype.enterRule = function (listener) {
        if (listener.enterLibraryEntryProcedureClauseFormat1) {
            listener.enterLibraryEntryProcedureClauseFormat1(this);
        }
    };
    // @Override
    LibraryEntryProcedureClauseFormat1Context.prototype.exitRule = function (listener) {
        if (listener.exitLibraryEntryProcedureClauseFormat1) {
            listener.exitLibraryEntryProcedureClauseFormat1(this);
        }
    };
    // @Override
    LibraryEntryProcedureClauseFormat1Context.prototype.accept = function (visitor) {
        if (visitor.visitLibraryEntryProcedureClauseFormat1) {
            return visitor.visitLibraryEntryProcedureClauseFormat1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryEntryProcedureClauseFormat1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryEntryProcedureClauseFormat1Context = LibraryEntryProcedureClauseFormat1Context;
var LibraryEntryProcedureClauseFormat2Context = /** @class */ (function (_super) {
    __extends(LibraryEntryProcedureClauseFormat2Context, _super);
    function LibraryEntryProcedureClauseFormat2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryEntryProcedureClauseFormat2Context.prototype.ENTRY_PROCEDURE = function () { return this.getToken(Cobol85Parser.ENTRY_PROCEDURE, 0); };
    LibraryEntryProcedureClauseFormat2Context.prototype.programName = function () {
        return this.getRuleContext(0, ProgramNameContext);
    };
    LibraryEntryProcedureClauseFormat2Context.prototype.libraryEntryProcedureForClause = function () {
        return this.tryGetRuleContext(0, LibraryEntryProcedureForClauseContext);
    };
    LibraryEntryProcedureClauseFormat2Context.prototype.libraryEntryProcedureWithClause = function () {
        return this.tryGetRuleContext(0, LibraryEntryProcedureWithClauseContext);
    };
    LibraryEntryProcedureClauseFormat2Context.prototype.libraryEntryProcedureUsingClause = function () {
        return this.tryGetRuleContext(0, LibraryEntryProcedureUsingClauseContext);
    };
    LibraryEntryProcedureClauseFormat2Context.prototype.libraryEntryProcedureGivingClause = function () {
        return this.tryGetRuleContext(0, LibraryEntryProcedureGivingClauseContext);
    };
    Object.defineProperty(LibraryEntryProcedureClauseFormat2Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryEntryProcedureClauseFormat2; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryEntryProcedureClauseFormat2Context.prototype.enterRule = function (listener) {
        if (listener.enterLibraryEntryProcedureClauseFormat2) {
            listener.enterLibraryEntryProcedureClauseFormat2(this);
        }
    };
    // @Override
    LibraryEntryProcedureClauseFormat2Context.prototype.exitRule = function (listener) {
        if (listener.exitLibraryEntryProcedureClauseFormat2) {
            listener.exitLibraryEntryProcedureClauseFormat2(this);
        }
    };
    // @Override
    LibraryEntryProcedureClauseFormat2Context.prototype.accept = function (visitor) {
        if (visitor.visitLibraryEntryProcedureClauseFormat2) {
            return visitor.visitLibraryEntryProcedureClauseFormat2(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryEntryProcedureClauseFormat2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryEntryProcedureClauseFormat2Context = LibraryEntryProcedureClauseFormat2Context;
var LibraryEntryProcedureForClauseContext = /** @class */ (function (_super) {
    __extends(LibraryEntryProcedureForClauseContext, _super);
    function LibraryEntryProcedureForClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryEntryProcedureForClauseContext.prototype.FOR = function () { return this.getToken(Cobol85Parser.FOR, 0); };
    LibraryEntryProcedureForClauseContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    Object.defineProperty(LibraryEntryProcedureForClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryEntryProcedureForClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryEntryProcedureForClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryEntryProcedureForClause) {
            listener.enterLibraryEntryProcedureForClause(this);
        }
    };
    // @Override
    LibraryEntryProcedureForClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryEntryProcedureForClause) {
            listener.exitLibraryEntryProcedureForClause(this);
        }
    };
    // @Override
    LibraryEntryProcedureForClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryEntryProcedureForClause) {
            return visitor.visitLibraryEntryProcedureForClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryEntryProcedureForClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryEntryProcedureForClauseContext = LibraryEntryProcedureForClauseContext;
var LibraryEntryProcedureGivingClauseContext = /** @class */ (function (_super) {
    __extends(LibraryEntryProcedureGivingClauseContext, _super);
    function LibraryEntryProcedureGivingClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryEntryProcedureGivingClauseContext.prototype.GIVING = function () { return this.getToken(Cobol85Parser.GIVING, 0); };
    LibraryEntryProcedureGivingClauseContext.prototype.dataName = function () {
        return this.getRuleContext(0, DataNameContext);
    };
    Object.defineProperty(LibraryEntryProcedureGivingClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryEntryProcedureGivingClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryEntryProcedureGivingClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryEntryProcedureGivingClause) {
            listener.enterLibraryEntryProcedureGivingClause(this);
        }
    };
    // @Override
    LibraryEntryProcedureGivingClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryEntryProcedureGivingClause) {
            listener.exitLibraryEntryProcedureGivingClause(this);
        }
    };
    // @Override
    LibraryEntryProcedureGivingClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryEntryProcedureGivingClause) {
            return visitor.visitLibraryEntryProcedureGivingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryEntryProcedureGivingClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryEntryProcedureGivingClauseContext = LibraryEntryProcedureGivingClauseContext;
var LibraryEntryProcedureUsingClauseContext = /** @class */ (function (_super) {
    __extends(LibraryEntryProcedureUsingClauseContext, _super);
    function LibraryEntryProcedureUsingClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryEntryProcedureUsingClauseContext.prototype.USING = function () { return this.getToken(Cobol85Parser.USING, 0); };
    LibraryEntryProcedureUsingClauseContext.prototype.libraryEntryProcedureUsingName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LibraryEntryProcedureUsingNameContext);
        }
        else {
            return this.getRuleContext(i, LibraryEntryProcedureUsingNameContext);
        }
    };
    Object.defineProperty(LibraryEntryProcedureUsingClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryEntryProcedureUsingClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryEntryProcedureUsingClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryEntryProcedureUsingClause) {
            listener.enterLibraryEntryProcedureUsingClause(this);
        }
    };
    // @Override
    LibraryEntryProcedureUsingClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryEntryProcedureUsingClause) {
            listener.exitLibraryEntryProcedureUsingClause(this);
        }
    };
    // @Override
    LibraryEntryProcedureUsingClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryEntryProcedureUsingClause) {
            return visitor.visitLibraryEntryProcedureUsingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryEntryProcedureUsingClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryEntryProcedureUsingClauseContext = LibraryEntryProcedureUsingClauseContext;
var LibraryEntryProcedureUsingNameContext = /** @class */ (function (_super) {
    __extends(LibraryEntryProcedureUsingNameContext, _super);
    function LibraryEntryProcedureUsingNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryEntryProcedureUsingNameContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    LibraryEntryProcedureUsingNameContext.prototype.fileName = function () {
        return this.tryGetRuleContext(0, FileNameContext);
    };
    Object.defineProperty(LibraryEntryProcedureUsingNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryEntryProcedureUsingName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryEntryProcedureUsingNameContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryEntryProcedureUsingName) {
            listener.enterLibraryEntryProcedureUsingName(this);
        }
    };
    // @Override
    LibraryEntryProcedureUsingNameContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryEntryProcedureUsingName) {
            listener.exitLibraryEntryProcedureUsingName(this);
        }
    };
    // @Override
    LibraryEntryProcedureUsingNameContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryEntryProcedureUsingName) {
            return visitor.visitLibraryEntryProcedureUsingName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryEntryProcedureUsingNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryEntryProcedureUsingNameContext = LibraryEntryProcedureUsingNameContext;
var LibraryEntryProcedureWithClauseContext = /** @class */ (function (_super) {
    __extends(LibraryEntryProcedureWithClauseContext, _super);
    function LibraryEntryProcedureWithClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryEntryProcedureWithClauseContext.prototype.WITH = function () { return this.getToken(Cobol85Parser.WITH, 0); };
    LibraryEntryProcedureWithClauseContext.prototype.libraryEntryProcedureWithName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LibraryEntryProcedureWithNameContext);
        }
        else {
            return this.getRuleContext(i, LibraryEntryProcedureWithNameContext);
        }
    };
    Object.defineProperty(LibraryEntryProcedureWithClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryEntryProcedureWithClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryEntryProcedureWithClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryEntryProcedureWithClause) {
            listener.enterLibraryEntryProcedureWithClause(this);
        }
    };
    // @Override
    LibraryEntryProcedureWithClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryEntryProcedureWithClause) {
            listener.exitLibraryEntryProcedureWithClause(this);
        }
    };
    // @Override
    LibraryEntryProcedureWithClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryEntryProcedureWithClause) {
            return visitor.visitLibraryEntryProcedureWithClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryEntryProcedureWithClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryEntryProcedureWithClauseContext = LibraryEntryProcedureWithClauseContext;
var LibraryEntryProcedureWithNameContext = /** @class */ (function (_super) {
    __extends(LibraryEntryProcedureWithNameContext, _super);
    function LibraryEntryProcedureWithNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryEntryProcedureWithNameContext.prototype.localName = function () {
        return this.tryGetRuleContext(0, LocalNameContext);
    };
    LibraryEntryProcedureWithNameContext.prototype.fileName = function () {
        return this.tryGetRuleContext(0, FileNameContext);
    };
    Object.defineProperty(LibraryEntryProcedureWithNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryEntryProcedureWithName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryEntryProcedureWithNameContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryEntryProcedureWithName) {
            listener.enterLibraryEntryProcedureWithName(this);
        }
    };
    // @Override
    LibraryEntryProcedureWithNameContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryEntryProcedureWithName) {
            listener.exitLibraryEntryProcedureWithName(this);
        }
    };
    // @Override
    LibraryEntryProcedureWithNameContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryEntryProcedureWithName) {
            return visitor.visitLibraryEntryProcedureWithName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryEntryProcedureWithNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryEntryProcedureWithNameContext = LibraryEntryProcedureWithNameContext;
var LibraryIsCommonClauseContext = /** @class */ (function (_super) {
    __extends(LibraryIsCommonClauseContext, _super);
    function LibraryIsCommonClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryIsCommonClauseContext.prototype.COMMON = function () { return this.getToken(Cobol85Parser.COMMON, 0); };
    LibraryIsCommonClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(LibraryIsCommonClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryIsCommonClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryIsCommonClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryIsCommonClause) {
            listener.enterLibraryIsCommonClause(this);
        }
    };
    // @Override
    LibraryIsCommonClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryIsCommonClause) {
            listener.exitLibraryIsCommonClause(this);
        }
    };
    // @Override
    LibraryIsCommonClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryIsCommonClause) {
            return visitor.visitLibraryIsCommonClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryIsCommonClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryIsCommonClauseContext = LibraryIsCommonClauseContext;
var LibraryIsGlobalClauseContext = /** @class */ (function (_super) {
    __extends(LibraryIsGlobalClauseContext, _super);
    function LibraryIsGlobalClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryIsGlobalClauseContext.prototype.GLOBAL = function () { return this.getToken(Cobol85Parser.GLOBAL, 0); };
    LibraryIsGlobalClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(LibraryIsGlobalClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryIsGlobalClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryIsGlobalClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryIsGlobalClause) {
            listener.enterLibraryIsGlobalClause(this);
        }
    };
    // @Override
    LibraryIsGlobalClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryIsGlobalClause) {
            listener.exitLibraryIsGlobalClause(this);
        }
    };
    // @Override
    LibraryIsGlobalClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryIsGlobalClause) {
            return visitor.visitLibraryIsGlobalClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryIsGlobalClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryIsGlobalClauseContext = LibraryIsGlobalClauseContext;
var DataDescriptionEntryContext = /** @class */ (function (_super) {
    __extends(DataDescriptionEntryContext, _super);
    function DataDescriptionEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataDescriptionEntryContext.prototype.dataDescriptionEntryFormat1 = function () {
        return this.tryGetRuleContext(0, DataDescriptionEntryFormat1Context);
    };
    DataDescriptionEntryContext.prototype.dataDescriptionEntryFormat2 = function () {
        return this.tryGetRuleContext(0, DataDescriptionEntryFormat2Context);
    };
    DataDescriptionEntryContext.prototype.dataDescriptionEntryFormat3 = function () {
        return this.tryGetRuleContext(0, DataDescriptionEntryFormat3Context);
    };
    DataDescriptionEntryContext.prototype.dataDescriptionEntryExecSql = function () {
        return this.tryGetRuleContext(0, DataDescriptionEntryExecSqlContext);
    };
    Object.defineProperty(DataDescriptionEntryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataDescriptionEntry; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataDescriptionEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterDataDescriptionEntry) {
            listener.enterDataDescriptionEntry(this);
        }
    };
    // @Override
    DataDescriptionEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitDataDescriptionEntry) {
            listener.exitDataDescriptionEntry(this);
        }
    };
    // @Override
    DataDescriptionEntryContext.prototype.accept = function (visitor) {
        if (visitor.visitDataDescriptionEntry) {
            return visitor.visitDataDescriptionEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataDescriptionEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataDescriptionEntryContext = DataDescriptionEntryContext;
var DataDescriptionEntryFormat1Context = /** @class */ (function (_super) {
    __extends(DataDescriptionEntryFormat1Context, _super);
    function DataDescriptionEntryFormat1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataDescriptionEntryFormat1Context.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    DataDescriptionEntryFormat1Context.prototype.INTEGERLITERAL = function () { return this.tryGetToken(Cobol85Parser.INTEGERLITERAL, 0); };
    DataDescriptionEntryFormat1Context.prototype.LEVEL_NUMBER_77 = function () { return this.tryGetToken(Cobol85Parser.LEVEL_NUMBER_77, 0); };
    DataDescriptionEntryFormat1Context.prototype.FILLER = function () { return this.tryGetToken(Cobol85Parser.FILLER, 0); };
    DataDescriptionEntryFormat1Context.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    DataDescriptionEntryFormat1Context.prototype.dataRedefinesClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataRedefinesClauseContext);
        }
        else {
            return this.getRuleContext(i, DataRedefinesClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataIntegerStringClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataIntegerStringClauseContext);
        }
        else {
            return this.getRuleContext(i, DataIntegerStringClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataExternalClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataExternalClauseContext);
        }
        else {
            return this.getRuleContext(i, DataExternalClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataGlobalClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataGlobalClauseContext);
        }
        else {
            return this.getRuleContext(i, DataGlobalClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataTypeDefClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeDefClauseContext);
        }
        else {
            return this.getRuleContext(i, DataTypeDefClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataThreadLocalClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataThreadLocalClauseContext);
        }
        else {
            return this.getRuleContext(i, DataThreadLocalClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataPictureClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataPictureClauseContext);
        }
        else {
            return this.getRuleContext(i, DataPictureClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataCommonOwnLocalClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataCommonOwnLocalClauseContext);
        }
        else {
            return this.getRuleContext(i, DataCommonOwnLocalClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataTypeClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeClauseContext);
        }
        else {
            return this.getRuleContext(i, DataTypeClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataUsingClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataUsingClauseContext);
        }
        else {
            return this.getRuleContext(i, DataUsingClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataUsageClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataUsageClauseContext);
        }
        else {
            return this.getRuleContext(i, DataUsageClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataValueClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataValueClauseContext);
        }
        else {
            return this.getRuleContext(i, DataValueClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataReceivedByClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataReceivedByClauseContext);
        }
        else {
            return this.getRuleContext(i, DataReceivedByClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataOccursClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataOccursClauseContext);
        }
        else {
            return this.getRuleContext(i, DataOccursClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataSignClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataSignClauseContext);
        }
        else {
            return this.getRuleContext(i, DataSignClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataSynchronizedClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataSynchronizedClauseContext);
        }
        else {
            return this.getRuleContext(i, DataSynchronizedClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataJustifiedClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataJustifiedClauseContext);
        }
        else {
            return this.getRuleContext(i, DataJustifiedClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataBlankWhenZeroClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataBlankWhenZeroClauseContext);
        }
        else {
            return this.getRuleContext(i, DataBlankWhenZeroClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataWithLowerBoundsClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataWithLowerBoundsClauseContext);
        }
        else {
            return this.getRuleContext(i, DataWithLowerBoundsClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataAlignedClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataAlignedClauseContext);
        }
        else {
            return this.getRuleContext(i, DataAlignedClauseContext);
        }
    };
    DataDescriptionEntryFormat1Context.prototype.dataRecordAreaClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataRecordAreaClauseContext);
        }
        else {
            return this.getRuleContext(i, DataRecordAreaClauseContext);
        }
    };
    Object.defineProperty(DataDescriptionEntryFormat1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataDescriptionEntryFormat1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataDescriptionEntryFormat1Context.prototype.enterRule = function (listener) {
        if (listener.enterDataDescriptionEntryFormat1) {
            listener.enterDataDescriptionEntryFormat1(this);
        }
    };
    // @Override
    DataDescriptionEntryFormat1Context.prototype.exitRule = function (listener) {
        if (listener.exitDataDescriptionEntryFormat1) {
            listener.exitDataDescriptionEntryFormat1(this);
        }
    };
    // @Override
    DataDescriptionEntryFormat1Context.prototype.accept = function (visitor) {
        if (visitor.visitDataDescriptionEntryFormat1) {
            return visitor.visitDataDescriptionEntryFormat1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataDescriptionEntryFormat1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataDescriptionEntryFormat1Context = DataDescriptionEntryFormat1Context;
var DataDescriptionEntryFormat2Context = /** @class */ (function (_super) {
    __extends(DataDescriptionEntryFormat2Context, _super);
    function DataDescriptionEntryFormat2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataDescriptionEntryFormat2Context.prototype.LEVEL_NUMBER_66 = function () { return this.getToken(Cobol85Parser.LEVEL_NUMBER_66, 0); };
    DataDescriptionEntryFormat2Context.prototype.dataName = function () {
        return this.getRuleContext(0, DataNameContext);
    };
    DataDescriptionEntryFormat2Context.prototype.dataRenamesClause = function () {
        return this.getRuleContext(0, DataRenamesClauseContext);
    };
    DataDescriptionEntryFormat2Context.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    Object.defineProperty(DataDescriptionEntryFormat2Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataDescriptionEntryFormat2; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataDescriptionEntryFormat2Context.prototype.enterRule = function (listener) {
        if (listener.enterDataDescriptionEntryFormat2) {
            listener.enterDataDescriptionEntryFormat2(this);
        }
    };
    // @Override
    DataDescriptionEntryFormat2Context.prototype.exitRule = function (listener) {
        if (listener.exitDataDescriptionEntryFormat2) {
            listener.exitDataDescriptionEntryFormat2(this);
        }
    };
    // @Override
    DataDescriptionEntryFormat2Context.prototype.accept = function (visitor) {
        if (visitor.visitDataDescriptionEntryFormat2) {
            return visitor.visitDataDescriptionEntryFormat2(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataDescriptionEntryFormat2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataDescriptionEntryFormat2Context = DataDescriptionEntryFormat2Context;
var DataDescriptionEntryFormat3Context = /** @class */ (function (_super) {
    __extends(DataDescriptionEntryFormat3Context, _super);
    function DataDescriptionEntryFormat3Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataDescriptionEntryFormat3Context.prototype.LEVEL_NUMBER_88 = function () { return this.getToken(Cobol85Parser.LEVEL_NUMBER_88, 0); };
    DataDescriptionEntryFormat3Context.prototype.conditionName = function () {
        return this.getRuleContext(0, ConditionNameContext);
    };
    DataDescriptionEntryFormat3Context.prototype.dataValueClause = function () {
        return this.getRuleContext(0, DataValueClauseContext);
    };
    DataDescriptionEntryFormat3Context.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    Object.defineProperty(DataDescriptionEntryFormat3Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataDescriptionEntryFormat3; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataDescriptionEntryFormat3Context.prototype.enterRule = function (listener) {
        if (listener.enterDataDescriptionEntryFormat3) {
            listener.enterDataDescriptionEntryFormat3(this);
        }
    };
    // @Override
    DataDescriptionEntryFormat3Context.prototype.exitRule = function (listener) {
        if (listener.exitDataDescriptionEntryFormat3) {
            listener.exitDataDescriptionEntryFormat3(this);
        }
    };
    // @Override
    DataDescriptionEntryFormat3Context.prototype.accept = function (visitor) {
        if (visitor.visitDataDescriptionEntryFormat3) {
            return visitor.visitDataDescriptionEntryFormat3(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataDescriptionEntryFormat3Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataDescriptionEntryFormat3Context = DataDescriptionEntryFormat3Context;
var DataDescriptionEntryExecSqlContext = /** @class */ (function (_super) {
    __extends(DataDescriptionEntryExecSqlContext, _super);
    function DataDescriptionEntryExecSqlContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataDescriptionEntryExecSqlContext.prototype.EXECSQLLINE = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.EXECSQLLINE);
        }
        else {
            return this.getToken(Cobol85Parser.EXECSQLLINE, i);
        }
    };
    DataDescriptionEntryExecSqlContext.prototype.DOT_FS = function () { return this.tryGetToken(Cobol85Parser.DOT_FS, 0); };
    Object.defineProperty(DataDescriptionEntryExecSqlContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataDescriptionEntryExecSql; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataDescriptionEntryExecSqlContext.prototype.enterRule = function (listener) {
        if (listener.enterDataDescriptionEntryExecSql) {
            listener.enterDataDescriptionEntryExecSql(this);
        }
    };
    // @Override
    DataDescriptionEntryExecSqlContext.prototype.exitRule = function (listener) {
        if (listener.exitDataDescriptionEntryExecSql) {
            listener.exitDataDescriptionEntryExecSql(this);
        }
    };
    // @Override
    DataDescriptionEntryExecSqlContext.prototype.accept = function (visitor) {
        if (visitor.visitDataDescriptionEntryExecSql) {
            return visitor.visitDataDescriptionEntryExecSql(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataDescriptionEntryExecSqlContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataDescriptionEntryExecSqlContext = DataDescriptionEntryExecSqlContext;
var DataAlignedClauseContext = /** @class */ (function (_super) {
    __extends(DataAlignedClauseContext, _super);
    function DataAlignedClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataAlignedClauseContext.prototype.ALIGNED = function () { return this.getToken(Cobol85Parser.ALIGNED, 0); };
    Object.defineProperty(DataAlignedClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataAlignedClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataAlignedClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataAlignedClause) {
            listener.enterDataAlignedClause(this);
        }
    };
    // @Override
    DataAlignedClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataAlignedClause) {
            listener.exitDataAlignedClause(this);
        }
    };
    // @Override
    DataAlignedClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataAlignedClause) {
            return visitor.visitDataAlignedClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataAlignedClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataAlignedClauseContext = DataAlignedClauseContext;
var DataBlankWhenZeroClauseContext = /** @class */ (function (_super) {
    __extends(DataBlankWhenZeroClauseContext, _super);
    function DataBlankWhenZeroClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataBlankWhenZeroClauseContext.prototype.BLANK = function () { return this.getToken(Cobol85Parser.BLANK, 0); };
    DataBlankWhenZeroClauseContext.prototype.ZERO = function () { return this.tryGetToken(Cobol85Parser.ZERO, 0); };
    DataBlankWhenZeroClauseContext.prototype.ZEROS = function () { return this.tryGetToken(Cobol85Parser.ZEROS, 0); };
    DataBlankWhenZeroClauseContext.prototype.ZEROES = function () { return this.tryGetToken(Cobol85Parser.ZEROES, 0); };
    DataBlankWhenZeroClauseContext.prototype.WHEN = function () { return this.tryGetToken(Cobol85Parser.WHEN, 0); };
    Object.defineProperty(DataBlankWhenZeroClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataBlankWhenZeroClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataBlankWhenZeroClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataBlankWhenZeroClause) {
            listener.enterDataBlankWhenZeroClause(this);
        }
    };
    // @Override
    DataBlankWhenZeroClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataBlankWhenZeroClause) {
            listener.exitDataBlankWhenZeroClause(this);
        }
    };
    // @Override
    DataBlankWhenZeroClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataBlankWhenZeroClause) {
            return visitor.visitDataBlankWhenZeroClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataBlankWhenZeroClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataBlankWhenZeroClauseContext = DataBlankWhenZeroClauseContext;
var DataCommonOwnLocalClauseContext = /** @class */ (function (_super) {
    __extends(DataCommonOwnLocalClauseContext, _super);
    function DataCommonOwnLocalClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataCommonOwnLocalClauseContext.prototype.COMMON = function () { return this.tryGetToken(Cobol85Parser.COMMON, 0); };
    DataCommonOwnLocalClauseContext.prototype.OWN = function () { return this.tryGetToken(Cobol85Parser.OWN, 0); };
    DataCommonOwnLocalClauseContext.prototype.LOCAL = function () { return this.tryGetToken(Cobol85Parser.LOCAL, 0); };
    Object.defineProperty(DataCommonOwnLocalClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataCommonOwnLocalClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataCommonOwnLocalClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataCommonOwnLocalClause) {
            listener.enterDataCommonOwnLocalClause(this);
        }
    };
    // @Override
    DataCommonOwnLocalClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataCommonOwnLocalClause) {
            listener.exitDataCommonOwnLocalClause(this);
        }
    };
    // @Override
    DataCommonOwnLocalClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataCommonOwnLocalClause) {
            return visitor.visitDataCommonOwnLocalClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataCommonOwnLocalClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataCommonOwnLocalClauseContext = DataCommonOwnLocalClauseContext;
var DataExternalClauseContext = /** @class */ (function (_super) {
    __extends(DataExternalClauseContext, _super);
    function DataExternalClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataExternalClauseContext.prototype.EXTERNAL = function () { return this.getToken(Cobol85Parser.EXTERNAL, 0); };
    DataExternalClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    DataExternalClauseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    DataExternalClauseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(DataExternalClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataExternalClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataExternalClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataExternalClause) {
            listener.enterDataExternalClause(this);
        }
    };
    // @Override
    DataExternalClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataExternalClause) {
            listener.exitDataExternalClause(this);
        }
    };
    // @Override
    DataExternalClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataExternalClause) {
            return visitor.visitDataExternalClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataExternalClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataExternalClauseContext = DataExternalClauseContext;
var DataGlobalClauseContext = /** @class */ (function (_super) {
    __extends(DataGlobalClauseContext, _super);
    function DataGlobalClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataGlobalClauseContext.prototype.GLOBAL = function () { return this.getToken(Cobol85Parser.GLOBAL, 0); };
    DataGlobalClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(DataGlobalClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataGlobalClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataGlobalClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataGlobalClause) {
            listener.enterDataGlobalClause(this);
        }
    };
    // @Override
    DataGlobalClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataGlobalClause) {
            listener.exitDataGlobalClause(this);
        }
    };
    // @Override
    DataGlobalClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataGlobalClause) {
            return visitor.visitDataGlobalClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataGlobalClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataGlobalClauseContext = DataGlobalClauseContext;
var DataIntegerStringClauseContext = /** @class */ (function (_super) {
    __extends(DataIntegerStringClauseContext, _super);
    function DataIntegerStringClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataIntegerStringClauseContext.prototype.INTEGER = function () { return this.tryGetToken(Cobol85Parser.INTEGER, 0); };
    DataIntegerStringClauseContext.prototype.STRING = function () { return this.tryGetToken(Cobol85Parser.STRING, 0); };
    Object.defineProperty(DataIntegerStringClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataIntegerStringClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataIntegerStringClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataIntegerStringClause) {
            listener.enterDataIntegerStringClause(this);
        }
    };
    // @Override
    DataIntegerStringClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataIntegerStringClause) {
            listener.exitDataIntegerStringClause(this);
        }
    };
    // @Override
    DataIntegerStringClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataIntegerStringClause) {
            return visitor.visitDataIntegerStringClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataIntegerStringClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataIntegerStringClauseContext = DataIntegerStringClauseContext;
var DataJustifiedClauseContext = /** @class */ (function (_super) {
    __extends(DataJustifiedClauseContext, _super);
    function DataJustifiedClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataJustifiedClauseContext.prototype.JUSTIFIED = function () { return this.tryGetToken(Cobol85Parser.JUSTIFIED, 0); };
    DataJustifiedClauseContext.prototype.JUST = function () { return this.tryGetToken(Cobol85Parser.JUST, 0); };
    DataJustifiedClauseContext.prototype.RIGHT = function () { return this.tryGetToken(Cobol85Parser.RIGHT, 0); };
    Object.defineProperty(DataJustifiedClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataJustifiedClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataJustifiedClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataJustifiedClause) {
            listener.enterDataJustifiedClause(this);
        }
    };
    // @Override
    DataJustifiedClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataJustifiedClause) {
            listener.exitDataJustifiedClause(this);
        }
    };
    // @Override
    DataJustifiedClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataJustifiedClause) {
            return visitor.visitDataJustifiedClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataJustifiedClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataJustifiedClauseContext = DataJustifiedClauseContext;
var DataOccursClauseContext = /** @class */ (function (_super) {
    __extends(DataOccursClauseContext, _super);
    function DataOccursClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataOccursClauseContext.prototype.OCCURS = function () { return this.getToken(Cobol85Parser.OCCURS, 0); };
    DataOccursClauseContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    DataOccursClauseContext.prototype.dataOccursTo = function () {
        return this.tryGetRuleContext(0, DataOccursToContext);
    };
    DataOccursClauseContext.prototype.TIMES = function () { return this.tryGetToken(Cobol85Parser.TIMES, 0); };
    DataOccursClauseContext.prototype.DEPENDING = function () { return this.tryGetToken(Cobol85Parser.DEPENDING, 0); };
    DataOccursClauseContext.prototype.qualifiedDataName = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameContext);
    };
    DataOccursClauseContext.prototype.dataOccursSort = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataOccursSortContext);
        }
        else {
            return this.getRuleContext(i, DataOccursSortContext);
        }
    };
    DataOccursClauseContext.prototype.INDEXED = function () { return this.tryGetToken(Cobol85Parser.INDEXED, 0); };
    DataOccursClauseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    DataOccursClauseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    DataOccursClauseContext.prototype.LOCAL = function () { return this.tryGetToken(Cobol85Parser.LOCAL, 0); };
    DataOccursClauseContext.prototype.indexName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IndexNameContext);
        }
        else {
            return this.getRuleContext(i, IndexNameContext);
        }
    };
    Object.defineProperty(DataOccursClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataOccursClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataOccursClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataOccursClause) {
            listener.enterDataOccursClause(this);
        }
    };
    // @Override
    DataOccursClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataOccursClause) {
            listener.exitDataOccursClause(this);
        }
    };
    // @Override
    DataOccursClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataOccursClause) {
            return visitor.visitDataOccursClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataOccursClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataOccursClauseContext = DataOccursClauseContext;
var DataOccursToContext = /** @class */ (function (_super) {
    __extends(DataOccursToContext, _super);
    function DataOccursToContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataOccursToContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    DataOccursToContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(DataOccursToContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataOccursTo; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataOccursToContext.prototype.enterRule = function (listener) {
        if (listener.enterDataOccursTo) {
            listener.enterDataOccursTo(this);
        }
    };
    // @Override
    DataOccursToContext.prototype.exitRule = function (listener) {
        if (listener.exitDataOccursTo) {
            listener.exitDataOccursTo(this);
        }
    };
    // @Override
    DataOccursToContext.prototype.accept = function (visitor) {
        if (visitor.visitDataOccursTo) {
            return visitor.visitDataOccursTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataOccursToContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataOccursToContext = DataOccursToContext;
var DataOccursSortContext = /** @class */ (function (_super) {
    __extends(DataOccursSortContext, _super);
    function DataOccursSortContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataOccursSortContext.prototype.ASCENDING = function () { return this.tryGetToken(Cobol85Parser.ASCENDING, 0); };
    DataOccursSortContext.prototype.DESCENDING = function () { return this.tryGetToken(Cobol85Parser.DESCENDING, 0); };
    DataOccursSortContext.prototype.KEY = function () { return this.tryGetToken(Cobol85Parser.KEY, 0); };
    DataOccursSortContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    DataOccursSortContext.prototype.qualifiedDataName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedDataNameContext);
        }
        else {
            return this.getRuleContext(i, QualifiedDataNameContext);
        }
    };
    Object.defineProperty(DataOccursSortContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataOccursSort; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataOccursSortContext.prototype.enterRule = function (listener) {
        if (listener.enterDataOccursSort) {
            listener.enterDataOccursSort(this);
        }
    };
    // @Override
    DataOccursSortContext.prototype.exitRule = function (listener) {
        if (listener.exitDataOccursSort) {
            listener.exitDataOccursSort(this);
        }
    };
    // @Override
    DataOccursSortContext.prototype.accept = function (visitor) {
        if (visitor.visitDataOccursSort) {
            return visitor.visitDataOccursSort(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataOccursSortContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataOccursSortContext = DataOccursSortContext;
var DataPictureClauseContext = /** @class */ (function (_super) {
    __extends(DataPictureClauseContext, _super);
    function DataPictureClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataPictureClauseContext.prototype.pictureString = function () {
        return this.getRuleContext(0, PictureStringContext);
    };
    DataPictureClauseContext.prototype.PICTURE = function () { return this.tryGetToken(Cobol85Parser.PICTURE, 0); };
    DataPictureClauseContext.prototype.PIC = function () { return this.tryGetToken(Cobol85Parser.PIC, 0); };
    DataPictureClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(DataPictureClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataPictureClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataPictureClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataPictureClause) {
            listener.enterDataPictureClause(this);
        }
    };
    // @Override
    DataPictureClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataPictureClause) {
            listener.exitDataPictureClause(this);
        }
    };
    // @Override
    DataPictureClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataPictureClause) {
            return visitor.visitDataPictureClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataPictureClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataPictureClauseContext = DataPictureClauseContext;
var PictureStringContext = /** @class */ (function (_super) {
    __extends(PictureStringContext, _super);
    function PictureStringContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PictureStringContext.prototype.pictureChars = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PictureCharsContext);
        }
        else {
            return this.getRuleContext(i, PictureCharsContext);
        }
    };
    PictureStringContext.prototype.pictureCardinality = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PictureCardinalityContext);
        }
        else {
            return this.getRuleContext(i, PictureCardinalityContext);
        }
    };
    Object.defineProperty(PictureStringContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_pictureString; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PictureStringContext.prototype.enterRule = function (listener) {
        if (listener.enterPictureString) {
            listener.enterPictureString(this);
        }
    };
    // @Override
    PictureStringContext.prototype.exitRule = function (listener) {
        if (listener.exitPictureString) {
            listener.exitPictureString(this);
        }
    };
    // @Override
    PictureStringContext.prototype.accept = function (visitor) {
        if (visitor.visitPictureString) {
            return visitor.visitPictureString(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PictureStringContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PictureStringContext = PictureStringContext;
var PictureCharsContext = /** @class */ (function (_super) {
    __extends(PictureCharsContext, _super);
    function PictureCharsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PictureCharsContext.prototype.DOLLARCHAR = function () { return this.tryGetToken(Cobol85Parser.DOLLARCHAR, 0); };
    PictureCharsContext.prototype.IDENTIFIER = function () { return this.tryGetToken(Cobol85Parser.IDENTIFIER, 0); };
    PictureCharsContext.prototype.NUMERICLITERAL = function () { return this.tryGetToken(Cobol85Parser.NUMERICLITERAL, 0); };
    PictureCharsContext.prototype.SLASHCHAR = function () { return this.tryGetToken(Cobol85Parser.SLASHCHAR, 0); };
    PictureCharsContext.prototype.COMMACHAR = function () { return this.tryGetToken(Cobol85Parser.COMMACHAR, 0); };
    PictureCharsContext.prototype.DOT = function () { return this.tryGetToken(Cobol85Parser.DOT, 0); };
    PictureCharsContext.prototype.COLONCHAR = function () { return this.tryGetToken(Cobol85Parser.COLONCHAR, 0); };
    PictureCharsContext.prototype.ASTERISKCHAR = function () { return this.tryGetToken(Cobol85Parser.ASTERISKCHAR, 0); };
    PictureCharsContext.prototype.DOUBLEASTERISKCHAR = function () { return this.tryGetToken(Cobol85Parser.DOUBLEASTERISKCHAR, 0); };
    PictureCharsContext.prototype.LPARENCHAR = function () { return this.tryGetToken(Cobol85Parser.LPARENCHAR, 0); };
    PictureCharsContext.prototype.RPARENCHAR = function () { return this.tryGetToken(Cobol85Parser.RPARENCHAR, 0); };
    PictureCharsContext.prototype.PLUSCHAR = function () { return this.tryGetToken(Cobol85Parser.PLUSCHAR, 0); };
    PictureCharsContext.prototype.MINUSCHAR = function () { return this.tryGetToken(Cobol85Parser.MINUSCHAR, 0); };
    PictureCharsContext.prototype.LESSTHANCHAR = function () { return this.tryGetToken(Cobol85Parser.LESSTHANCHAR, 0); };
    PictureCharsContext.prototype.MORETHANCHAR = function () { return this.tryGetToken(Cobol85Parser.MORETHANCHAR, 0); };
    PictureCharsContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(PictureCharsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_pictureChars; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PictureCharsContext.prototype.enterRule = function (listener) {
        if (listener.enterPictureChars) {
            listener.enterPictureChars(this);
        }
    };
    // @Override
    PictureCharsContext.prototype.exitRule = function (listener) {
        if (listener.exitPictureChars) {
            listener.exitPictureChars(this);
        }
    };
    // @Override
    PictureCharsContext.prototype.accept = function (visitor) {
        if (visitor.visitPictureChars) {
            return visitor.visitPictureChars(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PictureCharsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PictureCharsContext = PictureCharsContext;
var PictureCardinalityContext = /** @class */ (function (_super) {
    __extends(PictureCardinalityContext, _super);
    function PictureCardinalityContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PictureCardinalityContext.prototype.LPARENCHAR = function () { return this.getToken(Cobol85Parser.LPARENCHAR, 0); };
    PictureCardinalityContext.prototype.integerLiteral = function () {
        return this.getRuleContext(0, IntegerLiteralContext);
    };
    PictureCardinalityContext.prototype.RPARENCHAR = function () { return this.getToken(Cobol85Parser.RPARENCHAR, 0); };
    Object.defineProperty(PictureCardinalityContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_pictureCardinality; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PictureCardinalityContext.prototype.enterRule = function (listener) {
        if (listener.enterPictureCardinality) {
            listener.enterPictureCardinality(this);
        }
    };
    // @Override
    PictureCardinalityContext.prototype.exitRule = function (listener) {
        if (listener.exitPictureCardinality) {
            listener.exitPictureCardinality(this);
        }
    };
    // @Override
    PictureCardinalityContext.prototype.accept = function (visitor) {
        if (visitor.visitPictureCardinality) {
            return visitor.visitPictureCardinality(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PictureCardinalityContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PictureCardinalityContext = PictureCardinalityContext;
var DataReceivedByClauseContext = /** @class */ (function (_super) {
    __extends(DataReceivedByClauseContext, _super);
    function DataReceivedByClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataReceivedByClauseContext.prototype.CONTENT = function () { return this.tryGetToken(Cobol85Parser.CONTENT, 0); };
    DataReceivedByClauseContext.prototype.REFERENCE = function () { return this.tryGetToken(Cobol85Parser.REFERENCE, 0); };
    DataReceivedByClauseContext.prototype.REF = function () { return this.tryGetToken(Cobol85Parser.REF, 0); };
    DataReceivedByClauseContext.prototype.RECEIVED = function () { return this.tryGetToken(Cobol85Parser.RECEIVED, 0); };
    DataReceivedByClauseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    Object.defineProperty(DataReceivedByClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataReceivedByClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataReceivedByClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataReceivedByClause) {
            listener.enterDataReceivedByClause(this);
        }
    };
    // @Override
    DataReceivedByClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataReceivedByClause) {
            listener.exitDataReceivedByClause(this);
        }
    };
    // @Override
    DataReceivedByClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataReceivedByClause) {
            return visitor.visitDataReceivedByClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataReceivedByClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataReceivedByClauseContext = DataReceivedByClauseContext;
var DataRecordAreaClauseContext = /** @class */ (function (_super) {
    __extends(DataRecordAreaClauseContext, _super);
    function DataRecordAreaClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataRecordAreaClauseContext.prototype.RECORD = function () { return this.getToken(Cobol85Parser.RECORD, 0); };
    DataRecordAreaClauseContext.prototype.AREA = function () { return this.getToken(Cobol85Parser.AREA, 0); };
    Object.defineProperty(DataRecordAreaClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataRecordAreaClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataRecordAreaClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataRecordAreaClause) {
            listener.enterDataRecordAreaClause(this);
        }
    };
    // @Override
    DataRecordAreaClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataRecordAreaClause) {
            listener.exitDataRecordAreaClause(this);
        }
    };
    // @Override
    DataRecordAreaClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataRecordAreaClause) {
            return visitor.visitDataRecordAreaClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataRecordAreaClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataRecordAreaClauseContext = DataRecordAreaClauseContext;
var DataRedefinesClauseContext = /** @class */ (function (_super) {
    __extends(DataRedefinesClauseContext, _super);
    function DataRedefinesClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataRedefinesClauseContext.prototype.REDEFINES = function () { return this.getToken(Cobol85Parser.REDEFINES, 0); };
    DataRedefinesClauseContext.prototype.dataName = function () {
        return this.getRuleContext(0, DataNameContext);
    };
    Object.defineProperty(DataRedefinesClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataRedefinesClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataRedefinesClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataRedefinesClause) {
            listener.enterDataRedefinesClause(this);
        }
    };
    // @Override
    DataRedefinesClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataRedefinesClause) {
            listener.exitDataRedefinesClause(this);
        }
    };
    // @Override
    DataRedefinesClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataRedefinesClause) {
            return visitor.visitDataRedefinesClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataRedefinesClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataRedefinesClauseContext = DataRedefinesClauseContext;
var DataRenamesClauseContext = /** @class */ (function (_super) {
    __extends(DataRenamesClauseContext, _super);
    function DataRenamesClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataRenamesClauseContext.prototype.RENAMES = function () { return this.getToken(Cobol85Parser.RENAMES, 0); };
    DataRenamesClauseContext.prototype.qualifiedDataName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedDataNameContext);
        }
        else {
            return this.getRuleContext(i, QualifiedDataNameContext);
        }
    };
    DataRenamesClauseContext.prototype.THROUGH = function () { return this.tryGetToken(Cobol85Parser.THROUGH, 0); };
    DataRenamesClauseContext.prototype.THRU = function () { return this.tryGetToken(Cobol85Parser.THRU, 0); };
    Object.defineProperty(DataRenamesClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataRenamesClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataRenamesClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataRenamesClause) {
            listener.enterDataRenamesClause(this);
        }
    };
    // @Override
    DataRenamesClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataRenamesClause) {
            listener.exitDataRenamesClause(this);
        }
    };
    // @Override
    DataRenamesClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataRenamesClause) {
            return visitor.visitDataRenamesClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataRenamesClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataRenamesClauseContext = DataRenamesClauseContext;
var DataSignClauseContext = /** @class */ (function (_super) {
    __extends(DataSignClauseContext, _super);
    function DataSignClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataSignClauseContext.prototype.LEADING = function () { return this.tryGetToken(Cobol85Parser.LEADING, 0); };
    DataSignClauseContext.prototype.TRAILING = function () { return this.tryGetToken(Cobol85Parser.TRAILING, 0); };
    DataSignClauseContext.prototype.SIGN = function () { return this.tryGetToken(Cobol85Parser.SIGN, 0); };
    DataSignClauseContext.prototype.SEPARATE = function () { return this.tryGetToken(Cobol85Parser.SEPARATE, 0); };
    DataSignClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    DataSignClauseContext.prototype.CHARACTER = function () { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); };
    Object.defineProperty(DataSignClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataSignClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataSignClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataSignClause) {
            listener.enterDataSignClause(this);
        }
    };
    // @Override
    DataSignClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataSignClause) {
            listener.exitDataSignClause(this);
        }
    };
    // @Override
    DataSignClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataSignClause) {
            return visitor.visitDataSignClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataSignClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataSignClauseContext = DataSignClauseContext;
var DataSynchronizedClauseContext = /** @class */ (function (_super) {
    __extends(DataSynchronizedClauseContext, _super);
    function DataSynchronizedClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataSynchronizedClauseContext.prototype.SYNCHRONIZED = function () { return this.tryGetToken(Cobol85Parser.SYNCHRONIZED, 0); };
    DataSynchronizedClauseContext.prototype.SYNC = function () { return this.tryGetToken(Cobol85Parser.SYNC, 0); };
    DataSynchronizedClauseContext.prototype.LEFT = function () { return this.tryGetToken(Cobol85Parser.LEFT, 0); };
    DataSynchronizedClauseContext.prototype.RIGHT = function () { return this.tryGetToken(Cobol85Parser.RIGHT, 0); };
    Object.defineProperty(DataSynchronizedClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataSynchronizedClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataSynchronizedClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataSynchronizedClause) {
            listener.enterDataSynchronizedClause(this);
        }
    };
    // @Override
    DataSynchronizedClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataSynchronizedClause) {
            listener.exitDataSynchronizedClause(this);
        }
    };
    // @Override
    DataSynchronizedClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataSynchronizedClause) {
            return visitor.visitDataSynchronizedClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataSynchronizedClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataSynchronizedClauseContext = DataSynchronizedClauseContext;
var DataThreadLocalClauseContext = /** @class */ (function (_super) {
    __extends(DataThreadLocalClauseContext, _super);
    function DataThreadLocalClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataThreadLocalClauseContext.prototype.THREAD_LOCAL = function () { return this.getToken(Cobol85Parser.THREAD_LOCAL, 0); };
    DataThreadLocalClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(DataThreadLocalClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataThreadLocalClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataThreadLocalClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataThreadLocalClause) {
            listener.enterDataThreadLocalClause(this);
        }
    };
    // @Override
    DataThreadLocalClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataThreadLocalClause) {
            listener.exitDataThreadLocalClause(this);
        }
    };
    // @Override
    DataThreadLocalClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataThreadLocalClause) {
            return visitor.visitDataThreadLocalClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataThreadLocalClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataThreadLocalClauseContext = DataThreadLocalClauseContext;
var DataTypeClauseContext = /** @class */ (function (_super) {
    __extends(DataTypeClauseContext, _super);
    function DataTypeClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataTypeClauseContext.prototype.TYPE = function () { return this.getToken(Cobol85Parser.TYPE, 0); };
    DataTypeClauseContext.prototype.SHORT_DATE = function () { return this.tryGetToken(Cobol85Parser.SHORT_DATE, 0); };
    DataTypeClauseContext.prototype.LONG_DATE = function () { return this.tryGetToken(Cobol85Parser.LONG_DATE, 0); };
    DataTypeClauseContext.prototype.NUMERIC_DATE = function () { return this.tryGetToken(Cobol85Parser.NUMERIC_DATE, 0); };
    DataTypeClauseContext.prototype.NUMERIC_TIME = function () { return this.tryGetToken(Cobol85Parser.NUMERIC_TIME, 0); };
    DataTypeClauseContext.prototype.LONG_TIME = function () { return this.tryGetToken(Cobol85Parser.LONG_TIME, 0); };
    DataTypeClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(DataTypeClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataTypeClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataTypeClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataTypeClause) {
            listener.enterDataTypeClause(this);
        }
    };
    // @Override
    DataTypeClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataTypeClause) {
            listener.exitDataTypeClause(this);
        }
    };
    // @Override
    DataTypeClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataTypeClause) {
            return visitor.visitDataTypeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataTypeClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataTypeClauseContext = DataTypeClauseContext;
var DataTypeDefClauseContext = /** @class */ (function (_super) {
    __extends(DataTypeDefClauseContext, _super);
    function DataTypeDefClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataTypeDefClauseContext.prototype.TYPEDEF = function () { return this.getToken(Cobol85Parser.TYPEDEF, 0); };
    DataTypeDefClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(DataTypeDefClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataTypeDefClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataTypeDefClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataTypeDefClause) {
            listener.enterDataTypeDefClause(this);
        }
    };
    // @Override
    DataTypeDefClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataTypeDefClause) {
            listener.exitDataTypeDefClause(this);
        }
    };
    // @Override
    DataTypeDefClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataTypeDefClause) {
            return visitor.visitDataTypeDefClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataTypeDefClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataTypeDefClauseContext = DataTypeDefClauseContext;
var DataUsageClauseContext = /** @class */ (function (_super) {
    __extends(DataUsageClauseContext, _super);
    function DataUsageClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataUsageClauseContext.prototype.BINARY = function () { return this.tryGetToken(Cobol85Parser.BINARY, 0); };
    DataUsageClauseContext.prototype.BIT = function () { return this.tryGetToken(Cobol85Parser.BIT, 0); };
    DataUsageClauseContext.prototype.COMP = function () { return this.tryGetToken(Cobol85Parser.COMP, 0); };
    DataUsageClauseContext.prototype.COMP_1 = function () { return this.tryGetToken(Cobol85Parser.COMP_1, 0); };
    DataUsageClauseContext.prototype.COMP_2 = function () { return this.tryGetToken(Cobol85Parser.COMP_2, 0); };
    DataUsageClauseContext.prototype.COMP_3 = function () { return this.tryGetToken(Cobol85Parser.COMP_3, 0); };
    DataUsageClauseContext.prototype.COMP_4 = function () { return this.tryGetToken(Cobol85Parser.COMP_4, 0); };
    DataUsageClauseContext.prototype.COMP_5 = function () { return this.tryGetToken(Cobol85Parser.COMP_5, 0); };
    DataUsageClauseContext.prototype.COMPUTATIONAL = function () { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL, 0); };
    DataUsageClauseContext.prototype.COMPUTATIONAL_1 = function () { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL_1, 0); };
    DataUsageClauseContext.prototype.COMPUTATIONAL_2 = function () { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL_2, 0); };
    DataUsageClauseContext.prototype.COMPUTATIONAL_3 = function () { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL_3, 0); };
    DataUsageClauseContext.prototype.COMPUTATIONAL_4 = function () { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL_4, 0); };
    DataUsageClauseContext.prototype.COMPUTATIONAL_5 = function () { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL_5, 0); };
    DataUsageClauseContext.prototype.CONTROL_POINT = function () { return this.tryGetToken(Cobol85Parser.CONTROL_POINT, 0); };
    DataUsageClauseContext.prototype.DATE = function () { return this.tryGetToken(Cobol85Parser.DATE, 0); };
    DataUsageClauseContext.prototype.DISPLAY = function () { return this.tryGetToken(Cobol85Parser.DISPLAY, 0); };
    DataUsageClauseContext.prototype.DISPLAY_1 = function () { return this.tryGetToken(Cobol85Parser.DISPLAY_1, 0); };
    DataUsageClauseContext.prototype.DOUBLE = function () { return this.tryGetToken(Cobol85Parser.DOUBLE, 0); };
    DataUsageClauseContext.prototype.EVENT = function () { return this.tryGetToken(Cobol85Parser.EVENT, 0); };
    DataUsageClauseContext.prototype.FUNCTION_POINTER = function () { return this.tryGetToken(Cobol85Parser.FUNCTION_POINTER, 0); };
    DataUsageClauseContext.prototype.INDEX = function () { return this.tryGetToken(Cobol85Parser.INDEX, 0); };
    DataUsageClauseContext.prototype.KANJI = function () { return this.tryGetToken(Cobol85Parser.KANJI, 0); };
    DataUsageClauseContext.prototype.LOCK = function () { return this.tryGetToken(Cobol85Parser.LOCK, 0); };
    DataUsageClauseContext.prototype.NATIONAL = function () { return this.tryGetToken(Cobol85Parser.NATIONAL, 0); };
    DataUsageClauseContext.prototype.PACKED_DECIMAL = function () { return this.tryGetToken(Cobol85Parser.PACKED_DECIMAL, 0); };
    DataUsageClauseContext.prototype.POINTER = function () { return this.tryGetToken(Cobol85Parser.POINTER, 0); };
    DataUsageClauseContext.prototype.PROCEDURE_POINTER = function () { return this.tryGetToken(Cobol85Parser.PROCEDURE_POINTER, 0); };
    DataUsageClauseContext.prototype.REAL = function () { return this.tryGetToken(Cobol85Parser.REAL, 0); };
    DataUsageClauseContext.prototype.TASK = function () { return this.tryGetToken(Cobol85Parser.TASK, 0); };
    DataUsageClauseContext.prototype.USAGE = function () { return this.tryGetToken(Cobol85Parser.USAGE, 0); };
    DataUsageClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    DataUsageClauseContext.prototype.TRUNCATED = function () { return this.tryGetToken(Cobol85Parser.TRUNCATED, 0); };
    DataUsageClauseContext.prototype.EXTENDED = function () { return this.tryGetToken(Cobol85Parser.EXTENDED, 0); };
    Object.defineProperty(DataUsageClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataUsageClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataUsageClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataUsageClause) {
            listener.enterDataUsageClause(this);
        }
    };
    // @Override
    DataUsageClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataUsageClause) {
            listener.exitDataUsageClause(this);
        }
    };
    // @Override
    DataUsageClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataUsageClause) {
            return visitor.visitDataUsageClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataUsageClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataUsageClauseContext = DataUsageClauseContext;
var DataUsingClauseContext = /** @class */ (function (_super) {
    __extends(DataUsingClauseContext, _super);
    function DataUsingClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataUsingClauseContext.prototype.USING = function () { return this.getToken(Cobol85Parser.USING, 0); };
    DataUsingClauseContext.prototype.LANGUAGE = function () { return this.tryGetToken(Cobol85Parser.LANGUAGE, 0); };
    DataUsingClauseContext.prototype.CONVENTION = function () { return this.tryGetToken(Cobol85Parser.CONVENTION, 0); };
    DataUsingClauseContext.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    DataUsingClauseContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    DataUsingClauseContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    Object.defineProperty(DataUsingClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataUsingClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataUsingClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataUsingClause) {
            listener.enterDataUsingClause(this);
        }
    };
    // @Override
    DataUsingClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataUsingClause) {
            listener.exitDataUsingClause(this);
        }
    };
    // @Override
    DataUsingClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataUsingClause) {
            return visitor.visitDataUsingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataUsingClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataUsingClauseContext = DataUsingClauseContext;
var DataValueClauseContext = /** @class */ (function (_super) {
    __extends(DataValueClauseContext, _super);
    function DataValueClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataValueClauseContext.prototype.dataValueInterval = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DataValueIntervalContext);
        }
        else {
            return this.getRuleContext(i, DataValueIntervalContext);
        }
    };
    DataValueClauseContext.prototype.VALUE = function () { return this.tryGetToken(Cobol85Parser.VALUE, 0); };
    DataValueClauseContext.prototype.VALUES = function () { return this.tryGetToken(Cobol85Parser.VALUES, 0); };
    DataValueClauseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    DataValueClauseContext.prototype.ARE = function () { return this.tryGetToken(Cobol85Parser.ARE, 0); };
    DataValueClauseContext.prototype.COMMACHAR = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.COMMACHAR);
        }
        else {
            return this.getToken(Cobol85Parser.COMMACHAR, i);
        }
    };
    Object.defineProperty(DataValueClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataValueClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataValueClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataValueClause) {
            listener.enterDataValueClause(this);
        }
    };
    // @Override
    DataValueClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataValueClause) {
            listener.exitDataValueClause(this);
        }
    };
    // @Override
    DataValueClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataValueClause) {
            return visitor.visitDataValueClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataValueClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataValueClauseContext = DataValueClauseContext;
var DataValueIntervalContext = /** @class */ (function (_super) {
    __extends(DataValueIntervalContext, _super);
    function DataValueIntervalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataValueIntervalContext.prototype.dataValueIntervalFrom = function () {
        return this.getRuleContext(0, DataValueIntervalFromContext);
    };
    DataValueIntervalContext.prototype.dataValueIntervalTo = function () {
        return this.tryGetRuleContext(0, DataValueIntervalToContext);
    };
    Object.defineProperty(DataValueIntervalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataValueInterval; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataValueIntervalContext.prototype.enterRule = function (listener) {
        if (listener.enterDataValueInterval) {
            listener.enterDataValueInterval(this);
        }
    };
    // @Override
    DataValueIntervalContext.prototype.exitRule = function (listener) {
        if (listener.exitDataValueInterval) {
            listener.exitDataValueInterval(this);
        }
    };
    // @Override
    DataValueIntervalContext.prototype.accept = function (visitor) {
        if (visitor.visitDataValueInterval) {
            return visitor.visitDataValueInterval(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataValueIntervalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataValueIntervalContext = DataValueIntervalContext;
var DataValueIntervalFromContext = /** @class */ (function (_super) {
    __extends(DataValueIntervalFromContext, _super);
    function DataValueIntervalFromContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataValueIntervalFromContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    DataValueIntervalFromContext.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(DataValueIntervalFromContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataValueIntervalFrom; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataValueIntervalFromContext.prototype.enterRule = function (listener) {
        if (listener.enterDataValueIntervalFrom) {
            listener.enterDataValueIntervalFrom(this);
        }
    };
    // @Override
    DataValueIntervalFromContext.prototype.exitRule = function (listener) {
        if (listener.exitDataValueIntervalFrom) {
            listener.exitDataValueIntervalFrom(this);
        }
    };
    // @Override
    DataValueIntervalFromContext.prototype.accept = function (visitor) {
        if (visitor.visitDataValueIntervalFrom) {
            return visitor.visitDataValueIntervalFrom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataValueIntervalFromContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataValueIntervalFromContext = DataValueIntervalFromContext;
var DataValueIntervalToContext = /** @class */ (function (_super) {
    __extends(DataValueIntervalToContext, _super);
    function DataValueIntervalToContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataValueIntervalToContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    DataValueIntervalToContext.prototype.THROUGH = function () { return this.tryGetToken(Cobol85Parser.THROUGH, 0); };
    DataValueIntervalToContext.prototype.THRU = function () { return this.tryGetToken(Cobol85Parser.THRU, 0); };
    Object.defineProperty(DataValueIntervalToContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataValueIntervalTo; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataValueIntervalToContext.prototype.enterRule = function (listener) {
        if (listener.enterDataValueIntervalTo) {
            listener.enterDataValueIntervalTo(this);
        }
    };
    // @Override
    DataValueIntervalToContext.prototype.exitRule = function (listener) {
        if (listener.exitDataValueIntervalTo) {
            listener.exitDataValueIntervalTo(this);
        }
    };
    // @Override
    DataValueIntervalToContext.prototype.accept = function (visitor) {
        if (visitor.visitDataValueIntervalTo) {
            return visitor.visitDataValueIntervalTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataValueIntervalToContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataValueIntervalToContext = DataValueIntervalToContext;
var DataWithLowerBoundsClauseContext = /** @class */ (function (_super) {
    __extends(DataWithLowerBoundsClauseContext, _super);
    function DataWithLowerBoundsClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataWithLowerBoundsClauseContext.prototype.LOWER = function () { return this.getToken(Cobol85Parser.LOWER, 0); };
    DataWithLowerBoundsClauseContext.prototype.BOUNDS = function () { return this.getToken(Cobol85Parser.BOUNDS, 0); };
    DataWithLowerBoundsClauseContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(DataWithLowerBoundsClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataWithLowerBoundsClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataWithLowerBoundsClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDataWithLowerBoundsClause) {
            listener.enterDataWithLowerBoundsClause(this);
        }
    };
    // @Override
    DataWithLowerBoundsClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDataWithLowerBoundsClause) {
            listener.exitDataWithLowerBoundsClause(this);
        }
    };
    // @Override
    DataWithLowerBoundsClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDataWithLowerBoundsClause) {
            return visitor.visitDataWithLowerBoundsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataWithLowerBoundsClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataWithLowerBoundsClauseContext = DataWithLowerBoundsClauseContext;
var ProcedureDivisionContext = /** @class */ (function (_super) {
    __extends(ProcedureDivisionContext, _super);
    function ProcedureDivisionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDivisionContext.prototype.PROCEDURE = function () { return this.getToken(Cobol85Parser.PROCEDURE, 0); };
    ProcedureDivisionContext.prototype.DIVISION = function () { return this.getToken(Cobol85Parser.DIVISION, 0); };
    ProcedureDivisionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ProcedureDivisionContext.prototype.procedureDivisionBody = function () {
        return this.getRuleContext(0, ProcedureDivisionBodyContext);
    };
    ProcedureDivisionContext.prototype.procedureDivisionUsingClause = function () {
        return this.tryGetRuleContext(0, ProcedureDivisionUsingClauseContext);
    };
    ProcedureDivisionContext.prototype.procedureDivisionGivingClause = function () {
        return this.tryGetRuleContext(0, ProcedureDivisionGivingClauseContext);
    };
    ProcedureDivisionContext.prototype.procedureDeclaratives = function () {
        return this.tryGetRuleContext(0, ProcedureDeclarativesContext);
    };
    Object.defineProperty(ProcedureDivisionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDivision; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDivisionContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDivision) {
            listener.enterProcedureDivision(this);
        }
    };
    // @Override
    ProcedureDivisionContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDivision) {
            listener.exitProcedureDivision(this);
        }
    };
    // @Override
    ProcedureDivisionContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDivision) {
            return visitor.visitProcedureDivision(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDivisionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDivisionContext = ProcedureDivisionContext;
var ProcedureDivisionUsingClauseContext = /** @class */ (function (_super) {
    __extends(ProcedureDivisionUsingClauseContext, _super);
    function ProcedureDivisionUsingClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDivisionUsingClauseContext.prototype.USING = function () { return this.tryGetToken(Cobol85Parser.USING, 0); };
    ProcedureDivisionUsingClauseContext.prototype.CHAINING = function () { return this.tryGetToken(Cobol85Parser.CHAINING, 0); };
    ProcedureDivisionUsingClauseContext.prototype.procedureDivisionUsingParameter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureDivisionUsingParameterContext);
        }
        else {
            return this.getRuleContext(i, ProcedureDivisionUsingParameterContext);
        }
    };
    Object.defineProperty(ProcedureDivisionUsingClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDivisionUsingClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDivisionUsingClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDivisionUsingClause) {
            listener.enterProcedureDivisionUsingClause(this);
        }
    };
    // @Override
    ProcedureDivisionUsingClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDivisionUsingClause) {
            listener.exitProcedureDivisionUsingClause(this);
        }
    };
    // @Override
    ProcedureDivisionUsingClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDivisionUsingClause) {
            return visitor.visitProcedureDivisionUsingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDivisionUsingClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDivisionUsingClauseContext = ProcedureDivisionUsingClauseContext;
var ProcedureDivisionGivingClauseContext = /** @class */ (function (_super) {
    __extends(ProcedureDivisionGivingClauseContext, _super);
    function ProcedureDivisionGivingClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDivisionGivingClauseContext.prototype.dataName = function () {
        return this.getRuleContext(0, DataNameContext);
    };
    ProcedureDivisionGivingClauseContext.prototype.GIVING = function () { return this.tryGetToken(Cobol85Parser.GIVING, 0); };
    ProcedureDivisionGivingClauseContext.prototype.RETURNING = function () { return this.tryGetToken(Cobol85Parser.RETURNING, 0); };
    Object.defineProperty(ProcedureDivisionGivingClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDivisionGivingClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDivisionGivingClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDivisionGivingClause) {
            listener.enterProcedureDivisionGivingClause(this);
        }
    };
    // @Override
    ProcedureDivisionGivingClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDivisionGivingClause) {
            listener.exitProcedureDivisionGivingClause(this);
        }
    };
    // @Override
    ProcedureDivisionGivingClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDivisionGivingClause) {
            return visitor.visitProcedureDivisionGivingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDivisionGivingClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDivisionGivingClauseContext = ProcedureDivisionGivingClauseContext;
var ProcedureDivisionUsingParameterContext = /** @class */ (function (_super) {
    __extends(ProcedureDivisionUsingParameterContext, _super);
    function ProcedureDivisionUsingParameterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDivisionUsingParameterContext.prototype.procedureDivisionByReferencePhrase = function () {
        return this.tryGetRuleContext(0, ProcedureDivisionByReferencePhraseContext);
    };
    ProcedureDivisionUsingParameterContext.prototype.procedureDivisionByValuePhrase = function () {
        return this.tryGetRuleContext(0, ProcedureDivisionByValuePhraseContext);
    };
    Object.defineProperty(ProcedureDivisionUsingParameterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDivisionUsingParameter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDivisionUsingParameterContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDivisionUsingParameter) {
            listener.enterProcedureDivisionUsingParameter(this);
        }
    };
    // @Override
    ProcedureDivisionUsingParameterContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDivisionUsingParameter) {
            listener.exitProcedureDivisionUsingParameter(this);
        }
    };
    // @Override
    ProcedureDivisionUsingParameterContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDivisionUsingParameter) {
            return visitor.visitProcedureDivisionUsingParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDivisionUsingParameterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDivisionUsingParameterContext = ProcedureDivisionUsingParameterContext;
var ProcedureDivisionByReferencePhraseContext = /** @class */ (function (_super) {
    __extends(ProcedureDivisionByReferencePhraseContext, _super);
    function ProcedureDivisionByReferencePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDivisionByReferencePhraseContext.prototype.REFERENCE = function () { return this.tryGetToken(Cobol85Parser.REFERENCE, 0); };
    ProcedureDivisionByReferencePhraseContext.prototype.procedureDivisionByReference = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureDivisionByReferenceContext);
        }
        else {
            return this.getRuleContext(i, ProcedureDivisionByReferenceContext);
        }
    };
    ProcedureDivisionByReferencePhraseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    Object.defineProperty(ProcedureDivisionByReferencePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDivisionByReferencePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDivisionByReferencePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDivisionByReferencePhrase) {
            listener.enterProcedureDivisionByReferencePhrase(this);
        }
    };
    // @Override
    ProcedureDivisionByReferencePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDivisionByReferencePhrase) {
            listener.exitProcedureDivisionByReferencePhrase(this);
        }
    };
    // @Override
    ProcedureDivisionByReferencePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDivisionByReferencePhrase) {
            return visitor.visitProcedureDivisionByReferencePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDivisionByReferencePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDivisionByReferencePhraseContext = ProcedureDivisionByReferencePhraseContext;
var ProcedureDivisionByReferenceContext = /** @class */ (function (_super) {
    __extends(ProcedureDivisionByReferenceContext, _super);
    function ProcedureDivisionByReferenceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDivisionByReferenceContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ProcedureDivisionByReferenceContext.prototype.fileName = function () {
        return this.tryGetRuleContext(0, FileNameContext);
    };
    ProcedureDivisionByReferenceContext.prototype.OPTIONAL = function () { return this.tryGetToken(Cobol85Parser.OPTIONAL, 0); };
    ProcedureDivisionByReferenceContext.prototype.ANY = function () { return this.tryGetToken(Cobol85Parser.ANY, 0); };
    Object.defineProperty(ProcedureDivisionByReferenceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDivisionByReference; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDivisionByReferenceContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDivisionByReference) {
            listener.enterProcedureDivisionByReference(this);
        }
    };
    // @Override
    ProcedureDivisionByReferenceContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDivisionByReference) {
            listener.exitProcedureDivisionByReference(this);
        }
    };
    // @Override
    ProcedureDivisionByReferenceContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDivisionByReference) {
            return visitor.visitProcedureDivisionByReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDivisionByReferenceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDivisionByReferenceContext = ProcedureDivisionByReferenceContext;
var ProcedureDivisionByValuePhraseContext = /** @class */ (function (_super) {
    __extends(ProcedureDivisionByValuePhraseContext, _super);
    function ProcedureDivisionByValuePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDivisionByValuePhraseContext.prototype.VALUE = function () { return this.getToken(Cobol85Parser.VALUE, 0); };
    ProcedureDivisionByValuePhraseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    ProcedureDivisionByValuePhraseContext.prototype.procedureDivisionByValue = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureDivisionByValueContext);
        }
        else {
            return this.getRuleContext(i, ProcedureDivisionByValueContext);
        }
    };
    Object.defineProperty(ProcedureDivisionByValuePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDivisionByValuePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDivisionByValuePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDivisionByValuePhrase) {
            listener.enterProcedureDivisionByValuePhrase(this);
        }
    };
    // @Override
    ProcedureDivisionByValuePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDivisionByValuePhrase) {
            listener.exitProcedureDivisionByValuePhrase(this);
        }
    };
    // @Override
    ProcedureDivisionByValuePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDivisionByValuePhrase) {
            return visitor.visitProcedureDivisionByValuePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDivisionByValuePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDivisionByValuePhraseContext = ProcedureDivisionByValuePhraseContext;
var ProcedureDivisionByValueContext = /** @class */ (function (_super) {
    __extends(ProcedureDivisionByValueContext, _super);
    function ProcedureDivisionByValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDivisionByValueContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ProcedureDivisionByValueContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    ProcedureDivisionByValueContext.prototype.ANY = function () { return this.tryGetToken(Cobol85Parser.ANY, 0); };
    Object.defineProperty(ProcedureDivisionByValueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDivisionByValue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDivisionByValueContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDivisionByValue) {
            listener.enterProcedureDivisionByValue(this);
        }
    };
    // @Override
    ProcedureDivisionByValueContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDivisionByValue) {
            listener.exitProcedureDivisionByValue(this);
        }
    };
    // @Override
    ProcedureDivisionByValueContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDivisionByValue) {
            return visitor.visitProcedureDivisionByValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDivisionByValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDivisionByValueContext = ProcedureDivisionByValueContext;
var ProcedureDeclarativesContext = /** @class */ (function (_super) {
    __extends(ProcedureDeclarativesContext, _super);
    function ProcedureDeclarativesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDeclarativesContext.prototype.DECLARATIVES = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DECLARATIVES);
        }
        else {
            return this.getToken(Cobol85Parser.DECLARATIVES, i);
        }
    };
    ProcedureDeclarativesContext.prototype.DOT_FS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DOT_FS);
        }
        else {
            return this.getToken(Cobol85Parser.DOT_FS, i);
        }
    };
    ProcedureDeclarativesContext.prototype.END = function () { return this.getToken(Cobol85Parser.END, 0); };
    ProcedureDeclarativesContext.prototype.procedureDeclarative = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureDeclarativeContext);
        }
        else {
            return this.getRuleContext(i, ProcedureDeclarativeContext);
        }
    };
    Object.defineProperty(ProcedureDeclarativesContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDeclaratives; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDeclarativesContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDeclaratives) {
            listener.enterProcedureDeclaratives(this);
        }
    };
    // @Override
    ProcedureDeclarativesContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDeclaratives) {
            listener.exitProcedureDeclaratives(this);
        }
    };
    // @Override
    ProcedureDeclarativesContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDeclaratives) {
            return visitor.visitProcedureDeclaratives(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDeclarativesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDeclarativesContext = ProcedureDeclarativesContext;
var ProcedureDeclarativeContext = /** @class */ (function (_super) {
    __extends(ProcedureDeclarativeContext, _super);
    function ProcedureDeclarativeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDeclarativeContext.prototype.procedureSectionHeader = function () {
        return this.getRuleContext(0, ProcedureSectionHeaderContext);
    };
    ProcedureDeclarativeContext.prototype.DOT_FS = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.DOT_FS);
        }
        else {
            return this.getToken(Cobol85Parser.DOT_FS, i);
        }
    };
    ProcedureDeclarativeContext.prototype.useStatement = function () {
        return this.getRuleContext(0, UseStatementContext);
    };
    ProcedureDeclarativeContext.prototype.paragraphs = function () {
        return this.getRuleContext(0, ParagraphsContext);
    };
    Object.defineProperty(ProcedureDeclarativeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDeclarative; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDeclarativeContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDeclarative) {
            listener.enterProcedureDeclarative(this);
        }
    };
    // @Override
    ProcedureDeclarativeContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDeclarative) {
            listener.exitProcedureDeclarative(this);
        }
    };
    // @Override
    ProcedureDeclarativeContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDeclarative) {
            return visitor.visitProcedureDeclarative(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDeclarativeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDeclarativeContext = ProcedureDeclarativeContext;
var ProcedureSectionHeaderContext = /** @class */ (function (_super) {
    __extends(ProcedureSectionHeaderContext, _super);
    function ProcedureSectionHeaderContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureSectionHeaderContext.prototype.sectionName = function () {
        return this.getRuleContext(0, SectionNameContext);
    };
    ProcedureSectionHeaderContext.prototype.SECTION = function () { return this.getToken(Cobol85Parser.SECTION, 0); };
    ProcedureSectionHeaderContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(ProcedureSectionHeaderContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureSectionHeader; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureSectionHeaderContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureSectionHeader) {
            listener.enterProcedureSectionHeader(this);
        }
    };
    // @Override
    ProcedureSectionHeaderContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureSectionHeader) {
            listener.exitProcedureSectionHeader(this);
        }
    };
    // @Override
    ProcedureSectionHeaderContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureSectionHeader) {
            return visitor.visitProcedureSectionHeader(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureSectionHeaderContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureSectionHeaderContext = ProcedureSectionHeaderContext;
var ProcedureDivisionBodyContext = /** @class */ (function (_super) {
    __extends(ProcedureDivisionBodyContext, _super);
    function ProcedureDivisionBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureDivisionBodyContext.prototype.paragraphs = function () {
        return this.getRuleContext(0, ParagraphsContext);
    };
    ProcedureDivisionBodyContext.prototype.procedureSection = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureSectionContext);
        }
        else {
            return this.getRuleContext(i, ProcedureSectionContext);
        }
    };
    Object.defineProperty(ProcedureDivisionBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureDivisionBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureDivisionBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureDivisionBody) {
            listener.enterProcedureDivisionBody(this);
        }
    };
    // @Override
    ProcedureDivisionBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureDivisionBody) {
            listener.exitProcedureDivisionBody(this);
        }
    };
    // @Override
    ProcedureDivisionBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureDivisionBody) {
            return visitor.visitProcedureDivisionBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureDivisionBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureDivisionBodyContext = ProcedureDivisionBodyContext;
var ProcedureSectionContext = /** @class */ (function (_super) {
    __extends(ProcedureSectionContext, _super);
    function ProcedureSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureSectionContext.prototype.procedureSectionHeader = function () {
        return this.getRuleContext(0, ProcedureSectionHeaderContext);
    };
    ProcedureSectionContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ProcedureSectionContext.prototype.paragraphs = function () {
        return this.getRuleContext(0, ParagraphsContext);
    };
    Object.defineProperty(ProcedureSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureSection) {
            listener.enterProcedureSection(this);
        }
    };
    // @Override
    ProcedureSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureSection) {
            listener.exitProcedureSection(this);
        }
    };
    // @Override
    ProcedureSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureSection) {
            return visitor.visitProcedureSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureSectionContext = ProcedureSectionContext;
var ParagraphsContext = /** @class */ (function (_super) {
    __extends(ParagraphsContext, _super);
    function ParagraphsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ParagraphsContext.prototype.sentence = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SentenceContext);
        }
        else {
            return this.getRuleContext(i, SentenceContext);
        }
    };
    ParagraphsContext.prototype.paragraph = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ParagraphContext);
        }
        else {
            return this.getRuleContext(i, ParagraphContext);
        }
    };
    Object.defineProperty(ParagraphsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_paragraphs; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ParagraphsContext.prototype.enterRule = function (listener) {
        if (listener.enterParagraphs) {
            listener.enterParagraphs(this);
        }
    };
    // @Override
    ParagraphsContext.prototype.exitRule = function (listener) {
        if (listener.exitParagraphs) {
            listener.exitParagraphs(this);
        }
    };
    // @Override
    ParagraphsContext.prototype.accept = function (visitor) {
        if (visitor.visitParagraphs) {
            return visitor.visitParagraphs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ParagraphsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ParagraphsContext = ParagraphsContext;
var ParagraphContext = /** @class */ (function (_super) {
    __extends(ParagraphContext, _super);
    function ParagraphContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ParagraphContext.prototype.paragraphName = function () {
        return this.getRuleContext(0, ParagraphNameContext);
    };
    ParagraphContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    ParagraphContext.prototype.alteredGoTo = function () {
        return this.tryGetRuleContext(0, AlteredGoToContext);
    };
    ParagraphContext.prototype.sentence = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SentenceContext);
        }
        else {
            return this.getRuleContext(i, SentenceContext);
        }
    };
    Object.defineProperty(ParagraphContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_paragraph; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ParagraphContext.prototype.enterRule = function (listener) {
        if (listener.enterParagraph) {
            listener.enterParagraph(this);
        }
    };
    // @Override
    ParagraphContext.prototype.exitRule = function (listener) {
        if (listener.exitParagraph) {
            listener.exitParagraph(this);
        }
    };
    // @Override
    ParagraphContext.prototype.accept = function (visitor) {
        if (visitor.visitParagraph) {
            return visitor.visitParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ParagraphContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ParagraphContext = ParagraphContext;
var SentenceContext = /** @class */ (function (_super) {
    __extends(SentenceContext, _super);
    function SentenceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SentenceContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    SentenceContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(SentenceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sentence; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SentenceContext.prototype.enterRule = function (listener) {
        if (listener.enterSentence) {
            listener.enterSentence(this);
        }
    };
    // @Override
    SentenceContext.prototype.exitRule = function (listener) {
        if (listener.exitSentence) {
            listener.exitSentence(this);
        }
    };
    // @Override
    SentenceContext.prototype.accept = function (visitor) {
        if (visitor.visitSentence) {
            return visitor.visitSentence(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SentenceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SentenceContext = SentenceContext;
var StatementContext = /** @class */ (function (_super) {
    __extends(StatementContext, _super);
    function StatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StatementContext.prototype.acceptStatement = function () {
        return this.tryGetRuleContext(0, AcceptStatementContext);
    };
    StatementContext.prototype.addStatement = function () {
        return this.tryGetRuleContext(0, AddStatementContext);
    };
    StatementContext.prototype.alterStatement = function () {
        return this.tryGetRuleContext(0, AlterStatementContext);
    };
    StatementContext.prototype.callStatement = function () {
        return this.tryGetRuleContext(0, CallStatementContext);
    };
    StatementContext.prototype.cancelStatement = function () {
        return this.tryGetRuleContext(0, CancelStatementContext);
    };
    StatementContext.prototype.closeStatement = function () {
        return this.tryGetRuleContext(0, CloseStatementContext);
    };
    StatementContext.prototype.computeStatement = function () {
        return this.tryGetRuleContext(0, ComputeStatementContext);
    };
    StatementContext.prototype.continueStatement = function () {
        return this.tryGetRuleContext(0, ContinueStatementContext);
    };
    StatementContext.prototype.deleteStatement = function () {
        return this.tryGetRuleContext(0, DeleteStatementContext);
    };
    StatementContext.prototype.disableStatement = function () {
        return this.tryGetRuleContext(0, DisableStatementContext);
    };
    StatementContext.prototype.displayStatement = function () {
        return this.tryGetRuleContext(0, DisplayStatementContext);
    };
    StatementContext.prototype.divideStatement = function () {
        return this.tryGetRuleContext(0, DivideStatementContext);
    };
    StatementContext.prototype.enableStatement = function () {
        return this.tryGetRuleContext(0, EnableStatementContext);
    };
    StatementContext.prototype.entryStatement = function () {
        return this.tryGetRuleContext(0, EntryStatementContext);
    };
    StatementContext.prototype.evaluateStatement = function () {
        return this.tryGetRuleContext(0, EvaluateStatementContext);
    };
    StatementContext.prototype.exhibitStatement = function () {
        return this.tryGetRuleContext(0, ExhibitStatementContext);
    };
    StatementContext.prototype.execCicsStatement = function () {
        return this.tryGetRuleContext(0, ExecCicsStatementContext);
    };
    StatementContext.prototype.execSqlStatement = function () {
        return this.tryGetRuleContext(0, ExecSqlStatementContext);
    };
    StatementContext.prototype.execSqlImsStatement = function () {
        return this.tryGetRuleContext(0, ExecSqlImsStatementContext);
    };
    StatementContext.prototype.exitStatement = function () {
        return this.tryGetRuleContext(0, ExitStatementContext);
    };
    StatementContext.prototype.generateStatement = function () {
        return this.tryGetRuleContext(0, GenerateStatementContext);
    };
    StatementContext.prototype.gobackStatement = function () {
        return this.tryGetRuleContext(0, GobackStatementContext);
    };
    StatementContext.prototype.goToStatement = function () {
        return this.tryGetRuleContext(0, GoToStatementContext);
    };
    StatementContext.prototype.ifStatement = function () {
        return this.tryGetRuleContext(0, IfStatementContext);
    };
    StatementContext.prototype.initializeStatement = function () {
        return this.tryGetRuleContext(0, InitializeStatementContext);
    };
    StatementContext.prototype.initiateStatement = function () {
        return this.tryGetRuleContext(0, InitiateStatementContext);
    };
    StatementContext.prototype.inspectStatement = function () {
        return this.tryGetRuleContext(0, InspectStatementContext);
    };
    StatementContext.prototype.mergeStatement = function () {
        return this.tryGetRuleContext(0, MergeStatementContext);
    };
    StatementContext.prototype.moveStatement = function () {
        return this.tryGetRuleContext(0, MoveStatementContext);
    };
    StatementContext.prototype.multiplyStatement = function () {
        return this.tryGetRuleContext(0, MultiplyStatementContext);
    };
    StatementContext.prototype.openStatement = function () {
        return this.tryGetRuleContext(0, OpenStatementContext);
    };
    StatementContext.prototype.performStatement = function () {
        return this.tryGetRuleContext(0, PerformStatementContext);
    };
    StatementContext.prototype.purgeStatement = function () {
        return this.tryGetRuleContext(0, PurgeStatementContext);
    };
    StatementContext.prototype.readStatement = function () {
        return this.tryGetRuleContext(0, ReadStatementContext);
    };
    StatementContext.prototype.receiveStatement = function () {
        return this.tryGetRuleContext(0, ReceiveStatementContext);
    };
    StatementContext.prototype.releaseStatement = function () {
        return this.tryGetRuleContext(0, ReleaseStatementContext);
    };
    StatementContext.prototype.returnStatement = function () {
        return this.tryGetRuleContext(0, ReturnStatementContext);
    };
    StatementContext.prototype.rewriteStatement = function () {
        return this.tryGetRuleContext(0, RewriteStatementContext);
    };
    StatementContext.prototype.searchStatement = function () {
        return this.tryGetRuleContext(0, SearchStatementContext);
    };
    StatementContext.prototype.sendStatement = function () {
        return this.tryGetRuleContext(0, SendStatementContext);
    };
    StatementContext.prototype.setStatement = function () {
        return this.tryGetRuleContext(0, SetStatementContext);
    };
    StatementContext.prototype.sortStatement = function () {
        return this.tryGetRuleContext(0, SortStatementContext);
    };
    StatementContext.prototype.startStatement = function () {
        return this.tryGetRuleContext(0, StartStatementContext);
    };
    StatementContext.prototype.stopStatement = function () {
        return this.tryGetRuleContext(0, StopStatementContext);
    };
    StatementContext.prototype.stringStatement = function () {
        return this.tryGetRuleContext(0, StringStatementContext);
    };
    StatementContext.prototype.subtractStatement = function () {
        return this.tryGetRuleContext(0, SubtractStatementContext);
    };
    StatementContext.prototype.terminateStatement = function () {
        return this.tryGetRuleContext(0, TerminateStatementContext);
    };
    StatementContext.prototype.unstringStatement = function () {
        return this.tryGetRuleContext(0, UnstringStatementContext);
    };
    StatementContext.prototype.writeStatement = function () {
        return this.tryGetRuleContext(0, WriteStatementContext);
    };
    Object.defineProperty(StatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StatementContext.prototype.enterRule = function (listener) {
        if (listener.enterStatement) {
            listener.enterStatement(this);
        }
    };
    // @Override
    StatementContext.prototype.exitRule = function (listener) {
        if (listener.exitStatement) {
            listener.exitStatement(this);
        }
    };
    // @Override
    StatementContext.prototype.accept = function (visitor) {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StatementContext = StatementContext;
var AcceptStatementContext = /** @class */ (function (_super) {
    __extends(AcceptStatementContext, _super);
    function AcceptStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AcceptStatementContext.prototype.ACCEPT = function () { return this.getToken(Cobol85Parser.ACCEPT, 0); };
    AcceptStatementContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    AcceptStatementContext.prototype.acceptFromDateStatement = function () {
        return this.tryGetRuleContext(0, AcceptFromDateStatementContext);
    };
    AcceptStatementContext.prototype.acceptFromEscapeKeyStatement = function () {
        return this.tryGetRuleContext(0, AcceptFromEscapeKeyStatementContext);
    };
    AcceptStatementContext.prototype.acceptFromMnemonicStatement = function () {
        return this.tryGetRuleContext(0, AcceptFromMnemonicStatementContext);
    };
    AcceptStatementContext.prototype.acceptMessageCountStatement = function () {
        return this.tryGetRuleContext(0, AcceptMessageCountStatementContext);
    };
    AcceptStatementContext.prototype.onExceptionClause = function () {
        return this.tryGetRuleContext(0, OnExceptionClauseContext);
    };
    AcceptStatementContext.prototype.notOnExceptionClause = function () {
        return this.tryGetRuleContext(0, NotOnExceptionClauseContext);
    };
    AcceptStatementContext.prototype.END_ACCEPT = function () { return this.tryGetToken(Cobol85Parser.END_ACCEPT, 0); };
    Object.defineProperty(AcceptStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_acceptStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AcceptStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAcceptStatement) {
            listener.enterAcceptStatement(this);
        }
    };
    // @Override
    AcceptStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAcceptStatement) {
            listener.exitAcceptStatement(this);
        }
    };
    // @Override
    AcceptStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAcceptStatement) {
            return visitor.visitAcceptStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AcceptStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AcceptStatementContext = AcceptStatementContext;
var AcceptFromDateStatementContext = /** @class */ (function (_super) {
    __extends(AcceptFromDateStatementContext, _super);
    function AcceptFromDateStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AcceptFromDateStatementContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    AcceptFromDateStatementContext.prototype.DATE = function () { return this.tryGetToken(Cobol85Parser.DATE, 0); };
    AcceptFromDateStatementContext.prototype.DAY = function () { return this.tryGetToken(Cobol85Parser.DAY, 0); };
    AcceptFromDateStatementContext.prototype.DAY_OF_WEEK = function () { return this.tryGetToken(Cobol85Parser.DAY_OF_WEEK, 0); };
    AcceptFromDateStatementContext.prototype.TIME = function () { return this.tryGetToken(Cobol85Parser.TIME, 0); };
    AcceptFromDateStatementContext.prototype.TIMER = function () { return this.tryGetToken(Cobol85Parser.TIMER, 0); };
    AcceptFromDateStatementContext.prototype.TODAYS_DATE = function () { return this.tryGetToken(Cobol85Parser.TODAYS_DATE, 0); };
    AcceptFromDateStatementContext.prototype.TODAYS_NAME = function () { return this.tryGetToken(Cobol85Parser.TODAYS_NAME, 0); };
    AcceptFromDateStatementContext.prototype.YEAR = function () { return this.tryGetToken(Cobol85Parser.YEAR, 0); };
    AcceptFromDateStatementContext.prototype.YYYYMMDD = function () { return this.tryGetToken(Cobol85Parser.YYYYMMDD, 0); };
    AcceptFromDateStatementContext.prototype.YYYYDDD = function () { return this.tryGetToken(Cobol85Parser.YYYYDDD, 0); };
    AcceptFromDateStatementContext.prototype.MMDDYYYY = function () { return this.tryGetToken(Cobol85Parser.MMDDYYYY, 0); };
    Object.defineProperty(AcceptFromDateStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_acceptFromDateStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AcceptFromDateStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAcceptFromDateStatement) {
            listener.enterAcceptFromDateStatement(this);
        }
    };
    // @Override
    AcceptFromDateStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAcceptFromDateStatement) {
            listener.exitAcceptFromDateStatement(this);
        }
    };
    // @Override
    AcceptFromDateStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAcceptFromDateStatement) {
            return visitor.visitAcceptFromDateStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AcceptFromDateStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AcceptFromDateStatementContext = AcceptFromDateStatementContext;
var AcceptFromMnemonicStatementContext = /** @class */ (function (_super) {
    __extends(AcceptFromMnemonicStatementContext, _super);
    function AcceptFromMnemonicStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AcceptFromMnemonicStatementContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    AcceptFromMnemonicStatementContext.prototype.mnemonicName = function () {
        return this.getRuleContext(0, MnemonicNameContext);
    };
    Object.defineProperty(AcceptFromMnemonicStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_acceptFromMnemonicStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AcceptFromMnemonicStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAcceptFromMnemonicStatement) {
            listener.enterAcceptFromMnemonicStatement(this);
        }
    };
    // @Override
    AcceptFromMnemonicStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAcceptFromMnemonicStatement) {
            listener.exitAcceptFromMnemonicStatement(this);
        }
    };
    // @Override
    AcceptFromMnemonicStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAcceptFromMnemonicStatement) {
            return visitor.visitAcceptFromMnemonicStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AcceptFromMnemonicStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AcceptFromMnemonicStatementContext = AcceptFromMnemonicStatementContext;
var AcceptFromEscapeKeyStatementContext = /** @class */ (function (_super) {
    __extends(AcceptFromEscapeKeyStatementContext, _super);
    function AcceptFromEscapeKeyStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AcceptFromEscapeKeyStatementContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    AcceptFromEscapeKeyStatementContext.prototype.ESCAPE = function () { return this.getToken(Cobol85Parser.ESCAPE, 0); };
    AcceptFromEscapeKeyStatementContext.prototype.KEY = function () { return this.getToken(Cobol85Parser.KEY, 0); };
    Object.defineProperty(AcceptFromEscapeKeyStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_acceptFromEscapeKeyStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AcceptFromEscapeKeyStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAcceptFromEscapeKeyStatement) {
            listener.enterAcceptFromEscapeKeyStatement(this);
        }
    };
    // @Override
    AcceptFromEscapeKeyStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAcceptFromEscapeKeyStatement) {
            listener.exitAcceptFromEscapeKeyStatement(this);
        }
    };
    // @Override
    AcceptFromEscapeKeyStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAcceptFromEscapeKeyStatement) {
            return visitor.visitAcceptFromEscapeKeyStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AcceptFromEscapeKeyStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AcceptFromEscapeKeyStatementContext = AcceptFromEscapeKeyStatementContext;
var AcceptMessageCountStatementContext = /** @class */ (function (_super) {
    __extends(AcceptMessageCountStatementContext, _super);
    function AcceptMessageCountStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AcceptMessageCountStatementContext.prototype.COUNT = function () { return this.getToken(Cobol85Parser.COUNT, 0); };
    AcceptMessageCountStatementContext.prototype.MESSAGE = function () { return this.tryGetToken(Cobol85Parser.MESSAGE, 0); };
    Object.defineProperty(AcceptMessageCountStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_acceptMessageCountStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AcceptMessageCountStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAcceptMessageCountStatement) {
            listener.enterAcceptMessageCountStatement(this);
        }
    };
    // @Override
    AcceptMessageCountStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAcceptMessageCountStatement) {
            listener.exitAcceptMessageCountStatement(this);
        }
    };
    // @Override
    AcceptMessageCountStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAcceptMessageCountStatement) {
            return visitor.visitAcceptMessageCountStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AcceptMessageCountStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AcceptMessageCountStatementContext = AcceptMessageCountStatementContext;
var AddStatementContext = /** @class */ (function (_super) {
    __extends(AddStatementContext, _super);
    function AddStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AddStatementContext.prototype.ADD = function () { return this.getToken(Cobol85Parser.ADD, 0); };
    AddStatementContext.prototype.addToStatement = function () {
        return this.tryGetRuleContext(0, AddToStatementContext);
    };
    AddStatementContext.prototype.addToGivingStatement = function () {
        return this.tryGetRuleContext(0, AddToGivingStatementContext);
    };
    AddStatementContext.prototype.addCorrespondingStatement = function () {
        return this.tryGetRuleContext(0, AddCorrespondingStatementContext);
    };
    AddStatementContext.prototype.onSizeErrorPhrase = function () {
        return this.tryGetRuleContext(0, OnSizeErrorPhraseContext);
    };
    AddStatementContext.prototype.notOnSizeErrorPhrase = function () {
        return this.tryGetRuleContext(0, NotOnSizeErrorPhraseContext);
    };
    AddStatementContext.prototype.END_ADD = function () { return this.tryGetToken(Cobol85Parser.END_ADD, 0); };
    Object.defineProperty(AddStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_addStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AddStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAddStatement) {
            listener.enterAddStatement(this);
        }
    };
    // @Override
    AddStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAddStatement) {
            listener.exitAddStatement(this);
        }
    };
    // @Override
    AddStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAddStatement) {
            return visitor.visitAddStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AddStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AddStatementContext = AddStatementContext;
var AddToStatementContext = /** @class */ (function (_super) {
    __extends(AddToStatementContext, _super);
    function AddToStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AddToStatementContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    AddToStatementContext.prototype.addFrom = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AddFromContext);
        }
        else {
            return this.getRuleContext(i, AddFromContext);
        }
    };
    AddToStatementContext.prototype.addTo = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AddToContext);
        }
        else {
            return this.getRuleContext(i, AddToContext);
        }
    };
    Object.defineProperty(AddToStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_addToStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AddToStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAddToStatement) {
            listener.enterAddToStatement(this);
        }
    };
    // @Override
    AddToStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAddToStatement) {
            listener.exitAddToStatement(this);
        }
    };
    // @Override
    AddToStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAddToStatement) {
            return visitor.visitAddToStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AddToStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AddToStatementContext = AddToStatementContext;
var AddToGivingStatementContext = /** @class */ (function (_super) {
    __extends(AddToGivingStatementContext, _super);
    function AddToGivingStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AddToGivingStatementContext.prototype.GIVING = function () { return this.getToken(Cobol85Parser.GIVING, 0); };
    AddToGivingStatementContext.prototype.addFrom = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AddFromContext);
        }
        else {
            return this.getRuleContext(i, AddFromContext);
        }
    };
    AddToGivingStatementContext.prototype.TO = function () { return this.tryGetToken(Cobol85Parser.TO, 0); };
    AddToGivingStatementContext.prototype.addGiving = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AddGivingContext);
        }
        else {
            return this.getRuleContext(i, AddGivingContext);
        }
    };
    AddToGivingStatementContext.prototype.addToGiving = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AddToGivingContext);
        }
        else {
            return this.getRuleContext(i, AddToGivingContext);
        }
    };
    Object.defineProperty(AddToGivingStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_addToGivingStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AddToGivingStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAddToGivingStatement) {
            listener.enterAddToGivingStatement(this);
        }
    };
    // @Override
    AddToGivingStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAddToGivingStatement) {
            listener.exitAddToGivingStatement(this);
        }
    };
    // @Override
    AddToGivingStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAddToGivingStatement) {
            return visitor.visitAddToGivingStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AddToGivingStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AddToGivingStatementContext = AddToGivingStatementContext;
var AddCorrespondingStatementContext = /** @class */ (function (_super) {
    __extends(AddCorrespondingStatementContext, _super);
    function AddCorrespondingStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AddCorrespondingStatementContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    AddCorrespondingStatementContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    AddCorrespondingStatementContext.prototype.addTo = function () {
        return this.getRuleContext(0, AddToContext);
    };
    AddCorrespondingStatementContext.prototype.CORRESPONDING = function () { return this.tryGetToken(Cobol85Parser.CORRESPONDING, 0); };
    AddCorrespondingStatementContext.prototype.CORR = function () { return this.tryGetToken(Cobol85Parser.CORR, 0); };
    Object.defineProperty(AddCorrespondingStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_addCorrespondingStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AddCorrespondingStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAddCorrespondingStatement) {
            listener.enterAddCorrespondingStatement(this);
        }
    };
    // @Override
    AddCorrespondingStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAddCorrespondingStatement) {
            listener.exitAddCorrespondingStatement(this);
        }
    };
    // @Override
    AddCorrespondingStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAddCorrespondingStatement) {
            return visitor.visitAddCorrespondingStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AddCorrespondingStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AddCorrespondingStatementContext = AddCorrespondingStatementContext;
var AddFromContext = /** @class */ (function (_super) {
    __extends(AddFromContext, _super);
    function AddFromContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AddFromContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    AddFromContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(AddFromContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_addFrom; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AddFromContext.prototype.enterRule = function (listener) {
        if (listener.enterAddFrom) {
            listener.enterAddFrom(this);
        }
    };
    // @Override
    AddFromContext.prototype.exitRule = function (listener) {
        if (listener.exitAddFrom) {
            listener.exitAddFrom(this);
        }
    };
    // @Override
    AddFromContext.prototype.accept = function (visitor) {
        if (visitor.visitAddFrom) {
            return visitor.visitAddFrom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AddFromContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AddFromContext = AddFromContext;
var AddToContext = /** @class */ (function (_super) {
    __extends(AddToContext, _super);
    function AddToContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AddToContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    AddToContext.prototype.ROUNDED = function () { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); };
    Object.defineProperty(AddToContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_addTo; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AddToContext.prototype.enterRule = function (listener) {
        if (listener.enterAddTo) {
            listener.enterAddTo(this);
        }
    };
    // @Override
    AddToContext.prototype.exitRule = function (listener) {
        if (listener.exitAddTo) {
            listener.exitAddTo(this);
        }
    };
    // @Override
    AddToContext.prototype.accept = function (visitor) {
        if (visitor.visitAddTo) {
            return visitor.visitAddTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AddToContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AddToContext = AddToContext;
var AddToGivingContext = /** @class */ (function (_super) {
    __extends(AddToGivingContext, _super);
    function AddToGivingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AddToGivingContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    AddToGivingContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(AddToGivingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_addToGiving; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AddToGivingContext.prototype.enterRule = function (listener) {
        if (listener.enterAddToGiving) {
            listener.enterAddToGiving(this);
        }
    };
    // @Override
    AddToGivingContext.prototype.exitRule = function (listener) {
        if (listener.exitAddToGiving) {
            listener.exitAddToGiving(this);
        }
    };
    // @Override
    AddToGivingContext.prototype.accept = function (visitor) {
        if (visitor.visitAddToGiving) {
            return visitor.visitAddToGiving(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AddToGivingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AddToGivingContext = AddToGivingContext;
var AddGivingContext = /** @class */ (function (_super) {
    __extends(AddGivingContext, _super);
    function AddGivingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AddGivingContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    AddGivingContext.prototype.ROUNDED = function () { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); };
    Object.defineProperty(AddGivingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_addGiving; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AddGivingContext.prototype.enterRule = function (listener) {
        if (listener.enterAddGiving) {
            listener.enterAddGiving(this);
        }
    };
    // @Override
    AddGivingContext.prototype.exitRule = function (listener) {
        if (listener.exitAddGiving) {
            listener.exitAddGiving(this);
        }
    };
    // @Override
    AddGivingContext.prototype.accept = function (visitor) {
        if (visitor.visitAddGiving) {
            return visitor.visitAddGiving(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AddGivingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AddGivingContext = AddGivingContext;
var AlteredGoToContext = /** @class */ (function (_super) {
    __extends(AlteredGoToContext, _super);
    function AlteredGoToContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlteredGoToContext.prototype.GO = function () { return this.getToken(Cobol85Parser.GO, 0); };
    AlteredGoToContext.prototype.DOT_FS = function () { return this.getToken(Cobol85Parser.DOT_FS, 0); };
    AlteredGoToContext.prototype.TO = function () { return this.tryGetToken(Cobol85Parser.TO, 0); };
    Object.defineProperty(AlteredGoToContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alteredGoTo; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlteredGoToContext.prototype.enterRule = function (listener) {
        if (listener.enterAlteredGoTo) {
            listener.enterAlteredGoTo(this);
        }
    };
    // @Override
    AlteredGoToContext.prototype.exitRule = function (listener) {
        if (listener.exitAlteredGoTo) {
            listener.exitAlteredGoTo(this);
        }
    };
    // @Override
    AlteredGoToContext.prototype.accept = function (visitor) {
        if (visitor.visitAlteredGoTo) {
            return visitor.visitAlteredGoTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlteredGoToContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlteredGoToContext = AlteredGoToContext;
var AlterStatementContext = /** @class */ (function (_super) {
    __extends(AlterStatementContext, _super);
    function AlterStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlterStatementContext.prototype.ALTER = function () { return this.getToken(Cobol85Parser.ALTER, 0); };
    AlterStatementContext.prototype.alterProceedTo = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AlterProceedToContext);
        }
        else {
            return this.getRuleContext(i, AlterProceedToContext);
        }
    };
    Object.defineProperty(AlterStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alterStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlterStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAlterStatement) {
            listener.enterAlterStatement(this);
        }
    };
    // @Override
    AlterStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAlterStatement) {
            listener.exitAlterStatement(this);
        }
    };
    // @Override
    AlterStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAlterStatement) {
            return visitor.visitAlterStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlterStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlterStatementContext = AlterStatementContext;
var AlterProceedToContext = /** @class */ (function (_super) {
    __extends(AlterProceedToContext, _super);
    function AlterProceedToContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlterProceedToContext.prototype.procedureName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureNameContext);
        }
        else {
            return this.getRuleContext(i, ProcedureNameContext);
        }
    };
    AlterProceedToContext.prototype.TO = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.TO);
        }
        else {
            return this.getToken(Cobol85Parser.TO, i);
        }
    };
    AlterProceedToContext.prototype.PROCEED = function () { return this.tryGetToken(Cobol85Parser.PROCEED, 0); };
    Object.defineProperty(AlterProceedToContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alterProceedTo; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlterProceedToContext.prototype.enterRule = function (listener) {
        if (listener.enterAlterProceedTo) {
            listener.enterAlterProceedTo(this);
        }
    };
    // @Override
    AlterProceedToContext.prototype.exitRule = function (listener) {
        if (listener.exitAlterProceedTo) {
            listener.exitAlterProceedTo(this);
        }
    };
    // @Override
    AlterProceedToContext.prototype.accept = function (visitor) {
        if (visitor.visitAlterProceedTo) {
            return visitor.visitAlterProceedTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlterProceedToContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlterProceedToContext = AlterProceedToContext;
var CallStatementContext = /** @class */ (function (_super) {
    __extends(CallStatementContext, _super);
    function CallStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CallStatementContext.prototype.CALL = function () { return this.getToken(Cobol85Parser.CALL, 0); };
    CallStatementContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    CallStatementContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    CallStatementContext.prototype.callUsingPhrase = function () {
        return this.tryGetRuleContext(0, CallUsingPhraseContext);
    };
    CallStatementContext.prototype.callGivingPhrase = function () {
        return this.tryGetRuleContext(0, CallGivingPhraseContext);
    };
    CallStatementContext.prototype.onOverflowPhrase = function () {
        return this.tryGetRuleContext(0, OnOverflowPhraseContext);
    };
    CallStatementContext.prototype.onExceptionClause = function () {
        return this.tryGetRuleContext(0, OnExceptionClauseContext);
    };
    CallStatementContext.prototype.notOnExceptionClause = function () {
        return this.tryGetRuleContext(0, NotOnExceptionClauseContext);
    };
    CallStatementContext.prototype.END_CALL = function () { return this.tryGetToken(Cobol85Parser.END_CALL, 0); };
    Object.defineProperty(CallStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_callStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CallStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterCallStatement) {
            listener.enterCallStatement(this);
        }
    };
    // @Override
    CallStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitCallStatement) {
            listener.exitCallStatement(this);
        }
    };
    // @Override
    CallStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitCallStatement) {
            return visitor.visitCallStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CallStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CallStatementContext = CallStatementContext;
var CallUsingPhraseContext = /** @class */ (function (_super) {
    __extends(CallUsingPhraseContext, _super);
    function CallUsingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CallUsingPhraseContext.prototype.USING = function () { return this.getToken(Cobol85Parser.USING, 0); };
    CallUsingPhraseContext.prototype.callUsingParameter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CallUsingParameterContext);
        }
        else {
            return this.getRuleContext(i, CallUsingParameterContext);
        }
    };
    Object.defineProperty(CallUsingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_callUsingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CallUsingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterCallUsingPhrase) {
            listener.enterCallUsingPhrase(this);
        }
    };
    // @Override
    CallUsingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitCallUsingPhrase) {
            listener.exitCallUsingPhrase(this);
        }
    };
    // @Override
    CallUsingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitCallUsingPhrase) {
            return visitor.visitCallUsingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CallUsingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CallUsingPhraseContext = CallUsingPhraseContext;
var CallUsingParameterContext = /** @class */ (function (_super) {
    __extends(CallUsingParameterContext, _super);
    function CallUsingParameterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CallUsingParameterContext.prototype.callByReferencePhrase = function () {
        return this.tryGetRuleContext(0, CallByReferencePhraseContext);
    };
    CallUsingParameterContext.prototype.callByValuePhrase = function () {
        return this.tryGetRuleContext(0, CallByValuePhraseContext);
    };
    CallUsingParameterContext.prototype.callByContentPhrase = function () {
        return this.tryGetRuleContext(0, CallByContentPhraseContext);
    };
    Object.defineProperty(CallUsingParameterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_callUsingParameter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CallUsingParameterContext.prototype.enterRule = function (listener) {
        if (listener.enterCallUsingParameter) {
            listener.enterCallUsingParameter(this);
        }
    };
    // @Override
    CallUsingParameterContext.prototype.exitRule = function (listener) {
        if (listener.exitCallUsingParameter) {
            listener.exitCallUsingParameter(this);
        }
    };
    // @Override
    CallUsingParameterContext.prototype.accept = function (visitor) {
        if (visitor.visitCallUsingParameter) {
            return visitor.visitCallUsingParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CallUsingParameterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CallUsingParameterContext = CallUsingParameterContext;
var CallByReferencePhraseContext = /** @class */ (function (_super) {
    __extends(CallByReferencePhraseContext, _super);
    function CallByReferencePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CallByReferencePhraseContext.prototype.REFERENCE = function () { return this.tryGetToken(Cobol85Parser.REFERENCE, 0); };
    CallByReferencePhraseContext.prototype.callByReference = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CallByReferenceContext);
        }
        else {
            return this.getRuleContext(i, CallByReferenceContext);
        }
    };
    CallByReferencePhraseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    Object.defineProperty(CallByReferencePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_callByReferencePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CallByReferencePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterCallByReferencePhrase) {
            listener.enterCallByReferencePhrase(this);
        }
    };
    // @Override
    CallByReferencePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitCallByReferencePhrase) {
            listener.exitCallByReferencePhrase(this);
        }
    };
    // @Override
    CallByReferencePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitCallByReferencePhrase) {
            return visitor.visitCallByReferencePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CallByReferencePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CallByReferencePhraseContext = CallByReferencePhraseContext;
var CallByReferenceContext = /** @class */ (function (_super) {
    __extends(CallByReferenceContext, _super);
    function CallByReferenceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CallByReferenceContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    CallByReferenceContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    CallByReferenceContext.prototype.fileName = function () {
        return this.tryGetRuleContext(0, FileNameContext);
    };
    CallByReferenceContext.prototype.ADDRESS = function () { return this.tryGetToken(Cobol85Parser.ADDRESS, 0); };
    CallByReferenceContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    CallByReferenceContext.prototype.INTEGER = function () { return this.tryGetToken(Cobol85Parser.INTEGER, 0); };
    CallByReferenceContext.prototype.STRING = function () { return this.tryGetToken(Cobol85Parser.STRING, 0); };
    CallByReferenceContext.prototype.OMITTED = function () { return this.tryGetToken(Cobol85Parser.OMITTED, 0); };
    Object.defineProperty(CallByReferenceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_callByReference; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CallByReferenceContext.prototype.enterRule = function (listener) {
        if (listener.enterCallByReference) {
            listener.enterCallByReference(this);
        }
    };
    // @Override
    CallByReferenceContext.prototype.exitRule = function (listener) {
        if (listener.exitCallByReference) {
            listener.exitCallByReference(this);
        }
    };
    // @Override
    CallByReferenceContext.prototype.accept = function (visitor) {
        if (visitor.visitCallByReference) {
            return visitor.visitCallByReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CallByReferenceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CallByReferenceContext = CallByReferenceContext;
var CallByValuePhraseContext = /** @class */ (function (_super) {
    __extends(CallByValuePhraseContext, _super);
    function CallByValuePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CallByValuePhraseContext.prototype.VALUE = function () { return this.getToken(Cobol85Parser.VALUE, 0); };
    CallByValuePhraseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    CallByValuePhraseContext.prototype.callByValue = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CallByValueContext);
        }
        else {
            return this.getRuleContext(i, CallByValueContext);
        }
    };
    Object.defineProperty(CallByValuePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_callByValuePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CallByValuePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterCallByValuePhrase) {
            listener.enterCallByValuePhrase(this);
        }
    };
    // @Override
    CallByValuePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitCallByValuePhrase) {
            listener.exitCallByValuePhrase(this);
        }
    };
    // @Override
    CallByValuePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitCallByValuePhrase) {
            return visitor.visitCallByValuePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CallByValuePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CallByValuePhraseContext = CallByValuePhraseContext;
var CallByValueContext = /** @class */ (function (_super) {
    __extends(CallByValueContext, _super);
    function CallByValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CallByValueContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    CallByValueContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    CallByValueContext.prototype.ADDRESS = function () { return this.tryGetToken(Cobol85Parser.ADDRESS, 0); };
    CallByValueContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    CallByValueContext.prototype.LENGTH = function () { return this.tryGetToken(Cobol85Parser.LENGTH, 0); };
    Object.defineProperty(CallByValueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_callByValue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CallByValueContext.prototype.enterRule = function (listener) {
        if (listener.enterCallByValue) {
            listener.enterCallByValue(this);
        }
    };
    // @Override
    CallByValueContext.prototype.exitRule = function (listener) {
        if (listener.exitCallByValue) {
            listener.exitCallByValue(this);
        }
    };
    // @Override
    CallByValueContext.prototype.accept = function (visitor) {
        if (visitor.visitCallByValue) {
            return visitor.visitCallByValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CallByValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CallByValueContext = CallByValueContext;
var CallByContentPhraseContext = /** @class */ (function (_super) {
    __extends(CallByContentPhraseContext, _super);
    function CallByContentPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CallByContentPhraseContext.prototype.CONTENT = function () { return this.getToken(Cobol85Parser.CONTENT, 0); };
    CallByContentPhraseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    CallByContentPhraseContext.prototype.callByContent = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CallByContentContext);
        }
        else {
            return this.getRuleContext(i, CallByContentContext);
        }
    };
    Object.defineProperty(CallByContentPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_callByContentPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CallByContentPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterCallByContentPhrase) {
            listener.enterCallByContentPhrase(this);
        }
    };
    // @Override
    CallByContentPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitCallByContentPhrase) {
            listener.exitCallByContentPhrase(this);
        }
    };
    // @Override
    CallByContentPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitCallByContentPhrase) {
            return visitor.visitCallByContentPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CallByContentPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CallByContentPhraseContext = CallByContentPhraseContext;
var CallByContentContext = /** @class */ (function (_super) {
    __extends(CallByContentContext, _super);
    function CallByContentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CallByContentContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    CallByContentContext.prototype.ADDRESS = function () { return this.tryGetToken(Cobol85Parser.ADDRESS, 0); };
    CallByContentContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    CallByContentContext.prototype.LENGTH = function () { return this.tryGetToken(Cobol85Parser.LENGTH, 0); };
    CallByContentContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    CallByContentContext.prototype.OMITTED = function () { return this.tryGetToken(Cobol85Parser.OMITTED, 0); };
    Object.defineProperty(CallByContentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_callByContent; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CallByContentContext.prototype.enterRule = function (listener) {
        if (listener.enterCallByContent) {
            listener.enterCallByContent(this);
        }
    };
    // @Override
    CallByContentContext.prototype.exitRule = function (listener) {
        if (listener.exitCallByContent) {
            listener.exitCallByContent(this);
        }
    };
    // @Override
    CallByContentContext.prototype.accept = function (visitor) {
        if (visitor.visitCallByContent) {
            return visitor.visitCallByContent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CallByContentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CallByContentContext = CallByContentContext;
var CallGivingPhraseContext = /** @class */ (function (_super) {
    __extends(CallGivingPhraseContext, _super);
    function CallGivingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CallGivingPhraseContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    CallGivingPhraseContext.prototype.GIVING = function () { return this.tryGetToken(Cobol85Parser.GIVING, 0); };
    CallGivingPhraseContext.prototype.RETURNING = function () { return this.tryGetToken(Cobol85Parser.RETURNING, 0); };
    Object.defineProperty(CallGivingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_callGivingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CallGivingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterCallGivingPhrase) {
            listener.enterCallGivingPhrase(this);
        }
    };
    // @Override
    CallGivingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitCallGivingPhrase) {
            listener.exitCallGivingPhrase(this);
        }
    };
    // @Override
    CallGivingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitCallGivingPhrase) {
            return visitor.visitCallGivingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CallGivingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CallGivingPhraseContext = CallGivingPhraseContext;
var CancelStatementContext = /** @class */ (function (_super) {
    __extends(CancelStatementContext, _super);
    function CancelStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CancelStatementContext.prototype.CANCEL = function () { return this.getToken(Cobol85Parser.CANCEL, 0); };
    CancelStatementContext.prototype.cancelCall = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CancelCallContext);
        }
        else {
            return this.getRuleContext(i, CancelCallContext);
        }
    };
    Object.defineProperty(CancelStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_cancelStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CancelStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterCancelStatement) {
            listener.enterCancelStatement(this);
        }
    };
    // @Override
    CancelStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitCancelStatement) {
            listener.exitCancelStatement(this);
        }
    };
    // @Override
    CancelStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitCancelStatement) {
            return visitor.visitCancelStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CancelStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CancelStatementContext = CancelStatementContext;
var CancelCallContext = /** @class */ (function (_super) {
    __extends(CancelCallContext, _super);
    function CancelCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CancelCallContext.prototype.libraryName = function () {
        return this.tryGetRuleContext(0, LibraryNameContext);
    };
    CancelCallContext.prototype.BYTITLE = function () { return this.tryGetToken(Cobol85Parser.BYTITLE, 0); };
    CancelCallContext.prototype.BYFUNCTION = function () { return this.tryGetToken(Cobol85Parser.BYFUNCTION, 0); };
    CancelCallContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    CancelCallContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(CancelCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_cancelCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CancelCallContext.prototype.enterRule = function (listener) {
        if (listener.enterCancelCall) {
            listener.enterCancelCall(this);
        }
    };
    // @Override
    CancelCallContext.prototype.exitRule = function (listener) {
        if (listener.exitCancelCall) {
            listener.exitCancelCall(this);
        }
    };
    // @Override
    CancelCallContext.prototype.accept = function (visitor) {
        if (visitor.visitCancelCall) {
            return visitor.visitCancelCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CancelCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CancelCallContext = CancelCallContext;
var CloseStatementContext = /** @class */ (function (_super) {
    __extends(CloseStatementContext, _super);
    function CloseStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CloseStatementContext.prototype.CLOSE = function () { return this.getToken(Cobol85Parser.CLOSE, 0); };
    CloseStatementContext.prototype.closeFile = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CloseFileContext);
        }
        else {
            return this.getRuleContext(i, CloseFileContext);
        }
    };
    Object.defineProperty(CloseStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_closeStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CloseStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterCloseStatement) {
            listener.enterCloseStatement(this);
        }
    };
    // @Override
    CloseStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitCloseStatement) {
            listener.exitCloseStatement(this);
        }
    };
    // @Override
    CloseStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitCloseStatement) {
            return visitor.visitCloseStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CloseStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CloseStatementContext = CloseStatementContext;
var CloseFileContext = /** @class */ (function (_super) {
    __extends(CloseFileContext, _super);
    function CloseFileContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CloseFileContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    CloseFileContext.prototype.closeReelUnitStatement = function () {
        return this.tryGetRuleContext(0, CloseReelUnitStatementContext);
    };
    CloseFileContext.prototype.closeRelativeStatement = function () {
        return this.tryGetRuleContext(0, CloseRelativeStatementContext);
    };
    CloseFileContext.prototype.closePortFileIOStatement = function () {
        return this.tryGetRuleContext(0, ClosePortFileIOStatementContext);
    };
    Object.defineProperty(CloseFileContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_closeFile; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CloseFileContext.prototype.enterRule = function (listener) {
        if (listener.enterCloseFile) {
            listener.enterCloseFile(this);
        }
    };
    // @Override
    CloseFileContext.prototype.exitRule = function (listener) {
        if (listener.exitCloseFile) {
            listener.exitCloseFile(this);
        }
    };
    // @Override
    CloseFileContext.prototype.accept = function (visitor) {
        if (visitor.visitCloseFile) {
            return visitor.visitCloseFile(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CloseFileContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CloseFileContext = CloseFileContext;
var CloseReelUnitStatementContext = /** @class */ (function (_super) {
    __extends(CloseReelUnitStatementContext, _super);
    function CloseReelUnitStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CloseReelUnitStatementContext.prototype.REEL = function () { return this.tryGetToken(Cobol85Parser.REEL, 0); };
    CloseReelUnitStatementContext.prototype.UNIT = function () { return this.tryGetToken(Cobol85Parser.UNIT, 0); };
    CloseReelUnitStatementContext.prototype.REMOVAL = function () { return this.tryGetToken(Cobol85Parser.REMOVAL, 0); };
    CloseReelUnitStatementContext.prototype.NO = function () { return this.tryGetToken(Cobol85Parser.NO, 0); };
    CloseReelUnitStatementContext.prototype.REWIND = function () { return this.tryGetToken(Cobol85Parser.REWIND, 0); };
    CloseReelUnitStatementContext.prototype.LOCK = function () { return this.tryGetToken(Cobol85Parser.LOCK, 0); };
    CloseReelUnitStatementContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    CloseReelUnitStatementContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(CloseReelUnitStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_closeReelUnitStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CloseReelUnitStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterCloseReelUnitStatement) {
            listener.enterCloseReelUnitStatement(this);
        }
    };
    // @Override
    CloseReelUnitStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitCloseReelUnitStatement) {
            listener.exitCloseReelUnitStatement(this);
        }
    };
    // @Override
    CloseReelUnitStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitCloseReelUnitStatement) {
            return visitor.visitCloseReelUnitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CloseReelUnitStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CloseReelUnitStatementContext = CloseReelUnitStatementContext;
var CloseRelativeStatementContext = /** @class */ (function (_super) {
    __extends(CloseRelativeStatementContext, _super);
    function CloseRelativeStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CloseRelativeStatementContext.prototype.NO = function () { return this.tryGetToken(Cobol85Parser.NO, 0); };
    CloseRelativeStatementContext.prototype.REWIND = function () { return this.tryGetToken(Cobol85Parser.REWIND, 0); };
    CloseRelativeStatementContext.prototype.LOCK = function () { return this.tryGetToken(Cobol85Parser.LOCK, 0); };
    CloseRelativeStatementContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(CloseRelativeStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_closeRelativeStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CloseRelativeStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterCloseRelativeStatement) {
            listener.enterCloseRelativeStatement(this);
        }
    };
    // @Override
    CloseRelativeStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitCloseRelativeStatement) {
            listener.exitCloseRelativeStatement(this);
        }
    };
    // @Override
    CloseRelativeStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitCloseRelativeStatement) {
            return visitor.visitCloseRelativeStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CloseRelativeStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CloseRelativeStatementContext = CloseRelativeStatementContext;
var ClosePortFileIOStatementContext = /** @class */ (function (_super) {
    __extends(ClosePortFileIOStatementContext, _super);
    function ClosePortFileIOStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClosePortFileIOStatementContext.prototype.NO = function () { return this.tryGetToken(Cobol85Parser.NO, 0); };
    ClosePortFileIOStatementContext.prototype.WAIT = function () { return this.tryGetToken(Cobol85Parser.WAIT, 0); };
    ClosePortFileIOStatementContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    ClosePortFileIOStatementContext.prototype.USING = function () { return this.tryGetToken(Cobol85Parser.USING, 0); };
    ClosePortFileIOStatementContext.prototype.closePortFileIOUsing = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ClosePortFileIOUsingContext);
        }
        else {
            return this.getRuleContext(i, ClosePortFileIOUsingContext);
        }
    };
    Object.defineProperty(ClosePortFileIOStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_closePortFileIOStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClosePortFileIOStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterClosePortFileIOStatement) {
            listener.enterClosePortFileIOStatement(this);
        }
    };
    // @Override
    ClosePortFileIOStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitClosePortFileIOStatement) {
            listener.exitClosePortFileIOStatement(this);
        }
    };
    // @Override
    ClosePortFileIOStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitClosePortFileIOStatement) {
            return visitor.visitClosePortFileIOStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClosePortFileIOStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClosePortFileIOStatementContext = ClosePortFileIOStatementContext;
var ClosePortFileIOUsingContext = /** @class */ (function (_super) {
    __extends(ClosePortFileIOUsingContext, _super);
    function ClosePortFileIOUsingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClosePortFileIOUsingContext.prototype.closePortFileIOUsingCloseDisposition = function () {
        return this.tryGetRuleContext(0, ClosePortFileIOUsingCloseDispositionContext);
    };
    ClosePortFileIOUsingContext.prototype.closePortFileIOUsingAssociatedData = function () {
        return this.tryGetRuleContext(0, ClosePortFileIOUsingAssociatedDataContext);
    };
    ClosePortFileIOUsingContext.prototype.closePortFileIOUsingAssociatedDataLength = function () {
        return this.tryGetRuleContext(0, ClosePortFileIOUsingAssociatedDataLengthContext);
    };
    Object.defineProperty(ClosePortFileIOUsingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_closePortFileIOUsing; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClosePortFileIOUsingContext.prototype.enterRule = function (listener) {
        if (listener.enterClosePortFileIOUsing) {
            listener.enterClosePortFileIOUsing(this);
        }
    };
    // @Override
    ClosePortFileIOUsingContext.prototype.exitRule = function (listener) {
        if (listener.exitClosePortFileIOUsing) {
            listener.exitClosePortFileIOUsing(this);
        }
    };
    // @Override
    ClosePortFileIOUsingContext.prototype.accept = function (visitor) {
        if (visitor.visitClosePortFileIOUsing) {
            return visitor.visitClosePortFileIOUsing(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClosePortFileIOUsingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClosePortFileIOUsingContext = ClosePortFileIOUsingContext;
var ClosePortFileIOUsingCloseDispositionContext = /** @class */ (function (_super) {
    __extends(ClosePortFileIOUsingCloseDispositionContext, _super);
    function ClosePortFileIOUsingCloseDispositionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClosePortFileIOUsingCloseDispositionContext.prototype.CLOSE_DISPOSITION = function () { return this.getToken(Cobol85Parser.CLOSE_DISPOSITION, 0); };
    ClosePortFileIOUsingCloseDispositionContext.prototype.ABORT = function () { return this.tryGetToken(Cobol85Parser.ABORT, 0); };
    ClosePortFileIOUsingCloseDispositionContext.prototype.ORDERLY = function () { return this.tryGetToken(Cobol85Parser.ORDERLY, 0); };
    ClosePortFileIOUsingCloseDispositionContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    Object.defineProperty(ClosePortFileIOUsingCloseDispositionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_closePortFileIOUsingCloseDisposition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClosePortFileIOUsingCloseDispositionContext.prototype.enterRule = function (listener) {
        if (listener.enterClosePortFileIOUsingCloseDisposition) {
            listener.enterClosePortFileIOUsingCloseDisposition(this);
        }
    };
    // @Override
    ClosePortFileIOUsingCloseDispositionContext.prototype.exitRule = function (listener) {
        if (listener.exitClosePortFileIOUsingCloseDisposition) {
            listener.exitClosePortFileIOUsingCloseDisposition(this);
        }
    };
    // @Override
    ClosePortFileIOUsingCloseDispositionContext.prototype.accept = function (visitor) {
        if (visitor.visitClosePortFileIOUsingCloseDisposition) {
            return visitor.visitClosePortFileIOUsingCloseDisposition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClosePortFileIOUsingCloseDispositionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClosePortFileIOUsingCloseDispositionContext = ClosePortFileIOUsingCloseDispositionContext;
var ClosePortFileIOUsingAssociatedDataContext = /** @class */ (function (_super) {
    __extends(ClosePortFileIOUsingAssociatedDataContext, _super);
    function ClosePortFileIOUsingAssociatedDataContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClosePortFileIOUsingAssociatedDataContext.prototype.ASSOCIATED_DATA = function () { return this.getToken(Cobol85Parser.ASSOCIATED_DATA, 0); };
    ClosePortFileIOUsingAssociatedDataContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ClosePortFileIOUsingAssociatedDataContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(ClosePortFileIOUsingAssociatedDataContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_closePortFileIOUsingAssociatedData; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClosePortFileIOUsingAssociatedDataContext.prototype.enterRule = function (listener) {
        if (listener.enterClosePortFileIOUsingAssociatedData) {
            listener.enterClosePortFileIOUsingAssociatedData(this);
        }
    };
    // @Override
    ClosePortFileIOUsingAssociatedDataContext.prototype.exitRule = function (listener) {
        if (listener.exitClosePortFileIOUsingAssociatedData) {
            listener.exitClosePortFileIOUsingAssociatedData(this);
        }
    };
    // @Override
    ClosePortFileIOUsingAssociatedDataContext.prototype.accept = function (visitor) {
        if (visitor.visitClosePortFileIOUsingAssociatedData) {
            return visitor.visitClosePortFileIOUsingAssociatedData(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClosePortFileIOUsingAssociatedDataContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClosePortFileIOUsingAssociatedDataContext = ClosePortFileIOUsingAssociatedDataContext;
var ClosePortFileIOUsingAssociatedDataLengthContext = /** @class */ (function (_super) {
    __extends(ClosePortFileIOUsingAssociatedDataLengthContext, _super);
    function ClosePortFileIOUsingAssociatedDataLengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClosePortFileIOUsingAssociatedDataLengthContext.prototype.ASSOCIATED_DATA_LENGTH = function () { return this.getToken(Cobol85Parser.ASSOCIATED_DATA_LENGTH, 0); };
    ClosePortFileIOUsingAssociatedDataLengthContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ClosePortFileIOUsingAssociatedDataLengthContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    ClosePortFileIOUsingAssociatedDataLengthContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    Object.defineProperty(ClosePortFileIOUsingAssociatedDataLengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_closePortFileIOUsingAssociatedDataLength; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClosePortFileIOUsingAssociatedDataLengthContext.prototype.enterRule = function (listener) {
        if (listener.enterClosePortFileIOUsingAssociatedDataLength) {
            listener.enterClosePortFileIOUsingAssociatedDataLength(this);
        }
    };
    // @Override
    ClosePortFileIOUsingAssociatedDataLengthContext.prototype.exitRule = function (listener) {
        if (listener.exitClosePortFileIOUsingAssociatedDataLength) {
            listener.exitClosePortFileIOUsingAssociatedDataLength(this);
        }
    };
    // @Override
    ClosePortFileIOUsingAssociatedDataLengthContext.prototype.accept = function (visitor) {
        if (visitor.visitClosePortFileIOUsingAssociatedDataLength) {
            return visitor.visitClosePortFileIOUsingAssociatedDataLength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClosePortFileIOUsingAssociatedDataLengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClosePortFileIOUsingAssociatedDataLengthContext = ClosePortFileIOUsingAssociatedDataLengthContext;
var ComputeStatementContext = /** @class */ (function (_super) {
    __extends(ComputeStatementContext, _super);
    function ComputeStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ComputeStatementContext.prototype.COMPUTE = function () { return this.getToken(Cobol85Parser.COMPUTE, 0); };
    ComputeStatementContext.prototype.arithmeticExpression = function () {
        return this.getRuleContext(0, ArithmeticExpressionContext);
    };
    ComputeStatementContext.prototype.EQUALCHAR = function () { return this.tryGetToken(Cobol85Parser.EQUALCHAR, 0); };
    ComputeStatementContext.prototype.EQUAL = function () { return this.tryGetToken(Cobol85Parser.EQUAL, 0); };
    ComputeStatementContext.prototype.computeStore = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ComputeStoreContext);
        }
        else {
            return this.getRuleContext(i, ComputeStoreContext);
        }
    };
    ComputeStatementContext.prototype.onSizeErrorPhrase = function () {
        return this.tryGetRuleContext(0, OnSizeErrorPhraseContext);
    };
    ComputeStatementContext.prototype.notOnSizeErrorPhrase = function () {
        return this.tryGetRuleContext(0, NotOnSizeErrorPhraseContext);
    };
    ComputeStatementContext.prototype.END_COMPUTE = function () { return this.tryGetToken(Cobol85Parser.END_COMPUTE, 0); };
    Object.defineProperty(ComputeStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_computeStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ComputeStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterComputeStatement) {
            listener.enterComputeStatement(this);
        }
    };
    // @Override
    ComputeStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitComputeStatement) {
            listener.exitComputeStatement(this);
        }
    };
    // @Override
    ComputeStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitComputeStatement) {
            return visitor.visitComputeStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ComputeStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ComputeStatementContext = ComputeStatementContext;
var ComputeStoreContext = /** @class */ (function (_super) {
    __extends(ComputeStoreContext, _super);
    function ComputeStoreContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ComputeStoreContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    ComputeStoreContext.prototype.ROUNDED = function () { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); };
    Object.defineProperty(ComputeStoreContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_computeStore; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ComputeStoreContext.prototype.enterRule = function (listener) {
        if (listener.enterComputeStore) {
            listener.enterComputeStore(this);
        }
    };
    // @Override
    ComputeStoreContext.prototype.exitRule = function (listener) {
        if (listener.exitComputeStore) {
            listener.exitComputeStore(this);
        }
    };
    // @Override
    ComputeStoreContext.prototype.accept = function (visitor) {
        if (visitor.visitComputeStore) {
            return visitor.visitComputeStore(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ComputeStoreContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ComputeStoreContext = ComputeStoreContext;
var ContinueStatementContext = /** @class */ (function (_super) {
    __extends(ContinueStatementContext, _super);
    function ContinueStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ContinueStatementContext.prototype.CONTINUE = function () { return this.getToken(Cobol85Parser.CONTINUE, 0); };
    Object.defineProperty(ContinueStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_continueStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ContinueStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterContinueStatement) {
            listener.enterContinueStatement(this);
        }
    };
    // @Override
    ContinueStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitContinueStatement) {
            listener.exitContinueStatement(this);
        }
    };
    // @Override
    ContinueStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitContinueStatement) {
            return visitor.visitContinueStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ContinueStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ContinueStatementContext = ContinueStatementContext;
var DeleteStatementContext = /** @class */ (function (_super) {
    __extends(DeleteStatementContext, _super);
    function DeleteStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DeleteStatementContext.prototype.DELETE = function () { return this.getToken(Cobol85Parser.DELETE, 0); };
    DeleteStatementContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    DeleteStatementContext.prototype.RECORD = function () { return this.tryGetToken(Cobol85Parser.RECORD, 0); };
    DeleteStatementContext.prototype.invalidKeyPhrase = function () {
        return this.tryGetRuleContext(0, InvalidKeyPhraseContext);
    };
    DeleteStatementContext.prototype.notInvalidKeyPhrase = function () {
        return this.tryGetRuleContext(0, NotInvalidKeyPhraseContext);
    };
    DeleteStatementContext.prototype.END_DELETE = function () { return this.tryGetToken(Cobol85Parser.END_DELETE, 0); };
    Object.defineProperty(DeleteStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_deleteStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DeleteStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterDeleteStatement) {
            listener.enterDeleteStatement(this);
        }
    };
    // @Override
    DeleteStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitDeleteStatement) {
            listener.exitDeleteStatement(this);
        }
    };
    // @Override
    DeleteStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DeleteStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DeleteStatementContext = DeleteStatementContext;
var DisableStatementContext = /** @class */ (function (_super) {
    __extends(DisableStatementContext, _super);
    function DisableStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DisableStatementContext.prototype.DISABLE = function () { return this.getToken(Cobol85Parser.DISABLE, 0); };
    DisableStatementContext.prototype.cdName = function () {
        return this.getRuleContext(0, CdNameContext);
    };
    DisableStatementContext.prototype.KEY = function () { return this.getToken(Cobol85Parser.KEY, 0); };
    DisableStatementContext.prototype.INPUT = function () { return this.tryGetToken(Cobol85Parser.INPUT, 0); };
    DisableStatementContext.prototype.I_O = function () { return this.tryGetToken(Cobol85Parser.I_O, 0); };
    DisableStatementContext.prototype.TERMINAL = function () { return this.tryGetToken(Cobol85Parser.TERMINAL, 0); };
    DisableStatementContext.prototype.OUTPUT = function () { return this.tryGetToken(Cobol85Parser.OUTPUT, 0); };
    DisableStatementContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    DisableStatementContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    DisableStatementContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(DisableStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_disableStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DisableStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterDisableStatement) {
            listener.enterDisableStatement(this);
        }
    };
    // @Override
    DisableStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitDisableStatement) {
            listener.exitDisableStatement(this);
        }
    };
    // @Override
    DisableStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitDisableStatement) {
            return visitor.visitDisableStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DisableStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DisableStatementContext = DisableStatementContext;
var DisplayStatementContext = /** @class */ (function (_super) {
    __extends(DisplayStatementContext, _super);
    function DisplayStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DisplayStatementContext.prototype.DISPLAY = function () { return this.getToken(Cobol85Parser.DISPLAY, 0); };
    DisplayStatementContext.prototype.displayOperand = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DisplayOperandContext);
        }
        else {
            return this.getRuleContext(i, DisplayOperandContext);
        }
    };
    DisplayStatementContext.prototype.displayAt = function () {
        return this.tryGetRuleContext(0, DisplayAtContext);
    };
    DisplayStatementContext.prototype.displayUpon = function () {
        return this.tryGetRuleContext(0, DisplayUponContext);
    };
    DisplayStatementContext.prototype.displayWith = function () {
        return this.tryGetRuleContext(0, DisplayWithContext);
    };
    Object.defineProperty(DisplayStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_displayStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DisplayStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterDisplayStatement) {
            listener.enterDisplayStatement(this);
        }
    };
    // @Override
    DisplayStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitDisplayStatement) {
            listener.exitDisplayStatement(this);
        }
    };
    // @Override
    DisplayStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitDisplayStatement) {
            return visitor.visitDisplayStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DisplayStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DisplayStatementContext = DisplayStatementContext;
var DisplayOperandContext = /** @class */ (function (_super) {
    __extends(DisplayOperandContext, _super);
    function DisplayOperandContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DisplayOperandContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    DisplayOperandContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(DisplayOperandContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_displayOperand; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DisplayOperandContext.prototype.enterRule = function (listener) {
        if (listener.enterDisplayOperand) {
            listener.enterDisplayOperand(this);
        }
    };
    // @Override
    DisplayOperandContext.prototype.exitRule = function (listener) {
        if (listener.exitDisplayOperand) {
            listener.exitDisplayOperand(this);
        }
    };
    // @Override
    DisplayOperandContext.prototype.accept = function (visitor) {
        if (visitor.visitDisplayOperand) {
            return visitor.visitDisplayOperand(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DisplayOperandContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DisplayOperandContext = DisplayOperandContext;
var DisplayAtContext = /** @class */ (function (_super) {
    __extends(DisplayAtContext, _super);
    function DisplayAtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DisplayAtContext.prototype.AT = function () { return this.getToken(Cobol85Parser.AT, 0); };
    DisplayAtContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    DisplayAtContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(DisplayAtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_displayAt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DisplayAtContext.prototype.enterRule = function (listener) {
        if (listener.enterDisplayAt) {
            listener.enterDisplayAt(this);
        }
    };
    // @Override
    DisplayAtContext.prototype.exitRule = function (listener) {
        if (listener.exitDisplayAt) {
            listener.exitDisplayAt(this);
        }
    };
    // @Override
    DisplayAtContext.prototype.accept = function (visitor) {
        if (visitor.visitDisplayAt) {
            return visitor.visitDisplayAt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DisplayAtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DisplayAtContext = DisplayAtContext;
var DisplayUponContext = /** @class */ (function (_super) {
    __extends(DisplayUponContext, _super);
    function DisplayUponContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DisplayUponContext.prototype.UPON = function () { return this.getToken(Cobol85Parser.UPON, 0); };
    DisplayUponContext.prototype.mnemonicName = function () {
        return this.tryGetRuleContext(0, MnemonicNameContext);
    };
    DisplayUponContext.prototype.environmentName = function () {
        return this.tryGetRuleContext(0, EnvironmentNameContext);
    };
    Object.defineProperty(DisplayUponContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_displayUpon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DisplayUponContext.prototype.enterRule = function (listener) {
        if (listener.enterDisplayUpon) {
            listener.enterDisplayUpon(this);
        }
    };
    // @Override
    DisplayUponContext.prototype.exitRule = function (listener) {
        if (listener.exitDisplayUpon) {
            listener.exitDisplayUpon(this);
        }
    };
    // @Override
    DisplayUponContext.prototype.accept = function (visitor) {
        if (visitor.visitDisplayUpon) {
            return visitor.visitDisplayUpon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DisplayUponContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DisplayUponContext = DisplayUponContext;
var DisplayWithContext = /** @class */ (function (_super) {
    __extends(DisplayWithContext, _super);
    function DisplayWithContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DisplayWithContext.prototype.NO = function () { return this.getToken(Cobol85Parser.NO, 0); };
    DisplayWithContext.prototype.ADVANCING = function () { return this.getToken(Cobol85Parser.ADVANCING, 0); };
    DisplayWithContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(DisplayWithContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_displayWith; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DisplayWithContext.prototype.enterRule = function (listener) {
        if (listener.enterDisplayWith) {
            listener.enterDisplayWith(this);
        }
    };
    // @Override
    DisplayWithContext.prototype.exitRule = function (listener) {
        if (listener.exitDisplayWith) {
            listener.exitDisplayWith(this);
        }
    };
    // @Override
    DisplayWithContext.prototype.accept = function (visitor) {
        if (visitor.visitDisplayWith) {
            return visitor.visitDisplayWith(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DisplayWithContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DisplayWithContext = DisplayWithContext;
var DivideStatementContext = /** @class */ (function (_super) {
    __extends(DivideStatementContext, _super);
    function DivideStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DivideStatementContext.prototype.DIVIDE = function () { return this.getToken(Cobol85Parser.DIVIDE, 0); };
    DivideStatementContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    DivideStatementContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    DivideStatementContext.prototype.divideIntoStatement = function () {
        return this.tryGetRuleContext(0, DivideIntoStatementContext);
    };
    DivideStatementContext.prototype.divideIntoGivingStatement = function () {
        return this.tryGetRuleContext(0, DivideIntoGivingStatementContext);
    };
    DivideStatementContext.prototype.divideByGivingStatement = function () {
        return this.tryGetRuleContext(0, DivideByGivingStatementContext);
    };
    DivideStatementContext.prototype.divideRemainder = function () {
        return this.tryGetRuleContext(0, DivideRemainderContext);
    };
    DivideStatementContext.prototype.onSizeErrorPhrase = function () {
        return this.tryGetRuleContext(0, OnSizeErrorPhraseContext);
    };
    DivideStatementContext.prototype.notOnSizeErrorPhrase = function () {
        return this.tryGetRuleContext(0, NotOnSizeErrorPhraseContext);
    };
    DivideStatementContext.prototype.END_DIVIDE = function () { return this.tryGetToken(Cobol85Parser.END_DIVIDE, 0); };
    Object.defineProperty(DivideStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_divideStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DivideStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterDivideStatement) {
            listener.enterDivideStatement(this);
        }
    };
    // @Override
    DivideStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitDivideStatement) {
            listener.exitDivideStatement(this);
        }
    };
    // @Override
    DivideStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitDivideStatement) {
            return visitor.visitDivideStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DivideStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DivideStatementContext = DivideStatementContext;
var DivideIntoStatementContext = /** @class */ (function (_super) {
    __extends(DivideIntoStatementContext, _super);
    function DivideIntoStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DivideIntoStatementContext.prototype.INTO = function () { return this.getToken(Cobol85Parser.INTO, 0); };
    DivideIntoStatementContext.prototype.divideInto = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DivideIntoContext);
        }
        else {
            return this.getRuleContext(i, DivideIntoContext);
        }
    };
    Object.defineProperty(DivideIntoStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_divideIntoStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DivideIntoStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterDivideIntoStatement) {
            listener.enterDivideIntoStatement(this);
        }
    };
    // @Override
    DivideIntoStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitDivideIntoStatement) {
            listener.exitDivideIntoStatement(this);
        }
    };
    // @Override
    DivideIntoStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitDivideIntoStatement) {
            return visitor.visitDivideIntoStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DivideIntoStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DivideIntoStatementContext = DivideIntoStatementContext;
var DivideIntoGivingStatementContext = /** @class */ (function (_super) {
    __extends(DivideIntoGivingStatementContext, _super);
    function DivideIntoGivingStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DivideIntoGivingStatementContext.prototype.INTO = function () { return this.getToken(Cobol85Parser.INTO, 0); };
    DivideIntoGivingStatementContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    DivideIntoGivingStatementContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    DivideIntoGivingStatementContext.prototype.divideGivingPhrase = function () {
        return this.tryGetRuleContext(0, DivideGivingPhraseContext);
    };
    Object.defineProperty(DivideIntoGivingStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_divideIntoGivingStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DivideIntoGivingStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterDivideIntoGivingStatement) {
            listener.enterDivideIntoGivingStatement(this);
        }
    };
    // @Override
    DivideIntoGivingStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitDivideIntoGivingStatement) {
            listener.exitDivideIntoGivingStatement(this);
        }
    };
    // @Override
    DivideIntoGivingStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitDivideIntoGivingStatement) {
            return visitor.visitDivideIntoGivingStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DivideIntoGivingStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DivideIntoGivingStatementContext = DivideIntoGivingStatementContext;
var DivideByGivingStatementContext = /** @class */ (function (_super) {
    __extends(DivideByGivingStatementContext, _super);
    function DivideByGivingStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DivideByGivingStatementContext.prototype.BY = function () { return this.getToken(Cobol85Parser.BY, 0); };
    DivideByGivingStatementContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    DivideByGivingStatementContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    DivideByGivingStatementContext.prototype.divideGivingPhrase = function () {
        return this.tryGetRuleContext(0, DivideGivingPhraseContext);
    };
    Object.defineProperty(DivideByGivingStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_divideByGivingStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DivideByGivingStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterDivideByGivingStatement) {
            listener.enterDivideByGivingStatement(this);
        }
    };
    // @Override
    DivideByGivingStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitDivideByGivingStatement) {
            listener.exitDivideByGivingStatement(this);
        }
    };
    // @Override
    DivideByGivingStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitDivideByGivingStatement) {
            return visitor.visitDivideByGivingStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DivideByGivingStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DivideByGivingStatementContext = DivideByGivingStatementContext;
var DivideGivingPhraseContext = /** @class */ (function (_super) {
    __extends(DivideGivingPhraseContext, _super);
    function DivideGivingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DivideGivingPhraseContext.prototype.GIVING = function () { return this.getToken(Cobol85Parser.GIVING, 0); };
    DivideGivingPhraseContext.prototype.divideGiving = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DivideGivingContext);
        }
        else {
            return this.getRuleContext(i, DivideGivingContext);
        }
    };
    Object.defineProperty(DivideGivingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_divideGivingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DivideGivingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterDivideGivingPhrase) {
            listener.enterDivideGivingPhrase(this);
        }
    };
    // @Override
    DivideGivingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitDivideGivingPhrase) {
            listener.exitDivideGivingPhrase(this);
        }
    };
    // @Override
    DivideGivingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitDivideGivingPhrase) {
            return visitor.visitDivideGivingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DivideGivingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DivideGivingPhraseContext = DivideGivingPhraseContext;
var DivideIntoContext = /** @class */ (function (_super) {
    __extends(DivideIntoContext, _super);
    function DivideIntoContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DivideIntoContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    DivideIntoContext.prototype.ROUNDED = function () { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); };
    Object.defineProperty(DivideIntoContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_divideInto; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DivideIntoContext.prototype.enterRule = function (listener) {
        if (listener.enterDivideInto) {
            listener.enterDivideInto(this);
        }
    };
    // @Override
    DivideIntoContext.prototype.exitRule = function (listener) {
        if (listener.exitDivideInto) {
            listener.exitDivideInto(this);
        }
    };
    // @Override
    DivideIntoContext.prototype.accept = function (visitor) {
        if (visitor.visitDivideInto) {
            return visitor.visitDivideInto(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DivideIntoContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DivideIntoContext = DivideIntoContext;
var DivideGivingContext = /** @class */ (function (_super) {
    __extends(DivideGivingContext, _super);
    function DivideGivingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DivideGivingContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    DivideGivingContext.prototype.ROUNDED = function () { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); };
    Object.defineProperty(DivideGivingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_divideGiving; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DivideGivingContext.prototype.enterRule = function (listener) {
        if (listener.enterDivideGiving) {
            listener.enterDivideGiving(this);
        }
    };
    // @Override
    DivideGivingContext.prototype.exitRule = function (listener) {
        if (listener.exitDivideGiving) {
            listener.exitDivideGiving(this);
        }
    };
    // @Override
    DivideGivingContext.prototype.accept = function (visitor) {
        if (visitor.visitDivideGiving) {
            return visitor.visitDivideGiving(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DivideGivingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DivideGivingContext = DivideGivingContext;
var DivideRemainderContext = /** @class */ (function (_super) {
    __extends(DivideRemainderContext, _super);
    function DivideRemainderContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DivideRemainderContext.prototype.REMAINDER = function () { return this.getToken(Cobol85Parser.REMAINDER, 0); };
    DivideRemainderContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(DivideRemainderContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_divideRemainder; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DivideRemainderContext.prototype.enterRule = function (listener) {
        if (listener.enterDivideRemainder) {
            listener.enterDivideRemainder(this);
        }
    };
    // @Override
    DivideRemainderContext.prototype.exitRule = function (listener) {
        if (listener.exitDivideRemainder) {
            listener.exitDivideRemainder(this);
        }
    };
    // @Override
    DivideRemainderContext.prototype.accept = function (visitor) {
        if (visitor.visitDivideRemainder) {
            return visitor.visitDivideRemainder(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DivideRemainderContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DivideRemainderContext = DivideRemainderContext;
var EnableStatementContext = /** @class */ (function (_super) {
    __extends(EnableStatementContext, _super);
    function EnableStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnableStatementContext.prototype.ENABLE = function () { return this.getToken(Cobol85Parser.ENABLE, 0); };
    EnableStatementContext.prototype.cdName = function () {
        return this.getRuleContext(0, CdNameContext);
    };
    EnableStatementContext.prototype.KEY = function () { return this.getToken(Cobol85Parser.KEY, 0); };
    EnableStatementContext.prototype.INPUT = function () { return this.tryGetToken(Cobol85Parser.INPUT, 0); };
    EnableStatementContext.prototype.I_O = function () { return this.tryGetToken(Cobol85Parser.I_O, 0); };
    EnableStatementContext.prototype.TERMINAL = function () { return this.tryGetToken(Cobol85Parser.TERMINAL, 0); };
    EnableStatementContext.prototype.OUTPUT = function () { return this.tryGetToken(Cobol85Parser.OUTPUT, 0); };
    EnableStatementContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    EnableStatementContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    EnableStatementContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(EnableStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_enableStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnableStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterEnableStatement) {
            listener.enterEnableStatement(this);
        }
    };
    // @Override
    EnableStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitEnableStatement) {
            listener.exitEnableStatement(this);
        }
    };
    // @Override
    EnableStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitEnableStatement) {
            return visitor.visitEnableStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnableStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnableStatementContext = EnableStatementContext;
var EntryStatementContext = /** @class */ (function (_super) {
    __extends(EntryStatementContext, _super);
    function EntryStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EntryStatementContext.prototype.ENTRY = function () { return this.getToken(Cobol85Parser.ENTRY, 0); };
    EntryStatementContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    EntryStatementContext.prototype.USING = function () { return this.tryGetToken(Cobol85Parser.USING, 0); };
    EntryStatementContext.prototype.identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    };
    Object.defineProperty(EntryStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_entryStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EntryStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterEntryStatement) {
            listener.enterEntryStatement(this);
        }
    };
    // @Override
    EntryStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitEntryStatement) {
            listener.exitEntryStatement(this);
        }
    };
    // @Override
    EntryStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitEntryStatement) {
            return visitor.visitEntryStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EntryStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EntryStatementContext = EntryStatementContext;
var EvaluateStatementContext = /** @class */ (function (_super) {
    __extends(EvaluateStatementContext, _super);
    function EvaluateStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EvaluateStatementContext.prototype.EVALUATE = function () { return this.getToken(Cobol85Parser.EVALUATE, 0); };
    EvaluateStatementContext.prototype.evaluateSelect = function () {
        return this.getRuleContext(0, EvaluateSelectContext);
    };
    EvaluateStatementContext.prototype.evaluateAlsoSelect = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EvaluateAlsoSelectContext);
        }
        else {
            return this.getRuleContext(i, EvaluateAlsoSelectContext);
        }
    };
    EvaluateStatementContext.prototype.evaluateWhenPhrase = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EvaluateWhenPhraseContext);
        }
        else {
            return this.getRuleContext(i, EvaluateWhenPhraseContext);
        }
    };
    EvaluateStatementContext.prototype.evaluateWhenOther = function () {
        return this.tryGetRuleContext(0, EvaluateWhenOtherContext);
    };
    EvaluateStatementContext.prototype.END_EVALUATE = function () { return this.tryGetToken(Cobol85Parser.END_EVALUATE, 0); };
    Object.defineProperty(EvaluateStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_evaluateStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EvaluateStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterEvaluateStatement) {
            listener.enterEvaluateStatement(this);
        }
    };
    // @Override
    EvaluateStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitEvaluateStatement) {
            listener.exitEvaluateStatement(this);
        }
    };
    // @Override
    EvaluateStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitEvaluateStatement) {
            return visitor.visitEvaluateStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EvaluateStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EvaluateStatementContext = EvaluateStatementContext;
var EvaluateSelectContext = /** @class */ (function (_super) {
    __extends(EvaluateSelectContext, _super);
    function EvaluateSelectContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EvaluateSelectContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    EvaluateSelectContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    EvaluateSelectContext.prototype.arithmeticExpression = function () {
        return this.tryGetRuleContext(0, ArithmeticExpressionContext);
    };
    EvaluateSelectContext.prototype.condition = function () {
        return this.tryGetRuleContext(0, ConditionContext);
    };
    Object.defineProperty(EvaluateSelectContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_evaluateSelect; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EvaluateSelectContext.prototype.enterRule = function (listener) {
        if (listener.enterEvaluateSelect) {
            listener.enterEvaluateSelect(this);
        }
    };
    // @Override
    EvaluateSelectContext.prototype.exitRule = function (listener) {
        if (listener.exitEvaluateSelect) {
            listener.exitEvaluateSelect(this);
        }
    };
    // @Override
    EvaluateSelectContext.prototype.accept = function (visitor) {
        if (visitor.visitEvaluateSelect) {
            return visitor.visitEvaluateSelect(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EvaluateSelectContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EvaluateSelectContext = EvaluateSelectContext;
var EvaluateAlsoSelectContext = /** @class */ (function (_super) {
    __extends(EvaluateAlsoSelectContext, _super);
    function EvaluateAlsoSelectContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EvaluateAlsoSelectContext.prototype.ALSO = function () { return this.getToken(Cobol85Parser.ALSO, 0); };
    EvaluateAlsoSelectContext.prototype.evaluateSelect = function () {
        return this.getRuleContext(0, EvaluateSelectContext);
    };
    Object.defineProperty(EvaluateAlsoSelectContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_evaluateAlsoSelect; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EvaluateAlsoSelectContext.prototype.enterRule = function (listener) {
        if (listener.enterEvaluateAlsoSelect) {
            listener.enterEvaluateAlsoSelect(this);
        }
    };
    // @Override
    EvaluateAlsoSelectContext.prototype.exitRule = function (listener) {
        if (listener.exitEvaluateAlsoSelect) {
            listener.exitEvaluateAlsoSelect(this);
        }
    };
    // @Override
    EvaluateAlsoSelectContext.prototype.accept = function (visitor) {
        if (visitor.visitEvaluateAlsoSelect) {
            return visitor.visitEvaluateAlsoSelect(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EvaluateAlsoSelectContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EvaluateAlsoSelectContext = EvaluateAlsoSelectContext;
var EvaluateWhenPhraseContext = /** @class */ (function (_super) {
    __extends(EvaluateWhenPhraseContext, _super);
    function EvaluateWhenPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EvaluateWhenPhraseContext.prototype.evaluateWhen = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EvaluateWhenContext);
        }
        else {
            return this.getRuleContext(i, EvaluateWhenContext);
        }
    };
    EvaluateWhenPhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(EvaluateWhenPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_evaluateWhenPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EvaluateWhenPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterEvaluateWhenPhrase) {
            listener.enterEvaluateWhenPhrase(this);
        }
    };
    // @Override
    EvaluateWhenPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitEvaluateWhenPhrase) {
            listener.exitEvaluateWhenPhrase(this);
        }
    };
    // @Override
    EvaluateWhenPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitEvaluateWhenPhrase) {
            return visitor.visitEvaluateWhenPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EvaluateWhenPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EvaluateWhenPhraseContext = EvaluateWhenPhraseContext;
var EvaluateWhenContext = /** @class */ (function (_super) {
    __extends(EvaluateWhenContext, _super);
    function EvaluateWhenContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EvaluateWhenContext.prototype.WHEN = function () { return this.getToken(Cobol85Parser.WHEN, 0); };
    EvaluateWhenContext.prototype.evaluateCondition = function () {
        return this.getRuleContext(0, EvaluateConditionContext);
    };
    EvaluateWhenContext.prototype.evaluateAlsoCondition = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EvaluateAlsoConditionContext);
        }
        else {
            return this.getRuleContext(i, EvaluateAlsoConditionContext);
        }
    };
    Object.defineProperty(EvaluateWhenContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_evaluateWhen; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EvaluateWhenContext.prototype.enterRule = function (listener) {
        if (listener.enterEvaluateWhen) {
            listener.enterEvaluateWhen(this);
        }
    };
    // @Override
    EvaluateWhenContext.prototype.exitRule = function (listener) {
        if (listener.exitEvaluateWhen) {
            listener.exitEvaluateWhen(this);
        }
    };
    // @Override
    EvaluateWhenContext.prototype.accept = function (visitor) {
        if (visitor.visitEvaluateWhen) {
            return visitor.visitEvaluateWhen(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EvaluateWhenContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EvaluateWhenContext = EvaluateWhenContext;
var EvaluateConditionContext = /** @class */ (function (_super) {
    __extends(EvaluateConditionContext, _super);
    function EvaluateConditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EvaluateConditionContext.prototype.ANY = function () { return this.tryGetToken(Cobol85Parser.ANY, 0); };
    EvaluateConditionContext.prototype.evaluateValue = function () {
        return this.tryGetRuleContext(0, EvaluateValueContext);
    };
    EvaluateConditionContext.prototype.NOT = function () { return this.tryGetToken(Cobol85Parser.NOT, 0); };
    EvaluateConditionContext.prototype.evaluateThrough = function () {
        return this.tryGetRuleContext(0, EvaluateThroughContext);
    };
    EvaluateConditionContext.prototype.condition = function () {
        return this.tryGetRuleContext(0, ConditionContext);
    };
    EvaluateConditionContext.prototype.booleanLiteral = function () {
        return this.tryGetRuleContext(0, BooleanLiteralContext);
    };
    Object.defineProperty(EvaluateConditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_evaluateCondition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EvaluateConditionContext.prototype.enterRule = function (listener) {
        if (listener.enterEvaluateCondition) {
            listener.enterEvaluateCondition(this);
        }
    };
    // @Override
    EvaluateConditionContext.prototype.exitRule = function (listener) {
        if (listener.exitEvaluateCondition) {
            listener.exitEvaluateCondition(this);
        }
    };
    // @Override
    EvaluateConditionContext.prototype.accept = function (visitor) {
        if (visitor.visitEvaluateCondition) {
            return visitor.visitEvaluateCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EvaluateConditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EvaluateConditionContext = EvaluateConditionContext;
var EvaluateThroughContext = /** @class */ (function (_super) {
    __extends(EvaluateThroughContext, _super);
    function EvaluateThroughContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EvaluateThroughContext.prototype.evaluateValue = function () {
        return this.getRuleContext(0, EvaluateValueContext);
    };
    EvaluateThroughContext.prototype.THROUGH = function () { return this.tryGetToken(Cobol85Parser.THROUGH, 0); };
    EvaluateThroughContext.prototype.THRU = function () { return this.tryGetToken(Cobol85Parser.THRU, 0); };
    Object.defineProperty(EvaluateThroughContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_evaluateThrough; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EvaluateThroughContext.prototype.enterRule = function (listener) {
        if (listener.enterEvaluateThrough) {
            listener.enterEvaluateThrough(this);
        }
    };
    // @Override
    EvaluateThroughContext.prototype.exitRule = function (listener) {
        if (listener.exitEvaluateThrough) {
            listener.exitEvaluateThrough(this);
        }
    };
    // @Override
    EvaluateThroughContext.prototype.accept = function (visitor) {
        if (visitor.visitEvaluateThrough) {
            return visitor.visitEvaluateThrough(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EvaluateThroughContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EvaluateThroughContext = EvaluateThroughContext;
var EvaluateAlsoConditionContext = /** @class */ (function (_super) {
    __extends(EvaluateAlsoConditionContext, _super);
    function EvaluateAlsoConditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EvaluateAlsoConditionContext.prototype.ALSO = function () { return this.getToken(Cobol85Parser.ALSO, 0); };
    EvaluateAlsoConditionContext.prototype.evaluateCondition = function () {
        return this.getRuleContext(0, EvaluateConditionContext);
    };
    Object.defineProperty(EvaluateAlsoConditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_evaluateAlsoCondition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EvaluateAlsoConditionContext.prototype.enterRule = function (listener) {
        if (listener.enterEvaluateAlsoCondition) {
            listener.enterEvaluateAlsoCondition(this);
        }
    };
    // @Override
    EvaluateAlsoConditionContext.prototype.exitRule = function (listener) {
        if (listener.exitEvaluateAlsoCondition) {
            listener.exitEvaluateAlsoCondition(this);
        }
    };
    // @Override
    EvaluateAlsoConditionContext.prototype.accept = function (visitor) {
        if (visitor.visitEvaluateAlsoCondition) {
            return visitor.visitEvaluateAlsoCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EvaluateAlsoConditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EvaluateAlsoConditionContext = EvaluateAlsoConditionContext;
var EvaluateWhenOtherContext = /** @class */ (function (_super) {
    __extends(EvaluateWhenOtherContext, _super);
    function EvaluateWhenOtherContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EvaluateWhenOtherContext.prototype.WHEN = function () { return this.getToken(Cobol85Parser.WHEN, 0); };
    EvaluateWhenOtherContext.prototype.OTHER = function () { return this.getToken(Cobol85Parser.OTHER, 0); };
    EvaluateWhenOtherContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(EvaluateWhenOtherContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_evaluateWhenOther; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EvaluateWhenOtherContext.prototype.enterRule = function (listener) {
        if (listener.enterEvaluateWhenOther) {
            listener.enterEvaluateWhenOther(this);
        }
    };
    // @Override
    EvaluateWhenOtherContext.prototype.exitRule = function (listener) {
        if (listener.exitEvaluateWhenOther) {
            listener.exitEvaluateWhenOther(this);
        }
    };
    // @Override
    EvaluateWhenOtherContext.prototype.accept = function (visitor) {
        if (visitor.visitEvaluateWhenOther) {
            return visitor.visitEvaluateWhenOther(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EvaluateWhenOtherContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EvaluateWhenOtherContext = EvaluateWhenOtherContext;
var EvaluateValueContext = /** @class */ (function (_super) {
    __extends(EvaluateValueContext, _super);
    function EvaluateValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EvaluateValueContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    EvaluateValueContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    EvaluateValueContext.prototype.arithmeticExpression = function () {
        return this.tryGetRuleContext(0, ArithmeticExpressionContext);
    };
    Object.defineProperty(EvaluateValueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_evaluateValue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EvaluateValueContext.prototype.enterRule = function (listener) {
        if (listener.enterEvaluateValue) {
            listener.enterEvaluateValue(this);
        }
    };
    // @Override
    EvaluateValueContext.prototype.exitRule = function (listener) {
        if (listener.exitEvaluateValue) {
            listener.exitEvaluateValue(this);
        }
    };
    // @Override
    EvaluateValueContext.prototype.accept = function (visitor) {
        if (visitor.visitEvaluateValue) {
            return visitor.visitEvaluateValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EvaluateValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EvaluateValueContext = EvaluateValueContext;
var ExecCicsStatementContext = /** @class */ (function (_super) {
    __extends(ExecCicsStatementContext, _super);
    function ExecCicsStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExecCicsStatementContext.prototype.EXECCICSLINE = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.EXECCICSLINE);
        }
        else {
            return this.getToken(Cobol85Parser.EXECCICSLINE, i);
        }
    };
    Object.defineProperty(ExecCicsStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_execCicsStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExecCicsStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterExecCicsStatement) {
            listener.enterExecCicsStatement(this);
        }
    };
    // @Override
    ExecCicsStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitExecCicsStatement) {
            listener.exitExecCicsStatement(this);
        }
    };
    // @Override
    ExecCicsStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitExecCicsStatement) {
            return visitor.visitExecCicsStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExecCicsStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExecCicsStatementContext = ExecCicsStatementContext;
var ExecSqlStatementContext = /** @class */ (function (_super) {
    __extends(ExecSqlStatementContext, _super);
    function ExecSqlStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExecSqlStatementContext.prototype.EXECSQLLINE = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.EXECSQLLINE);
        }
        else {
            return this.getToken(Cobol85Parser.EXECSQLLINE, i);
        }
    };
    Object.defineProperty(ExecSqlStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_execSqlStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExecSqlStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterExecSqlStatement) {
            listener.enterExecSqlStatement(this);
        }
    };
    // @Override
    ExecSqlStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitExecSqlStatement) {
            listener.exitExecSqlStatement(this);
        }
    };
    // @Override
    ExecSqlStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitExecSqlStatement) {
            return visitor.visitExecSqlStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExecSqlStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExecSqlStatementContext = ExecSqlStatementContext;
var ExecSqlImsStatementContext = /** @class */ (function (_super) {
    __extends(ExecSqlImsStatementContext, _super);
    function ExecSqlImsStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExecSqlImsStatementContext.prototype.EXECSQLIMSLINE = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.EXECSQLIMSLINE);
        }
        else {
            return this.getToken(Cobol85Parser.EXECSQLIMSLINE, i);
        }
    };
    Object.defineProperty(ExecSqlImsStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_execSqlImsStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExecSqlImsStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterExecSqlImsStatement) {
            listener.enterExecSqlImsStatement(this);
        }
    };
    // @Override
    ExecSqlImsStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitExecSqlImsStatement) {
            listener.exitExecSqlImsStatement(this);
        }
    };
    // @Override
    ExecSqlImsStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitExecSqlImsStatement) {
            return visitor.visitExecSqlImsStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExecSqlImsStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExecSqlImsStatementContext = ExecSqlImsStatementContext;
var ExhibitStatementContext = /** @class */ (function (_super) {
    __extends(ExhibitStatementContext, _super);
    function ExhibitStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExhibitStatementContext.prototype.EXHIBIT = function () { return this.getToken(Cobol85Parser.EXHIBIT, 0); };
    ExhibitStatementContext.prototype.NAMED = function () { return this.tryGetToken(Cobol85Parser.NAMED, 0); };
    ExhibitStatementContext.prototype.CHANGED = function () { return this.tryGetToken(Cobol85Parser.CHANGED, 0); };
    ExhibitStatementContext.prototype.exhibitOperand = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExhibitOperandContext);
        }
        else {
            return this.getRuleContext(i, ExhibitOperandContext);
        }
    };
    Object.defineProperty(ExhibitStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_exhibitStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExhibitStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterExhibitStatement) {
            listener.enterExhibitStatement(this);
        }
    };
    // @Override
    ExhibitStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitExhibitStatement) {
            listener.exitExhibitStatement(this);
        }
    };
    // @Override
    ExhibitStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitExhibitStatement) {
            return visitor.visitExhibitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExhibitStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExhibitStatementContext = ExhibitStatementContext;
var ExhibitOperandContext = /** @class */ (function (_super) {
    __extends(ExhibitOperandContext, _super);
    function ExhibitOperandContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExhibitOperandContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ExhibitOperandContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(ExhibitOperandContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_exhibitOperand; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExhibitOperandContext.prototype.enterRule = function (listener) {
        if (listener.enterExhibitOperand) {
            listener.enterExhibitOperand(this);
        }
    };
    // @Override
    ExhibitOperandContext.prototype.exitRule = function (listener) {
        if (listener.exitExhibitOperand) {
            listener.exitExhibitOperand(this);
        }
    };
    // @Override
    ExhibitOperandContext.prototype.accept = function (visitor) {
        if (visitor.visitExhibitOperand) {
            return visitor.visitExhibitOperand(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExhibitOperandContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExhibitOperandContext = ExhibitOperandContext;
var ExitStatementContext = /** @class */ (function (_super) {
    __extends(ExitStatementContext, _super);
    function ExitStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExitStatementContext.prototype.EXIT = function () { return this.getToken(Cobol85Parser.EXIT, 0); };
    ExitStatementContext.prototype.PROGRAM = function () { return this.tryGetToken(Cobol85Parser.PROGRAM, 0); };
    Object.defineProperty(ExitStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_exitStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExitStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterExitStatement) {
            listener.enterExitStatement(this);
        }
    };
    // @Override
    ExitStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitExitStatement) {
            listener.exitExitStatement(this);
        }
    };
    // @Override
    ExitStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitExitStatement) {
            return visitor.visitExitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExitStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExitStatementContext = ExitStatementContext;
var GenerateStatementContext = /** @class */ (function (_super) {
    __extends(GenerateStatementContext, _super);
    function GenerateStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    GenerateStatementContext.prototype.GENERATE = function () { return this.getToken(Cobol85Parser.GENERATE, 0); };
    GenerateStatementContext.prototype.reportName = function () {
        return this.getRuleContext(0, ReportNameContext);
    };
    Object.defineProperty(GenerateStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_generateStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    GenerateStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerateStatement) {
            listener.enterGenerateStatement(this);
        }
    };
    // @Override
    GenerateStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerateStatement) {
            listener.exitGenerateStatement(this);
        }
    };
    // @Override
    GenerateStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerateStatement) {
            return visitor.visitGenerateStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return GenerateStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.GenerateStatementContext = GenerateStatementContext;
var GobackStatementContext = /** @class */ (function (_super) {
    __extends(GobackStatementContext, _super);
    function GobackStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    GobackStatementContext.prototype.GOBACK = function () { return this.getToken(Cobol85Parser.GOBACK, 0); };
    Object.defineProperty(GobackStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_gobackStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    GobackStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterGobackStatement) {
            listener.enterGobackStatement(this);
        }
    };
    // @Override
    GobackStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitGobackStatement) {
            listener.exitGobackStatement(this);
        }
    };
    // @Override
    GobackStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitGobackStatement) {
            return visitor.visitGobackStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return GobackStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.GobackStatementContext = GobackStatementContext;
var GoToStatementContext = /** @class */ (function (_super) {
    __extends(GoToStatementContext, _super);
    function GoToStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    GoToStatementContext.prototype.GO = function () { return this.getToken(Cobol85Parser.GO, 0); };
    GoToStatementContext.prototype.goToStatementSimple = function () {
        return this.tryGetRuleContext(0, GoToStatementSimpleContext);
    };
    GoToStatementContext.prototype.goToDependingOnStatement = function () {
        return this.tryGetRuleContext(0, GoToDependingOnStatementContext);
    };
    GoToStatementContext.prototype.TO = function () { return this.tryGetToken(Cobol85Parser.TO, 0); };
    Object.defineProperty(GoToStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_goToStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    GoToStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterGoToStatement) {
            listener.enterGoToStatement(this);
        }
    };
    // @Override
    GoToStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitGoToStatement) {
            listener.exitGoToStatement(this);
        }
    };
    // @Override
    GoToStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitGoToStatement) {
            return visitor.visitGoToStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return GoToStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.GoToStatementContext = GoToStatementContext;
var GoToStatementSimpleContext = /** @class */ (function (_super) {
    __extends(GoToStatementSimpleContext, _super);
    function GoToStatementSimpleContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    GoToStatementSimpleContext.prototype.procedureName = function () {
        return this.getRuleContext(0, ProcedureNameContext);
    };
    Object.defineProperty(GoToStatementSimpleContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_goToStatementSimple; },
        enumerable: true,
        configurable: true
    });
    // @Override
    GoToStatementSimpleContext.prototype.enterRule = function (listener) {
        if (listener.enterGoToStatementSimple) {
            listener.enterGoToStatementSimple(this);
        }
    };
    // @Override
    GoToStatementSimpleContext.prototype.exitRule = function (listener) {
        if (listener.exitGoToStatementSimple) {
            listener.exitGoToStatementSimple(this);
        }
    };
    // @Override
    GoToStatementSimpleContext.prototype.accept = function (visitor) {
        if (visitor.visitGoToStatementSimple) {
            return visitor.visitGoToStatementSimple(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return GoToStatementSimpleContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.GoToStatementSimpleContext = GoToStatementSimpleContext;
var GoToDependingOnStatementContext = /** @class */ (function (_super) {
    __extends(GoToDependingOnStatementContext, _super);
    function GoToDependingOnStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    GoToDependingOnStatementContext.prototype.MORE_LABELS = function () { return this.tryGetToken(Cobol85Parser.MORE_LABELS, 0); };
    GoToDependingOnStatementContext.prototype.procedureName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureNameContext);
        }
        else {
            return this.getRuleContext(i, ProcedureNameContext);
        }
    };
    GoToDependingOnStatementContext.prototype.DEPENDING = function () { return this.tryGetToken(Cobol85Parser.DEPENDING, 0); };
    GoToDependingOnStatementContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    GoToDependingOnStatementContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    Object.defineProperty(GoToDependingOnStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_goToDependingOnStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    GoToDependingOnStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterGoToDependingOnStatement) {
            listener.enterGoToDependingOnStatement(this);
        }
    };
    // @Override
    GoToDependingOnStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitGoToDependingOnStatement) {
            listener.exitGoToDependingOnStatement(this);
        }
    };
    // @Override
    GoToDependingOnStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitGoToDependingOnStatement) {
            return visitor.visitGoToDependingOnStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return GoToDependingOnStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.GoToDependingOnStatementContext = GoToDependingOnStatementContext;
var IfStatementContext = /** @class */ (function (_super) {
    __extends(IfStatementContext, _super);
    function IfStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IfStatementContext.prototype.IF = function () { return this.getToken(Cobol85Parser.IF, 0); };
    IfStatementContext.prototype.condition = function () {
        return this.getRuleContext(0, ConditionContext);
    };
    IfStatementContext.prototype.ifThen = function () {
        return this.getRuleContext(0, IfThenContext);
    };
    IfStatementContext.prototype.ifElse = function () {
        return this.tryGetRuleContext(0, IfElseContext);
    };
    IfStatementContext.prototype.END_IF = function () { return this.tryGetToken(Cobol85Parser.END_IF, 0); };
    Object.defineProperty(IfStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_ifStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IfStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterIfStatement) {
            listener.enterIfStatement(this);
        }
    };
    // @Override
    IfStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitIfStatement) {
            listener.exitIfStatement(this);
        }
    };
    // @Override
    IfStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IfStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfStatementContext = IfStatementContext;
var IfThenContext = /** @class */ (function (_super) {
    __extends(IfThenContext, _super);
    function IfThenContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IfThenContext.prototype.NEXT = function () { return this.tryGetToken(Cobol85Parser.NEXT, 0); };
    IfThenContext.prototype.SENTENCE = function () { return this.tryGetToken(Cobol85Parser.SENTENCE, 0); };
    IfThenContext.prototype.THEN = function () { return this.tryGetToken(Cobol85Parser.THEN, 0); };
    IfThenContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(IfThenContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_ifThen; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IfThenContext.prototype.enterRule = function (listener) {
        if (listener.enterIfThen) {
            listener.enterIfThen(this);
        }
    };
    // @Override
    IfThenContext.prototype.exitRule = function (listener) {
        if (listener.exitIfThen) {
            listener.exitIfThen(this);
        }
    };
    // @Override
    IfThenContext.prototype.accept = function (visitor) {
        if (visitor.visitIfThen) {
            return visitor.visitIfThen(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IfThenContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfThenContext = IfThenContext;
var IfElseContext = /** @class */ (function (_super) {
    __extends(IfElseContext, _super);
    function IfElseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IfElseContext.prototype.ELSE = function () { return this.getToken(Cobol85Parser.ELSE, 0); };
    IfElseContext.prototype.NEXT = function () { return this.tryGetToken(Cobol85Parser.NEXT, 0); };
    IfElseContext.prototype.SENTENCE = function () { return this.tryGetToken(Cobol85Parser.SENTENCE, 0); };
    IfElseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(IfElseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_ifElse; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IfElseContext.prototype.enterRule = function (listener) {
        if (listener.enterIfElse) {
            listener.enterIfElse(this);
        }
    };
    // @Override
    IfElseContext.prototype.exitRule = function (listener) {
        if (listener.exitIfElse) {
            listener.exitIfElse(this);
        }
    };
    // @Override
    IfElseContext.prototype.accept = function (visitor) {
        if (visitor.visitIfElse) {
            return visitor.visitIfElse(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IfElseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfElseContext = IfElseContext;
var InitializeStatementContext = /** @class */ (function (_super) {
    __extends(InitializeStatementContext, _super);
    function InitializeStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InitializeStatementContext.prototype.INITIALIZE = function () { return this.getToken(Cobol85Parser.INITIALIZE, 0); };
    InitializeStatementContext.prototype.identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    };
    InitializeStatementContext.prototype.initializeReplacingPhrase = function () {
        return this.tryGetRuleContext(0, InitializeReplacingPhraseContext);
    };
    Object.defineProperty(InitializeStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_initializeStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InitializeStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterInitializeStatement) {
            listener.enterInitializeStatement(this);
        }
    };
    // @Override
    InitializeStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitInitializeStatement) {
            listener.exitInitializeStatement(this);
        }
    };
    // @Override
    InitializeStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitInitializeStatement) {
            return visitor.visitInitializeStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InitializeStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InitializeStatementContext = InitializeStatementContext;
var InitializeReplacingPhraseContext = /** @class */ (function (_super) {
    __extends(InitializeReplacingPhraseContext, _super);
    function InitializeReplacingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InitializeReplacingPhraseContext.prototype.REPLACING = function () { return this.getToken(Cobol85Parser.REPLACING, 0); };
    InitializeReplacingPhraseContext.prototype.initializeReplacingBy = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InitializeReplacingByContext);
        }
        else {
            return this.getRuleContext(i, InitializeReplacingByContext);
        }
    };
    Object.defineProperty(InitializeReplacingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_initializeReplacingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InitializeReplacingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterInitializeReplacingPhrase) {
            listener.enterInitializeReplacingPhrase(this);
        }
    };
    // @Override
    InitializeReplacingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitInitializeReplacingPhrase) {
            listener.exitInitializeReplacingPhrase(this);
        }
    };
    // @Override
    InitializeReplacingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitInitializeReplacingPhrase) {
            return visitor.visitInitializeReplacingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InitializeReplacingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InitializeReplacingPhraseContext = InitializeReplacingPhraseContext;
var InitializeReplacingByContext = /** @class */ (function (_super) {
    __extends(InitializeReplacingByContext, _super);
    function InitializeReplacingByContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InitializeReplacingByContext.prototype.BY = function () { return this.getToken(Cobol85Parser.BY, 0); };
    InitializeReplacingByContext.prototype.ALPHABETIC = function () { return this.tryGetToken(Cobol85Parser.ALPHABETIC, 0); };
    InitializeReplacingByContext.prototype.ALPHANUMERIC = function () { return this.tryGetToken(Cobol85Parser.ALPHANUMERIC, 0); };
    InitializeReplacingByContext.prototype.ALPHANUMERIC_EDITED = function () { return this.tryGetToken(Cobol85Parser.ALPHANUMERIC_EDITED, 0); };
    InitializeReplacingByContext.prototype.NATIONAL = function () { return this.tryGetToken(Cobol85Parser.NATIONAL, 0); };
    InitializeReplacingByContext.prototype.NATIONAL_EDITED = function () { return this.tryGetToken(Cobol85Parser.NATIONAL_EDITED, 0); };
    InitializeReplacingByContext.prototype.NUMERIC = function () { return this.tryGetToken(Cobol85Parser.NUMERIC, 0); };
    InitializeReplacingByContext.prototype.NUMERIC_EDITED = function () { return this.tryGetToken(Cobol85Parser.NUMERIC_EDITED, 0); };
    InitializeReplacingByContext.prototype.DBCS = function () { return this.tryGetToken(Cobol85Parser.DBCS, 0); };
    InitializeReplacingByContext.prototype.EGCS = function () { return this.tryGetToken(Cobol85Parser.EGCS, 0); };
    InitializeReplacingByContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    InitializeReplacingByContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    InitializeReplacingByContext.prototype.DATA = function () { return this.tryGetToken(Cobol85Parser.DATA, 0); };
    Object.defineProperty(InitializeReplacingByContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_initializeReplacingBy; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InitializeReplacingByContext.prototype.enterRule = function (listener) {
        if (listener.enterInitializeReplacingBy) {
            listener.enterInitializeReplacingBy(this);
        }
    };
    // @Override
    InitializeReplacingByContext.prototype.exitRule = function (listener) {
        if (listener.exitInitializeReplacingBy) {
            listener.exitInitializeReplacingBy(this);
        }
    };
    // @Override
    InitializeReplacingByContext.prototype.accept = function (visitor) {
        if (visitor.visitInitializeReplacingBy) {
            return visitor.visitInitializeReplacingBy(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InitializeReplacingByContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InitializeReplacingByContext = InitializeReplacingByContext;
var InitiateStatementContext = /** @class */ (function (_super) {
    __extends(InitiateStatementContext, _super);
    function InitiateStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InitiateStatementContext.prototype.INITIATE = function () { return this.getToken(Cobol85Parser.INITIATE, 0); };
    InitiateStatementContext.prototype.reportName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReportNameContext);
        }
        else {
            return this.getRuleContext(i, ReportNameContext);
        }
    };
    Object.defineProperty(InitiateStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_initiateStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InitiateStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterInitiateStatement) {
            listener.enterInitiateStatement(this);
        }
    };
    // @Override
    InitiateStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitInitiateStatement) {
            listener.exitInitiateStatement(this);
        }
    };
    // @Override
    InitiateStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitInitiateStatement) {
            return visitor.visitInitiateStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InitiateStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InitiateStatementContext = InitiateStatementContext;
var InspectStatementContext = /** @class */ (function (_super) {
    __extends(InspectStatementContext, _super);
    function InspectStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectStatementContext.prototype.INSPECT = function () { return this.getToken(Cobol85Parser.INSPECT, 0); };
    InspectStatementContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    InspectStatementContext.prototype.inspectTallyingPhrase = function () {
        return this.tryGetRuleContext(0, InspectTallyingPhraseContext);
    };
    InspectStatementContext.prototype.inspectReplacingPhrase = function () {
        return this.tryGetRuleContext(0, InspectReplacingPhraseContext);
    };
    InspectStatementContext.prototype.inspectTallyingReplacingPhrase = function () {
        return this.tryGetRuleContext(0, InspectTallyingReplacingPhraseContext);
    };
    InspectStatementContext.prototype.inspectConvertingPhrase = function () {
        return this.tryGetRuleContext(0, InspectConvertingPhraseContext);
    };
    Object.defineProperty(InspectStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectStatement) {
            listener.enterInspectStatement(this);
        }
    };
    // @Override
    InspectStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectStatement) {
            listener.exitInspectStatement(this);
        }
    };
    // @Override
    InspectStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectStatement) {
            return visitor.visitInspectStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectStatementContext = InspectStatementContext;
var InspectTallyingPhraseContext = /** @class */ (function (_super) {
    __extends(InspectTallyingPhraseContext, _super);
    function InspectTallyingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectTallyingPhraseContext.prototype.TALLYING = function () { return this.getToken(Cobol85Parser.TALLYING, 0); };
    InspectTallyingPhraseContext.prototype.inspectFor = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectForContext);
        }
        else {
            return this.getRuleContext(i, InspectForContext);
        }
    };
    Object.defineProperty(InspectTallyingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectTallyingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectTallyingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectTallyingPhrase) {
            listener.enterInspectTallyingPhrase(this);
        }
    };
    // @Override
    InspectTallyingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectTallyingPhrase) {
            listener.exitInspectTallyingPhrase(this);
        }
    };
    // @Override
    InspectTallyingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectTallyingPhrase) {
            return visitor.visitInspectTallyingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectTallyingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectTallyingPhraseContext = InspectTallyingPhraseContext;
var InspectReplacingPhraseContext = /** @class */ (function (_super) {
    __extends(InspectReplacingPhraseContext, _super);
    function InspectReplacingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectReplacingPhraseContext.prototype.REPLACING = function () { return this.getToken(Cobol85Parser.REPLACING, 0); };
    InspectReplacingPhraseContext.prototype.inspectReplacingCharacters = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectReplacingCharactersContext);
        }
        else {
            return this.getRuleContext(i, InspectReplacingCharactersContext);
        }
    };
    InspectReplacingPhraseContext.prototype.inspectReplacingAllLeadings = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectReplacingAllLeadingsContext);
        }
        else {
            return this.getRuleContext(i, InspectReplacingAllLeadingsContext);
        }
    };
    Object.defineProperty(InspectReplacingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectReplacingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectReplacingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectReplacingPhrase) {
            listener.enterInspectReplacingPhrase(this);
        }
    };
    // @Override
    InspectReplacingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectReplacingPhrase) {
            listener.exitInspectReplacingPhrase(this);
        }
    };
    // @Override
    InspectReplacingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectReplacingPhrase) {
            return visitor.visitInspectReplacingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectReplacingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectReplacingPhraseContext = InspectReplacingPhraseContext;
var InspectTallyingReplacingPhraseContext = /** @class */ (function (_super) {
    __extends(InspectTallyingReplacingPhraseContext, _super);
    function InspectTallyingReplacingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectTallyingReplacingPhraseContext.prototype.TALLYING = function () { return this.getToken(Cobol85Parser.TALLYING, 0); };
    InspectTallyingReplacingPhraseContext.prototype.inspectFor = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectForContext);
        }
        else {
            return this.getRuleContext(i, InspectForContext);
        }
    };
    InspectTallyingReplacingPhraseContext.prototype.inspectReplacingPhrase = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectReplacingPhraseContext);
        }
        else {
            return this.getRuleContext(i, InspectReplacingPhraseContext);
        }
    };
    Object.defineProperty(InspectTallyingReplacingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectTallyingReplacingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectTallyingReplacingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectTallyingReplacingPhrase) {
            listener.enterInspectTallyingReplacingPhrase(this);
        }
    };
    // @Override
    InspectTallyingReplacingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectTallyingReplacingPhrase) {
            listener.exitInspectTallyingReplacingPhrase(this);
        }
    };
    // @Override
    InspectTallyingReplacingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectTallyingReplacingPhrase) {
            return visitor.visitInspectTallyingReplacingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectTallyingReplacingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectTallyingReplacingPhraseContext = InspectTallyingReplacingPhraseContext;
var InspectConvertingPhraseContext = /** @class */ (function (_super) {
    __extends(InspectConvertingPhraseContext, _super);
    function InspectConvertingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectConvertingPhraseContext.prototype.CONVERTING = function () { return this.getToken(Cobol85Parser.CONVERTING, 0); };
    InspectConvertingPhraseContext.prototype.inspectTo = function () {
        return this.getRuleContext(0, InspectToContext);
    };
    InspectConvertingPhraseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    InspectConvertingPhraseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    InspectConvertingPhraseContext.prototype.inspectBeforeAfter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectBeforeAfterContext);
        }
        else {
            return this.getRuleContext(i, InspectBeforeAfterContext);
        }
    };
    Object.defineProperty(InspectConvertingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectConvertingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectConvertingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectConvertingPhrase) {
            listener.enterInspectConvertingPhrase(this);
        }
    };
    // @Override
    InspectConvertingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectConvertingPhrase) {
            listener.exitInspectConvertingPhrase(this);
        }
    };
    // @Override
    InspectConvertingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectConvertingPhrase) {
            return visitor.visitInspectConvertingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectConvertingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectConvertingPhraseContext = InspectConvertingPhraseContext;
var InspectForContext = /** @class */ (function (_super) {
    __extends(InspectForContext, _super);
    function InspectForContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectForContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    InspectForContext.prototype.FOR = function () { return this.getToken(Cobol85Parser.FOR, 0); };
    InspectForContext.prototype.inspectCharacters = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectCharactersContext);
        }
        else {
            return this.getRuleContext(i, InspectCharactersContext);
        }
    };
    InspectForContext.prototype.inspectAllLeadings = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectAllLeadingsContext);
        }
        else {
            return this.getRuleContext(i, InspectAllLeadingsContext);
        }
    };
    Object.defineProperty(InspectForContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectFor; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectForContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectFor) {
            listener.enterInspectFor(this);
        }
    };
    // @Override
    InspectForContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectFor) {
            listener.exitInspectFor(this);
        }
    };
    // @Override
    InspectForContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectFor) {
            return visitor.visitInspectFor(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectForContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectForContext = InspectForContext;
var InspectCharactersContext = /** @class */ (function (_super) {
    __extends(InspectCharactersContext, _super);
    function InspectCharactersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectCharactersContext.prototype.CHARACTERS = function () { return this.getToken(Cobol85Parser.CHARACTERS, 0); };
    InspectCharactersContext.prototype.inspectBeforeAfter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectBeforeAfterContext);
        }
        else {
            return this.getRuleContext(i, InspectBeforeAfterContext);
        }
    };
    Object.defineProperty(InspectCharactersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectCharacters; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectCharactersContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectCharacters) {
            listener.enterInspectCharacters(this);
        }
    };
    // @Override
    InspectCharactersContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectCharacters) {
            listener.exitInspectCharacters(this);
        }
    };
    // @Override
    InspectCharactersContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectCharacters) {
            return visitor.visitInspectCharacters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectCharactersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectCharactersContext = InspectCharactersContext;
var InspectReplacingCharactersContext = /** @class */ (function (_super) {
    __extends(InspectReplacingCharactersContext, _super);
    function InspectReplacingCharactersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectReplacingCharactersContext.prototype.CHARACTERS = function () { return this.getToken(Cobol85Parser.CHARACTERS, 0); };
    InspectReplacingCharactersContext.prototype.inspectBy = function () {
        return this.getRuleContext(0, InspectByContext);
    };
    InspectReplacingCharactersContext.prototype.inspectBeforeAfter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectBeforeAfterContext);
        }
        else {
            return this.getRuleContext(i, InspectBeforeAfterContext);
        }
    };
    Object.defineProperty(InspectReplacingCharactersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectReplacingCharacters; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectReplacingCharactersContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectReplacingCharacters) {
            listener.enterInspectReplacingCharacters(this);
        }
    };
    // @Override
    InspectReplacingCharactersContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectReplacingCharacters) {
            listener.exitInspectReplacingCharacters(this);
        }
    };
    // @Override
    InspectReplacingCharactersContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectReplacingCharacters) {
            return visitor.visitInspectReplacingCharacters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectReplacingCharactersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectReplacingCharactersContext = InspectReplacingCharactersContext;
var InspectAllLeadingsContext = /** @class */ (function (_super) {
    __extends(InspectAllLeadingsContext, _super);
    function InspectAllLeadingsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectAllLeadingsContext.prototype.ALL = function () { return this.tryGetToken(Cobol85Parser.ALL, 0); };
    InspectAllLeadingsContext.prototype.LEADING = function () { return this.tryGetToken(Cobol85Parser.LEADING, 0); };
    InspectAllLeadingsContext.prototype.inspectAllLeading = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectAllLeadingContext);
        }
        else {
            return this.getRuleContext(i, InspectAllLeadingContext);
        }
    };
    Object.defineProperty(InspectAllLeadingsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectAllLeadings; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectAllLeadingsContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectAllLeadings) {
            listener.enterInspectAllLeadings(this);
        }
    };
    // @Override
    InspectAllLeadingsContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectAllLeadings) {
            listener.exitInspectAllLeadings(this);
        }
    };
    // @Override
    InspectAllLeadingsContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectAllLeadings) {
            return visitor.visitInspectAllLeadings(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectAllLeadingsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectAllLeadingsContext = InspectAllLeadingsContext;
var InspectReplacingAllLeadingsContext = /** @class */ (function (_super) {
    __extends(InspectReplacingAllLeadingsContext, _super);
    function InspectReplacingAllLeadingsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectReplacingAllLeadingsContext.prototype.ALL = function () { return this.tryGetToken(Cobol85Parser.ALL, 0); };
    InspectReplacingAllLeadingsContext.prototype.LEADING = function () { return this.tryGetToken(Cobol85Parser.LEADING, 0); };
    InspectReplacingAllLeadingsContext.prototype.FIRST = function () { return this.tryGetToken(Cobol85Parser.FIRST, 0); };
    InspectReplacingAllLeadingsContext.prototype.inspectReplacingAllLeading = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectReplacingAllLeadingContext);
        }
        else {
            return this.getRuleContext(i, InspectReplacingAllLeadingContext);
        }
    };
    Object.defineProperty(InspectReplacingAllLeadingsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectReplacingAllLeadings; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectReplacingAllLeadingsContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectReplacingAllLeadings) {
            listener.enterInspectReplacingAllLeadings(this);
        }
    };
    // @Override
    InspectReplacingAllLeadingsContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectReplacingAllLeadings) {
            listener.exitInspectReplacingAllLeadings(this);
        }
    };
    // @Override
    InspectReplacingAllLeadingsContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectReplacingAllLeadings) {
            return visitor.visitInspectReplacingAllLeadings(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectReplacingAllLeadingsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectReplacingAllLeadingsContext = InspectReplacingAllLeadingsContext;
var InspectAllLeadingContext = /** @class */ (function (_super) {
    __extends(InspectAllLeadingContext, _super);
    function InspectAllLeadingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectAllLeadingContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    InspectAllLeadingContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    InspectAllLeadingContext.prototype.inspectBeforeAfter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectBeforeAfterContext);
        }
        else {
            return this.getRuleContext(i, InspectBeforeAfterContext);
        }
    };
    Object.defineProperty(InspectAllLeadingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectAllLeading; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectAllLeadingContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectAllLeading) {
            listener.enterInspectAllLeading(this);
        }
    };
    // @Override
    InspectAllLeadingContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectAllLeading) {
            listener.exitInspectAllLeading(this);
        }
    };
    // @Override
    InspectAllLeadingContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectAllLeading) {
            return visitor.visitInspectAllLeading(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectAllLeadingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectAllLeadingContext = InspectAllLeadingContext;
var InspectReplacingAllLeadingContext = /** @class */ (function (_super) {
    __extends(InspectReplacingAllLeadingContext, _super);
    function InspectReplacingAllLeadingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectReplacingAllLeadingContext.prototype.inspectBy = function () {
        return this.getRuleContext(0, InspectByContext);
    };
    InspectReplacingAllLeadingContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    InspectReplacingAllLeadingContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    InspectReplacingAllLeadingContext.prototype.inspectBeforeAfter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InspectBeforeAfterContext);
        }
        else {
            return this.getRuleContext(i, InspectBeforeAfterContext);
        }
    };
    Object.defineProperty(InspectReplacingAllLeadingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectReplacingAllLeading; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectReplacingAllLeadingContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectReplacingAllLeading) {
            listener.enterInspectReplacingAllLeading(this);
        }
    };
    // @Override
    InspectReplacingAllLeadingContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectReplacingAllLeading) {
            listener.exitInspectReplacingAllLeading(this);
        }
    };
    // @Override
    InspectReplacingAllLeadingContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectReplacingAllLeading) {
            return visitor.visitInspectReplacingAllLeading(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectReplacingAllLeadingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectReplacingAllLeadingContext = InspectReplacingAllLeadingContext;
var InspectByContext = /** @class */ (function (_super) {
    __extends(InspectByContext, _super);
    function InspectByContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectByContext.prototype.BY = function () { return this.getToken(Cobol85Parser.BY, 0); };
    InspectByContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    InspectByContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(InspectByContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectBy; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectByContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectBy) {
            listener.enterInspectBy(this);
        }
    };
    // @Override
    InspectByContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectBy) {
            listener.exitInspectBy(this);
        }
    };
    // @Override
    InspectByContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectBy) {
            return visitor.visitInspectBy(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectByContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectByContext = InspectByContext;
var InspectToContext = /** @class */ (function (_super) {
    __extends(InspectToContext, _super);
    function InspectToContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectToContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    InspectToContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    InspectToContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(InspectToContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectTo; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectToContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectTo) {
            listener.enterInspectTo(this);
        }
    };
    // @Override
    InspectToContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectTo) {
            listener.exitInspectTo(this);
        }
    };
    // @Override
    InspectToContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectTo) {
            return visitor.visitInspectTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectToContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectToContext = InspectToContext;
var InspectBeforeAfterContext = /** @class */ (function (_super) {
    __extends(InspectBeforeAfterContext, _super);
    function InspectBeforeAfterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InspectBeforeAfterContext.prototype.BEFORE = function () { return this.tryGetToken(Cobol85Parser.BEFORE, 0); };
    InspectBeforeAfterContext.prototype.AFTER = function () { return this.tryGetToken(Cobol85Parser.AFTER, 0); };
    InspectBeforeAfterContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    InspectBeforeAfterContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    InspectBeforeAfterContext.prototype.INITIAL = function () { return this.tryGetToken(Cobol85Parser.INITIAL, 0); };
    Object.defineProperty(InspectBeforeAfterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inspectBeforeAfter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InspectBeforeAfterContext.prototype.enterRule = function (listener) {
        if (listener.enterInspectBeforeAfter) {
            listener.enterInspectBeforeAfter(this);
        }
    };
    // @Override
    InspectBeforeAfterContext.prototype.exitRule = function (listener) {
        if (listener.exitInspectBeforeAfter) {
            listener.exitInspectBeforeAfter(this);
        }
    };
    // @Override
    InspectBeforeAfterContext.prototype.accept = function (visitor) {
        if (visitor.visitInspectBeforeAfter) {
            return visitor.visitInspectBeforeAfter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InspectBeforeAfterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InspectBeforeAfterContext = InspectBeforeAfterContext;
var MergeStatementContext = /** @class */ (function (_super) {
    __extends(MergeStatementContext, _super);
    function MergeStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MergeStatementContext.prototype.MERGE = function () { return this.getToken(Cobol85Parser.MERGE, 0); };
    MergeStatementContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    MergeStatementContext.prototype.mergeOnKeyClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MergeOnKeyClauseContext);
        }
        else {
            return this.getRuleContext(i, MergeOnKeyClauseContext);
        }
    };
    MergeStatementContext.prototype.mergeCollatingSequencePhrase = function () {
        return this.tryGetRuleContext(0, MergeCollatingSequencePhraseContext);
    };
    MergeStatementContext.prototype.mergeUsing = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MergeUsingContext);
        }
        else {
            return this.getRuleContext(i, MergeUsingContext);
        }
    };
    MergeStatementContext.prototype.mergeOutputProcedurePhrase = function () {
        return this.tryGetRuleContext(0, MergeOutputProcedurePhraseContext);
    };
    MergeStatementContext.prototype.mergeGivingPhrase = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MergeGivingPhraseContext);
        }
        else {
            return this.getRuleContext(i, MergeGivingPhraseContext);
        }
    };
    Object.defineProperty(MergeStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mergeStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MergeStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterMergeStatement) {
            listener.enterMergeStatement(this);
        }
    };
    // @Override
    MergeStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitMergeStatement) {
            listener.exitMergeStatement(this);
        }
    };
    // @Override
    MergeStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitMergeStatement) {
            return visitor.visitMergeStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MergeStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MergeStatementContext = MergeStatementContext;
var MergeOnKeyClauseContext = /** @class */ (function (_super) {
    __extends(MergeOnKeyClauseContext, _super);
    function MergeOnKeyClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MergeOnKeyClauseContext.prototype.ASCENDING = function () { return this.tryGetToken(Cobol85Parser.ASCENDING, 0); };
    MergeOnKeyClauseContext.prototype.DESCENDING = function () { return this.tryGetToken(Cobol85Parser.DESCENDING, 0); };
    MergeOnKeyClauseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    MergeOnKeyClauseContext.prototype.KEY = function () { return this.tryGetToken(Cobol85Parser.KEY, 0); };
    MergeOnKeyClauseContext.prototype.qualifiedDataName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedDataNameContext);
        }
        else {
            return this.getRuleContext(i, QualifiedDataNameContext);
        }
    };
    Object.defineProperty(MergeOnKeyClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mergeOnKeyClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MergeOnKeyClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterMergeOnKeyClause) {
            listener.enterMergeOnKeyClause(this);
        }
    };
    // @Override
    MergeOnKeyClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitMergeOnKeyClause) {
            listener.exitMergeOnKeyClause(this);
        }
    };
    // @Override
    MergeOnKeyClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitMergeOnKeyClause) {
            return visitor.visitMergeOnKeyClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MergeOnKeyClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MergeOnKeyClauseContext = MergeOnKeyClauseContext;
var MergeCollatingSequencePhraseContext = /** @class */ (function (_super) {
    __extends(MergeCollatingSequencePhraseContext, _super);
    function MergeCollatingSequencePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MergeCollatingSequencePhraseContext.prototype.SEQUENCE = function () { return this.getToken(Cobol85Parser.SEQUENCE, 0); };
    MergeCollatingSequencePhraseContext.prototype.COLLATING = function () { return this.tryGetToken(Cobol85Parser.COLLATING, 0); };
    MergeCollatingSequencePhraseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    MergeCollatingSequencePhraseContext.prototype.alphabetName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AlphabetNameContext);
        }
        else {
            return this.getRuleContext(i, AlphabetNameContext);
        }
    };
    MergeCollatingSequencePhraseContext.prototype.mergeCollatingAlphanumeric = function () {
        return this.tryGetRuleContext(0, MergeCollatingAlphanumericContext);
    };
    MergeCollatingSequencePhraseContext.prototype.mergeCollatingNational = function () {
        return this.tryGetRuleContext(0, MergeCollatingNationalContext);
    };
    Object.defineProperty(MergeCollatingSequencePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mergeCollatingSequencePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MergeCollatingSequencePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterMergeCollatingSequencePhrase) {
            listener.enterMergeCollatingSequencePhrase(this);
        }
    };
    // @Override
    MergeCollatingSequencePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitMergeCollatingSequencePhrase) {
            listener.exitMergeCollatingSequencePhrase(this);
        }
    };
    // @Override
    MergeCollatingSequencePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitMergeCollatingSequencePhrase) {
            return visitor.visitMergeCollatingSequencePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MergeCollatingSequencePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MergeCollatingSequencePhraseContext = MergeCollatingSequencePhraseContext;
var MergeCollatingAlphanumericContext = /** @class */ (function (_super) {
    __extends(MergeCollatingAlphanumericContext, _super);
    function MergeCollatingAlphanumericContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MergeCollatingAlphanumericContext.prototype.ALPHANUMERIC = function () { return this.getToken(Cobol85Parser.ALPHANUMERIC, 0); };
    MergeCollatingAlphanumericContext.prototype.IS = function () { return this.getToken(Cobol85Parser.IS, 0); };
    MergeCollatingAlphanumericContext.prototype.alphabetName = function () {
        return this.getRuleContext(0, AlphabetNameContext);
    };
    MergeCollatingAlphanumericContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    Object.defineProperty(MergeCollatingAlphanumericContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mergeCollatingAlphanumeric; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MergeCollatingAlphanumericContext.prototype.enterRule = function (listener) {
        if (listener.enterMergeCollatingAlphanumeric) {
            listener.enterMergeCollatingAlphanumeric(this);
        }
    };
    // @Override
    MergeCollatingAlphanumericContext.prototype.exitRule = function (listener) {
        if (listener.exitMergeCollatingAlphanumeric) {
            listener.exitMergeCollatingAlphanumeric(this);
        }
    };
    // @Override
    MergeCollatingAlphanumericContext.prototype.accept = function (visitor) {
        if (visitor.visitMergeCollatingAlphanumeric) {
            return visitor.visitMergeCollatingAlphanumeric(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MergeCollatingAlphanumericContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MergeCollatingAlphanumericContext = MergeCollatingAlphanumericContext;
var MergeCollatingNationalContext = /** @class */ (function (_super) {
    __extends(MergeCollatingNationalContext, _super);
    function MergeCollatingNationalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MergeCollatingNationalContext.prototype.NATIONAL = function () { return this.getToken(Cobol85Parser.NATIONAL, 0); };
    MergeCollatingNationalContext.prototype.alphabetName = function () {
        return this.getRuleContext(0, AlphabetNameContext);
    };
    MergeCollatingNationalContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    MergeCollatingNationalContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(MergeCollatingNationalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mergeCollatingNational; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MergeCollatingNationalContext.prototype.enterRule = function (listener) {
        if (listener.enterMergeCollatingNational) {
            listener.enterMergeCollatingNational(this);
        }
    };
    // @Override
    MergeCollatingNationalContext.prototype.exitRule = function (listener) {
        if (listener.exitMergeCollatingNational) {
            listener.exitMergeCollatingNational(this);
        }
    };
    // @Override
    MergeCollatingNationalContext.prototype.accept = function (visitor) {
        if (visitor.visitMergeCollatingNational) {
            return visitor.visitMergeCollatingNational(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MergeCollatingNationalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MergeCollatingNationalContext = MergeCollatingNationalContext;
var MergeUsingContext = /** @class */ (function (_super) {
    __extends(MergeUsingContext, _super);
    function MergeUsingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MergeUsingContext.prototype.USING = function () { return this.getToken(Cobol85Parser.USING, 0); };
    MergeUsingContext.prototype.fileName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileNameContext);
        }
        else {
            return this.getRuleContext(i, FileNameContext);
        }
    };
    Object.defineProperty(MergeUsingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mergeUsing; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MergeUsingContext.prototype.enterRule = function (listener) {
        if (listener.enterMergeUsing) {
            listener.enterMergeUsing(this);
        }
    };
    // @Override
    MergeUsingContext.prototype.exitRule = function (listener) {
        if (listener.exitMergeUsing) {
            listener.exitMergeUsing(this);
        }
    };
    // @Override
    MergeUsingContext.prototype.accept = function (visitor) {
        if (visitor.visitMergeUsing) {
            return visitor.visitMergeUsing(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MergeUsingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MergeUsingContext = MergeUsingContext;
var MergeOutputProcedurePhraseContext = /** @class */ (function (_super) {
    __extends(MergeOutputProcedurePhraseContext, _super);
    function MergeOutputProcedurePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MergeOutputProcedurePhraseContext.prototype.OUTPUT = function () { return this.getToken(Cobol85Parser.OUTPUT, 0); };
    MergeOutputProcedurePhraseContext.prototype.PROCEDURE = function () { return this.getToken(Cobol85Parser.PROCEDURE, 0); };
    MergeOutputProcedurePhraseContext.prototype.procedureName = function () {
        return this.getRuleContext(0, ProcedureNameContext);
    };
    MergeOutputProcedurePhraseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    MergeOutputProcedurePhraseContext.prototype.mergeOutputThrough = function () {
        return this.tryGetRuleContext(0, MergeOutputThroughContext);
    };
    Object.defineProperty(MergeOutputProcedurePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mergeOutputProcedurePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MergeOutputProcedurePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterMergeOutputProcedurePhrase) {
            listener.enterMergeOutputProcedurePhrase(this);
        }
    };
    // @Override
    MergeOutputProcedurePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitMergeOutputProcedurePhrase) {
            listener.exitMergeOutputProcedurePhrase(this);
        }
    };
    // @Override
    MergeOutputProcedurePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitMergeOutputProcedurePhrase) {
            return visitor.visitMergeOutputProcedurePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MergeOutputProcedurePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MergeOutputProcedurePhraseContext = MergeOutputProcedurePhraseContext;
var MergeOutputThroughContext = /** @class */ (function (_super) {
    __extends(MergeOutputThroughContext, _super);
    function MergeOutputThroughContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MergeOutputThroughContext.prototype.procedureName = function () {
        return this.getRuleContext(0, ProcedureNameContext);
    };
    MergeOutputThroughContext.prototype.THROUGH = function () { return this.tryGetToken(Cobol85Parser.THROUGH, 0); };
    MergeOutputThroughContext.prototype.THRU = function () { return this.tryGetToken(Cobol85Parser.THRU, 0); };
    Object.defineProperty(MergeOutputThroughContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mergeOutputThrough; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MergeOutputThroughContext.prototype.enterRule = function (listener) {
        if (listener.enterMergeOutputThrough) {
            listener.enterMergeOutputThrough(this);
        }
    };
    // @Override
    MergeOutputThroughContext.prototype.exitRule = function (listener) {
        if (listener.exitMergeOutputThrough) {
            listener.exitMergeOutputThrough(this);
        }
    };
    // @Override
    MergeOutputThroughContext.prototype.accept = function (visitor) {
        if (visitor.visitMergeOutputThrough) {
            return visitor.visitMergeOutputThrough(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MergeOutputThroughContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MergeOutputThroughContext = MergeOutputThroughContext;
var MergeGivingPhraseContext = /** @class */ (function (_super) {
    __extends(MergeGivingPhraseContext, _super);
    function MergeGivingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MergeGivingPhraseContext.prototype.GIVING = function () { return this.getToken(Cobol85Parser.GIVING, 0); };
    MergeGivingPhraseContext.prototype.mergeGiving = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MergeGivingContext);
        }
        else {
            return this.getRuleContext(i, MergeGivingContext);
        }
    };
    Object.defineProperty(MergeGivingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mergeGivingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MergeGivingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterMergeGivingPhrase) {
            listener.enterMergeGivingPhrase(this);
        }
    };
    // @Override
    MergeGivingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitMergeGivingPhrase) {
            listener.exitMergeGivingPhrase(this);
        }
    };
    // @Override
    MergeGivingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitMergeGivingPhrase) {
            return visitor.visitMergeGivingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MergeGivingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MergeGivingPhraseContext = MergeGivingPhraseContext;
var MergeGivingContext = /** @class */ (function (_super) {
    __extends(MergeGivingContext, _super);
    function MergeGivingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MergeGivingContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    MergeGivingContext.prototype.LOCK = function () { return this.tryGetToken(Cobol85Parser.LOCK, 0); };
    MergeGivingContext.prototype.SAVE = function () { return this.tryGetToken(Cobol85Parser.SAVE, 0); };
    MergeGivingContext.prototype.NO = function () { return this.tryGetToken(Cobol85Parser.NO, 0); };
    MergeGivingContext.prototype.REWIND = function () { return this.tryGetToken(Cobol85Parser.REWIND, 0); };
    MergeGivingContext.prototype.CRUNCH = function () { return this.tryGetToken(Cobol85Parser.CRUNCH, 0); };
    MergeGivingContext.prototype.RELEASE = function () { return this.tryGetToken(Cobol85Parser.RELEASE, 0); };
    MergeGivingContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    MergeGivingContext.prototype.REMOVE = function () { return this.tryGetToken(Cobol85Parser.REMOVE, 0); };
    Object.defineProperty(MergeGivingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mergeGiving; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MergeGivingContext.prototype.enterRule = function (listener) {
        if (listener.enterMergeGiving) {
            listener.enterMergeGiving(this);
        }
    };
    // @Override
    MergeGivingContext.prototype.exitRule = function (listener) {
        if (listener.exitMergeGiving) {
            listener.exitMergeGiving(this);
        }
    };
    // @Override
    MergeGivingContext.prototype.accept = function (visitor) {
        if (visitor.visitMergeGiving) {
            return visitor.visitMergeGiving(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MergeGivingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MergeGivingContext = MergeGivingContext;
var MoveStatementContext = /** @class */ (function (_super) {
    __extends(MoveStatementContext, _super);
    function MoveStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MoveStatementContext.prototype.MOVE = function () { return this.getToken(Cobol85Parser.MOVE, 0); };
    MoveStatementContext.prototype.moveToStatement = function () {
        return this.tryGetRuleContext(0, MoveToStatementContext);
    };
    MoveStatementContext.prototype.moveCorrespondingToStatement = function () {
        return this.tryGetRuleContext(0, MoveCorrespondingToStatementContext);
    };
    MoveStatementContext.prototype.ALL = function () { return this.tryGetToken(Cobol85Parser.ALL, 0); };
    Object.defineProperty(MoveStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_moveStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MoveStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterMoveStatement) {
            listener.enterMoveStatement(this);
        }
    };
    // @Override
    MoveStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitMoveStatement) {
            listener.exitMoveStatement(this);
        }
    };
    // @Override
    MoveStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitMoveStatement) {
            return visitor.visitMoveStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MoveStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MoveStatementContext = MoveStatementContext;
var MoveToStatementContext = /** @class */ (function (_super) {
    __extends(MoveToStatementContext, _super);
    function MoveToStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MoveToStatementContext.prototype.moveToSendingArea = function () {
        return this.getRuleContext(0, MoveToSendingAreaContext);
    };
    MoveToStatementContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    MoveToStatementContext.prototype.identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    };
    Object.defineProperty(MoveToStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_moveToStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MoveToStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterMoveToStatement) {
            listener.enterMoveToStatement(this);
        }
    };
    // @Override
    MoveToStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitMoveToStatement) {
            listener.exitMoveToStatement(this);
        }
    };
    // @Override
    MoveToStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitMoveToStatement) {
            return visitor.visitMoveToStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MoveToStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MoveToStatementContext = MoveToStatementContext;
var MoveToSendingAreaContext = /** @class */ (function (_super) {
    __extends(MoveToSendingAreaContext, _super);
    function MoveToSendingAreaContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MoveToSendingAreaContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    MoveToSendingAreaContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(MoveToSendingAreaContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_moveToSendingArea; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MoveToSendingAreaContext.prototype.enterRule = function (listener) {
        if (listener.enterMoveToSendingArea) {
            listener.enterMoveToSendingArea(this);
        }
    };
    // @Override
    MoveToSendingAreaContext.prototype.exitRule = function (listener) {
        if (listener.exitMoveToSendingArea) {
            listener.exitMoveToSendingArea(this);
        }
    };
    // @Override
    MoveToSendingAreaContext.prototype.accept = function (visitor) {
        if (visitor.visitMoveToSendingArea) {
            return visitor.visitMoveToSendingArea(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MoveToSendingAreaContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MoveToSendingAreaContext = MoveToSendingAreaContext;
var MoveCorrespondingToStatementContext = /** @class */ (function (_super) {
    __extends(MoveCorrespondingToStatementContext, _super);
    function MoveCorrespondingToStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MoveCorrespondingToStatementContext.prototype.moveCorrespondingToSendingArea = function () {
        return this.getRuleContext(0, MoveCorrespondingToSendingAreaContext);
    };
    MoveCorrespondingToStatementContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    MoveCorrespondingToStatementContext.prototype.CORRESPONDING = function () { return this.tryGetToken(Cobol85Parser.CORRESPONDING, 0); };
    MoveCorrespondingToStatementContext.prototype.CORR = function () { return this.tryGetToken(Cobol85Parser.CORR, 0); };
    MoveCorrespondingToStatementContext.prototype.identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    };
    Object.defineProperty(MoveCorrespondingToStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_moveCorrespondingToStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MoveCorrespondingToStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterMoveCorrespondingToStatement) {
            listener.enterMoveCorrespondingToStatement(this);
        }
    };
    // @Override
    MoveCorrespondingToStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitMoveCorrespondingToStatement) {
            listener.exitMoveCorrespondingToStatement(this);
        }
    };
    // @Override
    MoveCorrespondingToStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitMoveCorrespondingToStatement) {
            return visitor.visitMoveCorrespondingToStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MoveCorrespondingToStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MoveCorrespondingToStatementContext = MoveCorrespondingToStatementContext;
var MoveCorrespondingToSendingAreaContext = /** @class */ (function (_super) {
    __extends(MoveCorrespondingToSendingAreaContext, _super);
    function MoveCorrespondingToSendingAreaContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MoveCorrespondingToSendingAreaContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(MoveCorrespondingToSendingAreaContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_moveCorrespondingToSendingArea; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MoveCorrespondingToSendingAreaContext.prototype.enterRule = function (listener) {
        if (listener.enterMoveCorrespondingToSendingArea) {
            listener.enterMoveCorrespondingToSendingArea(this);
        }
    };
    // @Override
    MoveCorrespondingToSendingAreaContext.prototype.exitRule = function (listener) {
        if (listener.exitMoveCorrespondingToSendingArea) {
            listener.exitMoveCorrespondingToSendingArea(this);
        }
    };
    // @Override
    MoveCorrespondingToSendingAreaContext.prototype.accept = function (visitor) {
        if (visitor.visitMoveCorrespondingToSendingArea) {
            return visitor.visitMoveCorrespondingToSendingArea(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MoveCorrespondingToSendingAreaContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MoveCorrespondingToSendingAreaContext = MoveCorrespondingToSendingAreaContext;
var MultiplyStatementContext = /** @class */ (function (_super) {
    __extends(MultiplyStatementContext, _super);
    function MultiplyStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultiplyStatementContext.prototype.MULTIPLY = function () { return this.getToken(Cobol85Parser.MULTIPLY, 0); };
    MultiplyStatementContext.prototype.BY = function () { return this.getToken(Cobol85Parser.BY, 0); };
    MultiplyStatementContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    MultiplyStatementContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    MultiplyStatementContext.prototype.multiplyRegular = function () {
        return this.tryGetRuleContext(0, MultiplyRegularContext);
    };
    MultiplyStatementContext.prototype.multiplyGiving = function () {
        return this.tryGetRuleContext(0, MultiplyGivingContext);
    };
    MultiplyStatementContext.prototype.onSizeErrorPhrase = function () {
        return this.tryGetRuleContext(0, OnSizeErrorPhraseContext);
    };
    MultiplyStatementContext.prototype.notOnSizeErrorPhrase = function () {
        return this.tryGetRuleContext(0, NotOnSizeErrorPhraseContext);
    };
    MultiplyStatementContext.prototype.END_MULTIPLY = function () { return this.tryGetToken(Cobol85Parser.END_MULTIPLY, 0); };
    Object.defineProperty(MultiplyStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_multiplyStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultiplyStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterMultiplyStatement) {
            listener.enterMultiplyStatement(this);
        }
    };
    // @Override
    MultiplyStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitMultiplyStatement) {
            listener.exitMultiplyStatement(this);
        }
    };
    // @Override
    MultiplyStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitMultiplyStatement) {
            return visitor.visitMultiplyStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultiplyStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultiplyStatementContext = MultiplyStatementContext;
var MultiplyRegularContext = /** @class */ (function (_super) {
    __extends(MultiplyRegularContext, _super);
    function MultiplyRegularContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultiplyRegularContext.prototype.multiplyRegularOperand = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MultiplyRegularOperandContext);
        }
        else {
            return this.getRuleContext(i, MultiplyRegularOperandContext);
        }
    };
    Object.defineProperty(MultiplyRegularContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_multiplyRegular; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultiplyRegularContext.prototype.enterRule = function (listener) {
        if (listener.enterMultiplyRegular) {
            listener.enterMultiplyRegular(this);
        }
    };
    // @Override
    MultiplyRegularContext.prototype.exitRule = function (listener) {
        if (listener.exitMultiplyRegular) {
            listener.exitMultiplyRegular(this);
        }
    };
    // @Override
    MultiplyRegularContext.prototype.accept = function (visitor) {
        if (visitor.visitMultiplyRegular) {
            return visitor.visitMultiplyRegular(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultiplyRegularContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultiplyRegularContext = MultiplyRegularContext;
var MultiplyRegularOperandContext = /** @class */ (function (_super) {
    __extends(MultiplyRegularOperandContext, _super);
    function MultiplyRegularOperandContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultiplyRegularOperandContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    MultiplyRegularOperandContext.prototype.ROUNDED = function () { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); };
    Object.defineProperty(MultiplyRegularOperandContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_multiplyRegularOperand; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultiplyRegularOperandContext.prototype.enterRule = function (listener) {
        if (listener.enterMultiplyRegularOperand) {
            listener.enterMultiplyRegularOperand(this);
        }
    };
    // @Override
    MultiplyRegularOperandContext.prototype.exitRule = function (listener) {
        if (listener.exitMultiplyRegularOperand) {
            listener.exitMultiplyRegularOperand(this);
        }
    };
    // @Override
    MultiplyRegularOperandContext.prototype.accept = function (visitor) {
        if (visitor.visitMultiplyRegularOperand) {
            return visitor.visitMultiplyRegularOperand(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultiplyRegularOperandContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultiplyRegularOperandContext = MultiplyRegularOperandContext;
var MultiplyGivingContext = /** @class */ (function (_super) {
    __extends(MultiplyGivingContext, _super);
    function MultiplyGivingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultiplyGivingContext.prototype.multiplyGivingOperand = function () {
        return this.getRuleContext(0, MultiplyGivingOperandContext);
    };
    MultiplyGivingContext.prototype.GIVING = function () { return this.getToken(Cobol85Parser.GIVING, 0); };
    MultiplyGivingContext.prototype.multiplyGivingResult = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MultiplyGivingResultContext);
        }
        else {
            return this.getRuleContext(i, MultiplyGivingResultContext);
        }
    };
    Object.defineProperty(MultiplyGivingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_multiplyGiving; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultiplyGivingContext.prototype.enterRule = function (listener) {
        if (listener.enterMultiplyGiving) {
            listener.enterMultiplyGiving(this);
        }
    };
    // @Override
    MultiplyGivingContext.prototype.exitRule = function (listener) {
        if (listener.exitMultiplyGiving) {
            listener.exitMultiplyGiving(this);
        }
    };
    // @Override
    MultiplyGivingContext.prototype.accept = function (visitor) {
        if (visitor.visitMultiplyGiving) {
            return visitor.visitMultiplyGiving(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultiplyGivingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultiplyGivingContext = MultiplyGivingContext;
var MultiplyGivingOperandContext = /** @class */ (function (_super) {
    __extends(MultiplyGivingOperandContext, _super);
    function MultiplyGivingOperandContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultiplyGivingOperandContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    MultiplyGivingOperandContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(MultiplyGivingOperandContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_multiplyGivingOperand; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultiplyGivingOperandContext.prototype.enterRule = function (listener) {
        if (listener.enterMultiplyGivingOperand) {
            listener.enterMultiplyGivingOperand(this);
        }
    };
    // @Override
    MultiplyGivingOperandContext.prototype.exitRule = function (listener) {
        if (listener.exitMultiplyGivingOperand) {
            listener.exitMultiplyGivingOperand(this);
        }
    };
    // @Override
    MultiplyGivingOperandContext.prototype.accept = function (visitor) {
        if (visitor.visitMultiplyGivingOperand) {
            return visitor.visitMultiplyGivingOperand(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultiplyGivingOperandContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultiplyGivingOperandContext = MultiplyGivingOperandContext;
var MultiplyGivingResultContext = /** @class */ (function (_super) {
    __extends(MultiplyGivingResultContext, _super);
    function MultiplyGivingResultContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultiplyGivingResultContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    MultiplyGivingResultContext.prototype.ROUNDED = function () { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); };
    Object.defineProperty(MultiplyGivingResultContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_multiplyGivingResult; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultiplyGivingResultContext.prototype.enterRule = function (listener) {
        if (listener.enterMultiplyGivingResult) {
            listener.enterMultiplyGivingResult(this);
        }
    };
    // @Override
    MultiplyGivingResultContext.prototype.exitRule = function (listener) {
        if (listener.exitMultiplyGivingResult) {
            listener.exitMultiplyGivingResult(this);
        }
    };
    // @Override
    MultiplyGivingResultContext.prototype.accept = function (visitor) {
        if (visitor.visitMultiplyGivingResult) {
            return visitor.visitMultiplyGivingResult(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultiplyGivingResultContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultiplyGivingResultContext = MultiplyGivingResultContext;
var OpenStatementContext = /** @class */ (function (_super) {
    __extends(OpenStatementContext, _super);
    function OpenStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OpenStatementContext.prototype.OPEN = function () { return this.getToken(Cobol85Parser.OPEN, 0); };
    OpenStatementContext.prototype.openInputStatement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OpenInputStatementContext);
        }
        else {
            return this.getRuleContext(i, OpenInputStatementContext);
        }
    };
    OpenStatementContext.prototype.openOutputStatement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OpenOutputStatementContext);
        }
        else {
            return this.getRuleContext(i, OpenOutputStatementContext);
        }
    };
    OpenStatementContext.prototype.openIOStatement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OpenIOStatementContext);
        }
        else {
            return this.getRuleContext(i, OpenIOStatementContext);
        }
    };
    OpenStatementContext.prototype.openExtendStatement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OpenExtendStatementContext);
        }
        else {
            return this.getRuleContext(i, OpenExtendStatementContext);
        }
    };
    Object.defineProperty(OpenStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_openStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OpenStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterOpenStatement) {
            listener.enterOpenStatement(this);
        }
    };
    // @Override
    OpenStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitOpenStatement) {
            listener.exitOpenStatement(this);
        }
    };
    // @Override
    OpenStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitOpenStatement) {
            return visitor.visitOpenStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OpenStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OpenStatementContext = OpenStatementContext;
var OpenInputStatementContext = /** @class */ (function (_super) {
    __extends(OpenInputStatementContext, _super);
    function OpenInputStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OpenInputStatementContext.prototype.INPUT = function () { return this.getToken(Cobol85Parser.INPUT, 0); };
    OpenInputStatementContext.prototype.openInput = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OpenInputContext);
        }
        else {
            return this.getRuleContext(i, OpenInputContext);
        }
    };
    Object.defineProperty(OpenInputStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_openInputStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OpenInputStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterOpenInputStatement) {
            listener.enterOpenInputStatement(this);
        }
    };
    // @Override
    OpenInputStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitOpenInputStatement) {
            listener.exitOpenInputStatement(this);
        }
    };
    // @Override
    OpenInputStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitOpenInputStatement) {
            return visitor.visitOpenInputStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OpenInputStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OpenInputStatementContext = OpenInputStatementContext;
var OpenInputContext = /** @class */ (function (_super) {
    __extends(OpenInputContext, _super);
    function OpenInputContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OpenInputContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    OpenInputContext.prototype.REVERSED = function () { return this.tryGetToken(Cobol85Parser.REVERSED, 0); };
    OpenInputContext.prototype.NO = function () { return this.tryGetToken(Cobol85Parser.NO, 0); };
    OpenInputContext.prototype.REWIND = function () { return this.tryGetToken(Cobol85Parser.REWIND, 0); };
    OpenInputContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(OpenInputContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_openInput; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OpenInputContext.prototype.enterRule = function (listener) {
        if (listener.enterOpenInput) {
            listener.enterOpenInput(this);
        }
    };
    // @Override
    OpenInputContext.prototype.exitRule = function (listener) {
        if (listener.exitOpenInput) {
            listener.exitOpenInput(this);
        }
    };
    // @Override
    OpenInputContext.prototype.accept = function (visitor) {
        if (visitor.visitOpenInput) {
            return visitor.visitOpenInput(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OpenInputContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OpenInputContext = OpenInputContext;
var OpenOutputStatementContext = /** @class */ (function (_super) {
    __extends(OpenOutputStatementContext, _super);
    function OpenOutputStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OpenOutputStatementContext.prototype.OUTPUT = function () { return this.getToken(Cobol85Parser.OUTPUT, 0); };
    OpenOutputStatementContext.prototype.openOutput = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OpenOutputContext);
        }
        else {
            return this.getRuleContext(i, OpenOutputContext);
        }
    };
    Object.defineProperty(OpenOutputStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_openOutputStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OpenOutputStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterOpenOutputStatement) {
            listener.enterOpenOutputStatement(this);
        }
    };
    // @Override
    OpenOutputStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitOpenOutputStatement) {
            listener.exitOpenOutputStatement(this);
        }
    };
    // @Override
    OpenOutputStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitOpenOutputStatement) {
            return visitor.visitOpenOutputStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OpenOutputStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OpenOutputStatementContext = OpenOutputStatementContext;
var OpenOutputContext = /** @class */ (function (_super) {
    __extends(OpenOutputContext, _super);
    function OpenOutputContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OpenOutputContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    OpenOutputContext.prototype.NO = function () { return this.tryGetToken(Cobol85Parser.NO, 0); };
    OpenOutputContext.prototype.REWIND = function () { return this.tryGetToken(Cobol85Parser.REWIND, 0); };
    OpenOutputContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(OpenOutputContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_openOutput; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OpenOutputContext.prototype.enterRule = function (listener) {
        if (listener.enterOpenOutput) {
            listener.enterOpenOutput(this);
        }
    };
    // @Override
    OpenOutputContext.prototype.exitRule = function (listener) {
        if (listener.exitOpenOutput) {
            listener.exitOpenOutput(this);
        }
    };
    // @Override
    OpenOutputContext.prototype.accept = function (visitor) {
        if (visitor.visitOpenOutput) {
            return visitor.visitOpenOutput(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OpenOutputContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OpenOutputContext = OpenOutputContext;
var OpenIOStatementContext = /** @class */ (function (_super) {
    __extends(OpenIOStatementContext, _super);
    function OpenIOStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OpenIOStatementContext.prototype.I_O = function () { return this.getToken(Cobol85Parser.I_O, 0); };
    OpenIOStatementContext.prototype.fileName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileNameContext);
        }
        else {
            return this.getRuleContext(i, FileNameContext);
        }
    };
    Object.defineProperty(OpenIOStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_openIOStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OpenIOStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterOpenIOStatement) {
            listener.enterOpenIOStatement(this);
        }
    };
    // @Override
    OpenIOStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitOpenIOStatement) {
            listener.exitOpenIOStatement(this);
        }
    };
    // @Override
    OpenIOStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitOpenIOStatement) {
            return visitor.visitOpenIOStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OpenIOStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OpenIOStatementContext = OpenIOStatementContext;
var OpenExtendStatementContext = /** @class */ (function (_super) {
    __extends(OpenExtendStatementContext, _super);
    function OpenExtendStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OpenExtendStatementContext.prototype.EXTEND = function () { return this.getToken(Cobol85Parser.EXTEND, 0); };
    OpenExtendStatementContext.prototype.fileName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileNameContext);
        }
        else {
            return this.getRuleContext(i, FileNameContext);
        }
    };
    Object.defineProperty(OpenExtendStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_openExtendStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OpenExtendStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterOpenExtendStatement) {
            listener.enterOpenExtendStatement(this);
        }
    };
    // @Override
    OpenExtendStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitOpenExtendStatement) {
            listener.exitOpenExtendStatement(this);
        }
    };
    // @Override
    OpenExtendStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitOpenExtendStatement) {
            return visitor.visitOpenExtendStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OpenExtendStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OpenExtendStatementContext = OpenExtendStatementContext;
var PerformStatementContext = /** @class */ (function (_super) {
    __extends(PerformStatementContext, _super);
    function PerformStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformStatementContext.prototype.PERFORM = function () { return this.getToken(Cobol85Parser.PERFORM, 0); };
    PerformStatementContext.prototype.performInlineStatement = function () {
        return this.tryGetRuleContext(0, PerformInlineStatementContext);
    };
    PerformStatementContext.prototype.performProcedureStatement = function () {
        return this.tryGetRuleContext(0, PerformProcedureStatementContext);
    };
    Object.defineProperty(PerformStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformStatement) {
            listener.enterPerformStatement(this);
        }
    };
    // @Override
    PerformStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformStatement) {
            listener.exitPerformStatement(this);
        }
    };
    // @Override
    PerformStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformStatement) {
            return visitor.visitPerformStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformStatementContext = PerformStatementContext;
var PerformInlineStatementContext = /** @class */ (function (_super) {
    __extends(PerformInlineStatementContext, _super);
    function PerformInlineStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformInlineStatementContext.prototype.END_PERFORM = function () { return this.getToken(Cobol85Parser.END_PERFORM, 0); };
    PerformInlineStatementContext.prototype.performType = function () {
        return this.tryGetRuleContext(0, PerformTypeContext);
    };
    PerformInlineStatementContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(PerformInlineStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performInlineStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformInlineStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformInlineStatement) {
            listener.enterPerformInlineStatement(this);
        }
    };
    // @Override
    PerformInlineStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformInlineStatement) {
            listener.exitPerformInlineStatement(this);
        }
    };
    // @Override
    PerformInlineStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformInlineStatement) {
            return visitor.visitPerformInlineStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformInlineStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformInlineStatementContext = PerformInlineStatementContext;
var PerformProcedureStatementContext = /** @class */ (function (_super) {
    __extends(PerformProcedureStatementContext, _super);
    function PerformProcedureStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformProcedureStatementContext.prototype.procedureName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureNameContext);
        }
        else {
            return this.getRuleContext(i, ProcedureNameContext);
        }
    };
    PerformProcedureStatementContext.prototype.performType = function () {
        return this.tryGetRuleContext(0, PerformTypeContext);
    };
    PerformProcedureStatementContext.prototype.THROUGH = function () { return this.tryGetToken(Cobol85Parser.THROUGH, 0); };
    PerformProcedureStatementContext.prototype.THRU = function () { return this.tryGetToken(Cobol85Parser.THRU, 0); };
    Object.defineProperty(PerformProcedureStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performProcedureStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformProcedureStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformProcedureStatement) {
            listener.enterPerformProcedureStatement(this);
        }
    };
    // @Override
    PerformProcedureStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformProcedureStatement) {
            listener.exitPerformProcedureStatement(this);
        }
    };
    // @Override
    PerformProcedureStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformProcedureStatement) {
            return visitor.visitPerformProcedureStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformProcedureStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformProcedureStatementContext = PerformProcedureStatementContext;
var PerformTypeContext = /** @class */ (function (_super) {
    __extends(PerformTypeContext, _super);
    function PerformTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformTypeContext.prototype.performTimes = function () {
        return this.tryGetRuleContext(0, PerformTimesContext);
    };
    PerformTypeContext.prototype.performUntil = function () {
        return this.tryGetRuleContext(0, PerformUntilContext);
    };
    PerformTypeContext.prototype.performVarying = function () {
        return this.tryGetRuleContext(0, PerformVaryingContext);
    };
    Object.defineProperty(PerformTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformType) {
            listener.enterPerformType(this);
        }
    };
    // @Override
    PerformTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformType) {
            listener.exitPerformType(this);
        }
    };
    // @Override
    PerformTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformType) {
            return visitor.visitPerformType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformTypeContext = PerformTypeContext;
var PerformTimesContext = /** @class */ (function (_super) {
    __extends(PerformTimesContext, _super);
    function PerformTimesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformTimesContext.prototype.TIMES = function () { return this.getToken(Cobol85Parser.TIMES, 0); };
    PerformTimesContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    PerformTimesContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(PerformTimesContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performTimes; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformTimesContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformTimes) {
            listener.enterPerformTimes(this);
        }
    };
    // @Override
    PerformTimesContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformTimes) {
            listener.exitPerformTimes(this);
        }
    };
    // @Override
    PerformTimesContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformTimes) {
            return visitor.visitPerformTimes(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformTimesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformTimesContext = PerformTimesContext;
var PerformUntilContext = /** @class */ (function (_super) {
    __extends(PerformUntilContext, _super);
    function PerformUntilContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformUntilContext.prototype.UNTIL = function () { return this.getToken(Cobol85Parser.UNTIL, 0); };
    PerformUntilContext.prototype.condition = function () {
        return this.getRuleContext(0, ConditionContext);
    };
    PerformUntilContext.prototype.performTestClause = function () {
        return this.tryGetRuleContext(0, PerformTestClauseContext);
    };
    Object.defineProperty(PerformUntilContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performUntil; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformUntilContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformUntil) {
            listener.enterPerformUntil(this);
        }
    };
    // @Override
    PerformUntilContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformUntil) {
            listener.exitPerformUntil(this);
        }
    };
    // @Override
    PerformUntilContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformUntil) {
            return visitor.visitPerformUntil(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformUntilContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformUntilContext = PerformUntilContext;
var PerformVaryingContext = /** @class */ (function (_super) {
    __extends(PerformVaryingContext, _super);
    function PerformVaryingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformVaryingContext.prototype.performTestClause = function () {
        return this.tryGetRuleContext(0, PerformTestClauseContext);
    };
    PerformVaryingContext.prototype.performVaryingClause = function () {
        return this.getRuleContext(0, PerformVaryingClauseContext);
    };
    Object.defineProperty(PerformVaryingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performVarying; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformVaryingContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformVarying) {
            listener.enterPerformVarying(this);
        }
    };
    // @Override
    PerformVaryingContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformVarying) {
            listener.exitPerformVarying(this);
        }
    };
    // @Override
    PerformVaryingContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformVarying) {
            return visitor.visitPerformVarying(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformVaryingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformVaryingContext = PerformVaryingContext;
var PerformVaryingClauseContext = /** @class */ (function (_super) {
    __extends(PerformVaryingClauseContext, _super);
    function PerformVaryingClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformVaryingClauseContext.prototype.VARYING = function () { return this.getToken(Cobol85Parser.VARYING, 0); };
    PerformVaryingClauseContext.prototype.performVaryingPhrase = function () {
        return this.getRuleContext(0, PerformVaryingPhraseContext);
    };
    PerformVaryingClauseContext.prototype.performAfter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PerformAfterContext);
        }
        else {
            return this.getRuleContext(i, PerformAfterContext);
        }
    };
    Object.defineProperty(PerformVaryingClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performVaryingClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformVaryingClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformVaryingClause) {
            listener.enterPerformVaryingClause(this);
        }
    };
    // @Override
    PerformVaryingClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformVaryingClause) {
            listener.exitPerformVaryingClause(this);
        }
    };
    // @Override
    PerformVaryingClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformVaryingClause) {
            return visitor.visitPerformVaryingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformVaryingClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformVaryingClauseContext = PerformVaryingClauseContext;
var PerformVaryingPhraseContext = /** @class */ (function (_super) {
    __extends(PerformVaryingPhraseContext, _super);
    function PerformVaryingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformVaryingPhraseContext.prototype.performFrom = function () {
        return this.getRuleContext(0, PerformFromContext);
    };
    PerformVaryingPhraseContext.prototype.performBy = function () {
        return this.getRuleContext(0, PerformByContext);
    };
    PerformVaryingPhraseContext.prototype.performUntil = function () {
        return this.getRuleContext(0, PerformUntilContext);
    };
    PerformVaryingPhraseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    PerformVaryingPhraseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(PerformVaryingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performVaryingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformVaryingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformVaryingPhrase) {
            listener.enterPerformVaryingPhrase(this);
        }
    };
    // @Override
    PerformVaryingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformVaryingPhrase) {
            listener.exitPerformVaryingPhrase(this);
        }
    };
    // @Override
    PerformVaryingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformVaryingPhrase) {
            return visitor.visitPerformVaryingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformVaryingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformVaryingPhraseContext = PerformVaryingPhraseContext;
var PerformAfterContext = /** @class */ (function (_super) {
    __extends(PerformAfterContext, _super);
    function PerformAfterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformAfterContext.prototype.AFTER = function () { return this.getToken(Cobol85Parser.AFTER, 0); };
    PerformAfterContext.prototype.performVaryingPhrase = function () {
        return this.getRuleContext(0, PerformVaryingPhraseContext);
    };
    Object.defineProperty(PerformAfterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performAfter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformAfterContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformAfter) {
            listener.enterPerformAfter(this);
        }
    };
    // @Override
    PerformAfterContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformAfter) {
            listener.exitPerformAfter(this);
        }
    };
    // @Override
    PerformAfterContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformAfter) {
            return visitor.visitPerformAfter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformAfterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformAfterContext = PerformAfterContext;
var PerformFromContext = /** @class */ (function (_super) {
    __extends(PerformFromContext, _super);
    function PerformFromContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformFromContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    PerformFromContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    PerformFromContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    PerformFromContext.prototype.arithmeticExpression = function () {
        return this.tryGetRuleContext(0, ArithmeticExpressionContext);
    };
    Object.defineProperty(PerformFromContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performFrom; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformFromContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformFrom) {
            listener.enterPerformFrom(this);
        }
    };
    // @Override
    PerformFromContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformFrom) {
            listener.exitPerformFrom(this);
        }
    };
    // @Override
    PerformFromContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformFrom) {
            return visitor.visitPerformFrom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformFromContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformFromContext = PerformFromContext;
var PerformByContext = /** @class */ (function (_super) {
    __extends(PerformByContext, _super);
    function PerformByContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformByContext.prototype.BY = function () { return this.getToken(Cobol85Parser.BY, 0); };
    PerformByContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    PerformByContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    PerformByContext.prototype.arithmeticExpression = function () {
        return this.tryGetRuleContext(0, ArithmeticExpressionContext);
    };
    Object.defineProperty(PerformByContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performBy; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformByContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformBy) {
            listener.enterPerformBy(this);
        }
    };
    // @Override
    PerformByContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformBy) {
            listener.exitPerformBy(this);
        }
    };
    // @Override
    PerformByContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformBy) {
            return visitor.visitPerformBy(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformByContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformByContext = PerformByContext;
var PerformTestClauseContext = /** @class */ (function (_super) {
    __extends(PerformTestClauseContext, _super);
    function PerformTestClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PerformTestClauseContext.prototype.TEST = function () { return this.getToken(Cobol85Parser.TEST, 0); };
    PerformTestClauseContext.prototype.BEFORE = function () { return this.tryGetToken(Cobol85Parser.BEFORE, 0); };
    PerformTestClauseContext.prototype.AFTER = function () { return this.tryGetToken(Cobol85Parser.AFTER, 0); };
    PerformTestClauseContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(PerformTestClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_performTestClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PerformTestClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterPerformTestClause) {
            listener.enterPerformTestClause(this);
        }
    };
    // @Override
    PerformTestClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitPerformTestClause) {
            listener.exitPerformTestClause(this);
        }
    };
    // @Override
    PerformTestClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitPerformTestClause) {
            return visitor.visitPerformTestClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PerformTestClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PerformTestClauseContext = PerformTestClauseContext;
var PurgeStatementContext = /** @class */ (function (_super) {
    __extends(PurgeStatementContext, _super);
    function PurgeStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PurgeStatementContext.prototype.PURGE = function () { return this.getToken(Cobol85Parser.PURGE, 0); };
    PurgeStatementContext.prototype.cdName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CdNameContext);
        }
        else {
            return this.getRuleContext(i, CdNameContext);
        }
    };
    Object.defineProperty(PurgeStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_purgeStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PurgeStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterPurgeStatement) {
            listener.enterPurgeStatement(this);
        }
    };
    // @Override
    PurgeStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitPurgeStatement) {
            listener.exitPurgeStatement(this);
        }
    };
    // @Override
    PurgeStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitPurgeStatement) {
            return visitor.visitPurgeStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PurgeStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PurgeStatementContext = PurgeStatementContext;
var ReadStatementContext = /** @class */ (function (_super) {
    __extends(ReadStatementContext, _super);
    function ReadStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReadStatementContext.prototype.READ = function () { return this.getToken(Cobol85Parser.READ, 0); };
    ReadStatementContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    ReadStatementContext.prototype.NEXT = function () { return this.tryGetToken(Cobol85Parser.NEXT, 0); };
    ReadStatementContext.prototype.RECORD = function () { return this.tryGetToken(Cobol85Parser.RECORD, 0); };
    ReadStatementContext.prototype.readInto = function () {
        return this.tryGetRuleContext(0, ReadIntoContext);
    };
    ReadStatementContext.prototype.readWith = function () {
        return this.tryGetRuleContext(0, ReadWithContext);
    };
    ReadStatementContext.prototype.readKey = function () {
        return this.tryGetRuleContext(0, ReadKeyContext);
    };
    ReadStatementContext.prototype.invalidKeyPhrase = function () {
        return this.tryGetRuleContext(0, InvalidKeyPhraseContext);
    };
    ReadStatementContext.prototype.notInvalidKeyPhrase = function () {
        return this.tryGetRuleContext(0, NotInvalidKeyPhraseContext);
    };
    ReadStatementContext.prototype.atEndPhrase = function () {
        return this.tryGetRuleContext(0, AtEndPhraseContext);
    };
    ReadStatementContext.prototype.notAtEndPhrase = function () {
        return this.tryGetRuleContext(0, NotAtEndPhraseContext);
    };
    ReadStatementContext.prototype.END_READ = function () { return this.tryGetToken(Cobol85Parser.END_READ, 0); };
    Object.defineProperty(ReadStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_readStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReadStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterReadStatement) {
            listener.enterReadStatement(this);
        }
    };
    // @Override
    ReadStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitReadStatement) {
            listener.exitReadStatement(this);
        }
    };
    // @Override
    ReadStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitReadStatement) {
            return visitor.visitReadStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReadStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReadStatementContext = ReadStatementContext;
var ReadIntoContext = /** @class */ (function (_super) {
    __extends(ReadIntoContext, _super);
    function ReadIntoContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReadIntoContext.prototype.INTO = function () { return this.getToken(Cobol85Parser.INTO, 0); };
    ReadIntoContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(ReadIntoContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_readInto; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReadIntoContext.prototype.enterRule = function (listener) {
        if (listener.enterReadInto) {
            listener.enterReadInto(this);
        }
    };
    // @Override
    ReadIntoContext.prototype.exitRule = function (listener) {
        if (listener.exitReadInto) {
            listener.exitReadInto(this);
        }
    };
    // @Override
    ReadIntoContext.prototype.accept = function (visitor) {
        if (visitor.visitReadInto) {
            return visitor.visitReadInto(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReadIntoContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReadIntoContext = ReadIntoContext;
var ReadWithContext = /** @class */ (function (_super) {
    __extends(ReadWithContext, _super);
    function ReadWithContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReadWithContext.prototype.LOCK = function () { return this.tryGetToken(Cobol85Parser.LOCK, 0); };
    ReadWithContext.prototype.WAIT = function () { return this.tryGetToken(Cobol85Parser.WAIT, 0); };
    ReadWithContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    ReadWithContext.prototype.KEPT = function () { return this.tryGetToken(Cobol85Parser.KEPT, 0); };
    ReadWithContext.prototype.NO = function () { return this.tryGetToken(Cobol85Parser.NO, 0); };
    Object.defineProperty(ReadWithContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_readWith; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReadWithContext.prototype.enterRule = function (listener) {
        if (listener.enterReadWith) {
            listener.enterReadWith(this);
        }
    };
    // @Override
    ReadWithContext.prototype.exitRule = function (listener) {
        if (listener.exitReadWith) {
            listener.exitReadWith(this);
        }
    };
    // @Override
    ReadWithContext.prototype.accept = function (visitor) {
        if (visitor.visitReadWith) {
            return visitor.visitReadWith(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReadWithContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReadWithContext = ReadWithContext;
var ReadKeyContext = /** @class */ (function (_super) {
    __extends(ReadKeyContext, _super);
    function ReadKeyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReadKeyContext.prototype.KEY = function () { return this.getToken(Cobol85Parser.KEY, 0); };
    ReadKeyContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    ReadKeyContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(ReadKeyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_readKey; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReadKeyContext.prototype.enterRule = function (listener) {
        if (listener.enterReadKey) {
            listener.enterReadKey(this);
        }
    };
    // @Override
    ReadKeyContext.prototype.exitRule = function (listener) {
        if (listener.exitReadKey) {
            listener.exitReadKey(this);
        }
    };
    // @Override
    ReadKeyContext.prototype.accept = function (visitor) {
        if (visitor.visitReadKey) {
            return visitor.visitReadKey(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReadKeyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReadKeyContext = ReadKeyContext;
var ReceiveStatementContext = /** @class */ (function (_super) {
    __extends(ReceiveStatementContext, _super);
    function ReceiveStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveStatementContext.prototype.RECEIVE = function () { return this.getToken(Cobol85Parser.RECEIVE, 0); };
    ReceiveStatementContext.prototype.receiveFromStatement = function () {
        return this.tryGetRuleContext(0, ReceiveFromStatementContext);
    };
    ReceiveStatementContext.prototype.receiveIntoStatement = function () {
        return this.tryGetRuleContext(0, ReceiveIntoStatementContext);
    };
    ReceiveStatementContext.prototype.onExceptionClause = function () {
        return this.tryGetRuleContext(0, OnExceptionClauseContext);
    };
    ReceiveStatementContext.prototype.notOnExceptionClause = function () {
        return this.tryGetRuleContext(0, NotOnExceptionClauseContext);
    };
    ReceiveStatementContext.prototype.END_RECEIVE = function () { return this.tryGetToken(Cobol85Parser.END_RECEIVE, 0); };
    Object.defineProperty(ReceiveStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveStatement) {
            listener.enterReceiveStatement(this);
        }
    };
    // @Override
    ReceiveStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveStatement) {
            listener.exitReceiveStatement(this);
        }
    };
    // @Override
    ReceiveStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveStatement) {
            return visitor.visitReceiveStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveStatementContext = ReceiveStatementContext;
var ReceiveFromStatementContext = /** @class */ (function (_super) {
    __extends(ReceiveFromStatementContext, _super);
    function ReceiveFromStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveFromStatementContext.prototype.dataName = function () {
        return this.getRuleContext(0, DataNameContext);
    };
    ReceiveFromStatementContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    ReceiveFromStatementContext.prototype.receiveFrom = function () {
        return this.getRuleContext(0, ReceiveFromContext);
    };
    ReceiveFromStatementContext.prototype.receiveBefore = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReceiveBeforeContext);
        }
        else {
            return this.getRuleContext(i, ReceiveBeforeContext);
        }
    };
    ReceiveFromStatementContext.prototype.receiveWith = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReceiveWithContext);
        }
        else {
            return this.getRuleContext(i, ReceiveWithContext);
        }
    };
    ReceiveFromStatementContext.prototype.receiveThread = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReceiveThreadContext);
        }
        else {
            return this.getRuleContext(i, ReceiveThreadContext);
        }
    };
    ReceiveFromStatementContext.prototype.receiveSize = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReceiveSizeContext);
        }
        else {
            return this.getRuleContext(i, ReceiveSizeContext);
        }
    };
    ReceiveFromStatementContext.prototype.receiveStatus = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ReceiveStatusContext);
        }
        else {
            return this.getRuleContext(i, ReceiveStatusContext);
        }
    };
    Object.defineProperty(ReceiveFromStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveFromStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveFromStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveFromStatement) {
            listener.enterReceiveFromStatement(this);
        }
    };
    // @Override
    ReceiveFromStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveFromStatement) {
            listener.exitReceiveFromStatement(this);
        }
    };
    // @Override
    ReceiveFromStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveFromStatement) {
            return visitor.visitReceiveFromStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveFromStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveFromStatementContext = ReceiveFromStatementContext;
var ReceiveFromContext = /** @class */ (function (_super) {
    __extends(ReceiveFromContext, _super);
    function ReceiveFromContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveFromContext.prototype.THREAD = function () { return this.getToken(Cobol85Parser.THREAD, 0); };
    ReceiveFromContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    ReceiveFromContext.prototype.LAST = function () { return this.tryGetToken(Cobol85Parser.LAST, 0); };
    ReceiveFromContext.prototype.ANY = function () { return this.tryGetToken(Cobol85Parser.ANY, 0); };
    Object.defineProperty(ReceiveFromContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveFrom; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveFromContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveFrom) {
            listener.enterReceiveFrom(this);
        }
    };
    // @Override
    ReceiveFromContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveFrom) {
            listener.exitReceiveFrom(this);
        }
    };
    // @Override
    ReceiveFromContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveFrom) {
            return visitor.visitReceiveFrom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveFromContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveFromContext = ReceiveFromContext;
var ReceiveIntoStatementContext = /** @class */ (function (_super) {
    __extends(ReceiveIntoStatementContext, _super);
    function ReceiveIntoStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveIntoStatementContext.prototype.cdName = function () {
        return this.getRuleContext(0, CdNameContext);
    };
    ReceiveIntoStatementContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    ReceiveIntoStatementContext.prototype.MESSAGE = function () { return this.tryGetToken(Cobol85Parser.MESSAGE, 0); };
    ReceiveIntoStatementContext.prototype.SEGMENT = function () { return this.tryGetToken(Cobol85Parser.SEGMENT, 0); };
    ReceiveIntoStatementContext.prototype.INTO = function () { return this.tryGetToken(Cobol85Parser.INTO, 0); };
    ReceiveIntoStatementContext.prototype.receiveNoData = function () {
        return this.tryGetRuleContext(0, ReceiveNoDataContext);
    };
    ReceiveIntoStatementContext.prototype.receiveWithData = function () {
        return this.tryGetRuleContext(0, ReceiveWithDataContext);
    };
    Object.defineProperty(ReceiveIntoStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveIntoStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveIntoStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveIntoStatement) {
            listener.enterReceiveIntoStatement(this);
        }
    };
    // @Override
    ReceiveIntoStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveIntoStatement) {
            listener.exitReceiveIntoStatement(this);
        }
    };
    // @Override
    ReceiveIntoStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveIntoStatement) {
            return visitor.visitReceiveIntoStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveIntoStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveIntoStatementContext = ReceiveIntoStatementContext;
var ReceiveNoDataContext = /** @class */ (function (_super) {
    __extends(ReceiveNoDataContext, _super);
    function ReceiveNoDataContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveNoDataContext.prototype.NO = function () { return this.getToken(Cobol85Parser.NO, 0); };
    ReceiveNoDataContext.prototype.DATA = function () { return this.getToken(Cobol85Parser.DATA, 0); };
    ReceiveNoDataContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(ReceiveNoDataContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveNoData; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveNoDataContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveNoData) {
            listener.enterReceiveNoData(this);
        }
    };
    // @Override
    ReceiveNoDataContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveNoData) {
            listener.exitReceiveNoData(this);
        }
    };
    // @Override
    ReceiveNoDataContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveNoData) {
            return visitor.visitReceiveNoData(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveNoDataContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveNoDataContext = ReceiveNoDataContext;
var ReceiveWithDataContext = /** @class */ (function (_super) {
    __extends(ReceiveWithDataContext, _super);
    function ReceiveWithDataContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveWithDataContext.prototype.WITH = function () { return this.getToken(Cobol85Parser.WITH, 0); };
    ReceiveWithDataContext.prototype.DATA = function () { return this.getToken(Cobol85Parser.DATA, 0); };
    ReceiveWithDataContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(ReceiveWithDataContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveWithData; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveWithDataContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveWithData) {
            listener.enterReceiveWithData(this);
        }
    };
    // @Override
    ReceiveWithDataContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveWithData) {
            listener.exitReceiveWithData(this);
        }
    };
    // @Override
    ReceiveWithDataContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveWithData) {
            return visitor.visitReceiveWithData(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveWithDataContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveWithDataContext = ReceiveWithDataContext;
var ReceiveBeforeContext = /** @class */ (function (_super) {
    __extends(ReceiveBeforeContext, _super);
    function ReceiveBeforeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveBeforeContext.prototype.BEFORE = function () { return this.getToken(Cobol85Parser.BEFORE, 0); };
    ReceiveBeforeContext.prototype.numericLiteral = function () {
        return this.tryGetRuleContext(0, NumericLiteralContext);
    };
    ReceiveBeforeContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ReceiveBeforeContext.prototype.TIME = function () { return this.tryGetToken(Cobol85Parser.TIME, 0); };
    Object.defineProperty(ReceiveBeforeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveBefore; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveBeforeContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveBefore) {
            listener.enterReceiveBefore(this);
        }
    };
    // @Override
    ReceiveBeforeContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveBefore) {
            listener.exitReceiveBefore(this);
        }
    };
    // @Override
    ReceiveBeforeContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveBefore) {
            return visitor.visitReceiveBefore(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveBeforeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveBeforeContext = ReceiveBeforeContext;
var ReceiveWithContext = /** @class */ (function (_super) {
    __extends(ReceiveWithContext, _super);
    function ReceiveWithContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveWithContext.prototype.NO = function () { return this.getToken(Cobol85Parser.NO, 0); };
    ReceiveWithContext.prototype.WAIT = function () { return this.getToken(Cobol85Parser.WAIT, 0); };
    ReceiveWithContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(ReceiveWithContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveWith; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveWithContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveWith) {
            listener.enterReceiveWith(this);
        }
    };
    // @Override
    ReceiveWithContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveWith) {
            listener.exitReceiveWith(this);
        }
    };
    // @Override
    ReceiveWithContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveWith) {
            return visitor.visitReceiveWith(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveWithContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveWithContext = ReceiveWithContext;
var ReceiveThreadContext = /** @class */ (function (_super) {
    __extends(ReceiveThreadContext, _super);
    function ReceiveThreadContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveThreadContext.prototype.THREAD = function () { return this.getToken(Cobol85Parser.THREAD, 0); };
    ReceiveThreadContext.prototype.dataName = function () {
        return this.getRuleContext(0, DataNameContext);
    };
    ReceiveThreadContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    Object.defineProperty(ReceiveThreadContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveThread; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveThreadContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveThread) {
            listener.enterReceiveThread(this);
        }
    };
    // @Override
    ReceiveThreadContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveThread) {
            listener.exitReceiveThread(this);
        }
    };
    // @Override
    ReceiveThreadContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveThread) {
            return visitor.visitReceiveThread(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveThreadContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveThreadContext = ReceiveThreadContext;
var ReceiveSizeContext = /** @class */ (function (_super) {
    __extends(ReceiveSizeContext, _super);
    function ReceiveSizeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveSizeContext.prototype.SIZE = function () { return this.getToken(Cobol85Parser.SIZE, 0); };
    ReceiveSizeContext.prototype.numericLiteral = function () {
        return this.tryGetRuleContext(0, NumericLiteralContext);
    };
    ReceiveSizeContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ReceiveSizeContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    Object.defineProperty(ReceiveSizeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveSize; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveSizeContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveSize) {
            listener.enterReceiveSize(this);
        }
    };
    // @Override
    ReceiveSizeContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveSize) {
            listener.exitReceiveSize(this);
        }
    };
    // @Override
    ReceiveSizeContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveSize) {
            return visitor.visitReceiveSize(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveSizeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveSizeContext = ReceiveSizeContext;
var ReceiveStatusContext = /** @class */ (function (_super) {
    __extends(ReceiveStatusContext, _super);
    function ReceiveStatusContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiveStatusContext.prototype.STATUS = function () { return this.getToken(Cobol85Parser.STATUS, 0); };
    ReceiveStatusContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ReceiveStatusContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    Object.defineProperty(ReceiveStatusContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_receiveStatus; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiveStatusContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiveStatus) {
            listener.enterReceiveStatus(this);
        }
    };
    // @Override
    ReceiveStatusContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiveStatus) {
            listener.exitReceiveStatus(this);
        }
    };
    // @Override
    ReceiveStatusContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiveStatus) {
            return visitor.visitReceiveStatus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiveStatusContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiveStatusContext = ReceiveStatusContext;
var ReleaseStatementContext = /** @class */ (function (_super) {
    __extends(ReleaseStatementContext, _super);
    function ReleaseStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReleaseStatementContext.prototype.RELEASE = function () { return this.getToken(Cobol85Parser.RELEASE, 0); };
    ReleaseStatementContext.prototype.recordName = function () {
        return this.getRuleContext(0, RecordNameContext);
    };
    ReleaseStatementContext.prototype.FROM = function () { return this.tryGetToken(Cobol85Parser.FROM, 0); };
    ReleaseStatementContext.prototype.qualifiedDataName = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameContext);
    };
    Object.defineProperty(ReleaseStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_releaseStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReleaseStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterReleaseStatement) {
            listener.enterReleaseStatement(this);
        }
    };
    // @Override
    ReleaseStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitReleaseStatement) {
            listener.exitReleaseStatement(this);
        }
    };
    // @Override
    ReleaseStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitReleaseStatement) {
            return visitor.visitReleaseStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReleaseStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReleaseStatementContext = ReleaseStatementContext;
var ReturnStatementContext = /** @class */ (function (_super) {
    __extends(ReturnStatementContext, _super);
    function ReturnStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReturnStatementContext.prototype.RETURN = function () { return this.getToken(Cobol85Parser.RETURN, 0); };
    ReturnStatementContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    ReturnStatementContext.prototype.atEndPhrase = function () {
        return this.getRuleContext(0, AtEndPhraseContext);
    };
    ReturnStatementContext.prototype.RECORD = function () { return this.tryGetToken(Cobol85Parser.RECORD, 0); };
    ReturnStatementContext.prototype.returnInto = function () {
        return this.tryGetRuleContext(0, ReturnIntoContext);
    };
    ReturnStatementContext.prototype.notAtEndPhrase = function () {
        return this.tryGetRuleContext(0, NotAtEndPhraseContext);
    };
    ReturnStatementContext.prototype.END_RETURN = function () { return this.tryGetToken(Cobol85Parser.END_RETURN, 0); };
    Object.defineProperty(ReturnStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_returnStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReturnStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterReturnStatement) {
            listener.enterReturnStatement(this);
        }
    };
    // @Override
    ReturnStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitReturnStatement) {
            listener.exitReturnStatement(this);
        }
    };
    // @Override
    ReturnStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReturnStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReturnStatementContext = ReturnStatementContext;
var ReturnIntoContext = /** @class */ (function (_super) {
    __extends(ReturnIntoContext, _super);
    function ReturnIntoContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReturnIntoContext.prototype.INTO = function () { return this.getToken(Cobol85Parser.INTO, 0); };
    ReturnIntoContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    Object.defineProperty(ReturnIntoContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_returnInto; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReturnIntoContext.prototype.enterRule = function (listener) {
        if (listener.enterReturnInto) {
            listener.enterReturnInto(this);
        }
    };
    // @Override
    ReturnIntoContext.prototype.exitRule = function (listener) {
        if (listener.exitReturnInto) {
            listener.exitReturnInto(this);
        }
    };
    // @Override
    ReturnIntoContext.prototype.accept = function (visitor) {
        if (visitor.visitReturnInto) {
            return visitor.visitReturnInto(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReturnIntoContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReturnIntoContext = ReturnIntoContext;
var RewriteStatementContext = /** @class */ (function (_super) {
    __extends(RewriteStatementContext, _super);
    function RewriteStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RewriteStatementContext.prototype.REWRITE = function () { return this.getToken(Cobol85Parser.REWRITE, 0); };
    RewriteStatementContext.prototype.recordName = function () {
        return this.getRuleContext(0, RecordNameContext);
    };
    RewriteStatementContext.prototype.rewriteFrom = function () {
        return this.tryGetRuleContext(0, RewriteFromContext);
    };
    RewriteStatementContext.prototype.invalidKeyPhrase = function () {
        return this.tryGetRuleContext(0, InvalidKeyPhraseContext);
    };
    RewriteStatementContext.prototype.notInvalidKeyPhrase = function () {
        return this.tryGetRuleContext(0, NotInvalidKeyPhraseContext);
    };
    RewriteStatementContext.prototype.END_REWRITE = function () { return this.tryGetToken(Cobol85Parser.END_REWRITE, 0); };
    Object.defineProperty(RewriteStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_rewriteStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RewriteStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterRewriteStatement) {
            listener.enterRewriteStatement(this);
        }
    };
    // @Override
    RewriteStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitRewriteStatement) {
            listener.exitRewriteStatement(this);
        }
    };
    // @Override
    RewriteStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitRewriteStatement) {
            return visitor.visitRewriteStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RewriteStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RewriteStatementContext = RewriteStatementContext;
var RewriteFromContext = /** @class */ (function (_super) {
    __extends(RewriteFromContext, _super);
    function RewriteFromContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RewriteFromContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    RewriteFromContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(RewriteFromContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_rewriteFrom; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RewriteFromContext.prototype.enterRule = function (listener) {
        if (listener.enterRewriteFrom) {
            listener.enterRewriteFrom(this);
        }
    };
    // @Override
    RewriteFromContext.prototype.exitRule = function (listener) {
        if (listener.exitRewriteFrom) {
            listener.exitRewriteFrom(this);
        }
    };
    // @Override
    RewriteFromContext.prototype.accept = function (visitor) {
        if (visitor.visitRewriteFrom) {
            return visitor.visitRewriteFrom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RewriteFromContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RewriteFromContext = RewriteFromContext;
var SearchStatementContext = /** @class */ (function (_super) {
    __extends(SearchStatementContext, _super);
    function SearchStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SearchStatementContext.prototype.SEARCH = function () { return this.getToken(Cobol85Parser.SEARCH, 0); };
    SearchStatementContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    SearchStatementContext.prototype.ALL = function () { return this.tryGetToken(Cobol85Parser.ALL, 0); };
    SearchStatementContext.prototype.searchVarying = function () {
        return this.tryGetRuleContext(0, SearchVaryingContext);
    };
    SearchStatementContext.prototype.atEndPhrase = function () {
        return this.tryGetRuleContext(0, AtEndPhraseContext);
    };
    SearchStatementContext.prototype.searchWhen = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SearchWhenContext);
        }
        else {
            return this.getRuleContext(i, SearchWhenContext);
        }
    };
    SearchStatementContext.prototype.END_SEARCH = function () { return this.tryGetToken(Cobol85Parser.END_SEARCH, 0); };
    Object.defineProperty(SearchStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_searchStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SearchStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSearchStatement) {
            listener.enterSearchStatement(this);
        }
    };
    // @Override
    SearchStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSearchStatement) {
            listener.exitSearchStatement(this);
        }
    };
    // @Override
    SearchStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSearchStatement) {
            return visitor.visitSearchStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SearchStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SearchStatementContext = SearchStatementContext;
var SearchVaryingContext = /** @class */ (function (_super) {
    __extends(SearchVaryingContext, _super);
    function SearchVaryingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SearchVaryingContext.prototype.VARYING = function () { return this.getToken(Cobol85Parser.VARYING, 0); };
    SearchVaryingContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    Object.defineProperty(SearchVaryingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_searchVarying; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SearchVaryingContext.prototype.enterRule = function (listener) {
        if (listener.enterSearchVarying) {
            listener.enterSearchVarying(this);
        }
    };
    // @Override
    SearchVaryingContext.prototype.exitRule = function (listener) {
        if (listener.exitSearchVarying) {
            listener.exitSearchVarying(this);
        }
    };
    // @Override
    SearchVaryingContext.prototype.accept = function (visitor) {
        if (visitor.visitSearchVarying) {
            return visitor.visitSearchVarying(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SearchVaryingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SearchVaryingContext = SearchVaryingContext;
var SearchWhenContext = /** @class */ (function (_super) {
    __extends(SearchWhenContext, _super);
    function SearchWhenContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SearchWhenContext.prototype.WHEN = function () { return this.getToken(Cobol85Parser.WHEN, 0); };
    SearchWhenContext.prototype.condition = function () {
        return this.getRuleContext(0, ConditionContext);
    };
    SearchWhenContext.prototype.NEXT = function () { return this.tryGetToken(Cobol85Parser.NEXT, 0); };
    SearchWhenContext.prototype.SENTENCE = function () { return this.tryGetToken(Cobol85Parser.SENTENCE, 0); };
    SearchWhenContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(SearchWhenContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_searchWhen; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SearchWhenContext.prototype.enterRule = function (listener) {
        if (listener.enterSearchWhen) {
            listener.enterSearchWhen(this);
        }
    };
    // @Override
    SearchWhenContext.prototype.exitRule = function (listener) {
        if (listener.exitSearchWhen) {
            listener.exitSearchWhen(this);
        }
    };
    // @Override
    SearchWhenContext.prototype.accept = function (visitor) {
        if (visitor.visitSearchWhen) {
            return visitor.visitSearchWhen(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SearchWhenContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SearchWhenContext = SearchWhenContext;
var SendStatementContext = /** @class */ (function (_super) {
    __extends(SendStatementContext, _super);
    function SendStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendStatementContext.prototype.SEND = function () { return this.getToken(Cobol85Parser.SEND, 0); };
    SendStatementContext.prototype.sendStatementSync = function () {
        return this.tryGetRuleContext(0, SendStatementSyncContext);
    };
    SendStatementContext.prototype.sendStatementAsync = function () {
        return this.tryGetRuleContext(0, SendStatementAsyncContext);
    };
    SendStatementContext.prototype.onExceptionClause = function () {
        return this.tryGetRuleContext(0, OnExceptionClauseContext);
    };
    SendStatementContext.prototype.notOnExceptionClause = function () {
        return this.tryGetRuleContext(0, NotOnExceptionClauseContext);
    };
    Object.defineProperty(SendStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sendStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSendStatement) {
            listener.enterSendStatement(this);
        }
    };
    // @Override
    SendStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSendStatement) {
            listener.exitSendStatement(this);
        }
    };
    // @Override
    SendStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSendStatement) {
            return visitor.visitSendStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendStatementContext = SendStatementContext;
var SendStatementSyncContext = /** @class */ (function (_super) {
    __extends(SendStatementSyncContext, _super);
    function SendStatementSyncContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendStatementSyncContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    SendStatementSyncContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    SendStatementSyncContext.prototype.sendFromPhrase = function () {
        return this.tryGetRuleContext(0, SendFromPhraseContext);
    };
    SendStatementSyncContext.prototype.sendWithPhrase = function () {
        return this.tryGetRuleContext(0, SendWithPhraseContext);
    };
    SendStatementSyncContext.prototype.sendReplacingPhrase = function () {
        return this.tryGetRuleContext(0, SendReplacingPhraseContext);
    };
    SendStatementSyncContext.prototype.sendAdvancingPhrase = function () {
        return this.tryGetRuleContext(0, SendAdvancingPhraseContext);
    };
    Object.defineProperty(SendStatementSyncContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sendStatementSync; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendStatementSyncContext.prototype.enterRule = function (listener) {
        if (listener.enterSendStatementSync) {
            listener.enterSendStatementSync(this);
        }
    };
    // @Override
    SendStatementSyncContext.prototype.exitRule = function (listener) {
        if (listener.exitSendStatementSync) {
            listener.exitSendStatementSync(this);
        }
    };
    // @Override
    SendStatementSyncContext.prototype.accept = function (visitor) {
        if (visitor.visitSendStatementSync) {
            return visitor.visitSendStatementSync(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendStatementSyncContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendStatementSyncContext = SendStatementSyncContext;
var SendStatementAsyncContext = /** @class */ (function (_super) {
    __extends(SendStatementAsyncContext, _super);
    function SendStatementAsyncContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendStatementAsyncContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    SendStatementAsyncContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    SendStatementAsyncContext.prototype.TOP = function () { return this.tryGetToken(Cobol85Parser.TOP, 0); };
    SendStatementAsyncContext.prototype.BOTTOM = function () { return this.tryGetToken(Cobol85Parser.BOTTOM, 0); };
    Object.defineProperty(SendStatementAsyncContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sendStatementAsync; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendStatementAsyncContext.prototype.enterRule = function (listener) {
        if (listener.enterSendStatementAsync) {
            listener.enterSendStatementAsync(this);
        }
    };
    // @Override
    SendStatementAsyncContext.prototype.exitRule = function (listener) {
        if (listener.exitSendStatementAsync) {
            listener.exitSendStatementAsync(this);
        }
    };
    // @Override
    SendStatementAsyncContext.prototype.accept = function (visitor) {
        if (visitor.visitSendStatementAsync) {
            return visitor.visitSendStatementAsync(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendStatementAsyncContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendStatementAsyncContext = SendStatementAsyncContext;
var SendFromPhraseContext = /** @class */ (function (_super) {
    __extends(SendFromPhraseContext, _super);
    function SendFromPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendFromPhraseContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    SendFromPhraseContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(SendFromPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sendFromPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendFromPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterSendFromPhrase) {
            listener.enterSendFromPhrase(this);
        }
    };
    // @Override
    SendFromPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitSendFromPhrase) {
            listener.exitSendFromPhrase(this);
        }
    };
    // @Override
    SendFromPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitSendFromPhrase) {
            return visitor.visitSendFromPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendFromPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendFromPhraseContext = SendFromPhraseContext;
var SendWithPhraseContext = /** @class */ (function (_super) {
    __extends(SendWithPhraseContext, _super);
    function SendWithPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendWithPhraseContext.prototype.WITH = function () { return this.getToken(Cobol85Parser.WITH, 0); };
    SendWithPhraseContext.prototype.EGI = function () { return this.tryGetToken(Cobol85Parser.EGI, 0); };
    SendWithPhraseContext.prototype.EMI = function () { return this.tryGetToken(Cobol85Parser.EMI, 0); };
    SendWithPhraseContext.prototype.ESI = function () { return this.tryGetToken(Cobol85Parser.ESI, 0); };
    SendWithPhraseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(SendWithPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sendWithPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendWithPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterSendWithPhrase) {
            listener.enterSendWithPhrase(this);
        }
    };
    // @Override
    SendWithPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitSendWithPhrase) {
            listener.exitSendWithPhrase(this);
        }
    };
    // @Override
    SendWithPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitSendWithPhrase) {
            return visitor.visitSendWithPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendWithPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendWithPhraseContext = SendWithPhraseContext;
var SendReplacingPhraseContext = /** @class */ (function (_super) {
    __extends(SendReplacingPhraseContext, _super);
    function SendReplacingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendReplacingPhraseContext.prototype.REPLACING = function () { return this.getToken(Cobol85Parser.REPLACING, 0); };
    SendReplacingPhraseContext.prototype.LINE = function () { return this.tryGetToken(Cobol85Parser.LINE, 0); };
    Object.defineProperty(SendReplacingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sendReplacingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendReplacingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterSendReplacingPhrase) {
            listener.enterSendReplacingPhrase(this);
        }
    };
    // @Override
    SendReplacingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitSendReplacingPhrase) {
            listener.exitSendReplacingPhrase(this);
        }
    };
    // @Override
    SendReplacingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitSendReplacingPhrase) {
            return visitor.visitSendReplacingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendReplacingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendReplacingPhraseContext = SendReplacingPhraseContext;
var SendAdvancingPhraseContext = /** @class */ (function (_super) {
    __extends(SendAdvancingPhraseContext, _super);
    function SendAdvancingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendAdvancingPhraseContext.prototype.BEFORE = function () { return this.tryGetToken(Cobol85Parser.BEFORE, 0); };
    SendAdvancingPhraseContext.prototype.AFTER = function () { return this.tryGetToken(Cobol85Parser.AFTER, 0); };
    SendAdvancingPhraseContext.prototype.sendAdvancingPage = function () {
        return this.tryGetRuleContext(0, SendAdvancingPageContext);
    };
    SendAdvancingPhraseContext.prototype.sendAdvancingLines = function () {
        return this.tryGetRuleContext(0, SendAdvancingLinesContext);
    };
    SendAdvancingPhraseContext.prototype.sendAdvancingMnemonic = function () {
        return this.tryGetRuleContext(0, SendAdvancingMnemonicContext);
    };
    SendAdvancingPhraseContext.prototype.ADVANCING = function () { return this.tryGetToken(Cobol85Parser.ADVANCING, 0); };
    Object.defineProperty(SendAdvancingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sendAdvancingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendAdvancingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterSendAdvancingPhrase) {
            listener.enterSendAdvancingPhrase(this);
        }
    };
    // @Override
    SendAdvancingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitSendAdvancingPhrase) {
            listener.exitSendAdvancingPhrase(this);
        }
    };
    // @Override
    SendAdvancingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitSendAdvancingPhrase) {
            return visitor.visitSendAdvancingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendAdvancingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendAdvancingPhraseContext = SendAdvancingPhraseContext;
var SendAdvancingPageContext = /** @class */ (function (_super) {
    __extends(SendAdvancingPageContext, _super);
    function SendAdvancingPageContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendAdvancingPageContext.prototype.PAGE = function () { return this.getToken(Cobol85Parser.PAGE, 0); };
    Object.defineProperty(SendAdvancingPageContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sendAdvancingPage; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendAdvancingPageContext.prototype.enterRule = function (listener) {
        if (listener.enterSendAdvancingPage) {
            listener.enterSendAdvancingPage(this);
        }
    };
    // @Override
    SendAdvancingPageContext.prototype.exitRule = function (listener) {
        if (listener.exitSendAdvancingPage) {
            listener.exitSendAdvancingPage(this);
        }
    };
    // @Override
    SendAdvancingPageContext.prototype.accept = function (visitor) {
        if (visitor.visitSendAdvancingPage) {
            return visitor.visitSendAdvancingPage(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendAdvancingPageContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendAdvancingPageContext = SendAdvancingPageContext;
var SendAdvancingLinesContext = /** @class */ (function (_super) {
    __extends(SendAdvancingLinesContext, _super);
    function SendAdvancingLinesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendAdvancingLinesContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    SendAdvancingLinesContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    SendAdvancingLinesContext.prototype.LINE = function () { return this.tryGetToken(Cobol85Parser.LINE, 0); };
    SendAdvancingLinesContext.prototype.LINES = function () { return this.tryGetToken(Cobol85Parser.LINES, 0); };
    Object.defineProperty(SendAdvancingLinesContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sendAdvancingLines; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendAdvancingLinesContext.prototype.enterRule = function (listener) {
        if (listener.enterSendAdvancingLines) {
            listener.enterSendAdvancingLines(this);
        }
    };
    // @Override
    SendAdvancingLinesContext.prototype.exitRule = function (listener) {
        if (listener.exitSendAdvancingLines) {
            listener.exitSendAdvancingLines(this);
        }
    };
    // @Override
    SendAdvancingLinesContext.prototype.accept = function (visitor) {
        if (visitor.visitSendAdvancingLines) {
            return visitor.visitSendAdvancingLines(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendAdvancingLinesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendAdvancingLinesContext = SendAdvancingLinesContext;
var SendAdvancingMnemonicContext = /** @class */ (function (_super) {
    __extends(SendAdvancingMnemonicContext, _super);
    function SendAdvancingMnemonicContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendAdvancingMnemonicContext.prototype.mnemonicName = function () {
        return this.getRuleContext(0, MnemonicNameContext);
    };
    Object.defineProperty(SendAdvancingMnemonicContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sendAdvancingMnemonic; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendAdvancingMnemonicContext.prototype.enterRule = function (listener) {
        if (listener.enterSendAdvancingMnemonic) {
            listener.enterSendAdvancingMnemonic(this);
        }
    };
    // @Override
    SendAdvancingMnemonicContext.prototype.exitRule = function (listener) {
        if (listener.exitSendAdvancingMnemonic) {
            listener.exitSendAdvancingMnemonic(this);
        }
    };
    // @Override
    SendAdvancingMnemonicContext.prototype.accept = function (visitor) {
        if (visitor.visitSendAdvancingMnemonic) {
            return visitor.visitSendAdvancingMnemonic(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendAdvancingMnemonicContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendAdvancingMnemonicContext = SendAdvancingMnemonicContext;
var SetStatementContext = /** @class */ (function (_super) {
    __extends(SetStatementContext, _super);
    function SetStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SetStatementContext.prototype.SET = function () { return this.getToken(Cobol85Parser.SET, 0); };
    SetStatementContext.prototype.setUpDownByStatement = function () {
        return this.tryGetRuleContext(0, SetUpDownByStatementContext);
    };
    SetStatementContext.prototype.setToStatement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SetToStatementContext);
        }
        else {
            return this.getRuleContext(i, SetToStatementContext);
        }
    };
    Object.defineProperty(SetStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_setStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SetStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSetStatement) {
            listener.enterSetStatement(this);
        }
    };
    // @Override
    SetStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSetStatement) {
            listener.exitSetStatement(this);
        }
    };
    // @Override
    SetStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSetStatement) {
            return visitor.visitSetStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SetStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SetStatementContext = SetStatementContext;
var SetToStatementContext = /** @class */ (function (_super) {
    __extends(SetToStatementContext, _super);
    function SetToStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SetToStatementContext.prototype.TO = function () { return this.getToken(Cobol85Parser.TO, 0); };
    SetToStatementContext.prototype.setTo = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SetToContext);
        }
        else {
            return this.getRuleContext(i, SetToContext);
        }
    };
    SetToStatementContext.prototype.setToValue = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SetToValueContext);
        }
        else {
            return this.getRuleContext(i, SetToValueContext);
        }
    };
    Object.defineProperty(SetToStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_setToStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SetToStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSetToStatement) {
            listener.enterSetToStatement(this);
        }
    };
    // @Override
    SetToStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSetToStatement) {
            listener.exitSetToStatement(this);
        }
    };
    // @Override
    SetToStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSetToStatement) {
            return visitor.visitSetToStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SetToStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SetToStatementContext = SetToStatementContext;
var SetUpDownByStatementContext = /** @class */ (function (_super) {
    __extends(SetUpDownByStatementContext, _super);
    function SetUpDownByStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SetUpDownByStatementContext.prototype.setByValue = function () {
        return this.getRuleContext(0, SetByValueContext);
    };
    SetUpDownByStatementContext.prototype.UP = function () { return this.tryGetToken(Cobol85Parser.UP, 0); };
    SetUpDownByStatementContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    SetUpDownByStatementContext.prototype.DOWN = function () { return this.tryGetToken(Cobol85Parser.DOWN, 0); };
    SetUpDownByStatementContext.prototype.setTo = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SetToContext);
        }
        else {
            return this.getRuleContext(i, SetToContext);
        }
    };
    Object.defineProperty(SetUpDownByStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_setUpDownByStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SetUpDownByStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSetUpDownByStatement) {
            listener.enterSetUpDownByStatement(this);
        }
    };
    // @Override
    SetUpDownByStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSetUpDownByStatement) {
            listener.exitSetUpDownByStatement(this);
        }
    };
    // @Override
    SetUpDownByStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSetUpDownByStatement) {
            return visitor.visitSetUpDownByStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SetUpDownByStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SetUpDownByStatementContext = SetUpDownByStatementContext;
var SetToContext = /** @class */ (function (_super) {
    __extends(SetToContext, _super);
    function SetToContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SetToContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(SetToContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_setTo; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SetToContext.prototype.enterRule = function (listener) {
        if (listener.enterSetTo) {
            listener.enterSetTo(this);
        }
    };
    // @Override
    SetToContext.prototype.exitRule = function (listener) {
        if (listener.exitSetTo) {
            listener.exitSetTo(this);
        }
    };
    // @Override
    SetToContext.prototype.accept = function (visitor) {
        if (visitor.visitSetTo) {
            return visitor.visitSetTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SetToContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SetToContext = SetToContext;
var SetToValueContext = /** @class */ (function (_super) {
    __extends(SetToValueContext, _super);
    function SetToValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SetToValueContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    SetToValueContext.prototype.OFF = function () { return this.tryGetToken(Cobol85Parser.OFF, 0); };
    SetToValueContext.prototype.ENTRY = function () { return this.tryGetToken(Cobol85Parser.ENTRY, 0); };
    SetToValueContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    SetToValueContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(SetToValueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_setToValue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SetToValueContext.prototype.enterRule = function (listener) {
        if (listener.enterSetToValue) {
            listener.enterSetToValue(this);
        }
    };
    // @Override
    SetToValueContext.prototype.exitRule = function (listener) {
        if (listener.exitSetToValue) {
            listener.exitSetToValue(this);
        }
    };
    // @Override
    SetToValueContext.prototype.accept = function (visitor) {
        if (visitor.visitSetToValue) {
            return visitor.visitSetToValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SetToValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SetToValueContext = SetToValueContext;
var SetByValueContext = /** @class */ (function (_super) {
    __extends(SetByValueContext, _super);
    function SetByValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SetByValueContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    SetByValueContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(SetByValueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_setByValue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SetByValueContext.prototype.enterRule = function (listener) {
        if (listener.enterSetByValue) {
            listener.enterSetByValue(this);
        }
    };
    // @Override
    SetByValueContext.prototype.exitRule = function (listener) {
        if (listener.exitSetByValue) {
            listener.exitSetByValue(this);
        }
    };
    // @Override
    SetByValueContext.prototype.accept = function (visitor) {
        if (visitor.visitSetByValue) {
            return visitor.visitSetByValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SetByValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SetByValueContext = SetByValueContext;
var SortStatementContext = /** @class */ (function (_super) {
    __extends(SortStatementContext, _super);
    function SortStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortStatementContext.prototype.SORT = function () { return this.getToken(Cobol85Parser.SORT, 0); };
    SortStatementContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    SortStatementContext.prototype.sortOnKeyClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SortOnKeyClauseContext);
        }
        else {
            return this.getRuleContext(i, SortOnKeyClauseContext);
        }
    };
    SortStatementContext.prototype.sortDuplicatesPhrase = function () {
        return this.tryGetRuleContext(0, SortDuplicatesPhraseContext);
    };
    SortStatementContext.prototype.sortCollatingSequencePhrase = function () {
        return this.tryGetRuleContext(0, SortCollatingSequencePhraseContext);
    };
    SortStatementContext.prototype.sortInputProcedurePhrase = function () {
        return this.tryGetRuleContext(0, SortInputProcedurePhraseContext);
    };
    SortStatementContext.prototype.sortUsing = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SortUsingContext);
        }
        else {
            return this.getRuleContext(i, SortUsingContext);
        }
    };
    SortStatementContext.prototype.sortOutputProcedurePhrase = function () {
        return this.tryGetRuleContext(0, SortOutputProcedurePhraseContext);
    };
    SortStatementContext.prototype.sortGivingPhrase = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SortGivingPhraseContext);
        }
        else {
            return this.getRuleContext(i, SortGivingPhraseContext);
        }
    };
    Object.defineProperty(SortStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSortStatement) {
            listener.enterSortStatement(this);
        }
    };
    // @Override
    SortStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSortStatement) {
            listener.exitSortStatement(this);
        }
    };
    // @Override
    SortStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSortStatement) {
            return visitor.visitSortStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortStatementContext = SortStatementContext;
var SortOnKeyClauseContext = /** @class */ (function (_super) {
    __extends(SortOnKeyClauseContext, _super);
    function SortOnKeyClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortOnKeyClauseContext.prototype.ASCENDING = function () { return this.tryGetToken(Cobol85Parser.ASCENDING, 0); };
    SortOnKeyClauseContext.prototype.DESCENDING = function () { return this.tryGetToken(Cobol85Parser.DESCENDING, 0); };
    SortOnKeyClauseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    SortOnKeyClauseContext.prototype.KEY = function () { return this.tryGetToken(Cobol85Parser.KEY, 0); };
    SortOnKeyClauseContext.prototype.qualifiedDataName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedDataNameContext);
        }
        else {
            return this.getRuleContext(i, QualifiedDataNameContext);
        }
    };
    Object.defineProperty(SortOnKeyClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortOnKeyClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortOnKeyClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterSortOnKeyClause) {
            listener.enterSortOnKeyClause(this);
        }
    };
    // @Override
    SortOnKeyClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitSortOnKeyClause) {
            listener.exitSortOnKeyClause(this);
        }
    };
    // @Override
    SortOnKeyClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitSortOnKeyClause) {
            return visitor.visitSortOnKeyClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortOnKeyClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortOnKeyClauseContext = SortOnKeyClauseContext;
var SortDuplicatesPhraseContext = /** @class */ (function (_super) {
    __extends(SortDuplicatesPhraseContext, _super);
    function SortDuplicatesPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortDuplicatesPhraseContext.prototype.DUPLICATES = function () { return this.getToken(Cobol85Parser.DUPLICATES, 0); };
    SortDuplicatesPhraseContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    SortDuplicatesPhraseContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    SortDuplicatesPhraseContext.prototype.ORDER = function () { return this.tryGetToken(Cobol85Parser.ORDER, 0); };
    Object.defineProperty(SortDuplicatesPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortDuplicatesPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortDuplicatesPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterSortDuplicatesPhrase) {
            listener.enterSortDuplicatesPhrase(this);
        }
    };
    // @Override
    SortDuplicatesPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitSortDuplicatesPhrase) {
            listener.exitSortDuplicatesPhrase(this);
        }
    };
    // @Override
    SortDuplicatesPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitSortDuplicatesPhrase) {
            return visitor.visitSortDuplicatesPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortDuplicatesPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortDuplicatesPhraseContext = SortDuplicatesPhraseContext;
var SortCollatingSequencePhraseContext = /** @class */ (function (_super) {
    __extends(SortCollatingSequencePhraseContext, _super);
    function SortCollatingSequencePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortCollatingSequencePhraseContext.prototype.SEQUENCE = function () { return this.getToken(Cobol85Parser.SEQUENCE, 0); };
    SortCollatingSequencePhraseContext.prototype.COLLATING = function () { return this.tryGetToken(Cobol85Parser.COLLATING, 0); };
    SortCollatingSequencePhraseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    SortCollatingSequencePhraseContext.prototype.alphabetName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AlphabetNameContext);
        }
        else {
            return this.getRuleContext(i, AlphabetNameContext);
        }
    };
    SortCollatingSequencePhraseContext.prototype.sortCollatingAlphanumeric = function () {
        return this.tryGetRuleContext(0, SortCollatingAlphanumericContext);
    };
    SortCollatingSequencePhraseContext.prototype.sortCollatingNational = function () {
        return this.tryGetRuleContext(0, SortCollatingNationalContext);
    };
    Object.defineProperty(SortCollatingSequencePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortCollatingSequencePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortCollatingSequencePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterSortCollatingSequencePhrase) {
            listener.enterSortCollatingSequencePhrase(this);
        }
    };
    // @Override
    SortCollatingSequencePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitSortCollatingSequencePhrase) {
            listener.exitSortCollatingSequencePhrase(this);
        }
    };
    // @Override
    SortCollatingSequencePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitSortCollatingSequencePhrase) {
            return visitor.visitSortCollatingSequencePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortCollatingSequencePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortCollatingSequencePhraseContext = SortCollatingSequencePhraseContext;
var SortCollatingAlphanumericContext = /** @class */ (function (_super) {
    __extends(SortCollatingAlphanumericContext, _super);
    function SortCollatingAlphanumericContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortCollatingAlphanumericContext.prototype.ALPHANUMERIC = function () { return this.getToken(Cobol85Parser.ALPHANUMERIC, 0); };
    SortCollatingAlphanumericContext.prototype.IS = function () { return this.getToken(Cobol85Parser.IS, 0); };
    SortCollatingAlphanumericContext.prototype.alphabetName = function () {
        return this.getRuleContext(0, AlphabetNameContext);
    };
    SortCollatingAlphanumericContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    Object.defineProperty(SortCollatingAlphanumericContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortCollatingAlphanumeric; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortCollatingAlphanumericContext.prototype.enterRule = function (listener) {
        if (listener.enterSortCollatingAlphanumeric) {
            listener.enterSortCollatingAlphanumeric(this);
        }
    };
    // @Override
    SortCollatingAlphanumericContext.prototype.exitRule = function (listener) {
        if (listener.exitSortCollatingAlphanumeric) {
            listener.exitSortCollatingAlphanumeric(this);
        }
    };
    // @Override
    SortCollatingAlphanumericContext.prototype.accept = function (visitor) {
        if (visitor.visitSortCollatingAlphanumeric) {
            return visitor.visitSortCollatingAlphanumeric(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortCollatingAlphanumericContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortCollatingAlphanumericContext = SortCollatingAlphanumericContext;
var SortCollatingNationalContext = /** @class */ (function (_super) {
    __extends(SortCollatingNationalContext, _super);
    function SortCollatingNationalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortCollatingNationalContext.prototype.NATIONAL = function () { return this.getToken(Cobol85Parser.NATIONAL, 0); };
    SortCollatingNationalContext.prototype.alphabetName = function () {
        return this.getRuleContext(0, AlphabetNameContext);
    };
    SortCollatingNationalContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    SortCollatingNationalContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    Object.defineProperty(SortCollatingNationalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortCollatingNational; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortCollatingNationalContext.prototype.enterRule = function (listener) {
        if (listener.enterSortCollatingNational) {
            listener.enterSortCollatingNational(this);
        }
    };
    // @Override
    SortCollatingNationalContext.prototype.exitRule = function (listener) {
        if (listener.exitSortCollatingNational) {
            listener.exitSortCollatingNational(this);
        }
    };
    // @Override
    SortCollatingNationalContext.prototype.accept = function (visitor) {
        if (visitor.visitSortCollatingNational) {
            return visitor.visitSortCollatingNational(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortCollatingNationalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortCollatingNationalContext = SortCollatingNationalContext;
var SortInputProcedurePhraseContext = /** @class */ (function (_super) {
    __extends(SortInputProcedurePhraseContext, _super);
    function SortInputProcedurePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortInputProcedurePhraseContext.prototype.INPUT = function () { return this.getToken(Cobol85Parser.INPUT, 0); };
    SortInputProcedurePhraseContext.prototype.PROCEDURE = function () { return this.getToken(Cobol85Parser.PROCEDURE, 0); };
    SortInputProcedurePhraseContext.prototype.procedureName = function () {
        return this.getRuleContext(0, ProcedureNameContext);
    };
    SortInputProcedurePhraseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    SortInputProcedurePhraseContext.prototype.sortInputThrough = function () {
        return this.tryGetRuleContext(0, SortInputThroughContext);
    };
    Object.defineProperty(SortInputProcedurePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortInputProcedurePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortInputProcedurePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterSortInputProcedurePhrase) {
            listener.enterSortInputProcedurePhrase(this);
        }
    };
    // @Override
    SortInputProcedurePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitSortInputProcedurePhrase) {
            listener.exitSortInputProcedurePhrase(this);
        }
    };
    // @Override
    SortInputProcedurePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitSortInputProcedurePhrase) {
            return visitor.visitSortInputProcedurePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortInputProcedurePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortInputProcedurePhraseContext = SortInputProcedurePhraseContext;
var SortInputThroughContext = /** @class */ (function (_super) {
    __extends(SortInputThroughContext, _super);
    function SortInputThroughContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortInputThroughContext.prototype.procedureName = function () {
        return this.getRuleContext(0, ProcedureNameContext);
    };
    SortInputThroughContext.prototype.THROUGH = function () { return this.tryGetToken(Cobol85Parser.THROUGH, 0); };
    SortInputThroughContext.prototype.THRU = function () { return this.tryGetToken(Cobol85Parser.THRU, 0); };
    Object.defineProperty(SortInputThroughContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortInputThrough; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortInputThroughContext.prototype.enterRule = function (listener) {
        if (listener.enterSortInputThrough) {
            listener.enterSortInputThrough(this);
        }
    };
    // @Override
    SortInputThroughContext.prototype.exitRule = function (listener) {
        if (listener.exitSortInputThrough) {
            listener.exitSortInputThrough(this);
        }
    };
    // @Override
    SortInputThroughContext.prototype.accept = function (visitor) {
        if (visitor.visitSortInputThrough) {
            return visitor.visitSortInputThrough(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortInputThroughContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortInputThroughContext = SortInputThroughContext;
var SortUsingContext = /** @class */ (function (_super) {
    __extends(SortUsingContext, _super);
    function SortUsingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortUsingContext.prototype.USING = function () { return this.getToken(Cobol85Parser.USING, 0); };
    SortUsingContext.prototype.fileName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileNameContext);
        }
        else {
            return this.getRuleContext(i, FileNameContext);
        }
    };
    Object.defineProperty(SortUsingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortUsing; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortUsingContext.prototype.enterRule = function (listener) {
        if (listener.enterSortUsing) {
            listener.enterSortUsing(this);
        }
    };
    // @Override
    SortUsingContext.prototype.exitRule = function (listener) {
        if (listener.exitSortUsing) {
            listener.exitSortUsing(this);
        }
    };
    // @Override
    SortUsingContext.prototype.accept = function (visitor) {
        if (visitor.visitSortUsing) {
            return visitor.visitSortUsing(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortUsingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortUsingContext = SortUsingContext;
var SortOutputProcedurePhraseContext = /** @class */ (function (_super) {
    __extends(SortOutputProcedurePhraseContext, _super);
    function SortOutputProcedurePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortOutputProcedurePhraseContext.prototype.OUTPUT = function () { return this.getToken(Cobol85Parser.OUTPUT, 0); };
    SortOutputProcedurePhraseContext.prototype.PROCEDURE = function () { return this.getToken(Cobol85Parser.PROCEDURE, 0); };
    SortOutputProcedurePhraseContext.prototype.procedureName = function () {
        return this.getRuleContext(0, ProcedureNameContext);
    };
    SortOutputProcedurePhraseContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    SortOutputProcedurePhraseContext.prototype.sortOutputThrough = function () {
        return this.tryGetRuleContext(0, SortOutputThroughContext);
    };
    Object.defineProperty(SortOutputProcedurePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortOutputProcedurePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortOutputProcedurePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterSortOutputProcedurePhrase) {
            listener.enterSortOutputProcedurePhrase(this);
        }
    };
    // @Override
    SortOutputProcedurePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitSortOutputProcedurePhrase) {
            listener.exitSortOutputProcedurePhrase(this);
        }
    };
    // @Override
    SortOutputProcedurePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitSortOutputProcedurePhrase) {
            return visitor.visitSortOutputProcedurePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortOutputProcedurePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortOutputProcedurePhraseContext = SortOutputProcedurePhraseContext;
var SortOutputThroughContext = /** @class */ (function (_super) {
    __extends(SortOutputThroughContext, _super);
    function SortOutputThroughContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortOutputThroughContext.prototype.procedureName = function () {
        return this.getRuleContext(0, ProcedureNameContext);
    };
    SortOutputThroughContext.prototype.THROUGH = function () { return this.tryGetToken(Cobol85Parser.THROUGH, 0); };
    SortOutputThroughContext.prototype.THRU = function () { return this.tryGetToken(Cobol85Parser.THRU, 0); };
    Object.defineProperty(SortOutputThroughContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortOutputThrough; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortOutputThroughContext.prototype.enterRule = function (listener) {
        if (listener.enterSortOutputThrough) {
            listener.enterSortOutputThrough(this);
        }
    };
    // @Override
    SortOutputThroughContext.prototype.exitRule = function (listener) {
        if (listener.exitSortOutputThrough) {
            listener.exitSortOutputThrough(this);
        }
    };
    // @Override
    SortOutputThroughContext.prototype.accept = function (visitor) {
        if (visitor.visitSortOutputThrough) {
            return visitor.visitSortOutputThrough(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortOutputThroughContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortOutputThroughContext = SortOutputThroughContext;
var SortGivingPhraseContext = /** @class */ (function (_super) {
    __extends(SortGivingPhraseContext, _super);
    function SortGivingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortGivingPhraseContext.prototype.GIVING = function () { return this.getToken(Cobol85Parser.GIVING, 0); };
    SortGivingPhraseContext.prototype.sortGiving = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SortGivingContext);
        }
        else {
            return this.getRuleContext(i, SortGivingContext);
        }
    };
    Object.defineProperty(SortGivingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortGivingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortGivingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterSortGivingPhrase) {
            listener.enterSortGivingPhrase(this);
        }
    };
    // @Override
    SortGivingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitSortGivingPhrase) {
            listener.exitSortGivingPhrase(this);
        }
    };
    // @Override
    SortGivingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitSortGivingPhrase) {
            return visitor.visitSortGivingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortGivingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortGivingPhraseContext = SortGivingPhraseContext;
var SortGivingContext = /** @class */ (function (_super) {
    __extends(SortGivingContext, _super);
    function SortGivingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SortGivingContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    SortGivingContext.prototype.LOCK = function () { return this.tryGetToken(Cobol85Parser.LOCK, 0); };
    SortGivingContext.prototype.SAVE = function () { return this.tryGetToken(Cobol85Parser.SAVE, 0); };
    SortGivingContext.prototype.NO = function () { return this.tryGetToken(Cobol85Parser.NO, 0); };
    SortGivingContext.prototype.REWIND = function () { return this.tryGetToken(Cobol85Parser.REWIND, 0); };
    SortGivingContext.prototype.CRUNCH = function () { return this.tryGetToken(Cobol85Parser.CRUNCH, 0); };
    SortGivingContext.prototype.RELEASE = function () { return this.tryGetToken(Cobol85Parser.RELEASE, 0); };
    SortGivingContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    SortGivingContext.prototype.REMOVE = function () { return this.tryGetToken(Cobol85Parser.REMOVE, 0); };
    Object.defineProperty(SortGivingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sortGiving; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SortGivingContext.prototype.enterRule = function (listener) {
        if (listener.enterSortGiving) {
            listener.enterSortGiving(this);
        }
    };
    // @Override
    SortGivingContext.prototype.exitRule = function (listener) {
        if (listener.exitSortGiving) {
            listener.exitSortGiving(this);
        }
    };
    // @Override
    SortGivingContext.prototype.accept = function (visitor) {
        if (visitor.visitSortGiving) {
            return visitor.visitSortGiving(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SortGivingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SortGivingContext = SortGivingContext;
var StartStatementContext = /** @class */ (function (_super) {
    __extends(StartStatementContext, _super);
    function StartStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StartStatementContext.prototype.START = function () { return this.getToken(Cobol85Parser.START, 0); };
    StartStatementContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    StartStatementContext.prototype.startKey = function () {
        return this.tryGetRuleContext(0, StartKeyContext);
    };
    StartStatementContext.prototype.invalidKeyPhrase = function () {
        return this.tryGetRuleContext(0, InvalidKeyPhraseContext);
    };
    StartStatementContext.prototype.notInvalidKeyPhrase = function () {
        return this.tryGetRuleContext(0, NotInvalidKeyPhraseContext);
    };
    StartStatementContext.prototype.END_START = function () { return this.tryGetToken(Cobol85Parser.END_START, 0); };
    Object.defineProperty(StartStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_startStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StartStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterStartStatement) {
            listener.enterStartStatement(this);
        }
    };
    // @Override
    StartStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitStartStatement) {
            listener.exitStartStatement(this);
        }
    };
    // @Override
    StartStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitStartStatement) {
            return visitor.visitStartStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StartStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StartStatementContext = StartStatementContext;
var StartKeyContext = /** @class */ (function (_super) {
    __extends(StartKeyContext, _super);
    function StartKeyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StartKeyContext.prototype.KEY = function () { return this.getToken(Cobol85Parser.KEY, 0); };
    StartKeyContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    StartKeyContext.prototype.EQUAL = function () { return this.tryGetToken(Cobol85Parser.EQUAL, 0); };
    StartKeyContext.prototype.EQUALCHAR = function () { return this.tryGetToken(Cobol85Parser.EQUALCHAR, 0); };
    StartKeyContext.prototype.GREATER = function () { return this.tryGetToken(Cobol85Parser.GREATER, 0); };
    StartKeyContext.prototype.MORETHANCHAR = function () { return this.tryGetToken(Cobol85Parser.MORETHANCHAR, 0); };
    StartKeyContext.prototype.NOT = function () { return this.tryGetToken(Cobol85Parser.NOT, 0); };
    StartKeyContext.prototype.LESS = function () { return this.tryGetToken(Cobol85Parser.LESS, 0); };
    StartKeyContext.prototype.LESSTHANCHAR = function () { return this.tryGetToken(Cobol85Parser.LESSTHANCHAR, 0); };
    StartKeyContext.prototype.OR = function () { return this.tryGetToken(Cobol85Parser.OR, 0); };
    StartKeyContext.prototype.MORETHANOREQUAL = function () { return this.tryGetToken(Cobol85Parser.MORETHANOREQUAL, 0); };
    StartKeyContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    StartKeyContext.prototype.TO = function () { return this.tryGetToken(Cobol85Parser.TO, 0); };
    StartKeyContext.prototype.THAN = function () { return this.tryGetToken(Cobol85Parser.THAN, 0); };
    Object.defineProperty(StartKeyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_startKey; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StartKeyContext.prototype.enterRule = function (listener) {
        if (listener.enterStartKey) {
            listener.enterStartKey(this);
        }
    };
    // @Override
    StartKeyContext.prototype.exitRule = function (listener) {
        if (listener.exitStartKey) {
            listener.exitStartKey(this);
        }
    };
    // @Override
    StartKeyContext.prototype.accept = function (visitor) {
        if (visitor.visitStartKey) {
            return visitor.visitStartKey(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StartKeyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StartKeyContext = StartKeyContext;
var StopStatementContext = /** @class */ (function (_super) {
    __extends(StopStatementContext, _super);
    function StopStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StopStatementContext.prototype.STOP = function () { return this.getToken(Cobol85Parser.STOP, 0); };
    StopStatementContext.prototype.RUN = function () { return this.tryGetToken(Cobol85Parser.RUN, 0); };
    StopStatementContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(StopStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_stopStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StopStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterStopStatement) {
            listener.enterStopStatement(this);
        }
    };
    // @Override
    StopStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitStopStatement) {
            listener.exitStopStatement(this);
        }
    };
    // @Override
    StopStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitStopStatement) {
            return visitor.visitStopStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StopStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StopStatementContext = StopStatementContext;
var StringStatementContext = /** @class */ (function (_super) {
    __extends(StringStatementContext, _super);
    function StringStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StringStatementContext.prototype.STRING = function () { return this.getToken(Cobol85Parser.STRING, 0); };
    StringStatementContext.prototype.stringIntoPhrase = function () {
        return this.getRuleContext(0, StringIntoPhraseContext);
    };
    StringStatementContext.prototype.stringSendingPhrase = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StringSendingPhraseContext);
        }
        else {
            return this.getRuleContext(i, StringSendingPhraseContext);
        }
    };
    StringStatementContext.prototype.stringWithPointerPhrase = function () {
        return this.tryGetRuleContext(0, StringWithPointerPhraseContext);
    };
    StringStatementContext.prototype.onOverflowPhrase = function () {
        return this.tryGetRuleContext(0, OnOverflowPhraseContext);
    };
    StringStatementContext.prototype.notOnOverflowPhrase = function () {
        return this.tryGetRuleContext(0, NotOnOverflowPhraseContext);
    };
    StringStatementContext.prototype.END_STRING = function () { return this.tryGetToken(Cobol85Parser.END_STRING, 0); };
    Object.defineProperty(StringStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_stringStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StringStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterStringStatement) {
            listener.enterStringStatement(this);
        }
    };
    // @Override
    StringStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitStringStatement) {
            listener.exitStringStatement(this);
        }
    };
    // @Override
    StringStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitStringStatement) {
            return visitor.visitStringStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StringStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StringStatementContext = StringStatementContext;
var StringSendingPhraseContext = /** @class */ (function (_super) {
    __extends(StringSendingPhraseContext, _super);
    function StringSendingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StringSendingPhraseContext.prototype.stringDelimitedByPhrase = function () {
        return this.tryGetRuleContext(0, StringDelimitedByPhraseContext);
    };
    StringSendingPhraseContext.prototype.stringForPhrase = function () {
        return this.tryGetRuleContext(0, StringForPhraseContext);
    };
    StringSendingPhraseContext.prototype.stringSending = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StringSendingContext);
        }
        else {
            return this.getRuleContext(i, StringSendingContext);
        }
    };
    Object.defineProperty(StringSendingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_stringSendingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StringSendingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterStringSendingPhrase) {
            listener.enterStringSendingPhrase(this);
        }
    };
    // @Override
    StringSendingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitStringSendingPhrase) {
            listener.exitStringSendingPhrase(this);
        }
    };
    // @Override
    StringSendingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitStringSendingPhrase) {
            return visitor.visitStringSendingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StringSendingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StringSendingPhraseContext = StringSendingPhraseContext;
var StringSendingContext = /** @class */ (function (_super) {
    __extends(StringSendingContext, _super);
    function StringSendingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StringSendingContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    StringSendingContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(StringSendingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_stringSending; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StringSendingContext.prototype.enterRule = function (listener) {
        if (listener.enterStringSending) {
            listener.enterStringSending(this);
        }
    };
    // @Override
    StringSendingContext.prototype.exitRule = function (listener) {
        if (listener.exitStringSending) {
            listener.exitStringSending(this);
        }
    };
    // @Override
    StringSendingContext.prototype.accept = function (visitor) {
        if (visitor.visitStringSending) {
            return visitor.visitStringSending(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StringSendingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StringSendingContext = StringSendingContext;
var StringDelimitedByPhraseContext = /** @class */ (function (_super) {
    __extends(StringDelimitedByPhraseContext, _super);
    function StringDelimitedByPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StringDelimitedByPhraseContext.prototype.DELIMITED = function () { return this.getToken(Cobol85Parser.DELIMITED, 0); };
    StringDelimitedByPhraseContext.prototype.SIZE = function () { return this.tryGetToken(Cobol85Parser.SIZE, 0); };
    StringDelimitedByPhraseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    StringDelimitedByPhraseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    StringDelimitedByPhraseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    Object.defineProperty(StringDelimitedByPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_stringDelimitedByPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StringDelimitedByPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterStringDelimitedByPhrase) {
            listener.enterStringDelimitedByPhrase(this);
        }
    };
    // @Override
    StringDelimitedByPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitStringDelimitedByPhrase) {
            listener.exitStringDelimitedByPhrase(this);
        }
    };
    // @Override
    StringDelimitedByPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitStringDelimitedByPhrase) {
            return visitor.visitStringDelimitedByPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StringDelimitedByPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StringDelimitedByPhraseContext = StringDelimitedByPhraseContext;
var StringForPhraseContext = /** @class */ (function (_super) {
    __extends(StringForPhraseContext, _super);
    function StringForPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StringForPhraseContext.prototype.FOR = function () { return this.getToken(Cobol85Parser.FOR, 0); };
    StringForPhraseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    StringForPhraseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(StringForPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_stringForPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StringForPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterStringForPhrase) {
            listener.enterStringForPhrase(this);
        }
    };
    // @Override
    StringForPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitStringForPhrase) {
            listener.exitStringForPhrase(this);
        }
    };
    // @Override
    StringForPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitStringForPhrase) {
            return visitor.visitStringForPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StringForPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StringForPhraseContext = StringForPhraseContext;
var StringIntoPhraseContext = /** @class */ (function (_super) {
    __extends(StringIntoPhraseContext, _super);
    function StringIntoPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StringIntoPhraseContext.prototype.INTO = function () { return this.getToken(Cobol85Parser.INTO, 0); };
    StringIntoPhraseContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(StringIntoPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_stringIntoPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StringIntoPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterStringIntoPhrase) {
            listener.enterStringIntoPhrase(this);
        }
    };
    // @Override
    StringIntoPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitStringIntoPhrase) {
            listener.exitStringIntoPhrase(this);
        }
    };
    // @Override
    StringIntoPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitStringIntoPhrase) {
            return visitor.visitStringIntoPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StringIntoPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StringIntoPhraseContext = StringIntoPhraseContext;
var StringWithPointerPhraseContext = /** @class */ (function (_super) {
    __extends(StringWithPointerPhraseContext, _super);
    function StringWithPointerPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StringWithPointerPhraseContext.prototype.POINTER = function () { return this.getToken(Cobol85Parser.POINTER, 0); };
    StringWithPointerPhraseContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    StringWithPointerPhraseContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(StringWithPointerPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_stringWithPointerPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StringWithPointerPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterStringWithPointerPhrase) {
            listener.enterStringWithPointerPhrase(this);
        }
    };
    // @Override
    StringWithPointerPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitStringWithPointerPhrase) {
            listener.exitStringWithPointerPhrase(this);
        }
    };
    // @Override
    StringWithPointerPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitStringWithPointerPhrase) {
            return visitor.visitStringWithPointerPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StringWithPointerPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StringWithPointerPhraseContext = StringWithPointerPhraseContext;
var SubtractStatementContext = /** @class */ (function (_super) {
    __extends(SubtractStatementContext, _super);
    function SubtractStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubtractStatementContext.prototype.SUBTRACT = function () { return this.getToken(Cobol85Parser.SUBTRACT, 0); };
    SubtractStatementContext.prototype.subtractFromStatement = function () {
        return this.tryGetRuleContext(0, SubtractFromStatementContext);
    };
    SubtractStatementContext.prototype.subtractFromGivingStatement = function () {
        return this.tryGetRuleContext(0, SubtractFromGivingStatementContext);
    };
    SubtractStatementContext.prototype.subtractCorrespondingStatement = function () {
        return this.tryGetRuleContext(0, SubtractCorrespondingStatementContext);
    };
    SubtractStatementContext.prototype.onSizeErrorPhrase = function () {
        return this.tryGetRuleContext(0, OnSizeErrorPhraseContext);
    };
    SubtractStatementContext.prototype.notOnSizeErrorPhrase = function () {
        return this.tryGetRuleContext(0, NotOnSizeErrorPhraseContext);
    };
    SubtractStatementContext.prototype.END_SUBTRACT = function () { return this.tryGetToken(Cobol85Parser.END_SUBTRACT, 0); };
    Object.defineProperty(SubtractStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_subtractStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubtractStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSubtractStatement) {
            listener.enterSubtractStatement(this);
        }
    };
    // @Override
    SubtractStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSubtractStatement) {
            listener.exitSubtractStatement(this);
        }
    };
    // @Override
    SubtractStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSubtractStatement) {
            return visitor.visitSubtractStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubtractStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubtractStatementContext = SubtractStatementContext;
var SubtractFromStatementContext = /** @class */ (function (_super) {
    __extends(SubtractFromStatementContext, _super);
    function SubtractFromStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubtractFromStatementContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    SubtractFromStatementContext.prototype.subtractSubtrahend = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubtractSubtrahendContext);
        }
        else {
            return this.getRuleContext(i, SubtractSubtrahendContext);
        }
    };
    SubtractFromStatementContext.prototype.subtractMinuend = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubtractMinuendContext);
        }
        else {
            return this.getRuleContext(i, SubtractMinuendContext);
        }
    };
    Object.defineProperty(SubtractFromStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_subtractFromStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubtractFromStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSubtractFromStatement) {
            listener.enterSubtractFromStatement(this);
        }
    };
    // @Override
    SubtractFromStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSubtractFromStatement) {
            listener.exitSubtractFromStatement(this);
        }
    };
    // @Override
    SubtractFromStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSubtractFromStatement) {
            return visitor.visitSubtractFromStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubtractFromStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubtractFromStatementContext = SubtractFromStatementContext;
var SubtractFromGivingStatementContext = /** @class */ (function (_super) {
    __extends(SubtractFromGivingStatementContext, _super);
    function SubtractFromGivingStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubtractFromGivingStatementContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    SubtractFromGivingStatementContext.prototype.subtractMinuendGiving = function () {
        return this.getRuleContext(0, SubtractMinuendGivingContext);
    };
    SubtractFromGivingStatementContext.prototype.GIVING = function () { return this.getToken(Cobol85Parser.GIVING, 0); };
    SubtractFromGivingStatementContext.prototype.subtractSubtrahend = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubtractSubtrahendContext);
        }
        else {
            return this.getRuleContext(i, SubtractSubtrahendContext);
        }
    };
    SubtractFromGivingStatementContext.prototype.subtractGiving = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubtractGivingContext);
        }
        else {
            return this.getRuleContext(i, SubtractGivingContext);
        }
    };
    Object.defineProperty(SubtractFromGivingStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_subtractFromGivingStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubtractFromGivingStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSubtractFromGivingStatement) {
            listener.enterSubtractFromGivingStatement(this);
        }
    };
    // @Override
    SubtractFromGivingStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSubtractFromGivingStatement) {
            listener.exitSubtractFromGivingStatement(this);
        }
    };
    // @Override
    SubtractFromGivingStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSubtractFromGivingStatement) {
            return visitor.visitSubtractFromGivingStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubtractFromGivingStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubtractFromGivingStatementContext = SubtractFromGivingStatementContext;
var SubtractCorrespondingStatementContext = /** @class */ (function (_super) {
    __extends(SubtractCorrespondingStatementContext, _super);
    function SubtractCorrespondingStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubtractCorrespondingStatementContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    SubtractCorrespondingStatementContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    SubtractCorrespondingStatementContext.prototype.subtractMinuendCorresponding = function () {
        return this.getRuleContext(0, SubtractMinuendCorrespondingContext);
    };
    SubtractCorrespondingStatementContext.prototype.CORRESPONDING = function () { return this.tryGetToken(Cobol85Parser.CORRESPONDING, 0); };
    SubtractCorrespondingStatementContext.prototype.CORR = function () { return this.tryGetToken(Cobol85Parser.CORR, 0); };
    Object.defineProperty(SubtractCorrespondingStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_subtractCorrespondingStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubtractCorrespondingStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSubtractCorrespondingStatement) {
            listener.enterSubtractCorrespondingStatement(this);
        }
    };
    // @Override
    SubtractCorrespondingStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSubtractCorrespondingStatement) {
            listener.exitSubtractCorrespondingStatement(this);
        }
    };
    // @Override
    SubtractCorrespondingStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSubtractCorrespondingStatement) {
            return visitor.visitSubtractCorrespondingStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubtractCorrespondingStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubtractCorrespondingStatementContext = SubtractCorrespondingStatementContext;
var SubtractSubtrahendContext = /** @class */ (function (_super) {
    __extends(SubtractSubtrahendContext, _super);
    function SubtractSubtrahendContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubtractSubtrahendContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    SubtractSubtrahendContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(SubtractSubtrahendContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_subtractSubtrahend; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubtractSubtrahendContext.prototype.enterRule = function (listener) {
        if (listener.enterSubtractSubtrahend) {
            listener.enterSubtractSubtrahend(this);
        }
    };
    // @Override
    SubtractSubtrahendContext.prototype.exitRule = function (listener) {
        if (listener.exitSubtractSubtrahend) {
            listener.exitSubtractSubtrahend(this);
        }
    };
    // @Override
    SubtractSubtrahendContext.prototype.accept = function (visitor) {
        if (visitor.visitSubtractSubtrahend) {
            return visitor.visitSubtractSubtrahend(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubtractSubtrahendContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubtractSubtrahendContext = SubtractSubtrahendContext;
var SubtractMinuendContext = /** @class */ (function (_super) {
    __extends(SubtractMinuendContext, _super);
    function SubtractMinuendContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubtractMinuendContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    SubtractMinuendContext.prototype.ROUNDED = function () { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); };
    Object.defineProperty(SubtractMinuendContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_subtractMinuend; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubtractMinuendContext.prototype.enterRule = function (listener) {
        if (listener.enterSubtractMinuend) {
            listener.enterSubtractMinuend(this);
        }
    };
    // @Override
    SubtractMinuendContext.prototype.exitRule = function (listener) {
        if (listener.exitSubtractMinuend) {
            listener.exitSubtractMinuend(this);
        }
    };
    // @Override
    SubtractMinuendContext.prototype.accept = function (visitor) {
        if (visitor.visitSubtractMinuend) {
            return visitor.visitSubtractMinuend(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubtractMinuendContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubtractMinuendContext = SubtractMinuendContext;
var SubtractMinuendGivingContext = /** @class */ (function (_super) {
    __extends(SubtractMinuendGivingContext, _super);
    function SubtractMinuendGivingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubtractMinuendGivingContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    SubtractMinuendGivingContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(SubtractMinuendGivingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_subtractMinuendGiving; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubtractMinuendGivingContext.prototype.enterRule = function (listener) {
        if (listener.enterSubtractMinuendGiving) {
            listener.enterSubtractMinuendGiving(this);
        }
    };
    // @Override
    SubtractMinuendGivingContext.prototype.exitRule = function (listener) {
        if (listener.exitSubtractMinuendGiving) {
            listener.exitSubtractMinuendGiving(this);
        }
    };
    // @Override
    SubtractMinuendGivingContext.prototype.accept = function (visitor) {
        if (visitor.visitSubtractMinuendGiving) {
            return visitor.visitSubtractMinuendGiving(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubtractMinuendGivingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubtractMinuendGivingContext = SubtractMinuendGivingContext;
var SubtractGivingContext = /** @class */ (function (_super) {
    __extends(SubtractGivingContext, _super);
    function SubtractGivingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubtractGivingContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    SubtractGivingContext.prototype.ROUNDED = function () { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); };
    Object.defineProperty(SubtractGivingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_subtractGiving; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubtractGivingContext.prototype.enterRule = function (listener) {
        if (listener.enterSubtractGiving) {
            listener.enterSubtractGiving(this);
        }
    };
    // @Override
    SubtractGivingContext.prototype.exitRule = function (listener) {
        if (listener.exitSubtractGiving) {
            listener.exitSubtractGiving(this);
        }
    };
    // @Override
    SubtractGivingContext.prototype.accept = function (visitor) {
        if (visitor.visitSubtractGiving) {
            return visitor.visitSubtractGiving(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubtractGivingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubtractGivingContext = SubtractGivingContext;
var SubtractMinuendCorrespondingContext = /** @class */ (function (_super) {
    __extends(SubtractMinuendCorrespondingContext, _super);
    function SubtractMinuendCorrespondingContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubtractMinuendCorrespondingContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    SubtractMinuendCorrespondingContext.prototype.ROUNDED = function () { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); };
    Object.defineProperty(SubtractMinuendCorrespondingContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_subtractMinuendCorresponding; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubtractMinuendCorrespondingContext.prototype.enterRule = function (listener) {
        if (listener.enterSubtractMinuendCorresponding) {
            listener.enterSubtractMinuendCorresponding(this);
        }
    };
    // @Override
    SubtractMinuendCorrespondingContext.prototype.exitRule = function (listener) {
        if (listener.exitSubtractMinuendCorresponding) {
            listener.exitSubtractMinuendCorresponding(this);
        }
    };
    // @Override
    SubtractMinuendCorrespondingContext.prototype.accept = function (visitor) {
        if (visitor.visitSubtractMinuendCorresponding) {
            return visitor.visitSubtractMinuendCorresponding(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubtractMinuendCorrespondingContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubtractMinuendCorrespondingContext = SubtractMinuendCorrespondingContext;
var TerminateStatementContext = /** @class */ (function (_super) {
    __extends(TerminateStatementContext, _super);
    function TerminateStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TerminateStatementContext.prototype.TERMINATE = function () { return this.getToken(Cobol85Parser.TERMINATE, 0); };
    TerminateStatementContext.prototype.reportName = function () {
        return this.getRuleContext(0, ReportNameContext);
    };
    Object.defineProperty(TerminateStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_terminateStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TerminateStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterTerminateStatement) {
            listener.enterTerminateStatement(this);
        }
    };
    // @Override
    TerminateStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitTerminateStatement) {
            listener.exitTerminateStatement(this);
        }
    };
    // @Override
    TerminateStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitTerminateStatement) {
            return visitor.visitTerminateStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TerminateStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TerminateStatementContext = TerminateStatementContext;
var UnstringStatementContext = /** @class */ (function (_super) {
    __extends(UnstringStatementContext, _super);
    function UnstringStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnstringStatementContext.prototype.UNSTRING = function () { return this.getToken(Cobol85Parser.UNSTRING, 0); };
    UnstringStatementContext.prototype.unstringSendingPhrase = function () {
        return this.getRuleContext(0, UnstringSendingPhraseContext);
    };
    UnstringStatementContext.prototype.unstringIntoPhrase = function () {
        return this.getRuleContext(0, UnstringIntoPhraseContext);
    };
    UnstringStatementContext.prototype.unstringWithPointerPhrase = function () {
        return this.tryGetRuleContext(0, UnstringWithPointerPhraseContext);
    };
    UnstringStatementContext.prototype.unstringTallyingPhrase = function () {
        return this.tryGetRuleContext(0, UnstringTallyingPhraseContext);
    };
    UnstringStatementContext.prototype.onOverflowPhrase = function () {
        return this.tryGetRuleContext(0, OnOverflowPhraseContext);
    };
    UnstringStatementContext.prototype.notOnOverflowPhrase = function () {
        return this.tryGetRuleContext(0, NotOnOverflowPhraseContext);
    };
    UnstringStatementContext.prototype.END_UNSTRING = function () { return this.tryGetToken(Cobol85Parser.END_UNSTRING, 0); };
    Object.defineProperty(UnstringStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_unstringStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnstringStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterUnstringStatement) {
            listener.enterUnstringStatement(this);
        }
    };
    // @Override
    UnstringStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitUnstringStatement) {
            listener.exitUnstringStatement(this);
        }
    };
    // @Override
    UnstringStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitUnstringStatement) {
            return visitor.visitUnstringStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnstringStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnstringStatementContext = UnstringStatementContext;
var UnstringSendingPhraseContext = /** @class */ (function (_super) {
    __extends(UnstringSendingPhraseContext, _super);
    function UnstringSendingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnstringSendingPhraseContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    UnstringSendingPhraseContext.prototype.unstringDelimitedByPhrase = function () {
        return this.tryGetRuleContext(0, UnstringDelimitedByPhraseContext);
    };
    UnstringSendingPhraseContext.prototype.unstringOrAllPhrase = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(UnstringOrAllPhraseContext);
        }
        else {
            return this.getRuleContext(i, UnstringOrAllPhraseContext);
        }
    };
    Object.defineProperty(UnstringSendingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_unstringSendingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnstringSendingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterUnstringSendingPhrase) {
            listener.enterUnstringSendingPhrase(this);
        }
    };
    // @Override
    UnstringSendingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitUnstringSendingPhrase) {
            listener.exitUnstringSendingPhrase(this);
        }
    };
    // @Override
    UnstringSendingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitUnstringSendingPhrase) {
            return visitor.visitUnstringSendingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnstringSendingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnstringSendingPhraseContext = UnstringSendingPhraseContext;
var UnstringDelimitedByPhraseContext = /** @class */ (function (_super) {
    __extends(UnstringDelimitedByPhraseContext, _super);
    function UnstringDelimitedByPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnstringDelimitedByPhraseContext.prototype.DELIMITED = function () { return this.getToken(Cobol85Parser.DELIMITED, 0); };
    UnstringDelimitedByPhraseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    UnstringDelimitedByPhraseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    UnstringDelimitedByPhraseContext.prototype.BY = function () { return this.tryGetToken(Cobol85Parser.BY, 0); };
    UnstringDelimitedByPhraseContext.prototype.ALL = function () { return this.tryGetToken(Cobol85Parser.ALL, 0); };
    Object.defineProperty(UnstringDelimitedByPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_unstringDelimitedByPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnstringDelimitedByPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterUnstringDelimitedByPhrase) {
            listener.enterUnstringDelimitedByPhrase(this);
        }
    };
    // @Override
    UnstringDelimitedByPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitUnstringDelimitedByPhrase) {
            listener.exitUnstringDelimitedByPhrase(this);
        }
    };
    // @Override
    UnstringDelimitedByPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitUnstringDelimitedByPhrase) {
            return visitor.visitUnstringDelimitedByPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnstringDelimitedByPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnstringDelimitedByPhraseContext = UnstringDelimitedByPhraseContext;
var UnstringOrAllPhraseContext = /** @class */ (function (_super) {
    __extends(UnstringOrAllPhraseContext, _super);
    function UnstringOrAllPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnstringOrAllPhraseContext.prototype.OR = function () { return this.getToken(Cobol85Parser.OR, 0); };
    UnstringOrAllPhraseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    UnstringOrAllPhraseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    UnstringOrAllPhraseContext.prototype.ALL = function () { return this.tryGetToken(Cobol85Parser.ALL, 0); };
    Object.defineProperty(UnstringOrAllPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_unstringOrAllPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnstringOrAllPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterUnstringOrAllPhrase) {
            listener.enterUnstringOrAllPhrase(this);
        }
    };
    // @Override
    UnstringOrAllPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitUnstringOrAllPhrase) {
            listener.exitUnstringOrAllPhrase(this);
        }
    };
    // @Override
    UnstringOrAllPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitUnstringOrAllPhrase) {
            return visitor.visitUnstringOrAllPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnstringOrAllPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnstringOrAllPhraseContext = UnstringOrAllPhraseContext;
var UnstringIntoPhraseContext = /** @class */ (function (_super) {
    __extends(UnstringIntoPhraseContext, _super);
    function UnstringIntoPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnstringIntoPhraseContext.prototype.INTO = function () { return this.getToken(Cobol85Parser.INTO, 0); };
    UnstringIntoPhraseContext.prototype.unstringInto = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(UnstringIntoContext);
        }
        else {
            return this.getRuleContext(i, UnstringIntoContext);
        }
    };
    Object.defineProperty(UnstringIntoPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_unstringIntoPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnstringIntoPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterUnstringIntoPhrase) {
            listener.enterUnstringIntoPhrase(this);
        }
    };
    // @Override
    UnstringIntoPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitUnstringIntoPhrase) {
            listener.exitUnstringIntoPhrase(this);
        }
    };
    // @Override
    UnstringIntoPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitUnstringIntoPhrase) {
            return visitor.visitUnstringIntoPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnstringIntoPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnstringIntoPhraseContext = UnstringIntoPhraseContext;
var UnstringIntoContext = /** @class */ (function (_super) {
    __extends(UnstringIntoContext, _super);
    function UnstringIntoContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnstringIntoContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    UnstringIntoContext.prototype.unstringDelimiterIn = function () {
        return this.tryGetRuleContext(0, UnstringDelimiterInContext);
    };
    UnstringIntoContext.prototype.unstringCountIn = function () {
        return this.tryGetRuleContext(0, UnstringCountInContext);
    };
    Object.defineProperty(UnstringIntoContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_unstringInto; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnstringIntoContext.prototype.enterRule = function (listener) {
        if (listener.enterUnstringInto) {
            listener.enterUnstringInto(this);
        }
    };
    // @Override
    UnstringIntoContext.prototype.exitRule = function (listener) {
        if (listener.exitUnstringInto) {
            listener.exitUnstringInto(this);
        }
    };
    // @Override
    UnstringIntoContext.prototype.accept = function (visitor) {
        if (visitor.visitUnstringInto) {
            return visitor.visitUnstringInto(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnstringIntoContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnstringIntoContext = UnstringIntoContext;
var UnstringDelimiterInContext = /** @class */ (function (_super) {
    __extends(UnstringDelimiterInContext, _super);
    function UnstringDelimiterInContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnstringDelimiterInContext.prototype.DELIMITER = function () { return this.getToken(Cobol85Parser.DELIMITER, 0); };
    UnstringDelimiterInContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    UnstringDelimiterInContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    Object.defineProperty(UnstringDelimiterInContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_unstringDelimiterIn; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnstringDelimiterInContext.prototype.enterRule = function (listener) {
        if (listener.enterUnstringDelimiterIn) {
            listener.enterUnstringDelimiterIn(this);
        }
    };
    // @Override
    UnstringDelimiterInContext.prototype.exitRule = function (listener) {
        if (listener.exitUnstringDelimiterIn) {
            listener.exitUnstringDelimiterIn(this);
        }
    };
    // @Override
    UnstringDelimiterInContext.prototype.accept = function (visitor) {
        if (visitor.visitUnstringDelimiterIn) {
            return visitor.visitUnstringDelimiterIn(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnstringDelimiterInContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnstringDelimiterInContext = UnstringDelimiterInContext;
var UnstringCountInContext = /** @class */ (function (_super) {
    __extends(UnstringCountInContext, _super);
    function UnstringCountInContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnstringCountInContext.prototype.COUNT = function () { return this.getToken(Cobol85Parser.COUNT, 0); };
    UnstringCountInContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    UnstringCountInContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    Object.defineProperty(UnstringCountInContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_unstringCountIn; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnstringCountInContext.prototype.enterRule = function (listener) {
        if (listener.enterUnstringCountIn) {
            listener.enterUnstringCountIn(this);
        }
    };
    // @Override
    UnstringCountInContext.prototype.exitRule = function (listener) {
        if (listener.exitUnstringCountIn) {
            listener.exitUnstringCountIn(this);
        }
    };
    // @Override
    UnstringCountInContext.prototype.accept = function (visitor) {
        if (visitor.visitUnstringCountIn) {
            return visitor.visitUnstringCountIn(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnstringCountInContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnstringCountInContext = UnstringCountInContext;
var UnstringWithPointerPhraseContext = /** @class */ (function (_super) {
    __extends(UnstringWithPointerPhraseContext, _super);
    function UnstringWithPointerPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnstringWithPointerPhraseContext.prototype.POINTER = function () { return this.getToken(Cobol85Parser.POINTER, 0); };
    UnstringWithPointerPhraseContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    UnstringWithPointerPhraseContext.prototype.WITH = function () { return this.tryGetToken(Cobol85Parser.WITH, 0); };
    Object.defineProperty(UnstringWithPointerPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_unstringWithPointerPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnstringWithPointerPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterUnstringWithPointerPhrase) {
            listener.enterUnstringWithPointerPhrase(this);
        }
    };
    // @Override
    UnstringWithPointerPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitUnstringWithPointerPhrase) {
            listener.exitUnstringWithPointerPhrase(this);
        }
    };
    // @Override
    UnstringWithPointerPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitUnstringWithPointerPhrase) {
            return visitor.visitUnstringWithPointerPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnstringWithPointerPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnstringWithPointerPhraseContext = UnstringWithPointerPhraseContext;
var UnstringTallyingPhraseContext = /** @class */ (function (_super) {
    __extends(UnstringTallyingPhraseContext, _super);
    function UnstringTallyingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnstringTallyingPhraseContext.prototype.TALLYING = function () { return this.getToken(Cobol85Parser.TALLYING, 0); };
    UnstringTallyingPhraseContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    UnstringTallyingPhraseContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    Object.defineProperty(UnstringTallyingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_unstringTallyingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnstringTallyingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterUnstringTallyingPhrase) {
            listener.enterUnstringTallyingPhrase(this);
        }
    };
    // @Override
    UnstringTallyingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitUnstringTallyingPhrase) {
            listener.exitUnstringTallyingPhrase(this);
        }
    };
    // @Override
    UnstringTallyingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitUnstringTallyingPhrase) {
            return visitor.visitUnstringTallyingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnstringTallyingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnstringTallyingPhraseContext = UnstringTallyingPhraseContext;
var UseStatementContext = /** @class */ (function (_super) {
    __extends(UseStatementContext, _super);
    function UseStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UseStatementContext.prototype.USE = function () { return this.getToken(Cobol85Parser.USE, 0); };
    UseStatementContext.prototype.useAfterClause = function () {
        return this.tryGetRuleContext(0, UseAfterClauseContext);
    };
    UseStatementContext.prototype.useDebugClause = function () {
        return this.tryGetRuleContext(0, UseDebugClauseContext);
    };
    Object.defineProperty(UseStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_useStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UseStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterUseStatement) {
            listener.enterUseStatement(this);
        }
    };
    // @Override
    UseStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitUseStatement) {
            listener.exitUseStatement(this);
        }
    };
    // @Override
    UseStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitUseStatement) {
            return visitor.visitUseStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UseStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UseStatementContext = UseStatementContext;
var UseAfterClauseContext = /** @class */ (function (_super) {
    __extends(UseAfterClauseContext, _super);
    function UseAfterClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UseAfterClauseContext.prototype.AFTER = function () { return this.getToken(Cobol85Parser.AFTER, 0); };
    UseAfterClauseContext.prototype.PROCEDURE = function () { return this.getToken(Cobol85Parser.PROCEDURE, 0); };
    UseAfterClauseContext.prototype.useAfterOn = function () {
        return this.getRuleContext(0, UseAfterOnContext);
    };
    UseAfterClauseContext.prototype.EXCEPTION = function () { return this.tryGetToken(Cobol85Parser.EXCEPTION, 0); };
    UseAfterClauseContext.prototype.ERROR = function () { return this.tryGetToken(Cobol85Parser.ERROR, 0); };
    UseAfterClauseContext.prototype.GLOBAL = function () { return this.tryGetToken(Cobol85Parser.GLOBAL, 0); };
    UseAfterClauseContext.prototype.STANDARD = function () { return this.tryGetToken(Cobol85Parser.STANDARD, 0); };
    UseAfterClauseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    Object.defineProperty(UseAfterClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_useAfterClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UseAfterClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterUseAfterClause) {
            listener.enterUseAfterClause(this);
        }
    };
    // @Override
    UseAfterClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitUseAfterClause) {
            listener.exitUseAfterClause(this);
        }
    };
    // @Override
    UseAfterClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitUseAfterClause) {
            return visitor.visitUseAfterClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UseAfterClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UseAfterClauseContext = UseAfterClauseContext;
var UseAfterOnContext = /** @class */ (function (_super) {
    __extends(UseAfterOnContext, _super);
    function UseAfterOnContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UseAfterOnContext.prototype.INPUT = function () { return this.tryGetToken(Cobol85Parser.INPUT, 0); };
    UseAfterOnContext.prototype.OUTPUT = function () { return this.tryGetToken(Cobol85Parser.OUTPUT, 0); };
    UseAfterOnContext.prototype.I_O = function () { return this.tryGetToken(Cobol85Parser.I_O, 0); };
    UseAfterOnContext.prototype.EXTEND = function () { return this.tryGetToken(Cobol85Parser.EXTEND, 0); };
    UseAfterOnContext.prototype.fileName = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileNameContext);
        }
        else {
            return this.getRuleContext(i, FileNameContext);
        }
    };
    Object.defineProperty(UseAfterOnContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_useAfterOn; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UseAfterOnContext.prototype.enterRule = function (listener) {
        if (listener.enterUseAfterOn) {
            listener.enterUseAfterOn(this);
        }
    };
    // @Override
    UseAfterOnContext.prototype.exitRule = function (listener) {
        if (listener.exitUseAfterOn) {
            listener.exitUseAfterOn(this);
        }
    };
    // @Override
    UseAfterOnContext.prototype.accept = function (visitor) {
        if (visitor.visitUseAfterOn) {
            return visitor.visitUseAfterOn(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UseAfterOnContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UseAfterOnContext = UseAfterOnContext;
var UseDebugClauseContext = /** @class */ (function (_super) {
    __extends(UseDebugClauseContext, _super);
    function UseDebugClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UseDebugClauseContext.prototype.DEBUGGING = function () { return this.getToken(Cobol85Parser.DEBUGGING, 0); };
    UseDebugClauseContext.prototype.FOR = function () { return this.tryGetToken(Cobol85Parser.FOR, 0); };
    UseDebugClauseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    UseDebugClauseContext.prototype.useDebugOn = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(UseDebugOnContext);
        }
        else {
            return this.getRuleContext(i, UseDebugOnContext);
        }
    };
    Object.defineProperty(UseDebugClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_useDebugClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UseDebugClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterUseDebugClause) {
            listener.enterUseDebugClause(this);
        }
    };
    // @Override
    UseDebugClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitUseDebugClause) {
            listener.exitUseDebugClause(this);
        }
    };
    // @Override
    UseDebugClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitUseDebugClause) {
            return visitor.visitUseDebugClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UseDebugClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UseDebugClauseContext = UseDebugClauseContext;
var UseDebugOnContext = /** @class */ (function (_super) {
    __extends(UseDebugOnContext, _super);
    function UseDebugOnContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UseDebugOnContext.prototype.ALL = function () { return this.tryGetToken(Cobol85Parser.ALL, 0); };
    UseDebugOnContext.prototype.PROCEDURES = function () { return this.tryGetToken(Cobol85Parser.PROCEDURES, 0); };
    UseDebugOnContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    UseDebugOnContext.prototype.REFERENCES = function () { return this.tryGetToken(Cobol85Parser.REFERENCES, 0); };
    UseDebugOnContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    UseDebugOnContext.prototype.procedureName = function () {
        return this.tryGetRuleContext(0, ProcedureNameContext);
    };
    UseDebugOnContext.prototype.fileName = function () {
        return this.tryGetRuleContext(0, FileNameContext);
    };
    Object.defineProperty(UseDebugOnContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_useDebugOn; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UseDebugOnContext.prototype.enterRule = function (listener) {
        if (listener.enterUseDebugOn) {
            listener.enterUseDebugOn(this);
        }
    };
    // @Override
    UseDebugOnContext.prototype.exitRule = function (listener) {
        if (listener.exitUseDebugOn) {
            listener.exitUseDebugOn(this);
        }
    };
    // @Override
    UseDebugOnContext.prototype.accept = function (visitor) {
        if (visitor.visitUseDebugOn) {
            return visitor.visitUseDebugOn(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UseDebugOnContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UseDebugOnContext = UseDebugOnContext;
var WriteStatementContext = /** @class */ (function (_super) {
    __extends(WriteStatementContext, _super);
    function WriteStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WriteStatementContext.prototype.WRITE = function () { return this.getToken(Cobol85Parser.WRITE, 0); };
    WriteStatementContext.prototype.recordName = function () {
        return this.getRuleContext(0, RecordNameContext);
    };
    WriteStatementContext.prototype.writeFromPhrase = function () {
        return this.tryGetRuleContext(0, WriteFromPhraseContext);
    };
    WriteStatementContext.prototype.writeAdvancingPhrase = function () {
        return this.tryGetRuleContext(0, WriteAdvancingPhraseContext);
    };
    WriteStatementContext.prototype.writeAtEndOfPagePhrase = function () {
        return this.tryGetRuleContext(0, WriteAtEndOfPagePhraseContext);
    };
    WriteStatementContext.prototype.writeNotAtEndOfPagePhrase = function () {
        return this.tryGetRuleContext(0, WriteNotAtEndOfPagePhraseContext);
    };
    WriteStatementContext.prototype.invalidKeyPhrase = function () {
        return this.tryGetRuleContext(0, InvalidKeyPhraseContext);
    };
    WriteStatementContext.prototype.notInvalidKeyPhrase = function () {
        return this.tryGetRuleContext(0, NotInvalidKeyPhraseContext);
    };
    WriteStatementContext.prototype.END_WRITE = function () { return this.tryGetToken(Cobol85Parser.END_WRITE, 0); };
    Object.defineProperty(WriteStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_writeStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WriteStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterWriteStatement) {
            listener.enterWriteStatement(this);
        }
    };
    // @Override
    WriteStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitWriteStatement) {
            listener.exitWriteStatement(this);
        }
    };
    // @Override
    WriteStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitWriteStatement) {
            return visitor.visitWriteStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WriteStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WriteStatementContext = WriteStatementContext;
var WriteFromPhraseContext = /** @class */ (function (_super) {
    __extends(WriteFromPhraseContext, _super);
    function WriteFromPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WriteFromPhraseContext.prototype.FROM = function () { return this.getToken(Cobol85Parser.FROM, 0); };
    WriteFromPhraseContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    WriteFromPhraseContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(WriteFromPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_writeFromPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WriteFromPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterWriteFromPhrase) {
            listener.enterWriteFromPhrase(this);
        }
    };
    // @Override
    WriteFromPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitWriteFromPhrase) {
            listener.exitWriteFromPhrase(this);
        }
    };
    // @Override
    WriteFromPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitWriteFromPhrase) {
            return visitor.visitWriteFromPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WriteFromPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WriteFromPhraseContext = WriteFromPhraseContext;
var WriteAdvancingPhraseContext = /** @class */ (function (_super) {
    __extends(WriteAdvancingPhraseContext, _super);
    function WriteAdvancingPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WriteAdvancingPhraseContext.prototype.BEFORE = function () { return this.tryGetToken(Cobol85Parser.BEFORE, 0); };
    WriteAdvancingPhraseContext.prototype.AFTER = function () { return this.tryGetToken(Cobol85Parser.AFTER, 0); };
    WriteAdvancingPhraseContext.prototype.writeAdvancingPage = function () {
        return this.tryGetRuleContext(0, WriteAdvancingPageContext);
    };
    WriteAdvancingPhraseContext.prototype.writeAdvancingLines = function () {
        return this.tryGetRuleContext(0, WriteAdvancingLinesContext);
    };
    WriteAdvancingPhraseContext.prototype.writeAdvancingMnemonic = function () {
        return this.tryGetRuleContext(0, WriteAdvancingMnemonicContext);
    };
    WriteAdvancingPhraseContext.prototype.ADVANCING = function () { return this.tryGetToken(Cobol85Parser.ADVANCING, 0); };
    Object.defineProperty(WriteAdvancingPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_writeAdvancingPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WriteAdvancingPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterWriteAdvancingPhrase) {
            listener.enterWriteAdvancingPhrase(this);
        }
    };
    // @Override
    WriteAdvancingPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitWriteAdvancingPhrase) {
            listener.exitWriteAdvancingPhrase(this);
        }
    };
    // @Override
    WriteAdvancingPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitWriteAdvancingPhrase) {
            return visitor.visitWriteAdvancingPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WriteAdvancingPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WriteAdvancingPhraseContext = WriteAdvancingPhraseContext;
var WriteAdvancingPageContext = /** @class */ (function (_super) {
    __extends(WriteAdvancingPageContext, _super);
    function WriteAdvancingPageContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WriteAdvancingPageContext.prototype.PAGE = function () { return this.getToken(Cobol85Parser.PAGE, 0); };
    Object.defineProperty(WriteAdvancingPageContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_writeAdvancingPage; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WriteAdvancingPageContext.prototype.enterRule = function (listener) {
        if (listener.enterWriteAdvancingPage) {
            listener.enterWriteAdvancingPage(this);
        }
    };
    // @Override
    WriteAdvancingPageContext.prototype.exitRule = function (listener) {
        if (listener.exitWriteAdvancingPage) {
            listener.exitWriteAdvancingPage(this);
        }
    };
    // @Override
    WriteAdvancingPageContext.prototype.accept = function (visitor) {
        if (visitor.visitWriteAdvancingPage) {
            return visitor.visitWriteAdvancingPage(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WriteAdvancingPageContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WriteAdvancingPageContext = WriteAdvancingPageContext;
var WriteAdvancingLinesContext = /** @class */ (function (_super) {
    __extends(WriteAdvancingLinesContext, _super);
    function WriteAdvancingLinesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WriteAdvancingLinesContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    WriteAdvancingLinesContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    WriteAdvancingLinesContext.prototype.LINE = function () { return this.tryGetToken(Cobol85Parser.LINE, 0); };
    WriteAdvancingLinesContext.prototype.LINES = function () { return this.tryGetToken(Cobol85Parser.LINES, 0); };
    Object.defineProperty(WriteAdvancingLinesContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_writeAdvancingLines; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WriteAdvancingLinesContext.prototype.enterRule = function (listener) {
        if (listener.enterWriteAdvancingLines) {
            listener.enterWriteAdvancingLines(this);
        }
    };
    // @Override
    WriteAdvancingLinesContext.prototype.exitRule = function (listener) {
        if (listener.exitWriteAdvancingLines) {
            listener.exitWriteAdvancingLines(this);
        }
    };
    // @Override
    WriteAdvancingLinesContext.prototype.accept = function (visitor) {
        if (visitor.visitWriteAdvancingLines) {
            return visitor.visitWriteAdvancingLines(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WriteAdvancingLinesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WriteAdvancingLinesContext = WriteAdvancingLinesContext;
var WriteAdvancingMnemonicContext = /** @class */ (function (_super) {
    __extends(WriteAdvancingMnemonicContext, _super);
    function WriteAdvancingMnemonicContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WriteAdvancingMnemonicContext.prototype.mnemonicName = function () {
        return this.getRuleContext(0, MnemonicNameContext);
    };
    Object.defineProperty(WriteAdvancingMnemonicContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_writeAdvancingMnemonic; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WriteAdvancingMnemonicContext.prototype.enterRule = function (listener) {
        if (listener.enterWriteAdvancingMnemonic) {
            listener.enterWriteAdvancingMnemonic(this);
        }
    };
    // @Override
    WriteAdvancingMnemonicContext.prototype.exitRule = function (listener) {
        if (listener.exitWriteAdvancingMnemonic) {
            listener.exitWriteAdvancingMnemonic(this);
        }
    };
    // @Override
    WriteAdvancingMnemonicContext.prototype.accept = function (visitor) {
        if (visitor.visitWriteAdvancingMnemonic) {
            return visitor.visitWriteAdvancingMnemonic(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WriteAdvancingMnemonicContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WriteAdvancingMnemonicContext = WriteAdvancingMnemonicContext;
var WriteAtEndOfPagePhraseContext = /** @class */ (function (_super) {
    __extends(WriteAtEndOfPagePhraseContext, _super);
    function WriteAtEndOfPagePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WriteAtEndOfPagePhraseContext.prototype.END_OF_PAGE = function () { return this.tryGetToken(Cobol85Parser.END_OF_PAGE, 0); };
    WriteAtEndOfPagePhraseContext.prototype.EOP = function () { return this.tryGetToken(Cobol85Parser.EOP, 0); };
    WriteAtEndOfPagePhraseContext.prototype.AT = function () { return this.tryGetToken(Cobol85Parser.AT, 0); };
    WriteAtEndOfPagePhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(WriteAtEndOfPagePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_writeAtEndOfPagePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WriteAtEndOfPagePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterWriteAtEndOfPagePhrase) {
            listener.enterWriteAtEndOfPagePhrase(this);
        }
    };
    // @Override
    WriteAtEndOfPagePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitWriteAtEndOfPagePhrase) {
            listener.exitWriteAtEndOfPagePhrase(this);
        }
    };
    // @Override
    WriteAtEndOfPagePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitWriteAtEndOfPagePhrase) {
            return visitor.visitWriteAtEndOfPagePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WriteAtEndOfPagePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WriteAtEndOfPagePhraseContext = WriteAtEndOfPagePhraseContext;
var WriteNotAtEndOfPagePhraseContext = /** @class */ (function (_super) {
    __extends(WriteNotAtEndOfPagePhraseContext, _super);
    function WriteNotAtEndOfPagePhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WriteNotAtEndOfPagePhraseContext.prototype.NOT = function () { return this.getToken(Cobol85Parser.NOT, 0); };
    WriteNotAtEndOfPagePhraseContext.prototype.END_OF_PAGE = function () { return this.tryGetToken(Cobol85Parser.END_OF_PAGE, 0); };
    WriteNotAtEndOfPagePhraseContext.prototype.EOP = function () { return this.tryGetToken(Cobol85Parser.EOP, 0); };
    WriteNotAtEndOfPagePhraseContext.prototype.AT = function () { return this.tryGetToken(Cobol85Parser.AT, 0); };
    WriteNotAtEndOfPagePhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(WriteNotAtEndOfPagePhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_writeNotAtEndOfPagePhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WriteNotAtEndOfPagePhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterWriteNotAtEndOfPagePhrase) {
            listener.enterWriteNotAtEndOfPagePhrase(this);
        }
    };
    // @Override
    WriteNotAtEndOfPagePhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitWriteNotAtEndOfPagePhrase) {
            listener.exitWriteNotAtEndOfPagePhrase(this);
        }
    };
    // @Override
    WriteNotAtEndOfPagePhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitWriteNotAtEndOfPagePhrase) {
            return visitor.visitWriteNotAtEndOfPagePhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WriteNotAtEndOfPagePhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WriteNotAtEndOfPagePhraseContext = WriteNotAtEndOfPagePhraseContext;
var AtEndPhraseContext = /** @class */ (function (_super) {
    __extends(AtEndPhraseContext, _super);
    function AtEndPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AtEndPhraseContext.prototype.END = function () { return this.getToken(Cobol85Parser.END, 0); };
    AtEndPhraseContext.prototype.AT = function () { return this.tryGetToken(Cobol85Parser.AT, 0); };
    AtEndPhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(AtEndPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_atEndPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AtEndPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterAtEndPhrase) {
            listener.enterAtEndPhrase(this);
        }
    };
    // @Override
    AtEndPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitAtEndPhrase) {
            listener.exitAtEndPhrase(this);
        }
    };
    // @Override
    AtEndPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitAtEndPhrase) {
            return visitor.visitAtEndPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AtEndPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AtEndPhraseContext = AtEndPhraseContext;
var NotAtEndPhraseContext = /** @class */ (function (_super) {
    __extends(NotAtEndPhraseContext, _super);
    function NotAtEndPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NotAtEndPhraseContext.prototype.NOT = function () { return this.getToken(Cobol85Parser.NOT, 0); };
    NotAtEndPhraseContext.prototype.END = function () { return this.getToken(Cobol85Parser.END, 0); };
    NotAtEndPhraseContext.prototype.AT = function () { return this.tryGetToken(Cobol85Parser.AT, 0); };
    NotAtEndPhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(NotAtEndPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_notAtEndPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NotAtEndPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterNotAtEndPhrase) {
            listener.enterNotAtEndPhrase(this);
        }
    };
    // @Override
    NotAtEndPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitNotAtEndPhrase) {
            listener.exitNotAtEndPhrase(this);
        }
    };
    // @Override
    NotAtEndPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitNotAtEndPhrase) {
            return visitor.visitNotAtEndPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NotAtEndPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NotAtEndPhraseContext = NotAtEndPhraseContext;
var InvalidKeyPhraseContext = /** @class */ (function (_super) {
    __extends(InvalidKeyPhraseContext, _super);
    function InvalidKeyPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InvalidKeyPhraseContext.prototype.INVALID = function () { return this.getToken(Cobol85Parser.INVALID, 0); };
    InvalidKeyPhraseContext.prototype.KEY = function () { return this.tryGetToken(Cobol85Parser.KEY, 0); };
    InvalidKeyPhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(InvalidKeyPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_invalidKeyPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InvalidKeyPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterInvalidKeyPhrase) {
            listener.enterInvalidKeyPhrase(this);
        }
    };
    // @Override
    InvalidKeyPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitInvalidKeyPhrase) {
            listener.exitInvalidKeyPhrase(this);
        }
    };
    // @Override
    InvalidKeyPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitInvalidKeyPhrase) {
            return visitor.visitInvalidKeyPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InvalidKeyPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InvalidKeyPhraseContext = InvalidKeyPhraseContext;
var NotInvalidKeyPhraseContext = /** @class */ (function (_super) {
    __extends(NotInvalidKeyPhraseContext, _super);
    function NotInvalidKeyPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NotInvalidKeyPhraseContext.prototype.NOT = function () { return this.getToken(Cobol85Parser.NOT, 0); };
    NotInvalidKeyPhraseContext.prototype.INVALID = function () { return this.getToken(Cobol85Parser.INVALID, 0); };
    NotInvalidKeyPhraseContext.prototype.KEY = function () { return this.tryGetToken(Cobol85Parser.KEY, 0); };
    NotInvalidKeyPhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(NotInvalidKeyPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_notInvalidKeyPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NotInvalidKeyPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterNotInvalidKeyPhrase) {
            listener.enterNotInvalidKeyPhrase(this);
        }
    };
    // @Override
    NotInvalidKeyPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitNotInvalidKeyPhrase) {
            listener.exitNotInvalidKeyPhrase(this);
        }
    };
    // @Override
    NotInvalidKeyPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitNotInvalidKeyPhrase) {
            return visitor.visitNotInvalidKeyPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NotInvalidKeyPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NotInvalidKeyPhraseContext = NotInvalidKeyPhraseContext;
var OnOverflowPhraseContext = /** @class */ (function (_super) {
    __extends(OnOverflowPhraseContext, _super);
    function OnOverflowPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OnOverflowPhraseContext.prototype.OVERFLOW = function () { return this.getToken(Cobol85Parser.OVERFLOW, 0); };
    OnOverflowPhraseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    OnOverflowPhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(OnOverflowPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_onOverflowPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OnOverflowPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterOnOverflowPhrase) {
            listener.enterOnOverflowPhrase(this);
        }
    };
    // @Override
    OnOverflowPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitOnOverflowPhrase) {
            listener.exitOnOverflowPhrase(this);
        }
    };
    // @Override
    OnOverflowPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitOnOverflowPhrase) {
            return visitor.visitOnOverflowPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OnOverflowPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OnOverflowPhraseContext = OnOverflowPhraseContext;
var NotOnOverflowPhraseContext = /** @class */ (function (_super) {
    __extends(NotOnOverflowPhraseContext, _super);
    function NotOnOverflowPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NotOnOverflowPhraseContext.prototype.NOT = function () { return this.getToken(Cobol85Parser.NOT, 0); };
    NotOnOverflowPhraseContext.prototype.OVERFLOW = function () { return this.getToken(Cobol85Parser.OVERFLOW, 0); };
    NotOnOverflowPhraseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    NotOnOverflowPhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(NotOnOverflowPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_notOnOverflowPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NotOnOverflowPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterNotOnOverflowPhrase) {
            listener.enterNotOnOverflowPhrase(this);
        }
    };
    // @Override
    NotOnOverflowPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitNotOnOverflowPhrase) {
            listener.exitNotOnOverflowPhrase(this);
        }
    };
    // @Override
    NotOnOverflowPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitNotOnOverflowPhrase) {
            return visitor.visitNotOnOverflowPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NotOnOverflowPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NotOnOverflowPhraseContext = NotOnOverflowPhraseContext;
var OnSizeErrorPhraseContext = /** @class */ (function (_super) {
    __extends(OnSizeErrorPhraseContext, _super);
    function OnSizeErrorPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OnSizeErrorPhraseContext.prototype.SIZE = function () { return this.getToken(Cobol85Parser.SIZE, 0); };
    OnSizeErrorPhraseContext.prototype.ERROR = function () { return this.getToken(Cobol85Parser.ERROR, 0); };
    OnSizeErrorPhraseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    OnSizeErrorPhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(OnSizeErrorPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_onSizeErrorPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OnSizeErrorPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterOnSizeErrorPhrase) {
            listener.enterOnSizeErrorPhrase(this);
        }
    };
    // @Override
    OnSizeErrorPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitOnSizeErrorPhrase) {
            listener.exitOnSizeErrorPhrase(this);
        }
    };
    // @Override
    OnSizeErrorPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitOnSizeErrorPhrase) {
            return visitor.visitOnSizeErrorPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OnSizeErrorPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OnSizeErrorPhraseContext = OnSizeErrorPhraseContext;
var NotOnSizeErrorPhraseContext = /** @class */ (function (_super) {
    __extends(NotOnSizeErrorPhraseContext, _super);
    function NotOnSizeErrorPhraseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NotOnSizeErrorPhraseContext.prototype.NOT = function () { return this.getToken(Cobol85Parser.NOT, 0); };
    NotOnSizeErrorPhraseContext.prototype.SIZE = function () { return this.getToken(Cobol85Parser.SIZE, 0); };
    NotOnSizeErrorPhraseContext.prototype.ERROR = function () { return this.getToken(Cobol85Parser.ERROR, 0); };
    NotOnSizeErrorPhraseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    NotOnSizeErrorPhraseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(NotOnSizeErrorPhraseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_notOnSizeErrorPhrase; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NotOnSizeErrorPhraseContext.prototype.enterRule = function (listener) {
        if (listener.enterNotOnSizeErrorPhrase) {
            listener.enterNotOnSizeErrorPhrase(this);
        }
    };
    // @Override
    NotOnSizeErrorPhraseContext.prototype.exitRule = function (listener) {
        if (listener.exitNotOnSizeErrorPhrase) {
            listener.exitNotOnSizeErrorPhrase(this);
        }
    };
    // @Override
    NotOnSizeErrorPhraseContext.prototype.accept = function (visitor) {
        if (visitor.visitNotOnSizeErrorPhrase) {
            return visitor.visitNotOnSizeErrorPhrase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NotOnSizeErrorPhraseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NotOnSizeErrorPhraseContext = NotOnSizeErrorPhraseContext;
var OnExceptionClauseContext = /** @class */ (function (_super) {
    __extends(OnExceptionClauseContext, _super);
    function OnExceptionClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OnExceptionClauseContext.prototype.EXCEPTION = function () { return this.getToken(Cobol85Parser.EXCEPTION, 0); };
    OnExceptionClauseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    OnExceptionClauseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(OnExceptionClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_onExceptionClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OnExceptionClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterOnExceptionClause) {
            listener.enterOnExceptionClause(this);
        }
    };
    // @Override
    OnExceptionClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitOnExceptionClause) {
            listener.exitOnExceptionClause(this);
        }
    };
    // @Override
    OnExceptionClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitOnExceptionClause) {
            return visitor.visitOnExceptionClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OnExceptionClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OnExceptionClauseContext = OnExceptionClauseContext;
var NotOnExceptionClauseContext = /** @class */ (function (_super) {
    __extends(NotOnExceptionClauseContext, _super);
    function NotOnExceptionClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NotOnExceptionClauseContext.prototype.NOT = function () { return this.getToken(Cobol85Parser.NOT, 0); };
    NotOnExceptionClauseContext.prototype.EXCEPTION = function () { return this.getToken(Cobol85Parser.EXCEPTION, 0); };
    NotOnExceptionClauseContext.prototype.ON = function () { return this.tryGetToken(Cobol85Parser.ON, 0); };
    NotOnExceptionClauseContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Object.defineProperty(NotOnExceptionClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_notOnExceptionClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NotOnExceptionClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterNotOnExceptionClause) {
            listener.enterNotOnExceptionClause(this);
        }
    };
    // @Override
    NotOnExceptionClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitNotOnExceptionClause) {
            listener.exitNotOnExceptionClause(this);
        }
    };
    // @Override
    NotOnExceptionClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitNotOnExceptionClause) {
            return visitor.visitNotOnExceptionClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NotOnExceptionClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NotOnExceptionClauseContext = NotOnExceptionClauseContext;
var ArithmeticExpressionContext = /** @class */ (function (_super) {
    __extends(ArithmeticExpressionContext, _super);
    function ArithmeticExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArithmeticExpressionContext.prototype.multDivs = function () {
        return this.getRuleContext(0, MultDivsContext);
    };
    ArithmeticExpressionContext.prototype.plusMinus = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PlusMinusContext);
        }
        else {
            return this.getRuleContext(i, PlusMinusContext);
        }
    };
    Object.defineProperty(ArithmeticExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_arithmeticExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArithmeticExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterArithmeticExpression) {
            listener.enterArithmeticExpression(this);
        }
    };
    // @Override
    ArithmeticExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitArithmeticExpression) {
            listener.exitArithmeticExpression(this);
        }
    };
    // @Override
    ArithmeticExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitArithmeticExpression) {
            return visitor.visitArithmeticExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArithmeticExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArithmeticExpressionContext = ArithmeticExpressionContext;
var PlusMinusContext = /** @class */ (function (_super) {
    __extends(PlusMinusContext, _super);
    function PlusMinusContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PlusMinusContext.prototype.multDivs = function () {
        return this.getRuleContext(0, MultDivsContext);
    };
    PlusMinusContext.prototype.PLUSCHAR = function () { return this.tryGetToken(Cobol85Parser.PLUSCHAR, 0); };
    PlusMinusContext.prototype.MINUSCHAR = function () { return this.tryGetToken(Cobol85Parser.MINUSCHAR, 0); };
    Object.defineProperty(PlusMinusContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_plusMinus; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PlusMinusContext.prototype.enterRule = function (listener) {
        if (listener.enterPlusMinus) {
            listener.enterPlusMinus(this);
        }
    };
    // @Override
    PlusMinusContext.prototype.exitRule = function (listener) {
        if (listener.exitPlusMinus) {
            listener.exitPlusMinus(this);
        }
    };
    // @Override
    PlusMinusContext.prototype.accept = function (visitor) {
        if (visitor.visitPlusMinus) {
            return visitor.visitPlusMinus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PlusMinusContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PlusMinusContext = PlusMinusContext;
var MultDivsContext = /** @class */ (function (_super) {
    __extends(MultDivsContext, _super);
    function MultDivsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultDivsContext.prototype.powers = function () {
        return this.getRuleContext(0, PowersContext);
    };
    MultDivsContext.prototype.multDiv = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MultDivContext);
        }
        else {
            return this.getRuleContext(i, MultDivContext);
        }
    };
    Object.defineProperty(MultDivsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_multDivs; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultDivsContext.prototype.enterRule = function (listener) {
        if (listener.enterMultDivs) {
            listener.enterMultDivs(this);
        }
    };
    // @Override
    MultDivsContext.prototype.exitRule = function (listener) {
        if (listener.exitMultDivs) {
            listener.exitMultDivs(this);
        }
    };
    // @Override
    MultDivsContext.prototype.accept = function (visitor) {
        if (visitor.visitMultDivs) {
            return visitor.visitMultDivs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultDivsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultDivsContext = MultDivsContext;
var MultDivContext = /** @class */ (function (_super) {
    __extends(MultDivContext, _super);
    function MultDivContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultDivContext.prototype.powers = function () {
        return this.getRuleContext(0, PowersContext);
    };
    MultDivContext.prototype.ASTERISKCHAR = function () { return this.tryGetToken(Cobol85Parser.ASTERISKCHAR, 0); };
    MultDivContext.prototype.SLASHCHAR = function () { return this.tryGetToken(Cobol85Parser.SLASHCHAR, 0); };
    Object.defineProperty(MultDivContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_multDiv; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultDivContext.prototype.enterRule = function (listener) {
        if (listener.enterMultDiv) {
            listener.enterMultDiv(this);
        }
    };
    // @Override
    MultDivContext.prototype.exitRule = function (listener) {
        if (listener.exitMultDiv) {
            listener.exitMultDiv(this);
        }
    };
    // @Override
    MultDivContext.prototype.accept = function (visitor) {
        if (visitor.visitMultDiv) {
            return visitor.visitMultDiv(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultDivContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultDivContext = MultDivContext;
var PowersContext = /** @class */ (function (_super) {
    __extends(PowersContext, _super);
    function PowersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PowersContext.prototype.basis = function () {
        return this.getRuleContext(0, BasisContext);
    };
    PowersContext.prototype.power = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PowerContext);
        }
        else {
            return this.getRuleContext(i, PowerContext);
        }
    };
    PowersContext.prototype.PLUSCHAR = function () { return this.tryGetToken(Cobol85Parser.PLUSCHAR, 0); };
    PowersContext.prototype.MINUSCHAR = function () { return this.tryGetToken(Cobol85Parser.MINUSCHAR, 0); };
    Object.defineProperty(PowersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_powers; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PowersContext.prototype.enterRule = function (listener) {
        if (listener.enterPowers) {
            listener.enterPowers(this);
        }
    };
    // @Override
    PowersContext.prototype.exitRule = function (listener) {
        if (listener.exitPowers) {
            listener.exitPowers(this);
        }
    };
    // @Override
    PowersContext.prototype.accept = function (visitor) {
        if (visitor.visitPowers) {
            return visitor.visitPowers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PowersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PowersContext = PowersContext;
var PowerContext = /** @class */ (function (_super) {
    __extends(PowerContext, _super);
    function PowerContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PowerContext.prototype.DOUBLEASTERISKCHAR = function () { return this.getToken(Cobol85Parser.DOUBLEASTERISKCHAR, 0); };
    PowerContext.prototype.basis = function () {
        return this.getRuleContext(0, BasisContext);
    };
    Object.defineProperty(PowerContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_power; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PowerContext.prototype.enterRule = function (listener) {
        if (listener.enterPower) {
            listener.enterPower(this);
        }
    };
    // @Override
    PowerContext.prototype.exitRule = function (listener) {
        if (listener.exitPower) {
            listener.exitPower(this);
        }
    };
    // @Override
    PowerContext.prototype.accept = function (visitor) {
        if (visitor.visitPower) {
            return visitor.visitPower(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PowerContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PowerContext = PowerContext;
var BasisContext = /** @class */ (function (_super) {
    __extends(BasisContext, _super);
    function BasisContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BasisContext.prototype.LPARENCHAR = function () { return this.tryGetToken(Cobol85Parser.LPARENCHAR, 0); };
    BasisContext.prototype.arithmeticExpression = function () {
        return this.tryGetRuleContext(0, ArithmeticExpressionContext);
    };
    BasisContext.prototype.RPARENCHAR = function () { return this.tryGetToken(Cobol85Parser.RPARENCHAR, 0); };
    BasisContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    BasisContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(BasisContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_basis; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BasisContext.prototype.enterRule = function (listener) {
        if (listener.enterBasis) {
            listener.enterBasis(this);
        }
    };
    // @Override
    BasisContext.prototype.exitRule = function (listener) {
        if (listener.exitBasis) {
            listener.exitBasis(this);
        }
    };
    // @Override
    BasisContext.prototype.accept = function (visitor) {
        if (visitor.visitBasis) {
            return visitor.visitBasis(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BasisContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BasisContext = BasisContext;
var ConditionContext = /** @class */ (function (_super) {
    __extends(ConditionContext, _super);
    function ConditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConditionContext.prototype.combinableCondition = function () {
        return this.getRuleContext(0, CombinableConditionContext);
    };
    ConditionContext.prototype.andOrCondition = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AndOrConditionContext);
        }
        else {
            return this.getRuleContext(i, AndOrConditionContext);
        }
    };
    Object.defineProperty(ConditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_condition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConditionContext.prototype.enterRule = function (listener) {
        if (listener.enterCondition) {
            listener.enterCondition(this);
        }
    };
    // @Override
    ConditionContext.prototype.exitRule = function (listener) {
        if (listener.exitCondition) {
            listener.exitCondition(this);
        }
    };
    // @Override
    ConditionContext.prototype.accept = function (visitor) {
        if (visitor.visitCondition) {
            return visitor.visitCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConditionContext = ConditionContext;
var AndOrConditionContext = /** @class */ (function (_super) {
    __extends(AndOrConditionContext, _super);
    function AndOrConditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AndOrConditionContext.prototype.AND = function () { return this.tryGetToken(Cobol85Parser.AND, 0); };
    AndOrConditionContext.prototype.OR = function () { return this.tryGetToken(Cobol85Parser.OR, 0); };
    AndOrConditionContext.prototype.combinableCondition = function () {
        return this.tryGetRuleContext(0, CombinableConditionContext);
    };
    AndOrConditionContext.prototype.abbreviation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AbbreviationContext);
        }
        else {
            return this.getRuleContext(i, AbbreviationContext);
        }
    };
    Object.defineProperty(AndOrConditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_andOrCondition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AndOrConditionContext.prototype.enterRule = function (listener) {
        if (listener.enterAndOrCondition) {
            listener.enterAndOrCondition(this);
        }
    };
    // @Override
    AndOrConditionContext.prototype.exitRule = function (listener) {
        if (listener.exitAndOrCondition) {
            listener.exitAndOrCondition(this);
        }
    };
    // @Override
    AndOrConditionContext.prototype.accept = function (visitor) {
        if (visitor.visitAndOrCondition) {
            return visitor.visitAndOrCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AndOrConditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AndOrConditionContext = AndOrConditionContext;
var CombinableConditionContext = /** @class */ (function (_super) {
    __extends(CombinableConditionContext, _super);
    function CombinableConditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CombinableConditionContext.prototype.simpleCondition = function () {
        return this.getRuleContext(0, SimpleConditionContext);
    };
    CombinableConditionContext.prototype.NOT = function () { return this.tryGetToken(Cobol85Parser.NOT, 0); };
    Object.defineProperty(CombinableConditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_combinableCondition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CombinableConditionContext.prototype.enterRule = function (listener) {
        if (listener.enterCombinableCondition) {
            listener.enterCombinableCondition(this);
        }
    };
    // @Override
    CombinableConditionContext.prototype.exitRule = function (listener) {
        if (listener.exitCombinableCondition) {
            listener.exitCombinableCondition(this);
        }
    };
    // @Override
    CombinableConditionContext.prototype.accept = function (visitor) {
        if (visitor.visitCombinableCondition) {
            return visitor.visitCombinableCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CombinableConditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CombinableConditionContext = CombinableConditionContext;
var SimpleConditionContext = /** @class */ (function (_super) {
    __extends(SimpleConditionContext, _super);
    function SimpleConditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SimpleConditionContext.prototype.LPARENCHAR = function () { return this.tryGetToken(Cobol85Parser.LPARENCHAR, 0); };
    SimpleConditionContext.prototype.condition = function () {
        return this.tryGetRuleContext(0, ConditionContext);
    };
    SimpleConditionContext.prototype.RPARENCHAR = function () { return this.tryGetToken(Cobol85Parser.RPARENCHAR, 0); };
    SimpleConditionContext.prototype.relationCondition = function () {
        return this.tryGetRuleContext(0, RelationConditionContext);
    };
    SimpleConditionContext.prototype.classCondition = function () {
        return this.tryGetRuleContext(0, ClassConditionContext);
    };
    SimpleConditionContext.prototype.conditionNameReference = function () {
        return this.tryGetRuleContext(0, ConditionNameReferenceContext);
    };
    Object.defineProperty(SimpleConditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_simpleCondition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SimpleConditionContext.prototype.enterRule = function (listener) {
        if (listener.enterSimpleCondition) {
            listener.enterSimpleCondition(this);
        }
    };
    // @Override
    SimpleConditionContext.prototype.exitRule = function (listener) {
        if (listener.exitSimpleCondition) {
            listener.exitSimpleCondition(this);
        }
    };
    // @Override
    SimpleConditionContext.prototype.accept = function (visitor) {
        if (visitor.visitSimpleCondition) {
            return visitor.visitSimpleCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SimpleConditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SimpleConditionContext = SimpleConditionContext;
var ClassConditionContext = /** @class */ (function (_super) {
    __extends(ClassConditionContext, _super);
    function ClassConditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassConditionContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    ClassConditionContext.prototype.NUMERIC = function () { return this.tryGetToken(Cobol85Parser.NUMERIC, 0); };
    ClassConditionContext.prototype.ALPHABETIC = function () { return this.tryGetToken(Cobol85Parser.ALPHABETIC, 0); };
    ClassConditionContext.prototype.ALPHABETIC_LOWER = function () { return this.tryGetToken(Cobol85Parser.ALPHABETIC_LOWER, 0); };
    ClassConditionContext.prototype.ALPHABETIC_UPPER = function () { return this.tryGetToken(Cobol85Parser.ALPHABETIC_UPPER, 0); };
    ClassConditionContext.prototype.DBCS = function () { return this.tryGetToken(Cobol85Parser.DBCS, 0); };
    ClassConditionContext.prototype.KANJI = function () { return this.tryGetToken(Cobol85Parser.KANJI, 0); };
    ClassConditionContext.prototype.className = function () {
        return this.tryGetRuleContext(0, ClassNameContext);
    };
    ClassConditionContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    ClassConditionContext.prototype.NOT = function () { return this.tryGetToken(Cobol85Parser.NOT, 0); };
    Object.defineProperty(ClassConditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_classCondition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassConditionContext.prototype.enterRule = function (listener) {
        if (listener.enterClassCondition) {
            listener.enterClassCondition(this);
        }
    };
    // @Override
    ClassConditionContext.prototype.exitRule = function (listener) {
        if (listener.exitClassCondition) {
            listener.exitClassCondition(this);
        }
    };
    // @Override
    ClassConditionContext.prototype.accept = function (visitor) {
        if (visitor.visitClassCondition) {
            return visitor.visitClassCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassConditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassConditionContext = ClassConditionContext;
var ConditionNameReferenceContext = /** @class */ (function (_super) {
    __extends(ConditionNameReferenceContext, _super);
    function ConditionNameReferenceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConditionNameReferenceContext.prototype.conditionName = function () {
        return this.getRuleContext(0, ConditionNameContext);
    };
    ConditionNameReferenceContext.prototype.inData = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InDataContext);
        }
        else {
            return this.getRuleContext(i, InDataContext);
        }
    };
    ConditionNameReferenceContext.prototype.inFile = function () {
        return this.tryGetRuleContext(0, InFileContext);
    };
    ConditionNameReferenceContext.prototype.conditionNameSubscriptReference = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ConditionNameSubscriptReferenceContext);
        }
        else {
            return this.getRuleContext(i, ConditionNameSubscriptReferenceContext);
        }
    };
    ConditionNameReferenceContext.prototype.inMnemonic = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InMnemonicContext);
        }
        else {
            return this.getRuleContext(i, InMnemonicContext);
        }
    };
    Object.defineProperty(ConditionNameReferenceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_conditionNameReference; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConditionNameReferenceContext.prototype.enterRule = function (listener) {
        if (listener.enterConditionNameReference) {
            listener.enterConditionNameReference(this);
        }
    };
    // @Override
    ConditionNameReferenceContext.prototype.exitRule = function (listener) {
        if (listener.exitConditionNameReference) {
            listener.exitConditionNameReference(this);
        }
    };
    // @Override
    ConditionNameReferenceContext.prototype.accept = function (visitor) {
        if (visitor.visitConditionNameReference) {
            return visitor.visitConditionNameReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConditionNameReferenceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConditionNameReferenceContext = ConditionNameReferenceContext;
var ConditionNameSubscriptReferenceContext = /** @class */ (function (_super) {
    __extends(ConditionNameSubscriptReferenceContext, _super);
    function ConditionNameSubscriptReferenceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConditionNameSubscriptReferenceContext.prototype.LPARENCHAR = function () { return this.getToken(Cobol85Parser.LPARENCHAR, 0); };
    ConditionNameSubscriptReferenceContext.prototype.subscript = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubscriptContext);
        }
        else {
            return this.getRuleContext(i, SubscriptContext);
        }
    };
    ConditionNameSubscriptReferenceContext.prototype.RPARENCHAR = function () { return this.getToken(Cobol85Parser.RPARENCHAR, 0); };
    ConditionNameSubscriptReferenceContext.prototype.COMMACHAR = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.COMMACHAR);
        }
        else {
            return this.getToken(Cobol85Parser.COMMACHAR, i);
        }
    };
    Object.defineProperty(ConditionNameSubscriptReferenceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_conditionNameSubscriptReference; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConditionNameSubscriptReferenceContext.prototype.enterRule = function (listener) {
        if (listener.enterConditionNameSubscriptReference) {
            listener.enterConditionNameSubscriptReference(this);
        }
    };
    // @Override
    ConditionNameSubscriptReferenceContext.prototype.exitRule = function (listener) {
        if (listener.exitConditionNameSubscriptReference) {
            listener.exitConditionNameSubscriptReference(this);
        }
    };
    // @Override
    ConditionNameSubscriptReferenceContext.prototype.accept = function (visitor) {
        if (visitor.visitConditionNameSubscriptReference) {
            return visitor.visitConditionNameSubscriptReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConditionNameSubscriptReferenceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConditionNameSubscriptReferenceContext = ConditionNameSubscriptReferenceContext;
var RelationConditionContext = /** @class */ (function (_super) {
    __extends(RelationConditionContext, _super);
    function RelationConditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RelationConditionContext.prototype.relationSignCondition = function () {
        return this.tryGetRuleContext(0, RelationSignConditionContext);
    };
    RelationConditionContext.prototype.relationArithmeticComparison = function () {
        return this.tryGetRuleContext(0, RelationArithmeticComparisonContext);
    };
    RelationConditionContext.prototype.relationCombinedComparison = function () {
        return this.tryGetRuleContext(0, RelationCombinedComparisonContext);
    };
    Object.defineProperty(RelationConditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_relationCondition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RelationConditionContext.prototype.enterRule = function (listener) {
        if (listener.enterRelationCondition) {
            listener.enterRelationCondition(this);
        }
    };
    // @Override
    RelationConditionContext.prototype.exitRule = function (listener) {
        if (listener.exitRelationCondition) {
            listener.exitRelationCondition(this);
        }
    };
    // @Override
    RelationConditionContext.prototype.accept = function (visitor) {
        if (visitor.visitRelationCondition) {
            return visitor.visitRelationCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RelationConditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RelationConditionContext = RelationConditionContext;
var RelationSignConditionContext = /** @class */ (function (_super) {
    __extends(RelationSignConditionContext, _super);
    function RelationSignConditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RelationSignConditionContext.prototype.arithmeticExpression = function () {
        return this.getRuleContext(0, ArithmeticExpressionContext);
    };
    RelationSignConditionContext.prototype.POSITIVE = function () { return this.tryGetToken(Cobol85Parser.POSITIVE, 0); };
    RelationSignConditionContext.prototype.NEGATIVE = function () { return this.tryGetToken(Cobol85Parser.NEGATIVE, 0); };
    RelationSignConditionContext.prototype.ZERO = function () { return this.tryGetToken(Cobol85Parser.ZERO, 0); };
    RelationSignConditionContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    RelationSignConditionContext.prototype.NOT = function () { return this.tryGetToken(Cobol85Parser.NOT, 0); };
    Object.defineProperty(RelationSignConditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_relationSignCondition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RelationSignConditionContext.prototype.enterRule = function (listener) {
        if (listener.enterRelationSignCondition) {
            listener.enterRelationSignCondition(this);
        }
    };
    // @Override
    RelationSignConditionContext.prototype.exitRule = function (listener) {
        if (listener.exitRelationSignCondition) {
            listener.exitRelationSignCondition(this);
        }
    };
    // @Override
    RelationSignConditionContext.prototype.accept = function (visitor) {
        if (visitor.visitRelationSignCondition) {
            return visitor.visitRelationSignCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RelationSignConditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RelationSignConditionContext = RelationSignConditionContext;
var RelationArithmeticComparisonContext = /** @class */ (function (_super) {
    __extends(RelationArithmeticComparisonContext, _super);
    function RelationArithmeticComparisonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RelationArithmeticComparisonContext.prototype.arithmeticExpression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ArithmeticExpressionContext);
        }
        else {
            return this.getRuleContext(i, ArithmeticExpressionContext);
        }
    };
    RelationArithmeticComparisonContext.prototype.relationalOperator = function () {
        return this.getRuleContext(0, RelationalOperatorContext);
    };
    Object.defineProperty(RelationArithmeticComparisonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_relationArithmeticComparison; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RelationArithmeticComparisonContext.prototype.enterRule = function (listener) {
        if (listener.enterRelationArithmeticComparison) {
            listener.enterRelationArithmeticComparison(this);
        }
    };
    // @Override
    RelationArithmeticComparisonContext.prototype.exitRule = function (listener) {
        if (listener.exitRelationArithmeticComparison) {
            listener.exitRelationArithmeticComparison(this);
        }
    };
    // @Override
    RelationArithmeticComparisonContext.prototype.accept = function (visitor) {
        if (visitor.visitRelationArithmeticComparison) {
            return visitor.visitRelationArithmeticComparison(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RelationArithmeticComparisonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RelationArithmeticComparisonContext = RelationArithmeticComparisonContext;
var RelationCombinedComparisonContext = /** @class */ (function (_super) {
    __extends(RelationCombinedComparisonContext, _super);
    function RelationCombinedComparisonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RelationCombinedComparisonContext.prototype.arithmeticExpression = function () {
        return this.getRuleContext(0, ArithmeticExpressionContext);
    };
    RelationCombinedComparisonContext.prototype.relationalOperator = function () {
        return this.getRuleContext(0, RelationalOperatorContext);
    };
    RelationCombinedComparisonContext.prototype.LPARENCHAR = function () { return this.getToken(Cobol85Parser.LPARENCHAR, 0); };
    RelationCombinedComparisonContext.prototype.relationCombinedCondition = function () {
        return this.getRuleContext(0, RelationCombinedConditionContext);
    };
    RelationCombinedComparisonContext.prototype.RPARENCHAR = function () { return this.getToken(Cobol85Parser.RPARENCHAR, 0); };
    Object.defineProperty(RelationCombinedComparisonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_relationCombinedComparison; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RelationCombinedComparisonContext.prototype.enterRule = function (listener) {
        if (listener.enterRelationCombinedComparison) {
            listener.enterRelationCombinedComparison(this);
        }
    };
    // @Override
    RelationCombinedComparisonContext.prototype.exitRule = function (listener) {
        if (listener.exitRelationCombinedComparison) {
            listener.exitRelationCombinedComparison(this);
        }
    };
    // @Override
    RelationCombinedComparisonContext.prototype.accept = function (visitor) {
        if (visitor.visitRelationCombinedComparison) {
            return visitor.visitRelationCombinedComparison(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RelationCombinedComparisonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RelationCombinedComparisonContext = RelationCombinedComparisonContext;
var RelationCombinedConditionContext = /** @class */ (function (_super) {
    __extends(RelationCombinedConditionContext, _super);
    function RelationCombinedConditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RelationCombinedConditionContext.prototype.arithmeticExpression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ArithmeticExpressionContext);
        }
        else {
            return this.getRuleContext(i, ArithmeticExpressionContext);
        }
    };
    RelationCombinedConditionContext.prototype.AND = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.AND);
        }
        else {
            return this.getToken(Cobol85Parser.AND, i);
        }
    };
    RelationCombinedConditionContext.prototype.OR = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.OR);
        }
        else {
            return this.getToken(Cobol85Parser.OR, i);
        }
    };
    Object.defineProperty(RelationCombinedConditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_relationCombinedCondition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RelationCombinedConditionContext.prototype.enterRule = function (listener) {
        if (listener.enterRelationCombinedCondition) {
            listener.enterRelationCombinedCondition(this);
        }
    };
    // @Override
    RelationCombinedConditionContext.prototype.exitRule = function (listener) {
        if (listener.exitRelationCombinedCondition) {
            listener.exitRelationCombinedCondition(this);
        }
    };
    // @Override
    RelationCombinedConditionContext.prototype.accept = function (visitor) {
        if (visitor.visitRelationCombinedCondition) {
            return visitor.visitRelationCombinedCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RelationCombinedConditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RelationCombinedConditionContext = RelationCombinedConditionContext;
var RelationalOperatorContext = /** @class */ (function (_super) {
    __extends(RelationalOperatorContext, _super);
    function RelationalOperatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RelationalOperatorContext.prototype.NOTEQUALCHAR = function () { return this.tryGetToken(Cobol85Parser.NOTEQUALCHAR, 0); };
    RelationalOperatorContext.prototype.GREATER = function () { return this.tryGetToken(Cobol85Parser.GREATER, 0); };
    RelationalOperatorContext.prototype.OR = function () { return this.tryGetToken(Cobol85Parser.OR, 0); };
    RelationalOperatorContext.prototype.EQUAL = function () { return this.tryGetToken(Cobol85Parser.EQUAL, 0); };
    RelationalOperatorContext.prototype.MORETHANOREQUAL = function () { return this.tryGetToken(Cobol85Parser.MORETHANOREQUAL, 0); };
    RelationalOperatorContext.prototype.LESS = function () { return this.tryGetToken(Cobol85Parser.LESS, 0); };
    RelationalOperatorContext.prototype.LESSTHANOREQUAL = function () { return this.tryGetToken(Cobol85Parser.LESSTHANOREQUAL, 0); };
    RelationalOperatorContext.prototype.IS = function () { return this.tryGetToken(Cobol85Parser.IS, 0); };
    RelationalOperatorContext.prototype.ARE = function () { return this.tryGetToken(Cobol85Parser.ARE, 0); };
    RelationalOperatorContext.prototype.MORETHANCHAR = function () { return this.tryGetToken(Cobol85Parser.MORETHANCHAR, 0); };
    RelationalOperatorContext.prototype.LESSTHANCHAR = function () { return this.tryGetToken(Cobol85Parser.LESSTHANCHAR, 0); };
    RelationalOperatorContext.prototype.EQUALCHAR = function () { return this.tryGetToken(Cobol85Parser.EQUALCHAR, 0); };
    RelationalOperatorContext.prototype.NOT = function () { return this.tryGetToken(Cobol85Parser.NOT, 0); };
    RelationalOperatorContext.prototype.THAN = function () { return this.tryGetToken(Cobol85Parser.THAN, 0); };
    RelationalOperatorContext.prototype.TO = function () { return this.tryGetToken(Cobol85Parser.TO, 0); };
    Object.defineProperty(RelationalOperatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_relationalOperator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RelationalOperatorContext.prototype.enterRule = function (listener) {
        if (listener.enterRelationalOperator) {
            listener.enterRelationalOperator(this);
        }
    };
    // @Override
    RelationalOperatorContext.prototype.exitRule = function (listener) {
        if (listener.exitRelationalOperator) {
            listener.exitRelationalOperator(this);
        }
    };
    // @Override
    RelationalOperatorContext.prototype.accept = function (visitor) {
        if (visitor.visitRelationalOperator) {
            return visitor.visitRelationalOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RelationalOperatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RelationalOperatorContext = RelationalOperatorContext;
var AbbreviationContext = /** @class */ (function (_super) {
    __extends(AbbreviationContext, _super);
    function AbbreviationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AbbreviationContext.prototype.arithmeticExpression = function () {
        return this.tryGetRuleContext(0, ArithmeticExpressionContext);
    };
    AbbreviationContext.prototype.LPARENCHAR = function () { return this.tryGetToken(Cobol85Parser.LPARENCHAR, 0); };
    AbbreviationContext.prototype.abbreviation = function () {
        return this.tryGetRuleContext(0, AbbreviationContext);
    };
    AbbreviationContext.prototype.RPARENCHAR = function () { return this.tryGetToken(Cobol85Parser.RPARENCHAR, 0); };
    AbbreviationContext.prototype.NOT = function () { return this.tryGetToken(Cobol85Parser.NOT, 0); };
    AbbreviationContext.prototype.relationalOperator = function () {
        return this.tryGetRuleContext(0, RelationalOperatorContext);
    };
    Object.defineProperty(AbbreviationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_abbreviation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AbbreviationContext.prototype.enterRule = function (listener) {
        if (listener.enterAbbreviation) {
            listener.enterAbbreviation(this);
        }
    };
    // @Override
    AbbreviationContext.prototype.exitRule = function (listener) {
        if (listener.exitAbbreviation) {
            listener.exitAbbreviation(this);
        }
    };
    // @Override
    AbbreviationContext.prototype.accept = function (visitor) {
        if (visitor.visitAbbreviation) {
            return visitor.visitAbbreviation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AbbreviationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AbbreviationContext = AbbreviationContext;
var IdentifierContext = /** @class */ (function (_super) {
    __extends(IdentifierContext, _super);
    function IdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IdentifierContext.prototype.qualifiedDataName = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameContext);
    };
    IdentifierContext.prototype.tableCall = function () {
        return this.tryGetRuleContext(0, TableCallContext);
    };
    IdentifierContext.prototype.functionCall = function () {
        return this.tryGetRuleContext(0, FunctionCallContext);
    };
    IdentifierContext.prototype.specialRegister = function () {
        return this.tryGetRuleContext(0, SpecialRegisterContext);
    };
    Object.defineProperty(IdentifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterIdentifier) {
            listener.enterIdentifier(this);
        }
    };
    // @Override
    IdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitIdentifier) {
            listener.exitIdentifier(this);
        }
    };
    // @Override
    IdentifierContext.prototype.accept = function (visitor) {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IdentifierContext = IdentifierContext;
var TableCallContext = /** @class */ (function (_super) {
    __extends(TableCallContext, _super);
    function TableCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TableCallContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    TableCallContext.prototype.LPARENCHAR = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.LPARENCHAR);
        }
        else {
            return this.getToken(Cobol85Parser.LPARENCHAR, i);
        }
    };
    TableCallContext.prototype.subscript = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubscriptContext);
        }
        else {
            return this.getRuleContext(i, SubscriptContext);
        }
    };
    TableCallContext.prototype.RPARENCHAR = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.RPARENCHAR);
        }
        else {
            return this.getToken(Cobol85Parser.RPARENCHAR, i);
        }
    };
    TableCallContext.prototype.referenceModifier = function () {
        return this.tryGetRuleContext(0, ReferenceModifierContext);
    };
    TableCallContext.prototype.COMMACHAR = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.COMMACHAR);
        }
        else {
            return this.getToken(Cobol85Parser.COMMACHAR, i);
        }
    };
    Object.defineProperty(TableCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_tableCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TableCallContext.prototype.enterRule = function (listener) {
        if (listener.enterTableCall) {
            listener.enterTableCall(this);
        }
    };
    // @Override
    TableCallContext.prototype.exitRule = function (listener) {
        if (listener.exitTableCall) {
            listener.exitTableCall(this);
        }
    };
    // @Override
    TableCallContext.prototype.accept = function (visitor) {
        if (visitor.visitTableCall) {
            return visitor.visitTableCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TableCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TableCallContext = TableCallContext;
var FunctionCallContext = /** @class */ (function (_super) {
    __extends(FunctionCallContext, _super);
    function FunctionCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FunctionCallContext.prototype.FUNCTION = function () { return this.getToken(Cobol85Parser.FUNCTION, 0); };
    FunctionCallContext.prototype.functionName = function () {
        return this.getRuleContext(0, FunctionNameContext);
    };
    FunctionCallContext.prototype.LPARENCHAR = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.LPARENCHAR);
        }
        else {
            return this.getToken(Cobol85Parser.LPARENCHAR, i);
        }
    };
    FunctionCallContext.prototype.argument = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ArgumentContext);
        }
        else {
            return this.getRuleContext(i, ArgumentContext);
        }
    };
    FunctionCallContext.prototype.RPARENCHAR = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.RPARENCHAR);
        }
        else {
            return this.getToken(Cobol85Parser.RPARENCHAR, i);
        }
    };
    FunctionCallContext.prototype.referenceModifier = function () {
        return this.tryGetRuleContext(0, ReferenceModifierContext);
    };
    FunctionCallContext.prototype.COMMACHAR = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.COMMACHAR);
        }
        else {
            return this.getToken(Cobol85Parser.COMMACHAR, i);
        }
    };
    Object.defineProperty(FunctionCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_functionCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FunctionCallContext.prototype.enterRule = function (listener) {
        if (listener.enterFunctionCall) {
            listener.enterFunctionCall(this);
        }
    };
    // @Override
    FunctionCallContext.prototype.exitRule = function (listener) {
        if (listener.exitFunctionCall) {
            listener.exitFunctionCall(this);
        }
    };
    // @Override
    FunctionCallContext.prototype.accept = function (visitor) {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FunctionCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FunctionCallContext = FunctionCallContext;
var ReferenceModifierContext = /** @class */ (function (_super) {
    __extends(ReferenceModifierContext, _super);
    function ReferenceModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReferenceModifierContext.prototype.LPARENCHAR = function () { return this.getToken(Cobol85Parser.LPARENCHAR, 0); };
    ReferenceModifierContext.prototype.characterPosition = function () {
        return this.getRuleContext(0, CharacterPositionContext);
    };
    ReferenceModifierContext.prototype.COLONCHAR = function () { return this.getToken(Cobol85Parser.COLONCHAR, 0); };
    ReferenceModifierContext.prototype.RPARENCHAR = function () { return this.getToken(Cobol85Parser.RPARENCHAR, 0); };
    ReferenceModifierContext.prototype.length = function () {
        return this.tryGetRuleContext(0, LengthContext);
    };
    Object.defineProperty(ReferenceModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_referenceModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReferenceModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterReferenceModifier) {
            listener.enterReferenceModifier(this);
        }
    };
    // @Override
    ReferenceModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitReferenceModifier) {
            listener.exitReferenceModifier(this);
        }
    };
    // @Override
    ReferenceModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitReferenceModifier) {
            return visitor.visitReferenceModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReferenceModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReferenceModifierContext = ReferenceModifierContext;
var CharacterPositionContext = /** @class */ (function (_super) {
    __extends(CharacterPositionContext, _super);
    function CharacterPositionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CharacterPositionContext.prototype.arithmeticExpression = function () {
        return this.getRuleContext(0, ArithmeticExpressionContext);
    };
    Object.defineProperty(CharacterPositionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_characterPosition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CharacterPositionContext.prototype.enterRule = function (listener) {
        if (listener.enterCharacterPosition) {
            listener.enterCharacterPosition(this);
        }
    };
    // @Override
    CharacterPositionContext.prototype.exitRule = function (listener) {
        if (listener.exitCharacterPosition) {
            listener.exitCharacterPosition(this);
        }
    };
    // @Override
    CharacterPositionContext.prototype.accept = function (visitor) {
        if (visitor.visitCharacterPosition) {
            return visitor.visitCharacterPosition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CharacterPositionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CharacterPositionContext = CharacterPositionContext;
var LengthContext = /** @class */ (function (_super) {
    __extends(LengthContext, _super);
    function LengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LengthContext.prototype.arithmeticExpression = function () {
        return this.getRuleContext(0, ArithmeticExpressionContext);
    };
    Object.defineProperty(LengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_length; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LengthContext.prototype.enterRule = function (listener) {
        if (listener.enterLength) {
            listener.enterLength(this);
        }
    };
    // @Override
    LengthContext.prototype.exitRule = function (listener) {
        if (listener.exitLength) {
            listener.exitLength(this);
        }
    };
    // @Override
    LengthContext.prototype.accept = function (visitor) {
        if (visitor.visitLength) {
            return visitor.visitLength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LengthContext = LengthContext;
var SubscriptContext = /** @class */ (function (_super) {
    __extends(SubscriptContext, _super);
    function SubscriptContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubscriptContext.prototype.ALL = function () { return this.tryGetToken(Cobol85Parser.ALL, 0); };
    SubscriptContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    SubscriptContext.prototype.qualifiedDataName = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameContext);
    };
    SubscriptContext.prototype.indexName = function () {
        return this.tryGetRuleContext(0, IndexNameContext);
    };
    SubscriptContext.prototype.arithmeticExpression = function () {
        return this.tryGetRuleContext(0, ArithmeticExpressionContext);
    };
    Object.defineProperty(SubscriptContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_subscript; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubscriptContext.prototype.enterRule = function (listener) {
        if (listener.enterSubscript) {
            listener.enterSubscript(this);
        }
    };
    // @Override
    SubscriptContext.prototype.exitRule = function (listener) {
        if (listener.exitSubscript) {
            listener.exitSubscript(this);
        }
    };
    // @Override
    SubscriptContext.prototype.accept = function (visitor) {
        if (visitor.visitSubscript) {
            return visitor.visitSubscript(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubscriptContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubscriptContext = SubscriptContext;
var ArgumentContext = /** @class */ (function (_super) {
    __extends(ArgumentContext, _super);
    function ArgumentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArgumentContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    ArgumentContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    ArgumentContext.prototype.qualifiedDataName = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameContext);
    };
    ArgumentContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    ArgumentContext.prototype.indexName = function () {
        return this.tryGetRuleContext(0, IndexNameContext);
    };
    ArgumentContext.prototype.arithmeticExpression = function () {
        return this.tryGetRuleContext(0, ArithmeticExpressionContext);
    };
    Object.defineProperty(ArgumentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_argument; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArgumentContext.prototype.enterRule = function (listener) {
        if (listener.enterArgument) {
            listener.enterArgument(this);
        }
    };
    // @Override
    ArgumentContext.prototype.exitRule = function (listener) {
        if (listener.exitArgument) {
            listener.exitArgument(this);
        }
    };
    // @Override
    ArgumentContext.prototype.accept = function (visitor) {
        if (visitor.visitArgument) {
            return visitor.visitArgument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArgumentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArgumentContext = ArgumentContext;
var QualifiedDataNameContext = /** @class */ (function (_super) {
    __extends(QualifiedDataNameContext, _super);
    function QualifiedDataNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    QualifiedDataNameContext.prototype.qualifiedDataNameFormat1 = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameFormat1Context);
    };
    QualifiedDataNameContext.prototype.qualifiedDataNameFormat2 = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameFormat2Context);
    };
    QualifiedDataNameContext.prototype.qualifiedDataNameFormat3 = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameFormat3Context);
    };
    QualifiedDataNameContext.prototype.qualifiedDataNameFormat4 = function () {
        return this.tryGetRuleContext(0, QualifiedDataNameFormat4Context);
    };
    Object.defineProperty(QualifiedDataNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_qualifiedDataName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    QualifiedDataNameContext.prototype.enterRule = function (listener) {
        if (listener.enterQualifiedDataName) {
            listener.enterQualifiedDataName(this);
        }
    };
    // @Override
    QualifiedDataNameContext.prototype.exitRule = function (listener) {
        if (listener.exitQualifiedDataName) {
            listener.exitQualifiedDataName(this);
        }
    };
    // @Override
    QualifiedDataNameContext.prototype.accept = function (visitor) {
        if (visitor.visitQualifiedDataName) {
            return visitor.visitQualifiedDataName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return QualifiedDataNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.QualifiedDataNameContext = QualifiedDataNameContext;
var QualifiedDataNameFormat1Context = /** @class */ (function (_super) {
    __extends(QualifiedDataNameFormat1Context, _super);
    function QualifiedDataNameFormat1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    QualifiedDataNameFormat1Context.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    QualifiedDataNameFormat1Context.prototype.conditionName = function () {
        return this.tryGetRuleContext(0, ConditionNameContext);
    };
    QualifiedDataNameFormat1Context.prototype.inFile = function () {
        return this.tryGetRuleContext(0, InFileContext);
    };
    QualifiedDataNameFormat1Context.prototype.qualifiedInData = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedInDataContext);
        }
        else {
            return this.getRuleContext(i, QualifiedInDataContext);
        }
    };
    Object.defineProperty(QualifiedDataNameFormat1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_qualifiedDataNameFormat1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    QualifiedDataNameFormat1Context.prototype.enterRule = function (listener) {
        if (listener.enterQualifiedDataNameFormat1) {
            listener.enterQualifiedDataNameFormat1(this);
        }
    };
    // @Override
    QualifiedDataNameFormat1Context.prototype.exitRule = function (listener) {
        if (listener.exitQualifiedDataNameFormat1) {
            listener.exitQualifiedDataNameFormat1(this);
        }
    };
    // @Override
    QualifiedDataNameFormat1Context.prototype.accept = function (visitor) {
        if (visitor.visitQualifiedDataNameFormat1) {
            return visitor.visitQualifiedDataNameFormat1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return QualifiedDataNameFormat1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.QualifiedDataNameFormat1Context = QualifiedDataNameFormat1Context;
var QualifiedDataNameFormat2Context = /** @class */ (function (_super) {
    __extends(QualifiedDataNameFormat2Context, _super);
    function QualifiedDataNameFormat2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    QualifiedDataNameFormat2Context.prototype.paragraphName = function () {
        return this.getRuleContext(0, ParagraphNameContext);
    };
    QualifiedDataNameFormat2Context.prototype.inSection = function () {
        return this.getRuleContext(0, InSectionContext);
    };
    Object.defineProperty(QualifiedDataNameFormat2Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_qualifiedDataNameFormat2; },
        enumerable: true,
        configurable: true
    });
    // @Override
    QualifiedDataNameFormat2Context.prototype.enterRule = function (listener) {
        if (listener.enterQualifiedDataNameFormat2) {
            listener.enterQualifiedDataNameFormat2(this);
        }
    };
    // @Override
    QualifiedDataNameFormat2Context.prototype.exitRule = function (listener) {
        if (listener.exitQualifiedDataNameFormat2) {
            listener.exitQualifiedDataNameFormat2(this);
        }
    };
    // @Override
    QualifiedDataNameFormat2Context.prototype.accept = function (visitor) {
        if (visitor.visitQualifiedDataNameFormat2) {
            return visitor.visitQualifiedDataNameFormat2(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return QualifiedDataNameFormat2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.QualifiedDataNameFormat2Context = QualifiedDataNameFormat2Context;
var QualifiedDataNameFormat3Context = /** @class */ (function (_super) {
    __extends(QualifiedDataNameFormat3Context, _super);
    function QualifiedDataNameFormat3Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    QualifiedDataNameFormat3Context.prototype.textName = function () {
        return this.getRuleContext(0, TextNameContext);
    };
    QualifiedDataNameFormat3Context.prototype.inLibrary = function () {
        return this.getRuleContext(0, InLibraryContext);
    };
    Object.defineProperty(QualifiedDataNameFormat3Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_qualifiedDataNameFormat3; },
        enumerable: true,
        configurable: true
    });
    // @Override
    QualifiedDataNameFormat3Context.prototype.enterRule = function (listener) {
        if (listener.enterQualifiedDataNameFormat3) {
            listener.enterQualifiedDataNameFormat3(this);
        }
    };
    // @Override
    QualifiedDataNameFormat3Context.prototype.exitRule = function (listener) {
        if (listener.exitQualifiedDataNameFormat3) {
            listener.exitQualifiedDataNameFormat3(this);
        }
    };
    // @Override
    QualifiedDataNameFormat3Context.prototype.accept = function (visitor) {
        if (visitor.visitQualifiedDataNameFormat3) {
            return visitor.visitQualifiedDataNameFormat3(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return QualifiedDataNameFormat3Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.QualifiedDataNameFormat3Context = QualifiedDataNameFormat3Context;
var QualifiedDataNameFormat4Context = /** @class */ (function (_super) {
    __extends(QualifiedDataNameFormat4Context, _super);
    function QualifiedDataNameFormat4Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    QualifiedDataNameFormat4Context.prototype.LINAGE_COUNTER = function () { return this.getToken(Cobol85Parser.LINAGE_COUNTER, 0); };
    QualifiedDataNameFormat4Context.prototype.inFile = function () {
        return this.getRuleContext(0, InFileContext);
    };
    Object.defineProperty(QualifiedDataNameFormat4Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_qualifiedDataNameFormat4; },
        enumerable: true,
        configurable: true
    });
    // @Override
    QualifiedDataNameFormat4Context.prototype.enterRule = function (listener) {
        if (listener.enterQualifiedDataNameFormat4) {
            listener.enterQualifiedDataNameFormat4(this);
        }
    };
    // @Override
    QualifiedDataNameFormat4Context.prototype.exitRule = function (listener) {
        if (listener.exitQualifiedDataNameFormat4) {
            listener.exitQualifiedDataNameFormat4(this);
        }
    };
    // @Override
    QualifiedDataNameFormat4Context.prototype.accept = function (visitor) {
        if (visitor.visitQualifiedDataNameFormat4) {
            return visitor.visitQualifiedDataNameFormat4(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return QualifiedDataNameFormat4Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.QualifiedDataNameFormat4Context = QualifiedDataNameFormat4Context;
var QualifiedInDataContext = /** @class */ (function (_super) {
    __extends(QualifiedInDataContext, _super);
    function QualifiedInDataContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    QualifiedInDataContext.prototype.inData = function () {
        return this.tryGetRuleContext(0, InDataContext);
    };
    QualifiedInDataContext.prototype.inTable = function () {
        return this.tryGetRuleContext(0, InTableContext);
    };
    Object.defineProperty(QualifiedInDataContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_qualifiedInData; },
        enumerable: true,
        configurable: true
    });
    // @Override
    QualifiedInDataContext.prototype.enterRule = function (listener) {
        if (listener.enterQualifiedInData) {
            listener.enterQualifiedInData(this);
        }
    };
    // @Override
    QualifiedInDataContext.prototype.exitRule = function (listener) {
        if (listener.exitQualifiedInData) {
            listener.exitQualifiedInData(this);
        }
    };
    // @Override
    QualifiedInDataContext.prototype.accept = function (visitor) {
        if (visitor.visitQualifiedInData) {
            return visitor.visitQualifiedInData(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return QualifiedInDataContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.QualifiedInDataContext = QualifiedInDataContext;
var InDataContext = /** @class */ (function (_super) {
    __extends(InDataContext, _super);
    function InDataContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InDataContext.prototype.dataName = function () {
        return this.getRuleContext(0, DataNameContext);
    };
    InDataContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    InDataContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    Object.defineProperty(InDataContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inData; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InDataContext.prototype.enterRule = function (listener) {
        if (listener.enterInData) {
            listener.enterInData(this);
        }
    };
    // @Override
    InDataContext.prototype.exitRule = function (listener) {
        if (listener.exitInData) {
            listener.exitInData(this);
        }
    };
    // @Override
    InDataContext.prototype.accept = function (visitor) {
        if (visitor.visitInData) {
            return visitor.visitInData(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InDataContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InDataContext = InDataContext;
var InFileContext = /** @class */ (function (_super) {
    __extends(InFileContext, _super);
    function InFileContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InFileContext.prototype.fileName = function () {
        return this.getRuleContext(0, FileNameContext);
    };
    InFileContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    InFileContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    Object.defineProperty(InFileContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inFile; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InFileContext.prototype.enterRule = function (listener) {
        if (listener.enterInFile) {
            listener.enterInFile(this);
        }
    };
    // @Override
    InFileContext.prototype.exitRule = function (listener) {
        if (listener.exitInFile) {
            listener.exitInFile(this);
        }
    };
    // @Override
    InFileContext.prototype.accept = function (visitor) {
        if (visitor.visitInFile) {
            return visitor.visitInFile(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InFileContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InFileContext = InFileContext;
var InMnemonicContext = /** @class */ (function (_super) {
    __extends(InMnemonicContext, _super);
    function InMnemonicContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InMnemonicContext.prototype.mnemonicName = function () {
        return this.getRuleContext(0, MnemonicNameContext);
    };
    InMnemonicContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    InMnemonicContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    Object.defineProperty(InMnemonicContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inMnemonic; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InMnemonicContext.prototype.enterRule = function (listener) {
        if (listener.enterInMnemonic) {
            listener.enterInMnemonic(this);
        }
    };
    // @Override
    InMnemonicContext.prototype.exitRule = function (listener) {
        if (listener.exitInMnemonic) {
            listener.exitInMnemonic(this);
        }
    };
    // @Override
    InMnemonicContext.prototype.accept = function (visitor) {
        if (visitor.visitInMnemonic) {
            return visitor.visitInMnemonic(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InMnemonicContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InMnemonicContext = InMnemonicContext;
var InSectionContext = /** @class */ (function (_super) {
    __extends(InSectionContext, _super);
    function InSectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InSectionContext.prototype.sectionName = function () {
        return this.getRuleContext(0, SectionNameContext);
    };
    InSectionContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    InSectionContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    Object.defineProperty(InSectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inSection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InSectionContext.prototype.enterRule = function (listener) {
        if (listener.enterInSection) {
            listener.enterInSection(this);
        }
    };
    // @Override
    InSectionContext.prototype.exitRule = function (listener) {
        if (listener.exitInSection) {
            listener.exitInSection(this);
        }
    };
    // @Override
    InSectionContext.prototype.accept = function (visitor) {
        if (visitor.visitInSection) {
            return visitor.visitInSection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InSectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InSectionContext = InSectionContext;
var InLibraryContext = /** @class */ (function (_super) {
    __extends(InLibraryContext, _super);
    function InLibraryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InLibraryContext.prototype.libraryName = function () {
        return this.getRuleContext(0, LibraryNameContext);
    };
    InLibraryContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    InLibraryContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    Object.defineProperty(InLibraryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inLibrary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InLibraryContext.prototype.enterRule = function (listener) {
        if (listener.enterInLibrary) {
            listener.enterInLibrary(this);
        }
    };
    // @Override
    InLibraryContext.prototype.exitRule = function (listener) {
        if (listener.exitInLibrary) {
            listener.exitInLibrary(this);
        }
    };
    // @Override
    InLibraryContext.prototype.accept = function (visitor) {
        if (visitor.visitInLibrary) {
            return visitor.visitInLibrary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InLibraryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InLibraryContext = InLibraryContext;
var InTableContext = /** @class */ (function (_super) {
    __extends(InTableContext, _super);
    function InTableContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InTableContext.prototype.tableCall = function () {
        return this.getRuleContext(0, TableCallContext);
    };
    InTableContext.prototype.IN = function () { return this.tryGetToken(Cobol85Parser.IN, 0); };
    InTableContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    Object.defineProperty(InTableContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_inTable; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InTableContext.prototype.enterRule = function (listener) {
        if (listener.enterInTable) {
            listener.enterInTable(this);
        }
    };
    // @Override
    InTableContext.prototype.exitRule = function (listener) {
        if (listener.exitInTable) {
            listener.exitInTable(this);
        }
    };
    // @Override
    InTableContext.prototype.accept = function (visitor) {
        if (visitor.visitInTable) {
            return visitor.visitInTable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InTableContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InTableContext = InTableContext;
var AlphabetNameContext = /** @class */ (function (_super) {
    __extends(AlphabetNameContext, _super);
    function AlphabetNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlphabetNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(AlphabetNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_alphabetName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AlphabetNameContext.prototype.enterRule = function (listener) {
        if (listener.enterAlphabetName) {
            listener.enterAlphabetName(this);
        }
    };
    // @Override
    AlphabetNameContext.prototype.exitRule = function (listener) {
        if (listener.exitAlphabetName) {
            listener.exitAlphabetName(this);
        }
    };
    // @Override
    AlphabetNameContext.prototype.accept = function (visitor) {
        if (visitor.visitAlphabetName) {
            return visitor.visitAlphabetName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AlphabetNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlphabetNameContext = AlphabetNameContext;
var AssignmentNameContext = /** @class */ (function (_super) {
    __extends(AssignmentNameContext, _super);
    function AssignmentNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AssignmentNameContext.prototype.systemName = function () {
        return this.getRuleContext(0, SystemNameContext);
    };
    Object.defineProperty(AssignmentNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_assignmentName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AssignmentNameContext.prototype.enterRule = function (listener) {
        if (listener.enterAssignmentName) {
            listener.enterAssignmentName(this);
        }
    };
    // @Override
    AssignmentNameContext.prototype.exitRule = function (listener) {
        if (listener.exitAssignmentName) {
            listener.exitAssignmentName(this);
        }
    };
    // @Override
    AssignmentNameContext.prototype.accept = function (visitor) {
        if (visitor.visitAssignmentName) {
            return visitor.visitAssignmentName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AssignmentNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AssignmentNameContext = AssignmentNameContext;
var BasisNameContext = /** @class */ (function (_super) {
    __extends(BasisNameContext, _super);
    function BasisNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BasisNameContext.prototype.programName = function () {
        return this.getRuleContext(0, ProgramNameContext);
    };
    Object.defineProperty(BasisNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_basisName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BasisNameContext.prototype.enterRule = function (listener) {
        if (listener.enterBasisName) {
            listener.enterBasisName(this);
        }
    };
    // @Override
    BasisNameContext.prototype.exitRule = function (listener) {
        if (listener.exitBasisName) {
            listener.exitBasisName(this);
        }
    };
    // @Override
    BasisNameContext.prototype.accept = function (visitor) {
        if (visitor.visitBasisName) {
            return visitor.visitBasisName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BasisNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BasisNameContext = BasisNameContext;
var CdNameContext = /** @class */ (function (_super) {
    __extends(CdNameContext, _super);
    function CdNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CdNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(CdNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_cdName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CdNameContext.prototype.enterRule = function (listener) {
        if (listener.enterCdName) {
            listener.enterCdName(this);
        }
    };
    // @Override
    CdNameContext.prototype.exitRule = function (listener) {
        if (listener.exitCdName) {
            listener.exitCdName(this);
        }
    };
    // @Override
    CdNameContext.prototype.accept = function (visitor) {
        if (visitor.visitCdName) {
            return visitor.visitCdName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CdNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CdNameContext = CdNameContext;
var ClassNameContext = /** @class */ (function (_super) {
    __extends(ClassNameContext, _super);
    function ClassNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(ClassNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_className; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassNameContext.prototype.enterRule = function (listener) {
        if (listener.enterClassName) {
            listener.enterClassName(this);
        }
    };
    // @Override
    ClassNameContext.prototype.exitRule = function (listener) {
        if (listener.exitClassName) {
            listener.exitClassName(this);
        }
    };
    // @Override
    ClassNameContext.prototype.accept = function (visitor) {
        if (visitor.visitClassName) {
            return visitor.visitClassName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassNameContext = ClassNameContext;
var ComputerNameContext = /** @class */ (function (_super) {
    __extends(ComputerNameContext, _super);
    function ComputerNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ComputerNameContext.prototype.systemName = function () {
        return this.getRuleContext(0, SystemNameContext);
    };
    Object.defineProperty(ComputerNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_computerName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ComputerNameContext.prototype.enterRule = function (listener) {
        if (listener.enterComputerName) {
            listener.enterComputerName(this);
        }
    };
    // @Override
    ComputerNameContext.prototype.exitRule = function (listener) {
        if (listener.exitComputerName) {
            listener.exitComputerName(this);
        }
    };
    // @Override
    ComputerNameContext.prototype.accept = function (visitor) {
        if (visitor.visitComputerName) {
            return visitor.visitComputerName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ComputerNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ComputerNameContext = ComputerNameContext;
var ConditionNameContext = /** @class */ (function (_super) {
    __extends(ConditionNameContext, _super);
    function ConditionNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConditionNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(ConditionNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_conditionName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConditionNameContext.prototype.enterRule = function (listener) {
        if (listener.enterConditionName) {
            listener.enterConditionName(this);
        }
    };
    // @Override
    ConditionNameContext.prototype.exitRule = function (listener) {
        if (listener.exitConditionName) {
            listener.exitConditionName(this);
        }
    };
    // @Override
    ConditionNameContext.prototype.accept = function (visitor) {
        if (visitor.visitConditionName) {
            return visitor.visitConditionName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConditionNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConditionNameContext = ConditionNameContext;
var DataNameContext = /** @class */ (function (_super) {
    __extends(DataNameContext, _super);
    function DataNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(DataNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataNameContext.prototype.enterRule = function (listener) {
        if (listener.enterDataName) {
            listener.enterDataName(this);
        }
    };
    // @Override
    DataNameContext.prototype.exitRule = function (listener) {
        if (listener.exitDataName) {
            listener.exitDataName(this);
        }
    };
    // @Override
    DataNameContext.prototype.accept = function (visitor) {
        if (visitor.visitDataName) {
            return visitor.visitDataName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataNameContext = DataNameContext;
var DataDescNameContext = /** @class */ (function (_super) {
    __extends(DataDescNameContext, _super);
    function DataDescNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DataDescNameContext.prototype.FILLER = function () { return this.tryGetToken(Cobol85Parser.FILLER, 0); };
    DataDescNameContext.prototype.CURSOR = function () { return this.tryGetToken(Cobol85Parser.CURSOR, 0); };
    DataDescNameContext.prototype.dataName = function () {
        return this.tryGetRuleContext(0, DataNameContext);
    };
    Object.defineProperty(DataDescNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_dataDescName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DataDescNameContext.prototype.enterRule = function (listener) {
        if (listener.enterDataDescName) {
            listener.enterDataDescName(this);
        }
    };
    // @Override
    DataDescNameContext.prototype.exitRule = function (listener) {
        if (listener.exitDataDescName) {
            listener.exitDataDescName(this);
        }
    };
    // @Override
    DataDescNameContext.prototype.accept = function (visitor) {
        if (visitor.visitDataDescName) {
            return visitor.visitDataDescName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DataDescNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DataDescNameContext = DataDescNameContext;
var EnvironmentNameContext = /** @class */ (function (_super) {
    __extends(EnvironmentNameContext, _super);
    function EnvironmentNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnvironmentNameContext.prototype.systemName = function () {
        return this.getRuleContext(0, SystemNameContext);
    };
    Object.defineProperty(EnvironmentNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_environmentName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnvironmentNameContext.prototype.enterRule = function (listener) {
        if (listener.enterEnvironmentName) {
            listener.enterEnvironmentName(this);
        }
    };
    // @Override
    EnvironmentNameContext.prototype.exitRule = function (listener) {
        if (listener.exitEnvironmentName) {
            listener.exitEnvironmentName(this);
        }
    };
    // @Override
    EnvironmentNameContext.prototype.accept = function (visitor) {
        if (visitor.visitEnvironmentName) {
            return visitor.visitEnvironmentName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnvironmentNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnvironmentNameContext = EnvironmentNameContext;
var FileNameContext = /** @class */ (function (_super) {
    __extends(FileNameContext, _super);
    function FileNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FileNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(FileNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_fileName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FileNameContext.prototype.enterRule = function (listener) {
        if (listener.enterFileName) {
            listener.enterFileName(this);
        }
    };
    // @Override
    FileNameContext.prototype.exitRule = function (listener) {
        if (listener.exitFileName) {
            listener.exitFileName(this);
        }
    };
    // @Override
    FileNameContext.prototype.accept = function (visitor) {
        if (visitor.visitFileName) {
            return visitor.visitFileName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FileNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FileNameContext = FileNameContext;
var FunctionNameContext = /** @class */ (function (_super) {
    __extends(FunctionNameContext, _super);
    function FunctionNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FunctionNameContext.prototype.INTEGER = function () { return this.tryGetToken(Cobol85Parser.INTEGER, 0); };
    FunctionNameContext.prototype.LENGTH = function () { return this.tryGetToken(Cobol85Parser.LENGTH, 0); };
    FunctionNameContext.prototype.RANDOM = function () { return this.tryGetToken(Cobol85Parser.RANDOM, 0); };
    FunctionNameContext.prototype.SUM = function () { return this.tryGetToken(Cobol85Parser.SUM, 0); };
    FunctionNameContext.prototype.WHEN_COMPILED = function () { return this.tryGetToken(Cobol85Parser.WHEN_COMPILED, 0); };
    FunctionNameContext.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(FunctionNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_functionName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FunctionNameContext.prototype.enterRule = function (listener) {
        if (listener.enterFunctionName) {
            listener.enterFunctionName(this);
        }
    };
    // @Override
    FunctionNameContext.prototype.exitRule = function (listener) {
        if (listener.exitFunctionName) {
            listener.exitFunctionName(this);
        }
    };
    // @Override
    FunctionNameContext.prototype.accept = function (visitor) {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FunctionNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FunctionNameContext = FunctionNameContext;
var IndexNameContext = /** @class */ (function (_super) {
    __extends(IndexNameContext, _super);
    function IndexNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IndexNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(IndexNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_indexName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IndexNameContext.prototype.enterRule = function (listener) {
        if (listener.enterIndexName) {
            listener.enterIndexName(this);
        }
    };
    // @Override
    IndexNameContext.prototype.exitRule = function (listener) {
        if (listener.exitIndexName) {
            listener.exitIndexName(this);
        }
    };
    // @Override
    IndexNameContext.prototype.accept = function (visitor) {
        if (visitor.visitIndexName) {
            return visitor.visitIndexName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IndexNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IndexNameContext = IndexNameContext;
var LanguageNameContext = /** @class */ (function (_super) {
    __extends(LanguageNameContext, _super);
    function LanguageNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LanguageNameContext.prototype.systemName = function () {
        return this.getRuleContext(0, SystemNameContext);
    };
    Object.defineProperty(LanguageNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_languageName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LanguageNameContext.prototype.enterRule = function (listener) {
        if (listener.enterLanguageName) {
            listener.enterLanguageName(this);
        }
    };
    // @Override
    LanguageNameContext.prototype.exitRule = function (listener) {
        if (listener.exitLanguageName) {
            listener.exitLanguageName(this);
        }
    };
    // @Override
    LanguageNameContext.prototype.accept = function (visitor) {
        if (visitor.visitLanguageName) {
            return visitor.visitLanguageName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LanguageNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LanguageNameContext = LanguageNameContext;
var LibraryNameContext = /** @class */ (function (_super) {
    __extends(LibraryNameContext, _super);
    function LibraryNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LibraryNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(LibraryNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_libraryName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LibraryNameContext.prototype.enterRule = function (listener) {
        if (listener.enterLibraryName) {
            listener.enterLibraryName(this);
        }
    };
    // @Override
    LibraryNameContext.prototype.exitRule = function (listener) {
        if (listener.exitLibraryName) {
            listener.exitLibraryName(this);
        }
    };
    // @Override
    LibraryNameContext.prototype.accept = function (visitor) {
        if (visitor.visitLibraryName) {
            return visitor.visitLibraryName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LibraryNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LibraryNameContext = LibraryNameContext;
var LocalNameContext = /** @class */ (function (_super) {
    __extends(LocalNameContext, _super);
    function LocalNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LocalNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(LocalNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_localName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LocalNameContext.prototype.enterRule = function (listener) {
        if (listener.enterLocalName) {
            listener.enterLocalName(this);
        }
    };
    // @Override
    LocalNameContext.prototype.exitRule = function (listener) {
        if (listener.exitLocalName) {
            listener.exitLocalName(this);
        }
    };
    // @Override
    LocalNameContext.prototype.accept = function (visitor) {
        if (visitor.visitLocalName) {
            return visitor.visitLocalName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LocalNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LocalNameContext = LocalNameContext;
var MnemonicNameContext = /** @class */ (function (_super) {
    __extends(MnemonicNameContext, _super);
    function MnemonicNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MnemonicNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(MnemonicNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_mnemonicName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MnemonicNameContext.prototype.enterRule = function (listener) {
        if (listener.enterMnemonicName) {
            listener.enterMnemonicName(this);
        }
    };
    // @Override
    MnemonicNameContext.prototype.exitRule = function (listener) {
        if (listener.exitMnemonicName) {
            listener.exitMnemonicName(this);
        }
    };
    // @Override
    MnemonicNameContext.prototype.accept = function (visitor) {
        if (visitor.visitMnemonicName) {
            return visitor.visitMnemonicName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MnemonicNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MnemonicNameContext = MnemonicNameContext;
var ParagraphNameContext = /** @class */ (function (_super) {
    __extends(ParagraphNameContext, _super);
    function ParagraphNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ParagraphNameContext.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    ParagraphNameContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(ParagraphNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_paragraphName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ParagraphNameContext.prototype.enterRule = function (listener) {
        if (listener.enterParagraphName) {
            listener.enterParagraphName(this);
        }
    };
    // @Override
    ParagraphNameContext.prototype.exitRule = function (listener) {
        if (listener.exitParagraphName) {
            listener.exitParagraphName(this);
        }
    };
    // @Override
    ParagraphNameContext.prototype.accept = function (visitor) {
        if (visitor.visitParagraphName) {
            return visitor.visitParagraphName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ParagraphNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ParagraphNameContext = ParagraphNameContext;
var ProcedureNameContext = /** @class */ (function (_super) {
    __extends(ProcedureNameContext, _super);
    function ProcedureNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProcedureNameContext.prototype.paragraphName = function () {
        return this.tryGetRuleContext(0, ParagraphNameContext);
    };
    ProcedureNameContext.prototype.inSection = function () {
        return this.tryGetRuleContext(0, InSectionContext);
    };
    ProcedureNameContext.prototype.sectionName = function () {
        return this.tryGetRuleContext(0, SectionNameContext);
    };
    Object.defineProperty(ProcedureNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_procedureName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProcedureNameContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedureName) {
            listener.enterProcedureName(this);
        }
    };
    // @Override
    ProcedureNameContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedureName) {
            listener.exitProcedureName(this);
        }
    };
    // @Override
    ProcedureNameContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedureName) {
            return visitor.visitProcedureName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProcedureNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProcedureNameContext = ProcedureNameContext;
var ProgramNameContext = /** @class */ (function (_super) {
    __extends(ProgramNameContext, _super);
    function ProgramNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ProgramNameContext.prototype.NONNUMERICLITERAL = function () { return this.tryGetToken(Cobol85Parser.NONNUMERICLITERAL, 0); };
    ProgramNameContext.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(ProgramNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_programName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ProgramNameContext.prototype.enterRule = function (listener) {
        if (listener.enterProgramName) {
            listener.enterProgramName(this);
        }
    };
    // @Override
    ProgramNameContext.prototype.exitRule = function (listener) {
        if (listener.exitProgramName) {
            listener.exitProgramName(this);
        }
    };
    // @Override
    ProgramNameContext.prototype.accept = function (visitor) {
        if (visitor.visitProgramName) {
            return visitor.visitProgramName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ProgramNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ProgramNameContext = ProgramNameContext;
var RecordNameContext = /** @class */ (function (_super) {
    __extends(RecordNameContext, _super);
    function RecordNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RecordNameContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    Object.defineProperty(RecordNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_recordName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RecordNameContext.prototype.enterRule = function (listener) {
        if (listener.enterRecordName) {
            listener.enterRecordName(this);
        }
    };
    // @Override
    RecordNameContext.prototype.exitRule = function (listener) {
        if (listener.exitRecordName) {
            listener.exitRecordName(this);
        }
    };
    // @Override
    RecordNameContext.prototype.accept = function (visitor) {
        if (visitor.visitRecordName) {
            return visitor.visitRecordName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RecordNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RecordNameContext = RecordNameContext;
var ReportNameContext = /** @class */ (function (_super) {
    __extends(ReportNameContext, _super);
    function ReportNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReportNameContext.prototype.qualifiedDataName = function () {
        return this.getRuleContext(0, QualifiedDataNameContext);
    };
    Object.defineProperty(ReportNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_reportName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReportNameContext.prototype.enterRule = function (listener) {
        if (listener.enterReportName) {
            listener.enterReportName(this);
        }
    };
    // @Override
    ReportNameContext.prototype.exitRule = function (listener) {
        if (listener.exitReportName) {
            listener.exitReportName(this);
        }
    };
    // @Override
    ReportNameContext.prototype.accept = function (visitor) {
        if (visitor.visitReportName) {
            return visitor.visitReportName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReportNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReportNameContext = ReportNameContext;
var RoutineNameContext = /** @class */ (function (_super) {
    __extends(RoutineNameContext, _super);
    function RoutineNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RoutineNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(RoutineNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_routineName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RoutineNameContext.prototype.enterRule = function (listener) {
        if (listener.enterRoutineName) {
            listener.enterRoutineName(this);
        }
    };
    // @Override
    RoutineNameContext.prototype.exitRule = function (listener) {
        if (listener.exitRoutineName) {
            listener.exitRoutineName(this);
        }
    };
    // @Override
    RoutineNameContext.prototype.accept = function (visitor) {
        if (visitor.visitRoutineName) {
            return visitor.visitRoutineName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RoutineNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RoutineNameContext = RoutineNameContext;
var ScreenNameContext = /** @class */ (function (_super) {
    __extends(ScreenNameContext, _super);
    function ScreenNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ScreenNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(ScreenNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_screenName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ScreenNameContext.prototype.enterRule = function (listener) {
        if (listener.enterScreenName) {
            listener.enterScreenName(this);
        }
    };
    // @Override
    ScreenNameContext.prototype.exitRule = function (listener) {
        if (listener.exitScreenName) {
            listener.exitScreenName(this);
        }
    };
    // @Override
    ScreenNameContext.prototype.accept = function (visitor) {
        if (visitor.visitScreenName) {
            return visitor.visitScreenName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ScreenNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ScreenNameContext = ScreenNameContext;
var SectionNameContext = /** @class */ (function (_super) {
    __extends(SectionNameContext, _super);
    function SectionNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SectionNameContext.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    SectionNameContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(SectionNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_sectionName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SectionNameContext.prototype.enterRule = function (listener) {
        if (listener.enterSectionName) {
            listener.enterSectionName(this);
        }
    };
    // @Override
    SectionNameContext.prototype.exitRule = function (listener) {
        if (listener.exitSectionName) {
            listener.exitSectionName(this);
        }
    };
    // @Override
    SectionNameContext.prototype.accept = function (visitor) {
        if (visitor.visitSectionName) {
            return visitor.visitSectionName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SectionNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SectionNameContext = SectionNameContext;
var SystemNameContext = /** @class */ (function (_super) {
    __extends(SystemNameContext, _super);
    function SystemNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SystemNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(SystemNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_systemName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SystemNameContext.prototype.enterRule = function (listener) {
        if (listener.enterSystemName) {
            listener.enterSystemName(this);
        }
    };
    // @Override
    SystemNameContext.prototype.exitRule = function (listener) {
        if (listener.exitSystemName) {
            listener.exitSystemName(this);
        }
    };
    // @Override
    SystemNameContext.prototype.accept = function (visitor) {
        if (visitor.visitSystemName) {
            return visitor.visitSystemName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SystemNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SystemNameContext = SystemNameContext;
var SymbolicCharacterContext = /** @class */ (function (_super) {
    __extends(SymbolicCharacterContext, _super);
    function SymbolicCharacterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SymbolicCharacterContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(SymbolicCharacterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_symbolicCharacter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SymbolicCharacterContext.prototype.enterRule = function (listener) {
        if (listener.enterSymbolicCharacter) {
            listener.enterSymbolicCharacter(this);
        }
    };
    // @Override
    SymbolicCharacterContext.prototype.exitRule = function (listener) {
        if (listener.exitSymbolicCharacter) {
            listener.exitSymbolicCharacter(this);
        }
    };
    // @Override
    SymbolicCharacterContext.prototype.accept = function (visitor) {
        if (visitor.visitSymbolicCharacter) {
            return visitor.visitSymbolicCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SymbolicCharacterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SymbolicCharacterContext = SymbolicCharacterContext;
var TextNameContext = /** @class */ (function (_super) {
    __extends(TextNameContext, _super);
    function TextNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TextNameContext.prototype.cobolWord = function () {
        return this.getRuleContext(0, CobolWordContext);
    };
    Object.defineProperty(TextNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_textName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TextNameContext.prototype.enterRule = function (listener) {
        if (listener.enterTextName) {
            listener.enterTextName(this);
        }
    };
    // @Override
    TextNameContext.prototype.exitRule = function (listener) {
        if (listener.exitTextName) {
            listener.exitTextName(this);
        }
    };
    // @Override
    TextNameContext.prototype.accept = function (visitor) {
        if (visitor.visitTextName) {
            return visitor.visitTextName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TextNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TextNameContext = TextNameContext;
var CobolWordContext = /** @class */ (function (_super) {
    __extends(CobolWordContext, _super);
    function CobolWordContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CobolWordContext.prototype.IDENTIFIER = function () { return this.tryGetToken(Cobol85Parser.IDENTIFIER, 0); };
    CobolWordContext.prototype.COBOL = function () { return this.tryGetToken(Cobol85Parser.COBOL, 0); };
    CobolWordContext.prototype.PROGRAM = function () { return this.tryGetToken(Cobol85Parser.PROGRAM, 0); };
    CobolWordContext.prototype.ABORT = function () { return this.tryGetToken(Cobol85Parser.ABORT, 0); };
    CobolWordContext.prototype.AS = function () { return this.tryGetToken(Cobol85Parser.AS, 0); };
    CobolWordContext.prototype.ASCII = function () { return this.tryGetToken(Cobol85Parser.ASCII, 0); };
    CobolWordContext.prototype.ASSOCIATED_DATA = function () { return this.tryGetToken(Cobol85Parser.ASSOCIATED_DATA, 0); };
    CobolWordContext.prototype.ASSOCIATED_DATA_LENGTH = function () { return this.tryGetToken(Cobol85Parser.ASSOCIATED_DATA_LENGTH, 0); };
    CobolWordContext.prototype.ATTRIBUTE = function () { return this.tryGetToken(Cobol85Parser.ATTRIBUTE, 0); };
    CobolWordContext.prototype.AUTO = function () { return this.tryGetToken(Cobol85Parser.AUTO, 0); };
    CobolWordContext.prototype.AUTO_SKIP = function () { return this.tryGetToken(Cobol85Parser.AUTO_SKIP, 0); };
    CobolWordContext.prototype.BACKGROUND_COLOR = function () { return this.tryGetToken(Cobol85Parser.BACKGROUND_COLOR, 0); };
    CobolWordContext.prototype.BACKGROUND_COLOUR = function () { return this.tryGetToken(Cobol85Parser.BACKGROUND_COLOUR, 0); };
    CobolWordContext.prototype.BEEP = function () { return this.tryGetToken(Cobol85Parser.BEEP, 0); };
    CobolWordContext.prototype.BELL = function () { return this.tryGetToken(Cobol85Parser.BELL, 0); };
    CobolWordContext.prototype.BINARY = function () { return this.tryGetToken(Cobol85Parser.BINARY, 0); };
    CobolWordContext.prototype.BIT = function () { return this.tryGetToken(Cobol85Parser.BIT, 0); };
    CobolWordContext.prototype.BLINK = function () { return this.tryGetToken(Cobol85Parser.BLINK, 0); };
    CobolWordContext.prototype.BOUNDS = function () { return this.tryGetToken(Cobol85Parser.BOUNDS, 0); };
    CobolWordContext.prototype.CAPABLE = function () { return this.tryGetToken(Cobol85Parser.CAPABLE, 0); };
    CobolWordContext.prototype.CCSVERSION = function () { return this.tryGetToken(Cobol85Parser.CCSVERSION, 0); };
    CobolWordContext.prototype.CHANGED = function () { return this.tryGetToken(Cobol85Parser.CHANGED, 0); };
    CobolWordContext.prototype.CHANNEL = function () { return this.tryGetToken(Cobol85Parser.CHANNEL, 0); };
    CobolWordContext.prototype.CLOSE_DISPOSITION = function () { return this.tryGetToken(Cobol85Parser.CLOSE_DISPOSITION, 0); };
    CobolWordContext.prototype.COMMITMENT = function () { return this.tryGetToken(Cobol85Parser.COMMITMENT, 0); };
    CobolWordContext.prototype.CONTROL_POINT = function () { return this.tryGetToken(Cobol85Parser.CONTROL_POINT, 0); };
    CobolWordContext.prototype.CONVENTION = function () { return this.tryGetToken(Cobol85Parser.CONVENTION, 0); };
    CobolWordContext.prototype.CRUNCH = function () { return this.tryGetToken(Cobol85Parser.CRUNCH, 0); };
    CobolWordContext.prototype.CURSOR = function () { return this.tryGetToken(Cobol85Parser.CURSOR, 0); };
    CobolWordContext.prototype.DEFAULT = function () { return this.tryGetToken(Cobol85Parser.DEFAULT, 0); };
    CobolWordContext.prototype.DEFAULT_DISPLAY = function () { return this.tryGetToken(Cobol85Parser.DEFAULT_DISPLAY, 0); };
    CobolWordContext.prototype.DEFINITION = function () { return this.tryGetToken(Cobol85Parser.DEFINITION, 0); };
    CobolWordContext.prototype.DFHRESP = function () { return this.tryGetToken(Cobol85Parser.DFHRESP, 0); };
    CobolWordContext.prototype.DFHVALUE = function () { return this.tryGetToken(Cobol85Parser.DFHVALUE, 0); };
    CobolWordContext.prototype.DISK = function () { return this.tryGetToken(Cobol85Parser.DISK, 0); };
    CobolWordContext.prototype.DONTCARE = function () { return this.tryGetToken(Cobol85Parser.DONTCARE, 0); };
    CobolWordContext.prototype.DOUBLE = function () { return this.tryGetToken(Cobol85Parser.DOUBLE, 0); };
    CobolWordContext.prototype.EBCDIC = function () { return this.tryGetToken(Cobol85Parser.EBCDIC, 0); };
    CobolWordContext.prototype.EMPTY_CHECK = function () { return this.tryGetToken(Cobol85Parser.EMPTY_CHECK, 0); };
    CobolWordContext.prototype.ENTER = function () { return this.tryGetToken(Cobol85Parser.ENTER, 0); };
    CobolWordContext.prototype.ENTRY_PROCEDURE = function () { return this.tryGetToken(Cobol85Parser.ENTRY_PROCEDURE, 0); };
    CobolWordContext.prototype.EOL = function () { return this.tryGetToken(Cobol85Parser.EOL, 0); };
    CobolWordContext.prototype.EOS = function () { return this.tryGetToken(Cobol85Parser.EOS, 0); };
    CobolWordContext.prototype.ERASE = function () { return this.tryGetToken(Cobol85Parser.ERASE, 0); };
    CobolWordContext.prototype.ESCAPE = function () { return this.tryGetToken(Cobol85Parser.ESCAPE, 0); };
    CobolWordContext.prototype.EVENT = function () { return this.tryGetToken(Cobol85Parser.EVENT, 0); };
    CobolWordContext.prototype.EXCLUSIVE = function () { return this.tryGetToken(Cobol85Parser.EXCLUSIVE, 0); };
    CobolWordContext.prototype.EXPORT = function () { return this.tryGetToken(Cobol85Parser.EXPORT, 0); };
    CobolWordContext.prototype.EXTENDED = function () { return this.tryGetToken(Cobol85Parser.EXTENDED, 0); };
    CobolWordContext.prototype.FOREGROUND_COLOR = function () { return this.tryGetToken(Cobol85Parser.FOREGROUND_COLOR, 0); };
    CobolWordContext.prototype.FOREGROUND_COLOUR = function () { return this.tryGetToken(Cobol85Parser.FOREGROUND_COLOUR, 0); };
    CobolWordContext.prototype.FULL = function () { return this.tryGetToken(Cobol85Parser.FULL, 0); };
    CobolWordContext.prototype.FUNCTIONNAME = function () { return this.tryGetToken(Cobol85Parser.FUNCTIONNAME, 0); };
    CobolWordContext.prototype.FUNCTION_POINTER = function () { return this.tryGetToken(Cobol85Parser.FUNCTION_POINTER, 0); };
    CobolWordContext.prototype.GRID = function () { return this.tryGetToken(Cobol85Parser.GRID, 0); };
    CobolWordContext.prototype.HIGHLIGHT = function () { return this.tryGetToken(Cobol85Parser.HIGHLIGHT, 0); };
    CobolWordContext.prototype.IMPLICIT = function () { return this.tryGetToken(Cobol85Parser.IMPLICIT, 0); };
    CobolWordContext.prototype.IMPORT = function () { return this.tryGetToken(Cobol85Parser.IMPORT, 0); };
    CobolWordContext.prototype.INTEGER = function () { return this.tryGetToken(Cobol85Parser.INTEGER, 0); };
    CobolWordContext.prototype.KEPT = function () { return this.tryGetToken(Cobol85Parser.KEPT, 0); };
    CobolWordContext.prototype.KEYBOARD = function () { return this.tryGetToken(Cobol85Parser.KEYBOARD, 0); };
    CobolWordContext.prototype.LANGUAGE = function () { return this.tryGetToken(Cobol85Parser.LANGUAGE, 0); };
    CobolWordContext.prototype.LB = function () { return this.tryGetToken(Cobol85Parser.LB, 0); };
    CobolWordContext.prototype.LD = function () { return this.tryGetToken(Cobol85Parser.LD, 0); };
    CobolWordContext.prototype.LEFTLINE = function () { return this.tryGetToken(Cobol85Parser.LEFTLINE, 0); };
    CobolWordContext.prototype.LENGTH_CHECK = function () { return this.tryGetToken(Cobol85Parser.LENGTH_CHECK, 0); };
    CobolWordContext.prototype.LIBACCESS = function () { return this.tryGetToken(Cobol85Parser.LIBACCESS, 0); };
    CobolWordContext.prototype.LIBPARAMETER = function () { return this.tryGetToken(Cobol85Parser.LIBPARAMETER, 0); };
    CobolWordContext.prototype.LIBRARY = function () { return this.tryGetToken(Cobol85Parser.LIBRARY, 0); };
    CobolWordContext.prototype.LIST = function () { return this.tryGetToken(Cobol85Parser.LIST, 0); };
    CobolWordContext.prototype.LOCAL = function () { return this.tryGetToken(Cobol85Parser.LOCAL, 0); };
    CobolWordContext.prototype.LONG_DATE = function () { return this.tryGetToken(Cobol85Parser.LONG_DATE, 0); };
    CobolWordContext.prototype.LONG_TIME = function () { return this.tryGetToken(Cobol85Parser.LONG_TIME, 0); };
    CobolWordContext.prototype.LOWER = function () { return this.tryGetToken(Cobol85Parser.LOWER, 0); };
    CobolWordContext.prototype.LOWLIGHT = function () { return this.tryGetToken(Cobol85Parser.LOWLIGHT, 0); };
    CobolWordContext.prototype.MMDDYYYY = function () { return this.tryGetToken(Cobol85Parser.MMDDYYYY, 0); };
    CobolWordContext.prototype.NAMED = function () { return this.tryGetToken(Cobol85Parser.NAMED, 0); };
    CobolWordContext.prototype.NATIONAL = function () { return this.tryGetToken(Cobol85Parser.NATIONAL, 0); };
    CobolWordContext.prototype.NATIONAL_EDITED = function () { return this.tryGetToken(Cobol85Parser.NATIONAL_EDITED, 0); };
    CobolWordContext.prototype.NETWORK = function () { return this.tryGetToken(Cobol85Parser.NETWORK, 0); };
    CobolWordContext.prototype.NO_ECHO = function () { return this.tryGetToken(Cobol85Parser.NO_ECHO, 0); };
    CobolWordContext.prototype.NUMERIC_DATE = function () { return this.tryGetToken(Cobol85Parser.NUMERIC_DATE, 0); };
    CobolWordContext.prototype.NUMERIC_TIME = function () { return this.tryGetToken(Cobol85Parser.NUMERIC_TIME, 0); };
    CobolWordContext.prototype.ODT = function () { return this.tryGetToken(Cobol85Parser.ODT, 0); };
    CobolWordContext.prototype.ORDERLY = function () { return this.tryGetToken(Cobol85Parser.ORDERLY, 0); };
    CobolWordContext.prototype.OVERLINE = function () { return this.tryGetToken(Cobol85Parser.OVERLINE, 0); };
    CobolWordContext.prototype.OWN = function () { return this.tryGetToken(Cobol85Parser.OWN, 0); };
    CobolWordContext.prototype.PASSWORD = function () { return this.tryGetToken(Cobol85Parser.PASSWORD, 0); };
    CobolWordContext.prototype.PORT = function () { return this.tryGetToken(Cobol85Parser.PORT, 0); };
    CobolWordContext.prototype.PRINTER = function () { return this.tryGetToken(Cobol85Parser.PRINTER, 0); };
    CobolWordContext.prototype.PRIVATE = function () { return this.tryGetToken(Cobol85Parser.PRIVATE, 0); };
    CobolWordContext.prototype.PROCESS = function () { return this.tryGetToken(Cobol85Parser.PROCESS, 0); };
    CobolWordContext.prototype.PROMPT = function () { return this.tryGetToken(Cobol85Parser.PROMPT, 0); };
    CobolWordContext.prototype.READER = function () { return this.tryGetToken(Cobol85Parser.READER, 0); };
    CobolWordContext.prototype.REAL = function () { return this.tryGetToken(Cobol85Parser.REAL, 0); };
    CobolWordContext.prototype.RECEIVED = function () { return this.tryGetToken(Cobol85Parser.RECEIVED, 0); };
    CobolWordContext.prototype.RECURSIVE = function () { return this.tryGetToken(Cobol85Parser.RECURSIVE, 0); };
    CobolWordContext.prototype.REF = function () { return this.tryGetToken(Cobol85Parser.REF, 0); };
    CobolWordContext.prototype.REMOTE = function () { return this.tryGetToken(Cobol85Parser.REMOTE, 0); };
    CobolWordContext.prototype.REMOVE = function () { return this.tryGetToken(Cobol85Parser.REMOVE, 0); };
    CobolWordContext.prototype.REQUIRED = function () { return this.tryGetToken(Cobol85Parser.REQUIRED, 0); };
    CobolWordContext.prototype.REVERSE_VIDEO = function () { return this.tryGetToken(Cobol85Parser.REVERSE_VIDEO, 0); };
    CobolWordContext.prototype.SAVE = function () { return this.tryGetToken(Cobol85Parser.SAVE, 0); };
    CobolWordContext.prototype.SECURE = function () { return this.tryGetToken(Cobol85Parser.SECURE, 0); };
    CobolWordContext.prototype.SHARED = function () { return this.tryGetToken(Cobol85Parser.SHARED, 0); };
    CobolWordContext.prototype.SHAREDBYALL = function () { return this.tryGetToken(Cobol85Parser.SHAREDBYALL, 0); };
    CobolWordContext.prototype.SHAREDBYRUNUNIT = function () { return this.tryGetToken(Cobol85Parser.SHAREDBYRUNUNIT, 0); };
    CobolWordContext.prototype.SHARING = function () { return this.tryGetToken(Cobol85Parser.SHARING, 0); };
    CobolWordContext.prototype.SHORT_DATE = function () { return this.tryGetToken(Cobol85Parser.SHORT_DATE, 0); };
    CobolWordContext.prototype.SYMBOL = function () { return this.tryGetToken(Cobol85Parser.SYMBOL, 0); };
    CobolWordContext.prototype.TASK = function () { return this.tryGetToken(Cobol85Parser.TASK, 0); };
    CobolWordContext.prototype.THREAD = function () { return this.tryGetToken(Cobol85Parser.THREAD, 0); };
    CobolWordContext.prototype.THREAD_LOCAL = function () { return this.tryGetToken(Cobol85Parser.THREAD_LOCAL, 0); };
    CobolWordContext.prototype.TIMER = function () { return this.tryGetToken(Cobol85Parser.TIMER, 0); };
    CobolWordContext.prototype.TODAYS_DATE = function () { return this.tryGetToken(Cobol85Parser.TODAYS_DATE, 0); };
    CobolWordContext.prototype.TODAYS_NAME = function () { return this.tryGetToken(Cobol85Parser.TODAYS_NAME, 0); };
    CobolWordContext.prototype.TRUNCATED = function () { return this.tryGetToken(Cobol85Parser.TRUNCATED, 0); };
    CobolWordContext.prototype.TYPEDEF = function () { return this.tryGetToken(Cobol85Parser.TYPEDEF, 0); };
    CobolWordContext.prototype.UNDERLINE = function () { return this.tryGetToken(Cobol85Parser.UNDERLINE, 0); };
    CobolWordContext.prototype.VIRTUAL = function () { return this.tryGetToken(Cobol85Parser.VIRTUAL, 0); };
    CobolWordContext.prototype.WAIT = function () { return this.tryGetToken(Cobol85Parser.WAIT, 0); };
    CobolWordContext.prototype.YEAR = function () { return this.tryGetToken(Cobol85Parser.YEAR, 0); };
    CobolWordContext.prototype.YYYYMMDD = function () { return this.tryGetToken(Cobol85Parser.YYYYMMDD, 0); };
    CobolWordContext.prototype.YYYYDDD = function () { return this.tryGetToken(Cobol85Parser.YYYYDDD, 0); };
    CobolWordContext.prototype.ZERO_FILL = function () { return this.tryGetToken(Cobol85Parser.ZERO_FILL, 0); };
    Object.defineProperty(CobolWordContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_cobolWord; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CobolWordContext.prototype.enterRule = function (listener) {
        if (listener.enterCobolWord) {
            listener.enterCobolWord(this);
        }
    };
    // @Override
    CobolWordContext.prototype.exitRule = function (listener) {
        if (listener.exitCobolWord) {
            listener.exitCobolWord(this);
        }
    };
    // @Override
    CobolWordContext.prototype.accept = function (visitor) {
        if (visitor.visitCobolWord) {
            return visitor.visitCobolWord(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CobolWordContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CobolWordContext = CobolWordContext;
var LiteralContext = /** @class */ (function (_super) {
    __extends(LiteralContext, _super);
    function LiteralContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LiteralContext.prototype.NONNUMERICLITERAL = function () { return this.tryGetToken(Cobol85Parser.NONNUMERICLITERAL, 0); };
    LiteralContext.prototype.figurativeConstant = function () {
        return this.tryGetRuleContext(0, FigurativeConstantContext);
    };
    LiteralContext.prototype.numericLiteral = function () {
        return this.tryGetRuleContext(0, NumericLiteralContext);
    };
    LiteralContext.prototype.booleanLiteral = function () {
        return this.tryGetRuleContext(0, BooleanLiteralContext);
    };
    LiteralContext.prototype.cicsDfhRespLiteral = function () {
        return this.tryGetRuleContext(0, CicsDfhRespLiteralContext);
    };
    LiteralContext.prototype.cicsDfhValueLiteral = function () {
        return this.tryGetRuleContext(0, CicsDfhValueLiteralContext);
    };
    Object.defineProperty(LiteralContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_literal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LiteralContext.prototype.enterRule = function (listener) {
        if (listener.enterLiteral) {
            listener.enterLiteral(this);
        }
    };
    // @Override
    LiteralContext.prototype.exitRule = function (listener) {
        if (listener.exitLiteral) {
            listener.exitLiteral(this);
        }
    };
    // @Override
    LiteralContext.prototype.accept = function (visitor) {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LiteralContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LiteralContext = LiteralContext;
var BooleanLiteralContext = /** @class */ (function (_super) {
    __extends(BooleanLiteralContext, _super);
    function BooleanLiteralContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BooleanLiteralContext.prototype.TRUE = function () { return this.tryGetToken(Cobol85Parser.TRUE, 0); };
    BooleanLiteralContext.prototype.FALSE = function () { return this.tryGetToken(Cobol85Parser.FALSE, 0); };
    Object.defineProperty(BooleanLiteralContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_booleanLiteral; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BooleanLiteralContext.prototype.enterRule = function (listener) {
        if (listener.enterBooleanLiteral) {
            listener.enterBooleanLiteral(this);
        }
    };
    // @Override
    BooleanLiteralContext.prototype.exitRule = function (listener) {
        if (listener.exitBooleanLiteral) {
            listener.exitBooleanLiteral(this);
        }
    };
    // @Override
    BooleanLiteralContext.prototype.accept = function (visitor) {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BooleanLiteralContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BooleanLiteralContext = BooleanLiteralContext;
var NumericLiteralContext = /** @class */ (function (_super) {
    __extends(NumericLiteralContext, _super);
    function NumericLiteralContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NumericLiteralContext.prototype.NUMERICLITERAL = function () { return this.tryGetToken(Cobol85Parser.NUMERICLITERAL, 0); };
    NumericLiteralContext.prototype.ZERO = function () { return this.tryGetToken(Cobol85Parser.ZERO, 0); };
    NumericLiteralContext.prototype.integerLiteral = function () {
        return this.tryGetRuleContext(0, IntegerLiteralContext);
    };
    Object.defineProperty(NumericLiteralContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_numericLiteral; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NumericLiteralContext.prototype.enterRule = function (listener) {
        if (listener.enterNumericLiteral) {
            listener.enterNumericLiteral(this);
        }
    };
    // @Override
    NumericLiteralContext.prototype.exitRule = function (listener) {
        if (listener.exitNumericLiteral) {
            listener.exitNumericLiteral(this);
        }
    };
    // @Override
    NumericLiteralContext.prototype.accept = function (visitor) {
        if (visitor.visitNumericLiteral) {
            return visitor.visitNumericLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NumericLiteralContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NumericLiteralContext = NumericLiteralContext;
var IntegerLiteralContext = /** @class */ (function (_super) {
    __extends(IntegerLiteralContext, _super);
    function IntegerLiteralContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IntegerLiteralContext.prototype.INTEGERLITERAL = function () { return this.tryGetToken(Cobol85Parser.INTEGERLITERAL, 0); };
    IntegerLiteralContext.prototype.LEVEL_NUMBER_66 = function () { return this.tryGetToken(Cobol85Parser.LEVEL_NUMBER_66, 0); };
    IntegerLiteralContext.prototype.LEVEL_NUMBER_77 = function () { return this.tryGetToken(Cobol85Parser.LEVEL_NUMBER_77, 0); };
    IntegerLiteralContext.prototype.LEVEL_NUMBER_88 = function () { return this.tryGetToken(Cobol85Parser.LEVEL_NUMBER_88, 0); };
    Object.defineProperty(IntegerLiteralContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_integerLiteral; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IntegerLiteralContext.prototype.enterRule = function (listener) {
        if (listener.enterIntegerLiteral) {
            listener.enterIntegerLiteral(this);
        }
    };
    // @Override
    IntegerLiteralContext.prototype.exitRule = function (listener) {
        if (listener.exitIntegerLiteral) {
            listener.exitIntegerLiteral(this);
        }
    };
    // @Override
    IntegerLiteralContext.prototype.accept = function (visitor) {
        if (visitor.visitIntegerLiteral) {
            return visitor.visitIntegerLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IntegerLiteralContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IntegerLiteralContext = IntegerLiteralContext;
var CicsDfhRespLiteralContext = /** @class */ (function (_super) {
    __extends(CicsDfhRespLiteralContext, _super);
    function CicsDfhRespLiteralContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CicsDfhRespLiteralContext.prototype.DFHRESP = function () { return this.getToken(Cobol85Parser.DFHRESP, 0); };
    CicsDfhRespLiteralContext.prototype.LPARENCHAR = function () { return this.getToken(Cobol85Parser.LPARENCHAR, 0); };
    CicsDfhRespLiteralContext.prototype.RPARENCHAR = function () { return this.getToken(Cobol85Parser.RPARENCHAR, 0); };
    CicsDfhRespLiteralContext.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    CicsDfhRespLiteralContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(CicsDfhRespLiteralContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_cicsDfhRespLiteral; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CicsDfhRespLiteralContext.prototype.enterRule = function (listener) {
        if (listener.enterCicsDfhRespLiteral) {
            listener.enterCicsDfhRespLiteral(this);
        }
    };
    // @Override
    CicsDfhRespLiteralContext.prototype.exitRule = function (listener) {
        if (listener.exitCicsDfhRespLiteral) {
            listener.exitCicsDfhRespLiteral(this);
        }
    };
    // @Override
    CicsDfhRespLiteralContext.prototype.accept = function (visitor) {
        if (visitor.visitCicsDfhRespLiteral) {
            return visitor.visitCicsDfhRespLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CicsDfhRespLiteralContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CicsDfhRespLiteralContext = CicsDfhRespLiteralContext;
var CicsDfhValueLiteralContext = /** @class */ (function (_super) {
    __extends(CicsDfhValueLiteralContext, _super);
    function CicsDfhValueLiteralContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CicsDfhValueLiteralContext.prototype.DFHVALUE = function () { return this.getToken(Cobol85Parser.DFHVALUE, 0); };
    CicsDfhValueLiteralContext.prototype.LPARENCHAR = function () { return this.getToken(Cobol85Parser.LPARENCHAR, 0); };
    CicsDfhValueLiteralContext.prototype.RPARENCHAR = function () { return this.getToken(Cobol85Parser.RPARENCHAR, 0); };
    CicsDfhValueLiteralContext.prototype.cobolWord = function () {
        return this.tryGetRuleContext(0, CobolWordContext);
    };
    CicsDfhValueLiteralContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    Object.defineProperty(CicsDfhValueLiteralContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_cicsDfhValueLiteral; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CicsDfhValueLiteralContext.prototype.enterRule = function (listener) {
        if (listener.enterCicsDfhValueLiteral) {
            listener.enterCicsDfhValueLiteral(this);
        }
    };
    // @Override
    CicsDfhValueLiteralContext.prototype.exitRule = function (listener) {
        if (listener.exitCicsDfhValueLiteral) {
            listener.exitCicsDfhValueLiteral(this);
        }
    };
    // @Override
    CicsDfhValueLiteralContext.prototype.accept = function (visitor) {
        if (visitor.visitCicsDfhValueLiteral) {
            return visitor.visitCicsDfhValueLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CicsDfhValueLiteralContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CicsDfhValueLiteralContext = CicsDfhValueLiteralContext;
var FigurativeConstantContext = /** @class */ (function (_super) {
    __extends(FigurativeConstantContext, _super);
    function FigurativeConstantContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FigurativeConstantContext.prototype.ALL = function () { return this.tryGetToken(Cobol85Parser.ALL, 0); };
    FigurativeConstantContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    FigurativeConstantContext.prototype.HIGH_VALUE = function () { return this.tryGetToken(Cobol85Parser.HIGH_VALUE, 0); };
    FigurativeConstantContext.prototype.HIGH_VALUES = function () { return this.tryGetToken(Cobol85Parser.HIGH_VALUES, 0); };
    FigurativeConstantContext.prototype.LOW_VALUE = function () { return this.tryGetToken(Cobol85Parser.LOW_VALUE, 0); };
    FigurativeConstantContext.prototype.LOW_VALUES = function () { return this.tryGetToken(Cobol85Parser.LOW_VALUES, 0); };
    FigurativeConstantContext.prototype.NULL = function () { return this.tryGetToken(Cobol85Parser.NULL, 0); };
    FigurativeConstantContext.prototype.NULLS = function () { return this.tryGetToken(Cobol85Parser.NULLS, 0); };
    FigurativeConstantContext.prototype.QUOTE = function () { return this.tryGetToken(Cobol85Parser.QUOTE, 0); };
    FigurativeConstantContext.prototype.QUOTES = function () { return this.tryGetToken(Cobol85Parser.QUOTES, 0); };
    FigurativeConstantContext.prototype.SPACE = function () { return this.tryGetToken(Cobol85Parser.SPACE, 0); };
    FigurativeConstantContext.prototype.SPACES = function () { return this.tryGetToken(Cobol85Parser.SPACES, 0); };
    FigurativeConstantContext.prototype.ZERO = function () { return this.tryGetToken(Cobol85Parser.ZERO, 0); };
    FigurativeConstantContext.prototype.ZEROS = function () { return this.tryGetToken(Cobol85Parser.ZEROS, 0); };
    FigurativeConstantContext.prototype.ZEROES = function () { return this.tryGetToken(Cobol85Parser.ZEROES, 0); };
    Object.defineProperty(FigurativeConstantContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_figurativeConstant; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FigurativeConstantContext.prototype.enterRule = function (listener) {
        if (listener.enterFigurativeConstant) {
            listener.enterFigurativeConstant(this);
        }
    };
    // @Override
    FigurativeConstantContext.prototype.exitRule = function (listener) {
        if (listener.exitFigurativeConstant) {
            listener.exitFigurativeConstant(this);
        }
    };
    // @Override
    FigurativeConstantContext.prototype.accept = function (visitor) {
        if (visitor.visitFigurativeConstant) {
            return visitor.visitFigurativeConstant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FigurativeConstantContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FigurativeConstantContext = FigurativeConstantContext;
var SpecialRegisterContext = /** @class */ (function (_super) {
    __extends(SpecialRegisterContext, _super);
    function SpecialRegisterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SpecialRegisterContext.prototype.ADDRESS = function () { return this.tryGetToken(Cobol85Parser.ADDRESS, 0); };
    SpecialRegisterContext.prototype.OF = function () { return this.tryGetToken(Cobol85Parser.OF, 0); };
    SpecialRegisterContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    SpecialRegisterContext.prototype.DATE = function () { return this.tryGetToken(Cobol85Parser.DATE, 0); };
    SpecialRegisterContext.prototype.DAY = function () { return this.tryGetToken(Cobol85Parser.DAY, 0); };
    SpecialRegisterContext.prototype.DAY_OF_WEEK = function () { return this.tryGetToken(Cobol85Parser.DAY_OF_WEEK, 0); };
    SpecialRegisterContext.prototype.DEBUG_CONTENTS = function () { return this.tryGetToken(Cobol85Parser.DEBUG_CONTENTS, 0); };
    SpecialRegisterContext.prototype.DEBUG_ITEM = function () { return this.tryGetToken(Cobol85Parser.DEBUG_ITEM, 0); };
    SpecialRegisterContext.prototype.DEBUG_LINE = function () { return this.tryGetToken(Cobol85Parser.DEBUG_LINE, 0); };
    SpecialRegisterContext.prototype.DEBUG_NAME = function () { return this.tryGetToken(Cobol85Parser.DEBUG_NAME, 0); };
    SpecialRegisterContext.prototype.DEBUG_SUB_1 = function () { return this.tryGetToken(Cobol85Parser.DEBUG_SUB_1, 0); };
    SpecialRegisterContext.prototype.DEBUG_SUB_2 = function () { return this.tryGetToken(Cobol85Parser.DEBUG_SUB_2, 0); };
    SpecialRegisterContext.prototype.DEBUG_SUB_3 = function () { return this.tryGetToken(Cobol85Parser.DEBUG_SUB_3, 0); };
    SpecialRegisterContext.prototype.LENGTH = function () { return this.tryGetToken(Cobol85Parser.LENGTH, 0); };
    SpecialRegisterContext.prototype.LINAGE_COUNTER = function () { return this.tryGetToken(Cobol85Parser.LINAGE_COUNTER, 0); };
    SpecialRegisterContext.prototype.LINE_COUNTER = function () { return this.tryGetToken(Cobol85Parser.LINE_COUNTER, 0); };
    SpecialRegisterContext.prototype.PAGE_COUNTER = function () { return this.tryGetToken(Cobol85Parser.PAGE_COUNTER, 0); };
    SpecialRegisterContext.prototype.RETURN_CODE = function () { return this.tryGetToken(Cobol85Parser.RETURN_CODE, 0); };
    SpecialRegisterContext.prototype.SHIFT_IN = function () { return this.tryGetToken(Cobol85Parser.SHIFT_IN, 0); };
    SpecialRegisterContext.prototype.SHIFT_OUT = function () { return this.tryGetToken(Cobol85Parser.SHIFT_OUT, 0); };
    SpecialRegisterContext.prototype.SORT_CONTROL = function () { return this.tryGetToken(Cobol85Parser.SORT_CONTROL, 0); };
    SpecialRegisterContext.prototype.SORT_CORE_SIZE = function () { return this.tryGetToken(Cobol85Parser.SORT_CORE_SIZE, 0); };
    SpecialRegisterContext.prototype.SORT_FILE_SIZE = function () { return this.tryGetToken(Cobol85Parser.SORT_FILE_SIZE, 0); };
    SpecialRegisterContext.prototype.SORT_MESSAGE = function () { return this.tryGetToken(Cobol85Parser.SORT_MESSAGE, 0); };
    SpecialRegisterContext.prototype.SORT_MODE_SIZE = function () { return this.tryGetToken(Cobol85Parser.SORT_MODE_SIZE, 0); };
    SpecialRegisterContext.prototype.SORT_RETURN = function () { return this.tryGetToken(Cobol85Parser.SORT_RETURN, 0); };
    SpecialRegisterContext.prototype.TALLY = function () { return this.tryGetToken(Cobol85Parser.TALLY, 0); };
    SpecialRegisterContext.prototype.TIME = function () { return this.tryGetToken(Cobol85Parser.TIME, 0); };
    SpecialRegisterContext.prototype.WHEN_COMPILED = function () { return this.tryGetToken(Cobol85Parser.WHEN_COMPILED, 0); };
    Object.defineProperty(SpecialRegisterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_specialRegister; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SpecialRegisterContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecialRegister) {
            listener.enterSpecialRegister(this);
        }
    };
    // @Override
    SpecialRegisterContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecialRegister) {
            listener.exitSpecialRegister(this);
        }
    };
    // @Override
    SpecialRegisterContext.prototype.accept = function (visitor) {
        if (visitor.visitSpecialRegister) {
            return visitor.visitSpecialRegister(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SpecialRegisterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SpecialRegisterContext = SpecialRegisterContext;
var CommentEntryContext = /** @class */ (function (_super) {
    __extends(CommentEntryContext, _super);
    function CommentEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CommentEntryContext.prototype.COMMENTENTRYLINE = function (i) {
        if (i === undefined) {
            return this.getTokens(Cobol85Parser.COMMENTENTRYLINE);
        }
        else {
            return this.getToken(Cobol85Parser.COMMENTENTRYLINE, i);
        }
    };
    Object.defineProperty(CommentEntryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Cobol85Parser.RULE_commentEntry; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CommentEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterCommentEntry) {
            listener.enterCommentEntry(this);
        }
    };
    // @Override
    CommentEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitCommentEntry) {
            listener.exitCommentEntry(this);
        }
    };
    // @Override
    CommentEntryContext.prototype.accept = function (visitor) {
        if (visitor.visitCommentEntry) {
            return visitor.visitCommentEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CommentEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CommentEntryContext = CommentEntryContext;
