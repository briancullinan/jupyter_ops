// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/muparser/MuParser.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class MuParserLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly FUNCTION = 3;
	public static readonly FUNCTIONMULTI = 4;
	public static readonly ASSIGN = 5;
	public static readonly ASSIGNADD = 6;
	public static readonly ASSIGNSUB = 7;
	public static readonly ASSIGNMUL = 8;
	public static readonly ASSIGNDIV = 9;
	public static readonly AND = 10;
	public static readonly OR = 11;
	public static readonly LTEQ = 12;
	public static readonly GTEQ = 13;
	public static readonly NEQ = 14;
	public static readonly EQ = 15;
	public static readonly LT = 16;
	public static readonly GT = 17;
	public static readonly ADD = 18;
	public static readonly SUB = 19;
	public static readonly MUL = 20;
	public static readonly DIV = 21;
	public static readonly POW = 22;
	public static readonly NOT = 23;
	public static readonly QUESTION = 24;
	public static readonly COLON = 25;
	public static readonly OPAR = 26;
	public static readonly CPAR = 27;
	public static readonly INT = 28;
	public static readonly FLOAT = 29;
	public static readonly TRUE = 30;
	public static readonly FALSE = 31;
	public static readonly E = 32;
	public static readonly PI = 33;
	public static readonly ID = 34;
	public static readonly SPACE = 35;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "FUNCTION", "FUNCTIONMULTI", "ASSIGN", "ASSIGNADD", "ASSIGNSUB", 
		"ASSIGNMUL", "ASSIGNDIV", "AND", "OR", "LTEQ", "GTEQ", "NEQ", "EQ", "LT", 
		"GT", "ADD", "SUB", "MUL", "DIV", "POW", "NOT", "QUESTION", "COLON", "OPAR", 
		"CPAR", "INT", "FLOAT", "TRUE", "FALSE", "E", "PI", "ID", "SPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'\n'", "','", undefined, undefined, "'='", "'+='", "'-='", 
		"'*='", "'/='", "'&&'", "'||'", "'<='", "'>='", "'!='", "'=='", "'<'", 
		"'>'", "'+'", "'-'", "'*'", "'/'", "'^'", "'!'", "'?'", "':'", "'('", 
		"')'", undefined, undefined, "'true'", "'false'", "'_e'", "'_pi'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "FUNCTION", "FUNCTIONMULTI", "ASSIGN", 
		"ASSIGNADD", "ASSIGNSUB", "ASSIGNMUL", "ASSIGNDIV", "AND", "OR", "LTEQ", 
		"GTEQ", "NEQ", "EQ", "LT", "GT", "ADD", "SUB", "MUL", "DIV", "POW", "NOT", 
		"QUESTION", "COLON", "OPAR", "CPAR", "INT", "FLOAT", "TRUE", "FALSE", 
		"E", "PI", "ID", "SPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MuParserLexer._LITERAL_NAMES, MuParserLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MuParserLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(MuParserLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "MuParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return MuParserLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return MuParserLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return MuParserLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return MuParserLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02%\u011B\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\x9E\n\x04\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x05\x05\xAC\n\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v" +
		"\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03" +
		"\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03" +
		"\x1B\x03\x1C\x03\x1C\x03\x1D\x06\x1D\xE7\n\x1D\r\x1D\x0E\x1D\xE8\x03\x1E" +
		"\x06\x1E\xEC\n\x1E\r\x1E\x0E\x1E\xED\x03\x1E\x03\x1E\x07\x1E\xF2\n\x1E" +
		"\f\x1E\x0E\x1E\xF5\v\x1E\x03\x1E\x03\x1E\x06\x1E\xF9\n\x1E\r\x1E\x0E\x1E" +
		"\xFA\x05\x1E\xFD\n\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03" +
		" \x03 \x03 \x03 \x03 \x03!\x03!\x03!\x03\"\x03\"\x03\"\x03\"\x03#\x03" +
		"#\x07#\u0113\n#\f#\x0E#\u0116\v#\x03$\x03$\x03$\x03$\x02\x02\x02%\x03" +
		"\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t" +
		"\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02" +
		"\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17" +
		"-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F" +
		"=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%\x03\x02\x06\x03\x022;\x05\x02C\\" +
		"aac|\x06\x022;C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02\u0137\x02\x03\x03\x02" +
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
		"\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02" +
		"\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02" +
		"\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02" +
		")\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02" +
		"\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02" +
		"\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03" +
		"\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02" +
		"\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x03I\x03\x02\x02\x02\x05" +
		"K\x03\x02\x02\x02\x07\x9D\x03\x02\x02\x02\t\xAB\x03\x02\x02\x02\v\xAD" +
		"\x03\x02\x02\x02\r\xAF\x03\x02\x02\x02\x0F\xB2\x03\x02\x02\x02\x11\xB5" +
		"\x03\x02\x02\x02\x13\xB8\x03\x02\x02\x02\x15\xBB\x03\x02\x02\x02\x17\xBE" +
		"\x03\x02\x02\x02\x19\xC1\x03\x02\x02\x02\x1B\xC4\x03\x02\x02\x02\x1D\xC7" +
		"\x03\x02\x02\x02\x1F\xCA\x03\x02\x02\x02!\xCD\x03\x02\x02\x02#\xCF\x03" +
		"\x02\x02\x02%\xD1\x03\x02\x02\x02\'\xD3\x03\x02\x02\x02)\xD5\x03\x02\x02" +
		"\x02+\xD7\x03\x02\x02\x02-\xD9\x03\x02\x02\x02/\xDB\x03\x02\x02\x021\xDD" +
		"\x03\x02\x02\x023\xDF\x03\x02\x02\x025\xE1\x03\x02\x02\x027\xE3\x03\x02" +
		"\x02\x029\xE6\x03\x02\x02\x02;\xFC\x03\x02\x02\x02=\xFE\x03\x02\x02\x02" +
		"?\u0103\x03\x02\x02\x02A\u0109\x03\x02\x02\x02C\u010C\x03\x02\x02\x02" +
		"E\u0110\x03\x02\x02\x02G\u0117\x03\x02\x02\x02IJ\x07\f\x02\x02J\x04\x03" +
		"\x02\x02\x02KL\x07.\x02\x02L\x06\x03\x02\x02\x02MN\x07u\x02\x02NO\x07" +
		"k\x02\x02O\x9E\x07p\x02\x02PQ\x07e\x02\x02QR\x07q\x02\x02R\x9E\x07u\x02" +
		"\x02ST\x07v\x02\x02TU\x07c\x02\x02U\x9E\x07p\x02\x02VW\x07c\x02\x02WX" +
		"\x07u\x02\x02XY\x07k\x02\x02Y\x9E\x07p\x02\x02Z[\x07c\x02\x02[\\\x07e" +
		"\x02\x02\\]\x07q\x02\x02]\x9E\x07u\x02\x02^_\x07c\x02\x02_`\x07v\x02\x02" +
		"`a\x07c\x02\x02a\x9E\x07p\x02\x02bc\x07u\x02\x02cd\x07k\x02\x02de\x07" +
		"p\x02\x02e\x9E\x07j\x02\x02fg\x07e\x02\x02gh\x07q\x02\x02hi\x07u\x02\x02" +
		"i\x9E\x07j\x02\x02jk\x07v\x02\x02kl\x07c\x02\x02lm\x07p\x02\x02m\x9E\x07" +
		"j\x02\x02no\x07c\x02\x02op\x07u\x02\x02pq\x07k\x02\x02qr\x07p\x02\x02" +
		"r\x9E\x07j\x02\x02st\x07c\x02\x02tu\x07e\x02\x02uv\x07q\x02\x02vw\x07" +
		"u\x02\x02w\x9E\x07j\x02\x02xy\x07c\x02\x02yz\x07v\x02\x02z{\x07c\x02\x02" +
		"{|\x07p\x02\x02|\x9E\x07j\x02\x02}~\x07n\x02\x02~\x7F\x07q\x02\x02\x7F" +
		"\x80\x07i\x02\x02\x80\x9E\x074\x02\x02\x81\x82\x07n\x02\x02\x82\x83\x07" +
		"q\x02\x02\x83\x84\x07i\x02\x02\x84\x85\x073\x02\x02\x85\x9E\x072\x02\x02" +
		"\x86\x87\x07n\x02\x02\x87\x88\x07q\x02\x02\x88\x9E\x07i\x02\x02\x89\x8A" +
		"\x07n\x02\x02\x8A\x9E\x07p\x02\x02\x8B\x8C\x07g\x02\x02\x8C\x8D\x07z\x02" +
		"\x02\x8D\x9E\x07r\x02\x02\x8E\x8F\x07u\x02\x02\x8F\x90\x07s\x02\x02\x90" +
		"\x91\x07t\x02\x02\x91\x9E\x07v\x02\x02\x92\x93\x07u\x02\x02\x93\x94\x07" +
		"k\x02\x02\x94\x95\x07i\x02\x02\x95\x9E\x07p\x02\x02\x96\x97\x07t\x02\x02" +
		"\x97\x98\x07k\x02\x02\x98\x99\x07p\x02\x02\x99\x9E\x07v\x02\x02\x9A\x9B" +
		"\x07c\x02\x02\x9B\x9C\x07d\x02\x02\x9C\x9E\x07u\x02\x02\x9DM\x03\x02\x02" +
		"\x02\x9DP\x03\x02\x02\x02\x9DS\x03\x02\x02\x02\x9DV\x03\x02\x02\x02\x9D" +
		"Z\x03\x02\x02\x02\x9D^\x03\x02\x02\x02\x9Db\x03\x02\x02\x02\x9Df\x03\x02" +
		"\x02\x02\x9Dj\x03\x02\x02\x02\x9Dn\x03\x02\x02\x02\x9Ds\x03\x02\x02\x02" +
		"\x9Dx\x03\x02\x02\x02\x9D}\x03\x02\x02\x02\x9D\x81\x03\x02\x02\x02\x9D" +
		"\x86\x03\x02\x02\x02\x9D\x89\x03\x02\x02\x02\x9D\x8B\x03\x02\x02\x02\x9D" +
		"\x8E\x03\x02\x02\x02\x9D\x92\x03\x02\x02\x02\x9D\x96\x03\x02\x02\x02\x9D" +
		"\x9A\x03\x02\x02\x02\x9E\b\x03\x02\x02\x02\x9F\xA0\x07o\x02\x02\xA0\xA1" +
		"\x07k\x02\x02\xA1\xAC\x07p\x02\x02\xA2\xA3\x07o\x02\x02\xA3\xA4\x07c\x02" +
		"\x02\xA4\xAC\x07z\x02\x02\xA5\xA6\x07u\x02\x02\xA6\xA7\x07w\x02\x02\xA7" +
		"\xAC\x07o\x02\x02\xA8\xA9\x07c\x02\x02\xA9\xAA\x07x\x02\x02\xAA\xAC\x07" +
		"i\x02\x02\xAB\x9F\x03\x02\x02\x02\xAB\xA2\x03\x02\x02\x02\xAB\xA5\x03" +
		"\x02\x02\x02\xAB\xA8\x03\x02\x02\x02\xAC\n\x03\x02\x02\x02\xAD\xAE\x07" +
		"?\x02\x02\xAE\f\x03\x02\x02\x02\xAF\xB0\x07-\x02\x02\xB0\xB1\x07?\x02" +
		"\x02\xB1\x0E\x03\x02\x02\x02\xB2\xB3\x07/\x02\x02\xB3\xB4\x07?\x02\x02" +
		"\xB4\x10\x03\x02\x02\x02\xB5\xB6\x07,\x02\x02\xB6\xB7\x07?\x02\x02\xB7" +
		"\x12\x03\x02\x02\x02\xB8\xB9\x071\x02\x02\xB9\xBA\x07?\x02\x02\xBA\x14" +
		"\x03\x02\x02\x02\xBB\xBC\x07(\x02\x02\xBC\xBD\x07(\x02\x02\xBD\x16\x03" +
		"\x02\x02\x02\xBE\xBF\x07~\x02\x02\xBF\xC0\x07~\x02\x02\xC0\x18\x03\x02" +
		"\x02\x02\xC1\xC2\x07>\x02\x02\xC2\xC3\x07?\x02\x02\xC3\x1A\x03\x02\x02" +
		"\x02\xC4\xC5\x07@\x02\x02\xC5\xC6\x07?\x02\x02\xC6\x1C\x03\x02\x02\x02" +
		"\xC7\xC8\x07#\x02\x02\xC8\xC9\x07?\x02\x02\xC9\x1E\x03\x02\x02\x02\xCA" +
		"\xCB\x07?\x02\x02\xCB\xCC\x07?\x02\x02\xCC \x03\x02\x02\x02\xCD\xCE\x07" +
		">\x02\x02\xCE\"\x03\x02\x02\x02\xCF\xD0\x07@\x02\x02\xD0$\x03\x02\x02" +
		"\x02\xD1\xD2\x07-\x02\x02\xD2&\x03\x02\x02\x02\xD3\xD4\x07/\x02\x02\xD4" +
		"(\x03\x02\x02\x02\xD5\xD6\x07,\x02\x02\xD6*\x03\x02\x02\x02\xD7\xD8\x07" +
		"1\x02\x02\xD8,\x03\x02\x02\x02\xD9\xDA\x07`\x02\x02\xDA.\x03\x02\x02\x02" +
		"\xDB\xDC\x07#\x02\x02\xDC0\x03\x02\x02\x02\xDD\xDE\x07A\x02\x02\xDE2\x03" +
		"\x02\x02\x02\xDF\xE0\x07<\x02\x02\xE04\x03\x02\x02\x02\xE1\xE2\x07*\x02" +
		"\x02\xE26\x03\x02\x02\x02\xE3\xE4\x07+\x02\x02\xE48\x03\x02\x02\x02\xE5" +
		"\xE7\t\x02\x02\x02\xE6\xE5\x03\x02\x02\x02\xE7\xE8\x03\x02\x02\x02\xE8" +
		"\xE6\x03\x02\x02\x02\xE8\xE9\x03\x02\x02\x02\xE9:\x03\x02\x02\x02\xEA" +
		"\xEC\t\x02\x02\x02\xEB\xEA\x03\x02\x02\x02\xEC\xED\x03\x02\x02\x02\xED" +
		"\xEB\x03\x02\x02\x02\xED\xEE\x03\x02\x02\x02\xEE\xEF\x03\x02\x02\x02\xEF" +
		"\xF3\x070\x02\x02\xF0\xF2\t\x02\x02\x02\xF1\xF0\x03\x02\x02\x02\xF2\xF5" +
		"\x03\x02\x02\x02\xF3\xF1\x03\x02\x02\x02\xF3\xF4\x03\x02\x02\x02\xF4\xFD" +
		"\x03\x02\x02\x02\xF5\xF3\x03\x02\x02\x02\xF6\xF8\x070\x02\x02\xF7\xF9" +
		"\t\x02\x02\x02\xF8\xF7\x03\x02\x02\x02\xF9\xFA\x03\x02\x02\x02\xFA\xF8" +
		"\x03\x02\x02\x02\xFA\xFB\x03\x02\x02\x02\xFB\xFD\x03\x02\x02\x02\xFC\xEB" +
		"\x03\x02\x02\x02\xFC\xF6\x03\x02\x02\x02\xFD<\x03\x02\x02\x02\xFE\xFF" +
		"\x07v\x02\x02\xFF\u0100\x07t\x02\x02\u0100\u0101\x07w\x02\x02\u0101\u0102" +
		"\x07g\x02\x02\u0102>\x03\x02\x02\x02\u0103\u0104\x07h\x02\x02\u0104\u0105" +
		"\x07c\x02\x02\u0105\u0106\x07n\x02\x02\u0106\u0107\x07u\x02\x02\u0107" +
		"\u0108\x07g\x02\x02\u0108@\x03\x02\x02\x02\u0109\u010A\x07a\x02\x02\u010A" +
		"\u010B\x07g\x02\x02\u010BB\x03\x02\x02\x02\u010C\u010D\x07a\x02\x02\u010D" +
		"\u010E\x07r\x02\x02\u010E\u010F\x07k\x02\x02\u010FD\x03\x02\x02\x02\u0110" +
		"\u0114\t\x03\x02\x02\u0111\u0113\t\x04\x02\x02\u0112\u0111\x03\x02\x02" +
		"\x02\u0113\u0116\x03\x02\x02\x02\u0114\u0112\x03\x02\x02\x02\u0114\u0115" +
		"\x03\x02\x02\x02\u0115F\x03\x02\x02\x02\u0116\u0114\x03\x02\x02\x02\u0117" +
		"\u0118\t\x05\x02\x02\u0118\u0119\x03\x02\x02\x02\u0119\u011A\b$\x02\x02" +
		"\u011AH\x03\x02\x02\x02\v\x02\x9D\xAB\xE8\xED\xF3\xFA\xFC\u0114\x03\b" +
		"\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MuParserLexer.__ATN) {
			MuParserLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MuParserLexer._serializedATN));
		}

		return MuParserLexer.__ATN;
	}

}

