// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/xml/XMLLexer.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XMLLexer extends Lexer {
	public static readonly COMMENT = 1;
	public static readonly CDATA = 2;
	public static readonly DTD = 3;
	public static readonly EntityRef = 4;
	public static readonly CharRef = 5;
	public static readonly SEA_WS = 6;
	public static readonly OPEN = 7;
	public static readonly XMLDeclOpen = 8;
	public static readonly TEXT = 9;
	public static readonly CLOSE = 10;
	public static readonly SPECIAL_CLOSE = 11;
	public static readonly SLASH_CLOSE = 12;
	public static readonly SLASH = 13;
	public static readonly EQUALS = 14;
	public static readonly STRING = 15;
	public static readonly Name = 16;
	public static readonly S = 17;
	public static readonly PI = 18;
	public static readonly INSIDE = 1;
	public static readonly PROC_INSTR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "INSIDE", "PROC_INSTR",
	];

	public static readonly ruleNames: string[] = [
		"COMMENT", "CDATA", "DTD", "EntityRef", "CharRef", "SEA_WS", "OPEN", "XMLDeclOpen", 
		"SPECIAL_OPEN", "TEXT", "CLOSE", "SPECIAL_CLOSE", "SLASH_CLOSE", "SLASH", 
		"EQUALS", "STRING", "Name", "S", "HEXDIGIT", "DIGIT", "NameChar", "NameStartChar", 
		"PI", "IGNORE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"'<'", undefined, undefined, "'>'", undefined, "'/>'", "'/'", "'='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "COMMENT", "CDATA", "DTD", "EntityRef", "CharRef", "SEA_WS", 
		"OPEN", "XMLDeclOpen", "TEXT", "CLOSE", "SPECIAL_CLOSE", "SLASH_CLOSE", 
		"SLASH", "EQUALS", "STRING", "Name", "S", "PI",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XMLLexer._LITERAL_NAMES, XMLLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XMLLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XMLLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XMLLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XMLLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XMLLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XMLLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XMLLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x14\xE9\b\x01" +
		"\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04" +
		"\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f" +
		"\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11" +
		"\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16" +
		"\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x07\x02<\n\x02\f\x02\x0E\x02?\v\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03P\n\x03\f\x03\x0E\x03S\v\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x07\x04]" +
		"\n\x04\f\x04\x0E\x04`\v\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x06\x06n\n\x06\r" +
		"\x06\x0E\x06o\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x06\x06y\n\x06\r\x06\x0E\x06z\x03\x06\x03\x06\x05\x06\x7F\n\x06\x03\x07" +
		"\x03\x07\x05\x07\x83\n\x07\x03\x07\x06\x07\x86\n\x07\r\x07\x0E\x07\x87" +
		"\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x06" +
		"\v\xA1\n\v\r\v\x0E\v\xA2\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10" +
		"\x03\x10\x03\x11\x03\x11\x07\x11\xB9\n\x11\f\x11\x0E\x11\xBC\v\x11\x03" +
		"\x11\x03\x11\x03\x11\x07\x11\xC1\n\x11\f\x11\x0E\x11\xC4\v\x11\x03\x11" +
		"\x05\x11\xC7\n\x11\x03\x12\x03\x12\x07\x12\xCB\n\x12\f\x12\x0E\x12\xCE" +
		"\v\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\xDC\n\x16\x03\x17\x05\x17\xDF" +
		"\n\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19" +
		"\x03\x19\x05=Q^\x02\x02\x1A\x05\x02\x03\x07\x02\x04\t\x02\x05\v\x02\x06" +
		"\r\x02\x07\x0F\x02\b\x11\x02\t\x13\x02\n\x15\x02\x02\x17\x02\v\x19\x02" +
		"\f\x1B\x02\r\x1D\x02\x0E\x1F\x02\x0F!\x02\x10#\x02\x11%\x02\x12\'\x02" +
		"\x13)\x02\x02+\x02\x02-\x02\x02/\x02\x021\x02\x143\x02\x02\x05\x02\x03" +
		"\x04\f\x04\x02\v\v\"\"\x04\x02((>>\x04\x02$$>>\x04\x02))>>\x05\x02\v\f" +
		"\x0F\x0F\"\"\x05\x022;CHch\x03\x022;\x04\x02/0aa\x05\x02\xB9\xB9\u0302" +
		"\u0371\u2041\u2042\n\x02<<C\\c|\u2072\u2191\u2C02\u2FF1\u3003\uD801\uF902" +
		"\uFDD1\uFDF2\uFFFF\x02\xF3\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02" +
		"\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02" +
		"\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02" +
		"\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x03\x19\x03\x02\x02\x02" +
		"\x03\x1B\x03\x02\x02\x02\x03\x1D\x03\x02\x02\x02\x03\x1F\x03\x02\x02\x02" +
		"\x03!\x03\x02\x02\x02\x03#\x03\x02\x02\x02\x03%\x03\x02\x02\x02\x03\'" +
		"\x03\x02\x02\x02\x041\x03\x02\x02\x02\x043\x03\x02\x02\x02\x055\x03\x02" +
		"\x02\x02\x07D\x03\x02\x02\x02\tX\x03\x02\x02\x02\ve\x03\x02\x02\x02\r" +
		"~\x03\x02\x02\x02\x0F\x85\x03\x02\x02\x02\x11\x89\x03\x02\x02\x02\x13" +
		"\x8D\x03\x02\x02\x02\x15\x97\x03\x02\x02\x02\x17\xA0\x03\x02\x02\x02\x19" +
		"\xA4\x03\x02\x02\x02\x1B\xA8\x03\x02\x02\x02\x1D\xAD\x03\x02\x02\x02\x1F" +
		"\xB2\x03\x02\x02\x02!\xB4\x03\x02\x02\x02#\xC6\x03\x02\x02\x02%\xC8\x03" +
		"\x02\x02\x02\'\xCF\x03\x02\x02\x02)\xD3\x03\x02\x02\x02+\xD5\x03\x02\x02" +
		"\x02-\xDB\x03\x02\x02\x02/\xDE\x03\x02\x02\x021\xE0\x03\x02\x02\x023\xE5" +
		"\x03\x02\x02\x0256\x07>\x02\x0267\x07#\x02\x0278\x07/\x02\x0289\x07/\x02" +
		"\x029=\x03\x02\x02\x02:<\v\x02\x02\x02;:\x03\x02\x02\x02<?\x03\x02\x02" +
		"\x02=>\x03\x02\x02\x02=;\x03\x02\x02\x02>@\x03\x02\x02\x02?=\x03\x02\x02" +
		"\x02@A\x07/\x02\x02AB\x07/\x02\x02BC\x07@\x02\x02C\x06\x03\x02\x02\x02" +
		"DE\x07>\x02\x02EF\x07#\x02\x02FG\x07]\x02\x02GH\x07E\x02\x02HI\x07F\x02" +
		"\x02IJ\x07C\x02\x02JK\x07V\x02\x02KL\x07C\x02\x02LM\x07]\x02\x02MQ\x03" +
		"\x02\x02\x02NP\v\x02\x02\x02ON\x03\x02\x02\x02PS\x03\x02\x02\x02QR\x03" +
		"\x02\x02\x02QO\x03\x02\x02\x02RT\x03\x02\x02\x02SQ\x03\x02\x02\x02TU\x07" +
		"_\x02\x02UV\x07_\x02\x02VW\x07@\x02\x02W\b\x03\x02\x02\x02XY\x07>\x02" +
		"\x02YZ\x07#\x02\x02Z^\x03\x02\x02\x02[]\v\x02\x02\x02\\[\x03\x02\x02\x02" +
		"]`\x03\x02\x02\x02^_\x03\x02\x02\x02^\\\x03\x02\x02\x02_a\x03\x02\x02" +
		"\x02`^\x03\x02\x02\x02ab\x07@\x02\x02bc\x03\x02\x02\x02cd\b\x04\x02\x02" +
		"d\n\x03\x02\x02\x02ef\x07(\x02\x02fg\x05%\x12\x02gh\x07=\x02\x02h\f\x03" +
		"\x02\x02\x02ij\x07(\x02\x02jk\x07%\x02\x02km\x03\x02\x02\x02ln\x05+\x15" +
		"\x02ml\x03\x02\x02\x02no\x03\x02\x02\x02om\x03\x02\x02\x02op\x03\x02\x02" +
		"\x02pq\x03\x02\x02\x02qr\x07=\x02\x02r\x7F\x03\x02\x02\x02st\x07(\x02" +
		"\x02tu\x07%\x02\x02uv\x07z\x02\x02vx\x03\x02\x02\x02wy\x05)\x14\x02xw" +
		"\x03\x02\x02\x02yz\x03\x02\x02\x02zx\x03\x02\x02\x02z{\x03\x02\x02\x02" +
		"{|\x03\x02\x02\x02|}\x07=\x02\x02}\x7F\x03\x02\x02\x02~i\x03\x02\x02\x02" +
		"~s\x03\x02\x02\x02\x7F\x0E\x03\x02\x02\x02\x80\x86\t\x02\x02\x02\x81\x83" +
		"\x07\x0F\x02\x02\x82\x81\x03\x02\x02\x02\x82\x83\x03\x02\x02\x02\x83\x84" +
		"\x03\x02\x02\x02\x84\x86\x07\f\x02\x02\x85\x80\x03\x02\x02\x02\x85\x82" +
		"\x03\x02\x02\x02\x86\x87\x03\x02\x02\x02\x87\x85\x03\x02\x02\x02\x87\x88" +
		"\x03\x02\x02\x02\x88\x10\x03\x02\x02\x02\x89\x8A\x07>\x02\x02\x8A\x8B" +
		"\x03\x02\x02\x02\x8B\x8C\b\b\x03\x02\x8C\x12\x03\x02\x02\x02\x8D\x8E\x07" +
		">\x02\x02\x8E\x8F\x07A\x02\x02\x8F\x90\x07z\x02\x02\x90\x91\x07o\x02\x02" +
		"\x91\x92\x07n\x02\x02\x92\x93\x03\x02\x02\x02\x93\x94\x05\'\x13\x02\x94" +
		"\x95\x03\x02\x02\x02\x95\x96\b\t\x03\x02\x96\x14\x03\x02\x02\x02\x97\x98" +
		"\x07>\x02\x02\x98\x99\x07A\x02\x02\x99\x9A\x03\x02\x02\x02\x9A\x9B\x05" +
		"%\x12\x02\x9B\x9C\x03\x02\x02\x02\x9C\x9D\b\n\x04\x02\x9D\x9E\b\n\x05" +
		"\x02\x9E\x16\x03\x02\x02\x02\x9F\xA1\n\x03\x02\x02\xA0\x9F\x03\x02\x02" +
		"\x02\xA1\xA2\x03\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA2\xA3\x03\x02\x02" +
		"\x02\xA3\x18\x03\x02\x02\x02\xA4\xA5\x07@\x02\x02\xA5\xA6\x03\x02\x02" +
		"\x02\xA6\xA7\b\f\x06\x02\xA7\x1A\x03\x02\x02\x02\xA8\xA9\x07A\x02\x02" +
		"\xA9\xAA\x07@\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB\xAC\b\r\x06\x02\xAC" +
		"\x1C\x03\x02\x02\x02\xAD\xAE\x071\x02\x02\xAE\xAF\x07@\x02\x02\xAF\xB0" +
		"\x03\x02\x02\x02\xB0\xB1\b\x0E\x06\x02\xB1\x1E\x03\x02\x02\x02\xB2\xB3" +
		"\x071\x02\x02\xB3 \x03\x02\x02\x02\xB4\xB5\x07?\x02\x02\xB5\"\x03\x02" +
		"\x02\x02\xB6\xBA\x07$\x02\x02\xB7\xB9\n\x04\x02\x02\xB8\xB7\x03\x02\x02" +
		"\x02\xB9\xBC\x03\x02\x02\x02\xBA\xB8\x03\x02\x02\x02\xBA\xBB\x03\x02\x02" +
		"\x02\xBB\xBD\x03\x02\x02\x02\xBC\xBA\x03\x02\x02\x02\xBD\xC7\x07$\x02" +
		"\x02\xBE\xC2\x07)\x02\x02\xBF\xC1\n\x05\x02\x02\xC0\xBF\x03\x02\x02\x02" +
		"\xC1\xC4\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC2\xC3\x03\x02\x02\x02" +
		"\xC3\xC5\x03\x02\x02\x02\xC4\xC2\x03\x02\x02\x02\xC5\xC7\x07)\x02\x02" +
		"\xC6\xB6\x03\x02\x02\x02\xC6\xBE\x03\x02\x02\x02\xC7$\x03\x02\x02\x02" +
		"\xC8\xCC\x05/\x17\x02\xC9\xCB\x05-\x16\x02\xCA\xC9\x03\x02\x02\x02\xCB" +
		"\xCE\x03\x02\x02\x02\xCC\xCA\x03\x02\x02\x02\xCC\xCD\x03\x02\x02\x02\xCD" +
		"&\x03\x02\x02\x02\xCE\xCC\x03\x02\x02\x02\xCF\xD0\t\x06\x02\x02\xD0\xD1" +
		"\x03\x02\x02\x02\xD1\xD2\b\x13\x02\x02\xD2(\x03\x02\x02\x02\xD3\xD4\t" +
		"\x07\x02\x02\xD4*\x03\x02\x02\x02\xD5\xD6\t\b\x02\x02\xD6,\x03\x02\x02" +
		"\x02\xD7\xDC\x05/\x17\x02\xD8\xDC\t\t\x02\x02\xD9\xDC\x05+\x15\x02\xDA" +
		"\xDC\t\n\x02\x02\xDB\xD7\x03\x02\x02\x02\xDB\xD8\x03\x02\x02\x02\xDB\xD9" +
		"\x03\x02\x02\x02\xDB\xDA\x03\x02\x02\x02\xDC.\x03\x02\x02\x02\xDD\xDF" +
		"\t\v\x02\x02\xDE\xDD\x03\x02\x02\x02\xDF0\x03\x02\x02\x02\xE0\xE1\x07" +
		"A\x02\x02\xE1\xE2\x07@\x02\x02\xE2\xE3\x03\x02\x02\x02\xE3\xE4\b\x18\x06" +
		"\x02\xE42\x03\x02\x02\x02\xE5\xE6\v\x02\x02\x02\xE6\xE7\x03\x02\x02\x02" +
		"\xE7\xE8\b\x19\x04\x02\xE84\x03\x02\x02\x02\x15\x02\x03\x04=Q^oz~\x82" +
		"\x85\x87\xA2\xBA\xC2\xC6\xCC\xDB\xDE\x07\b\x02\x02\x07\x03\x02\x05\x02" +
		"\x02\x07\x04\x02\x06\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XMLLexer.__ATN) {
			XMLLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XMLLexer._serializedATN));
		}

		return XMLLexer.__ATN;
	}

}

