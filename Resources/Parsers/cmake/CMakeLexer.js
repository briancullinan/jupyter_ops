"use strict";
// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/cmake/CMake.g4 by ANTLR 4.7.3-SNAPSHOT
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var Lexer_1 = require("antlr4ts/Lexer");
var LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var CMakeLexer = /** @class */ (function (_super) {
    __extends(CMakeLexer, _super);
    // tslint:enable:no-trailing-whitespace
    function CMakeLexer(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new LexerATNSimulator_1.LexerATNSimulator(CMakeLexer._ATN, _this);
        return _this;
    }
    Object.defineProperty(CMakeLexer.prototype, "vocabulary", {
        // @Override
        // @NotNull
        get: function () {
            return CMakeLexer.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMakeLexer.prototype, "grammarFileName", {
        // @Override
        get: function () { return "CMake.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMakeLexer.prototype, "ruleNames", {
        // @Override
        get: function () { return CMakeLexer.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMakeLexer.prototype, "serializedATN", {
        // @Override
        get: function () { return CMakeLexer._serializedATN; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMakeLexer.prototype, "channelNames", {
        // @Override
        get: function () { return CMakeLexer.channelNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMakeLexer.prototype, "modeNames", {
        // @Override
        get: function () { return CMakeLexer.modeNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMakeLexer, "_ATN", {
        get: function () {
            if (!CMakeLexer.__ATN) {
                CMakeLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(CMakeLexer._serializedATN));
            }
            return CMakeLexer.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    CMakeLexer.T__0 = 1;
    CMakeLexer.T__1 = 2;
    CMakeLexer.Identifier = 3;
    CMakeLexer.Unquoted_argument = 4;
    CMakeLexer.Escape_sequence = 5;
    CMakeLexer.Quoted_argument = 6;
    CMakeLexer.Bracket_argument = 7;
    CMakeLexer.Bracket_comment = 8;
    CMakeLexer.Line_comment = 9;
    CMakeLexer.Newline = 10;
    CMakeLexer.Space = 11;
    // tslint:disable:no-trailing-whitespace
    CMakeLexer.channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
    ];
    // tslint:disable:no-trailing-whitespace
    CMakeLexer.modeNames = [
        "DEFAULT_MODE",
    ];
    CMakeLexer.ruleNames = [
        "T__0", "T__1", "Identifier", "Unquoted_argument", "Escape_sequence",
        "Escape_identity", "Escape_encoded", "Escape_semicolon", "Quoted_argument",
        "Quoted_cont", "Bracket_argument", "Bracket_arg_nested", "Bracket_comment",
        "Line_comment", "Newline", "Space",
    ];
    CMakeLexer._LITERAL_NAMES = [
        undefined, "'('", "')'",
    ];
    CMakeLexer._SYMBOLIC_NAMES = [
        undefined, undefined, undefined, "Identifier", "Unquoted_argument", "Escape_sequence",
        "Quoted_argument", "Bracket_argument", "Bracket_comment", "Line_comment",
        "Newline", "Space",
    ];
    CMakeLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(CMakeLexer._LITERAL_NAMES, CMakeLexer._SYMBOLIC_NAMES, []);
    CMakeLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\r\xAF\b\x01\x04" +
        "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
        "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
        "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x03\x02\x03\x02" +
        "\x03\x03\x03\x03\x03\x04\x03\x04\x07\x04*\n\x04\f\x04\x0E\x04-\v\x04\x03" +
        "\x05\x03\x05\x06\x051\n\x05\r\x05\x0E\x052\x03\x06\x03\x06\x03\x06\x05" +
        "\x068\n\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
        "\b\x05\bC\n\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x07\nL\n\n\f\n" +
        "\x0E\nO\v\n\x03\n\x03\n\x03\v\x03\v\x03\v\x05\vV\n\v\x03\v\x05\vY\n\v" +
        "\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x07\re\n" +
        "\r\f\r\x0E\rh\v\r\x03\r\x05\rk\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
        "\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0Fy" +
        "\n\x0F\f\x0F\x0E\x0F|\v\x0F\x03\x0F\x03\x0F\x07\x0F\x80\n\x0F\f\x0F\x0E" +
        "\x0F\x83\v\x0F\x03\x0F\x03\x0F\x07\x0F\x87\n\x0F\f\x0F\x0E\x0F\x8A\v\x0F" +
        "\x03\x0F\x03\x0F\x07\x0F\x8E\n\x0F\f\x0F\x0E\x0F\x91\v\x0F\x05\x0F\x93" +
        "\n\x0F\x03\x0F\x03\x0F\x05\x0F\x97\n\x0F\x03\x0F\x05\x0F\x9A\n\x0F\x03" +
        "\x0F\x03\x0F\x03\x10\x03\x10\x05\x10\xA0\n\x10\x03\x10\x06\x10\xA3\n\x10" +
        "\r\x10\x0E\x10\xA4\x03\x10\x03\x10\x03\x11\x06\x11\xAA\n\x11\r\x11\x0E" +
        "\x11\xAB\x03\x11\x03\x11\x03f\x02\x02\x12\x03\x02\x03\x05\x02\x04\x07" +
        "\x02\x05\t\x02\x06\v\x02\x07\r\x02\x02\x0F\x02\x02\x11\x02\x02\x13\x02" +
        "\b\x15\x02\x02\x17\x02\t\x19\x02\x02\x1B\x02\n\x1D\x02\v\x1F\x02\f!\x02" +
        "\r\x03\x02\f\x05\x02C\\aac|\x06\x022;C\\aac|\b\x02\v\f\x0F\x0F\"\"$%*" +
        "+^^\x06\x022;==C\\c|\x04\x02$$^^\x06\x02\f\f\x0F\x0F??]]\x04\x02\f\f\x0F" +
        "\x0F\x05\x02\f\f\x0F\x0F]]\x03\x03\f\f\x04\x02\v\v\"\"\x02\xC4\x02\x03" +
        "\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
        "\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x17" +
        "\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F" +
        "\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x03#\x03\x02\x02\x02\x05%\x03\x02" +
        "\x02\x02\x07\'\x03\x02\x02\x02\t0\x03\x02\x02\x02\v7\x03\x02\x02\x02\r" +
        "9\x03\x02\x02\x02\x0FB\x03\x02\x02\x02\x11D\x03\x02\x02\x02\x13G\x03\x02" +
        "\x02\x02\x15R\x03\x02\x02\x02\x17Z\x03\x02\x02\x02\x19j\x03\x02\x02\x02" +
        "\x1Bl\x03\x02\x02\x02\x1Dt\x03\x02\x02\x02\x1F\xA2\x03\x02\x02\x02!\xA9" +
        "\x03\x02\x02\x02#$\x07*\x02\x02$\x04\x03\x02\x02\x02%&\x07+\x02\x02&\x06" +
        "\x03\x02\x02\x02\'+\t\x02\x02\x02(*\t\x03\x02\x02)(\x03\x02\x02\x02*-" +
        "\x03\x02\x02\x02+)\x03\x02\x02\x02+,\x03\x02\x02\x02,\b\x03\x02\x02\x02" +
        "-+\x03\x02\x02\x02.1\n\x04\x02\x02/1\x05\v\x06\x020.\x03\x02\x02\x020" +
        "/\x03\x02\x02\x0212\x03\x02\x02\x0220\x03\x02\x02\x0223\x03\x02\x02\x02" +
        "3\n\x03\x02\x02\x0248\x05\r\x07\x0258\x05\x0F\b\x0268\x05\x11\t\x0274" +
        "\x03\x02\x02\x0275\x03\x02\x02\x0276\x03\x02\x02\x028\f\x03\x02\x02\x02" +
        "9:\x07^\x02\x02:;\n\x05\x02\x02;\x0E\x03\x02\x02\x02<=\x07^\x02\x02=C" +
        "\x07v\x02\x02>?\x07^\x02\x02?C\x07t\x02\x02@A\x07^\x02\x02AC\x07p\x02" +
        "\x02B<\x03\x02\x02\x02B>\x03\x02\x02\x02B@\x03\x02\x02\x02C\x10\x03\x02" +
        "\x02\x02DE\x07^\x02\x02EF\x07=\x02\x02F\x12\x03\x02\x02\x02GM\x07$\x02" +
        "\x02HL\n\x06\x02\x02IL\x05\v\x06\x02JL\x05\x15\v\x02KH\x03\x02\x02\x02" +
        "KI\x03\x02\x02\x02KJ\x03\x02\x02\x02LO\x03\x02\x02\x02MK\x03\x02\x02\x02" +
        "MN\x03\x02\x02\x02NP\x03\x02\x02\x02OM\x03\x02\x02\x02PQ\x07$\x02\x02" +
        "Q\x14\x03\x02\x02\x02RX\x07^\x02\x02SU\x07\x0F\x02\x02TV\x07\f\x02\x02" +
        "UT\x03\x02\x02\x02UV\x03\x02\x02\x02VY\x03\x02\x02\x02WY\x07\f\x02\x02" +
        "XS\x03\x02\x02\x02XW\x03\x02\x02\x02Y\x16\x03\x02\x02\x02Z[\x07]\x02\x02" +
        "[\\\x05\x19\r\x02\\]\x07_\x02\x02]\x18\x03\x02\x02\x02^_\x07?\x02\x02" +
        "_`\x05\x19\r\x02`a\x07?\x02\x02ak\x03\x02\x02\x02bf\x07]\x02\x02ce\v\x02" +
        "\x02\x02dc\x03\x02\x02\x02eh\x03\x02\x02\x02fg\x03\x02\x02\x02fd\x03\x02" +
        "\x02\x02gi\x03\x02\x02\x02hf\x03\x02\x02\x02ik\x07_\x02\x02j^\x03\x02" +
        "\x02\x02jb\x03\x02\x02\x02k\x1A\x03\x02\x02\x02lm\x07%\x02\x02mn\x07]" +
        "\x02\x02no\x03\x02\x02\x02op\x05\x19\r\x02pq\x07_\x02\x02qr\x03\x02\x02" +
        "\x02rs\b\x0E\x02\x02s\x1C\x03\x02\x02\x02t\x92\x07%\x02\x02u\x93\x03\x02" +
        "\x02\x02vz\x07]\x02\x02wy\x07?\x02\x02xw\x03\x02\x02\x02y|\x03\x02\x02" +
        "\x02zx\x03\x02\x02\x02z{\x03\x02\x02\x02{\x93\x03\x02\x02\x02|z\x03\x02" +
        "\x02\x02}\x81\x07]\x02\x02~\x80\x07?\x02\x02\x7F~\x03\x02\x02\x02\x80" +
        "\x83\x03\x02\x02\x02\x81\x7F\x03\x02\x02\x02\x81\x82\x03\x02\x02\x02\x82" +
        "\x84\x03\x02\x02\x02\x83\x81\x03\x02\x02\x02\x84\x88\n\x07\x02\x02\x85" +
        "\x87\n\b\x02\x02\x86\x85\x03\x02\x02\x02\x87\x8A\x03\x02\x02\x02\x88\x86" +
        "\x03\x02\x02\x02\x88\x89\x03\x02\x02\x02\x89\x93\x03\x02\x02\x02\x8A\x88" +
        "\x03\x02\x02\x02\x8B\x8F\n\t\x02\x02\x8C\x8E\n\b\x02\x02\x8D\x8C\x03\x02" +
        "\x02\x02\x8E\x91\x03\x02\x02\x02\x8F\x8D\x03\x02\x02\x02\x8F\x90\x03\x02" +
        "\x02\x02\x90\x93\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x92u\x03\x02" +
        "\x02\x02\x92v\x03\x02\x02\x02\x92}\x03\x02\x02\x02\x92\x8B\x03\x02\x02" +
        "\x02\x93\x99\x03\x02\x02\x02\x94\x96\x07\x0F\x02\x02\x95\x97\x07\f\x02" +
        "\x02\x96\x95\x03\x02\x02\x02\x96\x97\x03\x02\x02\x02\x97\x9A\x03\x02\x02" +
        "\x02\x98\x9A\t\n\x02\x02\x99\x94\x03\x02\x02\x02\x99\x98\x03\x02\x02\x02" +
        "\x9A\x9B\x03\x02\x02\x02\x9B\x9C\b\x0F\x02\x02\x9C\x1E\x03\x02\x02\x02" +
        "\x9D\x9F\x07\x0F\x02\x02\x9E\xA0\x07\f\x02\x02\x9F\x9E\x03\x02\x02\x02" +
        "\x9F\xA0\x03\x02\x02\x02\xA0\xA3\x03\x02\x02\x02\xA1\xA3\x07\f\x02\x02" +
        "\xA2\x9D\x03\x02\x02\x02\xA2\xA1\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02" +
        "\xA4\xA2\x03\x02\x02\x02\xA4\xA5\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02" +
        "\xA6\xA7\b\x10\x02\x02\xA7 \x03\x02\x02\x02\xA8\xAA\t\v\x02\x02\xA9\xA8" +
        "\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAB\xAC" +
        "\x03\x02\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD\xAE\b\x11\x02\x02\xAE\"\x03" +
        "\x02\x02\x02\x19\x02+027BKMUXfjz\x81\x88\x8F\x92\x96\x99\x9F\xA2\xA4\xAB" +
        "\x03\b\x02\x02";
    return CMakeLexer;
}(Lexer_1.Lexer));
exports.CMakeLexer = CMakeLexer;
