"use strict";
// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/java/java8/Java8Parser.g4 by ANTLR 4.7.3-SNAPSHOT
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ATN_1 = require("antlr4ts/atn/ATN");
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var FailedPredicateException_1 = require("antlr4ts/FailedPredicateException");
var NoViableAltException_1 = require("antlr4ts/NoViableAltException");
var Parser_1 = require("antlr4ts/Parser");
var ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
var ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
var RecognitionException_1 = require("antlr4ts/RecognitionException");
var Token_1 = require("antlr4ts/Token");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var Java8Parser = /** @class */ (function (_super) {
    __extends(Java8Parser, _super);
    function Java8Parser(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new ParserATNSimulator_1.ParserATNSimulator(Java8Parser._ATN, _this);
        return _this;
    }
    Object.defineProperty(Java8Parser.prototype, "vocabulary", {
        // @Override
        // @NotNull
        get: function () {
            return Java8Parser.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Java8Parser.prototype, "grammarFileName", {
        // tslint:enable:no-trailing-whitespace
        // @Override
        get: function () { return "Java8Parser.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Java8Parser.prototype, "ruleNames", {
        // @Override
        get: function () { return Java8Parser.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Java8Parser.prototype, "serializedATN", {
        // @Override
        get: function () { return Java8Parser._serializedATN; },
        enumerable: true,
        configurable: true
    });
    // @RuleVersion(0)
    Java8Parser.prototype.literal = function () {
        var _localctx = new LiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, Java8Parser.RULE_literal);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 472;
                _la = this._input.LA(1);
                if (!(((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (Java8Parser.IntegerLiteral - 51)) | (1 << (Java8Parser.FloatingPointLiteral - 51)) | (1 << (Java8Parser.BooleanLiteral - 51)) | (1 << (Java8Parser.CharacterLiteral - 51)) | (1 << (Java8Parser.StringLiteral - 51)) | (1 << (Java8Parser.NullLiteral - 51)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primitiveType = function () {
        var _localctx = new PrimitiveTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, Java8Parser.RULE_primitiveType);
        var _la;
        try {
            this.state = 488;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 477;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 474;
                                    this.annotation();
                                }
                            }
                            this.state = 479;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 480;
                        this.numericType();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 484;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 481;
                                    this.annotation();
                                }
                            }
                            this.state = 486;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 487;
                        this.match(Java8Parser.BOOLEAN);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.numericType = function () {
        var _localctx = new NumericTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, Java8Parser.RULE_numericType);
        try {
            this.state = 492;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.BYTE:
                case Java8Parser.CHAR:
                case Java8Parser.INT:
                case Java8Parser.LONG:
                case Java8Parser.SHORT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 490;
                        this.integralType();
                    }
                    break;
                case Java8Parser.DOUBLE:
                case Java8Parser.FLOAT:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 491;
                        this.floatingPointType();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.integralType = function () {
        var _localctx = new IntegralTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, Java8Parser.RULE_integralType);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 494;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la === Java8Parser.SHORT)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.floatingPointType = function () {
        var _localctx = new FloatingPointTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, Java8Parser.RULE_floatingPointType);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 496;
                _la = this._input.LA(1);
                if (!(_la === Java8Parser.DOUBLE || _la === Java8Parser.FLOAT)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.referenceType = function () {
        var _localctx = new ReferenceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, Java8Parser.RULE_referenceType);
        try {
            this.state = 501;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 4, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 498;
                        this.classOrInterfaceType();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 499;
                        this.typeVariable();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 500;
                        this.arrayType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classOrInterfaceType = function () {
        var _localctx = new ClassOrInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, Java8Parser.RULE_classOrInterfaceType);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 505;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 5, this._ctx)) {
                    case 1:
                        {
                            this.state = 503;
                            this.classType_lfno_classOrInterfaceType();
                        }
                        break;
                    case 2:
                        {
                            this.state = 504;
                            this.interfaceType_lfno_classOrInterfaceType();
                        }
                        break;
                }
                this.state = 511;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 509;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 507;
                                        this.classType_lf_classOrInterfaceType();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 508;
                                        this.interfaceType_lf_classOrInterfaceType();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 513;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classType = function () {
        var _localctx = new ClassTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, Java8Parser.RULE_classType);
        var _la;
        try {
            this.state = 536;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 12, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 517;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 514;
                                    this.annotation();
                                }
                            }
                            this.state = 519;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 520;
                        this.match(Java8Parser.Identifier);
                        this.state = 522;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 521;
                                this.typeArguments();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 524;
                        this.classOrInterfaceType();
                        this.state = 525;
                        this.match(Java8Parser.DOT);
                        this.state = 529;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 526;
                                    this.annotation();
                                }
                            }
                            this.state = 531;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 532;
                        this.match(Java8Parser.Identifier);
                        this.state = 534;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 533;
                                this.typeArguments();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classType_lf_classOrInterfaceType = function () {
        var _localctx = new ClassType_lf_classOrInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, Java8Parser.RULE_classType_lf_classOrInterfaceType);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 538;
                this.match(Java8Parser.DOT);
                this.state = 542;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 539;
                            this.annotation();
                        }
                    }
                    this.state = 544;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 545;
                this.match(Java8Parser.Identifier);
                this.state = 547;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 14, this._ctx)) {
                    case 1:
                        {
                            this.state = 546;
                            this.typeArguments();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classType_lfno_classOrInterfaceType = function () {
        var _localctx = new ClassType_lfno_classOrInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, Java8Parser.RULE_classType_lfno_classOrInterfaceType);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 549;
                            this.annotation();
                        }
                    }
                    this.state = 554;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 555;
                this.match(Java8Parser.Identifier);
                this.state = 557;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 16, this._ctx)) {
                    case 1:
                        {
                            this.state = 556;
                            this.typeArguments();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.interfaceType = function () {
        var _localctx = new InterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, Java8Parser.RULE_interfaceType);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 559;
                this.classType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.interfaceType_lf_classOrInterfaceType = function () {
        var _localctx = new InterfaceType_lf_classOrInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, Java8Parser.RULE_interfaceType_lf_classOrInterfaceType);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 561;
                this.classType_lf_classOrInterfaceType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.interfaceType_lfno_classOrInterfaceType = function () {
        var _localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 563;
                this.classType_lfno_classOrInterfaceType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeVariable = function () {
        var _localctx = new TypeVariableContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, Java8Parser.RULE_typeVariable);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 568;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 565;
                            this.annotation();
                        }
                    }
                    this.state = 570;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 571;
                this.match(Java8Parser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.arrayType = function () {
        var _localctx = new ArrayTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, Java8Parser.RULE_arrayType);
        try {
            this.state = 582;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 18, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 573;
                        this.primitiveType();
                        this.state = 574;
                        this.dims();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 576;
                        this.classOrInterfaceType();
                        this.state = 577;
                        this.dims();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 579;
                        this.typeVariable();
                        this.state = 580;
                        this.dims();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.dims = function () {
        var _localctx = new DimsContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, Java8Parser.RULE_dims);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 587;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 584;
                            this.annotation();
                        }
                    }
                    this.state = 589;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 590;
                this.match(Java8Parser.LBRACK);
                this.state = 591;
                this.match(Java8Parser.RBRACK);
                this.state = 602;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 595;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === Java8Parser.AT) {
                                    {
                                        {
                                            this.state = 592;
                                            this.annotation();
                                        }
                                    }
                                    this.state = 597;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 598;
                                this.match(Java8Parser.LBRACK);
                                this.state = 599;
                                this.match(Java8Parser.RBRACK);
                            }
                        }
                    }
                    this.state = 604;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeParameter = function () {
        var _localctx = new TypeParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, Java8Parser.RULE_typeParameter);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 608;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 605;
                            this.typeParameterModifier();
                        }
                    }
                    this.state = 610;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 611;
                this.match(Java8Parser.Identifier);
                this.state = 613;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.EXTENDS) {
                    {
                        this.state = 612;
                        this.typeBound();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeParameterModifier = function () {
        var _localctx = new TypeParameterModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, Java8Parser.RULE_typeParameterModifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 615;
                this.annotation();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeBound = function () {
        var _localctx = new TypeBoundContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, Java8Parser.RULE_typeBound);
        var _la;
        try {
            this.state = 627;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 25, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 617;
                        this.match(Java8Parser.EXTENDS);
                        this.state = 618;
                        this.typeVariable();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 619;
                        this.match(Java8Parser.EXTENDS);
                        this.state = 620;
                        this.classOrInterfaceType();
                        this.state = 624;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.BITAND) {
                            {
                                {
                                    this.state = 621;
                                    this.additionalBound();
                                }
                            }
                            this.state = 626;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.additionalBound = function () {
        var _localctx = new AdditionalBoundContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, Java8Parser.RULE_additionalBound);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 629;
                this.match(Java8Parser.BITAND);
                this.state = 630;
                this.interfaceType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeArguments = function () {
        var _localctx = new TypeArgumentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, Java8Parser.RULE_typeArguments);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 632;
                this.match(Java8Parser.LT);
                this.state = 633;
                this.typeArgumentList();
                this.state = 634;
                this.match(Java8Parser.GT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeArgumentList = function () {
        var _localctx = new TypeArgumentListContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, Java8Parser.RULE_typeArgumentList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 636;
                this.typeArgument();
                this.state = 641;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.COMMA) {
                    {
                        {
                            this.state = 637;
                            this.match(Java8Parser.COMMA);
                            this.state = 638;
                            this.typeArgument();
                        }
                    }
                    this.state = 643;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeArgument = function () {
        var _localctx = new TypeArgumentContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, Java8Parser.RULE_typeArgument);
        try {
            this.state = 646;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 27, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 644;
                        this.referenceType();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 645;
                        this.wildcard();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.wildcard = function () {
        var _localctx = new WildcardContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, Java8Parser.RULE_wildcard);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 651;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 648;
                            this.annotation();
                        }
                    }
                    this.state = 653;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 654;
                this.match(Java8Parser.QUESTION);
                this.state = 656;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.EXTENDS || _la === Java8Parser.SUPER) {
                    {
                        this.state = 655;
                        this.wildcardBounds();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.wildcardBounds = function () {
        var _localctx = new WildcardBoundsContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, Java8Parser.RULE_wildcardBounds);
        try {
            this.state = 662;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.EXTENDS:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 658;
                        this.match(Java8Parser.EXTENDS);
                        this.state = 659;
                        this.referenceType();
                    }
                    break;
                case Java8Parser.SUPER:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 660;
                        this.match(Java8Parser.SUPER);
                        this.state = 661;
                        this.referenceType();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.packageName = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new PackageNameContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 50;
        this.enterRecursionRule(_localctx, 50, Java8Parser.RULE_packageName, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 665;
                    this.match(Java8Parser.Identifier);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 672;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new PackageNameContext(_parentctx, _parentState);
                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_packageName);
                                this.state = 667;
                                if (!(this.precpred(this._ctx, 1))) {
                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                }
                                this.state = 668;
                                this.match(Java8Parser.DOT);
                                this.state = 669;
                                this.match(Java8Parser.Identifier);
                            }
                        }
                    }
                    this.state = 674;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeName = function () {
        var _localctx = new TypeNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, Java8Parser.RULE_typeName);
        try {
            this.state = 680;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 32, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 675;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 676;
                        this.packageOrTypeName(0);
                        this.state = 677;
                        this.match(Java8Parser.DOT);
                        this.state = 678;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.packageOrTypeName = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new PackageOrTypeNameContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 54;
        this.enterRecursionRule(_localctx, 54, Java8Parser.RULE_packageOrTypeName, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 683;
                    this.match(Java8Parser.Identifier);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 690;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new PackageOrTypeNameContext(_parentctx, _parentState);
                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_packageOrTypeName);
                                this.state = 685;
                                if (!(this.precpred(this._ctx, 1))) {
                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                }
                                this.state = 686;
                                this.match(Java8Parser.DOT);
                                this.state = 687;
                                this.match(Java8Parser.Identifier);
                            }
                        }
                    }
                    this.state = 692;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.expressionName = function () {
        var _localctx = new ExpressionNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, Java8Parser.RULE_expressionName);
        try {
            this.state = 698;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 34, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 693;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 694;
                        this.ambiguousName(0);
                        this.state = 695;
                        this.match(Java8Parser.DOT);
                        this.state = 696;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodName = function () {
        var _localctx = new MethodNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, Java8Parser.RULE_methodName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 700;
                this.match(Java8Parser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.ambiguousName = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new AmbiguousNameContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 60;
        this.enterRecursionRule(_localctx, 60, Java8Parser.RULE_ambiguousName, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 703;
                    this.match(Java8Parser.Identifier);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 710;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new AmbiguousNameContext(_parentctx, _parentState);
                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_ambiguousName);
                                this.state = 705;
                                if (!(this.precpred(this._ctx, 1))) {
                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                }
                                this.state = 706;
                                this.match(Java8Parser.DOT);
                                this.state = 707;
                                this.match(Java8Parser.Identifier);
                            }
                        }
                    }
                    this.state = 712;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.compilationUnit = function () {
        var _localctx = new CompilationUnitContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, Java8Parser.RULE_compilationUnit);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 714;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 36, this._ctx)) {
                    case 1:
                        {
                            this.state = 713;
                            this.packageDeclaration();
                        }
                        break;
                }
                this.state = 719;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.IMPORT) {
                    {
                        {
                            this.state = 716;
                            this.importDeclaration();
                        }
                    }
                    this.state = 721;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 725;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.INTERFACE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 722;
                            this.typeDeclaration();
                        }
                    }
                    this.state = 727;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 728;
                this.match(Java8Parser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.packageDeclaration = function () {
        var _localctx = new PackageDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, Java8Parser.RULE_packageDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 733;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 730;
                            this.packageModifier();
                        }
                    }
                    this.state = 735;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 736;
                this.match(Java8Parser.PACKAGE);
                this.state = 737;
                this.packageName(0);
                this.state = 738;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.packageModifier = function () {
        var _localctx = new PackageModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, Java8Parser.RULE_packageModifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 740;
                this.annotation();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.importDeclaration = function () {
        var _localctx = new ImportDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, Java8Parser.RULE_importDeclaration);
        try {
            this.state = 746;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 40, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 742;
                        this.singleTypeImportDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 743;
                        this.typeImportOnDemandDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 744;
                        this.singleStaticImportDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 745;
                        this.staticImportOnDemandDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.singleTypeImportDeclaration = function () {
        var _localctx = new SingleTypeImportDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, Java8Parser.RULE_singleTypeImportDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 748;
                this.match(Java8Parser.IMPORT);
                this.state = 749;
                this.typeName();
                this.state = 750;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeImportOnDemandDeclaration = function () {
        var _localctx = new TypeImportOnDemandDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, Java8Parser.RULE_typeImportOnDemandDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 752;
                this.match(Java8Parser.IMPORT);
                this.state = 753;
                this.packageOrTypeName(0);
                this.state = 754;
                this.match(Java8Parser.DOT);
                this.state = 755;
                this.match(Java8Parser.MUL);
                this.state = 756;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.singleStaticImportDeclaration = function () {
        var _localctx = new SingleStaticImportDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, Java8Parser.RULE_singleStaticImportDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 758;
                this.match(Java8Parser.IMPORT);
                this.state = 759;
                this.match(Java8Parser.STATIC);
                this.state = 760;
                this.typeName();
                this.state = 761;
                this.match(Java8Parser.DOT);
                this.state = 762;
                this.match(Java8Parser.Identifier);
                this.state = 763;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.staticImportOnDemandDeclaration = function () {
        var _localctx = new StaticImportOnDemandDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, Java8Parser.RULE_staticImportOnDemandDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 765;
                this.match(Java8Parser.IMPORT);
                this.state = 766;
                this.match(Java8Parser.STATIC);
                this.state = 767;
                this.typeName();
                this.state = 768;
                this.match(Java8Parser.DOT);
                this.state = 769;
                this.match(Java8Parser.MUL);
                this.state = 770;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeDeclaration = function () {
        var _localctx = new TypeDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, Java8Parser.RULE_typeDeclaration);
        try {
            this.state = 775;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 41, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 772;
                        this.classDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 773;
                        this.interfaceDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 774;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classDeclaration = function () {
        var _localctx = new ClassDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, Java8Parser.RULE_classDeclaration);
        try {
            this.state = 779;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 42, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 777;
                        this.normalClassDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 778;
                        this.enumDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.normalClassDeclaration = function () {
        var _localctx = new NormalClassDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, Java8Parser.RULE_normalClassDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 784;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.ABSTRACT || _la === Java8Parser.FINAL || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)))) !== 0) || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 781;
                            this.classModifier();
                        }
                    }
                    this.state = 786;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 787;
                this.match(Java8Parser.CLASS);
                this.state = 788;
                this.match(Java8Parser.Identifier);
                this.state = 790;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LT) {
                    {
                        this.state = 789;
                        this.typeParameters();
                    }
                }
                this.state = 793;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.EXTENDS) {
                    {
                        this.state = 792;
                        this.superclass();
                    }
                }
                this.state = 796;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.IMPLEMENTS) {
                    {
                        this.state = 795;
                        this.superinterfaces();
                    }
                }
                this.state = 798;
                this.classBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classModifier = function () {
        var _localctx = new ClassModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, Java8Parser.RULE_classModifier);
        try {
            this.state = 808;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 800;
                        this.annotation();
                    }
                    break;
                case Java8Parser.PUBLIC:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 801;
                        this.match(Java8Parser.PUBLIC);
                    }
                    break;
                case Java8Parser.PROTECTED:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 802;
                        this.match(Java8Parser.PROTECTED);
                    }
                    break;
                case Java8Parser.PRIVATE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 803;
                        this.match(Java8Parser.PRIVATE);
                    }
                    break;
                case Java8Parser.ABSTRACT:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 804;
                        this.match(Java8Parser.ABSTRACT);
                    }
                    break;
                case Java8Parser.STATIC:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 805;
                        this.match(Java8Parser.STATIC);
                    }
                    break;
                case Java8Parser.FINAL:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 806;
                        this.match(Java8Parser.FINAL);
                    }
                    break;
                case Java8Parser.STRICTFP:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 807;
                        this.match(Java8Parser.STRICTFP);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeParameters = function () {
        var _localctx = new TypeParametersContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, Java8Parser.RULE_typeParameters);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 810;
                this.match(Java8Parser.LT);
                this.state = 811;
                this.typeParameterList();
                this.state = 812;
                this.match(Java8Parser.GT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeParameterList = function () {
        var _localctx = new TypeParameterListContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, Java8Parser.RULE_typeParameterList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 814;
                this.typeParameter();
                this.state = 819;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.COMMA) {
                    {
                        {
                            this.state = 815;
                            this.match(Java8Parser.COMMA);
                            this.state = 816;
                            this.typeParameter();
                        }
                    }
                    this.state = 821;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.superclass = function () {
        var _localctx = new SuperclassContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, Java8Parser.RULE_superclass);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 822;
                this.match(Java8Parser.EXTENDS);
                this.state = 823;
                this.classType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.superinterfaces = function () {
        var _localctx = new SuperinterfacesContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, Java8Parser.RULE_superinterfaces);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 825;
                this.match(Java8Parser.IMPLEMENTS);
                this.state = 826;
                this.interfaceTypeList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.interfaceTypeList = function () {
        var _localctx = new InterfaceTypeListContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, Java8Parser.RULE_interfaceTypeList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 828;
                this.interfaceType();
                this.state = 833;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.COMMA) {
                    {
                        {
                            this.state = 829;
                            this.match(Java8Parser.COMMA);
                            this.state = 830;
                            this.interfaceType();
                        }
                    }
                    this.state = 835;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classBody = function () {
        var _localctx = new ClassBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, Java8Parser.RULE_classBody);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 836;
                this.match(Java8Parser.LBRACE);
                this.state = 840;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NATIVE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.TRANSIENT - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.VOLATILE - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la === Java8Parser.LT || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 837;
                            this.classBodyDeclaration();
                        }
                    }
                    this.state = 842;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 843;
                this.match(Java8Parser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classBodyDeclaration = function () {
        var _localctx = new ClassBodyDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, Java8Parser.RULE_classBodyDeclaration);
        try {
            this.state = 849;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 51, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 845;
                        this.classMemberDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 846;
                        this.instanceInitializer();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 847;
                        this.staticInitializer();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 848;
                        this.constructorDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classMemberDeclaration = function () {
        var _localctx = new ClassMemberDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, Java8Parser.RULE_classMemberDeclaration);
        try {
            this.state = 856;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 52, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 851;
                        this.fieldDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 852;
                        this.methodDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 853;
                        this.classDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 854;
                        this.interfaceDeclaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 855;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.fieldDeclaration = function () {
        var _localctx = new FieldDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, Java8Parser.RULE_fieldDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 861;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (Java8Parser.FINAL - 18)) | (1 << (Java8Parser.PRIVATE - 18)) | (1 << (Java8Parser.PROTECTED - 18)) | (1 << (Java8Parser.PUBLIC - 18)) | (1 << (Java8Parser.STATIC - 18)) | (1 << (Java8Parser.TRANSIENT - 18)) | (1 << (Java8Parser.VOLATILE - 18)))) !== 0) || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 858;
                            this.fieldModifier();
                        }
                    }
                    this.state = 863;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 864;
                this.unannType();
                this.state = 865;
                this.variableDeclaratorList();
                this.state = 866;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.fieldModifier = function () {
        var _localctx = new FieldModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, Java8Parser.RULE_fieldModifier);
        try {
            this.state = 876;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 868;
                        this.annotation();
                    }
                    break;
                case Java8Parser.PUBLIC:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 869;
                        this.match(Java8Parser.PUBLIC);
                    }
                    break;
                case Java8Parser.PROTECTED:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 870;
                        this.match(Java8Parser.PROTECTED);
                    }
                    break;
                case Java8Parser.PRIVATE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 871;
                        this.match(Java8Parser.PRIVATE);
                    }
                    break;
                case Java8Parser.STATIC:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 872;
                        this.match(Java8Parser.STATIC);
                    }
                    break;
                case Java8Parser.FINAL:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 873;
                        this.match(Java8Parser.FINAL);
                    }
                    break;
                case Java8Parser.TRANSIENT:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 874;
                        this.match(Java8Parser.TRANSIENT);
                    }
                    break;
                case Java8Parser.VOLATILE:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 875;
                        this.match(Java8Parser.VOLATILE);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.variableDeclaratorList = function () {
        var _localctx = new VariableDeclaratorListContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, Java8Parser.RULE_variableDeclaratorList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 878;
                this.variableDeclarator();
                this.state = 883;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.COMMA) {
                    {
                        {
                            this.state = 879;
                            this.match(Java8Parser.COMMA);
                            this.state = 880;
                            this.variableDeclarator();
                        }
                    }
                    this.state = 885;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.variableDeclarator = function () {
        var _localctx = new VariableDeclaratorContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, Java8Parser.RULE_variableDeclarator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 886;
                this.variableDeclaratorId();
                this.state = 889;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.ASSIGN) {
                    {
                        this.state = 887;
                        this.match(Java8Parser.ASSIGN);
                        this.state = 888;
                        this.variableInitializer();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.variableDeclaratorId = function () {
        var _localctx = new VariableDeclaratorIdContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, Java8Parser.RULE_variableDeclaratorId);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 891;
                this.match(Java8Parser.Identifier);
                this.state = 893;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LBRACK || _la === Java8Parser.AT) {
                    {
                        this.state = 892;
                        this.dims();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.variableInitializer = function () {
        var _localctx = new VariableInitializerContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, Java8Parser.RULE_variableInitializer);
        try {
            this.state = 897;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.BOOLEAN:
                case Java8Parser.BYTE:
                case Java8Parser.CHAR:
                case Java8Parser.DOUBLE:
                case Java8Parser.FLOAT:
                case Java8Parser.INT:
                case Java8Parser.LONG:
                case Java8Parser.NEW:
                case Java8Parser.SHORT:
                case Java8Parser.SUPER:
                case Java8Parser.THIS:
                case Java8Parser.VOID:
                case Java8Parser.IntegerLiteral:
                case Java8Parser.FloatingPointLiteral:
                case Java8Parser.BooleanLiteral:
                case Java8Parser.CharacterLiteral:
                case Java8Parser.StringLiteral:
                case Java8Parser.NullLiteral:
                case Java8Parser.LPAREN:
                case Java8Parser.BANG:
                case Java8Parser.TILDE:
                case Java8Parser.INC:
                case Java8Parser.DEC:
                case Java8Parser.ADD:
                case Java8Parser.SUB:
                case Java8Parser.Identifier:
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 895;
                        this.expression();
                    }
                    break;
                case Java8Parser.LBRACE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 896;
                        this.arrayInitializer();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannType = function () {
        var _localctx = new UnannTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, Java8Parser.RULE_unannType);
        try {
            this.state = 901;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 59, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 899;
                        this.unannPrimitiveType();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 900;
                        this.unannReferenceType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannPrimitiveType = function () {
        var _localctx = new UnannPrimitiveTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, Java8Parser.RULE_unannPrimitiveType);
        try {
            this.state = 905;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.BYTE:
                case Java8Parser.CHAR:
                case Java8Parser.DOUBLE:
                case Java8Parser.FLOAT:
                case Java8Parser.INT:
                case Java8Parser.LONG:
                case Java8Parser.SHORT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 903;
                        this.numericType();
                    }
                    break;
                case Java8Parser.BOOLEAN:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 904;
                        this.match(Java8Parser.BOOLEAN);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannReferenceType = function () {
        var _localctx = new UnannReferenceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, Java8Parser.RULE_unannReferenceType);
        try {
            this.state = 910;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 61, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 907;
                        this.unannClassOrInterfaceType();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 908;
                        this.unannTypeVariable();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 909;
                        this.unannArrayType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannClassOrInterfaceType = function () {
        var _localctx = new UnannClassOrInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, Java8Parser.RULE_unannClassOrInterfaceType);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 914;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 62, this._ctx)) {
                    case 1:
                        {
                            this.state = 912;
                            this.unannClassType_lfno_unannClassOrInterfaceType();
                        }
                        break;
                    case 2:
                        {
                            this.state = 913;
                            this.unannInterfaceType_lfno_unannClassOrInterfaceType();
                        }
                        break;
                }
                this.state = 920;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 918;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 63, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 916;
                                        this.unannClassType_lf_unannClassOrInterfaceType();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 917;
                                        this.unannInterfaceType_lf_unannClassOrInterfaceType();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 922;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannClassType = function () {
        var _localctx = new UnannClassTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, Java8Parser.RULE_unannClassType);
        var _la;
        try {
            this.state = 939;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 68, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 923;
                        this.match(Java8Parser.Identifier);
                        this.state = 925;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 924;
                                this.typeArguments();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 927;
                        this.unannClassOrInterfaceType();
                        this.state = 928;
                        this.match(Java8Parser.DOT);
                        this.state = 932;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 929;
                                    this.annotation();
                                }
                            }
                            this.state = 934;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 935;
                        this.match(Java8Parser.Identifier);
                        this.state = 937;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 936;
                                this.typeArguments();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannClassType_lf_unannClassOrInterfaceType = function () {
        var _localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 941;
                this.match(Java8Parser.DOT);
                this.state = 945;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 942;
                            this.annotation();
                        }
                    }
                    this.state = 947;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 948;
                this.match(Java8Parser.Identifier);
                this.state = 950;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LT) {
                    {
                        this.state = 949;
                        this.typeArguments();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannClassType_lfno_unannClassOrInterfaceType = function () {
        var _localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 952;
                this.match(Java8Parser.Identifier);
                this.state = 954;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LT) {
                    {
                        this.state = 953;
                        this.typeArguments();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannInterfaceType = function () {
        var _localctx = new UnannInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, Java8Parser.RULE_unannInterfaceType);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 956;
                this.unannClassType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannInterfaceType_lf_unannClassOrInterfaceType = function () {
        var _localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 958;
                this.unannClassType_lf_unannClassOrInterfaceType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannInterfaceType_lfno_unannClassOrInterfaceType = function () {
        var _localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 960;
                this.unannClassType_lfno_unannClassOrInterfaceType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannTypeVariable = function () {
        var _localctx = new UnannTypeVariableContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, Java8Parser.RULE_unannTypeVariable);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 962;
                this.match(Java8Parser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unannArrayType = function () {
        var _localctx = new UnannArrayTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, Java8Parser.RULE_unannArrayType);
        try {
            this.state = 973;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 72, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 964;
                        this.unannPrimitiveType();
                        this.state = 965;
                        this.dims();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 967;
                        this.unannClassOrInterfaceType();
                        this.state = 968;
                        this.dims();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 970;
                        this.unannTypeVariable();
                        this.state = 971;
                        this.dims();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodDeclaration = function () {
        var _localctx = new MethodDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, Java8Parser.RULE_methodDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 978;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.NATIVE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)))) !== 0) || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 975;
                            this.methodModifier();
                        }
                    }
                    this.state = 980;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 981;
                this.methodHeader();
                this.state = 982;
                this.methodBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodModifier = function () {
        var _localctx = new MethodModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, Java8Parser.RULE_methodModifier);
        try {
            this.state = 994;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 984;
                        this.annotation();
                    }
                    break;
                case Java8Parser.PUBLIC:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 985;
                        this.match(Java8Parser.PUBLIC);
                    }
                    break;
                case Java8Parser.PROTECTED:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 986;
                        this.match(Java8Parser.PROTECTED);
                    }
                    break;
                case Java8Parser.PRIVATE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 987;
                        this.match(Java8Parser.PRIVATE);
                    }
                    break;
                case Java8Parser.ABSTRACT:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 988;
                        this.match(Java8Parser.ABSTRACT);
                    }
                    break;
                case Java8Parser.STATIC:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 989;
                        this.match(Java8Parser.STATIC);
                    }
                    break;
                case Java8Parser.FINAL:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 990;
                        this.match(Java8Parser.FINAL);
                    }
                    break;
                case Java8Parser.SYNCHRONIZED:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 991;
                        this.match(Java8Parser.SYNCHRONIZED);
                    }
                    break;
                case Java8Parser.NATIVE:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 992;
                        this.match(Java8Parser.NATIVE);
                    }
                    break;
                case Java8Parser.STRICTFP:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 993;
                        this.match(Java8Parser.STRICTFP);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodHeader = function () {
        var _localctx = new MethodHeaderContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, Java8Parser.RULE_methodHeader);
        var _la;
        try {
            this.state = 1013;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.BOOLEAN:
                case Java8Parser.BYTE:
                case Java8Parser.CHAR:
                case Java8Parser.DOUBLE:
                case Java8Parser.FLOAT:
                case Java8Parser.INT:
                case Java8Parser.LONG:
                case Java8Parser.SHORT:
                case Java8Parser.VOID:
                case Java8Parser.Identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 996;
                        this.result();
                        this.state = 997;
                        this.methodDeclarator();
                        this.state = 999;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.THROWS) {
                            {
                                this.state = 998;
                                this.throws_();
                            }
                        }
                    }
                    break;
                case Java8Parser.LT:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1001;
                        this.typeParameters();
                        this.state = 1005;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 1002;
                                    this.annotation();
                                }
                            }
                            this.state = 1007;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1008;
                        this.result();
                        this.state = 1009;
                        this.methodDeclarator();
                        this.state = 1011;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.THROWS) {
                            {
                                this.state = 1010;
                                this.throws_();
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.result = function () {
        var _localctx = new ResultContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, Java8Parser.RULE_result);
        try {
            this.state = 1017;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.BOOLEAN:
                case Java8Parser.BYTE:
                case Java8Parser.CHAR:
                case Java8Parser.DOUBLE:
                case Java8Parser.FLOAT:
                case Java8Parser.INT:
                case Java8Parser.LONG:
                case Java8Parser.SHORT:
                case Java8Parser.Identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1015;
                        this.unannType();
                    }
                    break;
                case Java8Parser.VOID:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1016;
                        this.match(Java8Parser.VOID);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodDeclarator = function () {
        var _localctx = new MethodDeclaratorContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, Java8Parser.RULE_methodDeclarator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1019;
                this.match(Java8Parser.Identifier);
                this.state = 1020;
                this.match(Java8Parser.LPAREN);
                this.state = 1022;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la === Java8Parser.SHORT || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        this.state = 1021;
                        this.formalParameterList();
                    }
                }
                this.state = 1024;
                this.match(Java8Parser.RPAREN);
                this.state = 1026;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LBRACK || _la === Java8Parser.AT) {
                    {
                        this.state = 1025;
                        this.dims();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.formalParameterList = function () {
        var _localctx = new FormalParameterListContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, Java8Parser.RULE_formalParameterList);
        try {
            this.state = 1034;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 82, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1028;
                        this.receiverParameter();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1029;
                        this.formalParameters();
                        this.state = 1030;
                        this.match(Java8Parser.COMMA);
                        this.state = 1031;
                        this.lastFormalParameter();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1033;
                        this.lastFormalParameter();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.formalParameters = function () {
        var _localctx = new FormalParametersContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, Java8Parser.RULE_formalParameters);
        try {
            var _alt = void 0;
            this.state = 1052;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 85, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1036;
                        this.formalParameter();
                        this.state = 1041;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 83, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 1037;
                                        this.match(Java8Parser.COMMA);
                                        this.state = 1038;
                                        this.formalParameter();
                                    }
                                }
                            }
                            this.state = 1043;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 83, this._ctx);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1044;
                        this.receiverParameter();
                        this.state = 1049;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 84, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 1045;
                                        this.match(Java8Parser.COMMA);
                                        this.state = 1046;
                                        this.formalParameter();
                                    }
                                }
                            }
                            this.state = 1051;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 84, this._ctx);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.formalParameter = function () {
        var _localctx = new FormalParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, Java8Parser.RULE_formalParameter);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1057;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1054;
                            this.variableModifier();
                        }
                    }
                    this.state = 1059;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1060;
                this.unannType();
                this.state = 1061;
                this.variableDeclaratorId();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.variableModifier = function () {
        var _localctx = new VariableModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, Java8Parser.RULE_variableModifier);
        try {
            this.state = 1065;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1063;
                        this.annotation();
                    }
                    break;
                case Java8Parser.FINAL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1064;
                        this.match(Java8Parser.FINAL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.lastFormalParameter = function () {
        var _localctx = new LastFormalParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, Java8Parser.RULE_lastFormalParameter);
        var _la;
        try {
            this.state = 1084;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 90, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1070;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 1067;
                                    this.variableModifier();
                                }
                            }
                            this.state = 1072;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1073;
                        this.unannType();
                        this.state = 1077;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 1074;
                                    this.annotation();
                                }
                            }
                            this.state = 1079;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1080;
                        this.match(Java8Parser.ELLIPSIS);
                        this.state = 1081;
                        this.variableDeclaratorId();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1083;
                        this.formalParameter();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.receiverParameter = function () {
        var _localctx = new ReceiverParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, Java8Parser.RULE_receiverParameter);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1089;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1086;
                            this.annotation();
                        }
                    }
                    this.state = 1091;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1092;
                this.unannType();
                this.state = 1095;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.Identifier) {
                    {
                        this.state = 1093;
                        this.match(Java8Parser.Identifier);
                        this.state = 1094;
                        this.match(Java8Parser.DOT);
                    }
                }
                this.state = 1097;
                this.match(Java8Parser.THIS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.throws_ = function () {
        var _localctx = new Throws_Context(this._ctx, this.state);
        this.enterRule(_localctx, 160, Java8Parser.RULE_throws_);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1099;
                this.match(Java8Parser.THROWS);
                this.state = 1100;
                this.exceptionTypeList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.exceptionTypeList = function () {
        var _localctx = new ExceptionTypeListContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, Java8Parser.RULE_exceptionTypeList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1102;
                this.exceptionType();
                this.state = 1107;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.COMMA) {
                    {
                        {
                            this.state = 1103;
                            this.match(Java8Parser.COMMA);
                            this.state = 1104;
                            this.exceptionType();
                        }
                    }
                    this.state = 1109;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.exceptionType = function () {
        var _localctx = new ExceptionTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, Java8Parser.RULE_exceptionType);
        try {
            this.state = 1112;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 94, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1110;
                        this.classType();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1111;
                        this.typeVariable();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodBody = function () {
        var _localctx = new MethodBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, Java8Parser.RULE_methodBody);
        try {
            this.state = 1116;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.LBRACE:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1114;
                        this.block();
                    }
                    break;
                case Java8Parser.SEMI:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1115;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.instanceInitializer = function () {
        var _localctx = new InstanceInitializerContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, Java8Parser.RULE_instanceInitializer);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1118;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.staticInitializer = function () {
        var _localctx = new StaticInitializerContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, Java8Parser.RULE_staticInitializer);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1120;
                this.match(Java8Parser.STATIC);
                this.state = 1121;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.constructorDeclaration = function () {
        var _localctx = new ConstructorDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, Java8Parser.RULE_constructorDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1126;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)))) !== 0) || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1123;
                            this.constructorModifier();
                        }
                    }
                    this.state = 1128;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1129;
                this.constructorDeclarator();
                this.state = 1131;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.THROWS) {
                    {
                        this.state = 1130;
                        this.throws_();
                    }
                }
                this.state = 1133;
                this.constructorBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.constructorModifier = function () {
        var _localctx = new ConstructorModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, Java8Parser.RULE_constructorModifier);
        try {
            this.state = 1139;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1135;
                        this.annotation();
                    }
                    break;
                case Java8Parser.PUBLIC:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1136;
                        this.match(Java8Parser.PUBLIC);
                    }
                    break;
                case Java8Parser.PROTECTED:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1137;
                        this.match(Java8Parser.PROTECTED);
                    }
                    break;
                case Java8Parser.PRIVATE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1138;
                        this.match(Java8Parser.PRIVATE);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.constructorDeclarator = function () {
        var _localctx = new ConstructorDeclaratorContext(this._ctx, this.state);
        this.enterRule(_localctx, 176, Java8Parser.RULE_constructorDeclarator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1142;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LT) {
                    {
                        this.state = 1141;
                        this.typeParameters();
                    }
                }
                this.state = 1144;
                this.simpleTypeName();
                this.state = 1145;
                this.match(Java8Parser.LPAREN);
                this.state = 1147;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la === Java8Parser.SHORT || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        this.state = 1146;
                        this.formalParameterList();
                    }
                }
                this.state = 1149;
                this.match(Java8Parser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.simpleTypeName = function () {
        var _localctx = new SimpleTypeNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 178, Java8Parser.RULE_simpleTypeName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1151;
                this.match(Java8Parser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.constructorBody = function () {
        var _localctx = new ConstructorBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, Java8Parser.RULE_constructorBody);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1153;
                this.match(Java8Parser.LBRACE);
                this.state = 1155;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 101, this._ctx)) {
                    case 1:
                        {
                            this.state = 1154;
                            this.explicitConstructorInvocation();
                        }
                        break;
                }
                this.state = 1158;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.ASSERT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BREAK) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.CONTINUE) | (1 << Java8Parser.DO) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.FOR) | (1 << Java8Parser.IF) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.RETURN - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SUPER - 33)) | (1 << (Java8Parser.SWITCH - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.THIS - 33)) | (1 << (Java8Parser.THROW - 33)) | (1 << (Java8Parser.TRY - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.WHILE - 33)) | (1 << (Java8Parser.IntegerLiteral - 33)) | (1 << (Java8Parser.FloatingPointLiteral - 33)) | (1 << (Java8Parser.BooleanLiteral - 33)) | (1 << (Java8Parser.CharacterLiteral - 33)) | (1 << (Java8Parser.StringLiteral - 33)) | (1 << (Java8Parser.NullLiteral - 33)) | (1 << (Java8Parser.LPAREN - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
                    {
                        this.state = 1157;
                        this.blockStatements();
                    }
                }
                this.state = 1160;
                this.match(Java8Parser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.explicitConstructorInvocation = function () {
        var _localctx = new ExplicitConstructorInvocationContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, Java8Parser.RULE_explicitConstructorInvocation);
        var _la;
        try {
            this.state = 1208;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 111, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1163;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 1162;
                                this.typeArguments();
                            }
                        }
                        this.state = 1165;
                        this.match(Java8Parser.THIS);
                        this.state = 1166;
                        this.match(Java8Parser.LPAREN);
                        this.state = 1168;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 1167;
                                this.argumentList();
                            }
                        }
                        this.state = 1170;
                        this.match(Java8Parser.RPAREN);
                        this.state = 1171;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1173;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 1172;
                                this.typeArguments();
                            }
                        }
                        this.state = 1175;
                        this.match(Java8Parser.SUPER);
                        this.state = 1176;
                        this.match(Java8Parser.LPAREN);
                        this.state = 1178;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 1177;
                                this.argumentList();
                            }
                        }
                        this.state = 1180;
                        this.match(Java8Parser.RPAREN);
                        this.state = 1181;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1182;
                        this.expressionName();
                        this.state = 1183;
                        this.match(Java8Parser.DOT);
                        this.state = 1185;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 1184;
                                this.typeArguments();
                            }
                        }
                        this.state = 1187;
                        this.match(Java8Parser.SUPER);
                        this.state = 1188;
                        this.match(Java8Parser.LPAREN);
                        this.state = 1190;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 1189;
                                this.argumentList();
                            }
                        }
                        this.state = 1192;
                        this.match(Java8Parser.RPAREN);
                        this.state = 1193;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1195;
                        this.primary();
                        this.state = 1196;
                        this.match(Java8Parser.DOT);
                        this.state = 1198;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 1197;
                                this.typeArguments();
                            }
                        }
                        this.state = 1200;
                        this.match(Java8Parser.SUPER);
                        this.state = 1201;
                        this.match(Java8Parser.LPAREN);
                        this.state = 1203;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 1202;
                                this.argumentList();
                            }
                        }
                        this.state = 1205;
                        this.match(Java8Parser.RPAREN);
                        this.state = 1206;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.enumDeclaration = function () {
        var _localctx = new EnumDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, Java8Parser.RULE_enumDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1213;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.ABSTRACT || _la === Java8Parser.FINAL || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)))) !== 0) || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1210;
                            this.classModifier();
                        }
                    }
                    this.state = 1215;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1216;
                this.match(Java8Parser.ENUM);
                this.state = 1217;
                this.match(Java8Parser.Identifier);
                this.state = 1219;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.IMPLEMENTS) {
                    {
                        this.state = 1218;
                        this.superinterfaces();
                    }
                }
                this.state = 1221;
                this.enumBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.enumBody = function () {
        var _localctx = new EnumBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, Java8Parser.RULE_enumBody);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1223;
                this.match(Java8Parser.LBRACE);
                this.state = 1225;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        this.state = 1224;
                        this.enumConstantList();
                    }
                }
                this.state = 1228;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.COMMA) {
                    {
                        this.state = 1227;
                        this.match(Java8Parser.COMMA);
                    }
                }
                this.state = 1231;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.SEMI) {
                    {
                        this.state = 1230;
                        this.enumBodyDeclarations();
                    }
                }
                this.state = 1233;
                this.match(Java8Parser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.enumConstantList = function () {
        var _localctx = new EnumConstantListContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, Java8Parser.RULE_enumConstantList);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1235;
                this.enumConstant();
                this.state = 1240;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1236;
                                this.match(Java8Parser.COMMA);
                                this.state = 1237;
                                this.enumConstant();
                            }
                        }
                    }
                    this.state = 1242;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.enumConstant = function () {
        var _localctx = new EnumConstantContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, Java8Parser.RULE_enumConstant);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1246;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1243;
                            this.enumConstantModifier();
                        }
                    }
                    this.state = 1248;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1249;
                this.match(Java8Parser.Identifier);
                this.state = 1255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LPAREN) {
                    {
                        this.state = 1250;
                        this.match(Java8Parser.LPAREN);
                        this.state = 1252;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 1251;
                                this.argumentList();
                            }
                        }
                        this.state = 1254;
                        this.match(Java8Parser.RPAREN);
                    }
                }
                this.state = 1258;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LBRACE) {
                    {
                        this.state = 1257;
                        this.classBody();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.enumConstantModifier = function () {
        var _localctx = new EnumConstantModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, Java8Parser.RULE_enumConstantModifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1260;
                this.annotation();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.enumBodyDeclarations = function () {
        var _localctx = new EnumBodyDeclarationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, Java8Parser.RULE_enumBodyDeclarations);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1262;
                this.match(Java8Parser.SEMI);
                this.state = 1266;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NATIVE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.TRANSIENT - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.VOLATILE - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la === Java8Parser.LT || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1263;
                            this.classBodyDeclaration();
                        }
                    }
                    this.state = 1268;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.interfaceDeclaration = function () {
        var _localctx = new InterfaceDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, Java8Parser.RULE_interfaceDeclaration);
        try {
            this.state = 1271;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 123, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1269;
                        this.normalInterfaceDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1270;
                        this.annotationTypeDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.normalInterfaceDeclaration = function () {
        var _localctx = new NormalInterfaceDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, Java8Parser.RULE_normalInterfaceDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.ABSTRACT || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)))) !== 0) || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1273;
                            this.interfaceModifier();
                        }
                    }
                    this.state = 1278;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1279;
                this.match(Java8Parser.INTERFACE);
                this.state = 1280;
                this.match(Java8Parser.Identifier);
                this.state = 1282;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LT) {
                    {
                        this.state = 1281;
                        this.typeParameters();
                    }
                }
                this.state = 1285;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.EXTENDS) {
                    {
                        this.state = 1284;
                        this.extendsInterfaces();
                    }
                }
                this.state = 1287;
                this.interfaceBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.interfaceModifier = function () {
        var _localctx = new InterfaceModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 200, Java8Parser.RULE_interfaceModifier);
        try {
            this.state = 1296;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1289;
                        this.annotation();
                    }
                    break;
                case Java8Parser.PUBLIC:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1290;
                        this.match(Java8Parser.PUBLIC);
                    }
                    break;
                case Java8Parser.PROTECTED:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1291;
                        this.match(Java8Parser.PROTECTED);
                    }
                    break;
                case Java8Parser.PRIVATE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1292;
                        this.match(Java8Parser.PRIVATE);
                    }
                    break;
                case Java8Parser.ABSTRACT:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1293;
                        this.match(Java8Parser.ABSTRACT);
                    }
                    break;
                case Java8Parser.STATIC:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1294;
                        this.match(Java8Parser.STATIC);
                    }
                    break;
                case Java8Parser.STRICTFP:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1295;
                        this.match(Java8Parser.STRICTFP);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.extendsInterfaces = function () {
        var _localctx = new ExtendsInterfacesContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, Java8Parser.RULE_extendsInterfaces);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1298;
                this.match(Java8Parser.EXTENDS);
                this.state = 1299;
                this.interfaceTypeList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.interfaceBody = function () {
        var _localctx = new InterfaceBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 204, Java8Parser.RULE_interfaceBody);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1301;
                this.match(Java8Parser.LBRACE);
                this.state = 1305;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DEFAULT) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la === Java8Parser.LT || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1302;
                            this.interfaceMemberDeclaration();
                        }
                    }
                    this.state = 1307;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1308;
                this.match(Java8Parser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.interfaceMemberDeclaration = function () {
        var _localctx = new InterfaceMemberDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 206, Java8Parser.RULE_interfaceMemberDeclaration);
        try {
            this.state = 1315;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 129, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1310;
                        this.constantDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1311;
                        this.interfaceMethodDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1312;
                        this.classDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1313;
                        this.interfaceDeclaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1314;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.constantDeclaration = function () {
        var _localctx = new ConstantDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 208, Java8Parser.RULE_constantDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1320;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (Java8Parser.FINAL - 18)) | (1 << (Java8Parser.PUBLIC - 18)) | (1 << (Java8Parser.STATIC - 18)))) !== 0) || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1317;
                            this.constantModifier();
                        }
                    }
                    this.state = 1322;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1323;
                this.unannType();
                this.state = 1324;
                this.variableDeclaratorList();
                this.state = 1325;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.constantModifier = function () {
        var _localctx = new ConstantModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 210, Java8Parser.RULE_constantModifier);
        try {
            this.state = 1331;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1327;
                        this.annotation();
                    }
                    break;
                case Java8Parser.PUBLIC:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1328;
                        this.match(Java8Parser.PUBLIC);
                    }
                    break;
                case Java8Parser.STATIC:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1329;
                        this.match(Java8Parser.STATIC);
                    }
                    break;
                case Java8Parser.FINAL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1330;
                        this.match(Java8Parser.FINAL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.interfaceMethodDeclaration = function () {
        var _localctx = new InterfaceMethodDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 212, Java8Parser.RULE_interfaceMethodDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1336;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.ABSTRACT || _la === Java8Parser.DEFAULT || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (Java8Parser.PUBLIC - 35)) | (1 << (Java8Parser.STATIC - 35)) | (1 << (Java8Parser.STRICTFP - 35)))) !== 0) || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1333;
                            this.interfaceMethodModifier();
                        }
                    }
                    this.state = 1338;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1339;
                this.methodHeader();
                this.state = 1340;
                this.methodBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.interfaceMethodModifier = function () {
        var _localctx = new InterfaceMethodModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 214, Java8Parser.RULE_interfaceMethodModifier);
        try {
            this.state = 1348;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1342;
                        this.annotation();
                    }
                    break;
                case Java8Parser.PUBLIC:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1343;
                        this.match(Java8Parser.PUBLIC);
                    }
                    break;
                case Java8Parser.ABSTRACT:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1344;
                        this.match(Java8Parser.ABSTRACT);
                    }
                    break;
                case Java8Parser.DEFAULT:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1345;
                        this.match(Java8Parser.DEFAULT);
                    }
                    break;
                case Java8Parser.STATIC:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1346;
                        this.match(Java8Parser.STATIC);
                    }
                    break;
                case Java8Parser.STRICTFP:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1347;
                        this.match(Java8Parser.STRICTFP);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.annotationTypeDeclaration = function () {
        var _localctx = new AnnotationTypeDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, Java8Parser.RULE_annotationTypeDeclaration);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1353;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1350;
                                this.interfaceModifier();
                            }
                        }
                    }
                    this.state = 1355;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
                }
                this.state = 1356;
                this.match(Java8Parser.AT);
                this.state = 1357;
                this.match(Java8Parser.INTERFACE);
                this.state = 1358;
                this.match(Java8Parser.Identifier);
                this.state = 1359;
                this.annotationTypeBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.annotationTypeBody = function () {
        var _localctx = new AnnotationTypeBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, Java8Parser.RULE_annotationTypeBody);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1361;
                this.match(Java8Parser.LBRACE);
                this.state = 1365;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1362;
                            this.annotationTypeMemberDeclaration();
                        }
                    }
                    this.state = 1367;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1368;
                this.match(Java8Parser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.annotationTypeMemberDeclaration = function () {
        var _localctx = new AnnotationTypeMemberDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 220, Java8Parser.RULE_annotationTypeMemberDeclaration);
        try {
            this.state = 1375;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 136, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1370;
                        this.annotationTypeElementDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1371;
                        this.constantDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1372;
                        this.classDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1373;
                        this.interfaceDeclaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1374;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.annotationTypeElementDeclaration = function () {
        var _localctx = new AnnotationTypeElementDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 222, Java8Parser.RULE_annotationTypeElementDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1380;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.ABSTRACT || _la === Java8Parser.PUBLIC || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1377;
                            this.annotationTypeElementModifier();
                        }
                    }
                    this.state = 1382;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1383;
                this.unannType();
                this.state = 1384;
                this.match(Java8Parser.Identifier);
                this.state = 1385;
                this.match(Java8Parser.LPAREN);
                this.state = 1386;
                this.match(Java8Parser.RPAREN);
                this.state = 1388;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LBRACK || _la === Java8Parser.AT) {
                    {
                        this.state = 1387;
                        this.dims();
                    }
                }
                this.state = 1391;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.DEFAULT) {
                    {
                        this.state = 1390;
                        this.defaultValue();
                    }
                }
                this.state = 1393;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.annotationTypeElementModifier = function () {
        var _localctx = new AnnotationTypeElementModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 224, Java8Parser.RULE_annotationTypeElementModifier);
        try {
            this.state = 1398;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1395;
                        this.annotation();
                    }
                    break;
                case Java8Parser.PUBLIC:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1396;
                        this.match(Java8Parser.PUBLIC);
                    }
                    break;
                case Java8Parser.ABSTRACT:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1397;
                        this.match(Java8Parser.ABSTRACT);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.defaultValue = function () {
        var _localctx = new DefaultValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, Java8Parser.RULE_defaultValue);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1400;
                this.match(Java8Parser.DEFAULT);
                this.state = 1401;
                this.elementValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.annotation = function () {
        var _localctx = new AnnotationContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, Java8Parser.RULE_annotation);
        try {
            this.state = 1406;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 141, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1403;
                        this.normalAnnotation();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1404;
                        this.markerAnnotation();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1405;
                        this.singleElementAnnotation();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.normalAnnotation = function () {
        var _localctx = new NormalAnnotationContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, Java8Parser.RULE_normalAnnotation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1408;
                this.match(Java8Parser.AT);
                this.state = 1409;
                this.typeName();
                this.state = 1410;
                this.match(Java8Parser.LPAREN);
                this.state = 1412;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.Identifier) {
                    {
                        this.state = 1411;
                        this.elementValuePairList();
                    }
                }
                this.state = 1414;
                this.match(Java8Parser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.elementValuePairList = function () {
        var _localctx = new ElementValuePairListContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, Java8Parser.RULE_elementValuePairList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1416;
                this.elementValuePair();
                this.state = 1421;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.COMMA) {
                    {
                        {
                            this.state = 1417;
                            this.match(Java8Parser.COMMA);
                            this.state = 1418;
                            this.elementValuePair();
                        }
                    }
                    this.state = 1423;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.elementValuePair = function () {
        var _localctx = new ElementValuePairContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, Java8Parser.RULE_elementValuePair);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1424;
                this.match(Java8Parser.Identifier);
                this.state = 1425;
                this.match(Java8Parser.ASSIGN);
                this.state = 1426;
                this.elementValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.elementValue = function () {
        var _localctx = new ElementValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, Java8Parser.RULE_elementValue);
        try {
            this.state = 1431;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 144, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1428;
                        this.conditionalExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1429;
                        this.elementValueArrayInitializer();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1430;
                        this.annotation();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.elementValueArrayInitializer = function () {
        var _localctx = new ElementValueArrayInitializerContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, Java8Parser.RULE_elementValueArrayInitializer);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1433;
                this.match(Java8Parser.LBRACE);
                this.state = 1435;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)) | (1 << (Java8Parser.LBRACE - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        this.state = 1434;
                        this.elementValueList();
                    }
                }
                this.state = 1438;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.COMMA) {
                    {
                        this.state = 1437;
                        this.match(Java8Parser.COMMA);
                    }
                }
                this.state = 1440;
                this.match(Java8Parser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.elementValueList = function () {
        var _localctx = new ElementValueListContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, Java8Parser.RULE_elementValueList);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1442;
                this.elementValue();
                this.state = 1447;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 147, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1443;
                                this.match(Java8Parser.COMMA);
                                this.state = 1444;
                                this.elementValue();
                            }
                        }
                    }
                    this.state = 1449;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 147, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.markerAnnotation = function () {
        var _localctx = new MarkerAnnotationContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, Java8Parser.RULE_markerAnnotation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1450;
                this.match(Java8Parser.AT);
                this.state = 1451;
                this.typeName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.singleElementAnnotation = function () {
        var _localctx = new SingleElementAnnotationContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, Java8Parser.RULE_singleElementAnnotation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1453;
                this.match(Java8Parser.AT);
                this.state = 1454;
                this.typeName();
                this.state = 1455;
                this.match(Java8Parser.LPAREN);
                this.state = 1456;
                this.elementValue();
                this.state = 1457;
                this.match(Java8Parser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.arrayInitializer = function () {
        var _localctx = new ArrayInitializerContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, Java8Parser.RULE_arrayInitializer);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1459;
                this.match(Java8Parser.LBRACE);
                this.state = 1461;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)) | (1 << (Java8Parser.LBRACE - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        this.state = 1460;
                        this.variableInitializerList();
                    }
                }
                this.state = 1464;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.COMMA) {
                    {
                        this.state = 1463;
                        this.match(Java8Parser.COMMA);
                    }
                }
                this.state = 1466;
                this.match(Java8Parser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.variableInitializerList = function () {
        var _localctx = new VariableInitializerListContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, Java8Parser.RULE_variableInitializerList);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1468;
                this.variableInitializer();
                this.state = 1473;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 150, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1469;
                                this.match(Java8Parser.COMMA);
                                this.state = 1470;
                                this.variableInitializer();
                            }
                        }
                    }
                    this.state = 1475;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 150, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.block = function () {
        var _localctx = new BlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, Java8Parser.RULE_block);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1476;
                this.match(Java8Parser.LBRACE);
                this.state = 1478;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.ASSERT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BREAK) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.CONTINUE) | (1 << Java8Parser.DO) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.FOR) | (1 << Java8Parser.IF) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.RETURN - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SUPER - 33)) | (1 << (Java8Parser.SWITCH - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.THIS - 33)) | (1 << (Java8Parser.THROW - 33)) | (1 << (Java8Parser.TRY - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.WHILE - 33)) | (1 << (Java8Parser.IntegerLiteral - 33)) | (1 << (Java8Parser.FloatingPointLiteral - 33)) | (1 << (Java8Parser.BooleanLiteral - 33)) | (1 << (Java8Parser.CharacterLiteral - 33)) | (1 << (Java8Parser.StringLiteral - 33)) | (1 << (Java8Parser.NullLiteral - 33)) | (1 << (Java8Parser.LPAREN - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
                    {
                        this.state = 1477;
                        this.blockStatements();
                    }
                }
                this.state = 1480;
                this.match(Java8Parser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.blockStatements = function () {
        var _localctx = new BlockStatementsContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, Java8Parser.RULE_blockStatements);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1483;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1482;
                            this.blockStatement();
                        }
                    }
                    this.state = 1485;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.ASSERT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BREAK) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.CONTINUE) | (1 << Java8Parser.DO) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.FOR) | (1 << Java8Parser.IF) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.RETURN - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SUPER - 33)) | (1 << (Java8Parser.SWITCH - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.THIS - 33)) | (1 << (Java8Parser.THROW - 33)) | (1 << (Java8Parser.TRY - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.WHILE - 33)) | (1 << (Java8Parser.IntegerLiteral - 33)) | (1 << (Java8Parser.FloatingPointLiteral - 33)) | (1 << (Java8Parser.BooleanLiteral - 33)) | (1 << (Java8Parser.CharacterLiteral - 33)) | (1 << (Java8Parser.StringLiteral - 33)) | (1 << (Java8Parser.NullLiteral - 33)) | (1 << (Java8Parser.LPAREN - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.blockStatement = function () {
        var _localctx = new BlockStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, Java8Parser.RULE_blockStatement);
        try {
            this.state = 1490;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 153, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1487;
                        this.localVariableDeclarationStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1488;
                        this.classDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1489;
                        this.statement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.localVariableDeclarationStatement = function () {
        var _localctx = new LocalVariableDeclarationStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, Java8Parser.RULE_localVariableDeclarationStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1492;
                this.localVariableDeclaration();
                this.state = 1493;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.localVariableDeclaration = function () {
        var _localctx = new LocalVariableDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, Java8Parser.RULE_localVariableDeclaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1498;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1495;
                            this.variableModifier();
                        }
                    }
                    this.state = 1500;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1501;
                this.unannType();
                this.state = 1502;
                this.variableDeclaratorList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.statement = function () {
        var _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 260, Java8Parser.RULE_statement);
        try {
            this.state = 1510;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 155, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1504;
                        this.statementWithoutTrailingSubstatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1505;
                        this.labeledStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1506;
                        this.ifThenStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1507;
                        this.ifThenElseStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1508;
                        this.whileStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1509;
                        this.forStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.statementNoShortIf = function () {
        var _localctx = new StatementNoShortIfContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, Java8Parser.RULE_statementNoShortIf);
        try {
            this.state = 1517;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 156, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1512;
                        this.statementWithoutTrailingSubstatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1513;
                        this.labeledStatementNoShortIf();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1514;
                        this.ifThenElseStatementNoShortIf();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1515;
                        this.whileStatementNoShortIf();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1516;
                        this.forStatementNoShortIf();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.statementWithoutTrailingSubstatement = function () {
        var _localctx = new StatementWithoutTrailingSubstatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, Java8Parser.RULE_statementWithoutTrailingSubstatement);
        try {
            this.state = 1531;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.LBRACE:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1519;
                        this.block();
                    }
                    break;
                case Java8Parser.SEMI:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1520;
                        this.emptyStatement();
                    }
                    break;
                case Java8Parser.BOOLEAN:
                case Java8Parser.BYTE:
                case Java8Parser.CHAR:
                case Java8Parser.DOUBLE:
                case Java8Parser.FLOAT:
                case Java8Parser.INT:
                case Java8Parser.LONG:
                case Java8Parser.NEW:
                case Java8Parser.SHORT:
                case Java8Parser.SUPER:
                case Java8Parser.THIS:
                case Java8Parser.VOID:
                case Java8Parser.IntegerLiteral:
                case Java8Parser.FloatingPointLiteral:
                case Java8Parser.BooleanLiteral:
                case Java8Parser.CharacterLiteral:
                case Java8Parser.StringLiteral:
                case Java8Parser.NullLiteral:
                case Java8Parser.LPAREN:
                case Java8Parser.INC:
                case Java8Parser.DEC:
                case Java8Parser.Identifier:
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1521;
                        this.expressionStatement();
                    }
                    break;
                case Java8Parser.ASSERT:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1522;
                        this.assertStatement();
                    }
                    break;
                case Java8Parser.SWITCH:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1523;
                        this.switchStatement();
                    }
                    break;
                case Java8Parser.DO:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1524;
                        this.doStatement();
                    }
                    break;
                case Java8Parser.BREAK:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1525;
                        this.breakStatement();
                    }
                    break;
                case Java8Parser.CONTINUE:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1526;
                        this.continueStatement();
                    }
                    break;
                case Java8Parser.RETURN:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1527;
                        this.returnStatement();
                    }
                    break;
                case Java8Parser.SYNCHRONIZED:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1528;
                        this.synchronizedStatement();
                    }
                    break;
                case Java8Parser.THROW:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1529;
                        this.throwStatement();
                    }
                    break;
                case Java8Parser.TRY:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1530;
                        this.tryStatement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.emptyStatement = function () {
        var _localctx = new EmptyStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 266, Java8Parser.RULE_emptyStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1533;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.labeledStatement = function () {
        var _localctx = new LabeledStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 268, Java8Parser.RULE_labeledStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1535;
                this.match(Java8Parser.Identifier);
                this.state = 1536;
                this.match(Java8Parser.COLON);
                this.state = 1537;
                this.statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.labeledStatementNoShortIf = function () {
        var _localctx = new LabeledStatementNoShortIfContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, Java8Parser.RULE_labeledStatementNoShortIf);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1539;
                this.match(Java8Parser.Identifier);
                this.state = 1540;
                this.match(Java8Parser.COLON);
                this.state = 1541;
                this.statementNoShortIf();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.expressionStatement = function () {
        var _localctx = new ExpressionStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, Java8Parser.RULE_expressionStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1543;
                this.statementExpression();
                this.state = 1544;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.statementExpression = function () {
        var _localctx = new StatementExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 274, Java8Parser.RULE_statementExpression);
        try {
            this.state = 1553;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 158, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1546;
                        this.assignment();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1547;
                        this.preIncrementExpression();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1548;
                        this.preDecrementExpression();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1549;
                        this.postIncrementExpression();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1550;
                        this.postDecrementExpression();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1551;
                        this.methodInvocation();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1552;
                        this.classInstanceCreationExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.ifThenStatement = function () {
        var _localctx = new IfThenStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 276, Java8Parser.RULE_ifThenStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1555;
                this.match(Java8Parser.IF);
                this.state = 1556;
                this.match(Java8Parser.LPAREN);
                this.state = 1557;
                this.expression();
                this.state = 1558;
                this.match(Java8Parser.RPAREN);
                this.state = 1559;
                this.statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.ifThenElseStatement = function () {
        var _localctx = new IfThenElseStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 278, Java8Parser.RULE_ifThenElseStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1561;
                this.match(Java8Parser.IF);
                this.state = 1562;
                this.match(Java8Parser.LPAREN);
                this.state = 1563;
                this.expression();
                this.state = 1564;
                this.match(Java8Parser.RPAREN);
                this.state = 1565;
                this.statementNoShortIf();
                this.state = 1566;
                this.match(Java8Parser.ELSE);
                this.state = 1567;
                this.statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.ifThenElseStatementNoShortIf = function () {
        var _localctx = new IfThenElseStatementNoShortIfContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, Java8Parser.RULE_ifThenElseStatementNoShortIf);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1569;
                this.match(Java8Parser.IF);
                this.state = 1570;
                this.match(Java8Parser.LPAREN);
                this.state = 1571;
                this.expression();
                this.state = 1572;
                this.match(Java8Parser.RPAREN);
                this.state = 1573;
                this.statementNoShortIf();
                this.state = 1574;
                this.match(Java8Parser.ELSE);
                this.state = 1575;
                this.statementNoShortIf();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.assertStatement = function () {
        var _localctx = new AssertStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, Java8Parser.RULE_assertStatement);
        try {
            this.state = 1587;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 159, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1577;
                        this.match(Java8Parser.ASSERT);
                        this.state = 1578;
                        this.expression();
                        this.state = 1579;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1581;
                        this.match(Java8Parser.ASSERT);
                        this.state = 1582;
                        this.expression();
                        this.state = 1583;
                        this.match(Java8Parser.COLON);
                        this.state = 1584;
                        this.expression();
                        this.state = 1585;
                        this.match(Java8Parser.SEMI);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.switchStatement = function () {
        var _localctx = new SwitchStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, Java8Parser.RULE_switchStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1589;
                this.match(Java8Parser.SWITCH);
                this.state = 1590;
                this.match(Java8Parser.LPAREN);
                this.state = 1591;
                this.expression();
                this.state = 1592;
                this.match(Java8Parser.RPAREN);
                this.state = 1593;
                this.switchBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.switchBlock = function () {
        var _localctx = new SwitchBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, Java8Parser.RULE_switchBlock);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1595;
                this.match(Java8Parser.LBRACE);
                this.state = 1599;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 160, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1596;
                                this.switchBlockStatementGroup();
                            }
                        }
                    }
                    this.state = 1601;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 160, this._ctx);
                }
                this.state = 1605;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.CASE || _la === Java8Parser.DEFAULT) {
                    {
                        {
                            this.state = 1602;
                            this.switchLabel();
                        }
                    }
                    this.state = 1607;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1608;
                this.match(Java8Parser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.switchBlockStatementGroup = function () {
        var _localctx = new SwitchBlockStatementGroupContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, Java8Parser.RULE_switchBlockStatementGroup);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1610;
                this.switchLabels();
                this.state = 1611;
                this.blockStatements();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.switchLabels = function () {
        var _localctx = new SwitchLabelsContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, Java8Parser.RULE_switchLabels);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1613;
                this.switchLabel();
                this.state = 1617;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.CASE || _la === Java8Parser.DEFAULT) {
                    {
                        {
                            this.state = 1614;
                            this.switchLabel();
                        }
                    }
                    this.state = 1619;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.switchLabel = function () {
        var _localctx = new SwitchLabelContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, Java8Parser.RULE_switchLabel);
        try {
            this.state = 1630;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 163, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1620;
                        this.match(Java8Parser.CASE);
                        this.state = 1621;
                        this.constantExpression();
                        this.state = 1622;
                        this.match(Java8Parser.COLON);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1624;
                        this.match(Java8Parser.CASE);
                        this.state = 1625;
                        this.enumConstantName();
                        this.state = 1626;
                        this.match(Java8Parser.COLON);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1628;
                        this.match(Java8Parser.DEFAULT);
                        this.state = 1629;
                        this.match(Java8Parser.COLON);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.enumConstantName = function () {
        var _localctx = new EnumConstantNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 294, Java8Parser.RULE_enumConstantName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1632;
                this.match(Java8Parser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.whileStatement = function () {
        var _localctx = new WhileStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 296, Java8Parser.RULE_whileStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1634;
                this.match(Java8Parser.WHILE);
                this.state = 1635;
                this.match(Java8Parser.LPAREN);
                this.state = 1636;
                this.expression();
                this.state = 1637;
                this.match(Java8Parser.RPAREN);
                this.state = 1638;
                this.statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.whileStatementNoShortIf = function () {
        var _localctx = new WhileStatementNoShortIfContext(this._ctx, this.state);
        this.enterRule(_localctx, 298, Java8Parser.RULE_whileStatementNoShortIf);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1640;
                this.match(Java8Parser.WHILE);
                this.state = 1641;
                this.match(Java8Parser.LPAREN);
                this.state = 1642;
                this.expression();
                this.state = 1643;
                this.match(Java8Parser.RPAREN);
                this.state = 1644;
                this.statementNoShortIf();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.doStatement = function () {
        var _localctx = new DoStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 300, Java8Parser.RULE_doStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1646;
                this.match(Java8Parser.DO);
                this.state = 1647;
                this.statement();
                this.state = 1648;
                this.match(Java8Parser.WHILE);
                this.state = 1649;
                this.match(Java8Parser.LPAREN);
                this.state = 1650;
                this.expression();
                this.state = 1651;
                this.match(Java8Parser.RPAREN);
                this.state = 1652;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.forStatement = function () {
        var _localctx = new ForStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 302, Java8Parser.RULE_forStatement);
        try {
            this.state = 1656;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 164, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1654;
                        this.basicForStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1655;
                        this.enhancedForStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.forStatementNoShortIf = function () {
        var _localctx = new ForStatementNoShortIfContext(this._ctx, this.state);
        this.enterRule(_localctx, 304, Java8Parser.RULE_forStatementNoShortIf);
        try {
            this.state = 1660;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 165, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1658;
                        this.basicForStatementNoShortIf();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1659;
                        this.enhancedForStatementNoShortIf();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.basicForStatement = function () {
        var _localctx = new BasicForStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 306, Java8Parser.RULE_basicForStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1662;
                this.match(Java8Parser.FOR);
                this.state = 1663;
                this.match(Java8Parser.LPAREN);
                this.state = 1665;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
                    {
                        this.state = 1664;
                        this.forInit();
                    }
                }
                this.state = 1667;
                this.match(Java8Parser.SEMI);
                this.state = 1669;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        this.state = 1668;
                        this.expression();
                    }
                }
                this.state = 1671;
                this.match(Java8Parser.SEMI);
                this.state = 1673;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
                    {
                        this.state = 1672;
                        this.forUpdate();
                    }
                }
                this.state = 1675;
                this.match(Java8Parser.RPAREN);
                this.state = 1676;
                this.statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.basicForStatementNoShortIf = function () {
        var _localctx = new BasicForStatementNoShortIfContext(this._ctx, this.state);
        this.enterRule(_localctx, 308, Java8Parser.RULE_basicForStatementNoShortIf);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1678;
                this.match(Java8Parser.FOR);
                this.state = 1679;
                this.match(Java8Parser.LPAREN);
                this.state = 1681;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
                    {
                        this.state = 1680;
                        this.forInit();
                    }
                }
                this.state = 1683;
                this.match(Java8Parser.SEMI);
                this.state = 1685;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        this.state = 1684;
                        this.expression();
                    }
                }
                this.state = 1687;
                this.match(Java8Parser.SEMI);
                this.state = 1689;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
                    {
                        this.state = 1688;
                        this.forUpdate();
                    }
                }
                this.state = 1691;
                this.match(Java8Parser.RPAREN);
                this.state = 1692;
                this.statementNoShortIf();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.forInit = function () {
        var _localctx = new ForInitContext(this._ctx, this.state);
        this.enterRule(_localctx, 310, Java8Parser.RULE_forInit);
        try {
            this.state = 1696;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 172, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1694;
                        this.statementExpressionList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1695;
                        this.localVariableDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.forUpdate = function () {
        var _localctx = new ForUpdateContext(this._ctx, this.state);
        this.enterRule(_localctx, 312, Java8Parser.RULE_forUpdate);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1698;
                this.statementExpressionList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.statementExpressionList = function () {
        var _localctx = new StatementExpressionListContext(this._ctx, this.state);
        this.enterRule(_localctx, 314, Java8Parser.RULE_statementExpressionList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1700;
                this.statementExpression();
                this.state = 1705;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.COMMA) {
                    {
                        {
                            this.state = 1701;
                            this.match(Java8Parser.COMMA);
                            this.state = 1702;
                            this.statementExpression();
                        }
                    }
                    this.state = 1707;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.enhancedForStatement = function () {
        var _localctx = new EnhancedForStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 316, Java8Parser.RULE_enhancedForStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1708;
                this.match(Java8Parser.FOR);
                this.state = 1709;
                this.match(Java8Parser.LPAREN);
                this.state = 1713;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1710;
                            this.variableModifier();
                        }
                    }
                    this.state = 1715;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1716;
                this.unannType();
                this.state = 1717;
                this.variableDeclaratorId();
                this.state = 1718;
                this.match(Java8Parser.COLON);
                this.state = 1719;
                this.expression();
                this.state = 1720;
                this.match(Java8Parser.RPAREN);
                this.state = 1721;
                this.statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.enhancedForStatementNoShortIf = function () {
        var _localctx = new EnhancedForStatementNoShortIfContext(this._ctx, this.state);
        this.enterRule(_localctx, 318, Java8Parser.RULE_enhancedForStatementNoShortIf);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1723;
                this.match(Java8Parser.FOR);
                this.state = 1724;
                this.match(Java8Parser.LPAREN);
                this.state = 1728;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1725;
                            this.variableModifier();
                        }
                    }
                    this.state = 1730;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1731;
                this.unannType();
                this.state = 1732;
                this.variableDeclaratorId();
                this.state = 1733;
                this.match(Java8Parser.COLON);
                this.state = 1734;
                this.expression();
                this.state = 1735;
                this.match(Java8Parser.RPAREN);
                this.state = 1736;
                this.statementNoShortIf();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.breakStatement = function () {
        var _localctx = new BreakStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 320, Java8Parser.RULE_breakStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1738;
                this.match(Java8Parser.BREAK);
                this.state = 1740;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.Identifier) {
                    {
                        this.state = 1739;
                        this.match(Java8Parser.Identifier);
                    }
                }
                this.state = 1742;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.continueStatement = function () {
        var _localctx = new ContinueStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 322, Java8Parser.RULE_continueStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1744;
                this.match(Java8Parser.CONTINUE);
                this.state = 1746;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.Identifier) {
                    {
                        this.state = 1745;
                        this.match(Java8Parser.Identifier);
                    }
                }
                this.state = 1748;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.returnStatement = function () {
        var _localctx = new ReturnStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 324, Java8Parser.RULE_returnStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1750;
                this.match(Java8Parser.RETURN);
                this.state = 1752;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        this.state = 1751;
                        this.expression();
                    }
                }
                this.state = 1754;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.throwStatement = function () {
        var _localctx = new ThrowStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 326, Java8Parser.RULE_throwStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1756;
                this.match(Java8Parser.THROW);
                this.state = 1757;
                this.expression();
                this.state = 1758;
                this.match(Java8Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.synchronizedStatement = function () {
        var _localctx = new SynchronizedStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 328, Java8Parser.RULE_synchronizedStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1760;
                this.match(Java8Parser.SYNCHRONIZED);
                this.state = 1761;
                this.match(Java8Parser.LPAREN);
                this.state = 1762;
                this.expression();
                this.state = 1763;
                this.match(Java8Parser.RPAREN);
                this.state = 1764;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.tryStatement = function () {
        var _localctx = new TryStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 330, Java8Parser.RULE_tryStatement);
        var _la;
        try {
            this.state = 1778;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 180, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1766;
                        this.match(Java8Parser.TRY);
                        this.state = 1767;
                        this.block();
                        this.state = 1768;
                        this.catches();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1770;
                        this.match(Java8Parser.TRY);
                        this.state = 1771;
                        this.block();
                        this.state = 1773;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.CATCH) {
                            {
                                this.state = 1772;
                                this.catches();
                            }
                        }
                        this.state = 1775;
                        this.finally_();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1777;
                        this.tryWithResourcesStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.catches = function () {
        var _localctx = new CatchesContext(this._ctx, this.state);
        this.enterRule(_localctx, 332, Java8Parser.RULE_catches);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1780;
                this.catchClause();
                this.state = 1784;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.CATCH) {
                    {
                        {
                            this.state = 1781;
                            this.catchClause();
                        }
                    }
                    this.state = 1786;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.catchClause = function () {
        var _localctx = new CatchClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 334, Java8Parser.RULE_catchClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1787;
                this.match(Java8Parser.CATCH);
                this.state = 1788;
                this.match(Java8Parser.LPAREN);
                this.state = 1789;
                this.catchFormalParameter();
                this.state = 1790;
                this.match(Java8Parser.RPAREN);
                this.state = 1791;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.catchFormalParameter = function () {
        var _localctx = new CatchFormalParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 336, Java8Parser.RULE_catchFormalParameter);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1796;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1793;
                            this.variableModifier();
                        }
                    }
                    this.state = 1798;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1799;
                this.catchType();
                this.state = 1800;
                this.variableDeclaratorId();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.catchType = function () {
        var _localctx = new CatchTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 338, Java8Parser.RULE_catchType);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1802;
                this.unannClassType();
                this.state = 1807;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.BITOR) {
                    {
                        {
                            this.state = 1803;
                            this.match(Java8Parser.BITOR);
                            this.state = 1804;
                            this.classType();
                        }
                    }
                    this.state = 1809;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.finally_ = function () {
        var _localctx = new Finally_Context(this._ctx, this.state);
        this.enterRule(_localctx, 340, Java8Parser.RULE_finally_);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1810;
                this.match(Java8Parser.FINALLY);
                this.state = 1811;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.tryWithResourcesStatement = function () {
        var _localctx = new TryWithResourcesStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 342, Java8Parser.RULE_tryWithResourcesStatement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1813;
                this.match(Java8Parser.TRY);
                this.state = 1814;
                this.resourceSpecification();
                this.state = 1815;
                this.block();
                this.state = 1817;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.CATCH) {
                    {
                        this.state = 1816;
                        this.catches();
                    }
                }
                this.state = 1820;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.FINALLY) {
                    {
                        this.state = 1819;
                        this.finally_();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.resourceSpecification = function () {
        var _localctx = new ResourceSpecificationContext(this._ctx, this.state);
        this.enterRule(_localctx, 344, Java8Parser.RULE_resourceSpecification);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1822;
                this.match(Java8Parser.LPAREN);
                this.state = 1823;
                this.resourceList();
                this.state = 1825;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.SEMI) {
                    {
                        this.state = 1824;
                        this.match(Java8Parser.SEMI);
                    }
                }
                this.state = 1827;
                this.match(Java8Parser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.resourceList = function () {
        var _localctx = new ResourceListContext(this._ctx, this.state);
        this.enterRule(_localctx, 346, Java8Parser.RULE_resourceList);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1829;
                this.resource();
                this.state = 1834;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 187, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1830;
                                this.match(Java8Parser.SEMI);
                                this.state = 1831;
                                this.resource();
                            }
                        }
                    }
                    this.state = 1836;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 187, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.resource = function () {
        var _localctx = new ResourceContext(this._ctx, this.state);
        this.enterRule(_localctx, 348, Java8Parser.RULE_resource);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1840;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {
                    {
                        {
                            this.state = 1837;
                            this.variableModifier();
                        }
                    }
                    this.state = 1842;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1843;
                this.unannType();
                this.state = 1844;
                this.variableDeclaratorId();
                this.state = 1845;
                this.match(Java8Parser.ASSIGN);
                this.state = 1846;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primary = function () {
        var _localctx = new PrimaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 350, Java8Parser.RULE_primary);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1850;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 189, this._ctx)) {
                    case 1:
                        {
                            this.state = 1848;
                            this.primaryNoNewArray_lfno_primary();
                        }
                        break;
                    case 2:
                        {
                            this.state = 1849;
                            this.arrayCreationExpression();
                        }
                        break;
                }
                this.state = 1855;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1852;
                                this.primaryNoNewArray_lf_primary();
                            }
                        }
                    }
                    this.state = 1857;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primaryNoNewArray = function () {
        var _localctx = new PrimaryNoNewArrayContext(this._ctx, this.state);
        this.enterRule(_localctx, 352, Java8Parser.RULE_primaryNoNewArray);
        var _la;
        try {
            this.state = 1887;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 192, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1858;
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1859;
                        this.typeName();
                        this.state = 1864;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.LBRACK) {
                            {
                                {
                                    this.state = 1860;
                                    this.match(Java8Parser.LBRACK);
                                    this.state = 1861;
                                    this.match(Java8Parser.RBRACK);
                                }
                            }
                            this.state = 1866;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1867;
                        this.match(Java8Parser.DOT);
                        this.state = 1868;
                        this.match(Java8Parser.CLASS);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1870;
                        this.match(Java8Parser.VOID);
                        this.state = 1871;
                        this.match(Java8Parser.DOT);
                        this.state = 1872;
                        this.match(Java8Parser.CLASS);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1873;
                        this.match(Java8Parser.THIS);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1874;
                        this.typeName();
                        this.state = 1875;
                        this.match(Java8Parser.DOT);
                        this.state = 1876;
                        this.match(Java8Parser.THIS);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1878;
                        this.match(Java8Parser.LPAREN);
                        this.state = 1879;
                        this.expression();
                        this.state = 1880;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1882;
                        this.classInstanceCreationExpression();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1883;
                        this.fieldAccess();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1884;
                        this.arrayAccess();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1885;
                        this.methodInvocation();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1886;
                        this.methodReference();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primaryNoNewArray_lf_arrayAccess = function () {
        var _localctx = new PrimaryNoNewArray_lf_arrayAccessContext(this._ctx, this.state);
        this.enterRule(_localctx, 354, Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess);
        try {
            this.enterOuterAlt(_localctx, 1);
            // tslint:disable-next-line:no-empty
            {
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primaryNoNewArray_lfno_arrayAccess = function () {
        var _localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(this._ctx, this.state);
        this.enterRule(_localctx, 356, Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess);
        var _la;
        try {
            this.state = 1919;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 194, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1891;
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1892;
                        this.typeName();
                        this.state = 1897;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.LBRACK) {
                            {
                                {
                                    this.state = 1893;
                                    this.match(Java8Parser.LBRACK);
                                    this.state = 1894;
                                    this.match(Java8Parser.RBRACK);
                                }
                            }
                            this.state = 1899;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1900;
                        this.match(Java8Parser.DOT);
                        this.state = 1901;
                        this.match(Java8Parser.CLASS);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1903;
                        this.match(Java8Parser.VOID);
                        this.state = 1904;
                        this.match(Java8Parser.DOT);
                        this.state = 1905;
                        this.match(Java8Parser.CLASS);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1906;
                        this.match(Java8Parser.THIS);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1907;
                        this.typeName();
                        this.state = 1908;
                        this.match(Java8Parser.DOT);
                        this.state = 1909;
                        this.match(Java8Parser.THIS);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1911;
                        this.match(Java8Parser.LPAREN);
                        this.state = 1912;
                        this.expression();
                        this.state = 1913;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1915;
                        this.classInstanceCreationExpression();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1916;
                        this.fieldAccess();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1917;
                        this.methodInvocation();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1918;
                        this.methodReference();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primaryNoNewArray_lf_primary = function () {
        var _localctx = new PrimaryNoNewArray_lf_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 358, Java8Parser.RULE_primaryNoNewArray_lf_primary);
        try {
            this.state = 1926;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 195, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1921;
                        this.classInstanceCreationExpression_lf_primary();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1922;
                        this.fieldAccess_lf_primary();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1923;
                        this.arrayAccess_lf_primary();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1924;
                        this.methodInvocation_lf_primary();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1925;
                        this.methodReference_lf_primary();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = function () {
        var _localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 360, Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);
        try {
            this.enterOuterAlt(_localctx, 1);
            // tslint:disable-next-line:no-empty
            {
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = function () {
        var _localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 362, Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);
        try {
            this.state = 1934;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 196, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1930;
                        this.classInstanceCreationExpression_lf_primary();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1931;
                        this.fieldAccess_lf_primary();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1932;
                        this.methodInvocation_lf_primary();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1933;
                        this.methodReference_lf_primary();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primaryNoNewArray_lfno_primary = function () {
        var _localctx = new PrimaryNoNewArray_lfno_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 364, Java8Parser.RULE_primaryNoNewArray_lfno_primary);
        var _la;
        try {
            this.state = 1976;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 199, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1936;
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1937;
                        this.typeName();
                        this.state = 1942;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.LBRACK) {
                            {
                                {
                                    this.state = 1938;
                                    this.match(Java8Parser.LBRACK);
                                    this.state = 1939;
                                    this.match(Java8Parser.RBRACK);
                                }
                            }
                            this.state = 1944;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1945;
                        this.match(Java8Parser.DOT);
                        this.state = 1946;
                        this.match(Java8Parser.CLASS);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1948;
                        this.unannPrimitiveType();
                        this.state = 1953;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.LBRACK) {
                            {
                                {
                                    this.state = 1949;
                                    this.match(Java8Parser.LBRACK);
                                    this.state = 1950;
                                    this.match(Java8Parser.RBRACK);
                                }
                            }
                            this.state = 1955;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1956;
                        this.match(Java8Parser.DOT);
                        this.state = 1957;
                        this.match(Java8Parser.CLASS);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1959;
                        this.match(Java8Parser.VOID);
                        this.state = 1960;
                        this.match(Java8Parser.DOT);
                        this.state = 1961;
                        this.match(Java8Parser.CLASS);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1962;
                        this.match(Java8Parser.THIS);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1963;
                        this.typeName();
                        this.state = 1964;
                        this.match(Java8Parser.DOT);
                        this.state = 1965;
                        this.match(Java8Parser.THIS);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1967;
                        this.match(Java8Parser.LPAREN);
                        this.state = 1968;
                        this.expression();
                        this.state = 1969;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1971;
                        this.classInstanceCreationExpression_lfno_primary();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1972;
                        this.fieldAccess_lfno_primary();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1973;
                        this.arrayAccess_lfno_primary();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1974;
                        this.methodInvocation_lfno_primary();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1975;
                        this.methodReference_lfno_primary();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = function () {
        var _localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 366, Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);
        try {
            this.enterOuterAlt(_localctx, 1);
            // tslint:disable-next-line:no-empty
            {
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = function () {
        var _localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 368, Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
        var _la;
        try {
            this.state = 2019;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 202, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1980;
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1981;
                        this.typeName();
                        this.state = 1986;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.LBRACK) {
                            {
                                {
                                    this.state = 1982;
                                    this.match(Java8Parser.LBRACK);
                                    this.state = 1983;
                                    this.match(Java8Parser.RBRACK);
                                }
                            }
                            this.state = 1988;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1989;
                        this.match(Java8Parser.DOT);
                        this.state = 1990;
                        this.match(Java8Parser.CLASS);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1992;
                        this.unannPrimitiveType();
                        this.state = 1997;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.LBRACK) {
                            {
                                {
                                    this.state = 1993;
                                    this.match(Java8Parser.LBRACK);
                                    this.state = 1994;
                                    this.match(Java8Parser.RBRACK);
                                }
                            }
                            this.state = 1999;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2000;
                        this.match(Java8Parser.DOT);
                        this.state = 2001;
                        this.match(Java8Parser.CLASS);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2003;
                        this.match(Java8Parser.VOID);
                        this.state = 2004;
                        this.match(Java8Parser.DOT);
                        this.state = 2005;
                        this.match(Java8Parser.CLASS);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2006;
                        this.match(Java8Parser.THIS);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2007;
                        this.typeName();
                        this.state = 2008;
                        this.match(Java8Parser.DOT);
                        this.state = 2009;
                        this.match(Java8Parser.THIS);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2011;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2012;
                        this.expression();
                        this.state = 2013;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 2015;
                        this.classInstanceCreationExpression_lfno_primary();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 2016;
                        this.fieldAccess_lfno_primary();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 2017;
                        this.methodInvocation_lfno_primary();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 2018;
                        this.methodReference_lfno_primary();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classInstanceCreationExpression = function () {
        var _localctx = new ClassInstanceCreationExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 370, Java8Parser.RULE_classInstanceCreationExpression);
        var _la;
        try {
            this.state = 2104;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 220, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2021;
                        this.match(Java8Parser.NEW);
                        this.state = 2023;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2022;
                                this.typeArguments();
                            }
                        }
                        this.state = 2028;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 2025;
                                    this.annotation();
                                }
                            }
                            this.state = 2030;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2031;
                        this.match(Java8Parser.Identifier);
                        this.state = 2042;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.DOT) {
                            {
                                {
                                    this.state = 2032;
                                    this.match(Java8Parser.DOT);
                                    this.state = 2036;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === Java8Parser.AT) {
                                        {
                                            {
                                                this.state = 2033;
                                                this.annotation();
                                            }
                                        }
                                        this.state = 2038;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 2039;
                                    this.match(Java8Parser.Identifier);
                                }
                            }
                            this.state = 2044;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2046;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2045;
                                this.typeArgumentsOrDiamond();
                            }
                        }
                        this.state = 2048;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2050;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2049;
                                this.argumentList();
                            }
                        }
                        this.state = 2052;
                        this.match(Java8Parser.RPAREN);
                        this.state = 2054;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LBRACE) {
                            {
                                this.state = 2053;
                                this.classBody();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2056;
                        this.expressionName();
                        this.state = 2057;
                        this.match(Java8Parser.DOT);
                        this.state = 2058;
                        this.match(Java8Parser.NEW);
                        this.state = 2060;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2059;
                                this.typeArguments();
                            }
                        }
                        this.state = 2065;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 2062;
                                    this.annotation();
                                }
                            }
                            this.state = 2067;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2068;
                        this.match(Java8Parser.Identifier);
                        this.state = 2070;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2069;
                                this.typeArgumentsOrDiamond();
                            }
                        }
                        this.state = 2072;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2074;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2073;
                                this.argumentList();
                            }
                        }
                        this.state = 2076;
                        this.match(Java8Parser.RPAREN);
                        this.state = 2078;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LBRACE) {
                            {
                                this.state = 2077;
                                this.classBody();
                            }
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2080;
                        this.primary();
                        this.state = 2081;
                        this.match(Java8Parser.DOT);
                        this.state = 2082;
                        this.match(Java8Parser.NEW);
                        this.state = 2084;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2083;
                                this.typeArguments();
                            }
                        }
                        this.state = 2089;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 2086;
                                    this.annotation();
                                }
                            }
                            this.state = 2091;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2092;
                        this.match(Java8Parser.Identifier);
                        this.state = 2094;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2093;
                                this.typeArgumentsOrDiamond();
                            }
                        }
                        this.state = 2096;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2098;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2097;
                                this.argumentList();
                            }
                        }
                        this.state = 2100;
                        this.match(Java8Parser.RPAREN);
                        this.state = 2102;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LBRACE) {
                            {
                                this.state = 2101;
                                this.classBody();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classInstanceCreationExpression_lf_primary = function () {
        var _localctx = new ClassInstanceCreationExpression_lf_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 372, Java8Parser.RULE_classInstanceCreationExpression_lf_primary);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2106;
                this.match(Java8Parser.DOT);
                this.state = 2107;
                this.match(Java8Parser.NEW);
                this.state = 2109;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LT) {
                    {
                        this.state = 2108;
                        this.typeArguments();
                    }
                }
                this.state = 2114;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 2111;
                            this.annotation();
                        }
                    }
                    this.state = 2116;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2117;
                this.match(Java8Parser.Identifier);
                this.state = 2119;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LT) {
                    {
                        this.state = 2118;
                        this.typeArgumentsOrDiamond();
                    }
                }
                this.state = 2121;
                this.match(Java8Parser.LPAREN);
                this.state = 2123;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        this.state = 2122;
                        this.argumentList();
                    }
                }
                this.state = 2125;
                this.match(Java8Parser.RPAREN);
                this.state = 2127;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 225, this._ctx)) {
                    case 1:
                        {
                            this.state = 2126;
                            this.classBody();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.classInstanceCreationExpression_lfno_primary = function () {
        var _localctx = new ClassInstanceCreationExpression_lfno_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 374, Java8Parser.RULE_classInstanceCreationExpression_lfno_primary);
        var _la;
        try {
            this.state = 2188;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.NEW:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2129;
                        this.match(Java8Parser.NEW);
                        this.state = 2131;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2130;
                                this.typeArguments();
                            }
                        }
                        this.state = 2136;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 2133;
                                    this.annotation();
                                }
                            }
                            this.state = 2138;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2139;
                        this.match(Java8Parser.Identifier);
                        this.state = 2150;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.DOT) {
                            {
                                {
                                    this.state = 2140;
                                    this.match(Java8Parser.DOT);
                                    this.state = 2144;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === Java8Parser.AT) {
                                        {
                                            {
                                                this.state = 2141;
                                                this.annotation();
                                            }
                                        }
                                        this.state = 2146;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 2147;
                                    this.match(Java8Parser.Identifier);
                                }
                            }
                            this.state = 2152;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2154;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2153;
                                this.typeArgumentsOrDiamond();
                            }
                        }
                        this.state = 2156;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2158;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2157;
                                this.argumentList();
                            }
                        }
                        this.state = 2160;
                        this.match(Java8Parser.RPAREN);
                        this.state = 2162;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 232, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2161;
                                    this.classBody();
                                }
                                break;
                        }
                    }
                    break;
                case Java8Parser.Identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2164;
                        this.expressionName();
                        this.state = 2165;
                        this.match(Java8Parser.DOT);
                        this.state = 2166;
                        this.match(Java8Parser.NEW);
                        this.state = 2168;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2167;
                                this.typeArguments();
                            }
                        }
                        this.state = 2173;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.AT) {
                            {
                                {
                                    this.state = 2170;
                                    this.annotation();
                                }
                            }
                            this.state = 2175;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2176;
                        this.match(Java8Parser.Identifier);
                        this.state = 2178;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2177;
                                this.typeArgumentsOrDiamond();
                            }
                        }
                        this.state = 2180;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2182;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2181;
                                this.argumentList();
                            }
                        }
                        this.state = 2184;
                        this.match(Java8Parser.RPAREN);
                        this.state = 2186;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 237, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2185;
                                    this.classBody();
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.typeArgumentsOrDiamond = function () {
        var _localctx = new TypeArgumentsOrDiamondContext(this._ctx, this.state);
        this.enterRule(_localctx, 376, Java8Parser.RULE_typeArgumentsOrDiamond);
        try {
            this.state = 2193;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 239, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2190;
                        this.typeArguments();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2191;
                        this.match(Java8Parser.LT);
                        this.state = 2192;
                        this.match(Java8Parser.GT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.fieldAccess = function () {
        var _localctx = new FieldAccessContext(this._ctx, this.state);
        this.enterRule(_localctx, 378, Java8Parser.RULE_fieldAccess);
        try {
            this.state = 2208;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 240, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2195;
                        this.primary();
                        this.state = 2196;
                        this.match(Java8Parser.DOT);
                        this.state = 2197;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2199;
                        this.match(Java8Parser.SUPER);
                        this.state = 2200;
                        this.match(Java8Parser.DOT);
                        this.state = 2201;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2202;
                        this.typeName();
                        this.state = 2203;
                        this.match(Java8Parser.DOT);
                        this.state = 2204;
                        this.match(Java8Parser.SUPER);
                        this.state = 2205;
                        this.match(Java8Parser.DOT);
                        this.state = 2206;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.fieldAccess_lf_primary = function () {
        var _localctx = new FieldAccess_lf_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 380, Java8Parser.RULE_fieldAccess_lf_primary);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2210;
                this.match(Java8Parser.DOT);
                this.state = 2211;
                this.match(Java8Parser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.fieldAccess_lfno_primary = function () {
        var _localctx = new FieldAccess_lfno_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 382, Java8Parser.RULE_fieldAccess_lfno_primary);
        try {
            this.state = 2222;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.SUPER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2213;
                        this.match(Java8Parser.SUPER);
                        this.state = 2214;
                        this.match(Java8Parser.DOT);
                        this.state = 2215;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case Java8Parser.Identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2216;
                        this.typeName();
                        this.state = 2217;
                        this.match(Java8Parser.DOT);
                        this.state = 2218;
                        this.match(Java8Parser.SUPER);
                        this.state = 2219;
                        this.match(Java8Parser.DOT);
                        this.state = 2220;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.arrayAccess = function () {
        var _localctx = new ArrayAccessContext(this._ctx, this.state);
        this.enterRule(_localctx, 384, Java8Parser.RULE_arrayAccess);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2234;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 242, this._ctx)) {
                    case 1:
                        {
                            this.state = 2224;
                            this.expressionName();
                            this.state = 2225;
                            this.match(Java8Parser.LBRACK);
                            this.state = 2226;
                            this.expression();
                            this.state = 2227;
                            this.match(Java8Parser.RBRACK);
                        }
                        break;
                    case 2:
                        {
                            this.state = 2229;
                            this.primaryNoNewArray_lfno_arrayAccess();
                            this.state = 2230;
                            this.match(Java8Parser.LBRACK);
                            this.state = 2231;
                            this.expression();
                            this.state = 2232;
                            this.match(Java8Parser.RBRACK);
                        }
                        break;
                }
                this.state = 2243;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.LBRACK) {
                    {
                        {
                            this.state = 2236;
                            this.primaryNoNewArray_lf_arrayAccess();
                            this.state = 2237;
                            this.match(Java8Parser.LBRACK);
                            this.state = 2238;
                            this.expression();
                            this.state = 2239;
                            this.match(Java8Parser.RBRACK);
                        }
                    }
                    this.state = 2245;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.arrayAccess_lf_primary = function () {
        var _localctx = new ArrayAccess_lf_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 386, Java8Parser.RULE_arrayAccess_lf_primary);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2246;
                    this.primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
                    this.state = 2247;
                    this.match(Java8Parser.LBRACK);
                    this.state = 2248;
                    this.expression();
                    this.state = 2249;
                    this.match(Java8Parser.RBRACK);
                }
                this.state = 2258;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2251;
                                this.primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
                                this.state = 2252;
                                this.match(Java8Parser.LBRACK);
                                this.state = 2253;
                                this.expression();
                                this.state = 2254;
                                this.match(Java8Parser.RBRACK);
                            }
                        }
                    }
                    this.state = 2260;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.arrayAccess_lfno_primary = function () {
        var _localctx = new ArrayAccess_lfno_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 388, Java8Parser.RULE_arrayAccess_lfno_primary);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2271;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 245, this._ctx)) {
                    case 1:
                        {
                            this.state = 2261;
                            this.expressionName();
                            this.state = 2262;
                            this.match(Java8Parser.LBRACK);
                            this.state = 2263;
                            this.expression();
                            this.state = 2264;
                            this.match(Java8Parser.RBRACK);
                        }
                        break;
                    case 2:
                        {
                            this.state = 2266;
                            this.primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
                            this.state = 2267;
                            this.match(Java8Parser.LBRACK);
                            this.state = 2268;
                            this.expression();
                            this.state = 2269;
                            this.match(Java8Parser.RBRACK);
                        }
                        break;
                }
                this.state = 2280;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2273;
                                this.primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
                                this.state = 2274;
                                this.match(Java8Parser.LBRACK);
                                this.state = 2275;
                                this.expression();
                                this.state = 2276;
                                this.match(Java8Parser.RBRACK);
                            }
                        }
                    }
                    this.state = 2282;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodInvocation = function () {
        var _localctx = new MethodInvocationContext(this._ctx, this.state);
        this.enterRule(_localctx, 390, Java8Parser.RULE_methodInvocation);
        var _la;
        try {
            this.state = 2351;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 258, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2283;
                        this.methodName();
                        this.state = 2284;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2286;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2285;
                                this.argumentList();
                            }
                        }
                        this.state = 2288;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2290;
                        this.typeName();
                        this.state = 2291;
                        this.match(Java8Parser.DOT);
                        this.state = 2293;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2292;
                                this.typeArguments();
                            }
                        }
                        this.state = 2295;
                        this.match(Java8Parser.Identifier);
                        this.state = 2296;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2298;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2297;
                                this.argumentList();
                            }
                        }
                        this.state = 2300;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2302;
                        this.expressionName();
                        this.state = 2303;
                        this.match(Java8Parser.DOT);
                        this.state = 2305;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2304;
                                this.typeArguments();
                            }
                        }
                        this.state = 2307;
                        this.match(Java8Parser.Identifier);
                        this.state = 2308;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2310;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2309;
                                this.argumentList();
                            }
                        }
                        this.state = 2312;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2314;
                        this.primary();
                        this.state = 2315;
                        this.match(Java8Parser.DOT);
                        this.state = 2317;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2316;
                                this.typeArguments();
                            }
                        }
                        this.state = 2319;
                        this.match(Java8Parser.Identifier);
                        this.state = 2320;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2322;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2321;
                                this.argumentList();
                            }
                        }
                        this.state = 2324;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2326;
                        this.match(Java8Parser.SUPER);
                        this.state = 2327;
                        this.match(Java8Parser.DOT);
                        this.state = 2329;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2328;
                                this.typeArguments();
                            }
                        }
                        this.state = 2331;
                        this.match(Java8Parser.Identifier);
                        this.state = 2332;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2334;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2333;
                                this.argumentList();
                            }
                        }
                        this.state = 2336;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2337;
                        this.typeName();
                        this.state = 2338;
                        this.match(Java8Parser.DOT);
                        this.state = 2339;
                        this.match(Java8Parser.SUPER);
                        this.state = 2340;
                        this.match(Java8Parser.DOT);
                        this.state = 2342;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2341;
                                this.typeArguments();
                            }
                        }
                        this.state = 2344;
                        this.match(Java8Parser.Identifier);
                        this.state = 2345;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2347;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2346;
                                this.argumentList();
                            }
                        }
                        this.state = 2349;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodInvocation_lf_primary = function () {
        var _localctx = new MethodInvocation_lf_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 392, Java8Parser.RULE_methodInvocation_lf_primary);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2353;
                this.match(Java8Parser.DOT);
                this.state = 2355;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LT) {
                    {
                        this.state = 2354;
                        this.typeArguments();
                    }
                }
                this.state = 2357;
                this.match(Java8Parser.Identifier);
                this.state = 2358;
                this.match(Java8Parser.LPAREN);
                this.state = 2360;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                    {
                        this.state = 2359;
                        this.argumentList();
                    }
                }
                this.state = 2362;
                this.match(Java8Parser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodInvocation_lfno_primary = function () {
        var _localctx = new MethodInvocation_lfno_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 394, Java8Parser.RULE_methodInvocation_lfno_primary);
        var _la;
        try {
            this.state = 2420;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 270, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2364;
                        this.methodName();
                        this.state = 2365;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2367;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2366;
                                this.argumentList();
                            }
                        }
                        this.state = 2369;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2371;
                        this.typeName();
                        this.state = 2372;
                        this.match(Java8Parser.DOT);
                        this.state = 2374;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2373;
                                this.typeArguments();
                            }
                        }
                        this.state = 2376;
                        this.match(Java8Parser.Identifier);
                        this.state = 2377;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2379;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2378;
                                this.argumentList();
                            }
                        }
                        this.state = 2381;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2383;
                        this.expressionName();
                        this.state = 2384;
                        this.match(Java8Parser.DOT);
                        this.state = 2386;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2385;
                                this.typeArguments();
                            }
                        }
                        this.state = 2388;
                        this.match(Java8Parser.Identifier);
                        this.state = 2389;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2391;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2390;
                                this.argumentList();
                            }
                        }
                        this.state = 2393;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2395;
                        this.match(Java8Parser.SUPER);
                        this.state = 2396;
                        this.match(Java8Parser.DOT);
                        this.state = 2398;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2397;
                                this.typeArguments();
                            }
                        }
                        this.state = 2400;
                        this.match(Java8Parser.Identifier);
                        this.state = 2401;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2403;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2402;
                                this.argumentList();
                            }
                        }
                        this.state = 2405;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2406;
                        this.typeName();
                        this.state = 2407;
                        this.match(Java8Parser.DOT);
                        this.state = 2408;
                        this.match(Java8Parser.SUPER);
                        this.state = 2409;
                        this.match(Java8Parser.DOT);
                        this.state = 2411;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2410;
                                this.typeArguments();
                            }
                        }
                        this.state = 2413;
                        this.match(Java8Parser.Identifier);
                        this.state = 2414;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2416;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2415;
                                this.argumentList();
                            }
                        }
                        this.state = 2418;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.argumentList = function () {
        var _localctx = new ArgumentListContext(this._ctx, this.state);
        this.enterRule(_localctx, 396, Java8Parser.RULE_argumentList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2422;
                this.expression();
                this.state = 2427;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.COMMA) {
                    {
                        {
                            this.state = 2423;
                            this.match(Java8Parser.COMMA);
                            this.state = 2424;
                            this.expression();
                        }
                    }
                    this.state = 2429;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodReference = function () {
        var _localctx = new MethodReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 398, Java8Parser.RULE_methodReference);
        var _la;
        try {
            this.state = 2477;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 278, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2430;
                        this.expressionName();
                        this.state = 2431;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2433;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2432;
                                this.typeArguments();
                            }
                        }
                        this.state = 2435;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2437;
                        this.referenceType();
                        this.state = 2438;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2440;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2439;
                                this.typeArguments();
                            }
                        }
                        this.state = 2442;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2444;
                        this.primary();
                        this.state = 2445;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2447;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2446;
                                this.typeArguments();
                            }
                        }
                        this.state = 2449;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2451;
                        this.match(Java8Parser.SUPER);
                        this.state = 2452;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2454;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2453;
                                this.typeArguments();
                            }
                        }
                        this.state = 2456;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2457;
                        this.typeName();
                        this.state = 2458;
                        this.match(Java8Parser.DOT);
                        this.state = 2459;
                        this.match(Java8Parser.SUPER);
                        this.state = 2460;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2462;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2461;
                                this.typeArguments();
                            }
                        }
                        this.state = 2464;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2466;
                        this.classType();
                        this.state = 2467;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2469;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2468;
                                this.typeArguments();
                            }
                        }
                        this.state = 2471;
                        this.match(Java8Parser.NEW);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2473;
                        this.arrayType();
                        this.state = 2474;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2475;
                        this.match(Java8Parser.NEW);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodReference_lf_primary = function () {
        var _localctx = new MethodReference_lf_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 400, Java8Parser.RULE_methodReference_lf_primary);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2479;
                this.match(Java8Parser.COLONCOLON);
                this.state = 2481;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Java8Parser.LT) {
                    {
                        this.state = 2480;
                        this.typeArguments();
                    }
                }
                this.state = 2483;
                this.match(Java8Parser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.methodReference_lfno_primary = function () {
        var _localctx = new MethodReference_lfno_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 402, Java8Parser.RULE_methodReference_lfno_primary);
        var _la;
        try {
            this.state = 2525;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 285, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2485;
                        this.expressionName();
                        this.state = 2486;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2488;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2487;
                                this.typeArguments();
                            }
                        }
                        this.state = 2490;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2492;
                        this.referenceType();
                        this.state = 2493;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2495;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2494;
                                this.typeArguments();
                            }
                        }
                        this.state = 2497;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2499;
                        this.match(Java8Parser.SUPER);
                        this.state = 2500;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2502;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2501;
                                this.typeArguments();
                            }
                        }
                        this.state = 2504;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2505;
                        this.typeName();
                        this.state = 2506;
                        this.match(Java8Parser.DOT);
                        this.state = 2507;
                        this.match(Java8Parser.SUPER);
                        this.state = 2508;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2510;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2509;
                                this.typeArguments();
                            }
                        }
                        this.state = 2512;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2514;
                        this.classType();
                        this.state = 2515;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2517;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Java8Parser.LT) {
                            {
                                this.state = 2516;
                                this.typeArguments();
                            }
                        }
                        this.state = 2519;
                        this.match(Java8Parser.NEW);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2521;
                        this.arrayType();
                        this.state = 2522;
                        this.match(Java8Parser.COLONCOLON);
                        this.state = 2523;
                        this.match(Java8Parser.NEW);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.arrayCreationExpression = function () {
        var _localctx = new ArrayCreationExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 404, Java8Parser.RULE_arrayCreationExpression);
        try {
            this.state = 2549;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 288, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2527;
                        this.match(Java8Parser.NEW);
                        this.state = 2528;
                        this.primitiveType();
                        this.state = 2529;
                        this.dimExprs();
                        this.state = 2531;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 286, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2530;
                                    this.dims();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2533;
                        this.match(Java8Parser.NEW);
                        this.state = 2534;
                        this.classOrInterfaceType();
                        this.state = 2535;
                        this.dimExprs();
                        this.state = 2537;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 287, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2536;
                                    this.dims();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2539;
                        this.match(Java8Parser.NEW);
                        this.state = 2540;
                        this.primitiveType();
                        this.state = 2541;
                        this.dims();
                        this.state = 2542;
                        this.arrayInitializer();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2544;
                        this.match(Java8Parser.NEW);
                        this.state = 2545;
                        this.classOrInterfaceType();
                        this.state = 2546;
                        this.dims();
                        this.state = 2547;
                        this.arrayInitializer();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.dimExprs = function () {
        var _localctx = new DimExprsContext(this._ctx, this.state);
        this.enterRule(_localctx, 406, Java8Parser.RULE_dimExprs);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2551;
                this.dimExpr();
                this.state = 2555;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2552;
                                this.dimExpr();
                            }
                        }
                    }
                    this.state = 2557;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.dimExpr = function () {
        var _localctx = new DimExprContext(this._ctx, this.state);
        this.enterRule(_localctx, 408, Java8Parser.RULE_dimExpr);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2561;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.AT) {
                    {
                        {
                            this.state = 2558;
                            this.annotation();
                        }
                    }
                    this.state = 2563;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2564;
                this.match(Java8Parser.LBRACK);
                this.state = 2565;
                this.expression();
                this.state = 2566;
                this.match(Java8Parser.RBRACK);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.constantExpression = function () {
        var _localctx = new ConstantExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 410, Java8Parser.RULE_constantExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2568;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.expression = function () {
        var _localctx = new ExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 412, Java8Parser.RULE_expression);
        try {
            this.state = 2572;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 291, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2570;
                        this.lambdaExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2571;
                        this.assignmentExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.lambdaExpression = function () {
        var _localctx = new LambdaExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 414, Java8Parser.RULE_lambdaExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2574;
                this.lambdaParameters();
                this.state = 2575;
                this.match(Java8Parser.ARROW);
                this.state = 2576;
                this.lambdaBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.lambdaParameters = function () {
        var _localctx = new LambdaParametersContext(this._ctx, this.state);
        this.enterRule(_localctx, 416, Java8Parser.RULE_lambdaParameters);
        var _la;
        try {
            this.state = 2588;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 293, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2578;
                        this.match(Java8Parser.Identifier);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2579;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2581;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la === Java8Parser.SHORT || _la === Java8Parser.Identifier || _la === Java8Parser.AT) {
                            {
                                this.state = 2580;
                                this.formalParameterList();
                            }
                        }
                        this.state = 2583;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2584;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2585;
                        this.inferredFormalParameterList();
                        this.state = 2586;
                        this.match(Java8Parser.RPAREN);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.inferredFormalParameterList = function () {
        var _localctx = new InferredFormalParameterListContext(this._ctx, this.state);
        this.enterRule(_localctx, 418, Java8Parser.RULE_inferredFormalParameterList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2590;
                this.match(Java8Parser.Identifier);
                this.state = 2595;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Java8Parser.COMMA) {
                    {
                        {
                            this.state = 2591;
                            this.match(Java8Parser.COMMA);
                            this.state = 2592;
                            this.match(Java8Parser.Identifier);
                        }
                    }
                    this.state = 2597;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.lambdaBody = function () {
        var _localctx = new LambdaBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 420, Java8Parser.RULE_lambdaBody);
        try {
            this.state = 2600;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.BOOLEAN:
                case Java8Parser.BYTE:
                case Java8Parser.CHAR:
                case Java8Parser.DOUBLE:
                case Java8Parser.FLOAT:
                case Java8Parser.INT:
                case Java8Parser.LONG:
                case Java8Parser.NEW:
                case Java8Parser.SHORT:
                case Java8Parser.SUPER:
                case Java8Parser.THIS:
                case Java8Parser.VOID:
                case Java8Parser.IntegerLiteral:
                case Java8Parser.FloatingPointLiteral:
                case Java8Parser.BooleanLiteral:
                case Java8Parser.CharacterLiteral:
                case Java8Parser.StringLiteral:
                case Java8Parser.NullLiteral:
                case Java8Parser.LPAREN:
                case Java8Parser.BANG:
                case Java8Parser.TILDE:
                case Java8Parser.INC:
                case Java8Parser.DEC:
                case Java8Parser.ADD:
                case Java8Parser.SUB:
                case Java8Parser.Identifier:
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2598;
                        this.expression();
                    }
                    break;
                case Java8Parser.LBRACE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2599;
                        this.block();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.assignmentExpression = function () {
        var _localctx = new AssignmentExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 422, Java8Parser.RULE_assignmentExpression);
        try {
            this.state = 2604;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 296, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2602;
                        this.conditionalExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2603;
                        this.assignment();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.assignment = function () {
        var _localctx = new AssignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 424, Java8Parser.RULE_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2606;
                this.leftHandSide();
                this.state = 2607;
                this.assignmentOperator();
                this.state = 2608;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.leftHandSide = function () {
        var _localctx = new LeftHandSideContext(this._ctx, this.state);
        this.enterRule(_localctx, 426, Java8Parser.RULE_leftHandSide);
        try {
            this.state = 2613;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 297, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2610;
                        this.expressionName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2611;
                        this.fieldAccess();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2612;
                        this.arrayAccess();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.assignmentOperator = function () {
        var _localctx = new AssignmentOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 428, Java8Parser.RULE_assignmentOperator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2615;
                _la = this._input.LA(1);
                if (!(((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (Java8Parser.ASSIGN - 66)) | (1 << (Java8Parser.ADD_ASSIGN - 66)) | (1 << (Java8Parser.SUB_ASSIGN - 66)) | (1 << (Java8Parser.MUL_ASSIGN - 66)) | (1 << (Java8Parser.DIV_ASSIGN - 66)) | (1 << (Java8Parser.AND_ASSIGN - 66)) | (1 << (Java8Parser.OR_ASSIGN - 66)) | (1 << (Java8Parser.XOR_ASSIGN - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (Java8Parser.MOD_ASSIGN - 98)) | (1 << (Java8Parser.LSHIFT_ASSIGN - 98)) | (1 << (Java8Parser.RSHIFT_ASSIGN - 98)) | (1 << (Java8Parser.URSHIFT_ASSIGN - 98)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.conditionalExpression = function () {
        var _localctx = new ConditionalExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 430, Java8Parser.RULE_conditionalExpression);
        try {
            this.state = 2624;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 298, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2617;
                        this.conditionalOrExpression(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2618;
                        this.conditionalOrExpression(0);
                        this.state = 2619;
                        this.match(Java8Parser.QUESTION);
                        this.state = 2620;
                        this.expression();
                        this.state = 2621;
                        this.match(Java8Parser.COLON);
                        this.state = 2622;
                        this.conditionalExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.conditionalOrExpression = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new ConditionalOrExpressionContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 432;
        this.enterRecursionRule(_localctx, 432, Java8Parser.RULE_conditionalOrExpression, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2627;
                    this.conditionalAndExpression(0);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2634;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_conditionalOrExpression);
                                this.state = 2629;
                                if (!(this.precpred(this._ctx, 1))) {
                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                }
                                this.state = 2630;
                                this.match(Java8Parser.OR);
                                this.state = 2631;
                                this.conditionalAndExpression(0);
                            }
                        }
                    }
                    this.state = 2636;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.conditionalAndExpression = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new ConditionalAndExpressionContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 434;
        this.enterRecursionRule(_localctx, 434, Java8Parser.RULE_conditionalAndExpression, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2638;
                    this.inclusiveOrExpression(0);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2645;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_conditionalAndExpression);
                                this.state = 2640;
                                if (!(this.precpred(this._ctx, 1))) {
                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                }
                                this.state = 2641;
                                this.match(Java8Parser.AND);
                                this.state = 2642;
                                this.inclusiveOrExpression(0);
                            }
                        }
                    }
                    this.state = 2647;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.inclusiveOrExpression = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new InclusiveOrExpressionContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 436;
        this.enterRecursionRule(_localctx, 436, Java8Parser.RULE_inclusiveOrExpression, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2649;
                    this.exclusiveOrExpression(0);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2656;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_inclusiveOrExpression);
                                this.state = 2651;
                                if (!(this.precpred(this._ctx, 1))) {
                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                }
                                this.state = 2652;
                                this.match(Java8Parser.BITOR);
                                this.state = 2653;
                                this.exclusiveOrExpression(0);
                            }
                        }
                    }
                    this.state = 2658;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.exclusiveOrExpression = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new ExclusiveOrExpressionContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 438;
        this.enterRecursionRule(_localctx, 438, Java8Parser.RULE_exclusiveOrExpression, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2660;
                    this.andExpression(0);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2667;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_exclusiveOrExpression);
                                this.state = 2662;
                                if (!(this.precpred(this._ctx, 1))) {
                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                }
                                this.state = 2663;
                                this.match(Java8Parser.CARET);
                                this.state = 2664;
                                this.andExpression(0);
                            }
                        }
                    }
                    this.state = 2669;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.andExpression = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new AndExpressionContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 440;
        this.enterRecursionRule(_localctx, 440, Java8Parser.RULE_andExpression, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2671;
                    this.equalityExpression(0);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2678;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new AndExpressionContext(_parentctx, _parentState);
                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_andExpression);
                                this.state = 2673;
                                if (!(this.precpred(this._ctx, 1))) {
                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                }
                                this.state = 2674;
                                this.match(Java8Parser.BITAND);
                                this.state = 2675;
                                this.equalityExpression(0);
                            }
                        }
                    }
                    this.state = 2680;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.equalityExpression = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new EqualityExpressionContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 442;
        this.enterRecursionRule(_localctx, 442, Java8Parser.RULE_equalityExpression, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2682;
                    this.relationalExpression(0);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2692;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 2690;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 304, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new EqualityExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_equalityExpression);
                                        this.state = 2684;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 2685;
                                        this.match(Java8Parser.EQUAL);
                                        this.state = 2686;
                                        this.relationalExpression(0);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new EqualityExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_equalityExpression);
                                        this.state = 2687;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 2688;
                                        this.match(Java8Parser.NOTEQUAL);
                                        this.state = 2689;
                                        this.relationalExpression(0);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 2694;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.relationalExpression = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new RelationalExpressionContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 444;
        this.enterRecursionRule(_localctx, 444, Java8Parser.RULE_relationalExpression, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2696;
                    this.shiftExpression(0);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2715;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 2713;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 306, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new RelationalExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_relationalExpression);
                                        this.state = 2698;
                                        if (!(this.precpred(this._ctx, 5))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                                        }
                                        this.state = 2699;
                                        this.match(Java8Parser.LT);
                                        this.state = 2700;
                                        this.shiftExpression(0);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new RelationalExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_relationalExpression);
                                        this.state = 2701;
                                        if (!(this.precpred(this._ctx, 4))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                                        }
                                        this.state = 2702;
                                        this.match(Java8Parser.GT);
                                        this.state = 2703;
                                        this.shiftExpression(0);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new RelationalExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_relationalExpression);
                                        this.state = 2704;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 2705;
                                        this.match(Java8Parser.LE);
                                        this.state = 2706;
                                        this.shiftExpression(0);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new RelationalExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_relationalExpression);
                                        this.state = 2707;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 2708;
                                        this.match(Java8Parser.GE);
                                        this.state = 2709;
                                        this.shiftExpression(0);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new RelationalExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_relationalExpression);
                                        this.state = 2710;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 2711;
                                        this.match(Java8Parser.INSTANCEOF);
                                        this.state = 2712;
                                        this.referenceType();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 2717;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.shiftExpression = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new ShiftExpressionContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 446;
        this.enterRecursionRule(_localctx, 446, Java8Parser.RULE_shiftExpression, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2719;
                    this.additiveExpression(0);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2736;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 2734;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 308, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new ShiftExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_shiftExpression);
                                        this.state = 2721;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 2722;
                                        this.match(Java8Parser.LT);
                                        this.state = 2723;
                                        this.match(Java8Parser.LT);
                                        this.state = 2724;
                                        this.additiveExpression(0);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new ShiftExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_shiftExpression);
                                        this.state = 2725;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 2726;
                                        this.match(Java8Parser.GT);
                                        this.state = 2727;
                                        this.match(Java8Parser.GT);
                                        this.state = 2728;
                                        this.additiveExpression(0);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new ShiftExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_shiftExpression);
                                        this.state = 2729;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 2730;
                                        this.match(Java8Parser.GT);
                                        this.state = 2731;
                                        this.match(Java8Parser.GT);
                                        this.state = 2732;
                                        this.match(Java8Parser.GT);
                                        this.state = 2733;
                                        this.additiveExpression(0);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 2738;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.additiveExpression = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new AdditiveExpressionContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 448;
        this.enterRecursionRule(_localctx, 448, Java8Parser.RULE_additiveExpression, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2740;
                    this.multiplicativeExpression(0);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2750;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 2748;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 310, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new AdditiveExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_additiveExpression);
                                        this.state = 2742;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 2743;
                                        this.match(Java8Parser.ADD);
                                        this.state = 2744;
                                        this.multiplicativeExpression(0);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new AdditiveExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_additiveExpression);
                                        this.state = 2745;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 2746;
                                        this.match(Java8Parser.SUB);
                                        this.state = 2747;
                                        this.multiplicativeExpression(0);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 2752;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.multiplicativeExpression = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new MultiplicativeExpressionContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 450;
        this.enterRecursionRule(_localctx, 450, Java8Parser.RULE_multiplicativeExpression, _p);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 2754;
                    this.unaryExpression();
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2767;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 2765;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 312, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
                                        this.state = 2756;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 2757;
                                        this.match(Java8Parser.MUL);
                                        this.state = 2758;
                                        this.unaryExpression();
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
                                        this.state = 2759;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 2760;
                                        this.match(Java8Parser.DIV);
                                        this.state = 2761;
                                        this.unaryExpression();
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
                                        this.state = 2762;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 2763;
                                        this.match(Java8Parser.MOD);
                                        this.state = 2764;
                                        this.unaryExpression();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 2769;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unaryExpression = function () {
        var _localctx = new UnaryExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 452, Java8Parser.RULE_unaryExpression);
        try {
            this.state = 2777;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Java8Parser.INC:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2770;
                        this.preIncrementExpression();
                    }
                    break;
                case Java8Parser.DEC:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2771;
                        this.preDecrementExpression();
                    }
                    break;
                case Java8Parser.ADD:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2772;
                        this.match(Java8Parser.ADD);
                        this.state = 2773;
                        this.unaryExpression();
                    }
                    break;
                case Java8Parser.SUB:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2774;
                        this.match(Java8Parser.SUB);
                        this.state = 2775;
                        this.unaryExpression();
                    }
                    break;
                case Java8Parser.BOOLEAN:
                case Java8Parser.BYTE:
                case Java8Parser.CHAR:
                case Java8Parser.DOUBLE:
                case Java8Parser.FLOAT:
                case Java8Parser.INT:
                case Java8Parser.LONG:
                case Java8Parser.NEW:
                case Java8Parser.SHORT:
                case Java8Parser.SUPER:
                case Java8Parser.THIS:
                case Java8Parser.VOID:
                case Java8Parser.IntegerLiteral:
                case Java8Parser.FloatingPointLiteral:
                case Java8Parser.BooleanLiteral:
                case Java8Parser.CharacterLiteral:
                case Java8Parser.StringLiteral:
                case Java8Parser.NullLiteral:
                case Java8Parser.LPAREN:
                case Java8Parser.BANG:
                case Java8Parser.TILDE:
                case Java8Parser.Identifier:
                case Java8Parser.AT:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2776;
                        this.unaryExpressionNotPlusMinus();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.preIncrementExpression = function () {
        var _localctx = new PreIncrementExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 454, Java8Parser.RULE_preIncrementExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2779;
                this.match(Java8Parser.INC);
                this.state = 2780;
                this.unaryExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.preDecrementExpression = function () {
        var _localctx = new PreDecrementExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 456, Java8Parser.RULE_preDecrementExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2782;
                this.match(Java8Parser.DEC);
                this.state = 2783;
                this.unaryExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.unaryExpressionNotPlusMinus = function () {
        var _localctx = new UnaryExpressionNotPlusMinusContext(this._ctx, this.state);
        this.enterRule(_localctx, 458, Java8Parser.RULE_unaryExpressionNotPlusMinus);
        try {
            this.state = 2791;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 315, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2785;
                        this.postfixExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2786;
                        this.match(Java8Parser.TILDE);
                        this.state = 2787;
                        this.unaryExpression();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2788;
                        this.match(Java8Parser.BANG);
                        this.state = 2789;
                        this.unaryExpression();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2790;
                        this.castExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.postfixExpression = function () {
        var _localctx = new PostfixExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 460, Java8Parser.RULE_postfixExpression);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2795;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 316, this._ctx)) {
                    case 1:
                        {
                            this.state = 2793;
                            this.primary();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2794;
                            this.expressionName();
                        }
                        break;
                }
                this.state = 2801;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 2799;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case Java8Parser.INC:
                                    {
                                        this.state = 2797;
                                        this.postIncrementExpression_lf_postfixExpression();
                                    }
                                    break;
                                case Java8Parser.DEC:
                                    {
                                        this.state = 2798;
                                        this.postDecrementExpression_lf_postfixExpression();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                    }
                    this.state = 2803;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.postIncrementExpression = function () {
        var _localctx = new PostIncrementExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 462, Java8Parser.RULE_postIncrementExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2804;
                this.postfixExpression();
                this.state = 2805;
                this.match(Java8Parser.INC);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.postIncrementExpression_lf_postfixExpression = function () {
        var _localctx = new PostIncrementExpression_lf_postfixExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 464, Java8Parser.RULE_postIncrementExpression_lf_postfixExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2807;
                this.match(Java8Parser.INC);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.postDecrementExpression = function () {
        var _localctx = new PostDecrementExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 466, Java8Parser.RULE_postDecrementExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2809;
                this.postfixExpression();
                this.state = 2810;
                this.match(Java8Parser.DEC);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.postDecrementExpression_lf_postfixExpression = function () {
        var _localctx = new PostDecrementExpression_lf_postfixExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 468, Java8Parser.RULE_postDecrementExpression_lf_postfixExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2812;
                this.match(Java8Parser.DEC);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Java8Parser.prototype.castExpression = function () {
        var _localctx = new CastExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 470, Java8Parser.RULE_castExpression);
        var _la;
        try {
            this.state = 2841;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 321, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2814;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2815;
                        this.primitiveType();
                        this.state = 2816;
                        this.match(Java8Parser.RPAREN);
                        this.state = 2817;
                        this.unaryExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2819;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2820;
                        this.referenceType();
                        this.state = 2824;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.BITAND) {
                            {
                                {
                                    this.state = 2821;
                                    this.additionalBound();
                                }
                            }
                            this.state = 2826;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2827;
                        this.match(Java8Parser.RPAREN);
                        this.state = 2828;
                        this.unaryExpressionNotPlusMinus();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2830;
                        this.match(Java8Parser.LPAREN);
                        this.state = 2831;
                        this.referenceType();
                        this.state = 2835;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Java8Parser.BITAND) {
                            {
                                {
                                    this.state = 2832;
                                    this.additionalBound();
                                }
                            }
                            this.state = 2837;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2838;
                        this.match(Java8Parser.RPAREN);
                        this.state = 2839;
                        this.lambdaExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    Java8Parser.prototype.sempred = function (_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 25:
                return this.packageName_sempred(_localctx, predIndex);
            case 27:
                return this.packageOrTypeName_sempred(_localctx, predIndex);
            case 30:
                return this.ambiguousName_sempred(_localctx, predIndex);
            case 216:
                return this.conditionalOrExpression_sempred(_localctx, predIndex);
            case 217:
                return this.conditionalAndExpression_sempred(_localctx, predIndex);
            case 218:
                return this.inclusiveOrExpression_sempred(_localctx, predIndex);
            case 219:
                return this.exclusiveOrExpression_sempred(_localctx, predIndex);
            case 220:
                return this.andExpression_sempred(_localctx, predIndex);
            case 221:
                return this.equalityExpression_sempred(_localctx, predIndex);
            case 222:
                return this.relationalExpression_sempred(_localctx, predIndex);
            case 223:
                return this.shiftExpression_sempred(_localctx, predIndex);
            case 224:
                return this.additiveExpression_sempred(_localctx, predIndex);
            case 225:
                return this.multiplicativeExpression_sempred(_localctx, predIndex);
        }
        return true;
    };
    Java8Parser.prototype.packageName_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.packageOrTypeName_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 1:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.ambiguousName_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 2:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.conditionalOrExpression_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 3:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.conditionalAndExpression_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 4:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.inclusiveOrExpression_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 5:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.exclusiveOrExpression_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 6:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.andExpression_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 7:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.equalityExpression_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 8:
                return this.precpred(this._ctx, 2);
            case 9:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.relationalExpression_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 10:
                return this.precpred(this._ctx, 5);
            case 11:
                return this.precpred(this._ctx, 4);
            case 12:
                return this.precpred(this._ctx, 3);
            case 13:
                return this.precpred(this._ctx, 2);
            case 14:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.shiftExpression_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 15:
                return this.precpred(this._ctx, 3);
            case 16:
                return this.precpred(this._ctx, 2);
            case 17:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.additiveExpression_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 18:
                return this.precpred(this._ctx, 2);
            case 19:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Java8Parser.prototype.multiplicativeExpression_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 20:
                return this.precpred(this._ctx, 3);
            case 21:
                return this.precpred(this._ctx, 2);
            case 22:
                return this.precpred(this._ctx, 1);
        }
        return true;
    };
    Object.defineProperty(Java8Parser, "_ATN", {
        get: function () {
            if (!Java8Parser.__ATN) {
                Java8Parser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(Java8Parser._serializedATN));
            }
            return Java8Parser.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    Java8Parser.ABSTRACT = 1;
    Java8Parser.ASSERT = 2;
    Java8Parser.BOOLEAN = 3;
    Java8Parser.BREAK = 4;
    Java8Parser.BYTE = 5;
    Java8Parser.CASE = 6;
    Java8Parser.CATCH = 7;
    Java8Parser.CHAR = 8;
    Java8Parser.CLASS = 9;
    Java8Parser.CONST = 10;
    Java8Parser.CONTINUE = 11;
    Java8Parser.DEFAULT = 12;
    Java8Parser.DO = 13;
    Java8Parser.DOUBLE = 14;
    Java8Parser.ELSE = 15;
    Java8Parser.ENUM = 16;
    Java8Parser.EXTENDS = 17;
    Java8Parser.FINAL = 18;
    Java8Parser.FINALLY = 19;
    Java8Parser.FLOAT = 20;
    Java8Parser.FOR = 21;
    Java8Parser.IF = 22;
    Java8Parser.GOTO = 23;
    Java8Parser.IMPLEMENTS = 24;
    Java8Parser.IMPORT = 25;
    Java8Parser.INSTANCEOF = 26;
    Java8Parser.INT = 27;
    Java8Parser.INTERFACE = 28;
    Java8Parser.LONG = 29;
    Java8Parser.NATIVE = 30;
    Java8Parser.NEW = 31;
    Java8Parser.PACKAGE = 32;
    Java8Parser.PRIVATE = 33;
    Java8Parser.PROTECTED = 34;
    Java8Parser.PUBLIC = 35;
    Java8Parser.RETURN = 36;
    Java8Parser.SHORT = 37;
    Java8Parser.STATIC = 38;
    Java8Parser.STRICTFP = 39;
    Java8Parser.SUPER = 40;
    Java8Parser.SWITCH = 41;
    Java8Parser.SYNCHRONIZED = 42;
    Java8Parser.THIS = 43;
    Java8Parser.THROW = 44;
    Java8Parser.THROWS = 45;
    Java8Parser.TRANSIENT = 46;
    Java8Parser.TRY = 47;
    Java8Parser.VOID = 48;
    Java8Parser.VOLATILE = 49;
    Java8Parser.WHILE = 50;
    Java8Parser.IntegerLiteral = 51;
    Java8Parser.FloatingPointLiteral = 52;
    Java8Parser.BooleanLiteral = 53;
    Java8Parser.CharacterLiteral = 54;
    Java8Parser.StringLiteral = 55;
    Java8Parser.NullLiteral = 56;
    Java8Parser.LPAREN = 57;
    Java8Parser.RPAREN = 58;
    Java8Parser.LBRACE = 59;
    Java8Parser.RBRACE = 60;
    Java8Parser.LBRACK = 61;
    Java8Parser.RBRACK = 62;
    Java8Parser.SEMI = 63;
    Java8Parser.COMMA = 64;
    Java8Parser.DOT = 65;
    Java8Parser.ASSIGN = 66;
    Java8Parser.GT = 67;
    Java8Parser.LT = 68;
    Java8Parser.BANG = 69;
    Java8Parser.TILDE = 70;
    Java8Parser.QUESTION = 71;
    Java8Parser.COLON = 72;
    Java8Parser.EQUAL = 73;
    Java8Parser.LE = 74;
    Java8Parser.GE = 75;
    Java8Parser.NOTEQUAL = 76;
    Java8Parser.AND = 77;
    Java8Parser.OR = 78;
    Java8Parser.INC = 79;
    Java8Parser.DEC = 80;
    Java8Parser.ADD = 81;
    Java8Parser.SUB = 82;
    Java8Parser.MUL = 83;
    Java8Parser.DIV = 84;
    Java8Parser.BITAND = 85;
    Java8Parser.BITOR = 86;
    Java8Parser.CARET = 87;
    Java8Parser.MOD = 88;
    Java8Parser.ARROW = 89;
    Java8Parser.COLONCOLON = 90;
    Java8Parser.ADD_ASSIGN = 91;
    Java8Parser.SUB_ASSIGN = 92;
    Java8Parser.MUL_ASSIGN = 93;
    Java8Parser.DIV_ASSIGN = 94;
    Java8Parser.AND_ASSIGN = 95;
    Java8Parser.OR_ASSIGN = 96;
    Java8Parser.XOR_ASSIGN = 97;
    Java8Parser.MOD_ASSIGN = 98;
    Java8Parser.LSHIFT_ASSIGN = 99;
    Java8Parser.RSHIFT_ASSIGN = 100;
    Java8Parser.URSHIFT_ASSIGN = 101;
    Java8Parser.Identifier = 102;
    Java8Parser.AT = 103;
    Java8Parser.ELLIPSIS = 104;
    Java8Parser.WS = 105;
    Java8Parser.COMMENT = 106;
    Java8Parser.LINE_COMMENT = 107;
    Java8Parser.RULE_literal = 0;
    Java8Parser.RULE_primitiveType = 1;
    Java8Parser.RULE_numericType = 2;
    Java8Parser.RULE_integralType = 3;
    Java8Parser.RULE_floatingPointType = 4;
    Java8Parser.RULE_referenceType = 5;
    Java8Parser.RULE_classOrInterfaceType = 6;
    Java8Parser.RULE_classType = 7;
    Java8Parser.RULE_classType_lf_classOrInterfaceType = 8;
    Java8Parser.RULE_classType_lfno_classOrInterfaceType = 9;
    Java8Parser.RULE_interfaceType = 10;
    Java8Parser.RULE_interfaceType_lf_classOrInterfaceType = 11;
    Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType = 12;
    Java8Parser.RULE_typeVariable = 13;
    Java8Parser.RULE_arrayType = 14;
    Java8Parser.RULE_dims = 15;
    Java8Parser.RULE_typeParameter = 16;
    Java8Parser.RULE_typeParameterModifier = 17;
    Java8Parser.RULE_typeBound = 18;
    Java8Parser.RULE_additionalBound = 19;
    Java8Parser.RULE_typeArguments = 20;
    Java8Parser.RULE_typeArgumentList = 21;
    Java8Parser.RULE_typeArgument = 22;
    Java8Parser.RULE_wildcard = 23;
    Java8Parser.RULE_wildcardBounds = 24;
    Java8Parser.RULE_packageName = 25;
    Java8Parser.RULE_typeName = 26;
    Java8Parser.RULE_packageOrTypeName = 27;
    Java8Parser.RULE_expressionName = 28;
    Java8Parser.RULE_methodName = 29;
    Java8Parser.RULE_ambiguousName = 30;
    Java8Parser.RULE_compilationUnit = 31;
    Java8Parser.RULE_packageDeclaration = 32;
    Java8Parser.RULE_packageModifier = 33;
    Java8Parser.RULE_importDeclaration = 34;
    Java8Parser.RULE_singleTypeImportDeclaration = 35;
    Java8Parser.RULE_typeImportOnDemandDeclaration = 36;
    Java8Parser.RULE_singleStaticImportDeclaration = 37;
    Java8Parser.RULE_staticImportOnDemandDeclaration = 38;
    Java8Parser.RULE_typeDeclaration = 39;
    Java8Parser.RULE_classDeclaration = 40;
    Java8Parser.RULE_normalClassDeclaration = 41;
    Java8Parser.RULE_classModifier = 42;
    Java8Parser.RULE_typeParameters = 43;
    Java8Parser.RULE_typeParameterList = 44;
    Java8Parser.RULE_superclass = 45;
    Java8Parser.RULE_superinterfaces = 46;
    Java8Parser.RULE_interfaceTypeList = 47;
    Java8Parser.RULE_classBody = 48;
    Java8Parser.RULE_classBodyDeclaration = 49;
    Java8Parser.RULE_classMemberDeclaration = 50;
    Java8Parser.RULE_fieldDeclaration = 51;
    Java8Parser.RULE_fieldModifier = 52;
    Java8Parser.RULE_variableDeclaratorList = 53;
    Java8Parser.RULE_variableDeclarator = 54;
    Java8Parser.RULE_variableDeclaratorId = 55;
    Java8Parser.RULE_variableInitializer = 56;
    Java8Parser.RULE_unannType = 57;
    Java8Parser.RULE_unannPrimitiveType = 58;
    Java8Parser.RULE_unannReferenceType = 59;
    Java8Parser.RULE_unannClassOrInterfaceType = 60;
    Java8Parser.RULE_unannClassType = 61;
    Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType = 62;
    Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType = 63;
    Java8Parser.RULE_unannInterfaceType = 64;
    Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 65;
    Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 66;
    Java8Parser.RULE_unannTypeVariable = 67;
    Java8Parser.RULE_unannArrayType = 68;
    Java8Parser.RULE_methodDeclaration = 69;
    Java8Parser.RULE_methodModifier = 70;
    Java8Parser.RULE_methodHeader = 71;
    Java8Parser.RULE_result = 72;
    Java8Parser.RULE_methodDeclarator = 73;
    Java8Parser.RULE_formalParameterList = 74;
    Java8Parser.RULE_formalParameters = 75;
    Java8Parser.RULE_formalParameter = 76;
    Java8Parser.RULE_variableModifier = 77;
    Java8Parser.RULE_lastFormalParameter = 78;
    Java8Parser.RULE_receiverParameter = 79;
    Java8Parser.RULE_throws_ = 80;
    Java8Parser.RULE_exceptionTypeList = 81;
    Java8Parser.RULE_exceptionType = 82;
    Java8Parser.RULE_methodBody = 83;
    Java8Parser.RULE_instanceInitializer = 84;
    Java8Parser.RULE_staticInitializer = 85;
    Java8Parser.RULE_constructorDeclaration = 86;
    Java8Parser.RULE_constructorModifier = 87;
    Java8Parser.RULE_constructorDeclarator = 88;
    Java8Parser.RULE_simpleTypeName = 89;
    Java8Parser.RULE_constructorBody = 90;
    Java8Parser.RULE_explicitConstructorInvocation = 91;
    Java8Parser.RULE_enumDeclaration = 92;
    Java8Parser.RULE_enumBody = 93;
    Java8Parser.RULE_enumConstantList = 94;
    Java8Parser.RULE_enumConstant = 95;
    Java8Parser.RULE_enumConstantModifier = 96;
    Java8Parser.RULE_enumBodyDeclarations = 97;
    Java8Parser.RULE_interfaceDeclaration = 98;
    Java8Parser.RULE_normalInterfaceDeclaration = 99;
    Java8Parser.RULE_interfaceModifier = 100;
    Java8Parser.RULE_extendsInterfaces = 101;
    Java8Parser.RULE_interfaceBody = 102;
    Java8Parser.RULE_interfaceMemberDeclaration = 103;
    Java8Parser.RULE_constantDeclaration = 104;
    Java8Parser.RULE_constantModifier = 105;
    Java8Parser.RULE_interfaceMethodDeclaration = 106;
    Java8Parser.RULE_interfaceMethodModifier = 107;
    Java8Parser.RULE_annotationTypeDeclaration = 108;
    Java8Parser.RULE_annotationTypeBody = 109;
    Java8Parser.RULE_annotationTypeMemberDeclaration = 110;
    Java8Parser.RULE_annotationTypeElementDeclaration = 111;
    Java8Parser.RULE_annotationTypeElementModifier = 112;
    Java8Parser.RULE_defaultValue = 113;
    Java8Parser.RULE_annotation = 114;
    Java8Parser.RULE_normalAnnotation = 115;
    Java8Parser.RULE_elementValuePairList = 116;
    Java8Parser.RULE_elementValuePair = 117;
    Java8Parser.RULE_elementValue = 118;
    Java8Parser.RULE_elementValueArrayInitializer = 119;
    Java8Parser.RULE_elementValueList = 120;
    Java8Parser.RULE_markerAnnotation = 121;
    Java8Parser.RULE_singleElementAnnotation = 122;
    Java8Parser.RULE_arrayInitializer = 123;
    Java8Parser.RULE_variableInitializerList = 124;
    Java8Parser.RULE_block = 125;
    Java8Parser.RULE_blockStatements = 126;
    Java8Parser.RULE_blockStatement = 127;
    Java8Parser.RULE_localVariableDeclarationStatement = 128;
    Java8Parser.RULE_localVariableDeclaration = 129;
    Java8Parser.RULE_statement = 130;
    Java8Parser.RULE_statementNoShortIf = 131;
    Java8Parser.RULE_statementWithoutTrailingSubstatement = 132;
    Java8Parser.RULE_emptyStatement = 133;
    Java8Parser.RULE_labeledStatement = 134;
    Java8Parser.RULE_labeledStatementNoShortIf = 135;
    Java8Parser.RULE_expressionStatement = 136;
    Java8Parser.RULE_statementExpression = 137;
    Java8Parser.RULE_ifThenStatement = 138;
    Java8Parser.RULE_ifThenElseStatement = 139;
    Java8Parser.RULE_ifThenElseStatementNoShortIf = 140;
    Java8Parser.RULE_assertStatement = 141;
    Java8Parser.RULE_switchStatement = 142;
    Java8Parser.RULE_switchBlock = 143;
    Java8Parser.RULE_switchBlockStatementGroup = 144;
    Java8Parser.RULE_switchLabels = 145;
    Java8Parser.RULE_switchLabel = 146;
    Java8Parser.RULE_enumConstantName = 147;
    Java8Parser.RULE_whileStatement = 148;
    Java8Parser.RULE_whileStatementNoShortIf = 149;
    Java8Parser.RULE_doStatement = 150;
    Java8Parser.RULE_forStatement = 151;
    Java8Parser.RULE_forStatementNoShortIf = 152;
    Java8Parser.RULE_basicForStatement = 153;
    Java8Parser.RULE_basicForStatementNoShortIf = 154;
    Java8Parser.RULE_forInit = 155;
    Java8Parser.RULE_forUpdate = 156;
    Java8Parser.RULE_statementExpressionList = 157;
    Java8Parser.RULE_enhancedForStatement = 158;
    Java8Parser.RULE_enhancedForStatementNoShortIf = 159;
    Java8Parser.RULE_breakStatement = 160;
    Java8Parser.RULE_continueStatement = 161;
    Java8Parser.RULE_returnStatement = 162;
    Java8Parser.RULE_throwStatement = 163;
    Java8Parser.RULE_synchronizedStatement = 164;
    Java8Parser.RULE_tryStatement = 165;
    Java8Parser.RULE_catches = 166;
    Java8Parser.RULE_catchClause = 167;
    Java8Parser.RULE_catchFormalParameter = 168;
    Java8Parser.RULE_catchType = 169;
    Java8Parser.RULE_finally_ = 170;
    Java8Parser.RULE_tryWithResourcesStatement = 171;
    Java8Parser.RULE_resourceSpecification = 172;
    Java8Parser.RULE_resourceList = 173;
    Java8Parser.RULE_resource = 174;
    Java8Parser.RULE_primary = 175;
    Java8Parser.RULE_primaryNoNewArray = 176;
    Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess = 177;
    Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess = 178;
    Java8Parser.RULE_primaryNoNewArray_lf_primary = 179;
    Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 180;
    Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 181;
    Java8Parser.RULE_primaryNoNewArray_lfno_primary = 182;
    Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 183;
    Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 184;
    Java8Parser.RULE_classInstanceCreationExpression = 185;
    Java8Parser.RULE_classInstanceCreationExpression_lf_primary = 186;
    Java8Parser.RULE_classInstanceCreationExpression_lfno_primary = 187;
    Java8Parser.RULE_typeArgumentsOrDiamond = 188;
    Java8Parser.RULE_fieldAccess = 189;
    Java8Parser.RULE_fieldAccess_lf_primary = 190;
    Java8Parser.RULE_fieldAccess_lfno_primary = 191;
    Java8Parser.RULE_arrayAccess = 192;
    Java8Parser.RULE_arrayAccess_lf_primary = 193;
    Java8Parser.RULE_arrayAccess_lfno_primary = 194;
    Java8Parser.RULE_methodInvocation = 195;
    Java8Parser.RULE_methodInvocation_lf_primary = 196;
    Java8Parser.RULE_methodInvocation_lfno_primary = 197;
    Java8Parser.RULE_argumentList = 198;
    Java8Parser.RULE_methodReference = 199;
    Java8Parser.RULE_methodReference_lf_primary = 200;
    Java8Parser.RULE_methodReference_lfno_primary = 201;
    Java8Parser.RULE_arrayCreationExpression = 202;
    Java8Parser.RULE_dimExprs = 203;
    Java8Parser.RULE_dimExpr = 204;
    Java8Parser.RULE_constantExpression = 205;
    Java8Parser.RULE_expression = 206;
    Java8Parser.RULE_lambdaExpression = 207;
    Java8Parser.RULE_lambdaParameters = 208;
    Java8Parser.RULE_inferredFormalParameterList = 209;
    Java8Parser.RULE_lambdaBody = 210;
    Java8Parser.RULE_assignmentExpression = 211;
    Java8Parser.RULE_assignment = 212;
    Java8Parser.RULE_leftHandSide = 213;
    Java8Parser.RULE_assignmentOperator = 214;
    Java8Parser.RULE_conditionalExpression = 215;
    Java8Parser.RULE_conditionalOrExpression = 216;
    Java8Parser.RULE_conditionalAndExpression = 217;
    Java8Parser.RULE_inclusiveOrExpression = 218;
    Java8Parser.RULE_exclusiveOrExpression = 219;
    Java8Parser.RULE_andExpression = 220;
    Java8Parser.RULE_equalityExpression = 221;
    Java8Parser.RULE_relationalExpression = 222;
    Java8Parser.RULE_shiftExpression = 223;
    Java8Parser.RULE_additiveExpression = 224;
    Java8Parser.RULE_multiplicativeExpression = 225;
    Java8Parser.RULE_unaryExpression = 226;
    Java8Parser.RULE_preIncrementExpression = 227;
    Java8Parser.RULE_preDecrementExpression = 228;
    Java8Parser.RULE_unaryExpressionNotPlusMinus = 229;
    Java8Parser.RULE_postfixExpression = 230;
    Java8Parser.RULE_postIncrementExpression = 231;
    Java8Parser.RULE_postIncrementExpression_lf_postfixExpression = 232;
    Java8Parser.RULE_postDecrementExpression = 233;
    Java8Parser.RULE_postDecrementExpression_lf_postfixExpression = 234;
    Java8Parser.RULE_castExpression = 235;
    // tslint:disable:no-trailing-whitespace
    Java8Parser.ruleNames = [
        "literal", "primitiveType", "numericType", "integralType", "floatingPointType",
        "referenceType", "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType",
        "classType_lfno_classOrInterfaceType", "interfaceType", "interfaceType_lf_classOrInterfaceType",
        "interfaceType_lfno_classOrInterfaceType", "typeVariable", "arrayType",
        "dims", "typeParameter", "typeParameterModifier", "typeBound", "additionalBound",
        "typeArguments", "typeArgumentList", "typeArgument", "wildcard", "wildcardBounds",
        "packageName", "typeName", "packageOrTypeName", "expressionName", "methodName",
        "ambiguousName", "compilationUnit", "packageDeclaration", "packageModifier",
        "importDeclaration", "singleTypeImportDeclaration", "typeImportOnDemandDeclaration",
        "singleStaticImportDeclaration", "staticImportOnDemandDeclaration", "typeDeclaration",
        "classDeclaration", "normalClassDeclaration", "classModifier", "typeParameters",
        "typeParameterList", "superclass", "superinterfaces", "interfaceTypeList",
        "classBody", "classBodyDeclaration", "classMemberDeclaration", "fieldDeclaration",
        "fieldModifier", "variableDeclaratorList", "variableDeclarator", "variableDeclaratorId",
        "variableInitializer", "unannType", "unannPrimitiveType", "unannReferenceType",
        "unannClassOrInterfaceType", "unannClassType", "unannClassType_lf_unannClassOrInterfaceType",
        "unannClassType_lfno_unannClassOrInterfaceType", "unannInterfaceType",
        "unannInterfaceType_lf_unannClassOrInterfaceType", "unannInterfaceType_lfno_unannClassOrInterfaceType",
        "unannTypeVariable", "unannArrayType", "methodDeclaration", "methodModifier",
        "methodHeader", "result", "methodDeclarator", "formalParameterList", "formalParameters",
        "formalParameter", "variableModifier", "lastFormalParameter", "receiverParameter",
        "throws_", "exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer",
        "staticInitializer", "constructorDeclaration", "constructorModifier",
        "constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation",
        "enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier",
        "enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration",
        "interfaceModifier", "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration",
        "constantDeclaration", "constantModifier", "interfaceMethodDeclaration",
        "interfaceMethodModifier", "annotationTypeDeclaration", "annotationTypeBody",
        "annotationTypeMemberDeclaration", "annotationTypeElementDeclaration",
        "annotationTypeElementModifier", "defaultValue", "annotation", "normalAnnotation",
        "elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer",
        "elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer",
        "variableInitializerList", "block", "blockStatements", "blockStatement",
        "localVariableDeclarationStatement", "localVariableDeclaration", "statement",
        "statementNoShortIf", "statementWithoutTrailingSubstatement", "emptyStatement",
        "labeledStatement", "labeledStatementNoShortIf", "expressionStatement",
        "statementExpression", "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf",
        "assertStatement", "switchStatement", "switchBlock", "switchBlockStatementGroup",
        "switchLabels", "switchLabel", "enumConstantName", "whileStatement", "whileStatementNoShortIf",
        "doStatement", "forStatement", "forStatementNoShortIf", "basicForStatement",
        "basicForStatementNoShortIf", "forInit", "forUpdate", "statementExpressionList",
        "enhancedForStatement", "enhancedForStatementNoShortIf", "breakStatement",
        "continueStatement", "returnStatement", "throwStatement", "synchronizedStatement",
        "tryStatement", "catches", "catchClause", "catchFormalParameter", "catchType",
        "finally_", "tryWithResourcesStatement", "resourceSpecification", "resourceList",
        "resource", "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess",
        "primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary",
        "primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary",
        "primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary",
        "primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", "classInstanceCreationExpression",
        "classInstanceCreationExpression_lf_primary", "classInstanceCreationExpression_lfno_primary",
        "typeArgumentsOrDiamond", "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary",
        "arrayAccess", "arrayAccess_lf_primary", "arrayAccess_lfno_primary", "methodInvocation",
        "methodInvocation_lf_primary", "methodInvocation_lfno_primary", "argumentList",
        "methodReference", "methodReference_lf_primary", "methodReference_lfno_primary",
        "arrayCreationExpression", "dimExprs", "dimExpr", "constantExpression",
        "expression", "lambdaExpression", "lambdaParameters", "inferredFormalParameterList",
        "lambdaBody", "assignmentExpression", "assignment", "leftHandSide", "assignmentOperator",
        "conditionalExpression", "conditionalOrExpression", "conditionalAndExpression",
        "inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression",
        "relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression",
        "unaryExpression", "preIncrementExpression", "preDecrementExpression",
        "unaryExpressionNotPlusMinus", "postfixExpression", "postIncrementExpression",
        "postIncrementExpression_lf_postfixExpression", "postDecrementExpression",
        "postDecrementExpression_lf_postfixExpression", "castExpression",
    ];
    Java8Parser._LITERAL_NAMES = [
        undefined, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'",
        "'case'", "'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'",
        "'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'",
        "'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'",
        "'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'",
        "'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'",
        "'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'",
        "'transient'", "'try'", "'void'", "'volatile'", "'while'", undefined,
        undefined, undefined, undefined, undefined, "'null'", "'('", "')'", "'{'",
        "'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'",
        "'~'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'",
        "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'",
        "'::'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='",
        "'<<='", "'>>='", "'>>>='", undefined, "'@'", "'...'",
    ];
    Java8Parser._SYMBOLIC_NAMES = [
        undefined, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH",
        "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE",
        "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS",
        "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE",
        "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP",
        "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT",
        "TRY", "VOID", "VOLATILE", "WHILE", "IntegerLiteral", "FloatingPointLiteral",
        "BooleanLiteral", "CharacterLiteral", "StringLiteral", "NullLiteral",
        "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA",
        "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL",
        "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL",
        "DIV", "BITAND", "BITOR", "CARET", "MOD", "ARROW", "COLONCOLON", "ADD_ASSIGN",
        "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN",
        "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier",
        "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT",
    ];
    Java8Parser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(Java8Parser._LITERAL_NAMES, Java8Parser._SYMBOLIC_NAMES, []);
    Java8Parser._serializedATNSegments = 6;
    Java8Parser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03m\u0B1E\x04\x02" +
        "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
        "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04" +
        "\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04" +
        "\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04" +
        "\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C\x04" +
        "\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#" +
        "\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t+" +
        "\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x044" +
        "\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
        "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
        "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
        "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
        "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
        "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
        "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
        "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
        "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
        "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
        "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
        "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
        "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
        "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
        "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
        "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
        "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
        "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
        "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
        "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
        "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
        "\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
        "\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
        "\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
        "\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
        "\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
        "\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
        "\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
        "\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
        "\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
        "\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x03\x02\x03\x02\x03\x03\x07" +
        "\x03\u01DE\n\x03\f\x03\x0E\x03\u01E1\v\x03\x03\x03\x03\x03\x07\x03\u01E5" +
        "\n\x03\f\x03\x0E\x03\u01E8\v\x03\x03\x03\x05\x03\u01EB\n\x03\x03\x04\x03" +
        "\x04\x05\x04\u01EF\n\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07" +
        "\x03\x07\x05\x07\u01F8\n\x07\x03\b\x03\b\x05\b\u01FC\n\b\x03\b\x03\b\x07" +
        "\b\u0200\n\b\f\b\x0E\b\u0203\v\b\x03\t\x07\t\u0206\n\t\f\t\x0E\t\u0209" +
        "\v\t\x03\t\x03\t\x05\t\u020D\n\t\x03\t\x03\t\x03\t\x07\t\u0212\n\t\f\t" +
        "\x0E\t\u0215\v\t\x03\t\x03\t\x05\t\u0219\n\t\x05\t\u021B\n\t\x03\n\x03" +
        "\n\x07\n\u021F\n\n\f\n\x0E\n\u0222\v\n\x03\n\x03\n\x05\n\u0226\n\n\x03" +
        "\v\x07\v\u0229\n\v\f\v\x0E\v\u022C\v\v\x03\v\x03\v\x05\v\u0230\n\v\x03" +
        "\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x07\x0F\u0239\n\x0F\f\x0F" +
        "\x0E\x0F\u023C\v\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
        "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u0249\n\x10\x03\x11\x07\x11" +
        "\u024C\n\x11\f\x11\x0E\x11\u024F\v\x11\x03\x11\x03\x11\x03\x11\x07\x11" +
        "\u0254\n\x11\f\x11\x0E\x11\u0257\v\x11\x03\x11\x03\x11\x07\x11\u025B\n" +
        "\x11\f\x11\x0E\x11\u025E\v\x11\x03\x12\x07\x12\u0261\n\x12\f\x12\x0E\x12" +
        "\u0264\v\x12\x03\x12\x03\x12\x05\x12\u0268\n\x12\x03\x13\x03\x13\x03\x14" +
        "\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\u0271\n\x14\f\x14\x0E\x14\u0274" +
        "\v\x14\x05\x14\u0276\n\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
        "\x16\x03\x16\x03\x17\x03\x17\x03\x17\x07\x17\u0282\n\x17\f\x17\x0E\x17" +
        "\u0285\v\x17\x03\x18\x03\x18\x05\x18\u0289\n\x18\x03\x19\x07\x19\u028C" +
        "\n\x19\f\x19\x0E\x19\u028F\v\x19\x03\x19\x03\x19\x05\x19\u0293\n\x19\x03" +
        "\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u0299\n\x1A\x03\x1B\x03\x1B\x03\x1B" +
        "\x03\x1B\x03\x1B\x03\x1B\x07\x1B\u02A1\n\x1B\f\x1B\x0E\x1B\u02A4\v\x1B" +
        "\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u02AB\n\x1C\x03\x1D\x03" +
        "\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u02B3\n\x1D\f\x1D\x0E\x1D" +
        "\u02B6\v\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u02BD\n\x1E" +
        "\x03\x1F\x03\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x07 \u02C7\n \f \x0E \u02CA" +
        "\v \x03!\x05!\u02CD\n!\x03!\x07!\u02D0\n!\f!\x0E!\u02D3\v!\x03!\x07!\u02D6" +
        "\n!\f!\x0E!\u02D9\v!\x03!\x03!\x03\"\x07\"\u02DE\n\"\f\"\x0E\"\u02E1\v" +
        "\"\x03\"\x03\"\x03\"\x03\"\x03#\x03#\x03$\x03$\x03$\x03$\x05$\u02ED\n" +
        "$\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03&\x03\'\x03\'\x03\'" +
        "\x03\'\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x03)" +
        "\x03)\x05)\u030A\n)\x03*\x03*\x05*\u030E\n*\x03+\x07+\u0311\n+\f+\x0E" +
        "+\u0314\v+\x03+\x03+\x03+\x05+\u0319\n+\x03+\x05+\u031C\n+\x03+\x05+\u031F" +
        "\n+\x03+\x03+\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u032B\n,\x03" +
        "-\x03-\x03-\x03-\x03.\x03.\x03.\x07.\u0334\n.\f.\x0E.\u0337\v.\x03/\x03" +
        "/\x03/\x030\x030\x030\x031\x031\x031\x071\u0342\n1\f1\x0E1\u0345\v1\x03" +
        "2\x032\x072\u0349\n2\f2\x0E2\u034C\v2\x032\x032\x033\x033\x033\x033\x05" +
        "3\u0354\n3\x034\x034\x034\x034\x034\x054\u035B\n4\x035\x075\u035E\n5\f" +
        "5\x0E5\u0361\v5\x035\x035\x035\x035\x036\x036\x036\x036\x036\x036\x03" +
        "6\x036\x056\u036F\n6\x037\x037\x037\x077\u0374\n7\f7\x0E7\u0377\v7\x03" +
        "8\x038\x038\x058\u037C\n8\x039\x039\x059\u0380\n9\x03:\x03:\x05:\u0384" +
        "\n:\x03;\x03;\x05;\u0388\n;\x03<\x03<\x05<\u038C\n<\x03=\x03=\x03=\x05" +
        "=\u0391\n=\x03>\x03>\x05>\u0395\n>\x03>\x03>\x07>\u0399\n>\f>\x0E>\u039C" +
        "\v>\x03?\x03?\x05?\u03A0\n?\x03?\x03?\x03?\x07?\u03A5\n?\f?\x0E?\u03A8" +
        "\v?\x03?\x03?\x05?\u03AC\n?\x05?\u03AE\n?\x03@\x03@\x07@\u03B2\n@\f@\x0E" +
        "@\u03B5\v@\x03@\x03@\x05@\u03B9\n@\x03A\x03A\x05A\u03BD\nA\x03B\x03B\x03" +
        "C\x03C\x03D\x03D\x03E\x03E\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03" +
        "F\x05F\u03D0\nF\x03G\x07G\u03D3\nG\fG\x0EG\u03D6\vG\x03G\x03G\x03G\x03" +
        "H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u03E5\nH\x03I\x03" +
        "I\x03I\x05I\u03EA\nI\x03I\x03I\x07I\u03EE\nI\fI\x0EI\u03F1\vI\x03I\x03" +
        "I\x03I\x05I\u03F6\nI\x05I\u03F8\nI\x03J\x03J\x05J\u03FC\nJ\x03K\x03K\x03" +
        "K\x05K\u0401\nK\x03K\x03K\x05K\u0405\nK\x03L\x03L\x03L\x03L\x03L\x03L" +
        "\x05L\u040D\nL\x03M\x03M\x03M\x07M\u0412\nM\fM\x0EM\u0415\vM\x03M\x03" +
        "M\x03M\x07M\u041A\nM\fM\x0EM\u041D\vM\x05M\u041F\nM\x03N\x07N\u0422\n" +
        "N\fN\x0EN\u0425\vN\x03N\x03N\x03N\x03O\x03O\x05O\u042C\nO\x03P\x07P\u042F" +
        "\nP\fP\x0EP\u0432\vP\x03P\x03P\x07P\u0436\nP\fP\x0EP\u0439\vP\x03P\x03" +
        "P\x03P\x03P\x05P\u043F\nP\x03Q\x07Q\u0442\nQ\fQ\x0EQ\u0445\vQ\x03Q\x03" +
        "Q\x03Q\x05Q\u044A\nQ\x03Q\x03Q\x03R\x03R\x03R\x03S\x03S\x03S\x07S\u0454" +
        "\nS\fS\x0ES\u0457\vS\x03T\x03T\x05T\u045B\nT\x03U\x03U\x05U\u045F\nU\x03" +
        "V\x03V\x03W\x03W\x03W\x03X\x07X\u0467\nX\fX\x0EX\u046A\vX\x03X\x03X\x05" +
        "X\u046E\nX\x03X\x03X\x03Y\x03Y\x03Y\x03Y\x05Y\u0476\nY\x03Z\x05Z\u0479" +
        "\nZ\x03Z\x03Z\x03Z\x05Z\u047E\nZ\x03Z\x03Z\x03[\x03[\x03\\\x03\\\x05\\" +
        "\u0486\n\\\x03\\\x05\\\u0489\n\\\x03\\\x03\\\x03]\x05]\u048E\n]\x03]\x03" +
        "]\x03]\x05]\u0493\n]\x03]\x03]\x03]\x05]\u0498\n]\x03]\x03]\x03]\x05]" +
        "\u049D\n]\x03]\x03]\x03]\x03]\x03]\x05]\u04A4\n]\x03]\x03]\x03]\x05]\u04A9" +
        "\n]\x03]\x03]\x03]\x03]\x03]\x03]\x05]\u04B1\n]\x03]\x03]\x03]\x05]\u04B6" +
        "\n]\x03]\x03]\x03]\x05]\u04BB\n]\x03^\x07^\u04BE\n^\f^\x0E^\u04C1\v^\x03" +
        "^\x03^\x03^\x05^\u04C6\n^\x03^\x03^\x03_\x03_\x05_\u04CC\n_\x03_\x05_" +
        "\u04CF\n_\x03_\x05_\u04D2\n_\x03_\x03_\x03`\x03`\x03`\x07`\u04D9\n`\f" +
        "`\x0E`\u04DC\v`\x03a\x07a\u04DF\na\fa\x0Ea\u04E2\va\x03a\x03a\x03a\x05" +
        "a\u04E7\na\x03a\x05a\u04EA\na\x03a\x05a\u04ED\na\x03b\x03b\x03c\x03c\x07" +
        "c\u04F3\nc\fc\x0Ec\u04F6\vc\x03d\x03d\x05d\u04FA\nd\x03e\x07e\u04FD\n" +
        "e\fe\x0Ee\u0500\ve\x03e\x03e\x03e\x05e\u0505\ne\x03e\x05e\u0508\ne\x03" +
        "e\x03e\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x05f\u0513\nf\x03g\x03g\x03" +
        "g\x03h\x03h\x07h\u051A\nh\fh\x0Eh\u051D\vh\x03h\x03h\x03i\x03i\x03i\x03" +
        "i\x03i\x05i\u0526\ni\x03j\x07j\u0529\nj\fj\x0Ej\u052C\vj\x03j\x03j\x03" +
        "j\x03j\x03k\x03k\x03k\x03k\x05k\u0536\nk\x03l\x07l\u0539\nl\fl\x0El\u053C" +
        "\vl\x03l\x03l\x03l\x03m\x03m\x03m\x03m\x03m\x03m\x05m\u0547\nm\x03n\x07" +
        "n\u054A\nn\fn\x0En\u054D\vn\x03n\x03n\x03n\x03n\x03n\x03o\x03o\x07o\u0556" +
        "\no\fo\x0Eo\u0559\vo\x03o\x03o\x03p\x03p\x03p\x03p\x03p\x05p\u0562\np" +
        "\x03q\x07q\u0565\nq\fq\x0Eq\u0568\vq\x03q\x03q\x03q\x03q\x03q\x05q\u056F" +
        "\nq\x03q\x05q\u0572\nq\x03q\x03q\x03r\x03r\x03r\x05r\u0579\nr\x03s\x03" +
        "s\x03s\x03t\x03t\x03t\x05t\u0581\nt\x03u\x03u\x03u\x03u\x05u\u0587\nu" +
        "\x03u\x03u\x03v\x03v\x03v\x07v\u058E\nv\fv\x0Ev\u0591\vv\x03w\x03w\x03" +
        "w\x03w\x03x\x03x\x03x\x05x\u059A\nx\x03y\x03y\x05y\u059E\ny\x03y\x05y" +
        "\u05A1\ny\x03y\x03y\x03z\x03z\x03z\x07z\u05A8\nz\fz\x0Ez\u05AB\vz\x03" +
        "{\x03{\x03{\x03|\x03|\x03|\x03|\x03|\x03|\x03}\x03}\x05}\u05B8\n}\x03" +
        "}\x05}\u05BB\n}\x03}\x03}\x03~\x03~\x03~\x07~\u05C2\n~\f~\x0E~\u05C5\v" +
        "~\x03\x7F\x03\x7F\x05\x7F\u05C9\n\x7F\x03\x7F\x03\x7F\x03\x80\x06\x80" +
        "\u05CE\n\x80\r\x80\x0E\x80\u05CF\x03\x81\x03\x81\x03\x81\x05\x81\u05D5" +
        "\n\x81\x03\x82\x03\x82\x03\x82\x03\x83\x07\x83\u05DB\n\x83\f\x83\x0E\x83" +
        "\u05DE\v\x83\x03\x83\x03\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x84\x03" +
        "\x84\x03\x84\x05\x84\u05E9\n\x84\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85" +
        "\x05\x85\u05F0\n\x85\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03" +
        "\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x05\x86\u05FE\n\x86\x03\x87" +
        "\x03\x87\x03\x88\x03\x88\x03\x88\x03\x88\x03\x89\x03\x89\x03\x89\x03\x89" +
        "\x03\x8A\x03\x8A\x03\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B" +
        "\x03\x8B\x05\x8B\u0614\n\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03" +
        "\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03" +
        "\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8F\x03" +
        "\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x05" +
        "\x8F\u0636\n\x8F\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x91" +
        "\x03\x91\x07\x91\u0640\n\x91\f\x91\x0E\x91\u0643\v\x91\x03\x91\x07\x91" +
        "\u0646\n\x91\f\x91\x0E\x91\u0649\v\x91\x03\x91\x03\x91\x03\x92\x03\x92" +
        "\x03\x92\x03\x93\x03\x93\x07\x93\u0652\n\x93\f\x93\x0E\x93\u0655\v\x93" +
        "\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94" +
        "\x03\x94\x05\x94\u0661\n\x94\x03\x95\x03\x95\x03\x96\x03\x96\x03\x96\x03" +
        "\x96\x03\x96\x03\x96\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03" +
        "\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x99\x03" +
        "\x99\x05\x99\u067B\n\x99\x03\x9A\x03\x9A\x05\x9A\u067F\n\x9A\x03\x9B\x03" +
        "\x9B\x03\x9B\x05\x9B\u0684\n\x9B\x03\x9B\x03\x9B\x05\x9B\u0688\n\x9B\x03" +
        "\x9B\x03\x9B\x05\x9B\u068C\n\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9C\x03\x9C" +
        "\x03\x9C\x05\x9C\u0694\n\x9C\x03\x9C\x03\x9C\x05\x9C\u0698\n\x9C\x03\x9C" +
        "\x03\x9C\x05\x9C\u069C\n\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x05" +
        "\x9D\u06A3\n\x9D\x03\x9E\x03\x9E\x03\x9F\x03\x9F\x03\x9F\x07\x9F\u06AA" +
        "\n\x9F\f\x9F\x0E\x9F\u06AD\v\x9F\x03\xA0\x03\xA0\x03\xA0\x07\xA0\u06B2" +
        "\n\xA0\f\xA0\x0E\xA0\u06B5\v\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0" +
        "\x03\xA0\x03\xA0\x03\xA1\x03\xA1\x03\xA1\x07\xA1\u06C1\n\xA1\f\xA1\x0E" +
        "\xA1\u06C4\v\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1" +
        "\x03\xA2\x03\xA2\x05\xA2\u06CF\n\xA2\x03\xA2\x03\xA2\x03\xA3\x03\xA3\x05" +
        "\xA3\u06D5\n\xA3\x03\xA3\x03\xA3\x03\xA4\x03\xA4\x05\xA4\u06DB\n\xA4\x03" +
        "\xA4\x03\xA4\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA6\x03\xA6\x03\xA6\x03" +
        "\xA6\x03\xA6\x03\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03" +
        "\xA7\x05\xA7\u06F0\n\xA7\x03\xA7\x03\xA7\x03\xA7\x05\xA7\u06F5\n\xA7\x03" +
        "\xA8\x03\xA8\x07\xA8\u06F9\n\xA8\f\xA8\x0E\xA8\u06FC\v\xA8\x03\xA9\x03" +
        "\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xAA\x07\xAA\u0705\n\xAA\f\xAA" +
        "\x0E\xAA\u0708\v\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03\xAB\x07" +
        "\xAB\u0710\n\xAB\f\xAB\x0E\xAB\u0713\v\xAB\x03\xAC\x03\xAC\x03\xAC\x03" +
        "\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u071C\n\xAD\x03\xAD\x05\xAD\u071F" +
        "\n\xAD\x03\xAE\x03\xAE\x03\xAE\x05\xAE\u0724\n\xAE\x03\xAE\x03\xAE\x03" +
        "\xAF\x03\xAF\x03\xAF\x07\xAF\u072B\n\xAF\f\xAF\x0E\xAF\u072E\v\xAF\x03" +
        "\xB0\x07\xB0\u0731\n\xB0\f\xB0\x0E\xB0\u0734\v\xB0\x03\xB0\x03\xB0\x03" +
        "\xB0\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x05\xB1\u073D\n\xB1\x03\xB1\x07\xB1" +
        "\u0740\n\xB1\f\xB1\x0E\xB1\u0743\v\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2" +
        "\x07\xB2\u0749\n\xB2\f\xB2\x0E\xB2\u074C\v\xB2\x03\xB2\x03\xB2\x03\xB2" +
        "\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2" +
        "\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x05\xB2" +
        "\u0762\n\xB2\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x07\xB4\u076A" +
        "\n\xB4\f\xB4\x0E\xB4\u076D\v\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4" +
        "\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4" +
        "\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u0782\n\xB4\x03\xB5\x03" +
        "\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0789\n\xB5\x03\xB6\x03\xB6\x03\xB7" +
        "\x03\xB7\x03\xB7\x03\xB7\x05\xB7\u0791\n\xB7\x03\xB8\x03\xB8\x03\xB8\x03" +
        "\xB8\x07\xB8\u0797\n\xB8\f\xB8\x0E\xB8\u079A\v\xB8\x03\xB8\x03\xB8\x03" +
        "\xB8\x03\xB8\x03\xB8\x03\xB8\x07\xB8\u07A2\n\xB8\f\xB8\x0E\xB8\u07A5\v" +
        "\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03" +
        "\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03" +
        "\xB8\x03\xB8\x03\xB8\x05\xB8\u07BB\n\xB8\x03\xB9\x03\xB9\x03\xBA\x03\xBA" +
        "\x03\xBA\x03\xBA\x07\xBA\u07C3\n\xBA\f\xBA\x0E\xBA\u07C6\v\xBA\x03\xBA" +
        "\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x07\xBA\u07CE\n\xBA\f\xBA\x0E" +
        "\xBA\u07D1\v\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA" +
        "\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA" +
        "\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u07E6\n\xBA\x03\xBB\x03\xBB\x05\xBB\u07EA" +
        "\n\xBB\x03\xBB\x07\xBB\u07ED\n\xBB\f\xBB\x0E\xBB\u07F0\v\xBB\x03\xBB\x03" +
        "\xBB\x03\xBB\x07\xBB\u07F5\n\xBB\f\xBB\x0E\xBB\u07F8\v\xBB\x03\xBB\x07" +
        "\xBB\u07FB\n\xBB\f\xBB\x0E\xBB\u07FE\v\xBB\x03\xBB\x05\xBB\u0801\n\xBB" +
        "\x03\xBB\x03\xBB\x05\xBB\u0805\n\xBB\x03\xBB\x03\xBB\x05\xBB\u0809\n\xBB" +
        "\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u080F\n\xBB\x03\xBB\x07\xBB\u0812" +
        "\n\xBB\f\xBB\x0E\xBB\u0815\v\xBB\x03\xBB\x03\xBB\x05\xBB\u0819\n\xBB\x03" +
        "\xBB\x03\xBB\x05\xBB\u081D\n\xBB\x03\xBB\x03\xBB\x05\xBB\u0821\n\xBB\x03" +
        "\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u0827\n\xBB\x03\xBB\x07\xBB\u082A" +
        "\n\xBB\f\xBB\x0E\xBB\u082D\v\xBB\x03\xBB\x03\xBB\x05\xBB\u0831\n\xBB\x03" +
        "\xBB\x03\xBB\x05\xBB\u0835\n\xBB\x03\xBB\x03\xBB\x05\xBB\u0839\n\xBB\x05" +
        "\xBB\u083B\n\xBB\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u0840\n\xBC\x03\xBC\x07" +
        "\xBC\u0843\n\xBC\f\xBC\x0E\xBC\u0846\v\xBC\x03\xBC\x03\xBC\x05\xBC\u084A" +
        "\n\xBC\x03\xBC\x03\xBC\x05\xBC\u084E\n\xBC\x03\xBC\x03\xBC\x05\xBC\u0852" +
        "\n\xBC\x03\xBD\x03\xBD\x05\xBD\u0856\n\xBD\x03\xBD\x07\xBD\u0859\n\xBD" +
        "\f\xBD\x0E\xBD\u085C\v\xBD\x03\xBD\x03\xBD\x03\xBD\x07\xBD\u0861\n\xBD" +
        "\f\xBD\x0E\xBD\u0864\v\xBD\x03\xBD\x07\xBD\u0867\n\xBD\f\xBD\x0E\xBD\u086A" +
        "\v\xBD\x03\xBD\x05\xBD\u086D\n\xBD\x03\xBD\x03\xBD\x05\xBD\u0871\n\xBD" +
        "\x03\xBD\x03\xBD\x05\xBD\u0875\n\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x05" +
        "\xBD\u087B\n\xBD\x03\xBD\x07\xBD\u087E\n\xBD\f\xBD\x0E\xBD\u0881\v\xBD" +
        "\x03\xBD\x03\xBD\x05\xBD\u0885\n\xBD\x03\xBD\x03\xBD\x05\xBD\u0889\n\xBD" +
        "\x03\xBD\x03\xBD\x05\xBD\u088D\n\xBD\x05\xBD\u088F\n\xBD\x03\xBE\x03\xBE" +
        "\x03\xBE\x05\xBE\u0894\n\xBE\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03" +
        "\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u08A3" +
        "\n\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1" +
        "\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x05\xC1\u08B1\n\xC1\x03\xC2\x03\xC2\x03" +
        "\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x05\xC2\u08BD" +
        "\n\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x07\xC2\u08C4\n\xC2\f\xC2" +
        "\x0E\xC2\u08C7\v\xC2\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03" +
        "\xC3\x03\xC3\x03\xC3\x03\xC3\x07\xC3\u08D3\n\xC3\f\xC3\x0E\xC3\u08D6\v" +
        "\xC3\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03" +
        "\xC4\x03\xC4\x05\xC4\u08E2\n\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4" +
        "\x07\xC4\u08E9\n\xC4\f\xC4\x0E\xC4\u08EC\v\xC4\x03\xC5\x03\xC5\x03\xC5" +
        "\x05\xC5\u08F1\n\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u08F8" +
        "\n\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u08FD\n\xC5\x03\xC5\x03\xC5\x03" +
        "\xC5\x03\xC5\x03\xC5\x05\xC5\u0904\n\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5" +
        "\u0909\n\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u0910\n\xC5" +
        "\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u0915\n\xC5\x03";
    Java8Parser._serializedATNSegment1 = "\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u091C\n\xC5\x03\xC5\x03\xC5" +
        "\x03\xC5\x05\xC5\u0921\n\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03" +
        "\xC5\x05\xC5\u0929\n\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u092E\n\xC5\x03" +
        "\xC5\x03\xC5\x05\xC5\u0932\n\xC5\x03\xC6\x03\xC6\x05\xC6\u0936\n\xC6\x03" +
        "\xC6\x03\xC6\x03\xC6\x05\xC6\u093B\n\xC6\x03\xC6\x03\xC6\x03\xC7\x03\xC7" +
        "\x03\xC7\x05\xC7\u0942\n\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x05" +
        "\xC7\u0949\n\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u094E\n\xC7\x03\xC7\x03" +
        "\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u0955\n\xC7\x03\xC7\x03\xC7\x03\xC7" +
        "\x05\xC7\u095A\n\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u0961" +
        "\n\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u0966\n\xC7\x03\xC7\x03\xC7\x03" +
        "\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u096E\n\xC7\x03\xC7\x03\xC7\x03\xC7" +
        "\x05\xC7\u0973\n\xC7\x03\xC7\x03\xC7\x05\xC7\u0977\n\xC7\x03\xC8\x03\xC8" +
        "\x03\xC8\x07\xC8\u097C\n\xC8\f\xC8\x0E\xC8\u097F\v\xC8\x03\xC9\x03\xC9" +
        "\x03\xC9\x05\xC9\u0984\n\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x05" +
        "\xC9\u098B\n\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u0992" +
        "\n\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u0999\n\xC9\x03" +
        "\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u09A1\n\xC9\x03\xC9" +
        "\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u09A8\n\xC9\x03\xC9\x03\xC9\x03" +
        "\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u09B0\n\xC9\x03\xCA\x03\xCA\x05\xCA" +
        "\u09B4\n\xCA\x03\xCA\x03\xCA\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u09BB\n\xCB" +
        "\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u09C2\n\xCB\x03\xCB\x03" +
        "\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u09C9\n\xCB\x03\xCB\x03\xCB\x03\xCB" +
        "\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u09D1\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03" +
        "\xCB\x03\xCB\x05\xCB\u09D8\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
        "\x03\xCB\x05\xCB\u09E0\n\xCB\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x05\xCC\u09E6" +
        "\n\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x05\xCC\u09EC\n\xCC\x03\xCC\x03" +
        "\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x05" +
        "\xCC\u09F8\n\xCC\x03\xCD\x03\xCD\x07\xCD\u09FC\n\xCD\f\xCD\x0E\xCD\u09FF" +
        "\v\xCD\x03\xCE\x07\xCE\u0A02\n\xCE\f\xCE\x0E\xCE\u0A05\v\xCE\x03\xCE\x03" +
        "\xCE\x03\xCE\x03\xCE\x03\xCF\x03\xCF\x03\xD0\x03\xD0\x05\xD0\u0A0F\n\xD0" +
        "\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u0A18" +
        "\n\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u0A1F\n\xD2\x03" +
        "\xD3\x03\xD3\x03\xD3\x07\xD3\u0A24\n\xD3\f\xD3\x0E\xD3\u0A27\v\xD3\x03" +
        "\xD4\x03\xD4\x05\xD4\u0A2B\n\xD4\x03\xD5\x03\xD5\x05\xD5\u0A2F\n\xD5\x03" +
        "\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u0A38\n\xD7" +
        "\x03\xD8\x03\xD8\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9" +
        "\x05\xD9\u0A43\n\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x07" +
        "\xDA\u0A4B\n\xDA\f\xDA\x0E\xDA\u0A4E\v\xDA\x03\xDB\x03\xDB\x03\xDB\x03" +
        "\xDB\x03\xDB\x03\xDB\x07\xDB\u0A56\n\xDB\f\xDB\x0E\xDB\u0A59\v\xDB\x03" +
        "\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x07\xDC\u0A61\n\xDC\f\xDC" +
        "\x0E\xDC\u0A64\v\xDC\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x07" +
        "\xDD\u0A6C\n\xDD\f\xDD\x0E\xDD\u0A6F\v\xDD\x03\xDE\x03\xDE\x03\xDE\x03" +
        "\xDE\x03\xDE\x03\xDE\x07\xDE\u0A77\n\xDE\f\xDE\x0E\xDE\u0A7A\v\xDE\x03" +
        "\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x07" +
        "\xDF\u0A85\n\xDF\f\xDF\x0E\xDF\u0A88\v\xDF\x03\xE0\x03\xE0\x03\xE0\x03" +
        "\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03" +
        "\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x07\xE0\u0A9C\n\xE0\f\xE0" +
        "\x0E\xE0\u0A9F\v\xE0\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03" +
        "\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03" +
        "\xE1\x07\xE1\u0AB1\n\xE1\f\xE1\x0E\xE1\u0AB4\v\xE1\x03\xE2\x03\xE2\x03" +
        "\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x07\xE2\u0ABF\n\xE2" +
        "\f\xE2\x0E\xE2\u0AC2\v\xE2\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03" +
        "\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x07\xE3\u0AD0\n\xE3" +
        "\f\xE3\x0E\xE3\u0AD3\v\xE3\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03" +
        "\xE4\x03\xE4\x05\xE4\u0ADC\n\xE4\x03\xE5\x03\xE5\x03\xE5\x03\xE6\x03\xE6" +
        "\x03\xE6\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0AEA" +
        "\n\xE7\x03\xE8\x03\xE8\x05\xE8\u0AEE\n\xE8\x03\xE8\x03\xE8\x07\xE8\u0AF2" +
        "\n\xE8\f\xE8\x0E\xE8\u0AF5\v\xE8\x03\xE9\x03\xE9\x03\xE9\x03\xEA\x03\xEA" +
        "\x03\xEB\x03\xEB\x03\xEB\x03\xEC\x03\xEC\x03\xED\x03\xED\x03\xED\x03\xED" +
        "\x03\xED\x03\xED\x03\xED\x03\xED\x07\xED\u0B09\n\xED\f\xED\x0E\xED\u0B0C" +
        "\v\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x07\xED\u0B14\n" +
        "\xED\f\xED\x0E\xED\u0B17\v\xED\x03\xED\x03\xED\x03\xED\x05\xED\u0B1C\n" +
        "\xED\x03\xED\x02\x02\x0F48>\u01B2\u01B4\u01B6\u01B8\u01BA\u01BC\u01BE" +
        "\u01C0\u01C2\u01C4\xEE\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02" +
        "\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02" +
        "\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02" +
        ">\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02" +
        "Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02" +
        "v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A" +
        "\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C" +
        "\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE" +
        "\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0" +
        "\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2" +
        "\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4" +
        "\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6" +
        "\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106" +
        "\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114" +
        "\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122" +
        "\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130" +
        "\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E" +
        "\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C" +
        "\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A" +
        "\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168" +
        "\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176" +
        "\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184" +
        "\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192" +
        "\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0" +
        "\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE" +
        "\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC" +
        "\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA" +
        "\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8" +
        "\x02\x02\x06\x03\x025:\x07\x02\x07\x07\n\n\x1D\x1D\x1F\x1F\'\'\x04\x02" +
        "\x10\x10\x16\x16\x04\x02DD]g\x02\u0C0F\x02\u01DA\x03\x02\x02\x02\x04\u01EA" +
        "\x03\x02\x02\x02\x06\u01EE\x03\x02\x02\x02\b\u01F0\x03\x02\x02\x02\n\u01F2" +
        "\x03\x02\x02\x02\f\u01F7\x03\x02\x02\x02\x0E\u01FB\x03\x02\x02\x02\x10" +
        "\u021A\x03\x02\x02\x02\x12\u021C\x03\x02\x02\x02\x14\u022A\x03\x02\x02" +
        "\x02\x16\u0231\x03\x02\x02\x02\x18\u0233\x03\x02\x02\x02\x1A\u0235\x03" +
        "\x02\x02\x02\x1C\u023A\x03\x02\x02\x02\x1E\u0248\x03\x02\x02\x02 \u024D" +
        "\x03\x02\x02\x02\"\u0262\x03\x02\x02\x02$\u0269\x03\x02\x02\x02&\u0275" +
        "\x03\x02\x02\x02(\u0277\x03\x02\x02\x02*\u027A\x03\x02\x02\x02,\u027E" +
        "\x03\x02\x02\x02.\u0288\x03\x02\x02\x020\u028D\x03\x02\x02\x022\u0298" +
        "\x03\x02\x02\x024\u029A\x03\x02\x02\x026\u02AA\x03\x02\x02\x028\u02AC" +
        "\x03\x02\x02\x02:\u02BC\x03\x02\x02\x02<\u02BE\x03\x02\x02\x02>\u02C0" +
        "\x03\x02\x02\x02@\u02CC\x03\x02\x02\x02B\u02DF\x03\x02\x02\x02D\u02E6" +
        "\x03\x02\x02\x02F\u02EC\x03\x02\x02\x02H\u02EE\x03\x02\x02\x02J\u02F2" +
        "\x03\x02\x02\x02L\u02F8\x03\x02\x02\x02N\u02FF\x03\x02\x02\x02P\u0309" +
        "\x03\x02\x02\x02R\u030D\x03\x02\x02\x02T\u0312\x03\x02\x02\x02V\u032A" +
        "\x03\x02\x02\x02X\u032C\x03\x02\x02\x02Z\u0330\x03\x02\x02\x02\\\u0338" +
        "\x03\x02\x02\x02^\u033B\x03\x02\x02\x02`\u033E\x03\x02\x02\x02b\u0346" +
        "\x03\x02\x02\x02d\u0353\x03\x02\x02\x02f\u035A\x03\x02\x02\x02h\u035F" +
        "\x03\x02\x02\x02j\u036E\x03\x02\x02\x02l\u0370\x03\x02\x02\x02n\u0378" +
        "\x03\x02\x02\x02p\u037D\x03\x02\x02\x02r\u0383\x03\x02\x02\x02t\u0387" +
        "\x03\x02\x02\x02v\u038B\x03\x02\x02\x02x\u0390\x03\x02\x02\x02z\u0394" +
        "\x03\x02\x02\x02|\u03AD\x03\x02\x02\x02~\u03AF\x03\x02\x02\x02\x80\u03BA" +
        "\x03\x02\x02\x02\x82\u03BE\x03\x02\x02\x02\x84\u03C0\x03\x02\x02\x02\x86" +
        "\u03C2\x03\x02\x02\x02\x88\u03C4\x03\x02\x02\x02\x8A\u03CF\x03\x02\x02" +
        "\x02\x8C\u03D4\x03\x02\x02\x02\x8E\u03E4\x03\x02\x02\x02\x90\u03F7\x03" +
        "\x02\x02\x02\x92\u03FB\x03\x02\x02\x02\x94\u03FD\x03\x02\x02\x02\x96\u040C" +
        "\x03\x02\x02\x02\x98\u041E\x03\x02\x02\x02\x9A\u0423\x03\x02\x02\x02\x9C" +
        "\u042B\x03\x02\x02\x02\x9E\u043E\x03\x02\x02\x02\xA0\u0443\x03\x02\x02" +
        "\x02\xA2\u044D\x03\x02\x02\x02\xA4\u0450\x03\x02\x02\x02\xA6\u045A\x03" +
        "\x02\x02\x02\xA8\u045E\x03\x02\x02\x02\xAA\u0460\x03\x02\x02\x02\xAC\u0462" +
        "\x03\x02\x02\x02\xAE\u0468\x03\x02\x02\x02\xB0\u0475\x03\x02\x02\x02\xB2" +
        "\u0478\x03\x02\x02\x02\xB4\u0481\x03\x02\x02\x02\xB6\u0483\x03\x02\x02" +
        "\x02\xB8\u04BA\x03\x02\x02\x02\xBA\u04BF\x03\x02\x02\x02\xBC\u04C9\x03" +
        "\x02\x02\x02\xBE\u04D5\x03\x02\x02\x02\xC0\u04E0\x03\x02\x02\x02\xC2\u04EE" +
        "\x03\x02\x02\x02\xC4\u04F0\x03\x02\x02\x02\xC6\u04F9\x03\x02\x02\x02\xC8" +
        "\u04FE\x03\x02\x02\x02\xCA\u0512\x03\x02\x02\x02\xCC\u0514\x03\x02\x02" +
        "\x02\xCE\u0517\x03\x02\x02\x02\xD0\u0525\x03\x02\x02\x02\xD2\u052A\x03" +
        "\x02\x02\x02\xD4\u0535\x03\x02\x02\x02\xD6\u053A\x03\x02\x02\x02\xD8\u0546" +
        "\x03\x02\x02\x02\xDA\u054B\x03\x02\x02\x02\xDC\u0553\x03\x02\x02\x02\xDE" +
        "\u0561\x03\x02\x02\x02\xE0\u0566\x03\x02\x02\x02\xE2\u0578\x03\x02\x02" +
        "\x02\xE4\u057A\x03\x02\x02\x02\xE6\u0580\x03\x02\x02\x02\xE8\u0582\x03" +
        "\x02\x02\x02\xEA\u058A\x03\x02\x02\x02\xEC\u0592\x03\x02\x02\x02\xEE\u0599" +
        "\x03\x02\x02\x02\xF0\u059B\x03\x02\x02\x02\xF2\u05A4\x03\x02\x02\x02\xF4" +
        "\u05AC\x03\x02\x02\x02\xF6\u05AF\x03\x02\x02\x02\xF8\u05B5\x03\x02\x02" +
        "\x02\xFA\u05BE\x03\x02\x02\x02\xFC\u05C6\x03\x02\x02\x02\xFE\u05CD\x03" +
        "\x02\x02\x02\u0100\u05D4\x03\x02\x02\x02\u0102\u05D6\x03\x02\x02\x02\u0104" +
        "\u05DC\x03\x02\x02\x02\u0106\u05E8\x03\x02\x02\x02\u0108\u05EF\x03\x02" +
        "\x02\x02\u010A\u05FD\x03\x02\x02\x02\u010C\u05FF\x03\x02\x02\x02\u010E" +
        "\u0601\x03\x02\x02\x02\u0110\u0605\x03\x02\x02\x02\u0112\u0609\x03\x02" +
        "\x02\x02\u0114\u0613\x03\x02\x02\x02\u0116\u0615\x03\x02\x02\x02\u0118" +
        "\u061B\x03\x02\x02\x02\u011A\u0623\x03\x02\x02\x02\u011C\u0635\x03\x02" +
        "\x02\x02\u011E\u0637\x03\x02\x02\x02\u0120\u063D\x03\x02\x02\x02\u0122" +
        "\u064C\x03\x02\x02\x02\u0124\u064F\x03\x02\x02\x02\u0126\u0660\x03\x02" +
        "\x02\x02\u0128\u0662\x03\x02\x02\x02\u012A\u0664\x03\x02\x02\x02\u012C" +
        "\u066A\x03\x02\x02\x02\u012E\u0670\x03\x02\x02\x02\u0130\u067A\x03\x02" +
        "\x02\x02\u0132\u067E\x03\x02\x02\x02\u0134\u0680\x03\x02\x02\x02\u0136" +
        "\u0690\x03\x02\x02\x02\u0138\u06A2\x03\x02\x02\x02\u013A\u06A4\x03\x02" +
        "\x02\x02\u013C\u06A6\x03\x02\x02\x02\u013E\u06AE\x03\x02\x02\x02\u0140" +
        "\u06BD\x03\x02\x02\x02\u0142\u06CC\x03\x02\x02\x02\u0144\u06D2\x03\x02" +
        "\x02\x02\u0146\u06D8\x03\x02\x02\x02\u0148\u06DE\x03\x02\x02\x02\u014A" +
        "\u06E2\x03\x02\x02\x02\u014C\u06F4\x03\x02\x02\x02\u014E\u06F6\x03\x02" +
        "\x02\x02\u0150\u06FD\x03\x02\x02\x02\u0152\u0706\x03\x02\x02\x02\u0154" +
        "\u070C\x03\x02\x02\x02\u0156\u0714\x03\x02\x02\x02\u0158\u0717\x03\x02" +
        "\x02\x02\u015A\u0720\x03\x02\x02\x02\u015C\u0727\x03\x02\x02\x02\u015E" +
        "\u0732\x03\x02\x02\x02\u0160\u073C\x03\x02\x02\x02\u0162\u0761\x03\x02" +
        "\x02\x02\u0164\u0763\x03\x02\x02\x02\u0166\u0781\x03\x02\x02\x02\u0168" +
        "\u0788\x03\x02\x02\x02\u016A\u078A\x03\x02\x02\x02\u016C\u0790\x03\x02" +
        "\x02\x02\u016E\u07BA\x03\x02\x02\x02\u0170\u07BC\x03\x02\x02\x02\u0172" +
        "\u07E5\x03\x02\x02\x02\u0174\u083A\x03\x02\x02\x02\u0176\u083C\x03\x02" +
        "\x02\x02\u0178\u088E\x03\x02\x02\x02\u017A\u0893\x03\x02\x02\x02\u017C" +
        "\u08A2\x03\x02\x02\x02\u017E\u08A4\x03\x02\x02\x02\u0180\u08B0\x03\x02" +
        "\x02\x02\u0182\u08BC\x03\x02\x02\x02\u0184\u08C8\x03\x02\x02\x02\u0186" +
        "\u08E1\x03\x02\x02\x02\u0188\u0931\x03\x02\x02\x02\u018A\u0933\x03\x02" +
        "\x02\x02\u018C\u0976\x03\x02\x02\x02\u018E\u0978\x03\x02\x02\x02\u0190" +
        "\u09AF\x03\x02\x02\x02\u0192\u09B1\x03\x02\x02\x02\u0194\u09DF\x03\x02" +
        "\x02\x02\u0196\u09F7\x03\x02\x02\x02\u0198\u09F9\x03\x02\x02\x02\u019A" +
        "\u0A03\x03\x02\x02\x02\u019C\u0A0A\x03\x02\x02\x02\u019E\u0A0E\x03\x02" +
        "\x02\x02\u01A0\u0A10\x03\x02\x02\x02\u01A2\u0A1E\x03\x02\x02\x02\u01A4" +
        "\u0A20\x03\x02\x02\x02\u01A6\u0A2A\x03\x02\x02\x02\u01A8\u0A2E\x03\x02" +
        "\x02\x02\u01AA\u0A30\x03\x02\x02\x02\u01AC\u0A37\x03\x02\x02\x02\u01AE" +
        "\u0A39\x03\x02\x02\x02\u01B0\u0A42\x03\x02\x02\x02\u01B2\u0A44\x03\x02" +
        "\x02\x02\u01B4\u0A4F\x03\x02\x02\x02\u01B6\u0A5A\x03\x02\x02\x02\u01B8" +
        "\u0A65\x03\x02\x02\x02\u01BA\u0A70\x03\x02\x02\x02\u01BC\u0A7B\x03\x02" +
        "\x02\x02\u01BE\u0A89\x03\x02\x02\x02\u01C0\u0AA0\x03\x02\x02\x02\u01C2" +
        "\u0AB5\x03\x02\x02\x02\u01C4\u0AC3\x03\x02\x02\x02\u01C6\u0ADB\x03\x02" +
        "\x02\x02\u01C8\u0ADD\x03\x02\x02\x02\u01CA\u0AE0\x03\x02\x02\x02\u01CC" +
        "\u0AE9\x03\x02\x02\x02\u01CE\u0AED\x03\x02\x02\x02\u01D0\u0AF6\x03\x02" +
        "\x02\x02\u01D2\u0AF9\x03\x02\x02\x02\u01D4\u0AFB\x03\x02\x02\x02\u01D6" +
        "\u0AFE\x03\x02\x02\x02\u01D8\u0B1B\x03\x02\x02\x02\u01DA\u01DB\t\x02\x02" +
        "\x02\u01DB\x03\x03\x02\x02\x02\u01DC\u01DE\x05\xE6t\x02\u01DD\u01DC\x03" +
        "\x02\x02\x02\u01DE\u01E1\x03\x02\x02\x02\u01DF\u01DD\x03\x02\x02\x02\u01DF" +
        "\u01E0\x03\x02\x02\x02\u01E0\u01E2\x03\x02\x02\x02\u01E1\u01DF\x03\x02" +
        "\x02\x02\u01E2\u01EB\x05\x06\x04\x02\u01E3\u01E5\x05\xE6t\x02\u01E4\u01E3" +
        "\x03\x02\x02\x02\u01E5\u01E8\x03\x02\x02\x02\u01E6\u01E4\x03\x02\x02\x02" +
        "\u01E6\u01E7\x03\x02\x02\x02\u01E7\u01E9\x03\x02\x02\x02\u01E8\u01E6\x03" +
        "\x02\x02\x02\u01E9\u01EB\x07\x05\x02\x02\u01EA\u01DF\x03\x02\x02\x02\u01EA" +
        "\u01E6\x03\x02\x02\x02\u01EB\x05\x03\x02\x02\x02\u01EC\u01EF\x05\b\x05" +
        "\x02\u01ED\u01EF\x05\n\x06\x02\u01EE\u01EC\x03\x02\x02\x02\u01EE\u01ED" +
        "\x03\x02\x02\x02\u01EF\x07\x03\x02\x02\x02\u01F0\u01F1\t\x03\x02\x02\u01F1" +
        "\t\x03\x02\x02\x02\u01F2\u01F3\t\x04\x02\x02\u01F3\v\x03\x02\x02\x02\u01F4" +
        "\u01F8\x05\x0E\b\x02\u01F5\u01F8\x05\x1C\x0F\x02\u01F6\u01F8\x05\x1E\x10" +
        "\x02\u01F7\u01F4\x03\x02\x02\x02\u01F7\u01F5\x03\x02\x02\x02\u01F7\u01F6" +
        "\x03\x02\x02\x02\u01F8\r\x03\x02\x02\x02\u01F9\u01FC\x05\x14\v\x02\u01FA" +
        "\u01FC\x05\x1A\x0E\x02\u01FB\u01F9\x03\x02\x02\x02\u01FB\u01FA\x03\x02" +
        "\x02\x02\u01FC\u0201\x03\x02\x02\x02\u01FD\u0200\x05\x12\n\x02\u01FE\u0200" +
        "\x05\x18\r\x02\u01FF\u01FD\x03\x02\x02\x02\u01FF\u01FE\x03\x02\x02\x02" +
        "\u0200\u0203\x03\x02\x02\x02\u0201\u01FF\x03\x02\x02\x02\u0201\u0202\x03" +
        "\x02\x02\x02\u0202\x0F\x03\x02\x02\x02\u0203\u0201\x03\x02\x02\x02\u0204" +
        "\u0206\x05\xE6t\x02\u0205\u0204\x03\x02\x02\x02\u0206\u0209\x03\x02\x02" +
        "\x02\u0207\u0205\x03\x02\x02\x02\u0207\u0208\x03\x02\x02\x02\u0208\u020A" +
        "\x03\x02\x02\x02\u0209\u0207\x03\x02\x02\x02\u020A\u020C\x07h\x02\x02" +
        "\u020B\u020D\x05*\x16\x02\u020C\u020B\x03\x02\x02\x02\u020C\u020D\x03" +
        "\x02\x02\x02\u020D\u021B\x03\x02\x02\x02\u020E\u020F\x05\x0E\b\x02\u020F" +
        "\u0213\x07C\x02\x02\u0210\u0212\x05\xE6t\x02\u0211\u0210\x03\x02\x02\x02" +
        "\u0212\u0215\x03\x02\x02\x02\u0213\u0211\x03\x02\x02\x02\u0213\u0214\x03" +
        "\x02\x02\x02\u0214\u0216\x03\x02\x02\x02\u0215\u0213\x03\x02\x02\x02\u0216" +
        "\u0218\x07h\x02\x02\u0217\u0219\x05*\x16\x02\u0218\u0217\x03\x02\x02\x02" +
        "\u0218\u0219\x03\x02\x02\x02\u0219\u021B\x03\x02\x02\x02\u021A\u0207\x03" +
        "\x02\x02\x02\u021A\u020E\x03\x02\x02\x02\u021B\x11\x03\x02\x02\x02\u021C" +
        "\u0220\x07C\x02\x02\u021D\u021F\x05\xE6t\x02\u021E\u021D\x03\x02\x02\x02" +
        "\u021F\u0222\x03\x02\x02\x02\u0220\u021E\x03\x02\x02\x02\u0220\u0221\x03" +
        "\x02\x02\x02\u0221\u0223\x03\x02\x02\x02\u0222\u0220\x03\x02\x02\x02\u0223" +
        "\u0225\x07h\x02\x02\u0224\u0226\x05*\x16\x02\u0225\u0224\x03\x02\x02\x02" +
        "\u0225\u0226\x03\x02\x02\x02\u0226\x13\x03\x02\x02\x02\u0227\u0229\x05" +
        "\xE6t\x02\u0228\u0227\x03\x02\x02\x02\u0229\u022C\x03\x02\x02\x02\u022A" +
        "\u0228\x03\x02\x02\x02\u022A\u022B\x03\x02\x02\x02\u022B\u022D\x03\x02" +
        "\x02\x02\u022C\u022A\x03\x02\x02\x02\u022D\u022F\x07h\x02\x02\u022E\u0230" +
        "\x05*\x16\x02\u022F\u022E\x03\x02\x02\x02\u022F\u0230\x03\x02\x02\x02" +
        "\u0230\x15\x03\x02\x02\x02\u0231\u0232\x05\x10\t\x02\u0232\x17\x03\x02" +
        "\x02\x02\u0233\u0234\x05\x12\n\x02\u0234\x19\x03\x02\x02\x02\u0235\u0236" +
        "\x05\x14\v\x02\u0236\x1B\x03\x02\x02\x02\u0237\u0239\x05\xE6t\x02\u0238" +
        "\u0237\x03\x02\x02\x02\u0239\u023C\x03\x02\x02\x02\u023A\u0238\x03\x02" +
        "\x02\x02\u023A\u023B\x03\x02\x02\x02\u023B\u023D\x03\x02\x02\x02\u023C" +
        "\u023A\x03\x02\x02\x02\u023D\u023E\x07h\x02\x02\u023E\x1D\x03\x02\x02" +
        "\x02\u023F\u0240\x05\x04\x03\x02\u0240\u0241\x05 \x11\x02\u0241\u0249" +
        "\x03\x02\x02\x02\u0242\u0243\x05\x0E\b\x02\u0243\u0244\x05 \x11\x02\u0244" +
        "\u0249\x03\x02\x02\x02\u0245\u0246\x05\x1C\x0F\x02\u0246\u0247\x05 \x11" +
        "\x02\u0247\u0249\x03\x02\x02\x02\u0248\u023F\x03\x02\x02\x02\u0248\u0242" +
        "\x03\x02\x02\x02\u0248\u0245\x03\x02\x02\x02\u0249\x1F\x03\x02\x02\x02" +
        "\u024A\u024C\x05\xE6t\x02\u024B\u024A\x03\x02\x02\x02\u024C\u024F\x03" +
        "\x02\x02\x02\u024D\u024B\x03\x02\x02\x02\u024D\u024E\x03\x02\x02\x02\u024E" +
        "\u0250\x03\x02\x02\x02\u024F\u024D\x03\x02\x02\x02\u0250\u0251\x07?\x02" +
        "\x02\u0251\u025C\x07@\x02\x02\u0252\u0254\x05\xE6t\x02\u0253\u0252\x03" +
        "\x02\x02\x02\u0254\u0257\x03\x02\x02\x02\u0255\u0253\x03\x02\x02\x02\u0255" +
        "\u0256\x03\x02\x02\x02\u0256\u0258\x03\x02\x02\x02\u0257\u0255\x03\x02" +
        "\x02\x02\u0258\u0259\x07?\x02\x02\u0259\u025B\x07@\x02\x02\u025A\u0255" +
        "\x03\x02\x02\x02\u025B\u025E\x03\x02\x02\x02\u025C\u025A\x03\x02\x02\x02" +
        "\u025C\u025D\x03\x02\x02\x02\u025D!\x03\x02\x02\x02\u025E\u025C\x03\x02" +
        "\x02\x02\u025F\u0261\x05$\x13\x02\u0260\u025F\x03\x02\x02\x02\u0261\u0264" +
        "\x03\x02\x02\x02\u0262\u0260\x03\x02\x02\x02\u0262\u0263\x03\x02\x02\x02" +
        "\u0263\u0265\x03\x02\x02\x02\u0264\u0262\x03\x02\x02\x02\u0265\u0267\x07" +
        "h\x02\x02\u0266\u0268\x05&\x14\x02\u0267\u0266\x03\x02\x02\x02\u0267\u0268" +
        "\x03\x02\x02\x02\u0268#\x03\x02\x02\x02\u0269\u026A\x05\xE6t\x02\u026A" +
        "%\x03\x02\x02\x02\u026B\u026C\x07\x13\x02\x02\u026C\u0276\x05\x1C\x0F" +
        "\x02\u026D\u026E\x07\x13\x02\x02\u026E\u0272\x05\x0E\b\x02\u026F\u0271" +
        "\x05(\x15\x02\u0270\u026F\x03\x02\x02\x02\u0271\u0274\x03\x02\x02\x02" +
        "\u0272\u0270\x03\x02\x02\x02\u0272\u0273\x03\x02\x02\x02\u0273\u0276\x03" +
        "\x02\x02\x02\u0274\u0272\x03\x02\x02\x02\u0275\u026B\x03\x02\x02\x02\u0275" +
        "\u026D\x03\x02\x02\x02\u0276\'\x03\x02\x02\x02\u0277\u0278\x07W\x02\x02" +
        "\u0278\u0279\x05\x16\f\x02\u0279)\x03\x02\x02\x02\u027A\u027B\x07F\x02" +
        "\x02\u027B\u027C\x05,\x17\x02\u027C\u027D\x07E\x02\x02\u027D+\x03\x02" +
        "\x02\x02\u027E\u0283\x05.\x18\x02\u027F\u0280\x07B\x02\x02\u0280\u0282" +
        "\x05.\x18\x02\u0281\u027F\x03\x02\x02\x02\u0282\u0285\x03\x02\x02\x02" +
        "\u0283\u0281\x03\x02\x02\x02\u0283\u0284\x03\x02\x02\x02\u0284-\x03\x02" +
        "\x02\x02\u0285\u0283\x03\x02\x02\x02\u0286\u0289\x05\f\x07\x02\u0287\u0289" +
        "\x050\x19\x02\u0288\u0286\x03\x02\x02\x02\u0288\u0287\x03\x02\x02\x02" +
        "\u0289/\x03\x02\x02\x02\u028A\u028C\x05\xE6t\x02\u028B\u028A\x03\x02\x02" +
        "\x02\u028C\u028F\x03\x02\x02\x02\u028D\u028B\x03\x02\x02\x02\u028D\u028E" +
        "\x03\x02\x02\x02\u028E\u0290\x03\x02\x02\x02\u028F\u028D\x03\x02\x02\x02" +
        "\u0290\u0292\x07I\x02\x02\u0291\u0293\x052\x1A\x02\u0292\u0291\x03\x02" +
        "\x02\x02\u0292\u0293\x03\x02\x02\x02\u02931\x03\x02\x02\x02\u0294\u0295" +
        "\x07\x13\x02\x02\u0295\u0299\x05\f\x07\x02\u0296\u0297\x07*\x02\x02\u0297" +
        "\u0299\x05\f\x07\x02\u0298\u0294\x03\x02\x02\x02\u0298\u0296\x03\x02\x02" +
        "\x02\u02993\x03\x02\x02\x02\u029A\u029B\b\x1B\x01\x02\u029B\u029C\x07" +
        "h\x02\x02\u029C\u02A2\x03\x02\x02\x02\u029D\u029E\f\x03\x02\x02\u029E" +
        "\u029F\x07C\x02\x02\u029F\u02A1\x07h\x02\x02\u02A0\u029D\x03\x02\x02\x02" +
        "\u02A1\u02A4\x03\x02\x02\x02\u02A2\u02A0\x03\x02\x02\x02\u02A2\u02A3\x03" +
        "\x02\x02\x02\u02A35\x03\x02\x02\x02\u02A4\u02A2\x03\x02\x02\x02\u02A5" +
        "\u02AB\x07h\x02\x02\u02A6\u02A7\x058\x1D\x02\u02A7\u02A8\x07C\x02\x02" +
        "\u02A8\u02A9\x07h\x02\x02\u02A9\u02AB\x03\x02\x02\x02\u02AA\u02A5\x03" +
        "\x02\x02\x02\u02AA\u02A6\x03\x02\x02\x02\u02AB7\x03\x02\x02\x02\u02AC" +
        "\u02AD\b\x1D\x01\x02\u02AD\u02AE\x07h\x02\x02\u02AE\u02B4\x03\x02\x02" +
        "\x02\u02AF\u02B0\f\x03\x02\x02\u02B0\u02B1\x07C\x02\x02\u02B1\u02B3\x07" +
        "h\x02\x02\u02B2\u02AF\x03\x02\x02\x02\u02B3\u02B6\x03\x02\x02\x02\u02B4" +
        "\u02B2\x03\x02\x02\x02\u02B4\u02B5\x03\x02\x02\x02\u02B59\x03\x02\x02" +
        "\x02\u02B6\u02B4\x03\x02\x02\x02\u02B7\u02BD\x07h\x02\x02\u02B8\u02B9" +
        "\x05> \x02\u02B9\u02BA\x07C\x02\x02\u02BA\u02BB\x07h\x02\x02\u02BB\u02BD" +
        "\x03\x02\x02\x02\u02BC\u02B7\x03\x02\x02\x02\u02BC\u02B8\x03\x02\x02\x02" +
        "\u02BD;\x03\x02\x02\x02\u02BE\u02BF\x07h\x02\x02\u02BF=\x03\x02\x02\x02" +
        "\u02C0\u02C1\b \x01\x02\u02C1\u02C2\x07h\x02\x02\u02C2\u02C8\x03\x02\x02" +
        "\x02\u02C3\u02C4\f\x03\x02\x02\u02C4\u02C5\x07C\x02\x02\u02C5\u02C7\x07" +
        "h\x02\x02\u02C6\u02C3\x03\x02\x02\x02\u02C7\u02CA\x03\x02\x02\x02\u02C8" +
        "\u02C6\x03\x02\x02\x02\u02C8\u02C9\x03\x02\x02\x02\u02C9?\x03\x02\x02" +
        "\x02\u02CA\u02C8\x03\x02\x02\x02\u02CB\u02CD\x05B\"\x02\u02CC\u02CB\x03" +
        "\x02\x02\x02\u02CC\u02CD\x03\x02\x02\x02\u02CD\u02D1\x03\x02\x02\x02\u02CE" +
        "\u02D0\x05F$\x02\u02CF\u02CE\x03\x02\x02\x02\u02D0\u02D3\x03\x02\x02\x02" +
        "\u02D1\u02CF\x03\x02\x02\x02\u02D1\u02D2\x03\x02\x02\x02\u02D2\u02D7\x03" +
        "\x02\x02\x02\u02D3\u02D1\x03\x02\x02\x02\u02D4\u02D6\x05P)\x02\u02D5\u02D4" +
        "\x03\x02\x02\x02\u02D6\u02D9\x03\x02\x02\x02\u02D7\u02D5\x03\x02\x02\x02" +
        "\u02D7\u02D8\x03\x02\x02\x02\u02D8\u02DA\x03\x02\x02\x02\u02D9\u02D7\x03" +
        "\x02\x02\x02\u02DA\u02DB\x07\x02\x02\x03\u02DBA\x03\x02\x02\x02\u02DC" +
        "\u02DE\x05D#\x02\u02DD\u02DC\x03\x02\x02\x02\u02DE\u02E1\x03\x02\x02\x02" +
        "\u02DF\u02DD\x03\x02\x02\x02\u02DF\u02E0\x03\x02\x02\x02\u02E0\u02E2\x03" +
        "\x02\x02\x02\u02E1\u02DF\x03\x02\x02\x02\u02E2\u02E3\x07\"\x02\x02\u02E3" +
        "\u02E4\x054\x1B\x02\u02E4\u02E5\x07A\x02\x02\u02E5C\x03\x02\x02\x02\u02E6" +
        "\u02E7\x05\xE6t\x02\u02E7E\x03\x02\x02\x02\u02E8\u02ED\x05H%\x02\u02E9" +
        "\u02ED\x05J&\x02\u02EA\u02ED\x05L\'\x02\u02EB\u02ED\x05N(\x02\u02EC\u02E8" +
        "\x03\x02\x02\x02\u02EC\u02E9\x03\x02\x02\x02\u02EC\u02EA\x03\x02\x02\x02" +
        "\u02EC\u02EB\x03\x02\x02\x02\u02EDG\x03\x02\x02\x02\u02EE\u02EF\x07\x1B" +
        "\x02\x02\u02EF\u02F0\x056\x1C\x02\u02F0\u02F1\x07A\x02\x02\u02F1";
    Java8Parser._serializedATNSegment2 = "I\x03\x02\x02\x02\u02F2\u02F3\x07\x1B\x02\x02\u02F3\u02F4\x058\x1D\x02" +
        "\u02F4\u02F5\x07C\x02\x02\u02F5\u02F6\x07U\x02\x02\u02F6\u02F7\x07A\x02" +
        "\x02\u02F7K\x03\x02\x02\x02\u02F8\u02F9\x07\x1B\x02\x02\u02F9\u02FA\x07" +
        "(\x02\x02\u02FA\u02FB\x056\x1C\x02\u02FB\u02FC\x07C\x02\x02\u02FC\u02FD" +
        "\x07h\x02\x02\u02FD\u02FE\x07A\x02\x02\u02FEM\x03\x02\x02\x02\u02FF\u0300" +
        "\x07\x1B\x02\x02\u0300\u0301\x07(\x02\x02\u0301\u0302\x056\x1C\x02\u0302" +
        "\u0303\x07C\x02\x02\u0303\u0304\x07U\x02\x02\u0304\u0305\x07A\x02\x02" +
        "\u0305O\x03\x02\x02\x02\u0306\u030A\x05R*\x02\u0307\u030A\x05\xC6d\x02" +
        "\u0308\u030A\x07A\x02\x02\u0309\u0306\x03\x02\x02\x02\u0309\u0307\x03" +
        "\x02\x02\x02\u0309\u0308\x03\x02\x02\x02\u030AQ\x03\x02\x02\x02\u030B" +
        "\u030E\x05T+\x02\u030C\u030E\x05\xBA^\x02\u030D\u030B\x03\x02\x02\x02" +
        "\u030D\u030C\x03\x02\x02\x02\u030ES\x03\x02\x02\x02\u030F\u0311\x05V," +
        "\x02\u0310\u030F\x03\x02\x02\x02\u0311\u0314\x03\x02\x02\x02\u0312\u0310" +
        "\x03\x02\x02\x02\u0312\u0313\x03\x02\x02\x02\u0313\u0315\x03\x02\x02\x02" +
        "\u0314\u0312\x03\x02\x02\x02\u0315\u0316\x07\v\x02\x02\u0316\u0318\x07" +
        "h\x02\x02\u0317\u0319\x05X-\x02\u0318\u0317\x03\x02\x02\x02\u0318\u0319" +
        "\x03\x02\x02\x02\u0319\u031B\x03\x02\x02\x02\u031A\u031C\x05\\/\x02\u031B" +
        "\u031A\x03\x02\x02\x02\u031B\u031C\x03\x02\x02\x02\u031C\u031E\x03\x02" +
        "\x02\x02\u031D\u031F\x05^0\x02\u031E\u031D\x03\x02\x02\x02\u031E\u031F" +
        "\x03\x02\x02\x02\u031F\u0320\x03\x02\x02\x02\u0320\u0321\x05b2\x02\u0321" +
        "U\x03\x02\x02\x02\u0322\u032B\x05\xE6t\x02\u0323\u032B\x07%\x02\x02\u0324" +
        "\u032B\x07$\x02\x02\u0325\u032B\x07#\x02\x02\u0326\u032B\x07\x03\x02\x02" +
        "\u0327\u032B\x07(\x02\x02\u0328\u032B\x07\x14\x02\x02\u0329\u032B\x07" +
        ")\x02\x02\u032A\u0322\x03\x02\x02\x02\u032A\u0323\x03\x02\x02\x02\u032A" +
        "\u0324\x03\x02\x02\x02\u032A\u0325\x03\x02\x02\x02\u032A\u0326\x03\x02" +
        "\x02\x02\u032A\u0327\x03\x02\x02\x02\u032A\u0328\x03\x02\x02\x02\u032A" +
        "\u0329\x03\x02\x02\x02\u032BW\x03\x02\x02\x02\u032C\u032D\x07F\x02\x02" +
        "\u032D\u032E\x05Z.\x02\u032E\u032F\x07E\x02\x02\u032FY\x03\x02\x02\x02" +
        "\u0330\u0335\x05\"\x12\x02\u0331\u0332\x07B\x02\x02\u0332\u0334\x05\"" +
        "\x12\x02\u0333\u0331\x03\x02\x02\x02\u0334\u0337\x03\x02\x02\x02\u0335" +
        "\u0333\x03\x02\x02\x02\u0335\u0336\x03\x02\x02\x02\u0336[\x03\x02\x02" +
        "\x02\u0337\u0335\x03\x02\x02\x02\u0338\u0339\x07\x13\x02\x02\u0339\u033A" +
        "\x05\x10\t\x02\u033A]\x03\x02\x02\x02\u033B\u033C\x07\x1A\x02\x02\u033C" +
        "\u033D\x05`1\x02\u033D_\x03\x02\x02\x02\u033E\u0343\x05\x16\f\x02\u033F" +
        "\u0340\x07B\x02\x02\u0340\u0342\x05\x16\f\x02\u0341\u033F\x03\x02\x02" +
        "\x02\u0342\u0345\x03\x02\x02\x02\u0343\u0341\x03\x02\x02\x02\u0343\u0344" +
        "\x03\x02\x02\x02\u0344a\x03\x02\x02\x02\u0345\u0343\x03\x02\x02\x02\u0346" +
        "\u034A\x07=\x02\x02\u0347\u0349\x05d3\x02\u0348\u0347\x03\x02\x02\x02" +
        "\u0349\u034C\x03\x02\x02\x02\u034A\u0348\x03\x02\x02\x02\u034A\u034B\x03" +
        "\x02\x02\x02\u034B\u034D\x03\x02\x02\x02\u034C\u034A\x03\x02\x02\x02\u034D" +
        "\u034E\x07>\x02\x02\u034Ec\x03\x02\x02\x02\u034F\u0354\x05f4\x02\u0350" +
        "\u0354\x05\xAAV\x02\u0351\u0354\x05\xACW\x02\u0352\u0354\x05\xAEX\x02" +
        "\u0353\u034F\x03\x02\x02\x02\u0353\u0350\x03\x02\x02\x02\u0353\u0351\x03" +
        "\x02\x02\x02\u0353\u0352\x03\x02\x02\x02\u0354e\x03\x02\x02\x02\u0355" +
        "\u035B\x05h5\x02\u0356\u035B\x05\x8CG\x02\u0357\u035B\x05R*\x02\u0358" +
        "\u035B\x05\xC6d\x02\u0359\u035B\x07A\x02\x02\u035A\u0355\x03\x02\x02\x02" +
        "\u035A\u0356\x03\x02\x02\x02\u035A\u0357\x03\x02\x02\x02\u035A\u0358\x03" +
        "\x02\x02\x02\u035A\u0359\x03\x02\x02\x02\u035Bg\x03\x02\x02\x02\u035C" +
        "\u035E\x05j6\x02\u035D\u035C\x03\x02\x02\x02\u035E\u0361\x03\x02\x02\x02" +
        "\u035F\u035D\x03\x02\x02\x02\u035F\u0360\x03\x02\x02\x02\u0360\u0362\x03" +
        "\x02\x02\x02\u0361\u035F\x03\x02\x02\x02\u0362\u0363\x05t;\x02\u0363\u0364" +
        "\x05l7\x02\u0364\u0365\x07A\x02\x02\u0365i\x03\x02\x02\x02\u0366\u036F" +
        "\x05\xE6t\x02\u0367\u036F\x07%\x02\x02\u0368\u036F\x07$\x02\x02\u0369" +
        "\u036F\x07#\x02\x02\u036A\u036F\x07(\x02\x02\u036B\u036F\x07\x14\x02\x02" +
        "\u036C\u036F\x070\x02\x02\u036D\u036F\x073\x02\x02\u036E\u0366\x03\x02" +
        "\x02\x02\u036E\u0367\x03\x02\x02\x02\u036E\u0368\x03\x02\x02\x02\u036E" +
        "\u0369\x03\x02\x02\x02\u036E\u036A\x03\x02\x02\x02\u036E\u036B\x03\x02" +
        "\x02\x02\u036E\u036C\x03\x02\x02\x02\u036E\u036D\x03\x02\x02\x02\u036F" +
        "k\x03\x02\x02\x02\u0370\u0375\x05n8\x02\u0371\u0372\x07B\x02\x02\u0372" +
        "\u0374\x05n8\x02\u0373\u0371\x03\x02\x02\x02\u0374\u0377\x03\x02\x02\x02" +
        "\u0375\u0373\x03\x02\x02\x02\u0375\u0376\x03\x02\x02\x02\u0376m\x03\x02" +
        "\x02\x02\u0377\u0375\x03\x02\x02\x02\u0378\u037B\x05p9\x02\u0379\u037A" +
        "\x07D\x02\x02\u037A\u037C\x05r:\x02\u037B\u0379\x03\x02\x02\x02\u037B" +
        "\u037C\x03\x02\x02\x02\u037Co\x03\x02\x02\x02\u037D\u037F\x07h\x02\x02" +
        "\u037E\u0380\x05 \x11\x02\u037F\u037E\x03\x02\x02\x02\u037F\u0380\x03" +
        "\x02\x02\x02\u0380q\x03\x02\x02\x02\u0381\u0384\x05\u019E\xD0\x02\u0382" +
        "\u0384\x05\xF8}\x02\u0383\u0381\x03\x02\x02\x02\u0383\u0382\x03\x02\x02" +
        "\x02\u0384s\x03\x02\x02\x02\u0385\u0388\x05v<\x02\u0386\u0388\x05x=\x02" +
        "\u0387\u0385\x03\x02\x02\x02\u0387\u0386\x03\x02\x02\x02\u0388u\x03\x02" +
        "\x02\x02\u0389\u038C\x05\x06\x04\x02\u038A\u038C\x07\x05\x02\x02\u038B" +
        "\u0389\x03\x02\x02\x02\u038B\u038A\x03\x02\x02\x02\u038Cw\x03\x02\x02" +
        "\x02\u038D\u0391\x05z>\x02\u038E\u0391\x05\x88E\x02\u038F\u0391\x05\x8A" +
        "F\x02\u0390\u038D\x03\x02\x02\x02\u0390\u038E\x03\x02\x02\x02\u0390\u038F" +
        "\x03\x02\x02\x02\u0391y\x03\x02\x02\x02\u0392\u0395\x05\x80A\x02\u0393" +
        "\u0395\x05\x86D\x02\u0394\u0392\x03\x02\x02\x02\u0394\u0393\x03\x02\x02" +
        "\x02\u0395\u039A\x03\x02\x02\x02\u0396\u0399\x05~@\x02\u0397\u0399\x05" +
        "\x84C\x02\u0398\u0396\x03\x02\x02\x02\u0398\u0397\x03\x02\x02\x02\u0399" +
        "\u039C\x03\x02\x02\x02\u039A\u0398\x03\x02\x02\x02\u039A\u039B\x03\x02" +
        "\x02\x02\u039B{\x03\x02\x02\x02\u039C\u039A\x03\x02\x02\x02\u039D\u039F" +
        "\x07h\x02\x02\u039E\u03A0\x05*\x16\x02\u039F\u039E\x03\x02\x02\x02\u039F" +
        "\u03A0\x03\x02\x02\x02\u03A0\u03AE\x03\x02\x02\x02\u03A1\u03A2\x05z>\x02" +
        "\u03A2\u03A6\x07C\x02\x02\u03A3\u03A5\x05\xE6t\x02\u03A4\u03A3\x03\x02" +
        "\x02\x02\u03A5\u03A8\x03\x02\x02\x02\u03A6\u03A4\x03\x02\x02\x02\u03A6" +
        "\u03A7\x03\x02\x02\x02\u03A7\u03A9\x03\x02\x02\x02\u03A8\u03A6\x03\x02" +
        "\x02\x02\u03A9\u03AB\x07h\x02\x02\u03AA\u03AC\x05*\x16\x02\u03AB\u03AA" +
        "\x03\x02\x02\x02\u03AB\u03AC\x03\x02\x02\x02\u03AC\u03AE\x03\x02\x02\x02" +
        "\u03AD\u039D\x03\x02\x02\x02\u03AD\u03A1\x03\x02\x02\x02\u03AE}\x03\x02" +
        "\x02\x02\u03AF\u03B3\x07C\x02\x02\u03B0\u03B2\x05\xE6t\x02\u03B1\u03B0" +
        "\x03\x02\x02\x02\u03B2\u03B5\x03\x02\x02\x02\u03B3\u03B1\x03\x02\x02\x02" +
        "\u03B3\u03B4\x03\x02\x02\x02\u03B4\u03B6\x03\x02\x02\x02\u03B5\u03B3\x03" +
        "\x02\x02\x02\u03B6\u03B8\x07h\x02\x02\u03B7\u03B9\x05*\x16\x02\u03B8\u03B7" +
        "\x03\x02\x02\x02\u03B8\u03B9\x03\x02\x02\x02\u03B9\x7F\x03\x02\x02\x02" +
        "\u03BA\u03BC\x07h\x02\x02\u03BB\u03BD\x05*\x16\x02\u03BC\u03BB\x03\x02" +
        "\x02\x02\u03BC\u03BD\x03\x02\x02\x02\u03BD\x81\x03\x02\x02\x02\u03BE\u03BF" +
        "\x05|?\x02\u03BF\x83\x03\x02\x02\x02\u03C0\u03C1\x05~@\x02\u03C1\x85\x03" +
        "\x02\x02\x02\u03C2\u03C3\x05\x80A\x02\u03C3\x87\x03\x02\x02\x02\u03C4" +
        "\u03C5\x07h\x02\x02\u03C5\x89\x03\x02\x02\x02\u03C6\u03C7\x05v<\x02\u03C7" +
        "\u03C8\x05 \x11\x02\u03C8\u03D0\x03\x02\x02\x02\u03C9\u03CA\x05z>\x02" +
        "\u03CA\u03CB\x05 \x11\x02\u03CB\u03D0\x03\x02\x02\x02\u03CC\u03CD\x05" +
        "\x88E\x02\u03CD\u03CE\x05 \x11\x02\u03CE\u03D0\x03\x02\x02\x02\u03CF\u03C6" +
        "\x03\x02\x02\x02\u03CF\u03C9\x03\x02\x02\x02\u03CF\u03CC\x03\x02\x02\x02" +
        "\u03D0\x8B\x03\x02\x02\x02\u03D1\u03D3\x05\x8EH\x02\u03D2\u03D1\x03\x02" +
        "\x02\x02\u03D3\u03D6\x03\x02\x02\x02\u03D4\u03D2\x03\x02\x02\x02\u03D4" +
        "\u03D5\x03\x02\x02\x02\u03D5\u03D7\x03\x02\x02\x02\u03D6\u03D4\x03\x02" +
        "\x02\x02\u03D7\u03D8\x05\x90I\x02\u03D8\u03D9\x05\xA8U\x02\u03D9\x8D\x03" +
        "\x02\x02\x02\u03DA\u03E5\x05\xE6t\x02\u03DB\u03E5\x07%\x02\x02\u03DC\u03E5" +
        "\x07$\x02\x02\u03DD\u03E5\x07#\x02\x02\u03DE\u03E5\x07\x03\x02\x02\u03DF" +
        "\u03E5\x07(\x02\x02\u03E0\u03E5\x07\x14\x02\x02\u03E1\u03E5\x07,\x02\x02" +
        "\u03E2\u03E5\x07 \x02\x02\u03E3\u03E5\x07)\x02\x02\u03E4\u03DA\x03\x02" +
        "\x02\x02\u03E4\u03DB\x03\x02\x02\x02\u03E4\u03DC\x03\x02\x02\x02\u03E4" +
        "\u03DD\x03\x02\x02\x02\u03E4\u03DE\x03\x02\x02\x02\u03E4\u03DF\x03\x02" +
        "\x02\x02\u03E4\u03E0\x03\x02\x02\x02\u03E4\u03E1\x03\x02\x02\x02\u03E4" +
        "\u03E2\x03\x02\x02\x02\u03E4\u03E3\x03\x02\x02\x02\u03E5\x8F\x03\x02\x02" +
        "\x02\u03E6\u03E7\x05\x92J\x02\u03E7\u03E9\x05\x94K\x02\u03E8\u03EA\x05" +
        "\xA2R\x02\u03E9\u03E8\x03\x02\x02\x02\u03E9\u03EA\x03\x02\x02\x02\u03EA" +
        "\u03F8\x03\x02\x02\x02\u03EB\u03EF\x05X-\x02\u03EC\u03EE\x05\xE6t\x02" +
        "\u03ED\u03EC\x03\x02\x02\x02\u03EE\u03F1\x03\x02\x02\x02\u03EF\u03ED\x03" +
        "\x02\x02\x02\u03EF\u03F0\x03\x02\x02\x02\u03F0\u03F2\x03\x02\x02\x02\u03F1" +
        "\u03EF\x03\x02\x02\x02\u03F2\u03F3\x05\x92J\x02\u03F3\u03F5\x05\x94K\x02" +
        "\u03F4\u03F6\x05\xA2R\x02\u03F5\u03F4\x03\x02\x02\x02\u03F5\u03F6\x03" +
        "\x02\x02\x02\u03F6\u03F8\x03\x02\x02\x02\u03F7\u03E6\x03\x02\x02\x02\u03F7" +
        "\u03EB\x03\x02\x02\x02\u03F8\x91\x03\x02\x02\x02\u03F9\u03FC\x05t;\x02" +
        "\u03FA\u03FC\x072\x02\x02\u03FB\u03F9\x03\x02\x02\x02\u03FB\u03FA\x03" +
        "\x02\x02\x02\u03FC\x93\x03\x02\x02\x02\u03FD\u03FE\x07h\x02\x02\u03FE" +
        "\u0400\x07;\x02\x02\u03FF\u0401\x05\x96L\x02\u0400\u03FF\x03\x02\x02\x02" +
        "\u0400\u0401\x03\x02\x02\x02\u0401\u0402\x03\x02\x02\x02\u0402\u0404\x07" +
        "<\x02\x02\u0403\u0405\x05 \x11\x02\u0404\u0403\x03\x02\x02\x02\u0404\u0405" +
        "\x03\x02\x02\x02\u0405\x95\x03\x02\x02\x02\u0406\u040D\x05\xA0Q\x02\u0407" +
        "\u0408\x05\x98M\x02\u0408\u0409\x07B\x02\x02\u0409\u040A\x05\x9EP\x02" +
        "\u040A\u040D\x03\x02\x02\x02\u040B\u040D\x05\x9EP\x02\u040C\u0406\x03" +
        "\x02\x02\x02\u040C\u0407\x03\x02\x02\x02\u040C\u040B\x03\x02\x02\x02\u040D" +
        "\x97\x03\x02\x02\x02\u040E\u0413\x05\x9AN\x02\u040F\u0410\x07B\x02\x02" +
        "\u0410\u0412\x05\x9AN\x02\u0411\u040F\x03\x02\x02\x02\u0412\u0415\x03" +
        "\x02\x02\x02\u0413\u0411\x03\x02\x02\x02\u0413\u0414\x03\x02\x02\x02\u0414" +
        "\u041F\x03\x02\x02\x02\u0415\u0413\x03\x02\x02\x02\u0416\u041B\x05\xA0" +
        "Q\x02\u0417\u0418\x07B\x02\x02\u0418\u041A\x05\x9AN\x02\u0419\u0417\x03" +
        "\x02\x02\x02\u041A\u041D\x03\x02\x02\x02\u041B\u0419\x03\x02\x02\x02\u041B" +
        "\u041C\x03\x02\x02\x02\u041C\u041F\x03\x02\x02\x02\u041D\u041B\x03\x02" +
        "\x02\x02\u041E\u040E\x03\x02\x02\x02\u041E\u0416\x03\x02\x02\x02\u041F" +
        "\x99\x03\x02\x02\x02\u0420\u0422\x05\x9CO\x02\u0421\u0420\x03\x02\x02" +
        "\x02\u0422\u0425\x03\x02\x02\x02\u0423\u0421\x03\x02\x02\x02\u0423\u0424" +
        "\x03\x02\x02\x02\u0424\u0426\x03\x02\x02\x02\u0425\u0423\x03\x02\x02\x02" +
        "\u0426\u0427\x05t;\x02\u0427\u0428\x05p9\x02\u0428\x9B\x03\x02\x02\x02" +
        "\u0429\u042C\x05\xE6t\x02\u042A\u042C\x07\x14\x02\x02\u042B\u0429\x03" +
        "\x02\x02\x02\u042B\u042A\x03\x02\x02\x02\u042C\x9D\x03\x02\x02\x02\u042D" +
        "\u042F\x05\x9CO\x02\u042E\u042D\x03\x02\x02\x02\u042F\u0432\x03\x02\x02" +
        "\x02\u0430\u042E\x03\x02\x02\x02\u0430\u0431\x03\x02\x02\x02\u0431\u0433" +
        "\x03\x02\x02\x02\u0432\u0430\x03\x02\x02\x02\u0433\u0437\x05t;\x02\u0434" +
        "\u0436\x05\xE6t\x02\u0435\u0434\x03\x02\x02\x02\u0436\u0439\x03\x02\x02" +
        "\x02\u0437\u0435\x03\x02\x02\x02\u0437\u0438\x03\x02\x02\x02\u0438\u043A" +
        "\x03\x02\x02\x02\u0439\u0437\x03\x02\x02\x02\u043A\u043B\x07j\x02\x02" +
        "\u043B\u043C\x05p9\x02\u043C\u043F\x03\x02\x02\x02\u043D\u043F\x05\x9A" +
        "N\x02\u043E\u0430\x03\x02\x02\x02\u043E\u043D\x03\x02\x02\x02\u043F\x9F" +
        "\x03\x02\x02\x02\u0440\u0442\x05\xE6t\x02\u0441\u0440\x03\x02\x02\x02" +
        "\u0442\u0445\x03\x02\x02\x02\u0443\u0441\x03\x02\x02\x02\u0443\u0444\x03" +
        "\x02\x02\x02\u0444\u0446\x03\x02\x02\x02\u0445\u0443\x03\x02\x02\x02\u0446" +
        "\u0449\x05t;\x02\u0447\u0448\x07h\x02\x02\u0448\u044A\x07C\x02\x02\u0449" +
        "\u0447\x03\x02\x02\x02\u0449\u044A\x03\x02\x02\x02\u044A\u044B\x03\x02" +
        "\x02\x02\u044B\u044C\x07-\x02\x02\u044C\xA1\x03\x02\x02\x02\u044D\u044E" +
        "\x07/\x02\x02\u044E\u044F\x05\xA4S\x02\u044F\xA3\x03\x02\x02\x02\u0450" +
        "\u0455\x05\xA6T\x02\u0451\u0452\x07B\x02\x02\u0452\u0454\x05\xA6T\x02" +
        "\u0453\u0451\x03\x02\x02\x02\u0454\u0457\x03\x02\x02\x02\u0455\u0453\x03" +
        "\x02\x02\x02\u0455\u0456\x03\x02\x02\x02\u0456\xA5\x03\x02\x02\x02\u0457" +
        "\u0455\x03\x02\x02\x02\u0458\u045B\x05\x10\t\x02\u0459\u045B\x05\x1C\x0F" +
        "\x02\u045A\u0458\x03\x02\x02\x02\u045A\u0459\x03\x02\x02\x02\u045B\xA7" +
        "\x03\x02\x02\x02\u045C\u045F\x05\xFC\x7F\x02\u045D\u045F\x07A\x02\x02" +
        "\u045E\u045C\x03\x02\x02\x02\u045E\u045D\x03\x02\x02\x02\u045F\xA9\x03" +
        "\x02\x02\x02\u0460\u0461\x05\xFC\x7F\x02\u0461\xAB\x03\x02\x02\x02\u0462" +
        "\u0463\x07(\x02\x02\u0463\u0464\x05\xFC\x7F\x02\u0464\xAD\x03\x02\x02" +
        "\x02\u0465\u0467\x05\xB0Y\x02\u0466\u0465\x03\x02\x02\x02\u0467\u046A" +
        "\x03\x02\x02\x02\u0468\u0466\x03\x02\x02\x02\u0468\u0469\x03\x02\x02\x02" +
        "\u0469\u046B\x03\x02\x02\x02\u046A\u0468\x03\x02\x02\x02\u046B\u046D\x05" +
        "\xB2Z\x02\u046C\u046E\x05\xA2R\x02\u046D\u046C\x03\x02\x02\x02\u046D\u046E" +
        "\x03\x02\x02\x02\u046E\u046F\x03\x02\x02\x02\u046F\u0470\x05\xB6\\\x02" +
        "\u0470\xAF\x03\x02\x02\x02\u0471\u0476\x05\xE6t\x02\u0472\u0476\x07%\x02" +
        "\x02\u0473\u0476\x07$\x02\x02\u0474\u0476\x07#\x02\x02\u0475\u0471\x03" +
        "\x02\x02\x02\u0475\u0472\x03\x02\x02\x02\u0475\u0473\x03\x02\x02\x02\u0475" +
        "\u0474\x03\x02\x02\x02\u0476\xB1\x03\x02\x02\x02\u0477\u0479\x05X-\x02" +
        "\u0478\u0477\x03\x02\x02\x02\u0478\u0479\x03\x02\x02\x02\u0479\u047A\x03" +
        "\x02\x02\x02\u047A\u047B\x05\xB4[\x02\u047B\u047D\x07;\x02\x02\u047C\u047E" +
        "\x05\x96L\x02\u047D\u047C\x03\x02\x02\x02\u047D\u047E\x03\x02\x02\x02" +
        "\u047E\u047F\x03\x02\x02\x02\u047F\u0480\x07<\x02\x02\u0480\xB3\x03\x02" +
        "\x02\x02\u0481\u0482\x07h\x02\x02\u0482\xB5\x03\x02\x02\x02\u0483\u0485" +
        "\x07=\x02\x02\u0484\u0486\x05\xB8]\x02\u0485\u0484\x03\x02\x02\x02\u0485" +
        "\u0486\x03\x02\x02\x02\u0486\u0488\x03\x02\x02\x02\u0487\u0489\x05\xFE" +
        "\x80\x02\u0488\u0487\x03\x02\x02\x02\u0488\u0489\x03\x02\x02\x02\u0489" +
        "\u048A\x03\x02\x02\x02\u048A\u048B\x07>\x02\x02\u048B\xB7\x03\x02\x02" +
        "\x02\u048C\u048E\x05*\x16\x02\u048D\u048C\x03\x02\x02\x02\u048D\u048E" +
        "\x03\x02\x02\x02\u048E\u048F\x03\x02\x02\x02\u048F\u0490\x07-\x02\x02" +
        "\u0490\u0492\x07;\x02\x02\u0491\u0493\x05\u018E\xC8\x02\u0492\u0491\x03" +
        "\x02\x02\x02\u0492\u0493\x03\x02\x02\x02\u0493\u0494\x03\x02\x02\x02\u0494" +
        "\u0495\x07<\x02\x02\u0495\u04BB\x07A\x02\x02\u0496\u0498\x05*\x16\x02" +
        "\u0497\u0496\x03\x02\x02\x02\u0497\u0498\x03\x02\x02\x02\u0498\u0499\x03" +
        "\x02\x02\x02\u0499\u049A\x07*\x02\x02\u049A\u049C\x07;\x02\x02\u049B\u049D" +
        "\x05\u018E\xC8\x02\u049C\u049B\x03\x02\x02\x02\u049C\u049D\x03\x02\x02" +
        "\x02\u049D\u049E\x03\x02\x02\x02\u049E\u049F\x07<\x02\x02\u049F\u04BB" +
        "\x07A\x02\x02\u04A0\u04A1\x05:\x1E\x02\u04A1\u04A3\x07C\x02\x02\u04A2" +
        "\u04A4\x05*\x16\x02\u04A3\u04A2\x03\x02\x02\x02\u04A3\u04A4\x03\x02\x02" +
        "\x02\u04A4\u04A5\x03\x02\x02\x02\u04A5\u04A6\x07*\x02\x02\u04A6\u04A8" +
        "\x07;\x02\x02\u04A7\u04A9\x05\u018E\xC8\x02\u04A8\u04A7\x03\x02\x02\x02" +
        "\u04A8\u04A9\x03\x02\x02\x02\u04A9\u04AA\x03\x02\x02\x02\u04AA\u04AB\x07" +
        "<\x02\x02\u04AB\u04AC\x07A\x02\x02\u04AC\u04BB\x03\x02\x02\x02\u04AD\u04AE" +
        "\x05\u0160\xB1\x02\u04AE\u04B0\x07C\x02\x02\u04AF\u04B1\x05*\x16\x02\u04B0" +
        "\u04AF\x03\x02\x02\x02\u04B0\u04B1\x03\x02\x02\x02\u04B1\u04B2\x03\x02" +
        "\x02\x02\u04B2\u04B3\x07*\x02\x02\u04B3\u04B5\x07;\x02\x02\u04B4\u04B6" +
        "\x05\u018E\xC8\x02\u04B5\u04B4\x03\x02\x02\x02\u04B5\u04B6\x03\x02\x02" +
        "\x02\u04B6\u04B7\x03\x02\x02\x02\u04B7\u04B8\x07<\x02\x02\u04B8\u04B9" +
        "\x07A\x02\x02\u04B9\u04BB\x03\x02\x02\x02\u04BA\u048D\x03\x02\x02\x02" +
        "\u04BA\u0497\x03\x02\x02\x02\u04BA\u04A0\x03\x02\x02\x02\u04BA\u04AD\x03" +
        "\x02\x02\x02\u04BB\xB9\x03\x02\x02\x02\u04BC\u04BE\x05V,\x02\u04BD\u04BC" +
        "\x03\x02\x02\x02\u04BE\u04C1\x03\x02\x02\x02\u04BF\u04BD\x03\x02\x02\x02" +
        "\u04BF\u04C0\x03\x02\x02\x02\u04C0\u04C2\x03\x02\x02\x02\u04C1\u04BF\x03" +
        "\x02\x02\x02\u04C2\u04C3\x07\x12\x02\x02\u04C3\u04C5\x07h\x02\x02\u04C4" +
        "\u04C6\x05^0\x02\u04C5\u04C4\x03\x02\x02\x02\u04C5\u04C6\x03\x02\x02\x02" +
        "\u04C6\u04C7\x03\x02\x02\x02\u04C7\u04C8\x05\xBC_\x02\u04C8\xBB\x03\x02" +
        "\x02\x02\u04C9\u04CB\x07=\x02\x02\u04CA\u04CC\x05\xBE`\x02\u04CB\u04CA" +
        "\x03\x02\x02\x02\u04CB\u04CC\x03\x02\x02\x02\u04CC\u04CE\x03\x02\x02\x02" +
        "\u04CD\u04CF\x07B\x02\x02\u04CE\u04CD\x03\x02\x02\x02\u04CE\u04CF\x03" +
        "\x02\x02\x02\u04CF\u04D1\x03\x02\x02\x02\u04D0\u04D2\x05\xC4c\x02\u04D1" +
        "\u04D0\x03\x02\x02\x02\u04D1\u04D2\x03\x02\x02\x02\u04D2\u04D3\x03\x02" +
        "\x02\x02\u04D3\u04D4\x07>\x02\x02\u04D4\xBD\x03\x02\x02\x02\u04D5\u04DA" +
        "\x05\xC0a\x02\u04D6\u04D7\x07B\x02\x02\u04D7\u04D9\x05\xC0a\x02\u04D8" +
        "\u04D6\x03\x02\x02\x02\u04D9\u04DC\x03\x02\x02\x02\u04DA\u04D8\x03\x02" +
        "\x02\x02\u04DA\u04DB\x03\x02\x02\x02\u04DB\xBF\x03\x02\x02\x02\u04DC\u04DA" +
        "\x03\x02\x02\x02\u04DD\u04DF\x05\xC2b\x02\u04DE\u04DD\x03\x02\x02\x02" +
        "\u04DF\u04E2\x03\x02\x02\x02\u04E0\u04DE\x03\x02\x02\x02\u04E0\u04E1\x03" +
        "\x02\x02\x02\u04E1\u04E3\x03\x02\x02\x02\u04E2\u04E0\x03\x02\x02\x02\u04E3" +
        "\u04E9\x07h\x02\x02\u04E4\u04E6\x07;\x02\x02\u04E5\u04E7\x05\u018E\xC8" +
        "\x02\u04E6\u04E5\x03\x02\x02\x02\u04E6\u04E7\x03\x02\x02\x02\u04E7\u04E8" +
        "\x03\x02\x02\x02\u04E8\u04EA\x07<\x02\x02\u04E9\u04E4\x03\x02\x02\x02" +
        "\u04E9\u04EA\x03\x02\x02\x02\u04EA\u04EC\x03\x02\x02\x02\u04EB\u04ED\x05" +
        "b2\x02\u04EC\u04EB\x03\x02\x02\x02\u04EC\u04ED\x03\x02\x02\x02\u04ED\xC1" +
        "\x03\x02\x02\x02\u04EE\u04EF\x05\xE6t\x02\u04EF\xC3\x03\x02\x02\x02\u04F0" +
        "\u04F4\x07A\x02\x02\u04F1\u04F3\x05d3\x02\u04F2\u04F1\x03\x02\x02\x02" +
        "\u04F3\u04F6\x03\x02\x02\x02\u04F4\u04F2\x03\x02\x02\x02\u04F4\u04F5\x03" +
        "\x02\x02\x02\u04F5\xC5\x03\x02\x02\x02\u04F6\u04F4\x03\x02\x02\x02\u04F7" +
        "\u04FA\x05\xC8e\x02\u04F8\u04FA\x05\xDAn\x02\u04F9\u04F7\x03\x02\x02\x02" +
        "\u04F9\u04F8\x03\x02\x02\x02\u04FA\xC7\x03\x02\x02\x02\u04FB\u04FD\x05" +
        "\xCAf\x02\u04FC\u04FB\x03\x02\x02\x02\u04FD\u0500\x03\x02\x02\x02\u04FE" +
        "\u04FC\x03\x02\x02\x02\u04FE\u04FF\x03\x02\x02\x02\u04FF\u0501\x03\x02" +
        "\x02\x02\u0500\u04FE\x03\x02\x02\x02\u0501\u0502\x07\x1E\x02\x02\u0502" +
        "\u0504\x07h\x02\x02\u0503\u0505\x05X-\x02\u0504\u0503\x03\x02\x02\x02" +
        "\u0504\u0505\x03\x02\x02\x02\u0505\u0507\x03\x02\x02\x02\u0506\u0508\x05" +
        "\xCCg\x02\u0507\u0506\x03\x02\x02\x02\u0507\u0508\x03\x02\x02\x02\u0508" +
        "\u0509\x03\x02\x02\x02\u0509\u050A\x05\xCEh\x02\u050A\xC9\x03\x02\x02" +
        "\x02\u050B\u0513\x05\xE6t\x02\u050C\u0513\x07%\x02\x02\u050D\u0513\x07" +
        "$\x02\x02\u050E\u0513\x07#\x02\x02\u050F\u0513\x07\x03\x02\x02\u0510\u0513" +
        "\x07(\x02\x02\u0511\u0513\x07)\x02\x02\u0512\u050B\x03\x02\x02\x02\u0512" +
        "\u050C\x03\x02\x02\x02\u0512\u050D\x03\x02\x02\x02\u0512\u050E\x03\x02" +
        "\x02\x02\u0512\u050F\x03\x02\x02\x02\u0512\u0510\x03\x02\x02\x02\u0512" +
        "\u0511\x03\x02\x02\x02\u0513\xCB\x03\x02\x02\x02\u0514\u0515\x07\x13\x02" +
        "\x02\u0515\u0516\x05`1\x02\u0516\xCD\x03\x02\x02\x02\u0517\u051B\x07=" +
        "\x02\x02\u0518\u051A\x05\xD0i\x02\u0519\u0518\x03\x02\x02\x02\u051A\u051D" +
        "\x03\x02\x02\x02\u051B\u0519\x03\x02\x02\x02\u051B\u051C\x03\x02\x02\x02" +
        "\u051C\u051E\x03\x02\x02\x02\u051D\u051B\x03\x02\x02\x02\u051E\u051F\x07" +
        ">\x02\x02\u051F\xCF\x03\x02\x02\x02\u0520\u0526\x05\xD2j\x02\u0521\u0526" +
        "\x05\xD6l\x02\u0522\u0526\x05R*\x02\u0523\u0526\x05\xC6d\x02\u0524\u0526" +
        "\x07A\x02\x02\u0525\u0520\x03\x02\x02\x02\u0525\u0521\x03\x02\x02\x02" +
        "\u0525\u0522\x03\x02\x02\x02\u0525\u0523\x03\x02\x02\x02\u0525\u0524\x03" +
        "\x02\x02\x02\u0526\xD1\x03\x02\x02\x02\u0527\u0529\x05\xD4k\x02\u0528" +
        "\u0527\x03\x02\x02\x02\u0529\u052C\x03\x02\x02\x02\u052A\u0528\x03\x02" +
        "\x02\x02\u052A\u052B\x03\x02\x02\x02\u052B\u052D\x03\x02\x02\x02\u052C" +
        "\u052A\x03\x02\x02\x02\u052D\u052E\x05t;\x02\u052E\u052F\x05l7\x02\u052F" +
        "\u0530\x07A\x02\x02\u0530\xD3\x03\x02\x02\x02\u0531\u0536\x05\xE6t\x02" +
        "\u0532\u0536\x07%\x02\x02\u0533\u0536\x07(\x02\x02\u0534\u0536\x07\x14" +
        "\x02\x02\u0535\u0531\x03\x02\x02\x02\u0535\u0532\x03\x02\x02\x02\u0535" +
        "\u0533\x03\x02\x02\x02\u0535\u0534\x03\x02\x02\x02\u0536\xD5\x03\x02\x02" +
        "\x02\u0537\u0539\x05\xD8m\x02\u0538\u0537\x03\x02\x02\x02\u0539\u053C" +
        "\x03\x02\x02\x02\u053A\u0538\x03\x02\x02\x02\u053A\u053B\x03\x02\x02\x02" +
        "\u053B\u053D\x03\x02\x02\x02\u053C\u053A\x03\x02\x02\x02\u053D\u053E\x05" +
        "\x90I\x02\u053E\u053F\x05\xA8U\x02\u053F\xD7\x03\x02\x02\x02\u0540\u0547" +
        "\x05\xE6t\x02\u0541\u0547\x07%\x02\x02\u0542\u0547\x07\x03\x02\x02\u0543" +
        "\u0547\x07\x0E\x02\x02\u0544\u0547\x07(\x02\x02\u0545\u0547\x07)\x02\x02" +
        "\u0546\u0540\x03\x02\x02\x02\u0546\u0541\x03\x02\x02\x02\u0546\u0542\x03" +
        "\x02\x02\x02\u0546\u0543\x03\x02\x02\x02\u0546\u0544\x03\x02\x02\x02\u0546" +
        "\u0545\x03\x02\x02\x02\u0547\xD9\x03\x02\x02\x02\u0548\u054A\x05\xCAf" +
        "\x02\u0549\u0548\x03\x02\x02\x02\u054A\u054D\x03\x02\x02\x02\u054B\u0549" +
        "\x03\x02\x02\x02\u054B\u054C\x03\x02\x02\x02\u054C\u054E\x03\x02\x02\x02" +
        "\u054D\u054B\x03\x02\x02\x02\u054E\u054F\x07i\x02\x02\u054F\u0550\x07" +
        "\x1E\x02\x02\u0550\u0551\x07h\x02\x02\u0551\u0552\x05\xDCo\x02\u0552\xDB" +
        "\x03\x02\x02\x02\u0553\u0557\x07=\x02\x02\u0554\u0556\x05\xDEp\x02\u0555" +
        "\u0554\x03\x02\x02\x02\u0556\u0559\x03\x02\x02\x02\u0557\u0555\x03\x02" +
        "\x02\x02\u0557\u0558\x03\x02\x02\x02\u0558\u055A\x03\x02\x02\x02\u0559" +
        "\u0557\x03\x02\x02\x02\u055A\u055B\x07>\x02\x02\u055B\xDD\x03\x02\x02" +
        "\x02\u055C\u0562\x05\xE0q\x02\u055D\u0562\x05\xD2j\x02\u055E\u0562\x05" +
        "R*\x02\u055F\u0562\x05\xC6d\x02\u0560\u0562\x07A\x02\x02\u0561\u055C\x03" +
        "\x02\x02\x02\u0561\u055D\x03\x02\x02\x02\u0561\u055E\x03\x02\x02\x02\u0561" +
        "\u055F\x03\x02\x02\x02\u0561\u0560\x03\x02\x02\x02\u0562\xDF\x03\x02\x02" +
        "\x02\u0563\u0565\x05\xE2r\x02\u0564\u0563\x03\x02\x02\x02\u0565\u0568" +
        "\x03\x02\x02\x02\u0566\u0564\x03\x02\x02\x02\u0566\u0567\x03\x02\x02\x02" +
        "\u0567\u0569\x03\x02\x02\x02\u0568\u0566\x03\x02\x02\x02\u0569\u056A\x05" +
        "t;\x02\u056A\u056B\x07h\x02\x02\u056B\u056C\x07;\x02\x02\u056C\u056E\x07" +
        "<\x02\x02\u056D\u056F\x05 \x11\x02\u056E\u056D\x03\x02\x02\x02\u056E\u056F" +
        "\x03\x02\x02\x02\u056F\u0571\x03\x02\x02\x02\u0570\u0572\x05\xE4s\x02" +
        "\u0571\u0570\x03\x02\x02\x02\u0571\u0572\x03\x02\x02\x02\u0572\u0573\x03" +
        "\x02\x02\x02\u0573\u0574\x07A\x02\x02\u0574\xE1\x03\x02\x02\x02\u0575" +
        "\u0579\x05\xE6t\x02\u0576\u0579\x07%\x02\x02\u0577\u0579\x07\x03\x02\x02" +
        "\u0578\u0575\x03\x02\x02\x02\u0578\u0576\x03\x02\x02\x02\u0578\u0577\x03" +
        "\x02\x02\x02\u0579\xE3\x03\x02\x02\x02\u057A\u057B\x07\x0E\x02\x02\u057B" +
        "\u057C\x05\xEEx\x02\u057C\xE5\x03\x02\x02\x02\u057D\u0581\x05\xE8u\x02" +
        "\u057E\u0581\x05\xF4{\x02\u057F\u0581\x05\xF6|\x02\u0580\u057D\x03\x02" +
        "\x02\x02\u0580\u057E\x03\x02\x02\x02\u0580\u057F\x03\x02\x02\x02\u0581" +
        "\xE7\x03\x02\x02\x02\u0582\u0583\x07i\x02\x02\u0583\u0584\x056\x1C\x02" +
        "\u0584\u0586\x07;\x02\x02\u0585\u0587\x05\xEAv\x02\u0586\u0585\x03\x02" +
        "\x02\x02\u0586\u0587\x03\x02\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588" +
        "\u0589\x07<\x02\x02\u0589\xE9\x03\x02\x02\x02\u058A\u058F\x05\xECw\x02" +
        "\u058B\u058C\x07B\x02\x02\u058C\u058E\x05\xECw\x02\u058D\u058B\x03\x02" +
        "\x02\x02\u058E\u0591\x03\x02\x02\x02\u058F\u058D\x03\x02\x02\x02\u058F" +
        "\u0590\x03\x02\x02\x02\u0590\xEB\x03\x02\x02\x02\u0591\u058F\x03\x02\x02" +
        "\x02\u0592\u0593\x07h\x02\x02\u0593\u0594\x07D\x02\x02\u0594\u0595\x05" +
        "\xEEx\x02\u0595\xED\x03\x02\x02\x02\u0596\u059A\x05\u01B0\xD9\x02\u0597" +
        "\u059A\x05";
    Java8Parser._serializedATNSegment3 = "\xF0y\x02\u0598\u059A\x05\xE6t\x02\u0599\u0596\x03\x02\x02\x02\u0599\u0597" +
        "\x03\x02\x02\x02\u0599\u0598\x03\x02\x02\x02\u059A\xEF\x03\x02\x02\x02" +
        "\u059B\u059D\x07=\x02\x02\u059C\u059E\x05\xF2z\x02\u059D\u059C\x03\x02" +
        "\x02\x02\u059D\u059E\x03\x02\x02\x02\u059E\u05A0\x03\x02\x02\x02\u059F" +
        "\u05A1\x07B\x02\x02\u05A0\u059F\x03\x02\x02\x02\u05A0\u05A1\x03\x02\x02" +
        "\x02\u05A1\u05A2\x03\x02\x02\x02\u05A2\u05A3\x07>\x02\x02\u05A3\xF1\x03" +
        "\x02\x02\x02\u05A4\u05A9\x05\xEEx\x02\u05A5\u05A6\x07B\x02\x02\u05A6\u05A8" +
        "\x05\xEEx\x02\u05A7\u05A5\x03\x02\x02\x02\u05A8\u05AB\x03\x02\x02\x02" +
        "\u05A9\u05A7\x03\x02\x02\x02\u05A9\u05AA\x03\x02\x02\x02\u05AA\xF3\x03" +
        "\x02\x02\x02\u05AB\u05A9\x03\x02\x02\x02\u05AC\u05AD\x07i\x02\x02\u05AD" +
        "\u05AE\x056\x1C\x02\u05AE\xF5\x03\x02\x02\x02\u05AF\u05B0\x07i\x02\x02" +
        "\u05B0\u05B1\x056\x1C\x02\u05B1\u05B2\x07;\x02\x02\u05B2\u05B3\x05\xEE" +
        "x\x02\u05B3\u05B4\x07<\x02\x02\u05B4\xF7\x03\x02\x02\x02\u05B5\u05B7\x07" +
        "=\x02\x02\u05B6\u05B8\x05\xFA~\x02\u05B7\u05B6\x03\x02\x02\x02\u05B7\u05B8" +
        "\x03\x02\x02\x02\u05B8\u05BA\x03\x02\x02\x02\u05B9\u05BB\x07B\x02\x02" +
        "\u05BA\u05B9\x03\x02\x02\x02\u05BA\u05BB\x03\x02\x02\x02\u05BB\u05BC\x03" +
        "\x02\x02\x02\u05BC\u05BD\x07>\x02\x02\u05BD\xF9\x03\x02\x02\x02\u05BE" +
        "\u05C3\x05r:\x02\u05BF\u05C0\x07B\x02\x02\u05C0\u05C2\x05r:\x02\u05C1" +
        "\u05BF\x03\x02\x02\x02\u05C2\u05C5\x03\x02\x02\x02\u05C3\u05C1\x03\x02" +
        "\x02\x02\u05C3\u05C4\x03\x02\x02\x02\u05C4\xFB\x03\x02\x02\x02\u05C5\u05C3" +
        "\x03\x02\x02\x02\u05C6\u05C8\x07=\x02\x02\u05C7\u05C9\x05\xFE\x80\x02" +
        "\u05C8\u05C7\x03\x02\x02\x02\u05C8\u05C9\x03\x02\x02\x02\u05C9\u05CA\x03" +
        "\x02\x02\x02\u05CA\u05CB\x07>\x02\x02\u05CB\xFD\x03\x02\x02\x02\u05CC" +
        "\u05CE\x05\u0100\x81\x02\u05CD\u05CC\x03\x02\x02\x02\u05CE\u05CF\x03\x02" +
        "\x02\x02\u05CF\u05CD\x03\x02\x02\x02\u05CF\u05D0\x03\x02\x02\x02\u05D0" +
        "\xFF\x03\x02\x02\x02\u05D1\u05D5\x05\u0102\x82\x02\u05D2\u05D5\x05R*\x02" +
        "\u05D3\u05D5\x05\u0106\x84\x02\u05D4\u05D1\x03\x02\x02\x02\u05D4\u05D2" +
        "\x03\x02\x02\x02\u05D4\u05D3\x03\x02\x02\x02\u05D5\u0101\x03\x02\x02\x02" +
        "\u05D6\u05D7\x05\u0104\x83\x02\u05D7\u05D8\x07A\x02\x02\u05D8\u0103\x03" +
        "\x02\x02\x02\u05D9\u05DB\x05\x9CO\x02\u05DA\u05D9\x03\x02\x02\x02\u05DB" +
        "\u05DE\x03\x02\x02\x02\u05DC\u05DA\x03\x02\x02\x02\u05DC\u05DD\x03\x02" +
        "\x02\x02\u05DD\u05DF\x03\x02\x02\x02\u05DE\u05DC\x03\x02\x02\x02\u05DF" +
        "\u05E0\x05t;\x02\u05E0\u05E1\x05l7\x02\u05E1\u0105\x03\x02\x02\x02\u05E2" +
        "\u05E9\x05\u010A\x86\x02\u05E3\u05E9\x05\u010E\x88\x02\u05E4\u05E9\x05" +
        "\u0116\x8C\x02\u05E5\u05E9\x05\u0118\x8D\x02\u05E6\u05E9\x05\u012A\x96" +
        "\x02\u05E7\u05E9\x05\u0130\x99\x02\u05E8\u05E2\x03\x02\x02\x02\u05E8\u05E3" +
        "\x03\x02\x02\x02\u05E8\u05E4\x03\x02\x02\x02\u05E8\u05E5\x03\x02\x02\x02" +
        "\u05E8\u05E6\x03\x02\x02\x02\u05E8\u05E7\x03\x02\x02\x02\u05E9\u0107\x03" +
        "\x02\x02\x02\u05EA\u05F0\x05\u010A\x86\x02\u05EB\u05F0\x05\u0110\x89\x02" +
        "\u05EC\u05F0\x05\u011A\x8E\x02\u05ED\u05F0\x05\u012C\x97\x02\u05EE\u05F0" +
        "\x05\u0132\x9A\x02\u05EF\u05EA\x03\x02\x02\x02\u05EF\u05EB\x03\x02\x02" +
        "\x02\u05EF\u05EC\x03\x02\x02\x02\u05EF\u05ED\x03\x02\x02\x02\u05EF\u05EE" +
        "\x03\x02\x02\x02\u05F0\u0109\x03\x02\x02\x02\u05F1\u05FE\x05\xFC\x7F\x02" +
        "\u05F2\u05FE\x05\u010C\x87\x02\u05F3\u05FE\x05\u0112\x8A\x02\u05F4\u05FE" +
        "\x05\u011C\x8F\x02\u05F5\u05FE\x05\u011E\x90\x02\u05F6\u05FE\x05\u012E" +
        "\x98\x02\u05F7\u05FE\x05\u0142\xA2\x02\u05F8\u05FE\x05\u0144\xA3\x02\u05F9" +
        "\u05FE\x05\u0146\xA4\x02\u05FA\u05FE\x05\u014A\xA6\x02\u05FB\u05FE\x05" +
        "\u0148\xA5\x02\u05FC\u05FE\x05\u014C\xA7\x02\u05FD\u05F1\x03\x02\x02\x02" +
        "\u05FD\u05F2\x03\x02\x02\x02\u05FD\u05F3\x03\x02\x02\x02\u05FD\u05F4\x03" +
        "\x02\x02\x02\u05FD\u05F5\x03\x02\x02\x02\u05FD\u05F6\x03\x02\x02\x02\u05FD" +
        "\u05F7\x03\x02\x02\x02\u05FD\u05F8\x03\x02\x02\x02\u05FD\u05F9\x03\x02" +
        "\x02\x02\u05FD\u05FA\x03\x02\x02\x02\u05FD\u05FB\x03\x02\x02\x02\u05FD" +
        "\u05FC\x03\x02\x02\x02\u05FE\u010B\x03\x02\x02\x02\u05FF\u0600\x07A\x02" +
        "\x02\u0600\u010D\x03\x02\x02\x02\u0601\u0602\x07h\x02\x02\u0602\u0603" +
        "\x07J\x02\x02\u0603\u0604\x05\u0106\x84\x02\u0604\u010F\x03\x02\x02\x02" +
        "\u0605\u0606\x07h\x02\x02\u0606\u0607\x07J\x02\x02\u0607\u0608\x05\u0108" +
        "\x85\x02\u0608\u0111\x03\x02\x02\x02\u0609\u060A\x05\u0114\x8B\x02\u060A" +
        "\u060B\x07A\x02\x02\u060B\u0113\x03\x02\x02\x02\u060C\u0614\x05\u01AA" +
        "\xD6\x02\u060D\u0614\x05\u01C8\xE5\x02\u060E\u0614\x05\u01CA\xE6\x02\u060F" +
        "\u0614\x05\u01D0\xE9\x02\u0610\u0614\x05\u01D4\xEB\x02\u0611\u0614\x05" +
        "\u0188\xC5\x02\u0612\u0614\x05\u0174\xBB\x02\u0613\u060C\x03\x02\x02\x02" +
        "\u0613\u060D\x03\x02\x02\x02\u0613\u060E\x03\x02\x02\x02\u0613\u060F\x03" +
        "\x02\x02\x02\u0613\u0610\x03\x02\x02\x02\u0613\u0611\x03\x02\x02\x02\u0613" +
        "\u0612\x03\x02\x02\x02\u0614\u0115\x03\x02\x02\x02\u0615\u0616\x07\x18" +
        "\x02\x02\u0616\u0617\x07;\x02\x02\u0617\u0618\x05\u019E\xD0\x02\u0618" +
        "\u0619\x07<\x02\x02\u0619\u061A\x05\u0106\x84\x02\u061A\u0117\x03\x02" +
        "\x02\x02\u061B\u061C\x07\x18\x02\x02\u061C\u061D\x07;\x02\x02\u061D\u061E" +
        "\x05\u019E\xD0\x02\u061E\u061F\x07<\x02\x02\u061F\u0620\x05\u0108\x85" +
        "\x02\u0620\u0621\x07\x11\x02\x02\u0621\u0622\x05\u0106\x84\x02\u0622\u0119" +
        "\x03\x02\x02\x02\u0623\u0624\x07\x18\x02\x02\u0624\u0625\x07;\x02\x02" +
        "\u0625\u0626\x05\u019E\xD0\x02\u0626\u0627\x07<\x02\x02\u0627\u0628\x05" +
        "\u0108\x85\x02\u0628\u0629\x07\x11\x02\x02\u0629\u062A\x05\u0108\x85\x02" +
        "\u062A\u011B\x03\x02\x02\x02\u062B\u062C\x07\x04\x02\x02\u062C\u062D\x05" +
        "\u019E\xD0\x02\u062D\u062E\x07A\x02\x02\u062E\u0636\x03\x02\x02\x02\u062F" +
        "\u0630\x07\x04\x02\x02\u0630\u0631\x05\u019E\xD0\x02\u0631\u0632\x07J" +
        "\x02\x02\u0632\u0633\x05\u019E\xD0\x02\u0633\u0634\x07A\x02\x02\u0634" +
        "\u0636\x03\x02\x02\x02\u0635\u062B\x03\x02\x02\x02\u0635\u062F\x03\x02" +
        "\x02\x02\u0636\u011D\x03\x02\x02\x02\u0637\u0638\x07+\x02\x02\u0638\u0639" +
        "\x07;\x02\x02\u0639\u063A\x05\u019E\xD0\x02\u063A\u063B\x07<\x02\x02\u063B" +
        "\u063C\x05\u0120\x91\x02\u063C\u011F\x03\x02\x02\x02\u063D\u0641\x07=" +
        "\x02\x02\u063E\u0640\x05\u0122\x92\x02\u063F\u063E\x03\x02\x02\x02\u0640" +
        "\u0643\x03\x02\x02\x02\u0641\u063F\x03\x02\x02\x02\u0641\u0642\x03\x02" +
        "\x02\x02\u0642\u0647\x03\x02\x02\x02\u0643\u0641\x03\x02\x02\x02\u0644" +
        "\u0646\x05\u0126\x94\x02\u0645\u0644\x03\x02\x02\x02\u0646\u0649\x03\x02" +
        "\x02\x02\u0647\u0645\x03\x02\x02\x02\u0647\u0648\x03\x02\x02\x02\u0648" +
        "\u064A\x03\x02\x02\x02\u0649\u0647\x03\x02\x02\x02\u064A\u064B\x07>\x02" +
        "\x02\u064B\u0121\x03\x02\x02\x02\u064C\u064D\x05\u0124\x93\x02\u064D\u064E" +
        "\x05\xFE\x80\x02\u064E\u0123\x03\x02\x02\x02\u064F\u0653\x05\u0126\x94" +
        "\x02\u0650\u0652\x05\u0126\x94\x02\u0651\u0650\x03\x02\x02\x02\u0652\u0655" +
        "\x03\x02\x02\x02\u0653\u0651\x03\x02\x02\x02\u0653\u0654\x03\x02\x02\x02" +
        "\u0654\u0125\x03\x02\x02\x02\u0655\u0653\x03\x02\x02\x02\u0656\u0657\x07" +
        "\b\x02\x02\u0657\u0658\x05\u019C\xCF\x02\u0658\u0659\x07J\x02\x02\u0659" +
        "\u0661\x03\x02\x02\x02\u065A\u065B\x07\b\x02\x02\u065B\u065C\x05\u0128" +
        "\x95\x02\u065C\u065D\x07J\x02\x02\u065D\u0661\x03\x02\x02\x02\u065E\u065F" +
        "\x07\x0E\x02\x02\u065F\u0661\x07J\x02\x02\u0660\u0656\x03\x02\x02\x02" +
        "\u0660\u065A\x03\x02\x02\x02\u0660\u065E\x03\x02\x02\x02\u0661\u0127\x03" +
        "\x02\x02\x02\u0662\u0663\x07h\x02\x02\u0663\u0129\x03\x02\x02\x02\u0664" +
        "\u0665\x074\x02\x02\u0665\u0666\x07;\x02\x02\u0666\u0667\x05\u019E\xD0" +
        "\x02\u0667\u0668\x07<\x02\x02\u0668\u0669\x05\u0106\x84\x02\u0669\u012B" +
        "\x03\x02\x02\x02\u066A\u066B\x074\x02\x02\u066B\u066C\x07;\x02\x02\u066C" +
        "\u066D\x05\u019E\xD0\x02\u066D\u066E\x07<\x02\x02\u066E\u066F\x05\u0108" +
        "\x85\x02\u066F\u012D\x03\x02\x02\x02\u0670\u0671\x07\x0F\x02\x02\u0671" +
        "\u0672\x05\u0106\x84\x02\u0672\u0673\x074\x02\x02\u0673\u0674\x07;\x02" +
        "\x02\u0674\u0675\x05\u019E\xD0\x02\u0675\u0676\x07<\x02\x02\u0676\u0677" +
        "\x07A\x02\x02\u0677\u012F\x03\x02\x02\x02\u0678\u067B\x05\u0134\x9B\x02" +
        "\u0679\u067B\x05\u013E\xA0\x02\u067A\u0678\x03\x02\x02\x02\u067A\u0679" +
        "\x03\x02\x02\x02\u067B\u0131\x03\x02\x02\x02\u067C\u067F\x05\u0136\x9C" +
        "\x02\u067D\u067F\x05\u0140\xA1\x02\u067E\u067C\x03\x02\x02\x02\u067E\u067D" +
        "\x03\x02\x02\x02\u067F\u0133\x03\x02\x02\x02\u0680\u0681\x07\x17\x02\x02" +
        "\u0681\u0683\x07;\x02\x02\u0682\u0684\x05\u0138\x9D\x02\u0683\u0682\x03" +
        "\x02\x02\x02\u0683\u0684\x03\x02\x02\x02\u0684\u0685\x03\x02\x02\x02\u0685" +
        "\u0687\x07A\x02\x02\u0686\u0688\x05\u019E\xD0\x02\u0687\u0686\x03\x02" +
        "\x02\x02\u0687\u0688\x03\x02\x02\x02\u0688\u0689\x03\x02\x02\x02\u0689" +
        "\u068B\x07A\x02\x02\u068A\u068C\x05\u013A\x9E\x02\u068B\u068A\x03\x02" +
        "\x02\x02\u068B\u068C\x03\x02\x02\x02\u068C\u068D\x03\x02\x02\x02\u068D" +
        "\u068E\x07<\x02\x02\u068E\u068F\x05\u0106\x84\x02\u068F\u0135\x03\x02" +
        "\x02\x02\u0690\u0691\x07\x17\x02\x02\u0691\u0693\x07;\x02\x02\u0692\u0694" +
        "\x05\u0138\x9D\x02\u0693\u0692\x03\x02\x02\x02\u0693\u0694\x03\x02\x02" +
        "\x02\u0694\u0695\x03\x02\x02\x02\u0695\u0697\x07A\x02\x02\u0696\u0698" +
        "\x05\u019E\xD0\x02\u0697\u0696\x03\x02\x02\x02\u0697\u0698\x03\x02\x02" +
        "\x02\u0698\u0699\x03\x02\x02\x02\u0699\u069B\x07A\x02\x02\u069A\u069C" +
        "\x05\u013A\x9E\x02\u069B\u069A\x03\x02\x02\x02\u069B\u069C\x03\x02\x02" +
        "\x02\u069C\u069D\x03\x02\x02\x02\u069D\u069E\x07<\x02\x02\u069E\u069F" +
        "\x05\u0108\x85\x02\u069F\u0137\x03\x02\x02\x02\u06A0\u06A3\x05\u013C\x9F" +
        "\x02\u06A1\u06A3\x05\u0104\x83\x02\u06A2\u06A0\x03\x02\x02\x02\u06A2\u06A1" +
        "\x03\x02\x02\x02\u06A3\u0139\x03\x02\x02\x02\u06A4\u06A5\x05\u013C\x9F" +
        "\x02\u06A5\u013B\x03\x02\x02\x02\u06A6\u06AB\x05\u0114\x8B\x02\u06A7\u06A8" +
        "\x07B\x02\x02\u06A8\u06AA\x05\u0114\x8B\x02\u06A9\u06A7\x03\x02\x02\x02" +
        "\u06AA\u06AD\x03\x02\x02\x02\u06AB\u06A9\x03\x02\x02\x02\u06AB\u06AC\x03" +
        "\x02\x02\x02\u06AC\u013D\x03\x02\x02\x02\u06AD\u06AB\x03\x02\x02\x02\u06AE" +
        "\u06AF\x07\x17\x02\x02\u06AF\u06B3\x07;\x02\x02\u06B0\u06B2\x05\x9CO\x02" +
        "\u06B1\u06B0\x03\x02\x02\x02\u06B2\u06B5\x03\x02\x02\x02\u06B3\u06B1\x03" +
        "\x02\x02\x02\u06B3\u06B4\x03\x02\x02\x02\u06B4\u06B6\x03\x02\x02\x02\u06B5" +
        "\u06B3\x03\x02\x02\x02\u06B6\u06B7\x05t;\x02\u06B7\u06B8\x05p9\x02\u06B8" +
        "\u06B9\x07J\x02\x02\u06B9\u06BA\x05\u019E\xD0\x02\u06BA\u06BB\x07<\x02" +
        "\x02\u06BB\u06BC\x05\u0106\x84\x02\u06BC\u013F\x03\x02\x02\x02\u06BD\u06BE" +
        "\x07\x17\x02\x02\u06BE\u06C2\x07;\x02\x02\u06BF\u06C1\x05\x9CO\x02\u06C0" +
        "\u06BF\x03\x02\x02\x02\u06C1\u06C4\x03\x02\x02\x02\u06C2\u06C0\x03\x02" +
        "\x02\x02\u06C2\u06C3\x03\x02\x02\x02\u06C3\u06C5\x03\x02\x02\x02\u06C4" +
        "\u06C2\x03\x02\x02\x02\u06C5\u06C6\x05t;\x02\u06C6\u06C7\x05p9\x02\u06C7" +
        "\u06C8\x07J\x02\x02\u06C8\u06C9\x05\u019E\xD0\x02\u06C9\u06CA\x07<\x02" +
        "\x02\u06CA\u06CB\x05\u0108\x85\x02\u06CB\u0141\x03\x02\x02\x02\u06CC\u06CE" +
        "\x07\x06\x02\x02\u06CD\u06CF\x07h\x02\x02\u06CE\u06CD\x03\x02\x02\x02" +
        "\u06CE\u06CF\x03\x02\x02\x02\u06CF\u06D0\x03\x02\x02\x02\u06D0\u06D1\x07" +
        "A\x02\x02\u06D1\u0143\x03\x02\x02\x02\u06D2\u06D4\x07\r\x02\x02\u06D3" +
        "\u06D5\x07h\x02\x02\u06D4\u06D3\x03\x02\x02\x02\u06D4\u06D5\x03\x02\x02" +
        "\x02\u06D5\u06D6\x03\x02\x02\x02\u06D6\u06D7\x07A\x02\x02\u06D7\u0145" +
        "\x03\x02\x02\x02\u06D8\u06DA\x07&\x02\x02\u06D9\u06DB\x05\u019E\xD0\x02" +
        "\u06DA\u06D9\x03\x02\x02\x02\u06DA\u06DB\x03\x02\x02\x02\u06DB\u06DC\x03" +
        "\x02\x02\x02\u06DC\u06DD\x07A\x02\x02\u06DD\u0147\x03\x02\x02\x02\u06DE" +
        "\u06DF\x07.\x02\x02\u06DF\u06E0\x05\u019E\xD0\x02\u06E0\u06E1\x07A\x02" +
        "\x02\u06E1\u0149\x03\x02\x02\x02\u06E2\u06E3\x07,\x02\x02\u06E3\u06E4" +
        "\x07;\x02\x02\u06E4\u06E5\x05\u019E\xD0\x02\u06E5\u06E6\x07<\x02\x02\u06E6" +
        "\u06E7\x05\xFC\x7F\x02\u06E7\u014B\x03\x02\x02\x02\u06E8\u06E9\x071\x02" +
        "\x02\u06E9\u06EA\x05\xFC\x7F\x02\u06EA\u06EB\x05\u014E\xA8\x02\u06EB\u06F5" +
        "\x03\x02\x02\x02\u06EC\u06ED\x071\x02\x02\u06ED\u06EF\x05\xFC\x7F\x02" +
        "\u06EE\u06F0\x05\u014E\xA8\x02\u06EF\u06EE\x03\x02\x02\x02\u06EF\u06F0" +
        "\x03\x02\x02\x02\u06F0\u06F1\x03\x02\x02\x02\u06F1\u06F2\x05\u0156\xAC" +
        "\x02\u06F2\u06F5\x03\x02\x02\x02\u06F3\u06F5\x05\u0158\xAD\x02\u06F4\u06E8" +
        "\x03\x02\x02\x02\u06F4\u06EC\x03\x02\x02\x02\u06F4\u06F3\x03\x02\x02\x02" +
        "\u06F5\u014D\x03\x02\x02\x02\u06F6\u06FA\x05\u0150\xA9\x02\u06F7\u06F9" +
        "\x05\u0150\xA9\x02\u06F8\u06F7\x03\x02\x02\x02\u06F9\u06FC\x03\x02\x02" +
        "\x02\u06FA\u06F8\x03\x02\x02\x02\u06FA\u06FB\x03\x02\x02\x02\u06FB\u014F" +
        "\x03\x02\x02\x02\u06FC\u06FA\x03\x02\x02\x02\u06FD\u06FE\x07\t\x02\x02" +
        "\u06FE\u06FF\x07;\x02\x02\u06FF\u0700\x05\u0152\xAA\x02\u0700\u0701\x07" +
        "<\x02\x02\u0701\u0702\x05\xFC\x7F\x02\u0702\u0151\x03\x02\x02\x02\u0703" +
        "\u0705\x05\x9CO\x02\u0704\u0703\x03\x02\x02\x02\u0705\u0708\x03\x02\x02" +
        "\x02\u0706\u0704\x03\x02\x02\x02\u0706\u0707\x03\x02\x02\x02\u0707\u0709" +
        "\x03\x02\x02\x02\u0708\u0706\x03\x02\x02\x02\u0709\u070A\x05\u0154\xAB" +
        "\x02\u070A\u070B\x05p9\x02\u070B\u0153\x03\x02\x02\x02\u070C\u0711\x05" +
        "|?\x02\u070D\u070E\x07X\x02\x02\u070E\u0710\x05\x10\t\x02\u070F\u070D" +
        "\x03\x02\x02\x02\u0710\u0713\x03\x02\x02\x02\u0711\u070F\x03\x02\x02\x02" +
        "\u0711\u0712\x03\x02\x02\x02\u0712\u0155\x03\x02\x02\x02\u0713\u0711\x03" +
        "\x02\x02\x02\u0714\u0715\x07\x15\x02\x02\u0715\u0716\x05\xFC\x7F\x02\u0716" +
        "\u0157\x03\x02\x02\x02\u0717\u0718\x071\x02\x02\u0718\u0719\x05\u015A" +
        "\xAE\x02\u0719\u071B\x05\xFC\x7F\x02\u071A\u071C\x05\u014E\xA8\x02\u071B" +
        "\u071A\x03\x02\x02\x02\u071B\u071C\x03\x02\x02\x02\u071C\u071E\x03\x02" +
        "\x02\x02\u071D\u071F\x05\u0156\xAC\x02\u071E\u071D\x03\x02\x02\x02\u071E" +
        "\u071F\x03\x02\x02\x02\u071F\u0159\x03\x02\x02\x02\u0720\u0721\x07;\x02" +
        "\x02\u0721\u0723\x05\u015C\xAF\x02\u0722\u0724\x07A\x02\x02\u0723\u0722" +
        "\x03\x02\x02\x02\u0723\u0724\x03\x02\x02\x02\u0724\u0725\x03\x02\x02\x02" +
        "\u0725\u0726\x07<\x02\x02\u0726\u015B\x03\x02\x02\x02\u0727\u072C\x05" +
        "\u015E\xB0\x02\u0728\u0729\x07A\x02\x02\u0729\u072B\x05\u015E\xB0\x02" +
        "\u072A\u0728\x03\x02\x02\x02\u072B\u072E\x03\x02\x02\x02\u072C\u072A\x03" +
        "\x02\x02\x02\u072C\u072D\x03\x02\x02\x02\u072D\u015D\x03\x02\x02\x02\u072E" +
        "\u072C\x03\x02\x02\x02\u072F\u0731\x05\x9CO\x02\u0730\u072F\x03\x02\x02" +
        "\x02\u0731\u0734\x03\x02\x02\x02\u0732\u0730\x03\x02\x02\x02\u0732\u0733" +
        "\x03\x02\x02\x02\u0733\u0735\x03\x02\x02\x02\u0734\u0732\x03\x02\x02\x02" +
        "\u0735\u0736\x05t;\x02\u0736\u0737\x05p9\x02\u0737\u0738\x07D\x02\x02" +
        "\u0738\u0739\x05\u019E\xD0\x02\u0739\u015F\x03\x02\x02\x02\u073A\u073D" +
        "\x05\u016E\xB8\x02\u073B\u073D\x05\u0196\xCC\x02\u073C\u073A\x03\x02\x02" +
        "\x02\u073C\u073B\x03\x02\x02\x02\u073D\u0741\x03\x02\x02\x02\u073E\u0740" +
        "\x05\u0168\xB5\x02\u073F\u073E\x03\x02\x02\x02\u0740\u0743\x03\x02\x02" +
        "\x02\u0741\u073F\x03\x02\x02\x02\u0741\u0742\x03\x02\x02\x02\u0742\u0161" +
        "\x03\x02\x02\x02\u0743\u0741\x03\x02\x02\x02\u0744\u0762\x05\x02\x02\x02" +
        "\u0745\u074A\x056\x1C\x02\u0746\u0747\x07?\x02\x02\u0747\u0749\x07@\x02" +
        "\x02\u0748\u0746\x03\x02\x02\x02\u0749\u074C\x03\x02\x02\x02\u074A\u0748" +
        "\x03\x02\x02\x02\u074A\u074B\x03\x02\x02\x02\u074B\u074D\x03\x02\x02\x02" +
        "\u074C\u074A\x03\x02\x02\x02\u074D\u074E\x07C\x02\x02\u074E\u074F\x07" +
        "\v\x02\x02\u074F\u0762\x03\x02\x02\x02\u0750\u0751\x072\x02\x02\u0751" +
        "\u0752\x07C\x02\x02\u0752\u0762\x07\v\x02\x02\u0753\u0762\x07-\x02\x02" +
        "\u0754\u0755\x056\x1C\x02\u0755\u0756\x07C\x02\x02\u0756\u0757\x07-\x02" +
        "\x02\u0757\u0762\x03\x02\x02\x02\u0758\u0759\x07;\x02\x02\u0759\u075A" +
        "\x05\u019E\xD0\x02\u075A\u075B\x07<\x02\x02\u075B\u0762\x03\x02\x02\x02" +
        "\u075C\u0762\x05\u0174\xBB\x02\u075D\u0762\x05\u017C\xBF\x02\u075E\u0762" +
        "\x05\u0182\xC2\x02\u075F\u0762\x05\u0188\xC5\x02\u0760\u0762\x05\u0190" +
        "\xC9\x02\u0761\u0744\x03\x02\x02\x02\u0761\u0745\x03\x02\x02\x02\u0761" +
        "\u0750\x03\x02\x02\x02\u0761\u0753\x03\x02\x02\x02\u0761\u0754\x03\x02" +
        "\x02\x02\u0761\u0758\x03\x02\x02\x02\u0761\u075C\x03\x02\x02\x02\u0761" +
        "\u075D\x03\x02\x02\x02\u0761\u075E\x03\x02\x02\x02\u0761\u075F\x03\x02" +
        "\x02\x02\u0761\u0760\x03\x02\x02\x02\u0762\u0163\x03\x02\x02\x02\u0763" +
        "\u0764\x03\x02\x02\x02\u0764\u0165\x03\x02\x02\x02\u0765\u0782\x05\x02" +
        "\x02\x02\u0766\u076B\x056\x1C\x02\u0767\u0768\x07?\x02\x02\u0768\u076A" +
        "\x07@\x02\x02\u0769\u0767\x03\x02\x02\x02\u076A\u076D\x03\x02\x02\x02" +
        "\u076B\u0769\x03\x02\x02\x02\u076B\u076C\x03\x02\x02\x02\u076C\u076E\x03" +
        "\x02\x02\x02\u076D\u076B\x03\x02\x02\x02\u076E\u076F\x07C\x02\x02\u076F" +
        "\u0770\x07\v\x02\x02\u0770\u0782\x03\x02\x02\x02\u0771\u0772\x072\x02" +
        "\x02\u0772\u0773\x07C\x02\x02\u0773\u0782\x07\v\x02\x02\u0774\u0782\x07" +
        "-\x02\x02\u0775\u0776\x056\x1C\x02\u0776\u0777\x07C\x02\x02\u0777\u0778" +
        "\x07-\x02\x02\u0778\u0782\x03\x02\x02\x02\u0779\u077A\x07;\x02\x02\u077A" +
        "\u077B\x05\u019E\xD0\x02\u077B\u077C\x07<\x02\x02\u077C\u0782\x03\x02" +
        "\x02\x02\u077D\u0782\x05\u0174\xBB\x02\u077E\u0782\x05\u017C\xBF\x02\u077F" +
        "\u0782\x05\u0188\xC5\x02\u0780\u0782\x05\u0190\xC9\x02\u0781\u0765\x03" +
        "\x02\x02\x02\u0781\u0766\x03\x02\x02\x02\u0781\u0771\x03\x02\x02\x02\u0781" +
        "\u0774\x03\x02\x02\x02\u0781\u0775\x03\x02\x02\x02\u0781\u0779\x03\x02" +
        "\x02\x02\u0781\u077D\x03\x02\x02\x02\u0781\u077E\x03\x02\x02\x02\u0781" +
        "\u077F\x03\x02\x02\x02\u0781\u0780\x03\x02\x02\x02\u0782\u0167\x03\x02" +
        "\x02\x02\u0783\u0789\x05\u0176\xBC\x02\u0784\u0789\x05\u017E\xC0\x02\u0785" +
        "\u0789\x05\u0184\xC3\x02\u0786\u0789\x05\u018A\xC6\x02\u0787\u0789\x05" +
        "\u0192\xCA\x02\u0788\u0783\x03\x02\x02\x02\u0788\u0784\x03\x02\x02\x02" +
        "\u0788\u0785\x03\x02\x02\x02\u0788\u0786\x03\x02\x02\x02\u0788\u0787\x03" +
        "\x02\x02\x02\u0789\u0169\x03\x02\x02\x02\u078A\u078B\x03\x02\x02\x02\u078B" +
        "\u016B\x03\x02\x02\x02\u078C\u0791\x05\u0176\xBC\x02\u078D\u0791\x05\u017E" +
        "\xC0\x02\u078E\u0791\x05\u018A\xC6\x02\u078F\u0791\x05\u0192\xCA\x02\u0790" +
        "\u078C\x03\x02\x02\x02\u0790\u078D\x03\x02\x02\x02\u0790\u078E\x03\x02" +
        "\x02\x02\u0790\u078F\x03\x02\x02\x02\u0791\u016D\x03\x02\x02\x02\u0792" +
        "\u07BB\x05\x02\x02\x02\u0793\u0798\x056\x1C\x02\u0794\u0795\x07?\x02\x02" +
        "\u0795\u0797\x07@\x02\x02\u0796\u0794\x03\x02\x02\x02\u0797\u079A\x03" +
        "\x02\x02\x02\u0798\u0796\x03\x02\x02\x02\u0798\u0799\x03\x02\x02\x02\u0799" +
        "\u079B\x03\x02\x02\x02\u079A\u0798\x03\x02\x02\x02\u079B\u079C\x07C\x02" +
        "\x02\u079C\u079D\x07\v\x02\x02\u079D\u07BB\x03\x02\x02\x02\u079E\u07A3" +
        "\x05v<\x02\u079F\u07A0\x07?\x02\x02\u07A0\u07A2\x07@\x02\x02\u07A1\u079F" +
        "\x03\x02\x02\x02\u07A2\u07A5\x03\x02\x02\x02\u07A3\u07A1\x03\x02\x02\x02" +
        "\u07A3\u07A4\x03\x02\x02\x02\u07A4\u07A6\x03\x02\x02\x02\u07A5\u07A3\x03" +
        "\x02\x02\x02\u07A6\u07A7\x07C\x02\x02\u07A7\u07A8\x07\v\x02\x02\u07A8" +
        "\u07BB\x03\x02\x02\x02\u07A9\u07AA\x072\x02\x02\u07AA\u07AB\x07C\x02\x02" +
        "\u07AB\u07BB\x07\v\x02\x02\u07AC\u07BB\x07-\x02\x02\u07AD\u07AE\x056\x1C" +
        "\x02\u07AE\u07AF\x07C\x02\x02\u07AF\u07B0\x07-\x02\x02\u07B0\u07BB\x03" +
        "\x02\x02\x02\u07B1\u07B2\x07;\x02\x02\u07B2\u07B3\x05\u019E\xD0\x02\u07B3" +
        "\u07B4\x07<\x02\x02\u07B4\u07BB\x03\x02\x02\x02\u07B5\u07BB\x05\u0178" +
        "\xBD\x02\u07B6\u07BB\x05\u0180\xC1\x02\u07B7\u07BB\x05\u0186\xC4\x02\u07B8" +
        "\u07BB\x05\u018C\xC7\x02\u07B9\u07BB\x05\u0194\xCB\x02\u07BA\u0792\x03" +
        "\x02\x02\x02\u07BA\u0793\x03\x02\x02\x02\u07BA\u079E\x03\x02\x02\x02\u07BA" +
        "\u07A9\x03\x02\x02\x02\u07BA\u07AC\x03\x02\x02\x02\u07BA\u07AD\x03\x02" +
        "\x02\x02\u07BA\u07B1\x03\x02\x02\x02\u07BA\u07B5\x03\x02\x02\x02\u07BA" +
        "\u07B6\x03\x02\x02\x02\u07BA\u07B7\x03\x02\x02\x02\u07BA\u07B8\x03\x02" +
        "\x02\x02\u07BA\u07B9\x03\x02\x02\x02\u07BB\u016F\x03\x02\x02\x02\u07BC" +
        "\u07BD\x03\x02\x02\x02\u07BD\u0171\x03\x02\x02\x02\u07BE\u07E6\x05\x02" +
        "\x02\x02\u07BF\u07C4\x056\x1C\x02\u07C0\u07C1\x07?\x02\x02\u07C1\u07C3" +
        "\x07@\x02\x02\u07C2\u07C0\x03\x02\x02\x02\u07C3\u07C6\x03\x02\x02\x02" +
        "\u07C4\u07C2\x03\x02\x02\x02\u07C4\u07C5\x03\x02\x02\x02\u07C5\u07C7\x03" +
        "\x02\x02\x02\u07C6\u07C4\x03\x02\x02\x02\u07C7\u07C8\x07C\x02\x02\u07C8" +
        "\u07C9\x07\v\x02\x02\u07C9\u07E6\x03\x02\x02\x02\u07CA\u07CF\x05v<\x02" +
        "\u07CB\u07CC\x07?\x02\x02\u07CC\u07CE\x07@\x02\x02\u07CD\u07CB\x03\x02" +
        "\x02\x02\u07CE\u07D1\x03\x02\x02\x02\u07CF\u07CD\x03\x02\x02\x02\u07CF" +
        "\u07D0\x03\x02\x02\x02\u07D0\u07D2\x03\x02\x02\x02\u07D1\u07CF\x03\x02" +
        "\x02\x02\u07D2\u07D3\x07C\x02\x02\u07D3\u07D4\x07\v\x02\x02\u07D4\u07E6" +
        "\x03\x02\x02\x02\u07D5\u07D6\x072\x02\x02\u07D6\u07D7\x07C\x02\x02\u07D7" +
        "\u07E6\x07\v\x02\x02\u07D8\u07E6\x07-\x02\x02\u07D9\u07DA\x056\x1C\x02" +
        "\u07DA\u07DB\x07C\x02\x02\u07DB\u07DC\x07-\x02\x02\u07DC\u07E6\x03\x02" +
        "\x02\x02\u07DD\u07DE\x07;\x02\x02\u07DE\u07DF\x05\u019E\xD0\x02\u07DF" +
        "\u07E0\x07<\x02\x02\u07E0\u07E6\x03\x02\x02\x02\u07E1\u07E6\x05\u0178" +
        "\xBD\x02\u07E2\u07E6\x05\u0180\xC1\x02\u07E3\u07E6\x05\u018C\xC7\x02\u07E4" +
        "\u07E6\x05\u0194\xCB\x02\u07E5\u07BE\x03\x02\x02\x02\u07E5\u07BF\x03\x02" +
        "\x02\x02\u07E5\u07CA\x03\x02\x02\x02\u07E5\u07D5\x03\x02\x02\x02\u07E5" +
        "\u07D8\x03\x02\x02\x02\u07E5\u07D9\x03\x02\x02\x02\u07E5\u07DD\x03\x02" +
        "\x02\x02\u07E5\u07E1\x03\x02\x02\x02\u07E5\u07E2\x03\x02\x02\x02\u07E5" +
        "\u07E3\x03\x02\x02\x02\u07E5\u07E4\x03\x02\x02\x02\u07E6\u0173\x03\x02" +
        "\x02\x02\u07E7\u07E9\x07!\x02\x02\u07E8\u07EA\x05*\x16\x02\u07E9\u07E8" +
        "\x03\x02\x02\x02\u07E9\u07EA\x03\x02\x02\x02\u07EA\u07EE\x03\x02\x02\x02" +
        "\u07EB\u07ED\x05\xE6t\x02\u07EC\u07EB\x03\x02\x02\x02\u07ED\u07F0\x03" +
        "\x02\x02\x02\u07EE\u07EC\x03\x02\x02\x02\u07EE\u07EF\x03\x02\x02\x02\u07EF" +
        "\u07F1\x03\x02\x02\x02\u07F0\u07EE\x03\x02\x02\x02\u07F1\u07FC\x07h\x02" +
        "\x02\u07F2\u07F6\x07C\x02\x02\u07F3\u07F5\x05\xE6t\x02\u07F4\u07F3\x03" +
        "\x02\x02\x02\u07F5\u07F8\x03\x02\x02\x02\u07F6\u07F4\x03\x02\x02\x02\u07F6" +
        "\u07F7\x03\x02\x02\x02\u07F7\u07F9\x03\x02\x02\x02\u07F8\u07F6\x03\x02" +
        "\x02\x02\u07F9\u07FB\x07h\x02\x02\u07FA\u07F2\x03\x02\x02\x02\u07FB\u07FE" +
        "\x03\x02\x02\x02\u07FC\u07FA\x03\x02\x02\x02\u07FC\u07FD\x03\x02\x02\x02" +
        "\u07FD\u0800\x03\x02\x02\x02\u07FE\u07FC\x03\x02\x02\x02\u07FF\u0801\x05" +
        "\u017A\xBE\x02\u0800\u07FF\x03\x02\x02\x02\u0800\u0801\x03\x02\x02\x02" +
        "\u0801\u0802\x03\x02\x02\x02\u0802\u0804\x07;\x02\x02\u0803\u0805\x05" +
        "\u018E\xC8\x02\u0804\u0803\x03\x02\x02\x02\u0804\u0805\x03\x02\x02\x02" +
        "\u0805\u0806\x03\x02\x02\x02\u0806\u0808\x07<\x02\x02\u0807\u0809\x05" +
        "b2\x02\u0808\u0807\x03\x02\x02\x02\u0808\u0809\x03\x02\x02\x02\u0809\u083B" +
        "\x03\x02\x02\x02\u080A\u080B\x05:\x1E\x02\u080B\u080C\x07C\x02\x02\u080C" +
        "\u080E\x07!\x02\x02\u080D\u080F\x05*\x16\x02\u080E\u080D\x03\x02\x02\x02" +
        "\u080E\u080F\x03\x02\x02\x02\u080F\u0813\x03\x02\x02\x02\u0810\u0812\x05" +
        "\xE6t\x02\u0811\u0810\x03\x02\x02\x02\u0812\u0815\x03\x02\x02\x02\u0813" +
        "\u0811\x03\x02\x02\x02\u0813\u0814\x03\x02\x02\x02\u0814\u0816\x03\x02" +
        "\x02\x02\u0815\u0813\x03\x02\x02\x02\u0816\u0818\x07h\x02\x02\u0817\u0819" +
        "\x05\u017A\xBE\x02\u0818\u0817\x03\x02\x02\x02\u0818\u0819\x03\x02\x02" +
        "\x02\u0819\u081A\x03\x02\x02\x02\u081A\u081C\x07;\x02\x02\u081B\u081D" +
        "\x05\u018E\xC8\x02\u081C\u081B\x03\x02\x02\x02\u081C\u081D\x03\x02\x02" +
        "\x02\u081D\u081E\x03\x02\x02\x02\u081E\u0820\x07<\x02\x02\u081F\u0821" +
        "\x05b2\x02\u0820\u081F\x03\x02\x02\x02\u0820\u0821\x03\x02\x02\x02\u0821" +
        "\u083B\x03\x02\x02\x02\u0822\u0823\x05\u0160\xB1\x02\u0823\u0824\x07C" +
        "\x02\x02\u0824\u0826\x07!\x02\x02\u0825\u0827\x05*\x16\x02\u0826\u0825" +
        "\x03\x02\x02\x02\u0826\u0827\x03\x02\x02\x02\u0827\u082B\x03\x02\x02\x02" +
        "\u0828\u082A\x05\xE6t\x02\u0829\u0828\x03\x02\x02\x02\u082A\u082D\x03" +
        "\x02\x02\x02\u082B\u0829\x03\x02\x02\x02\u082B\u082C\x03\x02\x02\x02\u082C" +
        "\u082E\x03\x02\x02\x02\u082D\u082B\x03\x02\x02\x02\u082E\u0830\x07h\x02" +
        "\x02\u082F\u0831\x05\u017A\xBE\x02\u0830\u082F\x03\x02\x02\x02\u0830\u0831" +
        "\x03\x02\x02\x02\u0831\u0832\x03\x02\x02\x02\u0832\u0834\x07;\x02\x02" +
        "\u0833\u0835\x05\u018E\xC8\x02\u0834\u0833\x03\x02\x02\x02\u0834\u0835" +
        "\x03\x02\x02\x02\u0835\u0836\x03\x02\x02\x02\u0836\u0838\x07<\x02\x02" +
        "\u0837\u0839\x05b2\x02\u0838\u0837\x03\x02\x02\x02\u0838\u0839\x03\x02" +
        "\x02\x02\u0839\u083B\x03\x02\x02\x02\u083A\u07E7\x03\x02\x02\x02\u083A" +
        "\u080A\x03\x02\x02\x02\u083A\u0822\x03\x02\x02\x02\u083B\u0175\x03\x02" +
        "\x02\x02\u083C\u083D\x07C\x02\x02\u083D\u083F\x07!\x02\x02\u083E\u0840" +
        "\x05*\x16\x02\u083F\u083E\x03\x02\x02\x02\u083F\u0840\x03\x02\x02\x02" +
        "\u0840\u0844\x03\x02\x02\x02\u0841\u0843\x05\xE6t\x02\u0842\u0841\x03" +
        "\x02\x02\x02\u0843\u0846\x03\x02\x02\x02\u0844\u0842\x03\x02\x02\x02\u0844" +
        "\u0845\x03\x02\x02\x02\u0845\u0847\x03\x02\x02";
    Java8Parser._serializedATNSegment4 = "\x02\u0846\u0844\x03\x02\x02\x02\u0847\u0849\x07h\x02\x02\u0848\u084A" +
        "\x05\u017A\xBE\x02\u0849\u0848\x03\x02\x02\x02\u0849\u084A\x03\x02\x02" +
        "\x02\u084A\u084B\x03\x02\x02\x02\u084B\u084D\x07;\x02\x02\u084C\u084E" +
        "\x05\u018E\xC8\x02\u084D\u084C\x03\x02\x02\x02\u084D\u084E\x03\x02\x02" +
        "\x02\u084E\u084F\x03\x02\x02\x02\u084F\u0851\x07<\x02\x02\u0850\u0852" +
        "\x05b2\x02\u0851\u0850\x03\x02\x02\x02\u0851\u0852\x03\x02\x02\x02\u0852" +
        "\u0177\x03\x02\x02\x02\u0853\u0855\x07!\x02\x02\u0854\u0856\x05*\x16\x02" +
        "\u0855\u0854\x03\x02\x02\x02\u0855\u0856\x03\x02\x02\x02\u0856\u085A\x03" +
        "\x02\x02\x02\u0857\u0859\x05\xE6t\x02\u0858\u0857\x03\x02\x02\x02\u0859" +
        "\u085C\x03\x02\x02\x02\u085A\u0858\x03\x02\x02\x02\u085A\u085B\x03\x02" +
        "\x02\x02\u085B\u085D\x03\x02\x02\x02\u085C\u085A\x03\x02\x02\x02\u085D" +
        "\u0868\x07h\x02\x02\u085E\u0862\x07C\x02\x02\u085F\u0861\x05\xE6t\x02" +
        "\u0860\u085F\x03\x02\x02\x02\u0861\u0864\x03\x02\x02\x02\u0862\u0860\x03" +
        "\x02\x02\x02\u0862\u0863\x03\x02\x02\x02\u0863\u0865\x03\x02\x02\x02\u0864" +
        "\u0862\x03\x02\x02\x02\u0865\u0867\x07h\x02\x02\u0866\u085E\x03\x02\x02" +
        "\x02\u0867\u086A\x03\x02\x02\x02\u0868\u0866\x03\x02\x02\x02\u0868\u0869" +
        "\x03\x02\x02\x02\u0869\u086C\x03\x02\x02\x02\u086A\u0868\x03\x02\x02\x02" +
        "\u086B\u086D\x05\u017A\xBE\x02\u086C\u086B\x03\x02\x02\x02\u086C\u086D" +
        "\x03\x02\x02\x02\u086D\u086E\x03\x02\x02\x02\u086E\u0870\x07;\x02\x02" +
        "\u086F\u0871\x05\u018E\xC8\x02\u0870\u086F\x03\x02\x02\x02\u0870\u0871" +
        "\x03\x02\x02\x02\u0871\u0872\x03\x02\x02\x02\u0872\u0874\x07<\x02\x02" +
        "\u0873\u0875\x05b2\x02\u0874\u0873\x03\x02\x02\x02\u0874\u0875\x03\x02" +
        "\x02\x02\u0875\u088F\x03\x02\x02\x02\u0876\u0877\x05:\x1E\x02\u0877\u0878" +
        "\x07C\x02\x02\u0878\u087A\x07!\x02\x02\u0879\u087B\x05*\x16\x02\u087A" +
        "\u0879\x03\x02\x02\x02\u087A\u087B\x03\x02\x02\x02\u087B\u087F\x03\x02" +
        "\x02\x02\u087C\u087E\x05\xE6t\x02\u087D\u087C\x03\x02\x02\x02\u087E\u0881" +
        "\x03\x02\x02\x02\u087F\u087D\x03\x02\x02\x02\u087F\u0880\x03\x02\x02\x02" +
        "\u0880\u0882\x03\x02\x02\x02\u0881\u087F\x03\x02\x02\x02\u0882\u0884\x07" +
        "h\x02\x02\u0883\u0885\x05\u017A\xBE\x02\u0884\u0883\x03\x02\x02\x02\u0884" +
        "\u0885\x03\x02\x02\x02\u0885\u0886\x03\x02\x02\x02\u0886\u0888\x07;\x02" +
        "\x02\u0887\u0889\x05\u018E\xC8\x02\u0888\u0887\x03\x02\x02\x02\u0888\u0889" +
        "\x03\x02\x02\x02\u0889\u088A\x03\x02\x02\x02\u088A\u088C\x07<\x02\x02" +
        "\u088B\u088D\x05b2\x02\u088C\u088B\x03\x02\x02\x02\u088C\u088D\x03\x02" +
        "\x02\x02\u088D\u088F\x03\x02\x02\x02\u088E\u0853\x03\x02\x02\x02\u088E" +
        "\u0876\x03\x02\x02\x02\u088F\u0179\x03\x02\x02\x02\u0890\u0894\x05*\x16" +
        "\x02\u0891\u0892\x07F\x02\x02\u0892\u0894\x07E\x02\x02\u0893\u0890\x03" +
        "\x02\x02\x02\u0893\u0891\x03\x02\x02\x02\u0894\u017B\x03\x02\x02\x02\u0895" +
        "\u0896\x05\u0160\xB1\x02\u0896\u0897\x07C\x02\x02\u0897\u0898\x07h\x02" +
        "\x02\u0898\u08A3\x03\x02\x02\x02\u0899\u089A\x07*\x02\x02\u089A\u089B" +
        "\x07C\x02\x02\u089B\u08A3\x07h\x02\x02\u089C\u089D\x056\x1C\x02\u089D" +
        "\u089E\x07C\x02\x02\u089E\u089F\x07*\x02\x02\u089F\u08A0\x07C\x02\x02" +
        "\u08A0\u08A1\x07h\x02\x02\u08A1\u08A3\x03\x02\x02\x02\u08A2\u0895\x03" +
        "\x02\x02\x02\u08A2\u0899\x03\x02\x02\x02\u08A2\u089C\x03\x02\x02\x02\u08A3" +
        "\u017D\x03\x02\x02\x02\u08A4\u08A5\x07C\x02\x02\u08A5\u08A6\x07h\x02\x02" +
        "\u08A6\u017F\x03\x02\x02\x02\u08A7\u08A8\x07*\x02\x02\u08A8\u08A9\x07" +
        "C\x02\x02\u08A9\u08B1\x07h\x02\x02\u08AA\u08AB\x056\x1C\x02\u08AB\u08AC" +
        "\x07C\x02\x02\u08AC\u08AD\x07*\x02\x02\u08AD\u08AE\x07C\x02\x02\u08AE" +
        "\u08AF\x07h\x02\x02\u08AF\u08B1\x03\x02\x02\x02\u08B0\u08A7\x03\x02\x02" +
        "\x02\u08B0\u08AA\x03\x02\x02\x02\u08B1\u0181\x03\x02\x02\x02\u08B2\u08B3" +
        "\x05:\x1E\x02\u08B3\u08B4\x07?\x02\x02\u08B4\u08B5\x05\u019E\xD0\x02\u08B5" +
        "\u08B6\x07@\x02\x02\u08B6\u08BD\x03\x02\x02\x02\u08B7\u08B8\x05\u0166" +
        "\xB4\x02\u08B8\u08B9\x07?\x02\x02\u08B9\u08BA\x05\u019E\xD0\x02\u08BA" +
        "\u08BB\x07@\x02\x02\u08BB\u08BD\x03\x02\x02\x02\u08BC\u08B2\x03\x02\x02" +
        "\x02\u08BC\u08B7\x03\x02\x02\x02\u08BD\u08C5\x03\x02\x02\x02\u08BE\u08BF" +
        "\x05\u0164\xB3\x02\u08BF\u08C0\x07?\x02\x02\u08C0\u08C1\x05\u019E\xD0" +
        "\x02\u08C1\u08C2\x07@\x02\x02\u08C2\u08C4\x03\x02\x02\x02\u08C3\u08BE" +
        "\x03\x02\x02\x02\u08C4\u08C7\x03\x02\x02\x02\u08C5\u08C3\x03\x02\x02\x02" +
        "\u08C5\u08C6\x03\x02\x02\x02\u08C6\u0183\x03\x02\x02\x02\u08C7\u08C5\x03" +
        "\x02\x02\x02\u08C8\u08C9\x05\u016C\xB7\x02\u08C9\u08CA\x07?\x02\x02\u08CA" +
        "\u08CB\x05\u019E\xD0\x02\u08CB\u08CC\x07@\x02\x02\u08CC\u08D4\x03\x02" +
        "\x02\x02\u08CD\u08CE\x05\u016A\xB6\x02\u08CE\u08CF\x07?\x02\x02\u08CF" +
        "\u08D0\x05\u019E\xD0\x02\u08D0\u08D1\x07@\x02\x02\u08D1\u08D3\x03\x02" +
        "\x02\x02\u08D2\u08CD\x03\x02\x02\x02\u08D3\u08D6\x03\x02\x02\x02\u08D4" +
        "\u08D2\x03\x02\x02\x02\u08D4\u08D5\x03\x02\x02\x02\u08D5\u0185\x03\x02" +
        "\x02\x02\u08D6\u08D4\x03\x02\x02\x02\u08D7\u08D8\x05:\x1E\x02\u08D8\u08D9" +
        "\x07?\x02\x02\u08D9\u08DA\x05\u019E\xD0\x02\u08DA\u08DB\x07@\x02\x02\u08DB" +
        "\u08E2\x03\x02\x02\x02\u08DC\u08DD\x05\u0172\xBA\x02\u08DD\u08DE\x07?" +
        "\x02\x02\u08DE\u08DF\x05\u019E\xD0\x02\u08DF\u08E0\x07@\x02\x02\u08E0" +
        "\u08E2\x03\x02\x02\x02\u08E1\u08D7\x03\x02\x02\x02\u08E1\u08DC\x03\x02" +
        "\x02\x02\u08E2\u08EA\x03\x02\x02\x02\u08E3\u08E4\x05\u0170\xB9\x02\u08E4" +
        "\u08E5\x07?\x02\x02\u08E5\u08E6\x05\u019E\xD0\x02\u08E6\u08E7\x07@\x02" +
        "\x02\u08E7\u08E9\x03\x02\x02\x02\u08E8\u08E3\x03\x02\x02\x02\u08E9\u08EC" +
        "\x03\x02\x02\x02\u08EA\u08E8\x03\x02\x02\x02\u08EA\u08EB\x03\x02\x02\x02" +
        "\u08EB\u0187\x03\x02\x02\x02\u08EC\u08EA\x03\x02\x02\x02\u08ED\u08EE\x05" +
        "<\x1F\x02\u08EE\u08F0\x07;\x02\x02\u08EF\u08F1\x05\u018E\xC8\x02\u08F0" +
        "\u08EF\x03\x02\x02\x02\u08F0\u08F1\x03\x02\x02\x02\u08F1\u08F2\x03\x02" +
        "\x02\x02\u08F2\u08F3\x07<\x02\x02\u08F3\u0932\x03\x02\x02\x02\u08F4\u08F5" +
        "\x056\x1C\x02\u08F5\u08F7\x07C\x02\x02\u08F6\u08F8\x05*\x16\x02\u08F7" +
        "\u08F6\x03\x02\x02\x02\u08F7\u08F8\x03\x02\x02\x02\u08F8\u08F9\x03\x02" +
        "\x02\x02\u08F9\u08FA\x07h\x02\x02\u08FA\u08FC\x07;\x02\x02\u08FB\u08FD" +
        "\x05\u018E\xC8\x02\u08FC\u08FB\x03\x02\x02\x02\u08FC\u08FD\x03\x02\x02" +
        "\x02\u08FD\u08FE\x03\x02\x02\x02\u08FE\u08FF\x07<\x02\x02\u08FF\u0932" +
        "\x03\x02\x02\x02\u0900\u0901\x05:\x1E\x02\u0901\u0903\x07C\x02\x02\u0902" +
        "\u0904\x05*\x16\x02\u0903\u0902\x03\x02\x02\x02\u0903\u0904\x03\x02\x02" +
        "\x02\u0904\u0905\x03\x02\x02\x02\u0905\u0906\x07h\x02\x02\u0906\u0908" +
        "\x07;\x02\x02\u0907\u0909\x05\u018E\xC8\x02\u0908\u0907\x03\x02\x02\x02" +
        "\u0908\u0909\x03\x02\x02\x02\u0909\u090A\x03\x02\x02\x02\u090A\u090B\x07" +
        "<\x02\x02\u090B\u0932\x03\x02\x02\x02\u090C\u090D\x05\u0160\xB1\x02\u090D" +
        "\u090F\x07C\x02\x02\u090E\u0910\x05*\x16\x02\u090F\u090E\x03\x02\x02\x02" +
        "\u090F\u0910\x03\x02\x02\x02\u0910\u0911\x03\x02\x02\x02\u0911\u0912\x07" +
        "h\x02\x02\u0912\u0914\x07;\x02\x02\u0913\u0915\x05\u018E\xC8\x02\u0914" +
        "\u0913\x03\x02\x02\x02\u0914\u0915\x03\x02\x02\x02\u0915\u0916\x03\x02" +
        "\x02\x02\u0916\u0917\x07<\x02\x02\u0917\u0932\x03\x02\x02\x02\u0918\u0919" +
        "\x07*\x02\x02\u0919\u091B\x07C\x02\x02\u091A\u091C\x05*\x16\x02\u091B" +
        "\u091A\x03\x02\x02\x02\u091B\u091C\x03\x02\x02\x02\u091C\u091D\x03\x02" +
        "\x02\x02\u091D\u091E\x07h\x02\x02\u091E\u0920\x07;\x02\x02\u091F\u0921" +
        "\x05\u018E\xC8\x02\u0920\u091F\x03\x02\x02\x02\u0920\u0921\x03\x02\x02" +
        "\x02\u0921\u0922\x03\x02\x02\x02\u0922\u0932\x07<\x02\x02\u0923\u0924" +
        "\x056\x1C\x02\u0924\u0925\x07C\x02\x02\u0925\u0926\x07*\x02\x02\u0926" +
        "\u0928\x07C\x02\x02\u0927\u0929\x05*\x16\x02\u0928\u0927\x03\x02\x02\x02" +
        "\u0928\u0929\x03\x02\x02\x02\u0929\u092A\x03\x02\x02\x02\u092A\u092B\x07" +
        "h\x02\x02\u092B\u092D\x07;\x02\x02\u092C\u092E\x05\u018E\xC8\x02\u092D" +
        "\u092C\x03\x02\x02\x02\u092D\u092E\x03\x02\x02\x02\u092E\u092F\x03\x02" +
        "\x02\x02\u092F\u0930\x07<\x02\x02\u0930\u0932\x03\x02\x02\x02\u0931\u08ED" +
        "\x03\x02\x02\x02\u0931\u08F4\x03\x02\x02\x02\u0931\u0900\x03\x02\x02\x02" +
        "\u0931\u090C\x03\x02\x02\x02\u0931\u0918\x03\x02\x02\x02\u0931\u0923\x03" +
        "\x02\x02\x02\u0932\u0189\x03\x02\x02\x02\u0933\u0935\x07C\x02\x02\u0934" +
        "\u0936\x05*\x16\x02\u0935\u0934\x03\x02\x02\x02\u0935\u0936\x03\x02\x02" +
        "\x02\u0936\u0937\x03\x02\x02\x02\u0937\u0938\x07h\x02\x02\u0938\u093A" +
        "\x07;\x02\x02\u0939\u093B\x05\u018E\xC8\x02\u093A\u0939\x03\x02\x02\x02" +
        "\u093A\u093B\x03\x02\x02\x02\u093B\u093C\x03\x02\x02\x02\u093C\u093D\x07" +
        "<\x02\x02\u093D\u018B\x03\x02\x02\x02\u093E\u093F\x05<\x1F\x02\u093F\u0941" +
        "\x07;\x02\x02\u0940\u0942\x05\u018E\xC8\x02\u0941\u0940\x03\x02\x02\x02" +
        "\u0941\u0942\x03\x02\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943\u0944\x07" +
        "<\x02\x02\u0944\u0977\x03\x02\x02\x02\u0945\u0946\x056\x1C\x02\u0946\u0948" +
        "\x07C\x02\x02\u0947\u0949\x05*\x16\x02\u0948\u0947\x03\x02\x02\x02\u0948" +
        "\u0949\x03\x02\x02\x02\u0949\u094A\x03\x02\x02\x02\u094A\u094B\x07h\x02" +
        "\x02\u094B\u094D\x07;\x02\x02\u094C\u094E\x05\u018E\xC8\x02\u094D\u094C" +
        "\x03\x02\x02\x02\u094D\u094E\x03\x02\x02\x02\u094E\u094F\x03\x02\x02\x02" +
        "\u094F\u0950\x07<\x02\x02\u0950\u0977\x03\x02\x02\x02\u0951\u0952\x05" +
        ":\x1E\x02\u0952\u0954\x07C\x02\x02\u0953\u0955\x05*\x16\x02\u0954\u0953" +
        "\x03\x02\x02\x02\u0954\u0955\x03\x02\x02\x02\u0955\u0956\x03\x02\x02\x02" +
        "\u0956\u0957\x07h\x02\x02\u0957\u0959\x07;\x02\x02\u0958\u095A\x05\u018E" +
        "\xC8\x02\u0959\u0958\x03\x02\x02\x02\u0959\u095A\x03\x02\x02\x02\u095A" +
        "\u095B\x03\x02\x02\x02\u095B\u095C\x07<\x02\x02\u095C\u0977\x03\x02\x02" +
        "\x02\u095D\u095E\x07*\x02\x02\u095E\u0960\x07C\x02\x02\u095F\u0961\x05" +
        "*\x16\x02\u0960\u095F\x03\x02\x02\x02\u0960\u0961\x03\x02\x02\x02\u0961" +
        "\u0962\x03\x02\x02\x02\u0962\u0963\x07h\x02\x02\u0963\u0965\x07;\x02\x02" +
        "\u0964\u0966\x05\u018E\xC8\x02\u0965\u0964\x03\x02\x02\x02\u0965\u0966" +
        "\x03\x02\x02\x02\u0966\u0967\x03\x02\x02\x02\u0967\u0977\x07<\x02\x02" +
        "\u0968\u0969\x056\x1C\x02\u0969\u096A\x07C\x02\x02\u096A\u096B\x07*\x02" +
        "\x02\u096B\u096D\x07C\x02\x02\u096C\u096E\x05*\x16\x02\u096D\u096C\x03" +
        "\x02\x02\x02\u096D\u096E\x03\x02\x02\x02\u096E\u096F\x03\x02\x02\x02\u096F" +
        "\u0970\x07h\x02\x02\u0970\u0972\x07;\x02\x02\u0971\u0973\x05\u018E\xC8" +
        "\x02\u0972\u0971\x03\x02\x02\x02\u0972\u0973\x03\x02\x02\x02\u0973\u0974" +
        "\x03\x02\x02\x02\u0974\u0975\x07<\x02\x02\u0975\u0977\x03\x02\x02\x02" +
        "\u0976\u093E\x03\x02\x02\x02\u0976\u0945\x03\x02\x02\x02\u0976\u0951\x03" +
        "\x02\x02\x02\u0976\u095D\x03\x02\x02\x02\u0976\u0968\x03\x02\x02\x02\u0977" +
        "\u018D\x03\x02\x02\x02\u0978\u097D\x05\u019E\xD0\x02\u0979\u097A\x07B" +
        "\x02\x02\u097A\u097C\x05\u019E\xD0\x02\u097B\u0979\x03\x02\x02\x02\u097C" +
        "\u097F\x03\x02\x02\x02\u097D\u097B\x03\x02\x02\x02\u097D\u097E\x03\x02" +
        "\x02\x02\u097E\u018F\x03\x02\x02\x02\u097F\u097D\x03\x02\x02\x02\u0980" +
        "\u0981\x05:\x1E\x02\u0981\u0983\x07\\\x02\x02\u0982\u0984\x05*\x16\x02" +
        "\u0983\u0982\x03\x02\x02\x02\u0983\u0984\x03\x02\x02\x02\u0984\u0985\x03" +
        "\x02\x02\x02\u0985\u0986\x07h\x02\x02\u0986\u09B0\x03\x02\x02\x02\u0987" +
        "\u0988\x05\f\x07\x02\u0988\u098A\x07\\\x02\x02\u0989\u098B\x05*\x16\x02" +
        "\u098A\u0989\x03\x02\x02\x02\u098A\u098B\x03\x02\x02\x02\u098B\u098C\x03" +
        "\x02\x02\x02\u098C\u098D\x07h\x02\x02\u098D\u09B0\x03\x02\x02\x02\u098E" +
        "\u098F\x05\u0160\xB1\x02\u098F\u0991\x07\\\x02\x02\u0990\u0992\x05*\x16" +
        "\x02\u0991\u0990\x03\x02\x02\x02\u0991\u0992\x03\x02\x02\x02\u0992\u0993" +
        "\x03\x02\x02\x02\u0993\u0994\x07h\x02\x02\u0994\u09B0\x03\x02\x02\x02" +
        "\u0995\u0996\x07*\x02\x02\u0996\u0998\x07\\\x02\x02\u0997\u0999\x05*\x16" +
        "\x02\u0998\u0997\x03\x02\x02\x02\u0998\u0999\x03\x02\x02\x02\u0999\u099A" +
        "\x03\x02\x02\x02\u099A\u09B0\x07h\x02\x02\u099B\u099C\x056\x1C\x02\u099C" +
        "\u099D\x07C\x02\x02\u099D\u099E\x07*\x02\x02\u099E\u09A0\x07\\\x02\x02" +
        "\u099F\u09A1\x05*\x16\x02\u09A0\u099F\x03\x02\x02\x02\u09A0\u09A1\x03" +
        "\x02\x02\x02\u09A1\u09A2\x03\x02\x02\x02\u09A2\u09A3\x07h\x02\x02\u09A3" +
        "\u09B0\x03\x02\x02\x02\u09A4\u09A5\x05\x10\t\x02\u09A5\u09A7\x07\\\x02" +
        "\x02\u09A6\u09A8\x05*\x16\x02\u09A7\u09A6\x03\x02\x02\x02\u09A7\u09A8" +
        "\x03\x02\x02\x02\u09A8\u09A9\x03\x02\x02\x02\u09A9\u09AA\x07!\x02\x02" +
        "\u09AA\u09B0\x03\x02\x02\x02\u09AB\u09AC\x05\x1E\x10\x02\u09AC\u09AD\x07" +
        "\\\x02\x02\u09AD\u09AE\x07!\x02\x02\u09AE\u09B0\x03\x02\x02\x02\u09AF" +
        "\u0980\x03\x02\x02\x02\u09AF\u0987\x03\x02\x02\x02\u09AF\u098E\x03\x02" +
        "\x02\x02\u09AF\u0995\x03\x02\x02\x02\u09AF\u099B\x03\x02\x02\x02\u09AF" +
        "\u09A4\x03\x02\x02\x02\u09AF\u09AB\x03\x02\x02\x02\u09B0\u0191\x03\x02" +
        "\x02\x02\u09B1\u09B3\x07\\\x02\x02\u09B2\u09B4\x05*\x16\x02\u09B3\u09B2" +
        "\x03\x02\x02\x02\u09B3\u09B4\x03\x02\x02\x02\u09B4\u09B5\x03\x02\x02\x02" +
        "\u09B5\u09B6\x07h\x02\x02\u09B6\u0193\x03\x02\x02\x02\u09B7\u09B8\x05" +
        ":\x1E\x02\u09B8\u09BA\x07\\\x02\x02\u09B9\u09BB\x05*\x16\x02\u09BA\u09B9" +
        "\x03\x02\x02\x02\u09BA\u09BB\x03\x02\x02\x02\u09BB\u09BC\x03\x02\x02\x02" +
        "\u09BC\u09BD\x07h\x02\x02\u09BD\u09E0\x03\x02\x02\x02\u09BE\u09BF\x05" +
        "\f\x07\x02\u09BF\u09C1\x07\\\x02\x02\u09C0\u09C2\x05*\x16\x02\u09C1\u09C0" +
        "\x03\x02\x02\x02\u09C1\u09C2\x03\x02\x02\x02\u09C2\u09C3\x03\x02\x02\x02" +
        "\u09C3\u09C4\x07h\x02\x02\u09C4\u09E0\x03\x02\x02\x02\u09C5\u09C6\x07" +
        "*\x02\x02\u09C6\u09C8\x07\\\x02\x02\u09C7\u09C9\x05*\x16\x02\u09C8\u09C7" +
        "\x03\x02\x02\x02\u09C8\u09C9\x03\x02\x02\x02\u09C9\u09CA\x03\x02\x02\x02" +
        "\u09CA\u09E0\x07h\x02\x02\u09CB\u09CC\x056\x1C\x02\u09CC\u09CD\x07C\x02" +
        "\x02\u09CD\u09CE\x07*\x02\x02\u09CE\u09D0\x07\\\x02\x02\u09CF\u09D1\x05" +
        "*\x16\x02\u09D0\u09CF\x03\x02\x02\x02\u09D0\u09D1\x03\x02\x02\x02\u09D1" +
        "\u09D2\x03\x02\x02\x02\u09D2\u09D3\x07h\x02\x02\u09D3\u09E0\x03\x02\x02" +
        "\x02\u09D4\u09D5\x05\x10\t\x02\u09D5\u09D7\x07\\\x02\x02\u09D6\u09D8\x05" +
        "*\x16\x02\u09D7\u09D6\x03\x02\x02\x02\u09D7\u09D8\x03\x02\x02\x02\u09D8" +
        "\u09D9\x03\x02\x02\x02\u09D9\u09DA\x07!\x02\x02\u09DA\u09E0\x03\x02\x02" +
        "\x02\u09DB\u09DC\x05\x1E\x10\x02\u09DC\u09DD\x07\\\x02\x02\u09DD\u09DE" +
        "\x07!\x02\x02\u09DE\u09E0\x03\x02\x02\x02\u09DF\u09B7\x03\x02\x02\x02" +
        "\u09DF\u09BE\x03\x02\x02\x02\u09DF\u09C5\x03\x02\x02\x02\u09DF\u09CB\x03" +
        "\x02\x02\x02\u09DF\u09D4\x03\x02\x02\x02\u09DF\u09DB\x03\x02\x02\x02\u09E0" +
        "\u0195\x03\x02\x02\x02\u09E1\u09E2\x07!\x02\x02\u09E2\u09E3\x05\x04\x03" +
        "\x02\u09E3\u09E5\x05\u0198\xCD\x02\u09E4\u09E6\x05 \x11\x02\u09E5\u09E4" +
        "\x03\x02\x02\x02\u09E5\u09E6\x03\x02\x02\x02\u09E6\u09F8\x03\x02\x02\x02" +
        "\u09E7\u09E8\x07!\x02\x02\u09E8\u09E9\x05\x0E\b\x02\u09E9\u09EB\x05\u0198" +
        "\xCD\x02\u09EA\u09EC\x05 \x11\x02\u09EB\u09EA\x03\x02\x02\x02\u09EB\u09EC" +
        "\x03\x02\x02\x02\u09EC\u09F8\x03\x02\x02\x02\u09ED\u09EE\x07!\x02\x02" +
        "\u09EE\u09EF\x05\x04\x03\x02\u09EF\u09F0\x05 \x11\x02\u09F0\u09F1\x05" +
        "\xF8}\x02\u09F1\u09F8\x03\x02\x02\x02\u09F2\u09F3\x07!\x02\x02\u09F3\u09F4" +
        "\x05\x0E\b\x02\u09F4\u09F5\x05 \x11\x02\u09F5\u09F6\x05\xF8}\x02\u09F6" +
        "\u09F8\x03\x02\x02\x02\u09F7\u09E1\x03\x02\x02\x02\u09F7\u09E7\x03\x02" +
        "\x02\x02\u09F7\u09ED\x03\x02\x02\x02\u09F7\u09F2\x03\x02\x02\x02\u09F8" +
        "\u0197\x03\x02\x02\x02\u09F9\u09FD\x05\u019A\xCE\x02\u09FA\u09FC\x05\u019A" +
        "\xCE\x02\u09FB\u09FA\x03\x02\x02\x02\u09FC\u09FF\x03\x02\x02\x02\u09FD" +
        "\u09FB\x03\x02\x02\x02\u09FD\u09FE\x03\x02\x02\x02\u09FE\u0199\x03\x02" +
        "\x02\x02\u09FF\u09FD\x03\x02\x02\x02\u0A00\u0A02\x05\xE6t\x02\u0A01\u0A00" +
        "\x03\x02\x02\x02\u0A02\u0A05\x03\x02\x02\x02\u0A03\u0A01\x03\x02\x02\x02" +
        "\u0A03\u0A04\x03\x02\x02\x02\u0A04\u0A06\x03\x02\x02\x02\u0A05\u0A03\x03" +
        "\x02\x02\x02\u0A06\u0A07\x07?\x02\x02\u0A07\u0A08\x05\u019E\xD0\x02\u0A08" +
        "\u0A09\x07@\x02\x02\u0A09\u019B\x03\x02\x02\x02\u0A0A\u0A0B\x05\u019E" +
        "\xD0\x02\u0A0B\u019D\x03\x02\x02\x02\u0A0C\u0A0F\x05\u01A0\xD1\x02\u0A0D" +
        "\u0A0F\x05\u01A8\xD5\x02\u0A0E\u0A0C\x03\x02\x02\x02\u0A0E\u0A0D\x03\x02" +
        "\x02\x02\u0A0F\u019F\x03\x02\x02\x02\u0A10\u0A11\x05\u01A2\xD2\x02\u0A11" +
        "\u0A12\x07[\x02\x02\u0A12\u0A13\x05\u01A6\xD4\x02\u0A13\u01A1\x03\x02" +
        "\x02\x02\u0A14\u0A1F\x07h\x02\x02\u0A15\u0A17\x07;\x02\x02\u0A16\u0A18" +
        "\x05\x96L\x02\u0A17\u0A16\x03\x02\x02\x02\u0A17\u0A18\x03\x02\x02\x02" +
        "\u0A18\u0A19\x03\x02\x02\x02\u0A19\u0A1F\x07<\x02\x02\u0A1A\u0A1B\x07" +
        ";\x02\x02\u0A1B\u0A1C\x05\u01A4\xD3\x02\u0A1C\u0A1D\x07<\x02\x02\u0A1D" +
        "\u0A1F\x03\x02\x02\x02\u0A1E\u0A14\x03\x02\x02\x02\u0A1E\u0A15\x03\x02" +
        "\x02\x02\u0A1E\u0A1A\x03\x02\x02\x02\u0A1F\u01A3\x03\x02\x02\x02\u0A20" +
        "\u0A25\x07h\x02\x02\u0A21\u0A22\x07B\x02\x02\u0A22\u0A24\x07h\x02\x02" +
        "\u0A23\u0A21\x03\x02\x02\x02\u0A24\u0A27\x03\x02\x02\x02\u0A25\u0A23\x03" +
        "\x02\x02\x02\u0A25\u0A26\x03\x02\x02\x02\u0A26\u01A5\x03\x02\x02\x02\u0A27" +
        "\u0A25\x03\x02\x02\x02\u0A28\u0A2B\x05\u019E\xD0\x02\u0A29\u0A2B\x05\xFC" +
        "\x7F\x02\u0A2A\u0A28\x03\x02\x02\x02\u0A2A\u0A29\x03\x02\x02\x02\u0A2B" +
        "\u01A7\x03\x02\x02\x02\u0A2C\u0A2F\x05\u01B0\xD9\x02\u0A2D\u0A2F\x05\u01AA" +
        "\xD6\x02\u0A2E\u0A2C\x03\x02\x02\x02\u0A2E\u0A2D\x03\x02\x02\x02\u0A2F" +
        "\u01A9\x03\x02\x02\x02\u0A30\u0A31\x05\u01AC\xD7\x02\u0A31\u0A32\x05\u01AE" +
        "\xD8\x02\u0A32\u0A33\x05\u019E\xD0\x02\u0A33\u01AB\x03\x02\x02\x02\u0A34" +
        "\u0A38\x05:\x1E\x02\u0A35\u0A38\x05\u017C\xBF\x02\u0A36\u0A38\x05\u0182" +
        "\xC2\x02\u0A37\u0A34\x03\x02\x02\x02\u0A37\u0A35\x03\x02\x02\x02\u0A37" +
        "\u0A36\x03\x02\x02\x02\u0A38\u01AD\x03\x02\x02\x02\u0A39\u0A3A\t\x05\x02" +
        "\x02\u0A3A\u01AF\x03\x02\x02\x02\u0A3B\u0A43\x05\u01B2\xDA\x02\u0A3C\u0A3D" +
        "\x05\u01B2\xDA\x02\u0A3D\u0A3E\x07I\x02\x02\u0A3E\u0A3F\x05\u019E\xD0" +
        "\x02\u0A3F\u0A40\x07J\x02\x02\u0A40\u0A41\x05\u01B0\xD9\x02\u0A41\u0A43" +
        "\x03\x02\x02\x02\u0A42\u0A3B\x03\x02\x02\x02\u0A42\u0A3C\x03\x02\x02\x02" +
        "\u0A43\u01B1\x03\x02\x02\x02\u0A44\u0A45\b\xDA\x01\x02\u0A45\u0A46\x05" +
        "\u01B4\xDB\x02\u0A46\u0A4C\x03\x02\x02\x02\u0A47\u0A48\f\x03\x02\x02\u0A48" +
        "\u0A49\x07P\x02\x02\u0A49\u0A4B\x05\u01B4\xDB\x02\u0A4A\u0A47\x03\x02" +
        "\x02\x02\u0A4B\u0A4E\x03\x02\x02\x02\u0A4C\u0A4A\x03\x02\x02\x02\u0A4C" +
        "\u0A4D\x03\x02\x02\x02\u0A4D\u01B3\x03\x02\x02\x02\u0A4E\u0A4C\x03\x02" +
        "\x02\x02\u0A4F\u0A50\b\xDB\x01\x02\u0A50\u0A51\x05\u01B6\xDC\x02\u0A51" +
        "\u0A57\x03\x02\x02\x02\u0A52\u0A53\f\x03\x02\x02\u0A53\u0A54\x07O\x02" +
        "\x02\u0A54\u0A56\x05\u01B6\xDC\x02\u0A55\u0A52\x03\x02\x02\x02\u0A56\u0A59" +
        "\x03\x02\x02\x02\u0A57\u0A55\x03\x02\x02\x02\u0A57\u0A58\x03\x02\x02\x02" +
        "\u0A58\u01B5\x03\x02\x02\x02\u0A59\u0A57\x03\x02\x02\x02\u0A5A\u0A5B\b" +
        "\xDC\x01\x02\u0A5B\u0A5C\x05\u01B8\xDD\x02\u0A5C\u0A62\x03\x02\x02\x02" +
        "\u0A5D\u0A5E\f\x03\x02\x02\u0A5E\u0A5F\x07X\x02\x02\u0A5F\u0A61\x05\u01B8" +
        "\xDD\x02\u0A60\u0A5D\x03\x02\x02\x02\u0A61\u0A64\x03\x02\x02\x02\u0A62" +
        "\u0A60\x03\x02\x02\x02\u0A62\u0A63\x03\x02\x02\x02\u0A63\u01B7\x03\x02" +
        "\x02\x02\u0A64\u0A62\x03\x02\x02\x02\u0A65\u0A66\b\xDD\x01\x02\u0A66\u0A67" +
        "\x05\u01BA\xDE\x02\u0A67\u0A6D\x03\x02\x02\x02\u0A68\u0A69\f\x03\x02\x02" +
        "\u0A69\u0A6A\x07Y\x02\x02\u0A6A\u0A6C\x05\u01BA\xDE\x02\u0A6B\u0A68\x03" +
        "\x02\x02\x02\u0A6C\u0A6F\x03\x02\x02\x02\u0A6D\u0A6B\x03\x02\x02\x02\u0A6D" +
        "\u0A6E\x03\x02\x02\x02\u0A6E\u01B9\x03\x02\x02\x02\u0A6F\u0A6D\x03\x02" +
        "\x02\x02\u0A70\u0A71\b\xDE\x01\x02\u0A71\u0A72\x05\u01BC\xDF\x02\u0A72" +
        "\u0A78\x03\x02\x02\x02\u0A73\u0A74\f\x03\x02\x02\u0A74\u0A75\x07W\x02" +
        "\x02\u0A75\u0A77\x05\u01BC\xDF\x02\u0A76\u0A73\x03\x02\x02\x02\u0A77\u0A7A" +
        "\x03\x02\x02\x02\u0A78\u0A76\x03\x02\x02\x02\u0A78\u0A79\x03\x02\x02\x02" +
        "\u0A79\u01BB\x03\x02\x02\x02\u0A7A\u0A78\x03\x02\x02\x02\u0A7B\u0A7C\b" +
        "\xDF\x01\x02\u0A7C\u0A7D\x05\u01BE\xE0\x02\u0A7D\u0A86\x03\x02\x02\x02" +
        "\u0A7E\u0A7F\f\x04\x02\x02\u0A7F\u0A80\x07K\x02\x02\u0A80\u0A85\x05\u01BE" +
        "\xE0\x02\u0A81\u0A82\f\x03\x02\x02\u0A82\u0A83\x07N\x02\x02\u0A83\u0A85" +
        "\x05\u01BE\xE0\x02\u0A84\u0A7E\x03\x02\x02\x02\u0A84\u0A81\x03\x02\x02" +
        "\x02\u0A85\u0A88\x03\x02\x02\x02\u0A86\u0A84\x03\x02\x02\x02\u0A86\u0A87" +
        "\x03\x02\x02\x02\u0A87\u01BD\x03\x02\x02\x02\u0A88\u0A86\x03\x02\x02\x02" +
        "\u0A89\u0A8A\b\xE0\x01\x02\u0A8A\u0A8B\x05\u01C0\xE1\x02\u0A8B\u0A9D\x03" +
        "\x02\x02\x02\u0A8C\u0A8D\f\x07\x02\x02\u0A8D\u0A8E\x07F\x02\x02\u0A8E" +
        "\u0A9C\x05\u01C0\xE1\x02\u0A8F\u0A90\f\x06\x02\x02\u0A90\u0A91\x07E\x02" +
        "\x02\u0A91\u0A9C\x05\u01C0\xE1\x02\u0A92\u0A93\f\x05\x02\x02\u0A93\u0A94" +
        "\x07L\x02\x02\u0A94\u0A9C\x05\u01C0\xE1\x02\u0A95\u0A96\f\x04\x02\x02" +
        "\u0A96\u0A97\x07M\x02\x02\u0A97\u0A9C\x05\u01C0\xE1\x02\u0A98\u0A99\f" +
        "\x03\x02\x02\u0A99\u0A9A\x07\x1C\x02\x02\u0A9A\u0A9C\x05\f\x07\x02\u0A9B" +
        "\u0A8C\x03\x02\x02\x02\u0A9B\u0A8F\x03\x02\x02\x02\u0A9B\u0A92\x03\x02" +
        "\x02\x02\u0A9B\u0A95\x03\x02\x02\x02\u0A9B\u0A98\x03\x02\x02\x02\u0A9C" +
        "\u0A9F\x03\x02\x02\x02\u0A9D\u0A9B\x03\x02\x02\x02\u0A9D\u0A9E\x03\x02" +
        "\x02\x02\u0A9E\u01BF\x03\x02\x02\x02\u0A9F\u0A9D\x03\x02\x02\x02\u0AA0" +
        "\u0AA1\b\xE1\x01\x02\u0AA1\u0AA2\x05\u01C2\xE2\x02\u0AA2\u0AB2\x03\x02" +
        "\x02\x02\u0AA3\u0AA4\f\x05\x02\x02\u0AA4\u0AA5\x07F\x02\x02\u0AA5\u0AA6" +
        "\x07F\x02\x02\u0AA6\u0AB1\x05\u01C2\xE2\x02\u0AA7\u0AA8\f\x04\x02\x02" +
        "\u0AA8\u0AA9\x07E\x02\x02\u0AA9\u0AAA\x07E\x02\x02\u0AAA\u0AB1\x05\u01C2" +
        "\xE2\x02\u0AAB\u0AAC\f\x03\x02\x02\u0AAC\u0AAD\x07E\x02\x02\u0AAD\u0AAE" +
        "\x07E\x02\x02\u0AAE\u0AAF\x07E\x02\x02\u0AAF\u0AB1\x05\u01C2\xE2\x02\u0AB0" +
        "\u0AA3\x03\x02\x02\x02\u0AB0\u0AA7\x03\x02\x02\x02\u0AB0\u0AAB\x03\x02" +
        "\x02\x02\u0AB1\u0AB4\x03\x02\x02\x02\u0AB2\u0AB0\x03\x02\x02\x02\u0AB2" +
        "\u0AB3\x03\x02\x02\x02\u0AB3\u01C1\x03\x02\x02\x02\u0AB4\u0AB2\x03\x02" +
        "\x02\x02\u0AB5\u0AB6\b\xE2\x01\x02\u0AB6\u0AB7\x05\u01C4\xE3\x02\u0AB7" +
        "\u0AC0\x03\x02\x02\x02\u0AB8\u0AB9\f\x04\x02\x02\u0AB9\u0ABA\x07S\x02" +
        "\x02\u0ABA\u0ABF\x05\u01C4\xE3\x02\u0ABB\u0ABC\f\x03\x02\x02\u0ABC\u0ABD" +
        "\x07T\x02\x02\u0ABD\u0ABF\x05\u01C4\xE3\x02\u0ABE\u0AB8\x03\x02\x02\x02" +
        "\u0ABE\u0ABB\x03\x02\x02\x02\u0ABF\u0AC2\x03\x02\x02\x02\u0AC0\u0ABE\x03" +
        "\x02\x02\x02\u0AC0\u0AC1\x03\x02\x02\x02\u0AC1\u01C3\x03\x02\x02\x02\u0AC2" +
        "\u0AC0\x03\x02\x02\x02\u0AC3\u0AC4\b\xE3\x01\x02\u0AC4\u0AC5\x05\u01C6" +
        "\xE4\x02\u0AC5\u0AD1\x03\x02\x02\x02\u0AC6\u0AC7\f\x05\x02\x02\u0AC7\u0AC8" +
        "\x07U\x02\x02\u0AC8\u0AD0\x05\u01C6\xE4\x02\u0AC9\u0ACA\f\x04\x02\x02" +
        "\u0ACA\u0ACB\x07V\x02\x02\u0ACB\u0AD0\x05\u01C6\xE4\x02\u0ACC\u0ACD\f" +
        "\x03\x02\x02\u0ACD\u0ACE\x07Z\x02\x02\u0ACE\u0AD0\x05\u01C6\xE4\x02\u0ACF" +
        "\u0AC6\x03\x02\x02\x02\u0ACF\u0AC9\x03\x02\x02\x02\u0ACF\u0ACC\x03\x02" +
        "\x02\x02\u0AD0\u0AD3\x03\x02\x02\x02\u0AD1\u0ACF\x03\x02\x02\x02\u0AD1" +
        "\u0AD2\x03\x02\x02\x02\u0AD2\u01C5\x03\x02\x02\x02\u0AD3\u0AD1\x03\x02" +
        "\x02\x02\u0AD4\u0ADC\x05\u01C8\xE5\x02\u0AD5\u0ADC\x05\u01CA\xE6\x02\u0AD6" +
        "\u0AD7\x07S\x02\x02\u0AD7\u0ADC\x05\u01C6\xE4\x02\u0AD8\u0AD9\x07T\x02" +
        "\x02\u0AD9\u0ADC\x05\u01C6\xE4\x02\u0ADA\u0ADC\x05\u01CC\xE7\x02\u0ADB" +
        "\u0AD4\x03\x02\x02\x02\u0ADB\u0AD5\x03\x02\x02\x02\u0ADB\u0AD6\x03\x02" +
        "\x02\x02\u0ADB\u0AD8\x03\x02\x02\x02\u0ADB\u0ADA\x03\x02\x02\x02\u0ADC" +
        "\u01C7\x03\x02\x02\x02\u0ADD\u0ADE\x07Q\x02\x02\u0ADE\u0ADF\x05\u01C6" +
        "\xE4\x02\u0ADF\u01C9\x03\x02\x02\x02\u0AE0\u0AE1\x07R\x02\x02\u0AE1\u0AE2" +
        "\x05\u01C6\xE4\x02\u0AE2\u01CB\x03\x02\x02\x02\u0AE3\u0AEA\x05\u01CE\xE8" +
        "\x02\u0AE4\u0AE5\x07H\x02\x02\u0AE5\u0AEA\x05\u01C6\xE4\x02\u0AE6\u0AE7" +
        "\x07G\x02\x02\u0AE7\u0AEA\x05\u01C6\xE4\x02\u0AE8\u0AEA\x05\u01D8\xED" +
        "\x02\u0AE9\u0AE3\x03\x02\x02\x02\u0AE9\u0AE4\x03\x02\x02\x02\u0AE9\u0AE6" +
        "\x03\x02\x02\x02\u0AE9\u0AE8\x03\x02\x02\x02\u0AEA\u01CD\x03\x02\x02\x02" +
        "\u0AEB\u0AEE\x05\u0160\xB1\x02\u0AEC\u0AEE\x05:\x1E\x02\u0AED\u0AEB\x03" +
        "\x02\x02\x02\u0AED\u0AEC\x03\x02\x02\x02\u0AEE\u0AF3\x03\x02\x02\x02\u0AEF" +
        "\u0AF2\x05\u01D2\xEA\x02\u0AF0\u0AF2\x05\u01D6\xEC\x02\u0AF1\u0AEF\x03" +
        "\x02\x02\x02\u0AF1\u0AF0\x03\x02\x02\x02\u0AF2\u0AF5\x03\x02\x02\x02\u0AF3" +
        "\u0AF1\x03\x02\x02\x02\u0AF3\u0AF4\x03\x02\x02\x02\u0AF4\u01CF\x03\x02" +
        "\x02\x02\u0AF5\u0AF3\x03\x02\x02\x02\u0AF6\u0AF7\x05\u01CE\xE8\x02\u0AF7" +
        "\u0AF8\x07Q\x02\x02\u0AF8\u01D1\x03\x02\x02\x02\u0AF9\u0AFA\x07Q\x02\x02" +
        "\u0AFA\u01D3\x03\x02\x02\x02\u0AFB\u0AFC\x05\u01CE\xE8\x02\u0AFC\u0AFD" +
        "\x07R\x02\x02\u0AFD\u01D5\x03\x02\x02\x02\u0AFE\u0AFF\x07R\x02\x02\u0AFF" +
        "\u01D7\x03\x02\x02\x02\u0B00\u0B01\x07;\x02\x02\u0B01\u0B02\x05\x04\x03" +
        "\x02\u0B02\u0B03\x07<\x02\x02\u0B03\u0B04\x05\u01C6\xE4\x02\u0B04\u0B1C" +
        "\x03\x02\x02\x02\u0B05\u0B06\x07;\x02\x02\u0B06\u0B0A\x05\f\x07\x02\u0B07" +
        "\u0B09\x05(\x15\x02\u0B08";
    Java8Parser._serializedATNSegment5 = "\u0B07\x03\x02\x02\x02\u0B09\u0B0C\x03\x02\x02\x02\u0B0A\u0B08\x03\x02" +
        "\x02\x02\u0B0A\u0B0B\x03\x02\x02\x02\u0B0B\u0B0D\x03\x02\x02\x02\u0B0C" +
        "\u0B0A\x03\x02\x02\x02\u0B0D\u0B0E\x07<\x02\x02\u0B0E\u0B0F\x05\u01CC" +
        "\xE7\x02\u0B0F\u0B1C\x03\x02\x02\x02\u0B10\u0B11\x07;\x02\x02\u0B11\u0B15" +
        "\x05\f\x07\x02\u0B12\u0B14\x05(\x15\x02\u0B13\u0B12\x03\x02\x02\x02\u0B14" +
        "\u0B17\x03\x02\x02\x02\u0B15\u0B13\x03\x02\x02\x02\u0B15\u0B16\x03\x02" +
        "\x02\x02\u0B16\u0B18\x03\x02\x02\x02\u0B17\u0B15\x03\x02\x02\x02\u0B18" +
        "\u0B19\x07<\x02\x02\u0B19\u0B1A\x05\u01A0\xD1\x02\u0B1A\u0B1C\x03\x02" +
        "\x02\x02\u0B1B\u0B00\x03\x02\x02\x02\u0B1B\u0B05\x03\x02\x02\x02\u0B1B" +
        "\u0B10\x03\x02\x02\x02\u0B1C\u01D9\x03\x02\x02\x02\u0144\u01DF\u01E6\u01EA" +
        "\u01EE\u01F7\u01FB\u01FF\u0201\u0207\u020C\u0213\u0218\u021A\u0220\u0225" +
        "\u022A\u022F\u023A\u0248\u024D\u0255\u025C\u0262\u0267\u0272\u0275\u0283" +
        "\u0288\u028D\u0292\u0298\u02A2\u02AA\u02B4\u02BC\u02C8\u02CC\u02D1\u02D7" +
        "\u02DF\u02EC\u0309\u030D\u0312\u0318\u031B\u031E\u032A\u0335\u0343\u034A" +
        "\u0353\u035A\u035F\u036E\u0375\u037B\u037F\u0383\u0387\u038B\u0390\u0394" +
        "\u0398\u039A\u039F\u03A6\u03AB\u03AD\u03B3\u03B8\u03BC\u03CF\u03D4\u03E4" +
        "\u03E9\u03EF\u03F5\u03F7\u03FB\u0400\u0404\u040C\u0413\u041B\u041E\u0423" +
        "\u042B\u0430\u0437\u043E\u0443\u0449\u0455\u045A\u045E\u0468\u046D\u0475" +
        "\u0478\u047D\u0485\u0488\u048D\u0492\u0497\u049C\u04A3\u04A8\u04B0\u04B5" +
        "\u04BA\u04BF\u04C5\u04CB\u04CE\u04D1\u04DA\u04E0\u04E6\u04E9\u04EC\u04F4" +
        "\u04F9\u04FE\u0504\u0507\u0512\u051B\u0525\u052A\u0535\u053A\u0546\u054B" +
        "\u0557\u0561\u0566\u056E\u0571\u0578\u0580\u0586\u058F\u0599\u059D\u05A0" +
        "\u05A9\u05B7\u05BA\u05C3\u05C8\u05CF\u05D4\u05DC\u05E8\u05EF\u05FD\u0613" +
        "\u0635\u0641\u0647\u0653\u0660\u067A\u067E\u0683\u0687\u068B\u0693\u0697" +
        "\u069B\u06A2\u06AB\u06B3\u06C2\u06CE\u06D4\u06DA\u06EF\u06F4\u06FA\u0706" +
        "\u0711\u071B\u071E\u0723\u072C\u0732\u073C\u0741\u074A\u0761\u076B\u0781" +
        "\u0788\u0790\u0798\u07A3\u07BA\u07C4\u07CF\u07E5\u07E9\u07EE\u07F6\u07FC" +
        "\u0800\u0804\u0808\u080E\u0813\u0818\u081C\u0820\u0826\u082B\u0830\u0834" +
        "\u0838\u083A\u083F\u0844\u0849\u084D\u0851\u0855\u085A\u0862\u0868\u086C" +
        "\u0870\u0874\u087A\u087F\u0884\u0888\u088C\u088E\u0893\u08A2\u08B0\u08BC" +
        "\u08C5\u08D4\u08E1\u08EA\u08F0\u08F7\u08FC\u0903\u0908\u090F\u0914\u091B" +
        "\u0920\u0928\u092D\u0931\u0935\u093A\u0941\u0948\u094D\u0954\u0959\u0960" +
        "\u0965\u096D\u0972\u0976\u097D\u0983\u098A\u0991\u0998\u09A0\u09A7\u09AF" +
        "\u09B3\u09BA\u09C1\u09C8\u09D0\u09D7\u09DF\u09E5\u09EB\u09F7\u09FD\u0A03" +
        "\u0A0E\u0A17\u0A1E\u0A25\u0A2A\u0A2E\u0A37\u0A42\u0A4C\u0A57\u0A62\u0A6D" +
        "\u0A78\u0A84\u0A86\u0A9B\u0A9D\u0AB0\u0AB2\u0ABE\u0AC0\u0ACF\u0AD1\u0ADB" +
        "\u0AE9\u0AED\u0AF1\u0AF3\u0B0A\u0B15\u0B1B";
    Java8Parser._serializedATN = Utils.join([
        Java8Parser._serializedATNSegment0,
        Java8Parser._serializedATNSegment1,
        Java8Parser._serializedATNSegment2,
        Java8Parser._serializedATNSegment3,
        Java8Parser._serializedATNSegment4,
        Java8Parser._serializedATNSegment5,
    ], "");
    return Java8Parser;
}(Parser_1.Parser));
exports.Java8Parser = Java8Parser;
var LiteralContext = /** @class */ (function (_super) {
    __extends(LiteralContext, _super);
    function LiteralContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LiteralContext.prototype.IntegerLiteral = function () { return this.tryGetToken(Java8Parser.IntegerLiteral, 0); };
    LiteralContext.prototype.FloatingPointLiteral = function () { return this.tryGetToken(Java8Parser.FloatingPointLiteral, 0); };
    LiteralContext.prototype.BooleanLiteral = function () { return this.tryGetToken(Java8Parser.BooleanLiteral, 0); };
    LiteralContext.prototype.CharacterLiteral = function () { return this.tryGetToken(Java8Parser.CharacterLiteral, 0); };
    LiteralContext.prototype.StringLiteral = function () { return this.tryGetToken(Java8Parser.StringLiteral, 0); };
    LiteralContext.prototype.NullLiteral = function () { return this.tryGetToken(Java8Parser.NullLiteral, 0); };
    Object.defineProperty(LiteralContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_literal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LiteralContext.prototype.enterRule = function (listener) {
        if (listener.enterLiteral) {
            listener.enterLiteral(this);
        }
    };
    // @Override
    LiteralContext.prototype.exitRule = function (listener) {
        if (listener.exitLiteral) {
            listener.exitLiteral(this);
        }
    };
    // @Override
    LiteralContext.prototype.accept = function (visitor) {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LiteralContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LiteralContext = LiteralContext;
var PrimitiveTypeContext = /** @class */ (function (_super) {
    __extends(PrimitiveTypeContext, _super);
    function PrimitiveTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimitiveTypeContext.prototype.numericType = function () {
        return this.tryGetRuleContext(0, NumericTypeContext);
    };
    PrimitiveTypeContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    PrimitiveTypeContext.prototype.BOOLEAN = function () { return this.tryGetToken(Java8Parser.BOOLEAN, 0); };
    Object.defineProperty(PrimitiveTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primitiveType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimitiveTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimitiveType) {
            listener.enterPrimitiveType(this);
        }
    };
    // @Override
    PrimitiveTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimitiveType) {
            listener.exitPrimitiveType(this);
        }
    };
    // @Override
    PrimitiveTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimitiveType) {
            return visitor.visitPrimitiveType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimitiveTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimitiveTypeContext = PrimitiveTypeContext;
var NumericTypeContext = /** @class */ (function (_super) {
    __extends(NumericTypeContext, _super);
    function NumericTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NumericTypeContext.prototype.integralType = function () {
        return this.tryGetRuleContext(0, IntegralTypeContext);
    };
    NumericTypeContext.prototype.floatingPointType = function () {
        return this.tryGetRuleContext(0, FloatingPointTypeContext);
    };
    Object.defineProperty(NumericTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_numericType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NumericTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterNumericType) {
            listener.enterNumericType(this);
        }
    };
    // @Override
    NumericTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitNumericType) {
            listener.exitNumericType(this);
        }
    };
    // @Override
    NumericTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitNumericType) {
            return visitor.visitNumericType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NumericTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NumericTypeContext = NumericTypeContext;
var IntegralTypeContext = /** @class */ (function (_super) {
    __extends(IntegralTypeContext, _super);
    function IntegralTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IntegralTypeContext.prototype.BYTE = function () { return this.tryGetToken(Java8Parser.BYTE, 0); };
    IntegralTypeContext.prototype.SHORT = function () { return this.tryGetToken(Java8Parser.SHORT, 0); };
    IntegralTypeContext.prototype.INT = function () { return this.tryGetToken(Java8Parser.INT, 0); };
    IntegralTypeContext.prototype.LONG = function () { return this.tryGetToken(Java8Parser.LONG, 0); };
    IntegralTypeContext.prototype.CHAR = function () { return this.tryGetToken(Java8Parser.CHAR, 0); };
    Object.defineProperty(IntegralTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_integralType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IntegralTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterIntegralType) {
            listener.enterIntegralType(this);
        }
    };
    // @Override
    IntegralTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitIntegralType) {
            listener.exitIntegralType(this);
        }
    };
    // @Override
    IntegralTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitIntegralType) {
            return visitor.visitIntegralType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IntegralTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IntegralTypeContext = IntegralTypeContext;
var FloatingPointTypeContext = /** @class */ (function (_super) {
    __extends(FloatingPointTypeContext, _super);
    function FloatingPointTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FloatingPointTypeContext.prototype.FLOAT = function () { return this.tryGetToken(Java8Parser.FLOAT, 0); };
    FloatingPointTypeContext.prototype.DOUBLE = function () { return this.tryGetToken(Java8Parser.DOUBLE, 0); };
    Object.defineProperty(FloatingPointTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_floatingPointType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FloatingPointTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterFloatingPointType) {
            listener.enterFloatingPointType(this);
        }
    };
    // @Override
    FloatingPointTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitFloatingPointType) {
            listener.exitFloatingPointType(this);
        }
    };
    // @Override
    FloatingPointTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitFloatingPointType) {
            return visitor.visitFloatingPointType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FloatingPointTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FloatingPointTypeContext = FloatingPointTypeContext;
var ReferenceTypeContext = /** @class */ (function (_super) {
    __extends(ReferenceTypeContext, _super);
    function ReferenceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReferenceTypeContext.prototype.classOrInterfaceType = function () {
        return this.tryGetRuleContext(0, ClassOrInterfaceTypeContext);
    };
    ReferenceTypeContext.prototype.typeVariable = function () {
        return this.tryGetRuleContext(0, TypeVariableContext);
    };
    ReferenceTypeContext.prototype.arrayType = function () {
        return this.tryGetRuleContext(0, ArrayTypeContext);
    };
    Object.defineProperty(ReferenceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_referenceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReferenceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterReferenceType) {
            listener.enterReferenceType(this);
        }
    };
    // @Override
    ReferenceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitReferenceType) {
            listener.exitReferenceType(this);
        }
    };
    // @Override
    ReferenceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitReferenceType) {
            return visitor.visitReferenceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReferenceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReferenceTypeContext = ReferenceTypeContext;
var ClassOrInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(ClassOrInterfaceTypeContext, _super);
    function ClassOrInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassOrInterfaceTypeContext.prototype.classType_lfno_classOrInterfaceType = function () {
        return this.tryGetRuleContext(0, ClassType_lfno_classOrInterfaceTypeContext);
    };
    ClassOrInterfaceTypeContext.prototype.interfaceType_lfno_classOrInterfaceType = function () {
        return this.tryGetRuleContext(0, InterfaceType_lfno_classOrInterfaceTypeContext);
    };
    ClassOrInterfaceTypeContext.prototype.classType_lf_classOrInterfaceType = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassType_lf_classOrInterfaceTypeContext);
        }
        else {
            return this.getRuleContext(i, ClassType_lf_classOrInterfaceTypeContext);
        }
    };
    ClassOrInterfaceTypeContext.prototype.interfaceType_lf_classOrInterfaceType = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InterfaceType_lf_classOrInterfaceTypeContext);
        }
        else {
            return this.getRuleContext(i, InterfaceType_lf_classOrInterfaceTypeContext);
        }
    };
    Object.defineProperty(ClassOrInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classOrInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassOrInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterClassOrInterfaceType) {
            listener.enterClassOrInterfaceType(this);
        }
    };
    // @Override
    ClassOrInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitClassOrInterfaceType) {
            listener.exitClassOrInterfaceType(this);
        }
    };
    // @Override
    ClassOrInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitClassOrInterfaceType) {
            return visitor.visitClassOrInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassOrInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext;
var ClassTypeContext = /** @class */ (function (_super) {
    __extends(ClassTypeContext, _super);
    function ClassTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassTypeContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    ClassTypeContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    ClassTypeContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    ClassTypeContext.prototype.classOrInterfaceType = function () {
        return this.tryGetRuleContext(0, ClassOrInterfaceTypeContext);
    };
    ClassTypeContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    Object.defineProperty(ClassTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterClassType) {
            listener.enterClassType(this);
        }
    };
    // @Override
    ClassTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitClassType) {
            listener.exitClassType(this);
        }
    };
    // @Override
    ClassTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitClassType) {
            return visitor.visitClassType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassTypeContext = ClassTypeContext;
var ClassType_lf_classOrInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(ClassType_lf_classOrInterfaceTypeContext, _super);
    function ClassType_lf_classOrInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassType_lf_classOrInterfaceTypeContext.prototype.DOT = function () { return this.getToken(Java8Parser.DOT, 0); };
    ClassType_lf_classOrInterfaceTypeContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    ClassType_lf_classOrInterfaceTypeContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    ClassType_lf_classOrInterfaceTypeContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    Object.defineProperty(ClassType_lf_classOrInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classType_lf_classOrInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassType_lf_classOrInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterClassType_lf_classOrInterfaceType) {
            listener.enterClassType_lf_classOrInterfaceType(this);
        }
    };
    // @Override
    ClassType_lf_classOrInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitClassType_lf_classOrInterfaceType) {
            listener.exitClassType_lf_classOrInterfaceType(this);
        }
    };
    // @Override
    ClassType_lf_classOrInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitClassType_lf_classOrInterfaceType) {
            return visitor.visitClassType_lf_classOrInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassType_lf_classOrInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassType_lf_classOrInterfaceTypeContext = ClassType_lf_classOrInterfaceTypeContext;
var ClassType_lfno_classOrInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(ClassType_lfno_classOrInterfaceTypeContext, _super);
    function ClassType_lfno_classOrInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassType_lfno_classOrInterfaceTypeContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    ClassType_lfno_classOrInterfaceTypeContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    ClassType_lfno_classOrInterfaceTypeContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    Object.defineProperty(ClassType_lfno_classOrInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classType_lfno_classOrInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassType_lfno_classOrInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterClassType_lfno_classOrInterfaceType) {
            listener.enterClassType_lfno_classOrInterfaceType(this);
        }
    };
    // @Override
    ClassType_lfno_classOrInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitClassType_lfno_classOrInterfaceType) {
            listener.exitClassType_lfno_classOrInterfaceType(this);
        }
    };
    // @Override
    ClassType_lfno_classOrInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitClassType_lfno_classOrInterfaceType) {
            return visitor.visitClassType_lfno_classOrInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassType_lfno_classOrInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassType_lfno_classOrInterfaceTypeContext = ClassType_lfno_classOrInterfaceTypeContext;
var InterfaceTypeContext = /** @class */ (function (_super) {
    __extends(InterfaceTypeContext, _super);
    function InterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InterfaceTypeContext.prototype.classType = function () {
        return this.getRuleContext(0, ClassTypeContext);
    };
    Object.defineProperty(InterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_interfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterInterfaceType) {
            listener.enterInterfaceType(this);
        }
    };
    // @Override
    InterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitInterfaceType) {
            listener.exitInterfaceType(this);
        }
    };
    // @Override
    InterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitInterfaceType) {
            return visitor.visitInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InterfaceTypeContext = InterfaceTypeContext;
var InterfaceType_lf_classOrInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(InterfaceType_lf_classOrInterfaceTypeContext, _super);
    function InterfaceType_lf_classOrInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InterfaceType_lf_classOrInterfaceTypeContext.prototype.classType_lf_classOrInterfaceType = function () {
        return this.getRuleContext(0, ClassType_lf_classOrInterfaceTypeContext);
    };
    Object.defineProperty(InterfaceType_lf_classOrInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_interfaceType_lf_classOrInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InterfaceType_lf_classOrInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterInterfaceType_lf_classOrInterfaceType) {
            listener.enterInterfaceType_lf_classOrInterfaceType(this);
        }
    };
    // @Override
    InterfaceType_lf_classOrInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitInterfaceType_lf_classOrInterfaceType) {
            listener.exitInterfaceType_lf_classOrInterfaceType(this);
        }
    };
    // @Override
    InterfaceType_lf_classOrInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitInterfaceType_lf_classOrInterfaceType) {
            return visitor.visitInterfaceType_lf_classOrInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InterfaceType_lf_classOrInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InterfaceType_lf_classOrInterfaceTypeContext = InterfaceType_lf_classOrInterfaceTypeContext;
var InterfaceType_lfno_classOrInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(InterfaceType_lfno_classOrInterfaceTypeContext, _super);
    function InterfaceType_lfno_classOrInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InterfaceType_lfno_classOrInterfaceTypeContext.prototype.classType_lfno_classOrInterfaceType = function () {
        return this.getRuleContext(0, ClassType_lfno_classOrInterfaceTypeContext);
    };
    Object.defineProperty(InterfaceType_lfno_classOrInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InterfaceType_lfno_classOrInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterInterfaceType_lfno_classOrInterfaceType) {
            listener.enterInterfaceType_lfno_classOrInterfaceType(this);
        }
    };
    // @Override
    InterfaceType_lfno_classOrInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitInterfaceType_lfno_classOrInterfaceType) {
            listener.exitInterfaceType_lfno_classOrInterfaceType(this);
        }
    };
    // @Override
    InterfaceType_lfno_classOrInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitInterfaceType_lfno_classOrInterfaceType) {
            return visitor.visitInterfaceType_lfno_classOrInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InterfaceType_lfno_classOrInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InterfaceType_lfno_classOrInterfaceTypeContext = InterfaceType_lfno_classOrInterfaceTypeContext;
var TypeVariableContext = /** @class */ (function (_super) {
    __extends(TypeVariableContext, _super);
    function TypeVariableContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeVariableContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    TypeVariableContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    Object.defineProperty(TypeVariableContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeVariable; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeVariableContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeVariable) {
            listener.enterTypeVariable(this);
        }
    };
    // @Override
    TypeVariableContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeVariable) {
            listener.exitTypeVariable(this);
        }
    };
    // @Override
    TypeVariableContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeVariable) {
            return visitor.visitTypeVariable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeVariableContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeVariableContext = TypeVariableContext;
var ArrayTypeContext = /** @class */ (function (_super) {
    __extends(ArrayTypeContext, _super);
    function ArrayTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArrayTypeContext.prototype.primitiveType = function () {
        return this.tryGetRuleContext(0, PrimitiveTypeContext);
    };
    ArrayTypeContext.prototype.dims = function () {
        return this.getRuleContext(0, DimsContext);
    };
    ArrayTypeContext.prototype.classOrInterfaceType = function () {
        return this.tryGetRuleContext(0, ClassOrInterfaceTypeContext);
    };
    ArrayTypeContext.prototype.typeVariable = function () {
        return this.tryGetRuleContext(0, TypeVariableContext);
    };
    Object.defineProperty(ArrayTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_arrayType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArrayTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayType) {
            listener.enterArrayType(this);
        }
    };
    // @Override
    ArrayTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayType) {
            listener.exitArrayType(this);
        }
    };
    // @Override
    ArrayTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayType) {
            return visitor.visitArrayType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArrayTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArrayTypeContext = ArrayTypeContext;
var DimsContext = /** @class */ (function (_super) {
    __extends(DimsContext, _super);
    function DimsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DimsContext.prototype.LBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.LBRACK);
        }
        else {
            return this.getToken(Java8Parser.LBRACK, i);
        }
    };
    DimsContext.prototype.RBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.RBRACK);
        }
        else {
            return this.getToken(Java8Parser.RBRACK, i);
        }
    };
    DimsContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    Object.defineProperty(DimsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_dims; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DimsContext.prototype.enterRule = function (listener) {
        if (listener.enterDims) {
            listener.enterDims(this);
        }
    };
    // @Override
    DimsContext.prototype.exitRule = function (listener) {
        if (listener.exitDims) {
            listener.exitDims(this);
        }
    };
    // @Override
    DimsContext.prototype.accept = function (visitor) {
        if (visitor.visitDims) {
            return visitor.visitDims(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DimsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DimsContext = DimsContext;
var TypeParameterContext = /** @class */ (function (_super) {
    __extends(TypeParameterContext, _super);
    function TypeParameterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeParameterContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    TypeParameterContext.prototype.typeParameterModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeParameterModifierContext);
        }
        else {
            return this.getRuleContext(i, TypeParameterModifierContext);
        }
    };
    TypeParameterContext.prototype.typeBound = function () {
        return this.tryGetRuleContext(0, TypeBoundContext);
    };
    Object.defineProperty(TypeParameterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeParameter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeParameterContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeParameter) {
            listener.enterTypeParameter(this);
        }
    };
    // @Override
    TypeParameterContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeParameter) {
            listener.exitTypeParameter(this);
        }
    };
    // @Override
    TypeParameterContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeParameter) {
            return visitor.visitTypeParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeParameterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeParameterContext = TypeParameterContext;
var TypeParameterModifierContext = /** @class */ (function (_super) {
    __extends(TypeParameterModifierContext, _super);
    function TypeParameterModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeParameterModifierContext.prototype.annotation = function () {
        return this.getRuleContext(0, AnnotationContext);
    };
    Object.defineProperty(TypeParameterModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeParameterModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeParameterModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeParameterModifier) {
            listener.enterTypeParameterModifier(this);
        }
    };
    // @Override
    TypeParameterModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeParameterModifier) {
            listener.exitTypeParameterModifier(this);
        }
    };
    // @Override
    TypeParameterModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeParameterModifier) {
            return visitor.visitTypeParameterModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeParameterModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeParameterModifierContext = TypeParameterModifierContext;
var TypeBoundContext = /** @class */ (function (_super) {
    __extends(TypeBoundContext, _super);
    function TypeBoundContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeBoundContext.prototype.EXTENDS = function () { return this.getToken(Java8Parser.EXTENDS, 0); };
    TypeBoundContext.prototype.typeVariable = function () {
        return this.tryGetRuleContext(0, TypeVariableContext);
    };
    TypeBoundContext.prototype.classOrInterfaceType = function () {
        return this.tryGetRuleContext(0, ClassOrInterfaceTypeContext);
    };
    TypeBoundContext.prototype.additionalBound = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AdditionalBoundContext);
        }
        else {
            return this.getRuleContext(i, AdditionalBoundContext);
        }
    };
    Object.defineProperty(TypeBoundContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeBound; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeBoundContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeBound) {
            listener.enterTypeBound(this);
        }
    };
    // @Override
    TypeBoundContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeBound) {
            listener.exitTypeBound(this);
        }
    };
    // @Override
    TypeBoundContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeBound) {
            return visitor.visitTypeBound(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeBoundContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeBoundContext = TypeBoundContext;
var AdditionalBoundContext = /** @class */ (function (_super) {
    __extends(AdditionalBoundContext, _super);
    function AdditionalBoundContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AdditionalBoundContext.prototype.BITAND = function () { return this.getToken(Java8Parser.BITAND, 0); };
    AdditionalBoundContext.prototype.interfaceType = function () {
        return this.getRuleContext(0, InterfaceTypeContext);
    };
    Object.defineProperty(AdditionalBoundContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_additionalBound; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AdditionalBoundContext.prototype.enterRule = function (listener) {
        if (listener.enterAdditionalBound) {
            listener.enterAdditionalBound(this);
        }
    };
    // @Override
    AdditionalBoundContext.prototype.exitRule = function (listener) {
        if (listener.exitAdditionalBound) {
            listener.exitAdditionalBound(this);
        }
    };
    // @Override
    AdditionalBoundContext.prototype.accept = function (visitor) {
        if (visitor.visitAdditionalBound) {
            return visitor.visitAdditionalBound(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AdditionalBoundContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AdditionalBoundContext = AdditionalBoundContext;
var TypeArgumentsContext = /** @class */ (function (_super) {
    __extends(TypeArgumentsContext, _super);
    function TypeArgumentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeArgumentsContext.prototype.LT = function () { return this.getToken(Java8Parser.LT, 0); };
    TypeArgumentsContext.prototype.typeArgumentList = function () {
        return this.getRuleContext(0, TypeArgumentListContext);
    };
    TypeArgumentsContext.prototype.GT = function () { return this.getToken(Java8Parser.GT, 0); };
    Object.defineProperty(TypeArgumentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeArguments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeArgumentsContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeArguments) {
            listener.enterTypeArguments(this);
        }
    };
    // @Override
    TypeArgumentsContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeArguments) {
            listener.exitTypeArguments(this);
        }
    };
    // @Override
    TypeArgumentsContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeArguments) {
            return visitor.visitTypeArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeArgumentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeArgumentsContext = TypeArgumentsContext;
var TypeArgumentListContext = /** @class */ (function (_super) {
    __extends(TypeArgumentListContext, _super);
    function TypeArgumentListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeArgumentListContext.prototype.typeArgument = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeArgumentContext);
        }
        else {
            return this.getRuleContext(i, TypeArgumentContext);
        }
    };
    TypeArgumentListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(TypeArgumentListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeArgumentList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeArgumentListContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeArgumentList) {
            listener.enterTypeArgumentList(this);
        }
    };
    // @Override
    TypeArgumentListContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeArgumentList) {
            listener.exitTypeArgumentList(this);
        }
    };
    // @Override
    TypeArgumentListContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeArgumentList) {
            return visitor.visitTypeArgumentList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeArgumentListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeArgumentListContext = TypeArgumentListContext;
var TypeArgumentContext = /** @class */ (function (_super) {
    __extends(TypeArgumentContext, _super);
    function TypeArgumentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeArgumentContext.prototype.referenceType = function () {
        return this.tryGetRuleContext(0, ReferenceTypeContext);
    };
    TypeArgumentContext.prototype.wildcard = function () {
        return this.tryGetRuleContext(0, WildcardContext);
    };
    Object.defineProperty(TypeArgumentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeArgument; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeArgumentContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeArgument) {
            listener.enterTypeArgument(this);
        }
    };
    // @Override
    TypeArgumentContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeArgument) {
            listener.exitTypeArgument(this);
        }
    };
    // @Override
    TypeArgumentContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeArgument) {
            return visitor.visitTypeArgument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeArgumentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeArgumentContext = TypeArgumentContext;
var WildcardContext = /** @class */ (function (_super) {
    __extends(WildcardContext, _super);
    function WildcardContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WildcardContext.prototype.QUESTION = function () { return this.getToken(Java8Parser.QUESTION, 0); };
    WildcardContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    WildcardContext.prototype.wildcardBounds = function () {
        return this.tryGetRuleContext(0, WildcardBoundsContext);
    };
    Object.defineProperty(WildcardContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_wildcard; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WildcardContext.prototype.enterRule = function (listener) {
        if (listener.enterWildcard) {
            listener.enterWildcard(this);
        }
    };
    // @Override
    WildcardContext.prototype.exitRule = function (listener) {
        if (listener.exitWildcard) {
            listener.exitWildcard(this);
        }
    };
    // @Override
    WildcardContext.prototype.accept = function (visitor) {
        if (visitor.visitWildcard) {
            return visitor.visitWildcard(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WildcardContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WildcardContext = WildcardContext;
var WildcardBoundsContext = /** @class */ (function (_super) {
    __extends(WildcardBoundsContext, _super);
    function WildcardBoundsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WildcardBoundsContext.prototype.EXTENDS = function () { return this.tryGetToken(Java8Parser.EXTENDS, 0); };
    WildcardBoundsContext.prototype.referenceType = function () {
        return this.getRuleContext(0, ReferenceTypeContext);
    };
    WildcardBoundsContext.prototype.SUPER = function () { return this.tryGetToken(Java8Parser.SUPER, 0); };
    Object.defineProperty(WildcardBoundsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_wildcardBounds; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WildcardBoundsContext.prototype.enterRule = function (listener) {
        if (listener.enterWildcardBounds) {
            listener.enterWildcardBounds(this);
        }
    };
    // @Override
    WildcardBoundsContext.prototype.exitRule = function (listener) {
        if (listener.exitWildcardBounds) {
            listener.exitWildcardBounds(this);
        }
    };
    // @Override
    WildcardBoundsContext.prototype.accept = function (visitor) {
        if (visitor.visitWildcardBounds) {
            return visitor.visitWildcardBounds(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WildcardBoundsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WildcardBoundsContext = WildcardBoundsContext;
var PackageNameContext = /** @class */ (function (_super) {
    __extends(PackageNameContext, _super);
    function PackageNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PackageNameContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    PackageNameContext.prototype.packageName = function () {
        return this.tryGetRuleContext(0, PackageNameContext);
    };
    PackageNameContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    Object.defineProperty(PackageNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_packageName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PackageNameContext.prototype.enterRule = function (listener) {
        if (listener.enterPackageName) {
            listener.enterPackageName(this);
        }
    };
    // @Override
    PackageNameContext.prototype.exitRule = function (listener) {
        if (listener.exitPackageName) {
            listener.exitPackageName(this);
        }
    };
    // @Override
    PackageNameContext.prototype.accept = function (visitor) {
        if (visitor.visitPackageName) {
            return visitor.visitPackageName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PackageNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PackageNameContext = PackageNameContext;
var TypeNameContext = /** @class */ (function (_super) {
    __extends(TypeNameContext, _super);
    function TypeNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeNameContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    TypeNameContext.prototype.packageOrTypeName = function () {
        return this.tryGetRuleContext(0, PackageOrTypeNameContext);
    };
    TypeNameContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    Object.defineProperty(TypeNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeNameContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeName) {
            listener.enterTypeName(this);
        }
    };
    // @Override
    TypeNameContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeName) {
            listener.exitTypeName(this);
        }
    };
    // @Override
    TypeNameContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeName) {
            return visitor.visitTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeNameContext = TypeNameContext;
var PackageOrTypeNameContext = /** @class */ (function (_super) {
    __extends(PackageOrTypeNameContext, _super);
    function PackageOrTypeNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PackageOrTypeNameContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    PackageOrTypeNameContext.prototype.packageOrTypeName = function () {
        return this.tryGetRuleContext(0, PackageOrTypeNameContext);
    };
    PackageOrTypeNameContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    Object.defineProperty(PackageOrTypeNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_packageOrTypeName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PackageOrTypeNameContext.prototype.enterRule = function (listener) {
        if (listener.enterPackageOrTypeName) {
            listener.enterPackageOrTypeName(this);
        }
    };
    // @Override
    PackageOrTypeNameContext.prototype.exitRule = function (listener) {
        if (listener.exitPackageOrTypeName) {
            listener.exitPackageOrTypeName(this);
        }
    };
    // @Override
    PackageOrTypeNameContext.prototype.accept = function (visitor) {
        if (visitor.visitPackageOrTypeName) {
            return visitor.visitPackageOrTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PackageOrTypeNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PackageOrTypeNameContext = PackageOrTypeNameContext;
var ExpressionNameContext = /** @class */ (function (_super) {
    __extends(ExpressionNameContext, _super);
    function ExpressionNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExpressionNameContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    ExpressionNameContext.prototype.ambiguousName = function () {
        return this.tryGetRuleContext(0, AmbiguousNameContext);
    };
    ExpressionNameContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    Object.defineProperty(ExpressionNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_expressionName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExpressionNameContext.prototype.enterRule = function (listener) {
        if (listener.enterExpressionName) {
            listener.enterExpressionName(this);
        }
    };
    // @Override
    ExpressionNameContext.prototype.exitRule = function (listener) {
        if (listener.exitExpressionName) {
            listener.exitExpressionName(this);
        }
    };
    // @Override
    ExpressionNameContext.prototype.accept = function (visitor) {
        if (visitor.visitExpressionName) {
            return visitor.visitExpressionName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExpressionNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExpressionNameContext = ExpressionNameContext;
var MethodNameContext = /** @class */ (function (_super) {
    __extends(MethodNameContext, _super);
    function MethodNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodNameContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    Object.defineProperty(MethodNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodNameContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodName) {
            listener.enterMethodName(this);
        }
    };
    // @Override
    MethodNameContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodName) {
            listener.exitMethodName(this);
        }
    };
    // @Override
    MethodNameContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodName) {
            return visitor.visitMethodName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodNameContext = MethodNameContext;
var AmbiguousNameContext = /** @class */ (function (_super) {
    __extends(AmbiguousNameContext, _super);
    function AmbiguousNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AmbiguousNameContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    AmbiguousNameContext.prototype.ambiguousName = function () {
        return this.tryGetRuleContext(0, AmbiguousNameContext);
    };
    AmbiguousNameContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    Object.defineProperty(AmbiguousNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_ambiguousName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AmbiguousNameContext.prototype.enterRule = function (listener) {
        if (listener.enterAmbiguousName) {
            listener.enterAmbiguousName(this);
        }
    };
    // @Override
    AmbiguousNameContext.prototype.exitRule = function (listener) {
        if (listener.exitAmbiguousName) {
            listener.exitAmbiguousName(this);
        }
    };
    // @Override
    AmbiguousNameContext.prototype.accept = function (visitor) {
        if (visitor.visitAmbiguousName) {
            return visitor.visitAmbiguousName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AmbiguousNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AmbiguousNameContext = AmbiguousNameContext;
var CompilationUnitContext = /** @class */ (function (_super) {
    __extends(CompilationUnitContext, _super);
    function CompilationUnitContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CompilationUnitContext.prototype.EOF = function () { return this.getToken(Java8Parser.EOF, 0); };
    CompilationUnitContext.prototype.packageDeclaration = function () {
        return this.tryGetRuleContext(0, PackageDeclarationContext);
    };
    CompilationUnitContext.prototype.importDeclaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ImportDeclarationContext);
        }
        else {
            return this.getRuleContext(i, ImportDeclarationContext);
        }
    };
    CompilationUnitContext.prototype.typeDeclaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeDeclarationContext);
        }
        else {
            return this.getRuleContext(i, TypeDeclarationContext);
        }
    };
    Object.defineProperty(CompilationUnitContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_compilationUnit; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CompilationUnitContext.prototype.enterRule = function (listener) {
        if (listener.enterCompilationUnit) {
            listener.enterCompilationUnit(this);
        }
    };
    // @Override
    CompilationUnitContext.prototype.exitRule = function (listener) {
        if (listener.exitCompilationUnit) {
            listener.exitCompilationUnit(this);
        }
    };
    // @Override
    CompilationUnitContext.prototype.accept = function (visitor) {
        if (visitor.visitCompilationUnit) {
            return visitor.visitCompilationUnit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CompilationUnitContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CompilationUnitContext = CompilationUnitContext;
var PackageDeclarationContext = /** @class */ (function (_super) {
    __extends(PackageDeclarationContext, _super);
    function PackageDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PackageDeclarationContext.prototype.PACKAGE = function () { return this.getToken(Java8Parser.PACKAGE, 0); };
    PackageDeclarationContext.prototype.packageName = function () {
        return this.getRuleContext(0, PackageNameContext);
    };
    PackageDeclarationContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    PackageDeclarationContext.prototype.packageModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PackageModifierContext);
        }
        else {
            return this.getRuleContext(i, PackageModifierContext);
        }
    };
    Object.defineProperty(PackageDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_packageDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PackageDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterPackageDeclaration) {
            listener.enterPackageDeclaration(this);
        }
    };
    // @Override
    PackageDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitPackageDeclaration) {
            listener.exitPackageDeclaration(this);
        }
    };
    // @Override
    PackageDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitPackageDeclaration) {
            return visitor.visitPackageDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PackageDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PackageDeclarationContext = PackageDeclarationContext;
var PackageModifierContext = /** @class */ (function (_super) {
    __extends(PackageModifierContext, _super);
    function PackageModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PackageModifierContext.prototype.annotation = function () {
        return this.getRuleContext(0, AnnotationContext);
    };
    Object.defineProperty(PackageModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_packageModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PackageModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterPackageModifier) {
            listener.enterPackageModifier(this);
        }
    };
    // @Override
    PackageModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitPackageModifier) {
            listener.exitPackageModifier(this);
        }
    };
    // @Override
    PackageModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitPackageModifier) {
            return visitor.visitPackageModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PackageModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PackageModifierContext = PackageModifierContext;
var ImportDeclarationContext = /** @class */ (function (_super) {
    __extends(ImportDeclarationContext, _super);
    function ImportDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ImportDeclarationContext.prototype.singleTypeImportDeclaration = function () {
        return this.tryGetRuleContext(0, SingleTypeImportDeclarationContext);
    };
    ImportDeclarationContext.prototype.typeImportOnDemandDeclaration = function () {
        return this.tryGetRuleContext(0, TypeImportOnDemandDeclarationContext);
    };
    ImportDeclarationContext.prototype.singleStaticImportDeclaration = function () {
        return this.tryGetRuleContext(0, SingleStaticImportDeclarationContext);
    };
    ImportDeclarationContext.prototype.staticImportOnDemandDeclaration = function () {
        return this.tryGetRuleContext(0, StaticImportOnDemandDeclarationContext);
    };
    Object.defineProperty(ImportDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_importDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ImportDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterImportDeclaration) {
            listener.enterImportDeclaration(this);
        }
    };
    // @Override
    ImportDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitImportDeclaration) {
            listener.exitImportDeclaration(this);
        }
    };
    // @Override
    ImportDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitImportDeclaration) {
            return visitor.visitImportDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ImportDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ImportDeclarationContext = ImportDeclarationContext;
var SingleTypeImportDeclarationContext = /** @class */ (function (_super) {
    __extends(SingleTypeImportDeclarationContext, _super);
    function SingleTypeImportDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SingleTypeImportDeclarationContext.prototype.IMPORT = function () { return this.getToken(Java8Parser.IMPORT, 0); };
    SingleTypeImportDeclarationContext.prototype.typeName = function () {
        return this.getRuleContext(0, TypeNameContext);
    };
    SingleTypeImportDeclarationContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(SingleTypeImportDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_singleTypeImportDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SingleTypeImportDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterSingleTypeImportDeclaration) {
            listener.enterSingleTypeImportDeclaration(this);
        }
    };
    // @Override
    SingleTypeImportDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitSingleTypeImportDeclaration) {
            listener.exitSingleTypeImportDeclaration(this);
        }
    };
    // @Override
    SingleTypeImportDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitSingleTypeImportDeclaration) {
            return visitor.visitSingleTypeImportDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SingleTypeImportDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SingleTypeImportDeclarationContext = SingleTypeImportDeclarationContext;
var TypeImportOnDemandDeclarationContext = /** @class */ (function (_super) {
    __extends(TypeImportOnDemandDeclarationContext, _super);
    function TypeImportOnDemandDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeImportOnDemandDeclarationContext.prototype.IMPORT = function () { return this.getToken(Java8Parser.IMPORT, 0); };
    TypeImportOnDemandDeclarationContext.prototype.packageOrTypeName = function () {
        return this.getRuleContext(0, PackageOrTypeNameContext);
    };
    TypeImportOnDemandDeclarationContext.prototype.DOT = function () { return this.getToken(Java8Parser.DOT, 0); };
    TypeImportOnDemandDeclarationContext.prototype.MUL = function () { return this.getToken(Java8Parser.MUL, 0); };
    TypeImportOnDemandDeclarationContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(TypeImportOnDemandDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeImportOnDemandDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeImportOnDemandDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeImportOnDemandDeclaration) {
            listener.enterTypeImportOnDemandDeclaration(this);
        }
    };
    // @Override
    TypeImportOnDemandDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeImportOnDemandDeclaration) {
            listener.exitTypeImportOnDemandDeclaration(this);
        }
    };
    // @Override
    TypeImportOnDemandDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeImportOnDemandDeclaration) {
            return visitor.visitTypeImportOnDemandDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeImportOnDemandDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeImportOnDemandDeclarationContext = TypeImportOnDemandDeclarationContext;
var SingleStaticImportDeclarationContext = /** @class */ (function (_super) {
    __extends(SingleStaticImportDeclarationContext, _super);
    function SingleStaticImportDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SingleStaticImportDeclarationContext.prototype.IMPORT = function () { return this.getToken(Java8Parser.IMPORT, 0); };
    SingleStaticImportDeclarationContext.prototype.STATIC = function () { return this.getToken(Java8Parser.STATIC, 0); };
    SingleStaticImportDeclarationContext.prototype.typeName = function () {
        return this.getRuleContext(0, TypeNameContext);
    };
    SingleStaticImportDeclarationContext.prototype.DOT = function () { return this.getToken(Java8Parser.DOT, 0); };
    SingleStaticImportDeclarationContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    SingleStaticImportDeclarationContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(SingleStaticImportDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_singleStaticImportDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SingleStaticImportDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterSingleStaticImportDeclaration) {
            listener.enterSingleStaticImportDeclaration(this);
        }
    };
    // @Override
    SingleStaticImportDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitSingleStaticImportDeclaration) {
            listener.exitSingleStaticImportDeclaration(this);
        }
    };
    // @Override
    SingleStaticImportDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitSingleStaticImportDeclaration) {
            return visitor.visitSingleStaticImportDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SingleStaticImportDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SingleStaticImportDeclarationContext = SingleStaticImportDeclarationContext;
var StaticImportOnDemandDeclarationContext = /** @class */ (function (_super) {
    __extends(StaticImportOnDemandDeclarationContext, _super);
    function StaticImportOnDemandDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StaticImportOnDemandDeclarationContext.prototype.IMPORT = function () { return this.getToken(Java8Parser.IMPORT, 0); };
    StaticImportOnDemandDeclarationContext.prototype.STATIC = function () { return this.getToken(Java8Parser.STATIC, 0); };
    StaticImportOnDemandDeclarationContext.prototype.typeName = function () {
        return this.getRuleContext(0, TypeNameContext);
    };
    StaticImportOnDemandDeclarationContext.prototype.DOT = function () { return this.getToken(Java8Parser.DOT, 0); };
    StaticImportOnDemandDeclarationContext.prototype.MUL = function () { return this.getToken(Java8Parser.MUL, 0); };
    StaticImportOnDemandDeclarationContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(StaticImportOnDemandDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_staticImportOnDemandDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StaticImportOnDemandDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterStaticImportOnDemandDeclaration) {
            listener.enterStaticImportOnDemandDeclaration(this);
        }
    };
    // @Override
    StaticImportOnDemandDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitStaticImportOnDemandDeclaration) {
            listener.exitStaticImportOnDemandDeclaration(this);
        }
    };
    // @Override
    StaticImportOnDemandDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitStaticImportOnDemandDeclaration) {
            return visitor.visitStaticImportOnDemandDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StaticImportOnDemandDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StaticImportOnDemandDeclarationContext = StaticImportOnDemandDeclarationContext;
var TypeDeclarationContext = /** @class */ (function (_super) {
    __extends(TypeDeclarationContext, _super);
    function TypeDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeDeclarationContext.prototype.classDeclaration = function () {
        return this.tryGetRuleContext(0, ClassDeclarationContext);
    };
    TypeDeclarationContext.prototype.interfaceDeclaration = function () {
        return this.tryGetRuleContext(0, InterfaceDeclarationContext);
    };
    TypeDeclarationContext.prototype.SEMI = function () { return this.tryGetToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(TypeDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeDeclaration) {
            listener.enterTypeDeclaration(this);
        }
    };
    // @Override
    TypeDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeDeclaration) {
            listener.exitTypeDeclaration(this);
        }
    };
    // @Override
    TypeDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeDeclaration) {
            return visitor.visitTypeDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeDeclarationContext = TypeDeclarationContext;
var ClassDeclarationContext = /** @class */ (function (_super) {
    __extends(ClassDeclarationContext, _super);
    function ClassDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassDeclarationContext.prototype.normalClassDeclaration = function () {
        return this.tryGetRuleContext(0, NormalClassDeclarationContext);
    };
    ClassDeclarationContext.prototype.enumDeclaration = function () {
        return this.tryGetRuleContext(0, EnumDeclarationContext);
    };
    Object.defineProperty(ClassDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterClassDeclaration) {
            listener.enterClassDeclaration(this);
        }
    };
    // @Override
    ClassDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitClassDeclaration) {
            listener.exitClassDeclaration(this);
        }
    };
    // @Override
    ClassDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitClassDeclaration) {
            return visitor.visitClassDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassDeclarationContext = ClassDeclarationContext;
var NormalClassDeclarationContext = /** @class */ (function (_super) {
    __extends(NormalClassDeclarationContext, _super);
    function NormalClassDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NormalClassDeclarationContext.prototype.CLASS = function () { return this.getToken(Java8Parser.CLASS, 0); };
    NormalClassDeclarationContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    NormalClassDeclarationContext.prototype.classBody = function () {
        return this.getRuleContext(0, ClassBodyContext);
    };
    NormalClassDeclarationContext.prototype.classModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassModifierContext);
        }
        else {
            return this.getRuleContext(i, ClassModifierContext);
        }
    };
    NormalClassDeclarationContext.prototype.typeParameters = function () {
        return this.tryGetRuleContext(0, TypeParametersContext);
    };
    NormalClassDeclarationContext.prototype.superclass = function () {
        return this.tryGetRuleContext(0, SuperclassContext);
    };
    NormalClassDeclarationContext.prototype.superinterfaces = function () {
        return this.tryGetRuleContext(0, SuperinterfacesContext);
    };
    Object.defineProperty(NormalClassDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_normalClassDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NormalClassDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterNormalClassDeclaration) {
            listener.enterNormalClassDeclaration(this);
        }
    };
    // @Override
    NormalClassDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitNormalClassDeclaration) {
            listener.exitNormalClassDeclaration(this);
        }
    };
    // @Override
    NormalClassDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitNormalClassDeclaration) {
            return visitor.visitNormalClassDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NormalClassDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NormalClassDeclarationContext = NormalClassDeclarationContext;
var ClassModifierContext = /** @class */ (function (_super) {
    __extends(ClassModifierContext, _super);
    function ClassModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassModifierContext.prototype.annotation = function () {
        return this.tryGetRuleContext(0, AnnotationContext);
    };
    ClassModifierContext.prototype.PUBLIC = function () { return this.tryGetToken(Java8Parser.PUBLIC, 0); };
    ClassModifierContext.prototype.PROTECTED = function () { return this.tryGetToken(Java8Parser.PROTECTED, 0); };
    ClassModifierContext.prototype.PRIVATE = function () { return this.tryGetToken(Java8Parser.PRIVATE, 0); };
    ClassModifierContext.prototype.ABSTRACT = function () { return this.tryGetToken(Java8Parser.ABSTRACT, 0); };
    ClassModifierContext.prototype.STATIC = function () { return this.tryGetToken(Java8Parser.STATIC, 0); };
    ClassModifierContext.prototype.FINAL = function () { return this.tryGetToken(Java8Parser.FINAL, 0); };
    ClassModifierContext.prototype.STRICTFP = function () { return this.tryGetToken(Java8Parser.STRICTFP, 0); };
    Object.defineProperty(ClassModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterClassModifier) {
            listener.enterClassModifier(this);
        }
    };
    // @Override
    ClassModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitClassModifier) {
            listener.exitClassModifier(this);
        }
    };
    // @Override
    ClassModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitClassModifier) {
            return visitor.visitClassModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassModifierContext = ClassModifierContext;
var TypeParametersContext = /** @class */ (function (_super) {
    __extends(TypeParametersContext, _super);
    function TypeParametersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeParametersContext.prototype.LT = function () { return this.getToken(Java8Parser.LT, 0); };
    TypeParametersContext.prototype.typeParameterList = function () {
        return this.getRuleContext(0, TypeParameterListContext);
    };
    TypeParametersContext.prototype.GT = function () { return this.getToken(Java8Parser.GT, 0); };
    Object.defineProperty(TypeParametersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeParameters; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeParametersContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeParameters) {
            listener.enterTypeParameters(this);
        }
    };
    // @Override
    TypeParametersContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeParameters) {
            listener.exitTypeParameters(this);
        }
    };
    // @Override
    TypeParametersContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeParameters) {
            return visitor.visitTypeParameters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeParametersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeParametersContext = TypeParametersContext;
var TypeParameterListContext = /** @class */ (function (_super) {
    __extends(TypeParameterListContext, _super);
    function TypeParameterListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeParameterListContext.prototype.typeParameter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeParameterContext);
        }
        else {
            return this.getRuleContext(i, TypeParameterContext);
        }
    };
    TypeParameterListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(TypeParameterListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeParameterList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeParameterListContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeParameterList) {
            listener.enterTypeParameterList(this);
        }
    };
    // @Override
    TypeParameterListContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeParameterList) {
            listener.exitTypeParameterList(this);
        }
    };
    // @Override
    TypeParameterListContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeParameterList) {
            return visitor.visitTypeParameterList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeParameterListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeParameterListContext = TypeParameterListContext;
var SuperclassContext = /** @class */ (function (_super) {
    __extends(SuperclassContext, _super);
    function SuperclassContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SuperclassContext.prototype.EXTENDS = function () { return this.getToken(Java8Parser.EXTENDS, 0); };
    SuperclassContext.prototype.classType = function () {
        return this.getRuleContext(0, ClassTypeContext);
    };
    Object.defineProperty(SuperclassContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_superclass; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SuperclassContext.prototype.enterRule = function (listener) {
        if (listener.enterSuperclass) {
            listener.enterSuperclass(this);
        }
    };
    // @Override
    SuperclassContext.prototype.exitRule = function (listener) {
        if (listener.exitSuperclass) {
            listener.exitSuperclass(this);
        }
    };
    // @Override
    SuperclassContext.prototype.accept = function (visitor) {
        if (visitor.visitSuperclass) {
            return visitor.visitSuperclass(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SuperclassContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SuperclassContext = SuperclassContext;
var SuperinterfacesContext = /** @class */ (function (_super) {
    __extends(SuperinterfacesContext, _super);
    function SuperinterfacesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SuperinterfacesContext.prototype.IMPLEMENTS = function () { return this.getToken(Java8Parser.IMPLEMENTS, 0); };
    SuperinterfacesContext.prototype.interfaceTypeList = function () {
        return this.getRuleContext(0, InterfaceTypeListContext);
    };
    Object.defineProperty(SuperinterfacesContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_superinterfaces; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SuperinterfacesContext.prototype.enterRule = function (listener) {
        if (listener.enterSuperinterfaces) {
            listener.enterSuperinterfaces(this);
        }
    };
    // @Override
    SuperinterfacesContext.prototype.exitRule = function (listener) {
        if (listener.exitSuperinterfaces) {
            listener.exitSuperinterfaces(this);
        }
    };
    // @Override
    SuperinterfacesContext.prototype.accept = function (visitor) {
        if (visitor.visitSuperinterfaces) {
            return visitor.visitSuperinterfaces(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SuperinterfacesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SuperinterfacesContext = SuperinterfacesContext;
var InterfaceTypeListContext = /** @class */ (function (_super) {
    __extends(InterfaceTypeListContext, _super);
    function InterfaceTypeListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InterfaceTypeListContext.prototype.interfaceType = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InterfaceTypeContext);
        }
        else {
            return this.getRuleContext(i, InterfaceTypeContext);
        }
    };
    InterfaceTypeListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(InterfaceTypeListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_interfaceTypeList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InterfaceTypeListContext.prototype.enterRule = function (listener) {
        if (listener.enterInterfaceTypeList) {
            listener.enterInterfaceTypeList(this);
        }
    };
    // @Override
    InterfaceTypeListContext.prototype.exitRule = function (listener) {
        if (listener.exitInterfaceTypeList) {
            listener.exitInterfaceTypeList(this);
        }
    };
    // @Override
    InterfaceTypeListContext.prototype.accept = function (visitor) {
        if (visitor.visitInterfaceTypeList) {
            return visitor.visitInterfaceTypeList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InterfaceTypeListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InterfaceTypeListContext = InterfaceTypeListContext;
var ClassBodyContext = /** @class */ (function (_super) {
    __extends(ClassBodyContext, _super);
    function ClassBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassBodyContext.prototype.LBRACE = function () { return this.getToken(Java8Parser.LBRACE, 0); };
    ClassBodyContext.prototype.RBRACE = function () { return this.getToken(Java8Parser.RBRACE, 0); };
    ClassBodyContext.prototype.classBodyDeclaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassBodyDeclarationContext);
        }
        else {
            return this.getRuleContext(i, ClassBodyDeclarationContext);
        }
    };
    Object.defineProperty(ClassBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterClassBody) {
            listener.enterClassBody(this);
        }
    };
    // @Override
    ClassBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitClassBody) {
            listener.exitClassBody(this);
        }
    };
    // @Override
    ClassBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitClassBody) {
            return visitor.visitClassBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassBodyContext = ClassBodyContext;
var ClassBodyDeclarationContext = /** @class */ (function (_super) {
    __extends(ClassBodyDeclarationContext, _super);
    function ClassBodyDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassBodyDeclarationContext.prototype.classMemberDeclaration = function () {
        return this.tryGetRuleContext(0, ClassMemberDeclarationContext);
    };
    ClassBodyDeclarationContext.prototype.instanceInitializer = function () {
        return this.tryGetRuleContext(0, InstanceInitializerContext);
    };
    ClassBodyDeclarationContext.prototype.staticInitializer = function () {
        return this.tryGetRuleContext(0, StaticInitializerContext);
    };
    ClassBodyDeclarationContext.prototype.constructorDeclaration = function () {
        return this.tryGetRuleContext(0, ConstructorDeclarationContext);
    };
    Object.defineProperty(ClassBodyDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classBodyDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassBodyDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterClassBodyDeclaration) {
            listener.enterClassBodyDeclaration(this);
        }
    };
    // @Override
    ClassBodyDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitClassBodyDeclaration) {
            listener.exitClassBodyDeclaration(this);
        }
    };
    // @Override
    ClassBodyDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitClassBodyDeclaration) {
            return visitor.visitClassBodyDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassBodyDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassBodyDeclarationContext = ClassBodyDeclarationContext;
var ClassMemberDeclarationContext = /** @class */ (function (_super) {
    __extends(ClassMemberDeclarationContext, _super);
    function ClassMemberDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassMemberDeclarationContext.prototype.fieldDeclaration = function () {
        return this.tryGetRuleContext(0, FieldDeclarationContext);
    };
    ClassMemberDeclarationContext.prototype.methodDeclaration = function () {
        return this.tryGetRuleContext(0, MethodDeclarationContext);
    };
    ClassMemberDeclarationContext.prototype.classDeclaration = function () {
        return this.tryGetRuleContext(0, ClassDeclarationContext);
    };
    ClassMemberDeclarationContext.prototype.interfaceDeclaration = function () {
        return this.tryGetRuleContext(0, InterfaceDeclarationContext);
    };
    ClassMemberDeclarationContext.prototype.SEMI = function () { return this.tryGetToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(ClassMemberDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classMemberDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassMemberDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterClassMemberDeclaration) {
            listener.enterClassMemberDeclaration(this);
        }
    };
    // @Override
    ClassMemberDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitClassMemberDeclaration) {
            listener.exitClassMemberDeclaration(this);
        }
    };
    // @Override
    ClassMemberDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitClassMemberDeclaration) {
            return visitor.visitClassMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassMemberDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassMemberDeclarationContext = ClassMemberDeclarationContext;
var FieldDeclarationContext = /** @class */ (function (_super) {
    __extends(FieldDeclarationContext, _super);
    function FieldDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FieldDeclarationContext.prototype.unannType = function () {
        return this.getRuleContext(0, UnannTypeContext);
    };
    FieldDeclarationContext.prototype.variableDeclaratorList = function () {
        return this.getRuleContext(0, VariableDeclaratorListContext);
    };
    FieldDeclarationContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    FieldDeclarationContext.prototype.fieldModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FieldModifierContext);
        }
        else {
            return this.getRuleContext(i, FieldModifierContext);
        }
    };
    Object.defineProperty(FieldDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_fieldDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FieldDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterFieldDeclaration) {
            listener.enterFieldDeclaration(this);
        }
    };
    // @Override
    FieldDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitFieldDeclaration) {
            listener.exitFieldDeclaration(this);
        }
    };
    // @Override
    FieldDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitFieldDeclaration) {
            return visitor.visitFieldDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FieldDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FieldDeclarationContext = FieldDeclarationContext;
var FieldModifierContext = /** @class */ (function (_super) {
    __extends(FieldModifierContext, _super);
    function FieldModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FieldModifierContext.prototype.annotation = function () {
        return this.tryGetRuleContext(0, AnnotationContext);
    };
    FieldModifierContext.prototype.PUBLIC = function () { return this.tryGetToken(Java8Parser.PUBLIC, 0); };
    FieldModifierContext.prototype.PROTECTED = function () { return this.tryGetToken(Java8Parser.PROTECTED, 0); };
    FieldModifierContext.prototype.PRIVATE = function () { return this.tryGetToken(Java8Parser.PRIVATE, 0); };
    FieldModifierContext.prototype.STATIC = function () { return this.tryGetToken(Java8Parser.STATIC, 0); };
    FieldModifierContext.prototype.FINAL = function () { return this.tryGetToken(Java8Parser.FINAL, 0); };
    FieldModifierContext.prototype.TRANSIENT = function () { return this.tryGetToken(Java8Parser.TRANSIENT, 0); };
    FieldModifierContext.prototype.VOLATILE = function () { return this.tryGetToken(Java8Parser.VOLATILE, 0); };
    Object.defineProperty(FieldModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_fieldModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FieldModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterFieldModifier) {
            listener.enterFieldModifier(this);
        }
    };
    // @Override
    FieldModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitFieldModifier) {
            listener.exitFieldModifier(this);
        }
    };
    // @Override
    FieldModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitFieldModifier) {
            return visitor.visitFieldModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FieldModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FieldModifierContext = FieldModifierContext;
var VariableDeclaratorListContext = /** @class */ (function (_super) {
    __extends(VariableDeclaratorListContext, _super);
    function VariableDeclaratorListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    VariableDeclaratorListContext.prototype.variableDeclarator = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableDeclaratorContext);
        }
        else {
            return this.getRuleContext(i, VariableDeclaratorContext);
        }
    };
    VariableDeclaratorListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(VariableDeclaratorListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_variableDeclaratorList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    VariableDeclaratorListContext.prototype.enterRule = function (listener) {
        if (listener.enterVariableDeclaratorList) {
            listener.enterVariableDeclaratorList(this);
        }
    };
    // @Override
    VariableDeclaratorListContext.prototype.exitRule = function (listener) {
        if (listener.exitVariableDeclaratorList) {
            listener.exitVariableDeclaratorList(this);
        }
    };
    // @Override
    VariableDeclaratorListContext.prototype.accept = function (visitor) {
        if (visitor.visitVariableDeclaratorList) {
            return visitor.visitVariableDeclaratorList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VariableDeclaratorListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.VariableDeclaratorListContext = VariableDeclaratorListContext;
var VariableDeclaratorContext = /** @class */ (function (_super) {
    __extends(VariableDeclaratorContext, _super);
    function VariableDeclaratorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    VariableDeclaratorContext.prototype.variableDeclaratorId = function () {
        return this.getRuleContext(0, VariableDeclaratorIdContext);
    };
    VariableDeclaratorContext.prototype.ASSIGN = function () { return this.tryGetToken(Java8Parser.ASSIGN, 0); };
    VariableDeclaratorContext.prototype.variableInitializer = function () {
        return this.tryGetRuleContext(0, VariableInitializerContext);
    };
    Object.defineProperty(VariableDeclaratorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_variableDeclarator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    VariableDeclaratorContext.prototype.enterRule = function (listener) {
        if (listener.enterVariableDeclarator) {
            listener.enterVariableDeclarator(this);
        }
    };
    // @Override
    VariableDeclaratorContext.prototype.exitRule = function (listener) {
        if (listener.exitVariableDeclarator) {
            listener.exitVariableDeclarator(this);
        }
    };
    // @Override
    VariableDeclaratorContext.prototype.accept = function (visitor) {
        if (visitor.visitVariableDeclarator) {
            return visitor.visitVariableDeclarator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VariableDeclaratorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.VariableDeclaratorContext = VariableDeclaratorContext;
var VariableDeclaratorIdContext = /** @class */ (function (_super) {
    __extends(VariableDeclaratorIdContext, _super);
    function VariableDeclaratorIdContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    VariableDeclaratorIdContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    VariableDeclaratorIdContext.prototype.dims = function () {
        return this.tryGetRuleContext(0, DimsContext);
    };
    Object.defineProperty(VariableDeclaratorIdContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_variableDeclaratorId; },
        enumerable: true,
        configurable: true
    });
    // @Override
    VariableDeclaratorIdContext.prototype.enterRule = function (listener) {
        if (listener.enterVariableDeclaratorId) {
            listener.enterVariableDeclaratorId(this);
        }
    };
    // @Override
    VariableDeclaratorIdContext.prototype.exitRule = function (listener) {
        if (listener.exitVariableDeclaratorId) {
            listener.exitVariableDeclaratorId(this);
        }
    };
    // @Override
    VariableDeclaratorIdContext.prototype.accept = function (visitor) {
        if (visitor.visitVariableDeclaratorId) {
            return visitor.visitVariableDeclaratorId(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VariableDeclaratorIdContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.VariableDeclaratorIdContext = VariableDeclaratorIdContext;
var VariableInitializerContext = /** @class */ (function (_super) {
    __extends(VariableInitializerContext, _super);
    function VariableInitializerContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    VariableInitializerContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    VariableInitializerContext.prototype.arrayInitializer = function () {
        return this.tryGetRuleContext(0, ArrayInitializerContext);
    };
    Object.defineProperty(VariableInitializerContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_variableInitializer; },
        enumerable: true,
        configurable: true
    });
    // @Override
    VariableInitializerContext.prototype.enterRule = function (listener) {
        if (listener.enterVariableInitializer) {
            listener.enterVariableInitializer(this);
        }
    };
    // @Override
    VariableInitializerContext.prototype.exitRule = function (listener) {
        if (listener.exitVariableInitializer) {
            listener.exitVariableInitializer(this);
        }
    };
    // @Override
    VariableInitializerContext.prototype.accept = function (visitor) {
        if (visitor.visitVariableInitializer) {
            return visitor.visitVariableInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VariableInitializerContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.VariableInitializerContext = VariableInitializerContext;
var UnannTypeContext = /** @class */ (function (_super) {
    __extends(UnannTypeContext, _super);
    function UnannTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannTypeContext.prototype.unannPrimitiveType = function () {
        return this.tryGetRuleContext(0, UnannPrimitiveTypeContext);
    };
    UnannTypeContext.prototype.unannReferenceType = function () {
        return this.tryGetRuleContext(0, UnannReferenceTypeContext);
    };
    Object.defineProperty(UnannTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannType) {
            listener.enterUnannType(this);
        }
    };
    // @Override
    UnannTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannType) {
            listener.exitUnannType(this);
        }
    };
    // @Override
    UnannTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannType) {
            return visitor.visitUnannType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannTypeContext = UnannTypeContext;
var UnannPrimitiveTypeContext = /** @class */ (function (_super) {
    __extends(UnannPrimitiveTypeContext, _super);
    function UnannPrimitiveTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannPrimitiveTypeContext.prototype.numericType = function () {
        return this.tryGetRuleContext(0, NumericTypeContext);
    };
    UnannPrimitiveTypeContext.prototype.BOOLEAN = function () { return this.tryGetToken(Java8Parser.BOOLEAN, 0); };
    Object.defineProperty(UnannPrimitiveTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannPrimitiveType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannPrimitiveTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannPrimitiveType) {
            listener.enterUnannPrimitiveType(this);
        }
    };
    // @Override
    UnannPrimitiveTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannPrimitiveType) {
            listener.exitUnannPrimitiveType(this);
        }
    };
    // @Override
    UnannPrimitiveTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannPrimitiveType) {
            return visitor.visitUnannPrimitiveType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannPrimitiveTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannPrimitiveTypeContext = UnannPrimitiveTypeContext;
var UnannReferenceTypeContext = /** @class */ (function (_super) {
    __extends(UnannReferenceTypeContext, _super);
    function UnannReferenceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannReferenceTypeContext.prototype.unannClassOrInterfaceType = function () {
        return this.tryGetRuleContext(0, UnannClassOrInterfaceTypeContext);
    };
    UnannReferenceTypeContext.prototype.unannTypeVariable = function () {
        return this.tryGetRuleContext(0, UnannTypeVariableContext);
    };
    UnannReferenceTypeContext.prototype.unannArrayType = function () {
        return this.tryGetRuleContext(0, UnannArrayTypeContext);
    };
    Object.defineProperty(UnannReferenceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannReferenceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannReferenceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannReferenceType) {
            listener.enterUnannReferenceType(this);
        }
    };
    // @Override
    UnannReferenceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannReferenceType) {
            listener.exitUnannReferenceType(this);
        }
    };
    // @Override
    UnannReferenceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannReferenceType) {
            return visitor.visitUnannReferenceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannReferenceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannReferenceTypeContext = UnannReferenceTypeContext;
var UnannClassOrInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(UnannClassOrInterfaceTypeContext, _super);
    function UnannClassOrInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannClassOrInterfaceTypeContext.prototype.unannClassType_lfno_unannClassOrInterfaceType = function () {
        return this.tryGetRuleContext(0, UnannClassType_lfno_unannClassOrInterfaceTypeContext);
    };
    UnannClassOrInterfaceTypeContext.prototype.unannInterfaceType_lfno_unannClassOrInterfaceType = function () {
        return this.tryGetRuleContext(0, UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext);
    };
    UnannClassOrInterfaceTypeContext.prototype.unannClassType_lf_unannClassOrInterfaceType = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(UnannClassType_lf_unannClassOrInterfaceTypeContext);
        }
        else {
            return this.getRuleContext(i, UnannClassType_lf_unannClassOrInterfaceTypeContext);
        }
    };
    UnannClassOrInterfaceTypeContext.prototype.unannInterfaceType_lf_unannClassOrInterfaceType = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext);
        }
        else {
            return this.getRuleContext(i, UnannInterfaceType_lf_unannClassOrInterfaceTypeContext);
        }
    };
    Object.defineProperty(UnannClassOrInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannClassOrInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannClassOrInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannClassOrInterfaceType) {
            listener.enterUnannClassOrInterfaceType(this);
        }
    };
    // @Override
    UnannClassOrInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannClassOrInterfaceType) {
            listener.exitUnannClassOrInterfaceType(this);
        }
    };
    // @Override
    UnannClassOrInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannClassOrInterfaceType) {
            return visitor.visitUnannClassOrInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannClassOrInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannClassOrInterfaceTypeContext = UnannClassOrInterfaceTypeContext;
var UnannClassTypeContext = /** @class */ (function (_super) {
    __extends(UnannClassTypeContext, _super);
    function UnannClassTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannClassTypeContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    UnannClassTypeContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    UnannClassTypeContext.prototype.unannClassOrInterfaceType = function () {
        return this.tryGetRuleContext(0, UnannClassOrInterfaceTypeContext);
    };
    UnannClassTypeContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    UnannClassTypeContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    Object.defineProperty(UnannClassTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannClassType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannClassTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannClassType) {
            listener.enterUnannClassType(this);
        }
    };
    // @Override
    UnannClassTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannClassType) {
            listener.exitUnannClassType(this);
        }
    };
    // @Override
    UnannClassTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannClassType) {
            return visitor.visitUnannClassType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannClassTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannClassTypeContext = UnannClassTypeContext;
var UnannClassType_lf_unannClassOrInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(UnannClassType_lf_unannClassOrInterfaceTypeContext, _super);
    function UnannClassType_lf_unannClassOrInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.DOT = function () { return this.getToken(Java8Parser.DOT, 0); };
    UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    Object.defineProperty(UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannClassType_lf_unannClassOrInterfaceType) {
            listener.enterUnannClassType_lf_unannClassOrInterfaceType(this);
        }
    };
    // @Override
    UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannClassType_lf_unannClassOrInterfaceType) {
            listener.exitUnannClassType_lf_unannClassOrInterfaceType(this);
        }
    };
    // @Override
    UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannClassType_lf_unannClassOrInterfaceType) {
            return visitor.visitUnannClassType_lf_unannClassOrInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannClassType_lf_unannClassOrInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannClassType_lf_unannClassOrInterfaceTypeContext = UnannClassType_lf_unannClassOrInterfaceTypeContext;
var UnannClassType_lfno_unannClassOrInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(UnannClassType_lfno_unannClassOrInterfaceTypeContext, _super);
    function UnannClassType_lfno_unannClassOrInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    Object.defineProperty(UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannClassType_lfno_unannClassOrInterfaceType) {
            listener.enterUnannClassType_lfno_unannClassOrInterfaceType(this);
        }
    };
    // @Override
    UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannClassType_lfno_unannClassOrInterfaceType) {
            listener.exitUnannClassType_lfno_unannClassOrInterfaceType(this);
        }
    };
    // @Override
    UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannClassType_lfno_unannClassOrInterfaceType) {
            return visitor.visitUnannClassType_lfno_unannClassOrInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannClassType_lfno_unannClassOrInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannClassType_lfno_unannClassOrInterfaceTypeContext = UnannClassType_lfno_unannClassOrInterfaceTypeContext;
var UnannInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(UnannInterfaceTypeContext, _super);
    function UnannInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannInterfaceTypeContext.prototype.unannClassType = function () {
        return this.getRuleContext(0, UnannClassTypeContext);
    };
    Object.defineProperty(UnannInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannInterfaceType) {
            listener.enterUnannInterfaceType(this);
        }
    };
    // @Override
    UnannInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannInterfaceType) {
            listener.exitUnannInterfaceType(this);
        }
    };
    // @Override
    UnannInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannInterfaceType) {
            return visitor.visitUnannInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannInterfaceTypeContext = UnannInterfaceTypeContext;
var UnannInterfaceType_lf_unannClassOrInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext, _super);
    function UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannInterfaceType_lf_unannClassOrInterfaceTypeContext.prototype.unannClassType_lf_unannClassOrInterfaceType = function () {
        return this.getRuleContext(0, UnannClassType_lf_unannClassOrInterfaceTypeContext);
    };
    Object.defineProperty(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannInterfaceType_lf_unannClassOrInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannInterfaceType_lf_unannClassOrInterfaceType) {
            listener.enterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
        }
    };
    // @Override
    UnannInterfaceType_lf_unannClassOrInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannInterfaceType_lf_unannClassOrInterfaceType) {
            listener.exitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
        }
    };
    // @Override
    UnannInterfaceType_lf_unannClassOrInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannInterfaceType_lf_unannClassOrInterfaceType) {
            return visitor.visitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannInterfaceType_lf_unannClassOrInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext = UnannInterfaceType_lf_unannClassOrInterfaceTypeContext;
var UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext = /** @class */ (function (_super) {
    __extends(UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext, _super);
    function UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext.prototype.unannClassType_lfno_unannClassOrInterfaceType = function () {
        return this.getRuleContext(0, UnannClassType_lfno_unannClassOrInterfaceTypeContext);
    };
    Object.defineProperty(UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannInterfaceType_lfno_unannClassOrInterfaceType) {
            listener.enterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
        }
    };
    // @Override
    UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannInterfaceType_lfno_unannClassOrInterfaceType) {
            listener.exitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
        }
    };
    // @Override
    UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannInterfaceType_lfno_unannClassOrInterfaceType) {
            return visitor.visitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext = UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext;
var UnannTypeVariableContext = /** @class */ (function (_super) {
    __extends(UnannTypeVariableContext, _super);
    function UnannTypeVariableContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannTypeVariableContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    Object.defineProperty(UnannTypeVariableContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannTypeVariable; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannTypeVariableContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannTypeVariable) {
            listener.enterUnannTypeVariable(this);
        }
    };
    // @Override
    UnannTypeVariableContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannTypeVariable) {
            listener.exitUnannTypeVariable(this);
        }
    };
    // @Override
    UnannTypeVariableContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannTypeVariable) {
            return visitor.visitUnannTypeVariable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannTypeVariableContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannTypeVariableContext = UnannTypeVariableContext;
var UnannArrayTypeContext = /** @class */ (function (_super) {
    __extends(UnannArrayTypeContext, _super);
    function UnannArrayTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnannArrayTypeContext.prototype.unannPrimitiveType = function () {
        return this.tryGetRuleContext(0, UnannPrimitiveTypeContext);
    };
    UnannArrayTypeContext.prototype.dims = function () {
        return this.getRuleContext(0, DimsContext);
    };
    UnannArrayTypeContext.prototype.unannClassOrInterfaceType = function () {
        return this.tryGetRuleContext(0, UnannClassOrInterfaceTypeContext);
    };
    UnannArrayTypeContext.prototype.unannTypeVariable = function () {
        return this.tryGetRuleContext(0, UnannTypeVariableContext);
    };
    Object.defineProperty(UnannArrayTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unannArrayType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnannArrayTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterUnannArrayType) {
            listener.enterUnannArrayType(this);
        }
    };
    // @Override
    UnannArrayTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitUnannArrayType) {
            listener.exitUnannArrayType(this);
        }
    };
    // @Override
    UnannArrayTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitUnannArrayType) {
            return visitor.visitUnannArrayType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnannArrayTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnannArrayTypeContext = UnannArrayTypeContext;
var MethodDeclarationContext = /** @class */ (function (_super) {
    __extends(MethodDeclarationContext, _super);
    function MethodDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodDeclarationContext.prototype.methodHeader = function () {
        return this.getRuleContext(0, MethodHeaderContext);
    };
    MethodDeclarationContext.prototype.methodBody = function () {
        return this.getRuleContext(0, MethodBodyContext);
    };
    MethodDeclarationContext.prototype.methodModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MethodModifierContext);
        }
        else {
            return this.getRuleContext(i, MethodModifierContext);
        }
    };
    Object.defineProperty(MethodDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodDeclaration) {
            listener.enterMethodDeclaration(this);
        }
    };
    // @Override
    MethodDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodDeclaration) {
            listener.exitMethodDeclaration(this);
        }
    };
    // @Override
    MethodDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodDeclaration) {
            return visitor.visitMethodDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodDeclarationContext = MethodDeclarationContext;
var MethodModifierContext = /** @class */ (function (_super) {
    __extends(MethodModifierContext, _super);
    function MethodModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodModifierContext.prototype.annotation = function () {
        return this.tryGetRuleContext(0, AnnotationContext);
    };
    MethodModifierContext.prototype.PUBLIC = function () { return this.tryGetToken(Java8Parser.PUBLIC, 0); };
    MethodModifierContext.prototype.PROTECTED = function () { return this.tryGetToken(Java8Parser.PROTECTED, 0); };
    MethodModifierContext.prototype.PRIVATE = function () { return this.tryGetToken(Java8Parser.PRIVATE, 0); };
    MethodModifierContext.prototype.ABSTRACT = function () { return this.tryGetToken(Java8Parser.ABSTRACT, 0); };
    MethodModifierContext.prototype.STATIC = function () { return this.tryGetToken(Java8Parser.STATIC, 0); };
    MethodModifierContext.prototype.FINAL = function () { return this.tryGetToken(Java8Parser.FINAL, 0); };
    MethodModifierContext.prototype.SYNCHRONIZED = function () { return this.tryGetToken(Java8Parser.SYNCHRONIZED, 0); };
    MethodModifierContext.prototype.NATIVE = function () { return this.tryGetToken(Java8Parser.NATIVE, 0); };
    MethodModifierContext.prototype.STRICTFP = function () { return this.tryGetToken(Java8Parser.STRICTFP, 0); };
    Object.defineProperty(MethodModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodModifier) {
            listener.enterMethodModifier(this);
        }
    };
    // @Override
    MethodModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodModifier) {
            listener.exitMethodModifier(this);
        }
    };
    // @Override
    MethodModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodModifier) {
            return visitor.visitMethodModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodModifierContext = MethodModifierContext;
var MethodHeaderContext = /** @class */ (function (_super) {
    __extends(MethodHeaderContext, _super);
    function MethodHeaderContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodHeaderContext.prototype.result = function () {
        return this.getRuleContext(0, ResultContext);
    };
    MethodHeaderContext.prototype.methodDeclarator = function () {
        return this.getRuleContext(0, MethodDeclaratorContext);
    };
    MethodHeaderContext.prototype.throws_ = function () {
        return this.tryGetRuleContext(0, Throws_Context);
    };
    MethodHeaderContext.prototype.typeParameters = function () {
        return this.tryGetRuleContext(0, TypeParametersContext);
    };
    MethodHeaderContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    Object.defineProperty(MethodHeaderContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodHeader; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodHeaderContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodHeader) {
            listener.enterMethodHeader(this);
        }
    };
    // @Override
    MethodHeaderContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodHeader) {
            listener.exitMethodHeader(this);
        }
    };
    // @Override
    MethodHeaderContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodHeader) {
            return visitor.visitMethodHeader(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodHeaderContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodHeaderContext = MethodHeaderContext;
var ResultContext = /** @class */ (function (_super) {
    __extends(ResultContext, _super);
    function ResultContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ResultContext.prototype.unannType = function () {
        return this.tryGetRuleContext(0, UnannTypeContext);
    };
    ResultContext.prototype.VOID = function () { return this.tryGetToken(Java8Parser.VOID, 0); };
    Object.defineProperty(ResultContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_result; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ResultContext.prototype.enterRule = function (listener) {
        if (listener.enterResult) {
            listener.enterResult(this);
        }
    };
    // @Override
    ResultContext.prototype.exitRule = function (listener) {
        if (listener.exitResult) {
            listener.exitResult(this);
        }
    };
    // @Override
    ResultContext.prototype.accept = function (visitor) {
        if (visitor.visitResult) {
            return visitor.visitResult(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ResultContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ResultContext = ResultContext;
var MethodDeclaratorContext = /** @class */ (function (_super) {
    __extends(MethodDeclaratorContext, _super);
    function MethodDeclaratorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodDeclaratorContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    MethodDeclaratorContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    MethodDeclaratorContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    MethodDeclaratorContext.prototype.formalParameterList = function () {
        return this.tryGetRuleContext(0, FormalParameterListContext);
    };
    MethodDeclaratorContext.prototype.dims = function () {
        return this.tryGetRuleContext(0, DimsContext);
    };
    Object.defineProperty(MethodDeclaratorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodDeclarator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodDeclaratorContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodDeclarator) {
            listener.enterMethodDeclarator(this);
        }
    };
    // @Override
    MethodDeclaratorContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodDeclarator) {
            listener.exitMethodDeclarator(this);
        }
    };
    // @Override
    MethodDeclaratorContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodDeclarator) {
            return visitor.visitMethodDeclarator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodDeclaratorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodDeclaratorContext = MethodDeclaratorContext;
var FormalParameterListContext = /** @class */ (function (_super) {
    __extends(FormalParameterListContext, _super);
    function FormalParameterListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FormalParameterListContext.prototype.receiverParameter = function () {
        return this.tryGetRuleContext(0, ReceiverParameterContext);
    };
    FormalParameterListContext.prototype.formalParameters = function () {
        return this.tryGetRuleContext(0, FormalParametersContext);
    };
    FormalParameterListContext.prototype.COMMA = function () { return this.tryGetToken(Java8Parser.COMMA, 0); };
    FormalParameterListContext.prototype.lastFormalParameter = function () {
        return this.tryGetRuleContext(0, LastFormalParameterContext);
    };
    Object.defineProperty(FormalParameterListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_formalParameterList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FormalParameterListContext.prototype.enterRule = function (listener) {
        if (listener.enterFormalParameterList) {
            listener.enterFormalParameterList(this);
        }
    };
    // @Override
    FormalParameterListContext.prototype.exitRule = function (listener) {
        if (listener.exitFormalParameterList) {
            listener.exitFormalParameterList(this);
        }
    };
    // @Override
    FormalParameterListContext.prototype.accept = function (visitor) {
        if (visitor.visitFormalParameterList) {
            return visitor.visitFormalParameterList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FormalParameterListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FormalParameterListContext = FormalParameterListContext;
var FormalParametersContext = /** @class */ (function (_super) {
    __extends(FormalParametersContext, _super);
    function FormalParametersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FormalParametersContext.prototype.formalParameter = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FormalParameterContext);
        }
        else {
            return this.getRuleContext(i, FormalParameterContext);
        }
    };
    FormalParametersContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    FormalParametersContext.prototype.receiverParameter = function () {
        return this.tryGetRuleContext(0, ReceiverParameterContext);
    };
    Object.defineProperty(FormalParametersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_formalParameters; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FormalParametersContext.prototype.enterRule = function (listener) {
        if (listener.enterFormalParameters) {
            listener.enterFormalParameters(this);
        }
    };
    // @Override
    FormalParametersContext.prototype.exitRule = function (listener) {
        if (listener.exitFormalParameters) {
            listener.exitFormalParameters(this);
        }
    };
    // @Override
    FormalParametersContext.prototype.accept = function (visitor) {
        if (visitor.visitFormalParameters) {
            return visitor.visitFormalParameters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FormalParametersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FormalParametersContext = FormalParametersContext;
var FormalParameterContext = /** @class */ (function (_super) {
    __extends(FormalParameterContext, _super);
    function FormalParameterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FormalParameterContext.prototype.unannType = function () {
        return this.getRuleContext(0, UnannTypeContext);
    };
    FormalParameterContext.prototype.variableDeclaratorId = function () {
        return this.getRuleContext(0, VariableDeclaratorIdContext);
    };
    FormalParameterContext.prototype.variableModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableModifierContext);
        }
        else {
            return this.getRuleContext(i, VariableModifierContext);
        }
    };
    Object.defineProperty(FormalParameterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_formalParameter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FormalParameterContext.prototype.enterRule = function (listener) {
        if (listener.enterFormalParameter) {
            listener.enterFormalParameter(this);
        }
    };
    // @Override
    FormalParameterContext.prototype.exitRule = function (listener) {
        if (listener.exitFormalParameter) {
            listener.exitFormalParameter(this);
        }
    };
    // @Override
    FormalParameterContext.prototype.accept = function (visitor) {
        if (visitor.visitFormalParameter) {
            return visitor.visitFormalParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FormalParameterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FormalParameterContext = FormalParameterContext;
var VariableModifierContext = /** @class */ (function (_super) {
    __extends(VariableModifierContext, _super);
    function VariableModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    VariableModifierContext.prototype.annotation = function () {
        return this.tryGetRuleContext(0, AnnotationContext);
    };
    VariableModifierContext.prototype.FINAL = function () { return this.tryGetToken(Java8Parser.FINAL, 0); };
    Object.defineProperty(VariableModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_variableModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    VariableModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterVariableModifier) {
            listener.enterVariableModifier(this);
        }
    };
    // @Override
    VariableModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitVariableModifier) {
            listener.exitVariableModifier(this);
        }
    };
    // @Override
    VariableModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitVariableModifier) {
            return visitor.visitVariableModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VariableModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.VariableModifierContext = VariableModifierContext;
var LastFormalParameterContext = /** @class */ (function (_super) {
    __extends(LastFormalParameterContext, _super);
    function LastFormalParameterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LastFormalParameterContext.prototype.unannType = function () {
        return this.tryGetRuleContext(0, UnannTypeContext);
    };
    LastFormalParameterContext.prototype.ELLIPSIS = function () { return this.tryGetToken(Java8Parser.ELLIPSIS, 0); };
    LastFormalParameterContext.prototype.variableDeclaratorId = function () {
        return this.tryGetRuleContext(0, VariableDeclaratorIdContext);
    };
    LastFormalParameterContext.prototype.variableModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableModifierContext);
        }
        else {
            return this.getRuleContext(i, VariableModifierContext);
        }
    };
    LastFormalParameterContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    LastFormalParameterContext.prototype.formalParameter = function () {
        return this.tryGetRuleContext(0, FormalParameterContext);
    };
    Object.defineProperty(LastFormalParameterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_lastFormalParameter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LastFormalParameterContext.prototype.enterRule = function (listener) {
        if (listener.enterLastFormalParameter) {
            listener.enterLastFormalParameter(this);
        }
    };
    // @Override
    LastFormalParameterContext.prototype.exitRule = function (listener) {
        if (listener.exitLastFormalParameter) {
            listener.exitLastFormalParameter(this);
        }
    };
    // @Override
    LastFormalParameterContext.prototype.accept = function (visitor) {
        if (visitor.visitLastFormalParameter) {
            return visitor.visitLastFormalParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LastFormalParameterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LastFormalParameterContext = LastFormalParameterContext;
var ReceiverParameterContext = /** @class */ (function (_super) {
    __extends(ReceiverParameterContext, _super);
    function ReceiverParameterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReceiverParameterContext.prototype.unannType = function () {
        return this.getRuleContext(0, UnannTypeContext);
    };
    ReceiverParameterContext.prototype.THIS = function () { return this.getToken(Java8Parser.THIS, 0); };
    ReceiverParameterContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    ReceiverParameterContext.prototype.Identifier = function () { return this.tryGetToken(Java8Parser.Identifier, 0); };
    ReceiverParameterContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    Object.defineProperty(ReceiverParameterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_receiverParameter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReceiverParameterContext.prototype.enterRule = function (listener) {
        if (listener.enterReceiverParameter) {
            listener.enterReceiverParameter(this);
        }
    };
    // @Override
    ReceiverParameterContext.prototype.exitRule = function (listener) {
        if (listener.exitReceiverParameter) {
            listener.exitReceiverParameter(this);
        }
    };
    // @Override
    ReceiverParameterContext.prototype.accept = function (visitor) {
        if (visitor.visitReceiverParameter) {
            return visitor.visitReceiverParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReceiverParameterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReceiverParameterContext = ReceiverParameterContext;
var Throws_Context = /** @class */ (function (_super) {
    __extends(Throws_Context, _super);
    function Throws_Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Throws_Context.prototype.THROWS = function () { return this.getToken(Java8Parser.THROWS, 0); };
    Throws_Context.prototype.exceptionTypeList = function () {
        return this.getRuleContext(0, ExceptionTypeListContext);
    };
    Object.defineProperty(Throws_Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_throws_; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Throws_Context.prototype.enterRule = function (listener) {
        if (listener.enterThrows_) {
            listener.enterThrows_(this);
        }
    };
    // @Override
    Throws_Context.prototype.exitRule = function (listener) {
        if (listener.exitThrows_) {
            listener.exitThrows_(this);
        }
    };
    // @Override
    Throws_Context.prototype.accept = function (visitor) {
        if (visitor.visitThrows_) {
            return visitor.visitThrows_(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Throws_Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Throws_Context = Throws_Context;
var ExceptionTypeListContext = /** @class */ (function (_super) {
    __extends(ExceptionTypeListContext, _super);
    function ExceptionTypeListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExceptionTypeListContext.prototype.exceptionType = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExceptionTypeContext);
        }
        else {
            return this.getRuleContext(i, ExceptionTypeContext);
        }
    };
    ExceptionTypeListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(ExceptionTypeListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_exceptionTypeList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExceptionTypeListContext.prototype.enterRule = function (listener) {
        if (listener.enterExceptionTypeList) {
            listener.enterExceptionTypeList(this);
        }
    };
    // @Override
    ExceptionTypeListContext.prototype.exitRule = function (listener) {
        if (listener.exitExceptionTypeList) {
            listener.exitExceptionTypeList(this);
        }
    };
    // @Override
    ExceptionTypeListContext.prototype.accept = function (visitor) {
        if (visitor.visitExceptionTypeList) {
            return visitor.visitExceptionTypeList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExceptionTypeListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExceptionTypeListContext = ExceptionTypeListContext;
var ExceptionTypeContext = /** @class */ (function (_super) {
    __extends(ExceptionTypeContext, _super);
    function ExceptionTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExceptionTypeContext.prototype.classType = function () {
        return this.tryGetRuleContext(0, ClassTypeContext);
    };
    ExceptionTypeContext.prototype.typeVariable = function () {
        return this.tryGetRuleContext(0, TypeVariableContext);
    };
    Object.defineProperty(ExceptionTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_exceptionType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExceptionTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterExceptionType) {
            listener.enterExceptionType(this);
        }
    };
    // @Override
    ExceptionTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitExceptionType) {
            listener.exitExceptionType(this);
        }
    };
    // @Override
    ExceptionTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitExceptionType) {
            return visitor.visitExceptionType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExceptionTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExceptionTypeContext = ExceptionTypeContext;
var MethodBodyContext = /** @class */ (function (_super) {
    __extends(MethodBodyContext, _super);
    function MethodBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodBodyContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    MethodBodyContext.prototype.SEMI = function () { return this.tryGetToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(MethodBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodBody) {
            listener.enterMethodBody(this);
        }
    };
    // @Override
    MethodBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodBody) {
            listener.exitMethodBody(this);
        }
    };
    // @Override
    MethodBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodBody) {
            return visitor.visitMethodBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodBodyContext = MethodBodyContext;
var InstanceInitializerContext = /** @class */ (function (_super) {
    __extends(InstanceInitializerContext, _super);
    function InstanceInitializerContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InstanceInitializerContext.prototype.block = function () {
        return this.getRuleContext(0, BlockContext);
    };
    Object.defineProperty(InstanceInitializerContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_instanceInitializer; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InstanceInitializerContext.prototype.enterRule = function (listener) {
        if (listener.enterInstanceInitializer) {
            listener.enterInstanceInitializer(this);
        }
    };
    // @Override
    InstanceInitializerContext.prototype.exitRule = function (listener) {
        if (listener.exitInstanceInitializer) {
            listener.exitInstanceInitializer(this);
        }
    };
    // @Override
    InstanceInitializerContext.prototype.accept = function (visitor) {
        if (visitor.visitInstanceInitializer) {
            return visitor.visitInstanceInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InstanceInitializerContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InstanceInitializerContext = InstanceInitializerContext;
var StaticInitializerContext = /** @class */ (function (_super) {
    __extends(StaticInitializerContext, _super);
    function StaticInitializerContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StaticInitializerContext.prototype.STATIC = function () { return this.getToken(Java8Parser.STATIC, 0); };
    StaticInitializerContext.prototype.block = function () {
        return this.getRuleContext(0, BlockContext);
    };
    Object.defineProperty(StaticInitializerContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_staticInitializer; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StaticInitializerContext.prototype.enterRule = function (listener) {
        if (listener.enterStaticInitializer) {
            listener.enterStaticInitializer(this);
        }
    };
    // @Override
    StaticInitializerContext.prototype.exitRule = function (listener) {
        if (listener.exitStaticInitializer) {
            listener.exitStaticInitializer(this);
        }
    };
    // @Override
    StaticInitializerContext.prototype.accept = function (visitor) {
        if (visitor.visitStaticInitializer) {
            return visitor.visitStaticInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StaticInitializerContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StaticInitializerContext = StaticInitializerContext;
var ConstructorDeclarationContext = /** @class */ (function (_super) {
    __extends(ConstructorDeclarationContext, _super);
    function ConstructorDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConstructorDeclarationContext.prototype.constructorDeclarator = function () {
        return this.getRuleContext(0, ConstructorDeclaratorContext);
    };
    ConstructorDeclarationContext.prototype.constructorBody = function () {
        return this.getRuleContext(0, ConstructorBodyContext);
    };
    ConstructorDeclarationContext.prototype.constructorModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ConstructorModifierContext);
        }
        else {
            return this.getRuleContext(i, ConstructorModifierContext);
        }
    };
    ConstructorDeclarationContext.prototype.throws_ = function () {
        return this.tryGetRuleContext(0, Throws_Context);
    };
    Object.defineProperty(ConstructorDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_constructorDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConstructorDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterConstructorDeclaration) {
            listener.enterConstructorDeclaration(this);
        }
    };
    // @Override
    ConstructorDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitConstructorDeclaration) {
            listener.exitConstructorDeclaration(this);
        }
    };
    // @Override
    ConstructorDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitConstructorDeclaration) {
            return visitor.visitConstructorDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConstructorDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConstructorDeclarationContext = ConstructorDeclarationContext;
var ConstructorModifierContext = /** @class */ (function (_super) {
    __extends(ConstructorModifierContext, _super);
    function ConstructorModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConstructorModifierContext.prototype.annotation = function () {
        return this.tryGetRuleContext(0, AnnotationContext);
    };
    ConstructorModifierContext.prototype.PUBLIC = function () { return this.tryGetToken(Java8Parser.PUBLIC, 0); };
    ConstructorModifierContext.prototype.PROTECTED = function () { return this.tryGetToken(Java8Parser.PROTECTED, 0); };
    ConstructorModifierContext.prototype.PRIVATE = function () { return this.tryGetToken(Java8Parser.PRIVATE, 0); };
    Object.defineProperty(ConstructorModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_constructorModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConstructorModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterConstructorModifier) {
            listener.enterConstructorModifier(this);
        }
    };
    // @Override
    ConstructorModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitConstructorModifier) {
            listener.exitConstructorModifier(this);
        }
    };
    // @Override
    ConstructorModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitConstructorModifier) {
            return visitor.visitConstructorModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConstructorModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConstructorModifierContext = ConstructorModifierContext;
var ConstructorDeclaratorContext = /** @class */ (function (_super) {
    __extends(ConstructorDeclaratorContext, _super);
    function ConstructorDeclaratorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConstructorDeclaratorContext.prototype.simpleTypeName = function () {
        return this.getRuleContext(0, SimpleTypeNameContext);
    };
    ConstructorDeclaratorContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    ConstructorDeclaratorContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    ConstructorDeclaratorContext.prototype.typeParameters = function () {
        return this.tryGetRuleContext(0, TypeParametersContext);
    };
    ConstructorDeclaratorContext.prototype.formalParameterList = function () {
        return this.tryGetRuleContext(0, FormalParameterListContext);
    };
    Object.defineProperty(ConstructorDeclaratorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_constructorDeclarator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConstructorDeclaratorContext.prototype.enterRule = function (listener) {
        if (listener.enterConstructorDeclarator) {
            listener.enterConstructorDeclarator(this);
        }
    };
    // @Override
    ConstructorDeclaratorContext.prototype.exitRule = function (listener) {
        if (listener.exitConstructorDeclarator) {
            listener.exitConstructorDeclarator(this);
        }
    };
    // @Override
    ConstructorDeclaratorContext.prototype.accept = function (visitor) {
        if (visitor.visitConstructorDeclarator) {
            return visitor.visitConstructorDeclarator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConstructorDeclaratorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConstructorDeclaratorContext = ConstructorDeclaratorContext;
var SimpleTypeNameContext = /** @class */ (function (_super) {
    __extends(SimpleTypeNameContext, _super);
    function SimpleTypeNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SimpleTypeNameContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    Object.defineProperty(SimpleTypeNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_simpleTypeName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SimpleTypeNameContext.prototype.enterRule = function (listener) {
        if (listener.enterSimpleTypeName) {
            listener.enterSimpleTypeName(this);
        }
    };
    // @Override
    SimpleTypeNameContext.prototype.exitRule = function (listener) {
        if (listener.exitSimpleTypeName) {
            listener.exitSimpleTypeName(this);
        }
    };
    // @Override
    SimpleTypeNameContext.prototype.accept = function (visitor) {
        if (visitor.visitSimpleTypeName) {
            return visitor.visitSimpleTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SimpleTypeNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SimpleTypeNameContext = SimpleTypeNameContext;
var ConstructorBodyContext = /** @class */ (function (_super) {
    __extends(ConstructorBodyContext, _super);
    function ConstructorBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConstructorBodyContext.prototype.LBRACE = function () { return this.getToken(Java8Parser.LBRACE, 0); };
    ConstructorBodyContext.prototype.RBRACE = function () { return this.getToken(Java8Parser.RBRACE, 0); };
    ConstructorBodyContext.prototype.explicitConstructorInvocation = function () {
        return this.tryGetRuleContext(0, ExplicitConstructorInvocationContext);
    };
    ConstructorBodyContext.prototype.blockStatements = function () {
        return this.tryGetRuleContext(0, BlockStatementsContext);
    };
    Object.defineProperty(ConstructorBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_constructorBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConstructorBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterConstructorBody) {
            listener.enterConstructorBody(this);
        }
    };
    // @Override
    ConstructorBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitConstructorBody) {
            listener.exitConstructorBody(this);
        }
    };
    // @Override
    ConstructorBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitConstructorBody) {
            return visitor.visitConstructorBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConstructorBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConstructorBodyContext = ConstructorBodyContext;
var ExplicitConstructorInvocationContext = /** @class */ (function (_super) {
    __extends(ExplicitConstructorInvocationContext, _super);
    function ExplicitConstructorInvocationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExplicitConstructorInvocationContext.prototype.THIS = function () { return this.tryGetToken(Java8Parser.THIS, 0); };
    ExplicitConstructorInvocationContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    ExplicitConstructorInvocationContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    ExplicitConstructorInvocationContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    ExplicitConstructorInvocationContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    ExplicitConstructorInvocationContext.prototype.argumentList = function () {
        return this.tryGetRuleContext(0, ArgumentListContext);
    };
    ExplicitConstructorInvocationContext.prototype.SUPER = function () { return this.tryGetToken(Java8Parser.SUPER, 0); };
    ExplicitConstructorInvocationContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    ExplicitConstructorInvocationContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    ExplicitConstructorInvocationContext.prototype.primary = function () {
        return this.tryGetRuleContext(0, PrimaryContext);
    };
    Object.defineProperty(ExplicitConstructorInvocationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_explicitConstructorInvocation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExplicitConstructorInvocationContext.prototype.enterRule = function (listener) {
        if (listener.enterExplicitConstructorInvocation) {
            listener.enterExplicitConstructorInvocation(this);
        }
    };
    // @Override
    ExplicitConstructorInvocationContext.prototype.exitRule = function (listener) {
        if (listener.exitExplicitConstructorInvocation) {
            listener.exitExplicitConstructorInvocation(this);
        }
    };
    // @Override
    ExplicitConstructorInvocationContext.prototype.accept = function (visitor) {
        if (visitor.visitExplicitConstructorInvocation) {
            return visitor.visitExplicitConstructorInvocation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExplicitConstructorInvocationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext;
var EnumDeclarationContext = /** @class */ (function (_super) {
    __extends(EnumDeclarationContext, _super);
    function EnumDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnumDeclarationContext.prototype.ENUM = function () { return this.getToken(Java8Parser.ENUM, 0); };
    EnumDeclarationContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    EnumDeclarationContext.prototype.enumBody = function () {
        return this.getRuleContext(0, EnumBodyContext);
    };
    EnumDeclarationContext.prototype.classModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassModifierContext);
        }
        else {
            return this.getRuleContext(i, ClassModifierContext);
        }
    };
    EnumDeclarationContext.prototype.superinterfaces = function () {
        return this.tryGetRuleContext(0, SuperinterfacesContext);
    };
    Object.defineProperty(EnumDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_enumDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnumDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterEnumDeclaration) {
            listener.enterEnumDeclaration(this);
        }
    };
    // @Override
    EnumDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitEnumDeclaration) {
            listener.exitEnumDeclaration(this);
        }
    };
    // @Override
    EnumDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitEnumDeclaration) {
            return visitor.visitEnumDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnumDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnumDeclarationContext = EnumDeclarationContext;
var EnumBodyContext = /** @class */ (function (_super) {
    __extends(EnumBodyContext, _super);
    function EnumBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnumBodyContext.prototype.LBRACE = function () { return this.getToken(Java8Parser.LBRACE, 0); };
    EnumBodyContext.prototype.RBRACE = function () { return this.getToken(Java8Parser.RBRACE, 0); };
    EnumBodyContext.prototype.enumConstantList = function () {
        return this.tryGetRuleContext(0, EnumConstantListContext);
    };
    EnumBodyContext.prototype.COMMA = function () { return this.tryGetToken(Java8Parser.COMMA, 0); };
    EnumBodyContext.prototype.enumBodyDeclarations = function () {
        return this.tryGetRuleContext(0, EnumBodyDeclarationsContext);
    };
    Object.defineProperty(EnumBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_enumBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnumBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterEnumBody) {
            listener.enterEnumBody(this);
        }
    };
    // @Override
    EnumBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitEnumBody) {
            listener.exitEnumBody(this);
        }
    };
    // @Override
    EnumBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitEnumBody) {
            return visitor.visitEnumBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnumBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnumBodyContext = EnumBodyContext;
var EnumConstantListContext = /** @class */ (function (_super) {
    __extends(EnumConstantListContext, _super);
    function EnumConstantListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnumConstantListContext.prototype.enumConstant = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EnumConstantContext);
        }
        else {
            return this.getRuleContext(i, EnumConstantContext);
        }
    };
    EnumConstantListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(EnumConstantListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_enumConstantList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnumConstantListContext.prototype.enterRule = function (listener) {
        if (listener.enterEnumConstantList) {
            listener.enterEnumConstantList(this);
        }
    };
    // @Override
    EnumConstantListContext.prototype.exitRule = function (listener) {
        if (listener.exitEnumConstantList) {
            listener.exitEnumConstantList(this);
        }
    };
    // @Override
    EnumConstantListContext.prototype.accept = function (visitor) {
        if (visitor.visitEnumConstantList) {
            return visitor.visitEnumConstantList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnumConstantListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnumConstantListContext = EnumConstantListContext;
var EnumConstantContext = /** @class */ (function (_super) {
    __extends(EnumConstantContext, _super);
    function EnumConstantContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnumConstantContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    EnumConstantContext.prototype.enumConstantModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EnumConstantModifierContext);
        }
        else {
            return this.getRuleContext(i, EnumConstantModifierContext);
        }
    };
    EnumConstantContext.prototype.LPAREN = function () { return this.tryGetToken(Java8Parser.LPAREN, 0); };
    EnumConstantContext.prototype.RPAREN = function () { return this.tryGetToken(Java8Parser.RPAREN, 0); };
    EnumConstantContext.prototype.classBody = function () {
        return this.tryGetRuleContext(0, ClassBodyContext);
    };
    EnumConstantContext.prototype.argumentList = function () {
        return this.tryGetRuleContext(0, ArgumentListContext);
    };
    Object.defineProperty(EnumConstantContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_enumConstant; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnumConstantContext.prototype.enterRule = function (listener) {
        if (listener.enterEnumConstant) {
            listener.enterEnumConstant(this);
        }
    };
    // @Override
    EnumConstantContext.prototype.exitRule = function (listener) {
        if (listener.exitEnumConstant) {
            listener.exitEnumConstant(this);
        }
    };
    // @Override
    EnumConstantContext.prototype.accept = function (visitor) {
        if (visitor.visitEnumConstant) {
            return visitor.visitEnumConstant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnumConstantContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnumConstantContext = EnumConstantContext;
var EnumConstantModifierContext = /** @class */ (function (_super) {
    __extends(EnumConstantModifierContext, _super);
    function EnumConstantModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnumConstantModifierContext.prototype.annotation = function () {
        return this.getRuleContext(0, AnnotationContext);
    };
    Object.defineProperty(EnumConstantModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_enumConstantModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnumConstantModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterEnumConstantModifier) {
            listener.enterEnumConstantModifier(this);
        }
    };
    // @Override
    EnumConstantModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitEnumConstantModifier) {
            listener.exitEnumConstantModifier(this);
        }
    };
    // @Override
    EnumConstantModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitEnumConstantModifier) {
            return visitor.visitEnumConstantModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnumConstantModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnumConstantModifierContext = EnumConstantModifierContext;
var EnumBodyDeclarationsContext = /** @class */ (function (_super) {
    __extends(EnumBodyDeclarationsContext, _super);
    function EnumBodyDeclarationsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnumBodyDeclarationsContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    EnumBodyDeclarationsContext.prototype.classBodyDeclaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassBodyDeclarationContext);
        }
        else {
            return this.getRuleContext(i, ClassBodyDeclarationContext);
        }
    };
    Object.defineProperty(EnumBodyDeclarationsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_enumBodyDeclarations; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnumBodyDeclarationsContext.prototype.enterRule = function (listener) {
        if (listener.enterEnumBodyDeclarations) {
            listener.enterEnumBodyDeclarations(this);
        }
    };
    // @Override
    EnumBodyDeclarationsContext.prototype.exitRule = function (listener) {
        if (listener.exitEnumBodyDeclarations) {
            listener.exitEnumBodyDeclarations(this);
        }
    };
    // @Override
    EnumBodyDeclarationsContext.prototype.accept = function (visitor) {
        if (visitor.visitEnumBodyDeclarations) {
            return visitor.visitEnumBodyDeclarations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnumBodyDeclarationsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext;
var InterfaceDeclarationContext = /** @class */ (function (_super) {
    __extends(InterfaceDeclarationContext, _super);
    function InterfaceDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InterfaceDeclarationContext.prototype.normalInterfaceDeclaration = function () {
        return this.tryGetRuleContext(0, NormalInterfaceDeclarationContext);
    };
    InterfaceDeclarationContext.prototype.annotationTypeDeclaration = function () {
        return this.tryGetRuleContext(0, AnnotationTypeDeclarationContext);
    };
    Object.defineProperty(InterfaceDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_interfaceDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InterfaceDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterInterfaceDeclaration) {
            listener.enterInterfaceDeclaration(this);
        }
    };
    // @Override
    InterfaceDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitInterfaceDeclaration) {
            listener.exitInterfaceDeclaration(this);
        }
    };
    // @Override
    InterfaceDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitInterfaceDeclaration) {
            return visitor.visitInterfaceDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InterfaceDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InterfaceDeclarationContext = InterfaceDeclarationContext;
var NormalInterfaceDeclarationContext = /** @class */ (function (_super) {
    __extends(NormalInterfaceDeclarationContext, _super);
    function NormalInterfaceDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NormalInterfaceDeclarationContext.prototype.INTERFACE = function () { return this.getToken(Java8Parser.INTERFACE, 0); };
    NormalInterfaceDeclarationContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    NormalInterfaceDeclarationContext.prototype.interfaceBody = function () {
        return this.getRuleContext(0, InterfaceBodyContext);
    };
    NormalInterfaceDeclarationContext.prototype.interfaceModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InterfaceModifierContext);
        }
        else {
            return this.getRuleContext(i, InterfaceModifierContext);
        }
    };
    NormalInterfaceDeclarationContext.prototype.typeParameters = function () {
        return this.tryGetRuleContext(0, TypeParametersContext);
    };
    NormalInterfaceDeclarationContext.prototype.extendsInterfaces = function () {
        return this.tryGetRuleContext(0, ExtendsInterfacesContext);
    };
    Object.defineProperty(NormalInterfaceDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_normalInterfaceDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NormalInterfaceDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterNormalInterfaceDeclaration) {
            listener.enterNormalInterfaceDeclaration(this);
        }
    };
    // @Override
    NormalInterfaceDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitNormalInterfaceDeclaration) {
            listener.exitNormalInterfaceDeclaration(this);
        }
    };
    // @Override
    NormalInterfaceDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitNormalInterfaceDeclaration) {
            return visitor.visitNormalInterfaceDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NormalInterfaceDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NormalInterfaceDeclarationContext = NormalInterfaceDeclarationContext;
var InterfaceModifierContext = /** @class */ (function (_super) {
    __extends(InterfaceModifierContext, _super);
    function InterfaceModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InterfaceModifierContext.prototype.annotation = function () {
        return this.tryGetRuleContext(0, AnnotationContext);
    };
    InterfaceModifierContext.prototype.PUBLIC = function () { return this.tryGetToken(Java8Parser.PUBLIC, 0); };
    InterfaceModifierContext.prototype.PROTECTED = function () { return this.tryGetToken(Java8Parser.PROTECTED, 0); };
    InterfaceModifierContext.prototype.PRIVATE = function () { return this.tryGetToken(Java8Parser.PRIVATE, 0); };
    InterfaceModifierContext.prototype.ABSTRACT = function () { return this.tryGetToken(Java8Parser.ABSTRACT, 0); };
    InterfaceModifierContext.prototype.STATIC = function () { return this.tryGetToken(Java8Parser.STATIC, 0); };
    InterfaceModifierContext.prototype.STRICTFP = function () { return this.tryGetToken(Java8Parser.STRICTFP, 0); };
    Object.defineProperty(InterfaceModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_interfaceModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InterfaceModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterInterfaceModifier) {
            listener.enterInterfaceModifier(this);
        }
    };
    // @Override
    InterfaceModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitInterfaceModifier) {
            listener.exitInterfaceModifier(this);
        }
    };
    // @Override
    InterfaceModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitInterfaceModifier) {
            return visitor.visitInterfaceModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InterfaceModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InterfaceModifierContext = InterfaceModifierContext;
var ExtendsInterfacesContext = /** @class */ (function (_super) {
    __extends(ExtendsInterfacesContext, _super);
    function ExtendsInterfacesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExtendsInterfacesContext.prototype.EXTENDS = function () { return this.getToken(Java8Parser.EXTENDS, 0); };
    ExtendsInterfacesContext.prototype.interfaceTypeList = function () {
        return this.getRuleContext(0, InterfaceTypeListContext);
    };
    Object.defineProperty(ExtendsInterfacesContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_extendsInterfaces; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExtendsInterfacesContext.prototype.enterRule = function (listener) {
        if (listener.enterExtendsInterfaces) {
            listener.enterExtendsInterfaces(this);
        }
    };
    // @Override
    ExtendsInterfacesContext.prototype.exitRule = function (listener) {
        if (listener.exitExtendsInterfaces) {
            listener.exitExtendsInterfaces(this);
        }
    };
    // @Override
    ExtendsInterfacesContext.prototype.accept = function (visitor) {
        if (visitor.visitExtendsInterfaces) {
            return visitor.visitExtendsInterfaces(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExtendsInterfacesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExtendsInterfacesContext = ExtendsInterfacesContext;
var InterfaceBodyContext = /** @class */ (function (_super) {
    __extends(InterfaceBodyContext, _super);
    function InterfaceBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InterfaceBodyContext.prototype.LBRACE = function () { return this.getToken(Java8Parser.LBRACE, 0); };
    InterfaceBodyContext.prototype.RBRACE = function () { return this.getToken(Java8Parser.RBRACE, 0); };
    InterfaceBodyContext.prototype.interfaceMemberDeclaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InterfaceMemberDeclarationContext);
        }
        else {
            return this.getRuleContext(i, InterfaceMemberDeclarationContext);
        }
    };
    Object.defineProperty(InterfaceBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_interfaceBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InterfaceBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterInterfaceBody) {
            listener.enterInterfaceBody(this);
        }
    };
    // @Override
    InterfaceBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitInterfaceBody) {
            listener.exitInterfaceBody(this);
        }
    };
    // @Override
    InterfaceBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitInterfaceBody) {
            return visitor.visitInterfaceBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InterfaceBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InterfaceBodyContext = InterfaceBodyContext;
var InterfaceMemberDeclarationContext = /** @class */ (function (_super) {
    __extends(InterfaceMemberDeclarationContext, _super);
    function InterfaceMemberDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InterfaceMemberDeclarationContext.prototype.constantDeclaration = function () {
        return this.tryGetRuleContext(0, ConstantDeclarationContext);
    };
    InterfaceMemberDeclarationContext.prototype.interfaceMethodDeclaration = function () {
        return this.tryGetRuleContext(0, InterfaceMethodDeclarationContext);
    };
    InterfaceMemberDeclarationContext.prototype.classDeclaration = function () {
        return this.tryGetRuleContext(0, ClassDeclarationContext);
    };
    InterfaceMemberDeclarationContext.prototype.interfaceDeclaration = function () {
        return this.tryGetRuleContext(0, InterfaceDeclarationContext);
    };
    InterfaceMemberDeclarationContext.prototype.SEMI = function () { return this.tryGetToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(InterfaceMemberDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_interfaceMemberDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InterfaceMemberDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterInterfaceMemberDeclaration) {
            listener.enterInterfaceMemberDeclaration(this);
        }
    };
    // @Override
    InterfaceMemberDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitInterfaceMemberDeclaration) {
            listener.exitInterfaceMemberDeclaration(this);
        }
    };
    // @Override
    InterfaceMemberDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitInterfaceMemberDeclaration) {
            return visitor.visitInterfaceMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InterfaceMemberDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext;
var ConstantDeclarationContext = /** @class */ (function (_super) {
    __extends(ConstantDeclarationContext, _super);
    function ConstantDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConstantDeclarationContext.prototype.unannType = function () {
        return this.getRuleContext(0, UnannTypeContext);
    };
    ConstantDeclarationContext.prototype.variableDeclaratorList = function () {
        return this.getRuleContext(0, VariableDeclaratorListContext);
    };
    ConstantDeclarationContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    ConstantDeclarationContext.prototype.constantModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ConstantModifierContext);
        }
        else {
            return this.getRuleContext(i, ConstantModifierContext);
        }
    };
    Object.defineProperty(ConstantDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_constantDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConstantDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterConstantDeclaration) {
            listener.enterConstantDeclaration(this);
        }
    };
    // @Override
    ConstantDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitConstantDeclaration) {
            listener.exitConstantDeclaration(this);
        }
    };
    // @Override
    ConstantDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitConstantDeclaration) {
            return visitor.visitConstantDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConstantDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConstantDeclarationContext = ConstantDeclarationContext;
var ConstantModifierContext = /** @class */ (function (_super) {
    __extends(ConstantModifierContext, _super);
    function ConstantModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConstantModifierContext.prototype.annotation = function () {
        return this.tryGetRuleContext(0, AnnotationContext);
    };
    ConstantModifierContext.prototype.PUBLIC = function () { return this.tryGetToken(Java8Parser.PUBLIC, 0); };
    ConstantModifierContext.prototype.STATIC = function () { return this.tryGetToken(Java8Parser.STATIC, 0); };
    ConstantModifierContext.prototype.FINAL = function () { return this.tryGetToken(Java8Parser.FINAL, 0); };
    Object.defineProperty(ConstantModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_constantModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConstantModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterConstantModifier) {
            listener.enterConstantModifier(this);
        }
    };
    // @Override
    ConstantModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitConstantModifier) {
            listener.exitConstantModifier(this);
        }
    };
    // @Override
    ConstantModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitConstantModifier) {
            return visitor.visitConstantModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConstantModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConstantModifierContext = ConstantModifierContext;
var InterfaceMethodDeclarationContext = /** @class */ (function (_super) {
    __extends(InterfaceMethodDeclarationContext, _super);
    function InterfaceMethodDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InterfaceMethodDeclarationContext.prototype.methodHeader = function () {
        return this.getRuleContext(0, MethodHeaderContext);
    };
    InterfaceMethodDeclarationContext.prototype.methodBody = function () {
        return this.getRuleContext(0, MethodBodyContext);
    };
    InterfaceMethodDeclarationContext.prototype.interfaceMethodModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InterfaceMethodModifierContext);
        }
        else {
            return this.getRuleContext(i, InterfaceMethodModifierContext);
        }
    };
    Object.defineProperty(InterfaceMethodDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_interfaceMethodDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InterfaceMethodDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterInterfaceMethodDeclaration) {
            listener.enterInterfaceMethodDeclaration(this);
        }
    };
    // @Override
    InterfaceMethodDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitInterfaceMethodDeclaration) {
            listener.exitInterfaceMethodDeclaration(this);
        }
    };
    // @Override
    InterfaceMethodDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitInterfaceMethodDeclaration) {
            return visitor.visitInterfaceMethodDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InterfaceMethodDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;
var InterfaceMethodModifierContext = /** @class */ (function (_super) {
    __extends(InterfaceMethodModifierContext, _super);
    function InterfaceMethodModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InterfaceMethodModifierContext.prototype.annotation = function () {
        return this.tryGetRuleContext(0, AnnotationContext);
    };
    InterfaceMethodModifierContext.prototype.PUBLIC = function () { return this.tryGetToken(Java8Parser.PUBLIC, 0); };
    InterfaceMethodModifierContext.prototype.ABSTRACT = function () { return this.tryGetToken(Java8Parser.ABSTRACT, 0); };
    InterfaceMethodModifierContext.prototype.DEFAULT = function () { return this.tryGetToken(Java8Parser.DEFAULT, 0); };
    InterfaceMethodModifierContext.prototype.STATIC = function () { return this.tryGetToken(Java8Parser.STATIC, 0); };
    InterfaceMethodModifierContext.prototype.STRICTFP = function () { return this.tryGetToken(Java8Parser.STRICTFP, 0); };
    Object.defineProperty(InterfaceMethodModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_interfaceMethodModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InterfaceMethodModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterInterfaceMethodModifier) {
            listener.enterInterfaceMethodModifier(this);
        }
    };
    // @Override
    InterfaceMethodModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitInterfaceMethodModifier) {
            listener.exitInterfaceMethodModifier(this);
        }
    };
    // @Override
    InterfaceMethodModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitInterfaceMethodModifier) {
            return visitor.visitInterfaceMethodModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InterfaceMethodModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InterfaceMethodModifierContext = InterfaceMethodModifierContext;
var AnnotationTypeDeclarationContext = /** @class */ (function (_super) {
    __extends(AnnotationTypeDeclarationContext, _super);
    function AnnotationTypeDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AnnotationTypeDeclarationContext.prototype.AT = function () { return this.getToken(Java8Parser.AT, 0); };
    AnnotationTypeDeclarationContext.prototype.INTERFACE = function () { return this.getToken(Java8Parser.INTERFACE, 0); };
    AnnotationTypeDeclarationContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    AnnotationTypeDeclarationContext.prototype.annotationTypeBody = function () {
        return this.getRuleContext(0, AnnotationTypeBodyContext);
    };
    AnnotationTypeDeclarationContext.prototype.interfaceModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(InterfaceModifierContext);
        }
        else {
            return this.getRuleContext(i, InterfaceModifierContext);
        }
    };
    Object.defineProperty(AnnotationTypeDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_annotationTypeDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AnnotationTypeDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterAnnotationTypeDeclaration) {
            listener.enterAnnotationTypeDeclaration(this);
        }
    };
    // @Override
    AnnotationTypeDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitAnnotationTypeDeclaration) {
            listener.exitAnnotationTypeDeclaration(this);
        }
    };
    // @Override
    AnnotationTypeDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitAnnotationTypeDeclaration) {
            return visitor.visitAnnotationTypeDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AnnotationTypeDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext;
var AnnotationTypeBodyContext = /** @class */ (function (_super) {
    __extends(AnnotationTypeBodyContext, _super);
    function AnnotationTypeBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AnnotationTypeBodyContext.prototype.LBRACE = function () { return this.getToken(Java8Parser.LBRACE, 0); };
    AnnotationTypeBodyContext.prototype.RBRACE = function () { return this.getToken(Java8Parser.RBRACE, 0); };
    AnnotationTypeBodyContext.prototype.annotationTypeMemberDeclaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationTypeMemberDeclarationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationTypeMemberDeclarationContext);
        }
    };
    Object.defineProperty(AnnotationTypeBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_annotationTypeBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AnnotationTypeBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterAnnotationTypeBody) {
            listener.enterAnnotationTypeBody(this);
        }
    };
    // @Override
    AnnotationTypeBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitAnnotationTypeBody) {
            listener.exitAnnotationTypeBody(this);
        }
    };
    // @Override
    AnnotationTypeBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitAnnotationTypeBody) {
            return visitor.visitAnnotationTypeBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AnnotationTypeBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AnnotationTypeBodyContext = AnnotationTypeBodyContext;
var AnnotationTypeMemberDeclarationContext = /** @class */ (function (_super) {
    __extends(AnnotationTypeMemberDeclarationContext, _super);
    function AnnotationTypeMemberDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AnnotationTypeMemberDeclarationContext.prototype.annotationTypeElementDeclaration = function () {
        return this.tryGetRuleContext(0, AnnotationTypeElementDeclarationContext);
    };
    AnnotationTypeMemberDeclarationContext.prototype.constantDeclaration = function () {
        return this.tryGetRuleContext(0, ConstantDeclarationContext);
    };
    AnnotationTypeMemberDeclarationContext.prototype.classDeclaration = function () {
        return this.tryGetRuleContext(0, ClassDeclarationContext);
    };
    AnnotationTypeMemberDeclarationContext.prototype.interfaceDeclaration = function () {
        return this.tryGetRuleContext(0, InterfaceDeclarationContext);
    };
    AnnotationTypeMemberDeclarationContext.prototype.SEMI = function () { return this.tryGetToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(AnnotationTypeMemberDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_annotationTypeMemberDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AnnotationTypeMemberDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterAnnotationTypeMemberDeclaration) {
            listener.enterAnnotationTypeMemberDeclaration(this);
        }
    };
    // @Override
    AnnotationTypeMemberDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitAnnotationTypeMemberDeclaration) {
            listener.exitAnnotationTypeMemberDeclaration(this);
        }
    };
    // @Override
    AnnotationTypeMemberDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitAnnotationTypeMemberDeclaration) {
            return visitor.visitAnnotationTypeMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AnnotationTypeMemberDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AnnotationTypeMemberDeclarationContext = AnnotationTypeMemberDeclarationContext;
var AnnotationTypeElementDeclarationContext = /** @class */ (function (_super) {
    __extends(AnnotationTypeElementDeclarationContext, _super);
    function AnnotationTypeElementDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AnnotationTypeElementDeclarationContext.prototype.unannType = function () {
        return this.getRuleContext(0, UnannTypeContext);
    };
    AnnotationTypeElementDeclarationContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    AnnotationTypeElementDeclarationContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    AnnotationTypeElementDeclarationContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    AnnotationTypeElementDeclarationContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    AnnotationTypeElementDeclarationContext.prototype.annotationTypeElementModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationTypeElementModifierContext);
        }
        else {
            return this.getRuleContext(i, AnnotationTypeElementModifierContext);
        }
    };
    AnnotationTypeElementDeclarationContext.prototype.dims = function () {
        return this.tryGetRuleContext(0, DimsContext);
    };
    AnnotationTypeElementDeclarationContext.prototype.defaultValue = function () {
        return this.tryGetRuleContext(0, DefaultValueContext);
    };
    Object.defineProperty(AnnotationTypeElementDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_annotationTypeElementDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AnnotationTypeElementDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterAnnotationTypeElementDeclaration) {
            listener.enterAnnotationTypeElementDeclaration(this);
        }
    };
    // @Override
    AnnotationTypeElementDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitAnnotationTypeElementDeclaration) {
            listener.exitAnnotationTypeElementDeclaration(this);
        }
    };
    // @Override
    AnnotationTypeElementDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitAnnotationTypeElementDeclaration) {
            return visitor.visitAnnotationTypeElementDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AnnotationTypeElementDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext;
var AnnotationTypeElementModifierContext = /** @class */ (function (_super) {
    __extends(AnnotationTypeElementModifierContext, _super);
    function AnnotationTypeElementModifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AnnotationTypeElementModifierContext.prototype.annotation = function () {
        return this.tryGetRuleContext(0, AnnotationContext);
    };
    AnnotationTypeElementModifierContext.prototype.PUBLIC = function () { return this.tryGetToken(Java8Parser.PUBLIC, 0); };
    AnnotationTypeElementModifierContext.prototype.ABSTRACT = function () { return this.tryGetToken(Java8Parser.ABSTRACT, 0); };
    Object.defineProperty(AnnotationTypeElementModifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_annotationTypeElementModifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AnnotationTypeElementModifierContext.prototype.enterRule = function (listener) {
        if (listener.enterAnnotationTypeElementModifier) {
            listener.enterAnnotationTypeElementModifier(this);
        }
    };
    // @Override
    AnnotationTypeElementModifierContext.prototype.exitRule = function (listener) {
        if (listener.exitAnnotationTypeElementModifier) {
            listener.exitAnnotationTypeElementModifier(this);
        }
    };
    // @Override
    AnnotationTypeElementModifierContext.prototype.accept = function (visitor) {
        if (visitor.visitAnnotationTypeElementModifier) {
            return visitor.visitAnnotationTypeElementModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AnnotationTypeElementModifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AnnotationTypeElementModifierContext = AnnotationTypeElementModifierContext;
var DefaultValueContext = /** @class */ (function (_super) {
    __extends(DefaultValueContext, _super);
    function DefaultValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DefaultValueContext.prototype.DEFAULT = function () { return this.getToken(Java8Parser.DEFAULT, 0); };
    DefaultValueContext.prototype.elementValue = function () {
        return this.getRuleContext(0, ElementValueContext);
    };
    Object.defineProperty(DefaultValueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_defaultValue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DefaultValueContext.prototype.enterRule = function (listener) {
        if (listener.enterDefaultValue) {
            listener.enterDefaultValue(this);
        }
    };
    // @Override
    DefaultValueContext.prototype.exitRule = function (listener) {
        if (listener.exitDefaultValue) {
            listener.exitDefaultValue(this);
        }
    };
    // @Override
    DefaultValueContext.prototype.accept = function (visitor) {
        if (visitor.visitDefaultValue) {
            return visitor.visitDefaultValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DefaultValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DefaultValueContext = DefaultValueContext;
var AnnotationContext = /** @class */ (function (_super) {
    __extends(AnnotationContext, _super);
    function AnnotationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AnnotationContext.prototype.normalAnnotation = function () {
        return this.tryGetRuleContext(0, NormalAnnotationContext);
    };
    AnnotationContext.prototype.markerAnnotation = function () {
        return this.tryGetRuleContext(0, MarkerAnnotationContext);
    };
    AnnotationContext.prototype.singleElementAnnotation = function () {
        return this.tryGetRuleContext(0, SingleElementAnnotationContext);
    };
    Object.defineProperty(AnnotationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_annotation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AnnotationContext.prototype.enterRule = function (listener) {
        if (listener.enterAnnotation) {
            listener.enterAnnotation(this);
        }
    };
    // @Override
    AnnotationContext.prototype.exitRule = function (listener) {
        if (listener.exitAnnotation) {
            listener.exitAnnotation(this);
        }
    };
    // @Override
    AnnotationContext.prototype.accept = function (visitor) {
        if (visitor.visitAnnotation) {
            return visitor.visitAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AnnotationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AnnotationContext = AnnotationContext;
var NormalAnnotationContext = /** @class */ (function (_super) {
    __extends(NormalAnnotationContext, _super);
    function NormalAnnotationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NormalAnnotationContext.prototype.AT = function () { return this.getToken(Java8Parser.AT, 0); };
    NormalAnnotationContext.prototype.typeName = function () {
        return this.getRuleContext(0, TypeNameContext);
    };
    NormalAnnotationContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    NormalAnnotationContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    NormalAnnotationContext.prototype.elementValuePairList = function () {
        return this.tryGetRuleContext(0, ElementValuePairListContext);
    };
    Object.defineProperty(NormalAnnotationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_normalAnnotation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NormalAnnotationContext.prototype.enterRule = function (listener) {
        if (listener.enterNormalAnnotation) {
            listener.enterNormalAnnotation(this);
        }
    };
    // @Override
    NormalAnnotationContext.prototype.exitRule = function (listener) {
        if (listener.exitNormalAnnotation) {
            listener.exitNormalAnnotation(this);
        }
    };
    // @Override
    NormalAnnotationContext.prototype.accept = function (visitor) {
        if (visitor.visitNormalAnnotation) {
            return visitor.visitNormalAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NormalAnnotationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NormalAnnotationContext = NormalAnnotationContext;
var ElementValuePairListContext = /** @class */ (function (_super) {
    __extends(ElementValuePairListContext, _super);
    function ElementValuePairListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ElementValuePairListContext.prototype.elementValuePair = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ElementValuePairContext);
        }
        else {
            return this.getRuleContext(i, ElementValuePairContext);
        }
    };
    ElementValuePairListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(ElementValuePairListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_elementValuePairList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ElementValuePairListContext.prototype.enterRule = function (listener) {
        if (listener.enterElementValuePairList) {
            listener.enterElementValuePairList(this);
        }
    };
    // @Override
    ElementValuePairListContext.prototype.exitRule = function (listener) {
        if (listener.exitElementValuePairList) {
            listener.exitElementValuePairList(this);
        }
    };
    // @Override
    ElementValuePairListContext.prototype.accept = function (visitor) {
        if (visitor.visitElementValuePairList) {
            return visitor.visitElementValuePairList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ElementValuePairListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ElementValuePairListContext = ElementValuePairListContext;
var ElementValuePairContext = /** @class */ (function (_super) {
    __extends(ElementValuePairContext, _super);
    function ElementValuePairContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ElementValuePairContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    ElementValuePairContext.prototype.ASSIGN = function () { return this.getToken(Java8Parser.ASSIGN, 0); };
    ElementValuePairContext.prototype.elementValue = function () {
        return this.getRuleContext(0, ElementValueContext);
    };
    Object.defineProperty(ElementValuePairContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_elementValuePair; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ElementValuePairContext.prototype.enterRule = function (listener) {
        if (listener.enterElementValuePair) {
            listener.enterElementValuePair(this);
        }
    };
    // @Override
    ElementValuePairContext.prototype.exitRule = function (listener) {
        if (listener.exitElementValuePair) {
            listener.exitElementValuePair(this);
        }
    };
    // @Override
    ElementValuePairContext.prototype.accept = function (visitor) {
        if (visitor.visitElementValuePair) {
            return visitor.visitElementValuePair(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ElementValuePairContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ElementValuePairContext = ElementValuePairContext;
var ElementValueContext = /** @class */ (function (_super) {
    __extends(ElementValueContext, _super);
    function ElementValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ElementValueContext.prototype.conditionalExpression = function () {
        return this.tryGetRuleContext(0, ConditionalExpressionContext);
    };
    ElementValueContext.prototype.elementValueArrayInitializer = function () {
        return this.tryGetRuleContext(0, ElementValueArrayInitializerContext);
    };
    ElementValueContext.prototype.annotation = function () {
        return this.tryGetRuleContext(0, AnnotationContext);
    };
    Object.defineProperty(ElementValueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_elementValue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ElementValueContext.prototype.enterRule = function (listener) {
        if (listener.enterElementValue) {
            listener.enterElementValue(this);
        }
    };
    // @Override
    ElementValueContext.prototype.exitRule = function (listener) {
        if (listener.exitElementValue) {
            listener.exitElementValue(this);
        }
    };
    // @Override
    ElementValueContext.prototype.accept = function (visitor) {
        if (visitor.visitElementValue) {
            return visitor.visitElementValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ElementValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ElementValueContext = ElementValueContext;
var ElementValueArrayInitializerContext = /** @class */ (function (_super) {
    __extends(ElementValueArrayInitializerContext, _super);
    function ElementValueArrayInitializerContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ElementValueArrayInitializerContext.prototype.LBRACE = function () { return this.getToken(Java8Parser.LBRACE, 0); };
    ElementValueArrayInitializerContext.prototype.RBRACE = function () { return this.getToken(Java8Parser.RBRACE, 0); };
    ElementValueArrayInitializerContext.prototype.elementValueList = function () {
        return this.tryGetRuleContext(0, ElementValueListContext);
    };
    ElementValueArrayInitializerContext.prototype.COMMA = function () { return this.tryGetToken(Java8Parser.COMMA, 0); };
    Object.defineProperty(ElementValueArrayInitializerContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_elementValueArrayInitializer; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ElementValueArrayInitializerContext.prototype.enterRule = function (listener) {
        if (listener.enterElementValueArrayInitializer) {
            listener.enterElementValueArrayInitializer(this);
        }
    };
    // @Override
    ElementValueArrayInitializerContext.prototype.exitRule = function (listener) {
        if (listener.exitElementValueArrayInitializer) {
            listener.exitElementValueArrayInitializer(this);
        }
    };
    // @Override
    ElementValueArrayInitializerContext.prototype.accept = function (visitor) {
        if (visitor.visitElementValueArrayInitializer) {
            return visitor.visitElementValueArrayInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ElementValueArrayInitializerContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;
var ElementValueListContext = /** @class */ (function (_super) {
    __extends(ElementValueListContext, _super);
    function ElementValueListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ElementValueListContext.prototype.elementValue = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ElementValueContext);
        }
        else {
            return this.getRuleContext(i, ElementValueContext);
        }
    };
    ElementValueListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(ElementValueListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_elementValueList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ElementValueListContext.prototype.enterRule = function (listener) {
        if (listener.enterElementValueList) {
            listener.enterElementValueList(this);
        }
    };
    // @Override
    ElementValueListContext.prototype.exitRule = function (listener) {
        if (listener.exitElementValueList) {
            listener.exitElementValueList(this);
        }
    };
    // @Override
    ElementValueListContext.prototype.accept = function (visitor) {
        if (visitor.visitElementValueList) {
            return visitor.visitElementValueList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ElementValueListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ElementValueListContext = ElementValueListContext;
var MarkerAnnotationContext = /** @class */ (function (_super) {
    __extends(MarkerAnnotationContext, _super);
    function MarkerAnnotationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MarkerAnnotationContext.prototype.AT = function () { return this.getToken(Java8Parser.AT, 0); };
    MarkerAnnotationContext.prototype.typeName = function () {
        return this.getRuleContext(0, TypeNameContext);
    };
    Object.defineProperty(MarkerAnnotationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_markerAnnotation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MarkerAnnotationContext.prototype.enterRule = function (listener) {
        if (listener.enterMarkerAnnotation) {
            listener.enterMarkerAnnotation(this);
        }
    };
    // @Override
    MarkerAnnotationContext.prototype.exitRule = function (listener) {
        if (listener.exitMarkerAnnotation) {
            listener.exitMarkerAnnotation(this);
        }
    };
    // @Override
    MarkerAnnotationContext.prototype.accept = function (visitor) {
        if (visitor.visitMarkerAnnotation) {
            return visitor.visitMarkerAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MarkerAnnotationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MarkerAnnotationContext = MarkerAnnotationContext;
var SingleElementAnnotationContext = /** @class */ (function (_super) {
    __extends(SingleElementAnnotationContext, _super);
    function SingleElementAnnotationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SingleElementAnnotationContext.prototype.AT = function () { return this.getToken(Java8Parser.AT, 0); };
    SingleElementAnnotationContext.prototype.typeName = function () {
        return this.getRuleContext(0, TypeNameContext);
    };
    SingleElementAnnotationContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    SingleElementAnnotationContext.prototype.elementValue = function () {
        return this.getRuleContext(0, ElementValueContext);
    };
    SingleElementAnnotationContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    Object.defineProperty(SingleElementAnnotationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_singleElementAnnotation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SingleElementAnnotationContext.prototype.enterRule = function (listener) {
        if (listener.enterSingleElementAnnotation) {
            listener.enterSingleElementAnnotation(this);
        }
    };
    // @Override
    SingleElementAnnotationContext.prototype.exitRule = function (listener) {
        if (listener.exitSingleElementAnnotation) {
            listener.exitSingleElementAnnotation(this);
        }
    };
    // @Override
    SingleElementAnnotationContext.prototype.accept = function (visitor) {
        if (visitor.visitSingleElementAnnotation) {
            return visitor.visitSingleElementAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SingleElementAnnotationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SingleElementAnnotationContext = SingleElementAnnotationContext;
var ArrayInitializerContext = /** @class */ (function (_super) {
    __extends(ArrayInitializerContext, _super);
    function ArrayInitializerContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArrayInitializerContext.prototype.LBRACE = function () { return this.getToken(Java8Parser.LBRACE, 0); };
    ArrayInitializerContext.prototype.RBRACE = function () { return this.getToken(Java8Parser.RBRACE, 0); };
    ArrayInitializerContext.prototype.variableInitializerList = function () {
        return this.tryGetRuleContext(0, VariableInitializerListContext);
    };
    ArrayInitializerContext.prototype.COMMA = function () { return this.tryGetToken(Java8Parser.COMMA, 0); };
    Object.defineProperty(ArrayInitializerContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_arrayInitializer; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArrayInitializerContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayInitializer) {
            listener.enterArrayInitializer(this);
        }
    };
    // @Override
    ArrayInitializerContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayInitializer) {
            listener.exitArrayInitializer(this);
        }
    };
    // @Override
    ArrayInitializerContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayInitializer) {
            return visitor.visitArrayInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArrayInitializerContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArrayInitializerContext = ArrayInitializerContext;
var VariableInitializerListContext = /** @class */ (function (_super) {
    __extends(VariableInitializerListContext, _super);
    function VariableInitializerListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    VariableInitializerListContext.prototype.variableInitializer = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableInitializerContext);
        }
        else {
            return this.getRuleContext(i, VariableInitializerContext);
        }
    };
    VariableInitializerListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(VariableInitializerListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_variableInitializerList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    VariableInitializerListContext.prototype.enterRule = function (listener) {
        if (listener.enterVariableInitializerList) {
            listener.enterVariableInitializerList(this);
        }
    };
    // @Override
    VariableInitializerListContext.prototype.exitRule = function (listener) {
        if (listener.exitVariableInitializerList) {
            listener.exitVariableInitializerList(this);
        }
    };
    // @Override
    VariableInitializerListContext.prototype.accept = function (visitor) {
        if (visitor.visitVariableInitializerList) {
            return visitor.visitVariableInitializerList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VariableInitializerListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.VariableInitializerListContext = VariableInitializerListContext;
var BlockContext = /** @class */ (function (_super) {
    __extends(BlockContext, _super);
    function BlockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BlockContext.prototype.LBRACE = function () { return this.getToken(Java8Parser.LBRACE, 0); };
    BlockContext.prototype.RBRACE = function () { return this.getToken(Java8Parser.RBRACE, 0); };
    BlockContext.prototype.blockStatements = function () {
        return this.tryGetRuleContext(0, BlockStatementsContext);
    };
    Object.defineProperty(BlockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_block; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BlockContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock) {
            listener.enterBlock(this);
        }
    };
    // @Override
    BlockContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock) {
            listener.exitBlock(this);
        }
    };
    // @Override
    BlockContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock) {
            return visitor.visitBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BlockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BlockContext = BlockContext;
var BlockStatementsContext = /** @class */ (function (_super) {
    __extends(BlockStatementsContext, _super);
    function BlockStatementsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BlockStatementsContext.prototype.blockStatement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockStatementContext);
        }
        else {
            return this.getRuleContext(i, BlockStatementContext);
        }
    };
    Object.defineProperty(BlockStatementsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_blockStatements; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BlockStatementsContext.prototype.enterRule = function (listener) {
        if (listener.enterBlockStatements) {
            listener.enterBlockStatements(this);
        }
    };
    // @Override
    BlockStatementsContext.prototype.exitRule = function (listener) {
        if (listener.exitBlockStatements) {
            listener.exitBlockStatements(this);
        }
    };
    // @Override
    BlockStatementsContext.prototype.accept = function (visitor) {
        if (visitor.visitBlockStatements) {
            return visitor.visitBlockStatements(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BlockStatementsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BlockStatementsContext = BlockStatementsContext;
var BlockStatementContext = /** @class */ (function (_super) {
    __extends(BlockStatementContext, _super);
    function BlockStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BlockStatementContext.prototype.localVariableDeclarationStatement = function () {
        return this.tryGetRuleContext(0, LocalVariableDeclarationStatementContext);
    };
    BlockStatementContext.prototype.classDeclaration = function () {
        return this.tryGetRuleContext(0, ClassDeclarationContext);
    };
    BlockStatementContext.prototype.statement = function () {
        return this.tryGetRuleContext(0, StatementContext);
    };
    Object.defineProperty(BlockStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_blockStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BlockStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterBlockStatement) {
            listener.enterBlockStatement(this);
        }
    };
    // @Override
    BlockStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitBlockStatement) {
            listener.exitBlockStatement(this);
        }
    };
    // @Override
    BlockStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitBlockStatement) {
            return visitor.visitBlockStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BlockStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BlockStatementContext = BlockStatementContext;
var LocalVariableDeclarationStatementContext = /** @class */ (function (_super) {
    __extends(LocalVariableDeclarationStatementContext, _super);
    function LocalVariableDeclarationStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LocalVariableDeclarationStatementContext.prototype.localVariableDeclaration = function () {
        return this.getRuleContext(0, LocalVariableDeclarationContext);
    };
    LocalVariableDeclarationStatementContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(LocalVariableDeclarationStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_localVariableDeclarationStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LocalVariableDeclarationStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterLocalVariableDeclarationStatement) {
            listener.enterLocalVariableDeclarationStatement(this);
        }
    };
    // @Override
    LocalVariableDeclarationStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitLocalVariableDeclarationStatement) {
            listener.exitLocalVariableDeclarationStatement(this);
        }
    };
    // @Override
    LocalVariableDeclarationStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitLocalVariableDeclarationStatement) {
            return visitor.visitLocalVariableDeclarationStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LocalVariableDeclarationStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;
var LocalVariableDeclarationContext = /** @class */ (function (_super) {
    __extends(LocalVariableDeclarationContext, _super);
    function LocalVariableDeclarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LocalVariableDeclarationContext.prototype.unannType = function () {
        return this.getRuleContext(0, UnannTypeContext);
    };
    LocalVariableDeclarationContext.prototype.variableDeclaratorList = function () {
        return this.getRuleContext(0, VariableDeclaratorListContext);
    };
    LocalVariableDeclarationContext.prototype.variableModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableModifierContext);
        }
        else {
            return this.getRuleContext(i, VariableModifierContext);
        }
    };
    Object.defineProperty(LocalVariableDeclarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_localVariableDeclaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LocalVariableDeclarationContext.prototype.enterRule = function (listener) {
        if (listener.enterLocalVariableDeclaration) {
            listener.enterLocalVariableDeclaration(this);
        }
    };
    // @Override
    LocalVariableDeclarationContext.prototype.exitRule = function (listener) {
        if (listener.exitLocalVariableDeclaration) {
            listener.exitLocalVariableDeclaration(this);
        }
    };
    // @Override
    LocalVariableDeclarationContext.prototype.accept = function (visitor) {
        if (visitor.visitLocalVariableDeclaration) {
            return visitor.visitLocalVariableDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LocalVariableDeclarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LocalVariableDeclarationContext = LocalVariableDeclarationContext;
var StatementContext = /** @class */ (function (_super) {
    __extends(StatementContext, _super);
    function StatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StatementContext.prototype.statementWithoutTrailingSubstatement = function () {
        return this.tryGetRuleContext(0, StatementWithoutTrailingSubstatementContext);
    };
    StatementContext.prototype.labeledStatement = function () {
        return this.tryGetRuleContext(0, LabeledStatementContext);
    };
    StatementContext.prototype.ifThenStatement = function () {
        return this.tryGetRuleContext(0, IfThenStatementContext);
    };
    StatementContext.prototype.ifThenElseStatement = function () {
        return this.tryGetRuleContext(0, IfThenElseStatementContext);
    };
    StatementContext.prototype.whileStatement = function () {
        return this.tryGetRuleContext(0, WhileStatementContext);
    };
    StatementContext.prototype.forStatement = function () {
        return this.tryGetRuleContext(0, ForStatementContext);
    };
    Object.defineProperty(StatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StatementContext.prototype.enterRule = function (listener) {
        if (listener.enterStatement) {
            listener.enterStatement(this);
        }
    };
    // @Override
    StatementContext.prototype.exitRule = function (listener) {
        if (listener.exitStatement) {
            listener.exitStatement(this);
        }
    };
    // @Override
    StatementContext.prototype.accept = function (visitor) {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StatementContext = StatementContext;
var StatementNoShortIfContext = /** @class */ (function (_super) {
    __extends(StatementNoShortIfContext, _super);
    function StatementNoShortIfContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StatementNoShortIfContext.prototype.statementWithoutTrailingSubstatement = function () {
        return this.tryGetRuleContext(0, StatementWithoutTrailingSubstatementContext);
    };
    StatementNoShortIfContext.prototype.labeledStatementNoShortIf = function () {
        return this.tryGetRuleContext(0, LabeledStatementNoShortIfContext);
    };
    StatementNoShortIfContext.prototype.ifThenElseStatementNoShortIf = function () {
        return this.tryGetRuleContext(0, IfThenElseStatementNoShortIfContext);
    };
    StatementNoShortIfContext.prototype.whileStatementNoShortIf = function () {
        return this.tryGetRuleContext(0, WhileStatementNoShortIfContext);
    };
    StatementNoShortIfContext.prototype.forStatementNoShortIf = function () {
        return this.tryGetRuleContext(0, ForStatementNoShortIfContext);
    };
    Object.defineProperty(StatementNoShortIfContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_statementNoShortIf; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StatementNoShortIfContext.prototype.enterRule = function (listener) {
        if (listener.enterStatementNoShortIf) {
            listener.enterStatementNoShortIf(this);
        }
    };
    // @Override
    StatementNoShortIfContext.prototype.exitRule = function (listener) {
        if (listener.exitStatementNoShortIf) {
            listener.exitStatementNoShortIf(this);
        }
    };
    // @Override
    StatementNoShortIfContext.prototype.accept = function (visitor) {
        if (visitor.visitStatementNoShortIf) {
            return visitor.visitStatementNoShortIf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StatementNoShortIfContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StatementNoShortIfContext = StatementNoShortIfContext;
var StatementWithoutTrailingSubstatementContext = /** @class */ (function (_super) {
    __extends(StatementWithoutTrailingSubstatementContext, _super);
    function StatementWithoutTrailingSubstatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StatementWithoutTrailingSubstatementContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.emptyStatement = function () {
        return this.tryGetRuleContext(0, EmptyStatementContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.expressionStatement = function () {
        return this.tryGetRuleContext(0, ExpressionStatementContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.assertStatement = function () {
        return this.tryGetRuleContext(0, AssertStatementContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.switchStatement = function () {
        return this.tryGetRuleContext(0, SwitchStatementContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.doStatement = function () {
        return this.tryGetRuleContext(0, DoStatementContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.breakStatement = function () {
        return this.tryGetRuleContext(0, BreakStatementContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.continueStatement = function () {
        return this.tryGetRuleContext(0, ContinueStatementContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.returnStatement = function () {
        return this.tryGetRuleContext(0, ReturnStatementContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.synchronizedStatement = function () {
        return this.tryGetRuleContext(0, SynchronizedStatementContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.throwStatement = function () {
        return this.tryGetRuleContext(0, ThrowStatementContext);
    };
    StatementWithoutTrailingSubstatementContext.prototype.tryStatement = function () {
        return this.tryGetRuleContext(0, TryStatementContext);
    };
    Object.defineProperty(StatementWithoutTrailingSubstatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_statementWithoutTrailingSubstatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StatementWithoutTrailingSubstatementContext.prototype.enterRule = function (listener) {
        if (listener.enterStatementWithoutTrailingSubstatement) {
            listener.enterStatementWithoutTrailingSubstatement(this);
        }
    };
    // @Override
    StatementWithoutTrailingSubstatementContext.prototype.exitRule = function (listener) {
        if (listener.exitStatementWithoutTrailingSubstatement) {
            listener.exitStatementWithoutTrailingSubstatement(this);
        }
    };
    // @Override
    StatementWithoutTrailingSubstatementContext.prototype.accept = function (visitor) {
        if (visitor.visitStatementWithoutTrailingSubstatement) {
            return visitor.visitStatementWithoutTrailingSubstatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StatementWithoutTrailingSubstatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StatementWithoutTrailingSubstatementContext = StatementWithoutTrailingSubstatementContext;
var EmptyStatementContext = /** @class */ (function (_super) {
    __extends(EmptyStatementContext, _super);
    function EmptyStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EmptyStatementContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(EmptyStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_emptyStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EmptyStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterEmptyStatement) {
            listener.enterEmptyStatement(this);
        }
    };
    // @Override
    EmptyStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitEmptyStatement) {
            listener.exitEmptyStatement(this);
        }
    };
    // @Override
    EmptyStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitEmptyStatement) {
            return visitor.visitEmptyStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EmptyStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EmptyStatementContext = EmptyStatementContext;
var LabeledStatementContext = /** @class */ (function (_super) {
    __extends(LabeledStatementContext, _super);
    function LabeledStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LabeledStatementContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    LabeledStatementContext.prototype.COLON = function () { return this.getToken(Java8Parser.COLON, 0); };
    LabeledStatementContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    Object.defineProperty(LabeledStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_labeledStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LabeledStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterLabeledStatement) {
            listener.enterLabeledStatement(this);
        }
    };
    // @Override
    LabeledStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitLabeledStatement) {
            listener.exitLabeledStatement(this);
        }
    };
    // @Override
    LabeledStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitLabeledStatement) {
            return visitor.visitLabeledStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LabeledStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LabeledStatementContext = LabeledStatementContext;
var LabeledStatementNoShortIfContext = /** @class */ (function (_super) {
    __extends(LabeledStatementNoShortIfContext, _super);
    function LabeledStatementNoShortIfContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LabeledStatementNoShortIfContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    LabeledStatementNoShortIfContext.prototype.COLON = function () { return this.getToken(Java8Parser.COLON, 0); };
    LabeledStatementNoShortIfContext.prototype.statementNoShortIf = function () {
        return this.getRuleContext(0, StatementNoShortIfContext);
    };
    Object.defineProperty(LabeledStatementNoShortIfContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_labeledStatementNoShortIf; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LabeledStatementNoShortIfContext.prototype.enterRule = function (listener) {
        if (listener.enterLabeledStatementNoShortIf) {
            listener.enterLabeledStatementNoShortIf(this);
        }
    };
    // @Override
    LabeledStatementNoShortIfContext.prototype.exitRule = function (listener) {
        if (listener.exitLabeledStatementNoShortIf) {
            listener.exitLabeledStatementNoShortIf(this);
        }
    };
    // @Override
    LabeledStatementNoShortIfContext.prototype.accept = function (visitor) {
        if (visitor.visitLabeledStatementNoShortIf) {
            return visitor.visitLabeledStatementNoShortIf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LabeledStatementNoShortIfContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LabeledStatementNoShortIfContext = LabeledStatementNoShortIfContext;
var ExpressionStatementContext = /** @class */ (function (_super) {
    __extends(ExpressionStatementContext, _super);
    function ExpressionStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExpressionStatementContext.prototype.statementExpression = function () {
        return this.getRuleContext(0, StatementExpressionContext);
    };
    ExpressionStatementContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(ExpressionStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_expressionStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExpressionStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterExpressionStatement) {
            listener.enterExpressionStatement(this);
        }
    };
    // @Override
    ExpressionStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitExpressionStatement) {
            listener.exitExpressionStatement(this);
        }
    };
    // @Override
    ExpressionStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitExpressionStatement) {
            return visitor.visitExpressionStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExpressionStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExpressionStatementContext = ExpressionStatementContext;
var StatementExpressionContext = /** @class */ (function (_super) {
    __extends(StatementExpressionContext, _super);
    function StatementExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StatementExpressionContext.prototype.assignment = function () {
        return this.tryGetRuleContext(0, AssignmentContext);
    };
    StatementExpressionContext.prototype.preIncrementExpression = function () {
        return this.tryGetRuleContext(0, PreIncrementExpressionContext);
    };
    StatementExpressionContext.prototype.preDecrementExpression = function () {
        return this.tryGetRuleContext(0, PreDecrementExpressionContext);
    };
    StatementExpressionContext.prototype.postIncrementExpression = function () {
        return this.tryGetRuleContext(0, PostIncrementExpressionContext);
    };
    StatementExpressionContext.prototype.postDecrementExpression = function () {
        return this.tryGetRuleContext(0, PostDecrementExpressionContext);
    };
    StatementExpressionContext.prototype.methodInvocation = function () {
        return this.tryGetRuleContext(0, MethodInvocationContext);
    };
    StatementExpressionContext.prototype.classInstanceCreationExpression = function () {
        return this.tryGetRuleContext(0, ClassInstanceCreationExpressionContext);
    };
    Object.defineProperty(StatementExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_statementExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StatementExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterStatementExpression) {
            listener.enterStatementExpression(this);
        }
    };
    // @Override
    StatementExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitStatementExpression) {
            listener.exitStatementExpression(this);
        }
    };
    // @Override
    StatementExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitStatementExpression) {
            return visitor.visitStatementExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StatementExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StatementExpressionContext = StatementExpressionContext;
var IfThenStatementContext = /** @class */ (function (_super) {
    __extends(IfThenStatementContext, _super);
    function IfThenStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IfThenStatementContext.prototype.IF = function () { return this.getToken(Java8Parser.IF, 0); };
    IfThenStatementContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    IfThenStatementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    IfThenStatementContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    IfThenStatementContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    Object.defineProperty(IfThenStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_ifThenStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IfThenStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterIfThenStatement) {
            listener.enterIfThenStatement(this);
        }
    };
    // @Override
    IfThenStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitIfThenStatement) {
            listener.exitIfThenStatement(this);
        }
    };
    // @Override
    IfThenStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitIfThenStatement) {
            return visitor.visitIfThenStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IfThenStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfThenStatementContext = IfThenStatementContext;
var IfThenElseStatementContext = /** @class */ (function (_super) {
    __extends(IfThenElseStatementContext, _super);
    function IfThenElseStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IfThenElseStatementContext.prototype.IF = function () { return this.getToken(Java8Parser.IF, 0); };
    IfThenElseStatementContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    IfThenElseStatementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    IfThenElseStatementContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    IfThenElseStatementContext.prototype.statementNoShortIf = function () {
        return this.getRuleContext(0, StatementNoShortIfContext);
    };
    IfThenElseStatementContext.prototype.ELSE = function () { return this.getToken(Java8Parser.ELSE, 0); };
    IfThenElseStatementContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    Object.defineProperty(IfThenElseStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_ifThenElseStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IfThenElseStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterIfThenElseStatement) {
            listener.enterIfThenElseStatement(this);
        }
    };
    // @Override
    IfThenElseStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitIfThenElseStatement) {
            listener.exitIfThenElseStatement(this);
        }
    };
    // @Override
    IfThenElseStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitIfThenElseStatement) {
            return visitor.visitIfThenElseStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IfThenElseStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfThenElseStatementContext = IfThenElseStatementContext;
var IfThenElseStatementNoShortIfContext = /** @class */ (function (_super) {
    __extends(IfThenElseStatementNoShortIfContext, _super);
    function IfThenElseStatementNoShortIfContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IfThenElseStatementNoShortIfContext.prototype.IF = function () { return this.getToken(Java8Parser.IF, 0); };
    IfThenElseStatementNoShortIfContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    IfThenElseStatementNoShortIfContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    IfThenElseStatementNoShortIfContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    IfThenElseStatementNoShortIfContext.prototype.statementNoShortIf = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementNoShortIfContext);
        }
        else {
            return this.getRuleContext(i, StatementNoShortIfContext);
        }
    };
    IfThenElseStatementNoShortIfContext.prototype.ELSE = function () { return this.getToken(Java8Parser.ELSE, 0); };
    Object.defineProperty(IfThenElseStatementNoShortIfContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_ifThenElseStatementNoShortIf; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IfThenElseStatementNoShortIfContext.prototype.enterRule = function (listener) {
        if (listener.enterIfThenElseStatementNoShortIf) {
            listener.enterIfThenElseStatementNoShortIf(this);
        }
    };
    // @Override
    IfThenElseStatementNoShortIfContext.prototype.exitRule = function (listener) {
        if (listener.exitIfThenElseStatementNoShortIf) {
            listener.exitIfThenElseStatementNoShortIf(this);
        }
    };
    // @Override
    IfThenElseStatementNoShortIfContext.prototype.accept = function (visitor) {
        if (visitor.visitIfThenElseStatementNoShortIf) {
            return visitor.visitIfThenElseStatementNoShortIf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IfThenElseStatementNoShortIfContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfThenElseStatementNoShortIfContext = IfThenElseStatementNoShortIfContext;
var AssertStatementContext = /** @class */ (function (_super) {
    __extends(AssertStatementContext, _super);
    function AssertStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AssertStatementContext.prototype.ASSERT = function () { return this.getToken(Java8Parser.ASSERT, 0); };
    AssertStatementContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    AssertStatementContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    AssertStatementContext.prototype.COLON = function () { return this.tryGetToken(Java8Parser.COLON, 0); };
    Object.defineProperty(AssertStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_assertStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AssertStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterAssertStatement) {
            listener.enterAssertStatement(this);
        }
    };
    // @Override
    AssertStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitAssertStatement) {
            listener.exitAssertStatement(this);
        }
    };
    // @Override
    AssertStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitAssertStatement) {
            return visitor.visitAssertStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AssertStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AssertStatementContext = AssertStatementContext;
var SwitchStatementContext = /** @class */ (function (_super) {
    __extends(SwitchStatementContext, _super);
    function SwitchStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SwitchStatementContext.prototype.SWITCH = function () { return this.getToken(Java8Parser.SWITCH, 0); };
    SwitchStatementContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    SwitchStatementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    SwitchStatementContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    SwitchStatementContext.prototype.switchBlock = function () {
        return this.getRuleContext(0, SwitchBlockContext);
    };
    Object.defineProperty(SwitchStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_switchStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SwitchStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSwitchStatement) {
            listener.enterSwitchStatement(this);
        }
    };
    // @Override
    SwitchStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSwitchStatement) {
            listener.exitSwitchStatement(this);
        }
    };
    // @Override
    SwitchStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSwitchStatement) {
            return visitor.visitSwitchStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SwitchStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SwitchStatementContext = SwitchStatementContext;
var SwitchBlockContext = /** @class */ (function (_super) {
    __extends(SwitchBlockContext, _super);
    function SwitchBlockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SwitchBlockContext.prototype.LBRACE = function () { return this.getToken(Java8Parser.LBRACE, 0); };
    SwitchBlockContext.prototype.RBRACE = function () { return this.getToken(Java8Parser.RBRACE, 0); };
    SwitchBlockContext.prototype.switchBlockStatementGroup = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SwitchBlockStatementGroupContext);
        }
        else {
            return this.getRuleContext(i, SwitchBlockStatementGroupContext);
        }
    };
    SwitchBlockContext.prototype.switchLabel = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SwitchLabelContext);
        }
        else {
            return this.getRuleContext(i, SwitchLabelContext);
        }
    };
    Object.defineProperty(SwitchBlockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_switchBlock; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SwitchBlockContext.prototype.enterRule = function (listener) {
        if (listener.enterSwitchBlock) {
            listener.enterSwitchBlock(this);
        }
    };
    // @Override
    SwitchBlockContext.prototype.exitRule = function (listener) {
        if (listener.exitSwitchBlock) {
            listener.exitSwitchBlock(this);
        }
    };
    // @Override
    SwitchBlockContext.prototype.accept = function (visitor) {
        if (visitor.visitSwitchBlock) {
            return visitor.visitSwitchBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SwitchBlockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SwitchBlockContext = SwitchBlockContext;
var SwitchBlockStatementGroupContext = /** @class */ (function (_super) {
    __extends(SwitchBlockStatementGroupContext, _super);
    function SwitchBlockStatementGroupContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SwitchBlockStatementGroupContext.prototype.switchLabels = function () {
        return this.getRuleContext(0, SwitchLabelsContext);
    };
    SwitchBlockStatementGroupContext.prototype.blockStatements = function () {
        return this.getRuleContext(0, BlockStatementsContext);
    };
    Object.defineProperty(SwitchBlockStatementGroupContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_switchBlockStatementGroup; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SwitchBlockStatementGroupContext.prototype.enterRule = function (listener) {
        if (listener.enterSwitchBlockStatementGroup) {
            listener.enterSwitchBlockStatementGroup(this);
        }
    };
    // @Override
    SwitchBlockStatementGroupContext.prototype.exitRule = function (listener) {
        if (listener.exitSwitchBlockStatementGroup) {
            listener.exitSwitchBlockStatementGroup(this);
        }
    };
    // @Override
    SwitchBlockStatementGroupContext.prototype.accept = function (visitor) {
        if (visitor.visitSwitchBlockStatementGroup) {
            return visitor.visitSwitchBlockStatementGroup(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SwitchBlockStatementGroupContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext;
var SwitchLabelsContext = /** @class */ (function (_super) {
    __extends(SwitchLabelsContext, _super);
    function SwitchLabelsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SwitchLabelsContext.prototype.switchLabel = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SwitchLabelContext);
        }
        else {
            return this.getRuleContext(i, SwitchLabelContext);
        }
    };
    Object.defineProperty(SwitchLabelsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_switchLabels; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SwitchLabelsContext.prototype.enterRule = function (listener) {
        if (listener.enterSwitchLabels) {
            listener.enterSwitchLabels(this);
        }
    };
    // @Override
    SwitchLabelsContext.prototype.exitRule = function (listener) {
        if (listener.exitSwitchLabels) {
            listener.exitSwitchLabels(this);
        }
    };
    // @Override
    SwitchLabelsContext.prototype.accept = function (visitor) {
        if (visitor.visitSwitchLabels) {
            return visitor.visitSwitchLabels(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SwitchLabelsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SwitchLabelsContext = SwitchLabelsContext;
var SwitchLabelContext = /** @class */ (function (_super) {
    __extends(SwitchLabelContext, _super);
    function SwitchLabelContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SwitchLabelContext.prototype.CASE = function () { return this.tryGetToken(Java8Parser.CASE, 0); };
    SwitchLabelContext.prototype.constantExpression = function () {
        return this.tryGetRuleContext(0, ConstantExpressionContext);
    };
    SwitchLabelContext.prototype.COLON = function () { return this.getToken(Java8Parser.COLON, 0); };
    SwitchLabelContext.prototype.enumConstantName = function () {
        return this.tryGetRuleContext(0, EnumConstantNameContext);
    };
    SwitchLabelContext.prototype.DEFAULT = function () { return this.tryGetToken(Java8Parser.DEFAULT, 0); };
    Object.defineProperty(SwitchLabelContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_switchLabel; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SwitchLabelContext.prototype.enterRule = function (listener) {
        if (listener.enterSwitchLabel) {
            listener.enterSwitchLabel(this);
        }
    };
    // @Override
    SwitchLabelContext.prototype.exitRule = function (listener) {
        if (listener.exitSwitchLabel) {
            listener.exitSwitchLabel(this);
        }
    };
    // @Override
    SwitchLabelContext.prototype.accept = function (visitor) {
        if (visitor.visitSwitchLabel) {
            return visitor.visitSwitchLabel(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SwitchLabelContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SwitchLabelContext = SwitchLabelContext;
var EnumConstantNameContext = /** @class */ (function (_super) {
    __extends(EnumConstantNameContext, _super);
    function EnumConstantNameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnumConstantNameContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    Object.defineProperty(EnumConstantNameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_enumConstantName; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnumConstantNameContext.prototype.enterRule = function (listener) {
        if (listener.enterEnumConstantName) {
            listener.enterEnumConstantName(this);
        }
    };
    // @Override
    EnumConstantNameContext.prototype.exitRule = function (listener) {
        if (listener.exitEnumConstantName) {
            listener.exitEnumConstantName(this);
        }
    };
    // @Override
    EnumConstantNameContext.prototype.accept = function (visitor) {
        if (visitor.visitEnumConstantName) {
            return visitor.visitEnumConstantName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnumConstantNameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnumConstantNameContext = EnumConstantNameContext;
var WhileStatementContext = /** @class */ (function (_super) {
    __extends(WhileStatementContext, _super);
    function WhileStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WhileStatementContext.prototype.WHILE = function () { return this.getToken(Java8Parser.WHILE, 0); };
    WhileStatementContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    WhileStatementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    WhileStatementContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    WhileStatementContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    Object.defineProperty(WhileStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_whileStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WhileStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterWhileStatement) {
            listener.enterWhileStatement(this);
        }
    };
    // @Override
    WhileStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitWhileStatement) {
            listener.exitWhileStatement(this);
        }
    };
    // @Override
    WhileStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitWhileStatement) {
            return visitor.visitWhileStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WhileStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WhileStatementContext = WhileStatementContext;
var WhileStatementNoShortIfContext = /** @class */ (function (_super) {
    __extends(WhileStatementNoShortIfContext, _super);
    function WhileStatementNoShortIfContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WhileStatementNoShortIfContext.prototype.WHILE = function () { return this.getToken(Java8Parser.WHILE, 0); };
    WhileStatementNoShortIfContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    WhileStatementNoShortIfContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    WhileStatementNoShortIfContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    WhileStatementNoShortIfContext.prototype.statementNoShortIf = function () {
        return this.getRuleContext(0, StatementNoShortIfContext);
    };
    Object.defineProperty(WhileStatementNoShortIfContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_whileStatementNoShortIf; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WhileStatementNoShortIfContext.prototype.enterRule = function (listener) {
        if (listener.enterWhileStatementNoShortIf) {
            listener.enterWhileStatementNoShortIf(this);
        }
    };
    // @Override
    WhileStatementNoShortIfContext.prototype.exitRule = function (listener) {
        if (listener.exitWhileStatementNoShortIf) {
            listener.exitWhileStatementNoShortIf(this);
        }
    };
    // @Override
    WhileStatementNoShortIfContext.prototype.accept = function (visitor) {
        if (visitor.visitWhileStatementNoShortIf) {
            return visitor.visitWhileStatementNoShortIf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WhileStatementNoShortIfContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WhileStatementNoShortIfContext = WhileStatementNoShortIfContext;
var DoStatementContext = /** @class */ (function (_super) {
    __extends(DoStatementContext, _super);
    function DoStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DoStatementContext.prototype.DO = function () { return this.getToken(Java8Parser.DO, 0); };
    DoStatementContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    DoStatementContext.prototype.WHILE = function () { return this.getToken(Java8Parser.WHILE, 0); };
    DoStatementContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    DoStatementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    DoStatementContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    DoStatementContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(DoStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_doStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DoStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterDoStatement) {
            listener.enterDoStatement(this);
        }
    };
    // @Override
    DoStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitDoStatement) {
            listener.exitDoStatement(this);
        }
    };
    // @Override
    DoStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitDoStatement) {
            return visitor.visitDoStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DoStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DoStatementContext = DoStatementContext;
var ForStatementContext = /** @class */ (function (_super) {
    __extends(ForStatementContext, _super);
    function ForStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ForStatementContext.prototype.basicForStatement = function () {
        return this.tryGetRuleContext(0, BasicForStatementContext);
    };
    ForStatementContext.prototype.enhancedForStatement = function () {
        return this.tryGetRuleContext(0, EnhancedForStatementContext);
    };
    Object.defineProperty(ForStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_forStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ForStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterForStatement) {
            listener.enterForStatement(this);
        }
    };
    // @Override
    ForStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitForStatement) {
            listener.exitForStatement(this);
        }
    };
    // @Override
    ForStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitForStatement) {
            return visitor.visitForStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ForStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ForStatementContext = ForStatementContext;
var ForStatementNoShortIfContext = /** @class */ (function (_super) {
    __extends(ForStatementNoShortIfContext, _super);
    function ForStatementNoShortIfContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ForStatementNoShortIfContext.prototype.basicForStatementNoShortIf = function () {
        return this.tryGetRuleContext(0, BasicForStatementNoShortIfContext);
    };
    ForStatementNoShortIfContext.prototype.enhancedForStatementNoShortIf = function () {
        return this.tryGetRuleContext(0, EnhancedForStatementNoShortIfContext);
    };
    Object.defineProperty(ForStatementNoShortIfContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_forStatementNoShortIf; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ForStatementNoShortIfContext.prototype.enterRule = function (listener) {
        if (listener.enterForStatementNoShortIf) {
            listener.enterForStatementNoShortIf(this);
        }
    };
    // @Override
    ForStatementNoShortIfContext.prototype.exitRule = function (listener) {
        if (listener.exitForStatementNoShortIf) {
            listener.exitForStatementNoShortIf(this);
        }
    };
    // @Override
    ForStatementNoShortIfContext.prototype.accept = function (visitor) {
        if (visitor.visitForStatementNoShortIf) {
            return visitor.visitForStatementNoShortIf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ForStatementNoShortIfContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ForStatementNoShortIfContext = ForStatementNoShortIfContext;
var BasicForStatementContext = /** @class */ (function (_super) {
    __extends(BasicForStatementContext, _super);
    function BasicForStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BasicForStatementContext.prototype.FOR = function () { return this.getToken(Java8Parser.FOR, 0); };
    BasicForStatementContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    BasicForStatementContext.prototype.SEMI = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.SEMI);
        }
        else {
            return this.getToken(Java8Parser.SEMI, i);
        }
    };
    BasicForStatementContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    BasicForStatementContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    BasicForStatementContext.prototype.forInit = function () {
        return this.tryGetRuleContext(0, ForInitContext);
    };
    BasicForStatementContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    BasicForStatementContext.prototype.forUpdate = function () {
        return this.tryGetRuleContext(0, ForUpdateContext);
    };
    Object.defineProperty(BasicForStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_basicForStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BasicForStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterBasicForStatement) {
            listener.enterBasicForStatement(this);
        }
    };
    // @Override
    BasicForStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitBasicForStatement) {
            listener.exitBasicForStatement(this);
        }
    };
    // @Override
    BasicForStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitBasicForStatement) {
            return visitor.visitBasicForStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BasicForStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BasicForStatementContext = BasicForStatementContext;
var BasicForStatementNoShortIfContext = /** @class */ (function (_super) {
    __extends(BasicForStatementNoShortIfContext, _super);
    function BasicForStatementNoShortIfContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BasicForStatementNoShortIfContext.prototype.FOR = function () { return this.getToken(Java8Parser.FOR, 0); };
    BasicForStatementNoShortIfContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    BasicForStatementNoShortIfContext.prototype.SEMI = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.SEMI);
        }
        else {
            return this.getToken(Java8Parser.SEMI, i);
        }
    };
    BasicForStatementNoShortIfContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    BasicForStatementNoShortIfContext.prototype.statementNoShortIf = function () {
        return this.getRuleContext(0, StatementNoShortIfContext);
    };
    BasicForStatementNoShortIfContext.prototype.forInit = function () {
        return this.tryGetRuleContext(0, ForInitContext);
    };
    BasicForStatementNoShortIfContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    BasicForStatementNoShortIfContext.prototype.forUpdate = function () {
        return this.tryGetRuleContext(0, ForUpdateContext);
    };
    Object.defineProperty(BasicForStatementNoShortIfContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_basicForStatementNoShortIf; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BasicForStatementNoShortIfContext.prototype.enterRule = function (listener) {
        if (listener.enterBasicForStatementNoShortIf) {
            listener.enterBasicForStatementNoShortIf(this);
        }
    };
    // @Override
    BasicForStatementNoShortIfContext.prototype.exitRule = function (listener) {
        if (listener.exitBasicForStatementNoShortIf) {
            listener.exitBasicForStatementNoShortIf(this);
        }
    };
    // @Override
    BasicForStatementNoShortIfContext.prototype.accept = function (visitor) {
        if (visitor.visitBasicForStatementNoShortIf) {
            return visitor.visitBasicForStatementNoShortIf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BasicForStatementNoShortIfContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BasicForStatementNoShortIfContext = BasicForStatementNoShortIfContext;
var ForInitContext = /** @class */ (function (_super) {
    __extends(ForInitContext, _super);
    function ForInitContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ForInitContext.prototype.statementExpressionList = function () {
        return this.tryGetRuleContext(0, StatementExpressionListContext);
    };
    ForInitContext.prototype.localVariableDeclaration = function () {
        return this.tryGetRuleContext(0, LocalVariableDeclarationContext);
    };
    Object.defineProperty(ForInitContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_forInit; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ForInitContext.prototype.enterRule = function (listener) {
        if (listener.enterForInit) {
            listener.enterForInit(this);
        }
    };
    // @Override
    ForInitContext.prototype.exitRule = function (listener) {
        if (listener.exitForInit) {
            listener.exitForInit(this);
        }
    };
    // @Override
    ForInitContext.prototype.accept = function (visitor) {
        if (visitor.visitForInit) {
            return visitor.visitForInit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ForInitContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ForInitContext = ForInitContext;
var ForUpdateContext = /** @class */ (function (_super) {
    __extends(ForUpdateContext, _super);
    function ForUpdateContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ForUpdateContext.prototype.statementExpressionList = function () {
        return this.getRuleContext(0, StatementExpressionListContext);
    };
    Object.defineProperty(ForUpdateContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_forUpdate; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ForUpdateContext.prototype.enterRule = function (listener) {
        if (listener.enterForUpdate) {
            listener.enterForUpdate(this);
        }
    };
    // @Override
    ForUpdateContext.prototype.exitRule = function (listener) {
        if (listener.exitForUpdate) {
            listener.exitForUpdate(this);
        }
    };
    // @Override
    ForUpdateContext.prototype.accept = function (visitor) {
        if (visitor.visitForUpdate) {
            return visitor.visitForUpdate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ForUpdateContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ForUpdateContext = ForUpdateContext;
var StatementExpressionListContext = /** @class */ (function (_super) {
    __extends(StatementExpressionListContext, _super);
    function StatementExpressionListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StatementExpressionListContext.prototype.statementExpression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementExpressionContext);
        }
        else {
            return this.getRuleContext(i, StatementExpressionContext);
        }
    };
    StatementExpressionListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(StatementExpressionListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_statementExpressionList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StatementExpressionListContext.prototype.enterRule = function (listener) {
        if (listener.enterStatementExpressionList) {
            listener.enterStatementExpressionList(this);
        }
    };
    // @Override
    StatementExpressionListContext.prototype.exitRule = function (listener) {
        if (listener.exitStatementExpressionList) {
            listener.exitStatementExpressionList(this);
        }
    };
    // @Override
    StatementExpressionListContext.prototype.accept = function (visitor) {
        if (visitor.visitStatementExpressionList) {
            return visitor.visitStatementExpressionList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StatementExpressionListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StatementExpressionListContext = StatementExpressionListContext;
var EnhancedForStatementContext = /** @class */ (function (_super) {
    __extends(EnhancedForStatementContext, _super);
    function EnhancedForStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnhancedForStatementContext.prototype.FOR = function () { return this.getToken(Java8Parser.FOR, 0); };
    EnhancedForStatementContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    EnhancedForStatementContext.prototype.unannType = function () {
        return this.getRuleContext(0, UnannTypeContext);
    };
    EnhancedForStatementContext.prototype.variableDeclaratorId = function () {
        return this.getRuleContext(0, VariableDeclaratorIdContext);
    };
    EnhancedForStatementContext.prototype.COLON = function () { return this.getToken(Java8Parser.COLON, 0); };
    EnhancedForStatementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    EnhancedForStatementContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    EnhancedForStatementContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    EnhancedForStatementContext.prototype.variableModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableModifierContext);
        }
        else {
            return this.getRuleContext(i, VariableModifierContext);
        }
    };
    Object.defineProperty(EnhancedForStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_enhancedForStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnhancedForStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterEnhancedForStatement) {
            listener.enterEnhancedForStatement(this);
        }
    };
    // @Override
    EnhancedForStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitEnhancedForStatement) {
            listener.exitEnhancedForStatement(this);
        }
    };
    // @Override
    EnhancedForStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitEnhancedForStatement) {
            return visitor.visitEnhancedForStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnhancedForStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnhancedForStatementContext = EnhancedForStatementContext;
var EnhancedForStatementNoShortIfContext = /** @class */ (function (_super) {
    __extends(EnhancedForStatementNoShortIfContext, _super);
    function EnhancedForStatementNoShortIfContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnhancedForStatementNoShortIfContext.prototype.FOR = function () { return this.getToken(Java8Parser.FOR, 0); };
    EnhancedForStatementNoShortIfContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    EnhancedForStatementNoShortIfContext.prototype.unannType = function () {
        return this.getRuleContext(0, UnannTypeContext);
    };
    EnhancedForStatementNoShortIfContext.prototype.variableDeclaratorId = function () {
        return this.getRuleContext(0, VariableDeclaratorIdContext);
    };
    EnhancedForStatementNoShortIfContext.prototype.COLON = function () { return this.getToken(Java8Parser.COLON, 0); };
    EnhancedForStatementNoShortIfContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    EnhancedForStatementNoShortIfContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    EnhancedForStatementNoShortIfContext.prototype.statementNoShortIf = function () {
        return this.getRuleContext(0, StatementNoShortIfContext);
    };
    EnhancedForStatementNoShortIfContext.prototype.variableModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableModifierContext);
        }
        else {
            return this.getRuleContext(i, VariableModifierContext);
        }
    };
    Object.defineProperty(EnhancedForStatementNoShortIfContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_enhancedForStatementNoShortIf; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnhancedForStatementNoShortIfContext.prototype.enterRule = function (listener) {
        if (listener.enterEnhancedForStatementNoShortIf) {
            listener.enterEnhancedForStatementNoShortIf(this);
        }
    };
    // @Override
    EnhancedForStatementNoShortIfContext.prototype.exitRule = function (listener) {
        if (listener.exitEnhancedForStatementNoShortIf) {
            listener.exitEnhancedForStatementNoShortIf(this);
        }
    };
    // @Override
    EnhancedForStatementNoShortIfContext.prototype.accept = function (visitor) {
        if (visitor.visitEnhancedForStatementNoShortIf) {
            return visitor.visitEnhancedForStatementNoShortIf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnhancedForStatementNoShortIfContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnhancedForStatementNoShortIfContext = EnhancedForStatementNoShortIfContext;
var BreakStatementContext = /** @class */ (function (_super) {
    __extends(BreakStatementContext, _super);
    function BreakStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BreakStatementContext.prototype.BREAK = function () { return this.getToken(Java8Parser.BREAK, 0); };
    BreakStatementContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    BreakStatementContext.prototype.Identifier = function () { return this.tryGetToken(Java8Parser.Identifier, 0); };
    Object.defineProperty(BreakStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_breakStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BreakStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterBreakStatement) {
            listener.enterBreakStatement(this);
        }
    };
    // @Override
    BreakStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitBreakStatement) {
            listener.exitBreakStatement(this);
        }
    };
    // @Override
    BreakStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitBreakStatement) {
            return visitor.visitBreakStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BreakStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BreakStatementContext = BreakStatementContext;
var ContinueStatementContext = /** @class */ (function (_super) {
    __extends(ContinueStatementContext, _super);
    function ContinueStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ContinueStatementContext.prototype.CONTINUE = function () { return this.getToken(Java8Parser.CONTINUE, 0); };
    ContinueStatementContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    ContinueStatementContext.prototype.Identifier = function () { return this.tryGetToken(Java8Parser.Identifier, 0); };
    Object.defineProperty(ContinueStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_continueStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ContinueStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterContinueStatement) {
            listener.enterContinueStatement(this);
        }
    };
    // @Override
    ContinueStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitContinueStatement) {
            listener.exitContinueStatement(this);
        }
    };
    // @Override
    ContinueStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitContinueStatement) {
            return visitor.visitContinueStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ContinueStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ContinueStatementContext = ContinueStatementContext;
var ReturnStatementContext = /** @class */ (function (_super) {
    __extends(ReturnStatementContext, _super);
    function ReturnStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReturnStatementContext.prototype.RETURN = function () { return this.getToken(Java8Parser.RETURN, 0); };
    ReturnStatementContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    ReturnStatementContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(ReturnStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_returnStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReturnStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterReturnStatement) {
            listener.enterReturnStatement(this);
        }
    };
    // @Override
    ReturnStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitReturnStatement) {
            listener.exitReturnStatement(this);
        }
    };
    // @Override
    ReturnStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReturnStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReturnStatementContext = ReturnStatementContext;
var ThrowStatementContext = /** @class */ (function (_super) {
    __extends(ThrowStatementContext, _super);
    function ThrowStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ThrowStatementContext.prototype.THROW = function () { return this.getToken(Java8Parser.THROW, 0); };
    ThrowStatementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    ThrowStatementContext.prototype.SEMI = function () { return this.getToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(ThrowStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_throwStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ThrowStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterThrowStatement) {
            listener.enterThrowStatement(this);
        }
    };
    // @Override
    ThrowStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitThrowStatement) {
            listener.exitThrowStatement(this);
        }
    };
    // @Override
    ThrowStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitThrowStatement) {
            return visitor.visitThrowStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ThrowStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ThrowStatementContext = ThrowStatementContext;
var SynchronizedStatementContext = /** @class */ (function (_super) {
    __extends(SynchronizedStatementContext, _super);
    function SynchronizedStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SynchronizedStatementContext.prototype.SYNCHRONIZED = function () { return this.getToken(Java8Parser.SYNCHRONIZED, 0); };
    SynchronizedStatementContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    SynchronizedStatementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    SynchronizedStatementContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    SynchronizedStatementContext.prototype.block = function () {
        return this.getRuleContext(0, BlockContext);
    };
    Object.defineProperty(SynchronizedStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_synchronizedStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SynchronizedStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterSynchronizedStatement) {
            listener.enterSynchronizedStatement(this);
        }
    };
    // @Override
    SynchronizedStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitSynchronizedStatement) {
            listener.exitSynchronizedStatement(this);
        }
    };
    // @Override
    SynchronizedStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitSynchronizedStatement) {
            return visitor.visitSynchronizedStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SynchronizedStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SynchronizedStatementContext = SynchronizedStatementContext;
var TryStatementContext = /** @class */ (function (_super) {
    __extends(TryStatementContext, _super);
    function TryStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TryStatementContext.prototype.TRY = function () { return this.tryGetToken(Java8Parser.TRY, 0); };
    TryStatementContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    TryStatementContext.prototype.catches = function () {
        return this.tryGetRuleContext(0, CatchesContext);
    };
    TryStatementContext.prototype.finally_ = function () {
        return this.tryGetRuleContext(0, Finally_Context);
    };
    TryStatementContext.prototype.tryWithResourcesStatement = function () {
        return this.tryGetRuleContext(0, TryWithResourcesStatementContext);
    };
    Object.defineProperty(TryStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_tryStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TryStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterTryStatement) {
            listener.enterTryStatement(this);
        }
    };
    // @Override
    TryStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitTryStatement) {
            listener.exitTryStatement(this);
        }
    };
    // @Override
    TryStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitTryStatement) {
            return visitor.visitTryStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TryStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TryStatementContext = TryStatementContext;
var CatchesContext = /** @class */ (function (_super) {
    __extends(CatchesContext, _super);
    function CatchesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CatchesContext.prototype.catchClause = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CatchClauseContext);
        }
        else {
            return this.getRuleContext(i, CatchClauseContext);
        }
    };
    Object.defineProperty(CatchesContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_catches; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CatchesContext.prototype.enterRule = function (listener) {
        if (listener.enterCatches) {
            listener.enterCatches(this);
        }
    };
    // @Override
    CatchesContext.prototype.exitRule = function (listener) {
        if (listener.exitCatches) {
            listener.exitCatches(this);
        }
    };
    // @Override
    CatchesContext.prototype.accept = function (visitor) {
        if (visitor.visitCatches) {
            return visitor.visitCatches(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CatchesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CatchesContext = CatchesContext;
var CatchClauseContext = /** @class */ (function (_super) {
    __extends(CatchClauseContext, _super);
    function CatchClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CatchClauseContext.prototype.CATCH = function () { return this.getToken(Java8Parser.CATCH, 0); };
    CatchClauseContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    CatchClauseContext.prototype.catchFormalParameter = function () {
        return this.getRuleContext(0, CatchFormalParameterContext);
    };
    CatchClauseContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    CatchClauseContext.prototype.block = function () {
        return this.getRuleContext(0, BlockContext);
    };
    Object.defineProperty(CatchClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_catchClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CatchClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterCatchClause) {
            listener.enterCatchClause(this);
        }
    };
    // @Override
    CatchClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitCatchClause) {
            listener.exitCatchClause(this);
        }
    };
    // @Override
    CatchClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitCatchClause) {
            return visitor.visitCatchClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CatchClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CatchClauseContext = CatchClauseContext;
var CatchFormalParameterContext = /** @class */ (function (_super) {
    __extends(CatchFormalParameterContext, _super);
    function CatchFormalParameterContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CatchFormalParameterContext.prototype.catchType = function () {
        return this.getRuleContext(0, CatchTypeContext);
    };
    CatchFormalParameterContext.prototype.variableDeclaratorId = function () {
        return this.getRuleContext(0, VariableDeclaratorIdContext);
    };
    CatchFormalParameterContext.prototype.variableModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableModifierContext);
        }
        else {
            return this.getRuleContext(i, VariableModifierContext);
        }
    };
    Object.defineProperty(CatchFormalParameterContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_catchFormalParameter; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CatchFormalParameterContext.prototype.enterRule = function (listener) {
        if (listener.enterCatchFormalParameter) {
            listener.enterCatchFormalParameter(this);
        }
    };
    // @Override
    CatchFormalParameterContext.prototype.exitRule = function (listener) {
        if (listener.exitCatchFormalParameter) {
            listener.exitCatchFormalParameter(this);
        }
    };
    // @Override
    CatchFormalParameterContext.prototype.accept = function (visitor) {
        if (visitor.visitCatchFormalParameter) {
            return visitor.visitCatchFormalParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CatchFormalParameterContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CatchFormalParameterContext = CatchFormalParameterContext;
var CatchTypeContext = /** @class */ (function (_super) {
    __extends(CatchTypeContext, _super);
    function CatchTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CatchTypeContext.prototype.unannClassType = function () {
        return this.getRuleContext(0, UnannClassTypeContext);
    };
    CatchTypeContext.prototype.BITOR = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.BITOR);
        }
        else {
            return this.getToken(Java8Parser.BITOR, i);
        }
    };
    CatchTypeContext.prototype.classType = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassTypeContext);
        }
        else {
            return this.getRuleContext(i, ClassTypeContext);
        }
    };
    Object.defineProperty(CatchTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_catchType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CatchTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterCatchType) {
            listener.enterCatchType(this);
        }
    };
    // @Override
    CatchTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitCatchType) {
            listener.exitCatchType(this);
        }
    };
    // @Override
    CatchTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitCatchType) {
            return visitor.visitCatchType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CatchTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CatchTypeContext = CatchTypeContext;
var Finally_Context = /** @class */ (function (_super) {
    __extends(Finally_Context, _super);
    function Finally_Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Finally_Context.prototype.FINALLY = function () { return this.getToken(Java8Parser.FINALLY, 0); };
    Finally_Context.prototype.block = function () {
        return this.getRuleContext(0, BlockContext);
    };
    Object.defineProperty(Finally_Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_finally_; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Finally_Context.prototype.enterRule = function (listener) {
        if (listener.enterFinally_) {
            listener.enterFinally_(this);
        }
    };
    // @Override
    Finally_Context.prototype.exitRule = function (listener) {
        if (listener.exitFinally_) {
            listener.exitFinally_(this);
        }
    };
    // @Override
    Finally_Context.prototype.accept = function (visitor) {
        if (visitor.visitFinally_) {
            return visitor.visitFinally_(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Finally_Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Finally_Context = Finally_Context;
var TryWithResourcesStatementContext = /** @class */ (function (_super) {
    __extends(TryWithResourcesStatementContext, _super);
    function TryWithResourcesStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TryWithResourcesStatementContext.prototype.TRY = function () { return this.getToken(Java8Parser.TRY, 0); };
    TryWithResourcesStatementContext.prototype.resourceSpecification = function () {
        return this.getRuleContext(0, ResourceSpecificationContext);
    };
    TryWithResourcesStatementContext.prototype.block = function () {
        return this.getRuleContext(0, BlockContext);
    };
    TryWithResourcesStatementContext.prototype.catches = function () {
        return this.tryGetRuleContext(0, CatchesContext);
    };
    TryWithResourcesStatementContext.prototype.finally_ = function () {
        return this.tryGetRuleContext(0, Finally_Context);
    };
    Object.defineProperty(TryWithResourcesStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_tryWithResourcesStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TryWithResourcesStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterTryWithResourcesStatement) {
            listener.enterTryWithResourcesStatement(this);
        }
    };
    // @Override
    TryWithResourcesStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitTryWithResourcesStatement) {
            listener.exitTryWithResourcesStatement(this);
        }
    };
    // @Override
    TryWithResourcesStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitTryWithResourcesStatement) {
            return visitor.visitTryWithResourcesStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TryWithResourcesStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TryWithResourcesStatementContext = TryWithResourcesStatementContext;
var ResourceSpecificationContext = /** @class */ (function (_super) {
    __extends(ResourceSpecificationContext, _super);
    function ResourceSpecificationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ResourceSpecificationContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    ResourceSpecificationContext.prototype.resourceList = function () {
        return this.getRuleContext(0, ResourceListContext);
    };
    ResourceSpecificationContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    ResourceSpecificationContext.prototype.SEMI = function () { return this.tryGetToken(Java8Parser.SEMI, 0); };
    Object.defineProperty(ResourceSpecificationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_resourceSpecification; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ResourceSpecificationContext.prototype.enterRule = function (listener) {
        if (listener.enterResourceSpecification) {
            listener.enterResourceSpecification(this);
        }
    };
    // @Override
    ResourceSpecificationContext.prototype.exitRule = function (listener) {
        if (listener.exitResourceSpecification) {
            listener.exitResourceSpecification(this);
        }
    };
    // @Override
    ResourceSpecificationContext.prototype.accept = function (visitor) {
        if (visitor.visitResourceSpecification) {
            return visitor.visitResourceSpecification(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ResourceSpecificationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ResourceSpecificationContext = ResourceSpecificationContext;
var ResourceListContext = /** @class */ (function (_super) {
    __extends(ResourceListContext, _super);
    function ResourceListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ResourceListContext.prototype.resource = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }
        else {
            return this.getRuleContext(i, ResourceContext);
        }
    };
    ResourceListContext.prototype.SEMI = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.SEMI);
        }
        else {
            return this.getToken(Java8Parser.SEMI, i);
        }
    };
    Object.defineProperty(ResourceListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_resourceList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ResourceListContext.prototype.enterRule = function (listener) {
        if (listener.enterResourceList) {
            listener.enterResourceList(this);
        }
    };
    // @Override
    ResourceListContext.prototype.exitRule = function (listener) {
        if (listener.exitResourceList) {
            listener.exitResourceList(this);
        }
    };
    // @Override
    ResourceListContext.prototype.accept = function (visitor) {
        if (visitor.visitResourceList) {
            return visitor.visitResourceList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ResourceListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ResourceListContext = ResourceListContext;
var ResourceContext = /** @class */ (function (_super) {
    __extends(ResourceContext, _super);
    function ResourceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ResourceContext.prototype.unannType = function () {
        return this.getRuleContext(0, UnannTypeContext);
    };
    ResourceContext.prototype.variableDeclaratorId = function () {
        return this.getRuleContext(0, VariableDeclaratorIdContext);
    };
    ResourceContext.prototype.ASSIGN = function () { return this.getToken(Java8Parser.ASSIGN, 0); };
    ResourceContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    ResourceContext.prototype.variableModifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableModifierContext);
        }
        else {
            return this.getRuleContext(i, VariableModifierContext);
        }
    };
    Object.defineProperty(ResourceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_resource; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ResourceContext.prototype.enterRule = function (listener) {
        if (listener.enterResource) {
            listener.enterResource(this);
        }
    };
    // @Override
    ResourceContext.prototype.exitRule = function (listener) {
        if (listener.exitResource) {
            listener.exitResource(this);
        }
    };
    // @Override
    ResourceContext.prototype.accept = function (visitor) {
        if (visitor.visitResource) {
            return visitor.visitResource(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ResourceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ResourceContext = ResourceContext;
var PrimaryContext = /** @class */ (function (_super) {
    __extends(PrimaryContext, _super);
    function PrimaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimaryContext.prototype.primaryNoNewArray_lfno_primary = function () {
        return this.tryGetRuleContext(0, PrimaryNoNewArray_lfno_primaryContext);
    };
    PrimaryContext.prototype.arrayCreationExpression = function () {
        return this.tryGetRuleContext(0, ArrayCreationExpressionContext);
    };
    PrimaryContext.prototype.primaryNoNewArray_lf_primary = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryNoNewArray_lf_primaryContext);
        }
        else {
            return this.getRuleContext(i, PrimaryNoNewArray_lf_primaryContext);
        }
    };
    Object.defineProperty(PrimaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimary) {
            listener.enterPrimary(this);
        }
    };
    // @Override
    PrimaryContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimary) {
            listener.exitPrimary(this);
        }
    };
    // @Override
    PrimaryContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimary) {
            return visitor.visitPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryContext = PrimaryContext;
var PrimaryNoNewArrayContext = /** @class */ (function (_super) {
    __extends(PrimaryNoNewArrayContext, _super);
    function PrimaryNoNewArrayContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimaryNoNewArrayContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    PrimaryNoNewArrayContext.prototype.typeName = function () {
        return this.tryGetRuleContext(0, TypeNameContext);
    };
    PrimaryNoNewArrayContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    PrimaryNoNewArrayContext.prototype.CLASS = function () { return this.tryGetToken(Java8Parser.CLASS, 0); };
    PrimaryNoNewArrayContext.prototype.LBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.LBRACK);
        }
        else {
            return this.getToken(Java8Parser.LBRACK, i);
        }
    };
    PrimaryNoNewArrayContext.prototype.RBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.RBRACK);
        }
        else {
            return this.getToken(Java8Parser.RBRACK, i);
        }
    };
    PrimaryNoNewArrayContext.prototype.VOID = function () { return this.tryGetToken(Java8Parser.VOID, 0); };
    PrimaryNoNewArrayContext.prototype.THIS = function () { return this.tryGetToken(Java8Parser.THIS, 0); };
    PrimaryNoNewArrayContext.prototype.LPAREN = function () { return this.tryGetToken(Java8Parser.LPAREN, 0); };
    PrimaryNoNewArrayContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    PrimaryNoNewArrayContext.prototype.RPAREN = function () { return this.tryGetToken(Java8Parser.RPAREN, 0); };
    PrimaryNoNewArrayContext.prototype.classInstanceCreationExpression = function () {
        return this.tryGetRuleContext(0, ClassInstanceCreationExpressionContext);
    };
    PrimaryNoNewArrayContext.prototype.fieldAccess = function () {
        return this.tryGetRuleContext(0, FieldAccessContext);
    };
    PrimaryNoNewArrayContext.prototype.arrayAccess = function () {
        return this.tryGetRuleContext(0, ArrayAccessContext);
    };
    PrimaryNoNewArrayContext.prototype.methodInvocation = function () {
        return this.tryGetRuleContext(0, MethodInvocationContext);
    };
    PrimaryNoNewArrayContext.prototype.methodReference = function () {
        return this.tryGetRuleContext(0, MethodReferenceContext);
    };
    Object.defineProperty(PrimaryNoNewArrayContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primaryNoNewArray; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryNoNewArrayContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimaryNoNewArray) {
            listener.enterPrimaryNoNewArray(this);
        }
    };
    // @Override
    PrimaryNoNewArrayContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimaryNoNewArray) {
            listener.exitPrimaryNoNewArray(this);
        }
    };
    // @Override
    PrimaryNoNewArrayContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimaryNoNewArray) {
            return visitor.visitPrimaryNoNewArray(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryNoNewArrayContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryNoNewArrayContext = PrimaryNoNewArrayContext;
var PrimaryNoNewArray_lf_arrayAccessContext = /** @class */ (function (_super) {
    __extends(PrimaryNoNewArray_lf_arrayAccessContext, _super);
    function PrimaryNoNewArray_lf_arrayAccessContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(PrimaryNoNewArray_lf_arrayAccessContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryNoNewArray_lf_arrayAccessContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimaryNoNewArray_lf_arrayAccess) {
            listener.enterPrimaryNoNewArray_lf_arrayAccess(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lf_arrayAccessContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimaryNoNewArray_lf_arrayAccess) {
            listener.exitPrimaryNoNewArray_lf_arrayAccess(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lf_arrayAccessContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimaryNoNewArray_lf_arrayAccess) {
            return visitor.visitPrimaryNoNewArray_lf_arrayAccess(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryNoNewArray_lf_arrayAccessContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryNoNewArray_lf_arrayAccessContext = PrimaryNoNewArray_lf_arrayAccessContext;
var PrimaryNoNewArray_lfno_arrayAccessContext = /** @class */ (function (_super) {
    __extends(PrimaryNoNewArray_lfno_arrayAccessContext, _super);
    function PrimaryNoNewArray_lfno_arrayAccessContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.typeName = function () {
        return this.tryGetRuleContext(0, TypeNameContext);
    };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.CLASS = function () { return this.tryGetToken(Java8Parser.CLASS, 0); };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.LBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.LBRACK);
        }
        else {
            return this.getToken(Java8Parser.LBRACK, i);
        }
    };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.RBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.RBRACK);
        }
        else {
            return this.getToken(Java8Parser.RBRACK, i);
        }
    };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.VOID = function () { return this.tryGetToken(Java8Parser.VOID, 0); };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.THIS = function () { return this.tryGetToken(Java8Parser.THIS, 0); };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.LPAREN = function () { return this.tryGetToken(Java8Parser.LPAREN, 0); };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.RPAREN = function () { return this.tryGetToken(Java8Parser.RPAREN, 0); };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.classInstanceCreationExpression = function () {
        return this.tryGetRuleContext(0, ClassInstanceCreationExpressionContext);
    };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.fieldAccess = function () {
        return this.tryGetRuleContext(0, FieldAccessContext);
    };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.methodInvocation = function () {
        return this.tryGetRuleContext(0, MethodInvocationContext);
    };
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.methodReference = function () {
        return this.tryGetRuleContext(0, MethodReferenceContext);
    };
    Object.defineProperty(PrimaryNoNewArray_lfno_arrayAccessContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimaryNoNewArray_lfno_arrayAccess) {
            listener.enterPrimaryNoNewArray_lfno_arrayAccess(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimaryNoNewArray_lfno_arrayAccess) {
            listener.exitPrimaryNoNewArray_lfno_arrayAccess(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lfno_arrayAccessContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimaryNoNewArray_lfno_arrayAccess) {
            return visitor.visitPrimaryNoNewArray_lfno_arrayAccess(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryNoNewArray_lfno_arrayAccessContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryNoNewArray_lfno_arrayAccessContext = PrimaryNoNewArray_lfno_arrayAccessContext;
var PrimaryNoNewArray_lf_primaryContext = /** @class */ (function (_super) {
    __extends(PrimaryNoNewArray_lf_primaryContext, _super);
    function PrimaryNoNewArray_lf_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimaryNoNewArray_lf_primaryContext.prototype.classInstanceCreationExpression_lf_primary = function () {
        return this.tryGetRuleContext(0, ClassInstanceCreationExpression_lf_primaryContext);
    };
    PrimaryNoNewArray_lf_primaryContext.prototype.fieldAccess_lf_primary = function () {
        return this.tryGetRuleContext(0, FieldAccess_lf_primaryContext);
    };
    PrimaryNoNewArray_lf_primaryContext.prototype.arrayAccess_lf_primary = function () {
        return this.tryGetRuleContext(0, ArrayAccess_lf_primaryContext);
    };
    PrimaryNoNewArray_lf_primaryContext.prototype.methodInvocation_lf_primary = function () {
        return this.tryGetRuleContext(0, MethodInvocation_lf_primaryContext);
    };
    PrimaryNoNewArray_lf_primaryContext.prototype.methodReference_lf_primary = function () {
        return this.tryGetRuleContext(0, MethodReference_lf_primaryContext);
    };
    Object.defineProperty(PrimaryNoNewArray_lf_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primaryNoNewArray_lf_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryNoNewArray_lf_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimaryNoNewArray_lf_primary) {
            listener.enterPrimaryNoNewArray_lf_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lf_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimaryNoNewArray_lf_primary) {
            listener.exitPrimaryNoNewArray_lf_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lf_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimaryNoNewArray_lf_primary) {
            return visitor.visitPrimaryNoNewArray_lf_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryNoNewArray_lf_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryNoNewArray_lf_primaryContext = PrimaryNoNewArray_lf_primaryContext;
var PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext = /** @class */ (function (_super) {
    __extends(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext, _super);
    function PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary) {
            listener.enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary) {
            listener.exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary) {
            return visitor.visitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext = PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext;
var PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext = /** @class */ (function (_super) {
    __extends(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext, _super);
    function PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.classInstanceCreationExpression_lf_primary = function () {
        return this.tryGetRuleContext(0, ClassInstanceCreationExpression_lf_primaryContext);
    };
    PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.fieldAccess_lf_primary = function () {
        return this.tryGetRuleContext(0, FieldAccess_lf_primaryContext);
    };
    PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.methodInvocation_lf_primary = function () {
        return this.tryGetRuleContext(0, MethodInvocation_lf_primaryContext);
    };
    PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.methodReference_lf_primary = function () {
        return this.tryGetRuleContext(0, MethodReference_lf_primaryContext);
    };
    Object.defineProperty(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary) {
            listener.enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary) {
            listener.exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary) {
            return visitor.visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext = PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext;
var PrimaryNoNewArray_lfno_primaryContext = /** @class */ (function (_super) {
    __extends(PrimaryNoNewArray_lfno_primaryContext, _super);
    function PrimaryNoNewArray_lfno_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimaryNoNewArray_lfno_primaryContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    PrimaryNoNewArray_lfno_primaryContext.prototype.typeName = function () {
        return this.tryGetRuleContext(0, TypeNameContext);
    };
    PrimaryNoNewArray_lfno_primaryContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    PrimaryNoNewArray_lfno_primaryContext.prototype.CLASS = function () { return this.tryGetToken(Java8Parser.CLASS, 0); };
    PrimaryNoNewArray_lfno_primaryContext.prototype.LBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.LBRACK);
        }
        else {
            return this.getToken(Java8Parser.LBRACK, i);
        }
    };
    PrimaryNoNewArray_lfno_primaryContext.prototype.RBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.RBRACK);
        }
        else {
            return this.getToken(Java8Parser.RBRACK, i);
        }
    };
    PrimaryNoNewArray_lfno_primaryContext.prototype.unannPrimitiveType = function () {
        return this.tryGetRuleContext(0, UnannPrimitiveTypeContext);
    };
    PrimaryNoNewArray_lfno_primaryContext.prototype.VOID = function () { return this.tryGetToken(Java8Parser.VOID, 0); };
    PrimaryNoNewArray_lfno_primaryContext.prototype.THIS = function () { return this.tryGetToken(Java8Parser.THIS, 0); };
    PrimaryNoNewArray_lfno_primaryContext.prototype.LPAREN = function () { return this.tryGetToken(Java8Parser.LPAREN, 0); };
    PrimaryNoNewArray_lfno_primaryContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    PrimaryNoNewArray_lfno_primaryContext.prototype.RPAREN = function () { return this.tryGetToken(Java8Parser.RPAREN, 0); };
    PrimaryNoNewArray_lfno_primaryContext.prototype.classInstanceCreationExpression_lfno_primary = function () {
        return this.tryGetRuleContext(0, ClassInstanceCreationExpression_lfno_primaryContext);
    };
    PrimaryNoNewArray_lfno_primaryContext.prototype.fieldAccess_lfno_primary = function () {
        return this.tryGetRuleContext(0, FieldAccess_lfno_primaryContext);
    };
    PrimaryNoNewArray_lfno_primaryContext.prototype.arrayAccess_lfno_primary = function () {
        return this.tryGetRuleContext(0, ArrayAccess_lfno_primaryContext);
    };
    PrimaryNoNewArray_lfno_primaryContext.prototype.methodInvocation_lfno_primary = function () {
        return this.tryGetRuleContext(0, MethodInvocation_lfno_primaryContext);
    };
    PrimaryNoNewArray_lfno_primaryContext.prototype.methodReference_lfno_primary = function () {
        return this.tryGetRuleContext(0, MethodReference_lfno_primaryContext);
    };
    Object.defineProperty(PrimaryNoNewArray_lfno_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primaryNoNewArray_lfno_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryNoNewArray_lfno_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimaryNoNewArray_lfno_primary) {
            listener.enterPrimaryNoNewArray_lfno_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lfno_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimaryNoNewArray_lfno_primary) {
            listener.exitPrimaryNoNewArray_lfno_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lfno_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimaryNoNewArray_lfno_primary) {
            return visitor.visitPrimaryNoNewArray_lfno_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryNoNewArray_lfno_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryNoNewArray_lfno_primaryContext = PrimaryNoNewArray_lfno_primaryContext;
var PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext = /** @class */ (function (_super) {
    __extends(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext, _super);
    function PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary) {
            listener.enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary) {
            listener.exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary) {
            return visitor.visitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext = PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext;
var PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext = /** @class */ (function (_super) {
    __extends(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext, _super);
    function PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.literal = function () {
        return this.tryGetRuleContext(0, LiteralContext);
    };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.typeName = function () {
        return this.tryGetRuleContext(0, TypeNameContext);
    };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.CLASS = function () { return this.tryGetToken(Java8Parser.CLASS, 0); };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.LBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.LBRACK);
        }
        else {
            return this.getToken(Java8Parser.LBRACK, i);
        }
    };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.RBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.RBRACK);
        }
        else {
            return this.getToken(Java8Parser.RBRACK, i);
        }
    };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.unannPrimitiveType = function () {
        return this.tryGetRuleContext(0, UnannPrimitiveTypeContext);
    };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.VOID = function () { return this.tryGetToken(Java8Parser.VOID, 0); };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.THIS = function () { return this.tryGetToken(Java8Parser.THIS, 0); };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.LPAREN = function () { return this.tryGetToken(Java8Parser.LPAREN, 0); };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.RPAREN = function () { return this.tryGetToken(Java8Parser.RPAREN, 0); };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.classInstanceCreationExpression_lfno_primary = function () {
        return this.tryGetRuleContext(0, ClassInstanceCreationExpression_lfno_primaryContext);
    };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.fieldAccess_lfno_primary = function () {
        return this.tryGetRuleContext(0, FieldAccess_lfno_primaryContext);
    };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.methodInvocation_lfno_primary = function () {
        return this.tryGetRuleContext(0, MethodInvocation_lfno_primaryContext);
    };
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.methodReference_lfno_primary = function () {
        return this.tryGetRuleContext(0, MethodReference_lfno_primaryContext);
    };
    Object.defineProperty(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary) {
            listener.enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary) {
            listener.exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
        }
    };
    // @Override
    PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary) {
            return visitor.visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext = PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext;
var ClassInstanceCreationExpressionContext = /** @class */ (function (_super) {
    __extends(ClassInstanceCreationExpressionContext, _super);
    function ClassInstanceCreationExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassInstanceCreationExpressionContext.prototype.NEW = function () { return this.getToken(Java8Parser.NEW, 0); };
    ClassInstanceCreationExpressionContext.prototype.Identifier = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.Identifier);
        }
        else {
            return this.getToken(Java8Parser.Identifier, i);
        }
    };
    ClassInstanceCreationExpressionContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    ClassInstanceCreationExpressionContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    ClassInstanceCreationExpressionContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    ClassInstanceCreationExpressionContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    ClassInstanceCreationExpressionContext.prototype.DOT = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.DOT);
        }
        else {
            return this.getToken(Java8Parser.DOT, i);
        }
    };
    ClassInstanceCreationExpressionContext.prototype.typeArgumentsOrDiamond = function () {
        return this.tryGetRuleContext(0, TypeArgumentsOrDiamondContext);
    };
    ClassInstanceCreationExpressionContext.prototype.argumentList = function () {
        return this.tryGetRuleContext(0, ArgumentListContext);
    };
    ClassInstanceCreationExpressionContext.prototype.classBody = function () {
        return this.tryGetRuleContext(0, ClassBodyContext);
    };
    ClassInstanceCreationExpressionContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    ClassInstanceCreationExpressionContext.prototype.primary = function () {
        return this.tryGetRuleContext(0, PrimaryContext);
    };
    Object.defineProperty(ClassInstanceCreationExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classInstanceCreationExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassInstanceCreationExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterClassInstanceCreationExpression) {
            listener.enterClassInstanceCreationExpression(this);
        }
    };
    // @Override
    ClassInstanceCreationExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitClassInstanceCreationExpression) {
            listener.exitClassInstanceCreationExpression(this);
        }
    };
    // @Override
    ClassInstanceCreationExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitClassInstanceCreationExpression) {
            return visitor.visitClassInstanceCreationExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassInstanceCreationExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassInstanceCreationExpressionContext = ClassInstanceCreationExpressionContext;
var ClassInstanceCreationExpression_lf_primaryContext = /** @class */ (function (_super) {
    __extends(ClassInstanceCreationExpression_lf_primaryContext, _super);
    function ClassInstanceCreationExpression_lf_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassInstanceCreationExpression_lf_primaryContext.prototype.DOT = function () { return this.getToken(Java8Parser.DOT, 0); };
    ClassInstanceCreationExpression_lf_primaryContext.prototype.NEW = function () { return this.getToken(Java8Parser.NEW, 0); };
    ClassInstanceCreationExpression_lf_primaryContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    ClassInstanceCreationExpression_lf_primaryContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    ClassInstanceCreationExpression_lf_primaryContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    ClassInstanceCreationExpression_lf_primaryContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    ClassInstanceCreationExpression_lf_primaryContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    ClassInstanceCreationExpression_lf_primaryContext.prototype.typeArgumentsOrDiamond = function () {
        return this.tryGetRuleContext(0, TypeArgumentsOrDiamondContext);
    };
    ClassInstanceCreationExpression_lf_primaryContext.prototype.argumentList = function () {
        return this.tryGetRuleContext(0, ArgumentListContext);
    };
    ClassInstanceCreationExpression_lf_primaryContext.prototype.classBody = function () {
        return this.tryGetRuleContext(0, ClassBodyContext);
    };
    Object.defineProperty(ClassInstanceCreationExpression_lf_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classInstanceCreationExpression_lf_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassInstanceCreationExpression_lf_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterClassInstanceCreationExpression_lf_primary) {
            listener.enterClassInstanceCreationExpression_lf_primary(this);
        }
    };
    // @Override
    ClassInstanceCreationExpression_lf_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitClassInstanceCreationExpression_lf_primary) {
            listener.exitClassInstanceCreationExpression_lf_primary(this);
        }
    };
    // @Override
    ClassInstanceCreationExpression_lf_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitClassInstanceCreationExpression_lf_primary) {
            return visitor.visitClassInstanceCreationExpression_lf_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassInstanceCreationExpression_lf_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassInstanceCreationExpression_lf_primaryContext = ClassInstanceCreationExpression_lf_primaryContext;
var ClassInstanceCreationExpression_lfno_primaryContext = /** @class */ (function (_super) {
    __extends(ClassInstanceCreationExpression_lfno_primaryContext, _super);
    function ClassInstanceCreationExpression_lfno_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.NEW = function () { return this.getToken(Java8Parser.NEW, 0); };
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.Identifier = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.Identifier);
        }
        else {
            return this.getToken(Java8Parser.Identifier, i);
        }
    };
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.DOT = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.DOT);
        }
        else {
            return this.getToken(Java8Parser.DOT, i);
        }
    };
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.typeArgumentsOrDiamond = function () {
        return this.tryGetRuleContext(0, TypeArgumentsOrDiamondContext);
    };
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.argumentList = function () {
        return this.tryGetRuleContext(0, ArgumentListContext);
    };
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.classBody = function () {
        return this.tryGetRuleContext(0, ClassBodyContext);
    };
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    Object.defineProperty(ClassInstanceCreationExpression_lfno_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_classInstanceCreationExpression_lfno_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterClassInstanceCreationExpression_lfno_primary) {
            listener.enterClassInstanceCreationExpression_lfno_primary(this);
        }
    };
    // @Override
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitClassInstanceCreationExpression_lfno_primary) {
            listener.exitClassInstanceCreationExpression_lfno_primary(this);
        }
    };
    // @Override
    ClassInstanceCreationExpression_lfno_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitClassInstanceCreationExpression_lfno_primary) {
            return visitor.visitClassInstanceCreationExpression_lfno_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ClassInstanceCreationExpression_lfno_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ClassInstanceCreationExpression_lfno_primaryContext = ClassInstanceCreationExpression_lfno_primaryContext;
var TypeArgumentsOrDiamondContext = /** @class */ (function (_super) {
    __extends(TypeArgumentsOrDiamondContext, _super);
    function TypeArgumentsOrDiamondContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeArgumentsOrDiamondContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    TypeArgumentsOrDiamondContext.prototype.LT = function () { return this.tryGetToken(Java8Parser.LT, 0); };
    TypeArgumentsOrDiamondContext.prototype.GT = function () { return this.tryGetToken(Java8Parser.GT, 0); };
    Object.defineProperty(TypeArgumentsOrDiamondContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_typeArgumentsOrDiamond; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeArgumentsOrDiamondContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeArgumentsOrDiamond) {
            listener.enterTypeArgumentsOrDiamond(this);
        }
    };
    // @Override
    TypeArgumentsOrDiamondContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeArgumentsOrDiamond) {
            listener.exitTypeArgumentsOrDiamond(this);
        }
    };
    // @Override
    TypeArgumentsOrDiamondContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeArgumentsOrDiamond) {
            return visitor.visitTypeArgumentsOrDiamond(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeArgumentsOrDiamondContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext;
var FieldAccessContext = /** @class */ (function (_super) {
    __extends(FieldAccessContext, _super);
    function FieldAccessContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FieldAccessContext.prototype.primary = function () {
        return this.tryGetRuleContext(0, PrimaryContext);
    };
    FieldAccessContext.prototype.DOT = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.DOT);
        }
        else {
            return this.getToken(Java8Parser.DOT, i);
        }
    };
    FieldAccessContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    FieldAccessContext.prototype.SUPER = function () { return this.tryGetToken(Java8Parser.SUPER, 0); };
    FieldAccessContext.prototype.typeName = function () {
        return this.tryGetRuleContext(0, TypeNameContext);
    };
    Object.defineProperty(FieldAccessContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_fieldAccess; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FieldAccessContext.prototype.enterRule = function (listener) {
        if (listener.enterFieldAccess) {
            listener.enterFieldAccess(this);
        }
    };
    // @Override
    FieldAccessContext.prototype.exitRule = function (listener) {
        if (listener.exitFieldAccess) {
            listener.exitFieldAccess(this);
        }
    };
    // @Override
    FieldAccessContext.prototype.accept = function (visitor) {
        if (visitor.visitFieldAccess) {
            return visitor.visitFieldAccess(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FieldAccessContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FieldAccessContext = FieldAccessContext;
var FieldAccess_lf_primaryContext = /** @class */ (function (_super) {
    __extends(FieldAccess_lf_primaryContext, _super);
    function FieldAccess_lf_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FieldAccess_lf_primaryContext.prototype.DOT = function () { return this.getToken(Java8Parser.DOT, 0); };
    FieldAccess_lf_primaryContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    Object.defineProperty(FieldAccess_lf_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_fieldAccess_lf_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FieldAccess_lf_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterFieldAccess_lf_primary) {
            listener.enterFieldAccess_lf_primary(this);
        }
    };
    // @Override
    FieldAccess_lf_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitFieldAccess_lf_primary) {
            listener.exitFieldAccess_lf_primary(this);
        }
    };
    // @Override
    FieldAccess_lf_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitFieldAccess_lf_primary) {
            return visitor.visitFieldAccess_lf_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FieldAccess_lf_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FieldAccess_lf_primaryContext = FieldAccess_lf_primaryContext;
var FieldAccess_lfno_primaryContext = /** @class */ (function (_super) {
    __extends(FieldAccess_lfno_primaryContext, _super);
    function FieldAccess_lfno_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FieldAccess_lfno_primaryContext.prototype.SUPER = function () { return this.getToken(Java8Parser.SUPER, 0); };
    FieldAccess_lfno_primaryContext.prototype.DOT = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.DOT);
        }
        else {
            return this.getToken(Java8Parser.DOT, i);
        }
    };
    FieldAccess_lfno_primaryContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    FieldAccess_lfno_primaryContext.prototype.typeName = function () {
        return this.tryGetRuleContext(0, TypeNameContext);
    };
    Object.defineProperty(FieldAccess_lfno_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_fieldAccess_lfno_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FieldAccess_lfno_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterFieldAccess_lfno_primary) {
            listener.enterFieldAccess_lfno_primary(this);
        }
    };
    // @Override
    FieldAccess_lfno_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitFieldAccess_lfno_primary) {
            listener.exitFieldAccess_lfno_primary(this);
        }
    };
    // @Override
    FieldAccess_lfno_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitFieldAccess_lfno_primary) {
            return visitor.visitFieldAccess_lfno_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FieldAccess_lfno_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FieldAccess_lfno_primaryContext = FieldAccess_lfno_primaryContext;
var ArrayAccessContext = /** @class */ (function (_super) {
    __extends(ArrayAccessContext, _super);
    function ArrayAccessContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArrayAccessContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    ArrayAccessContext.prototype.LBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.LBRACK);
        }
        else {
            return this.getToken(Java8Parser.LBRACK, i);
        }
    };
    ArrayAccessContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    ArrayAccessContext.prototype.RBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.RBRACK);
        }
        else {
            return this.getToken(Java8Parser.RBRACK, i);
        }
    };
    ArrayAccessContext.prototype.primaryNoNewArray_lfno_arrayAccess = function () {
        return this.tryGetRuleContext(0, PrimaryNoNewArray_lfno_arrayAccessContext);
    };
    ArrayAccessContext.prototype.primaryNoNewArray_lf_arrayAccess = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryNoNewArray_lf_arrayAccessContext);
        }
        else {
            return this.getRuleContext(i, PrimaryNoNewArray_lf_arrayAccessContext);
        }
    };
    Object.defineProperty(ArrayAccessContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_arrayAccess; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArrayAccessContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayAccess) {
            listener.enterArrayAccess(this);
        }
    };
    // @Override
    ArrayAccessContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayAccess) {
            listener.exitArrayAccess(this);
        }
    };
    // @Override
    ArrayAccessContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayAccess) {
            return visitor.visitArrayAccess(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArrayAccessContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArrayAccessContext = ArrayAccessContext;
var ArrayAccess_lf_primaryContext = /** @class */ (function (_super) {
    __extends(ArrayAccess_lf_primaryContext, _super);
    function ArrayAccess_lf_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArrayAccess_lf_primaryContext.prototype.primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = function () {
        return this.tryGetRuleContext(0, PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext);
    };
    ArrayAccess_lf_primaryContext.prototype.LBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.LBRACK);
        }
        else {
            return this.getToken(Java8Parser.LBRACK, i);
        }
    };
    ArrayAccess_lf_primaryContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    ArrayAccess_lf_primaryContext.prototype.RBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.RBRACK);
        }
        else {
            return this.getToken(Java8Parser.RBRACK, i);
        }
    };
    ArrayAccess_lf_primaryContext.prototype.primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext);
        }
        else {
            return this.getRuleContext(i, PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext);
        }
    };
    Object.defineProperty(ArrayAccess_lf_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_arrayAccess_lf_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArrayAccess_lf_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayAccess_lf_primary) {
            listener.enterArrayAccess_lf_primary(this);
        }
    };
    // @Override
    ArrayAccess_lf_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayAccess_lf_primary) {
            listener.exitArrayAccess_lf_primary(this);
        }
    };
    // @Override
    ArrayAccess_lf_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayAccess_lf_primary) {
            return visitor.visitArrayAccess_lf_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArrayAccess_lf_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArrayAccess_lf_primaryContext = ArrayAccess_lf_primaryContext;
var ArrayAccess_lfno_primaryContext = /** @class */ (function (_super) {
    __extends(ArrayAccess_lfno_primaryContext, _super);
    function ArrayAccess_lfno_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArrayAccess_lfno_primaryContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    ArrayAccess_lfno_primaryContext.prototype.LBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.LBRACK);
        }
        else {
            return this.getToken(Java8Parser.LBRACK, i);
        }
    };
    ArrayAccess_lfno_primaryContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    ArrayAccess_lfno_primaryContext.prototype.RBRACK = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.RBRACK);
        }
        else {
            return this.getToken(Java8Parser.RBRACK, i);
        }
    };
    ArrayAccess_lfno_primaryContext.prototype.primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = function () {
        return this.tryGetRuleContext(0, PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext);
    };
    ArrayAccess_lfno_primaryContext.prototype.primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext);
        }
        else {
            return this.getRuleContext(i, PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext);
        }
    };
    Object.defineProperty(ArrayAccess_lfno_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_arrayAccess_lfno_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArrayAccess_lfno_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayAccess_lfno_primary) {
            listener.enterArrayAccess_lfno_primary(this);
        }
    };
    // @Override
    ArrayAccess_lfno_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayAccess_lfno_primary) {
            listener.exitArrayAccess_lfno_primary(this);
        }
    };
    // @Override
    ArrayAccess_lfno_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayAccess_lfno_primary) {
            return visitor.visitArrayAccess_lfno_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArrayAccess_lfno_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArrayAccess_lfno_primaryContext = ArrayAccess_lfno_primaryContext;
var MethodInvocationContext = /** @class */ (function (_super) {
    __extends(MethodInvocationContext, _super);
    function MethodInvocationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodInvocationContext.prototype.methodName = function () {
        return this.tryGetRuleContext(0, MethodNameContext);
    };
    MethodInvocationContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    MethodInvocationContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    MethodInvocationContext.prototype.argumentList = function () {
        return this.tryGetRuleContext(0, ArgumentListContext);
    };
    MethodInvocationContext.prototype.typeName = function () {
        return this.tryGetRuleContext(0, TypeNameContext);
    };
    MethodInvocationContext.prototype.DOT = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.DOT);
        }
        else {
            return this.getToken(Java8Parser.DOT, i);
        }
    };
    MethodInvocationContext.prototype.Identifier = function () { return this.tryGetToken(Java8Parser.Identifier, 0); };
    MethodInvocationContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    MethodInvocationContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    MethodInvocationContext.prototype.primary = function () {
        return this.tryGetRuleContext(0, PrimaryContext);
    };
    MethodInvocationContext.prototype.SUPER = function () { return this.tryGetToken(Java8Parser.SUPER, 0); };
    Object.defineProperty(MethodInvocationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodInvocation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodInvocationContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodInvocation) {
            listener.enterMethodInvocation(this);
        }
    };
    // @Override
    MethodInvocationContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodInvocation) {
            listener.exitMethodInvocation(this);
        }
    };
    // @Override
    MethodInvocationContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodInvocation) {
            return visitor.visitMethodInvocation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodInvocationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodInvocationContext = MethodInvocationContext;
var MethodInvocation_lf_primaryContext = /** @class */ (function (_super) {
    __extends(MethodInvocation_lf_primaryContext, _super);
    function MethodInvocation_lf_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodInvocation_lf_primaryContext.prototype.DOT = function () { return this.getToken(Java8Parser.DOT, 0); };
    MethodInvocation_lf_primaryContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    MethodInvocation_lf_primaryContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    MethodInvocation_lf_primaryContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    MethodInvocation_lf_primaryContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    MethodInvocation_lf_primaryContext.prototype.argumentList = function () {
        return this.tryGetRuleContext(0, ArgumentListContext);
    };
    Object.defineProperty(MethodInvocation_lf_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodInvocation_lf_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodInvocation_lf_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodInvocation_lf_primary) {
            listener.enterMethodInvocation_lf_primary(this);
        }
    };
    // @Override
    MethodInvocation_lf_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodInvocation_lf_primary) {
            listener.exitMethodInvocation_lf_primary(this);
        }
    };
    // @Override
    MethodInvocation_lf_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodInvocation_lf_primary) {
            return visitor.visitMethodInvocation_lf_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodInvocation_lf_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodInvocation_lf_primaryContext = MethodInvocation_lf_primaryContext;
var MethodInvocation_lfno_primaryContext = /** @class */ (function (_super) {
    __extends(MethodInvocation_lfno_primaryContext, _super);
    function MethodInvocation_lfno_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodInvocation_lfno_primaryContext.prototype.methodName = function () {
        return this.tryGetRuleContext(0, MethodNameContext);
    };
    MethodInvocation_lfno_primaryContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    MethodInvocation_lfno_primaryContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    MethodInvocation_lfno_primaryContext.prototype.argumentList = function () {
        return this.tryGetRuleContext(0, ArgumentListContext);
    };
    MethodInvocation_lfno_primaryContext.prototype.typeName = function () {
        return this.tryGetRuleContext(0, TypeNameContext);
    };
    MethodInvocation_lfno_primaryContext.prototype.DOT = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.DOT);
        }
        else {
            return this.getToken(Java8Parser.DOT, i);
        }
    };
    MethodInvocation_lfno_primaryContext.prototype.Identifier = function () { return this.tryGetToken(Java8Parser.Identifier, 0); };
    MethodInvocation_lfno_primaryContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    MethodInvocation_lfno_primaryContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    MethodInvocation_lfno_primaryContext.prototype.SUPER = function () { return this.tryGetToken(Java8Parser.SUPER, 0); };
    Object.defineProperty(MethodInvocation_lfno_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodInvocation_lfno_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodInvocation_lfno_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodInvocation_lfno_primary) {
            listener.enterMethodInvocation_lfno_primary(this);
        }
    };
    // @Override
    MethodInvocation_lfno_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodInvocation_lfno_primary) {
            listener.exitMethodInvocation_lfno_primary(this);
        }
    };
    // @Override
    MethodInvocation_lfno_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodInvocation_lfno_primary) {
            return visitor.visitMethodInvocation_lfno_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodInvocation_lfno_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodInvocation_lfno_primaryContext = MethodInvocation_lfno_primaryContext;
var ArgumentListContext = /** @class */ (function (_super) {
    __extends(ArgumentListContext, _super);
    function ArgumentListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArgumentListContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    ArgumentListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(ArgumentListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_argumentList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArgumentListContext.prototype.enterRule = function (listener) {
        if (listener.enterArgumentList) {
            listener.enterArgumentList(this);
        }
    };
    // @Override
    ArgumentListContext.prototype.exitRule = function (listener) {
        if (listener.exitArgumentList) {
            listener.exitArgumentList(this);
        }
    };
    // @Override
    ArgumentListContext.prototype.accept = function (visitor) {
        if (visitor.visitArgumentList) {
            return visitor.visitArgumentList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArgumentListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArgumentListContext = ArgumentListContext;
var MethodReferenceContext = /** @class */ (function (_super) {
    __extends(MethodReferenceContext, _super);
    function MethodReferenceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodReferenceContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    MethodReferenceContext.prototype.COLONCOLON = function () { return this.getToken(Java8Parser.COLONCOLON, 0); };
    MethodReferenceContext.prototype.Identifier = function () { return this.tryGetToken(Java8Parser.Identifier, 0); };
    MethodReferenceContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    MethodReferenceContext.prototype.referenceType = function () {
        return this.tryGetRuleContext(0, ReferenceTypeContext);
    };
    MethodReferenceContext.prototype.primary = function () {
        return this.tryGetRuleContext(0, PrimaryContext);
    };
    MethodReferenceContext.prototype.SUPER = function () { return this.tryGetToken(Java8Parser.SUPER, 0); };
    MethodReferenceContext.prototype.typeName = function () {
        return this.tryGetRuleContext(0, TypeNameContext);
    };
    MethodReferenceContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    MethodReferenceContext.prototype.classType = function () {
        return this.tryGetRuleContext(0, ClassTypeContext);
    };
    MethodReferenceContext.prototype.NEW = function () { return this.tryGetToken(Java8Parser.NEW, 0); };
    MethodReferenceContext.prototype.arrayType = function () {
        return this.tryGetRuleContext(0, ArrayTypeContext);
    };
    Object.defineProperty(MethodReferenceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodReference; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodReferenceContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodReference) {
            listener.enterMethodReference(this);
        }
    };
    // @Override
    MethodReferenceContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodReference) {
            listener.exitMethodReference(this);
        }
    };
    // @Override
    MethodReferenceContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodReference) {
            return visitor.visitMethodReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodReferenceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodReferenceContext = MethodReferenceContext;
var MethodReference_lf_primaryContext = /** @class */ (function (_super) {
    __extends(MethodReference_lf_primaryContext, _super);
    function MethodReference_lf_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodReference_lf_primaryContext.prototype.COLONCOLON = function () { return this.getToken(Java8Parser.COLONCOLON, 0); };
    MethodReference_lf_primaryContext.prototype.Identifier = function () { return this.getToken(Java8Parser.Identifier, 0); };
    MethodReference_lf_primaryContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    Object.defineProperty(MethodReference_lf_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodReference_lf_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodReference_lf_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodReference_lf_primary) {
            listener.enterMethodReference_lf_primary(this);
        }
    };
    // @Override
    MethodReference_lf_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodReference_lf_primary) {
            listener.exitMethodReference_lf_primary(this);
        }
    };
    // @Override
    MethodReference_lf_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodReference_lf_primary) {
            return visitor.visitMethodReference_lf_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodReference_lf_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodReference_lf_primaryContext = MethodReference_lf_primaryContext;
var MethodReference_lfno_primaryContext = /** @class */ (function (_super) {
    __extends(MethodReference_lfno_primaryContext, _super);
    function MethodReference_lfno_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MethodReference_lfno_primaryContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    MethodReference_lfno_primaryContext.prototype.COLONCOLON = function () { return this.getToken(Java8Parser.COLONCOLON, 0); };
    MethodReference_lfno_primaryContext.prototype.Identifier = function () { return this.tryGetToken(Java8Parser.Identifier, 0); };
    MethodReference_lfno_primaryContext.prototype.typeArguments = function () {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    };
    MethodReference_lfno_primaryContext.prototype.referenceType = function () {
        return this.tryGetRuleContext(0, ReferenceTypeContext);
    };
    MethodReference_lfno_primaryContext.prototype.SUPER = function () { return this.tryGetToken(Java8Parser.SUPER, 0); };
    MethodReference_lfno_primaryContext.prototype.typeName = function () {
        return this.tryGetRuleContext(0, TypeNameContext);
    };
    MethodReference_lfno_primaryContext.prototype.DOT = function () { return this.tryGetToken(Java8Parser.DOT, 0); };
    MethodReference_lfno_primaryContext.prototype.classType = function () {
        return this.tryGetRuleContext(0, ClassTypeContext);
    };
    MethodReference_lfno_primaryContext.prototype.NEW = function () { return this.tryGetToken(Java8Parser.NEW, 0); };
    MethodReference_lfno_primaryContext.prototype.arrayType = function () {
        return this.tryGetRuleContext(0, ArrayTypeContext);
    };
    Object.defineProperty(MethodReference_lfno_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_methodReference_lfno_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MethodReference_lfno_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterMethodReference_lfno_primary) {
            listener.enterMethodReference_lfno_primary(this);
        }
    };
    // @Override
    MethodReference_lfno_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitMethodReference_lfno_primary) {
            listener.exitMethodReference_lfno_primary(this);
        }
    };
    // @Override
    MethodReference_lfno_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitMethodReference_lfno_primary) {
            return visitor.visitMethodReference_lfno_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MethodReference_lfno_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MethodReference_lfno_primaryContext = MethodReference_lfno_primaryContext;
var ArrayCreationExpressionContext = /** @class */ (function (_super) {
    __extends(ArrayCreationExpressionContext, _super);
    function ArrayCreationExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArrayCreationExpressionContext.prototype.NEW = function () { return this.getToken(Java8Parser.NEW, 0); };
    ArrayCreationExpressionContext.prototype.primitiveType = function () {
        return this.tryGetRuleContext(0, PrimitiveTypeContext);
    };
    ArrayCreationExpressionContext.prototype.dimExprs = function () {
        return this.tryGetRuleContext(0, DimExprsContext);
    };
    ArrayCreationExpressionContext.prototype.dims = function () {
        return this.tryGetRuleContext(0, DimsContext);
    };
    ArrayCreationExpressionContext.prototype.classOrInterfaceType = function () {
        return this.tryGetRuleContext(0, ClassOrInterfaceTypeContext);
    };
    ArrayCreationExpressionContext.prototype.arrayInitializer = function () {
        return this.tryGetRuleContext(0, ArrayInitializerContext);
    };
    Object.defineProperty(ArrayCreationExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_arrayCreationExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArrayCreationExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayCreationExpression) {
            listener.enterArrayCreationExpression(this);
        }
    };
    // @Override
    ArrayCreationExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayCreationExpression) {
            listener.exitArrayCreationExpression(this);
        }
    };
    // @Override
    ArrayCreationExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayCreationExpression) {
            return visitor.visitArrayCreationExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArrayCreationExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArrayCreationExpressionContext = ArrayCreationExpressionContext;
var DimExprsContext = /** @class */ (function (_super) {
    __extends(DimExprsContext, _super);
    function DimExprsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DimExprsContext.prototype.dimExpr = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DimExprContext);
        }
        else {
            return this.getRuleContext(i, DimExprContext);
        }
    };
    Object.defineProperty(DimExprsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_dimExprs; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DimExprsContext.prototype.enterRule = function (listener) {
        if (listener.enterDimExprs) {
            listener.enterDimExprs(this);
        }
    };
    // @Override
    DimExprsContext.prototype.exitRule = function (listener) {
        if (listener.exitDimExprs) {
            listener.exitDimExprs(this);
        }
    };
    // @Override
    DimExprsContext.prototype.accept = function (visitor) {
        if (visitor.visitDimExprs) {
            return visitor.visitDimExprs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DimExprsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DimExprsContext = DimExprsContext;
var DimExprContext = /** @class */ (function (_super) {
    __extends(DimExprContext, _super);
    function DimExprContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DimExprContext.prototype.LBRACK = function () { return this.getToken(Java8Parser.LBRACK, 0); };
    DimExprContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    DimExprContext.prototype.RBRACK = function () { return this.getToken(Java8Parser.RBRACK, 0); };
    DimExprContext.prototype.annotation = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    };
    Object.defineProperty(DimExprContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_dimExpr; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DimExprContext.prototype.enterRule = function (listener) {
        if (listener.enterDimExpr) {
            listener.enterDimExpr(this);
        }
    };
    // @Override
    DimExprContext.prototype.exitRule = function (listener) {
        if (listener.exitDimExpr) {
            listener.exitDimExpr(this);
        }
    };
    // @Override
    DimExprContext.prototype.accept = function (visitor) {
        if (visitor.visitDimExpr) {
            return visitor.visitDimExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DimExprContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DimExprContext = DimExprContext;
var ConstantExpressionContext = /** @class */ (function (_super) {
    __extends(ConstantExpressionContext, _super);
    function ConstantExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConstantExpressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(ConstantExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_constantExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConstantExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterConstantExpression) {
            listener.enterConstantExpression(this);
        }
    };
    // @Override
    ConstantExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitConstantExpression) {
            listener.exitConstantExpression(this);
        }
    };
    // @Override
    ConstantExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitConstantExpression) {
            return visitor.visitConstantExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConstantExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConstantExpressionContext = ConstantExpressionContext;
var ExpressionContext = /** @class */ (function (_super) {
    __extends(ExpressionContext, _super);
    function ExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExpressionContext.prototype.lambdaExpression = function () {
        return this.tryGetRuleContext(0, LambdaExpressionContext);
    };
    ExpressionContext.prototype.assignmentExpression = function () {
        return this.tryGetRuleContext(0, AssignmentExpressionContext);
    };
    Object.defineProperty(ExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterExpression) {
            listener.enterExpression(this);
        }
    };
    // @Override
    ExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitExpression) {
            listener.exitExpression(this);
        }
    };
    // @Override
    ExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExpressionContext = ExpressionContext;
var LambdaExpressionContext = /** @class */ (function (_super) {
    __extends(LambdaExpressionContext, _super);
    function LambdaExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LambdaExpressionContext.prototype.lambdaParameters = function () {
        return this.getRuleContext(0, LambdaParametersContext);
    };
    LambdaExpressionContext.prototype.ARROW = function () { return this.getToken(Java8Parser.ARROW, 0); };
    LambdaExpressionContext.prototype.lambdaBody = function () {
        return this.getRuleContext(0, LambdaBodyContext);
    };
    Object.defineProperty(LambdaExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_lambdaExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LambdaExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterLambdaExpression) {
            listener.enterLambdaExpression(this);
        }
    };
    // @Override
    LambdaExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitLambdaExpression) {
            listener.exitLambdaExpression(this);
        }
    };
    // @Override
    LambdaExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitLambdaExpression) {
            return visitor.visitLambdaExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LambdaExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LambdaExpressionContext = LambdaExpressionContext;
var LambdaParametersContext = /** @class */ (function (_super) {
    __extends(LambdaParametersContext, _super);
    function LambdaParametersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LambdaParametersContext.prototype.Identifier = function () { return this.tryGetToken(Java8Parser.Identifier, 0); };
    LambdaParametersContext.prototype.LPAREN = function () { return this.tryGetToken(Java8Parser.LPAREN, 0); };
    LambdaParametersContext.prototype.RPAREN = function () { return this.tryGetToken(Java8Parser.RPAREN, 0); };
    LambdaParametersContext.prototype.formalParameterList = function () {
        return this.tryGetRuleContext(0, FormalParameterListContext);
    };
    LambdaParametersContext.prototype.inferredFormalParameterList = function () {
        return this.tryGetRuleContext(0, InferredFormalParameterListContext);
    };
    Object.defineProperty(LambdaParametersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_lambdaParameters; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LambdaParametersContext.prototype.enterRule = function (listener) {
        if (listener.enterLambdaParameters) {
            listener.enterLambdaParameters(this);
        }
    };
    // @Override
    LambdaParametersContext.prototype.exitRule = function (listener) {
        if (listener.exitLambdaParameters) {
            listener.exitLambdaParameters(this);
        }
    };
    // @Override
    LambdaParametersContext.prototype.accept = function (visitor) {
        if (visitor.visitLambdaParameters) {
            return visitor.visitLambdaParameters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LambdaParametersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LambdaParametersContext = LambdaParametersContext;
var InferredFormalParameterListContext = /** @class */ (function (_super) {
    __extends(InferredFormalParameterListContext, _super);
    function InferredFormalParameterListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InferredFormalParameterListContext.prototype.Identifier = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.Identifier);
        }
        else {
            return this.getToken(Java8Parser.Identifier, i);
        }
    };
    InferredFormalParameterListContext.prototype.COMMA = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.COMMA);
        }
        else {
            return this.getToken(Java8Parser.COMMA, i);
        }
    };
    Object.defineProperty(InferredFormalParameterListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_inferredFormalParameterList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InferredFormalParameterListContext.prototype.enterRule = function (listener) {
        if (listener.enterInferredFormalParameterList) {
            listener.enterInferredFormalParameterList(this);
        }
    };
    // @Override
    InferredFormalParameterListContext.prototype.exitRule = function (listener) {
        if (listener.exitInferredFormalParameterList) {
            listener.exitInferredFormalParameterList(this);
        }
    };
    // @Override
    InferredFormalParameterListContext.prototype.accept = function (visitor) {
        if (visitor.visitInferredFormalParameterList) {
            return visitor.visitInferredFormalParameterList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InferredFormalParameterListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InferredFormalParameterListContext = InferredFormalParameterListContext;
var LambdaBodyContext = /** @class */ (function (_super) {
    __extends(LambdaBodyContext, _super);
    function LambdaBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LambdaBodyContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    LambdaBodyContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(LambdaBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_lambdaBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LambdaBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterLambdaBody) {
            listener.enterLambdaBody(this);
        }
    };
    // @Override
    LambdaBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitLambdaBody) {
            listener.exitLambdaBody(this);
        }
    };
    // @Override
    LambdaBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitLambdaBody) {
            return visitor.visitLambdaBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LambdaBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LambdaBodyContext = LambdaBodyContext;
var AssignmentExpressionContext = /** @class */ (function (_super) {
    __extends(AssignmentExpressionContext, _super);
    function AssignmentExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AssignmentExpressionContext.prototype.conditionalExpression = function () {
        return this.tryGetRuleContext(0, ConditionalExpressionContext);
    };
    AssignmentExpressionContext.prototype.assignment = function () {
        return this.tryGetRuleContext(0, AssignmentContext);
    };
    Object.defineProperty(AssignmentExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_assignmentExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AssignmentExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterAssignmentExpression) {
            listener.enterAssignmentExpression(this);
        }
    };
    // @Override
    AssignmentExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitAssignmentExpression) {
            listener.exitAssignmentExpression(this);
        }
    };
    // @Override
    AssignmentExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitAssignmentExpression) {
            return visitor.visitAssignmentExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AssignmentExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AssignmentExpressionContext = AssignmentExpressionContext;
var AssignmentContext = /** @class */ (function (_super) {
    __extends(AssignmentContext, _super);
    function AssignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AssignmentContext.prototype.leftHandSide = function () {
        return this.getRuleContext(0, LeftHandSideContext);
    };
    AssignmentContext.prototype.assignmentOperator = function () {
        return this.getRuleContext(0, AssignmentOperatorContext);
    };
    AssignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(AssignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AssignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterAssignment) {
            listener.enterAssignment(this);
        }
    };
    // @Override
    AssignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitAssignment) {
            listener.exitAssignment(this);
        }
    };
    // @Override
    AssignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitAssignment) {
            return visitor.visitAssignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AssignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AssignmentContext = AssignmentContext;
var LeftHandSideContext = /** @class */ (function (_super) {
    __extends(LeftHandSideContext, _super);
    function LeftHandSideContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LeftHandSideContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    LeftHandSideContext.prototype.fieldAccess = function () {
        return this.tryGetRuleContext(0, FieldAccessContext);
    };
    LeftHandSideContext.prototype.arrayAccess = function () {
        return this.tryGetRuleContext(0, ArrayAccessContext);
    };
    Object.defineProperty(LeftHandSideContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_leftHandSide; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LeftHandSideContext.prototype.enterRule = function (listener) {
        if (listener.enterLeftHandSide) {
            listener.enterLeftHandSide(this);
        }
    };
    // @Override
    LeftHandSideContext.prototype.exitRule = function (listener) {
        if (listener.exitLeftHandSide) {
            listener.exitLeftHandSide(this);
        }
    };
    // @Override
    LeftHandSideContext.prototype.accept = function (visitor) {
        if (visitor.visitLeftHandSide) {
            return visitor.visitLeftHandSide(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LeftHandSideContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LeftHandSideContext = LeftHandSideContext;
var AssignmentOperatorContext = /** @class */ (function (_super) {
    __extends(AssignmentOperatorContext, _super);
    function AssignmentOperatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AssignmentOperatorContext.prototype.ASSIGN = function () { return this.tryGetToken(Java8Parser.ASSIGN, 0); };
    AssignmentOperatorContext.prototype.MUL_ASSIGN = function () { return this.tryGetToken(Java8Parser.MUL_ASSIGN, 0); };
    AssignmentOperatorContext.prototype.DIV_ASSIGN = function () { return this.tryGetToken(Java8Parser.DIV_ASSIGN, 0); };
    AssignmentOperatorContext.prototype.MOD_ASSIGN = function () { return this.tryGetToken(Java8Parser.MOD_ASSIGN, 0); };
    AssignmentOperatorContext.prototype.ADD_ASSIGN = function () { return this.tryGetToken(Java8Parser.ADD_ASSIGN, 0); };
    AssignmentOperatorContext.prototype.SUB_ASSIGN = function () { return this.tryGetToken(Java8Parser.SUB_ASSIGN, 0); };
    AssignmentOperatorContext.prototype.LSHIFT_ASSIGN = function () { return this.tryGetToken(Java8Parser.LSHIFT_ASSIGN, 0); };
    AssignmentOperatorContext.prototype.RSHIFT_ASSIGN = function () { return this.tryGetToken(Java8Parser.RSHIFT_ASSIGN, 0); };
    AssignmentOperatorContext.prototype.URSHIFT_ASSIGN = function () { return this.tryGetToken(Java8Parser.URSHIFT_ASSIGN, 0); };
    AssignmentOperatorContext.prototype.AND_ASSIGN = function () { return this.tryGetToken(Java8Parser.AND_ASSIGN, 0); };
    AssignmentOperatorContext.prototype.XOR_ASSIGN = function () { return this.tryGetToken(Java8Parser.XOR_ASSIGN, 0); };
    AssignmentOperatorContext.prototype.OR_ASSIGN = function () { return this.tryGetToken(Java8Parser.OR_ASSIGN, 0); };
    Object.defineProperty(AssignmentOperatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_assignmentOperator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AssignmentOperatorContext.prototype.enterRule = function (listener) {
        if (listener.enterAssignmentOperator) {
            listener.enterAssignmentOperator(this);
        }
    };
    // @Override
    AssignmentOperatorContext.prototype.exitRule = function (listener) {
        if (listener.exitAssignmentOperator) {
            listener.exitAssignmentOperator(this);
        }
    };
    // @Override
    AssignmentOperatorContext.prototype.accept = function (visitor) {
        if (visitor.visitAssignmentOperator) {
            return visitor.visitAssignmentOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AssignmentOperatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AssignmentOperatorContext = AssignmentOperatorContext;
var ConditionalExpressionContext = /** @class */ (function (_super) {
    __extends(ConditionalExpressionContext, _super);
    function ConditionalExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConditionalExpressionContext.prototype.conditionalOrExpression = function () {
        return this.getRuleContext(0, ConditionalOrExpressionContext);
    };
    ConditionalExpressionContext.prototype.QUESTION = function () { return this.tryGetToken(Java8Parser.QUESTION, 0); };
    ConditionalExpressionContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    ConditionalExpressionContext.prototype.COLON = function () { return this.tryGetToken(Java8Parser.COLON, 0); };
    ConditionalExpressionContext.prototype.conditionalExpression = function () {
        return this.tryGetRuleContext(0, ConditionalExpressionContext);
    };
    Object.defineProperty(ConditionalExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_conditionalExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConditionalExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterConditionalExpression) {
            listener.enterConditionalExpression(this);
        }
    };
    // @Override
    ConditionalExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitConditionalExpression) {
            listener.exitConditionalExpression(this);
        }
    };
    // @Override
    ConditionalExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitConditionalExpression) {
            return visitor.visitConditionalExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConditionalExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConditionalExpressionContext = ConditionalExpressionContext;
var ConditionalOrExpressionContext = /** @class */ (function (_super) {
    __extends(ConditionalOrExpressionContext, _super);
    function ConditionalOrExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConditionalOrExpressionContext.prototype.conditionalAndExpression = function () {
        return this.getRuleContext(0, ConditionalAndExpressionContext);
    };
    ConditionalOrExpressionContext.prototype.conditionalOrExpression = function () {
        return this.tryGetRuleContext(0, ConditionalOrExpressionContext);
    };
    ConditionalOrExpressionContext.prototype.OR = function () { return this.tryGetToken(Java8Parser.OR, 0); };
    Object.defineProperty(ConditionalOrExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_conditionalOrExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConditionalOrExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterConditionalOrExpression) {
            listener.enterConditionalOrExpression(this);
        }
    };
    // @Override
    ConditionalOrExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitConditionalOrExpression) {
            listener.exitConditionalOrExpression(this);
        }
    };
    // @Override
    ConditionalOrExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitConditionalOrExpression) {
            return visitor.visitConditionalOrExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConditionalOrExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConditionalOrExpressionContext = ConditionalOrExpressionContext;
var ConditionalAndExpressionContext = /** @class */ (function (_super) {
    __extends(ConditionalAndExpressionContext, _super);
    function ConditionalAndExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConditionalAndExpressionContext.prototype.inclusiveOrExpression = function () {
        return this.getRuleContext(0, InclusiveOrExpressionContext);
    };
    ConditionalAndExpressionContext.prototype.conditionalAndExpression = function () {
        return this.tryGetRuleContext(0, ConditionalAndExpressionContext);
    };
    ConditionalAndExpressionContext.prototype.AND = function () { return this.tryGetToken(Java8Parser.AND, 0); };
    Object.defineProperty(ConditionalAndExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_conditionalAndExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConditionalAndExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterConditionalAndExpression) {
            listener.enterConditionalAndExpression(this);
        }
    };
    // @Override
    ConditionalAndExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitConditionalAndExpression) {
            listener.exitConditionalAndExpression(this);
        }
    };
    // @Override
    ConditionalAndExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitConditionalAndExpression) {
            return visitor.visitConditionalAndExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConditionalAndExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConditionalAndExpressionContext = ConditionalAndExpressionContext;
var InclusiveOrExpressionContext = /** @class */ (function (_super) {
    __extends(InclusiveOrExpressionContext, _super);
    function InclusiveOrExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InclusiveOrExpressionContext.prototype.exclusiveOrExpression = function () {
        return this.getRuleContext(0, ExclusiveOrExpressionContext);
    };
    InclusiveOrExpressionContext.prototype.inclusiveOrExpression = function () {
        return this.tryGetRuleContext(0, InclusiveOrExpressionContext);
    };
    InclusiveOrExpressionContext.prototype.BITOR = function () { return this.tryGetToken(Java8Parser.BITOR, 0); };
    Object.defineProperty(InclusiveOrExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_inclusiveOrExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InclusiveOrExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterInclusiveOrExpression) {
            listener.enterInclusiveOrExpression(this);
        }
    };
    // @Override
    InclusiveOrExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitInclusiveOrExpression) {
            listener.exitInclusiveOrExpression(this);
        }
    };
    // @Override
    InclusiveOrExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitInclusiveOrExpression) {
            return visitor.visitInclusiveOrExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InclusiveOrExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InclusiveOrExpressionContext = InclusiveOrExpressionContext;
var ExclusiveOrExpressionContext = /** @class */ (function (_super) {
    __extends(ExclusiveOrExpressionContext, _super);
    function ExclusiveOrExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExclusiveOrExpressionContext.prototype.andExpression = function () {
        return this.getRuleContext(0, AndExpressionContext);
    };
    ExclusiveOrExpressionContext.prototype.exclusiveOrExpression = function () {
        return this.tryGetRuleContext(0, ExclusiveOrExpressionContext);
    };
    ExclusiveOrExpressionContext.prototype.CARET = function () { return this.tryGetToken(Java8Parser.CARET, 0); };
    Object.defineProperty(ExclusiveOrExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_exclusiveOrExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExclusiveOrExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterExclusiveOrExpression) {
            listener.enterExclusiveOrExpression(this);
        }
    };
    // @Override
    ExclusiveOrExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitExclusiveOrExpression) {
            listener.exitExclusiveOrExpression(this);
        }
    };
    // @Override
    ExclusiveOrExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitExclusiveOrExpression) {
            return visitor.visitExclusiveOrExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExclusiveOrExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext;
var AndExpressionContext = /** @class */ (function (_super) {
    __extends(AndExpressionContext, _super);
    function AndExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AndExpressionContext.prototype.equalityExpression = function () {
        return this.getRuleContext(0, EqualityExpressionContext);
    };
    AndExpressionContext.prototype.andExpression = function () {
        return this.tryGetRuleContext(0, AndExpressionContext);
    };
    AndExpressionContext.prototype.BITAND = function () { return this.tryGetToken(Java8Parser.BITAND, 0); };
    Object.defineProperty(AndExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_andExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AndExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterAndExpression) {
            listener.enterAndExpression(this);
        }
    };
    // @Override
    AndExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitAndExpression) {
            listener.exitAndExpression(this);
        }
    };
    // @Override
    AndExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitAndExpression) {
            return visitor.visitAndExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AndExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AndExpressionContext = AndExpressionContext;
var EqualityExpressionContext = /** @class */ (function (_super) {
    __extends(EqualityExpressionContext, _super);
    function EqualityExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EqualityExpressionContext.prototype.relationalExpression = function () {
        return this.getRuleContext(0, RelationalExpressionContext);
    };
    EqualityExpressionContext.prototype.equalityExpression = function () {
        return this.tryGetRuleContext(0, EqualityExpressionContext);
    };
    EqualityExpressionContext.prototype.EQUAL = function () { return this.tryGetToken(Java8Parser.EQUAL, 0); };
    EqualityExpressionContext.prototype.NOTEQUAL = function () { return this.tryGetToken(Java8Parser.NOTEQUAL, 0); };
    Object.defineProperty(EqualityExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_equalityExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EqualityExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterEqualityExpression) {
            listener.enterEqualityExpression(this);
        }
    };
    // @Override
    EqualityExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitEqualityExpression) {
            listener.exitEqualityExpression(this);
        }
    };
    // @Override
    EqualityExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitEqualityExpression) {
            return visitor.visitEqualityExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EqualityExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EqualityExpressionContext = EqualityExpressionContext;
var RelationalExpressionContext = /** @class */ (function (_super) {
    __extends(RelationalExpressionContext, _super);
    function RelationalExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RelationalExpressionContext.prototype.shiftExpression = function () {
        return this.tryGetRuleContext(0, ShiftExpressionContext);
    };
    RelationalExpressionContext.prototype.relationalExpression = function () {
        return this.tryGetRuleContext(0, RelationalExpressionContext);
    };
    RelationalExpressionContext.prototype.LT = function () { return this.tryGetToken(Java8Parser.LT, 0); };
    RelationalExpressionContext.prototype.GT = function () { return this.tryGetToken(Java8Parser.GT, 0); };
    RelationalExpressionContext.prototype.LE = function () { return this.tryGetToken(Java8Parser.LE, 0); };
    RelationalExpressionContext.prototype.GE = function () { return this.tryGetToken(Java8Parser.GE, 0); };
    RelationalExpressionContext.prototype.INSTANCEOF = function () { return this.tryGetToken(Java8Parser.INSTANCEOF, 0); };
    RelationalExpressionContext.prototype.referenceType = function () {
        return this.tryGetRuleContext(0, ReferenceTypeContext);
    };
    Object.defineProperty(RelationalExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_relationalExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RelationalExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterRelationalExpression) {
            listener.enterRelationalExpression(this);
        }
    };
    // @Override
    RelationalExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitRelationalExpression) {
            listener.exitRelationalExpression(this);
        }
    };
    // @Override
    RelationalExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitRelationalExpression) {
            return visitor.visitRelationalExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RelationalExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RelationalExpressionContext = RelationalExpressionContext;
var ShiftExpressionContext = /** @class */ (function (_super) {
    __extends(ShiftExpressionContext, _super);
    function ShiftExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ShiftExpressionContext.prototype.additiveExpression = function () {
        return this.getRuleContext(0, AdditiveExpressionContext);
    };
    ShiftExpressionContext.prototype.shiftExpression = function () {
        return this.tryGetRuleContext(0, ShiftExpressionContext);
    };
    ShiftExpressionContext.prototype.LT = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.LT);
        }
        else {
            return this.getToken(Java8Parser.LT, i);
        }
    };
    ShiftExpressionContext.prototype.GT = function (i) {
        if (i === undefined) {
            return this.getTokens(Java8Parser.GT);
        }
        else {
            return this.getToken(Java8Parser.GT, i);
        }
    };
    Object.defineProperty(ShiftExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_shiftExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ShiftExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterShiftExpression) {
            listener.enterShiftExpression(this);
        }
    };
    // @Override
    ShiftExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitShiftExpression) {
            listener.exitShiftExpression(this);
        }
    };
    // @Override
    ShiftExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitShiftExpression) {
            return visitor.visitShiftExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ShiftExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ShiftExpressionContext = ShiftExpressionContext;
var AdditiveExpressionContext = /** @class */ (function (_super) {
    __extends(AdditiveExpressionContext, _super);
    function AdditiveExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AdditiveExpressionContext.prototype.multiplicativeExpression = function () {
        return this.getRuleContext(0, MultiplicativeExpressionContext);
    };
    AdditiveExpressionContext.prototype.additiveExpression = function () {
        return this.tryGetRuleContext(0, AdditiveExpressionContext);
    };
    AdditiveExpressionContext.prototype.ADD = function () { return this.tryGetToken(Java8Parser.ADD, 0); };
    AdditiveExpressionContext.prototype.SUB = function () { return this.tryGetToken(Java8Parser.SUB, 0); };
    Object.defineProperty(AdditiveExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_additiveExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AdditiveExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterAdditiveExpression) {
            listener.enterAdditiveExpression(this);
        }
    };
    // @Override
    AdditiveExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitAdditiveExpression) {
            listener.exitAdditiveExpression(this);
        }
    };
    // @Override
    AdditiveExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitAdditiveExpression) {
            return visitor.visitAdditiveExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AdditiveExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AdditiveExpressionContext = AdditiveExpressionContext;
var MultiplicativeExpressionContext = /** @class */ (function (_super) {
    __extends(MultiplicativeExpressionContext, _super);
    function MultiplicativeExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultiplicativeExpressionContext.prototype.unaryExpression = function () {
        return this.getRuleContext(0, UnaryExpressionContext);
    };
    MultiplicativeExpressionContext.prototype.multiplicativeExpression = function () {
        return this.tryGetRuleContext(0, MultiplicativeExpressionContext);
    };
    MultiplicativeExpressionContext.prototype.MUL = function () { return this.tryGetToken(Java8Parser.MUL, 0); };
    MultiplicativeExpressionContext.prototype.DIV = function () { return this.tryGetToken(Java8Parser.DIV, 0); };
    MultiplicativeExpressionContext.prototype.MOD = function () { return this.tryGetToken(Java8Parser.MOD, 0); };
    Object.defineProperty(MultiplicativeExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_multiplicativeExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MultiplicativeExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterMultiplicativeExpression) {
            listener.enterMultiplicativeExpression(this);
        }
    };
    // @Override
    MultiplicativeExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitMultiplicativeExpression) {
            listener.exitMultiplicativeExpression(this);
        }
    };
    // @Override
    MultiplicativeExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitMultiplicativeExpression) {
            return visitor.visitMultiplicativeExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MultiplicativeExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultiplicativeExpressionContext = MultiplicativeExpressionContext;
var UnaryExpressionContext = /** @class */ (function (_super) {
    __extends(UnaryExpressionContext, _super);
    function UnaryExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnaryExpressionContext.prototype.preIncrementExpression = function () {
        return this.tryGetRuleContext(0, PreIncrementExpressionContext);
    };
    UnaryExpressionContext.prototype.preDecrementExpression = function () {
        return this.tryGetRuleContext(0, PreDecrementExpressionContext);
    };
    UnaryExpressionContext.prototype.ADD = function () { return this.tryGetToken(Java8Parser.ADD, 0); };
    UnaryExpressionContext.prototype.unaryExpression = function () {
        return this.tryGetRuleContext(0, UnaryExpressionContext);
    };
    UnaryExpressionContext.prototype.SUB = function () { return this.tryGetToken(Java8Parser.SUB, 0); };
    UnaryExpressionContext.prototype.unaryExpressionNotPlusMinus = function () {
        return this.tryGetRuleContext(0, UnaryExpressionNotPlusMinusContext);
    };
    Object.defineProperty(UnaryExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unaryExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnaryExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterUnaryExpression) {
            listener.enterUnaryExpression(this);
        }
    };
    // @Override
    UnaryExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitUnaryExpression) {
            listener.exitUnaryExpression(this);
        }
    };
    // @Override
    UnaryExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitUnaryExpression) {
            return visitor.visitUnaryExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnaryExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnaryExpressionContext = UnaryExpressionContext;
var PreIncrementExpressionContext = /** @class */ (function (_super) {
    __extends(PreIncrementExpressionContext, _super);
    function PreIncrementExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PreIncrementExpressionContext.prototype.INC = function () { return this.getToken(Java8Parser.INC, 0); };
    PreIncrementExpressionContext.prototype.unaryExpression = function () {
        return this.getRuleContext(0, UnaryExpressionContext);
    };
    Object.defineProperty(PreIncrementExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_preIncrementExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PreIncrementExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterPreIncrementExpression) {
            listener.enterPreIncrementExpression(this);
        }
    };
    // @Override
    PreIncrementExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitPreIncrementExpression) {
            listener.exitPreIncrementExpression(this);
        }
    };
    // @Override
    PreIncrementExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitPreIncrementExpression) {
            return visitor.visitPreIncrementExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PreIncrementExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PreIncrementExpressionContext = PreIncrementExpressionContext;
var PreDecrementExpressionContext = /** @class */ (function (_super) {
    __extends(PreDecrementExpressionContext, _super);
    function PreDecrementExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PreDecrementExpressionContext.prototype.DEC = function () { return this.getToken(Java8Parser.DEC, 0); };
    PreDecrementExpressionContext.prototype.unaryExpression = function () {
        return this.getRuleContext(0, UnaryExpressionContext);
    };
    Object.defineProperty(PreDecrementExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_preDecrementExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PreDecrementExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterPreDecrementExpression) {
            listener.enterPreDecrementExpression(this);
        }
    };
    // @Override
    PreDecrementExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitPreDecrementExpression) {
            listener.exitPreDecrementExpression(this);
        }
    };
    // @Override
    PreDecrementExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitPreDecrementExpression) {
            return visitor.visitPreDecrementExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PreDecrementExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PreDecrementExpressionContext = PreDecrementExpressionContext;
var UnaryExpressionNotPlusMinusContext = /** @class */ (function (_super) {
    __extends(UnaryExpressionNotPlusMinusContext, _super);
    function UnaryExpressionNotPlusMinusContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnaryExpressionNotPlusMinusContext.prototype.postfixExpression = function () {
        return this.tryGetRuleContext(0, PostfixExpressionContext);
    };
    UnaryExpressionNotPlusMinusContext.prototype.TILDE = function () { return this.tryGetToken(Java8Parser.TILDE, 0); };
    UnaryExpressionNotPlusMinusContext.prototype.unaryExpression = function () {
        return this.tryGetRuleContext(0, UnaryExpressionContext);
    };
    UnaryExpressionNotPlusMinusContext.prototype.BANG = function () { return this.tryGetToken(Java8Parser.BANG, 0); };
    UnaryExpressionNotPlusMinusContext.prototype.castExpression = function () {
        return this.tryGetRuleContext(0, CastExpressionContext);
    };
    Object.defineProperty(UnaryExpressionNotPlusMinusContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_unaryExpressionNotPlusMinus; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnaryExpressionNotPlusMinusContext.prototype.enterRule = function (listener) {
        if (listener.enterUnaryExpressionNotPlusMinus) {
            listener.enterUnaryExpressionNotPlusMinus(this);
        }
    };
    // @Override
    UnaryExpressionNotPlusMinusContext.prototype.exitRule = function (listener) {
        if (listener.exitUnaryExpressionNotPlusMinus) {
            listener.exitUnaryExpressionNotPlusMinus(this);
        }
    };
    // @Override
    UnaryExpressionNotPlusMinusContext.prototype.accept = function (visitor) {
        if (visitor.visitUnaryExpressionNotPlusMinus) {
            return visitor.visitUnaryExpressionNotPlusMinus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnaryExpressionNotPlusMinusContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext;
var PostfixExpressionContext = /** @class */ (function (_super) {
    __extends(PostfixExpressionContext, _super);
    function PostfixExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PostfixExpressionContext.prototype.primary = function () {
        return this.tryGetRuleContext(0, PrimaryContext);
    };
    PostfixExpressionContext.prototype.expressionName = function () {
        return this.tryGetRuleContext(0, ExpressionNameContext);
    };
    PostfixExpressionContext.prototype.postIncrementExpression_lf_postfixExpression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PostIncrementExpression_lf_postfixExpressionContext);
        }
        else {
            return this.getRuleContext(i, PostIncrementExpression_lf_postfixExpressionContext);
        }
    };
    PostfixExpressionContext.prototype.postDecrementExpression_lf_postfixExpression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PostDecrementExpression_lf_postfixExpressionContext);
        }
        else {
            return this.getRuleContext(i, PostDecrementExpression_lf_postfixExpressionContext);
        }
    };
    Object.defineProperty(PostfixExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_postfixExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PostfixExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterPostfixExpression) {
            listener.enterPostfixExpression(this);
        }
    };
    // @Override
    PostfixExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitPostfixExpression) {
            listener.exitPostfixExpression(this);
        }
    };
    // @Override
    PostfixExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitPostfixExpression) {
            return visitor.visitPostfixExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PostfixExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PostfixExpressionContext = PostfixExpressionContext;
var PostIncrementExpressionContext = /** @class */ (function (_super) {
    __extends(PostIncrementExpressionContext, _super);
    function PostIncrementExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PostIncrementExpressionContext.prototype.postfixExpression = function () {
        return this.getRuleContext(0, PostfixExpressionContext);
    };
    PostIncrementExpressionContext.prototype.INC = function () { return this.getToken(Java8Parser.INC, 0); };
    Object.defineProperty(PostIncrementExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_postIncrementExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PostIncrementExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterPostIncrementExpression) {
            listener.enterPostIncrementExpression(this);
        }
    };
    // @Override
    PostIncrementExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitPostIncrementExpression) {
            listener.exitPostIncrementExpression(this);
        }
    };
    // @Override
    PostIncrementExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitPostIncrementExpression) {
            return visitor.visitPostIncrementExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PostIncrementExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PostIncrementExpressionContext = PostIncrementExpressionContext;
var PostIncrementExpression_lf_postfixExpressionContext = /** @class */ (function (_super) {
    __extends(PostIncrementExpression_lf_postfixExpressionContext, _super);
    function PostIncrementExpression_lf_postfixExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PostIncrementExpression_lf_postfixExpressionContext.prototype.INC = function () { return this.getToken(Java8Parser.INC, 0); };
    Object.defineProperty(PostIncrementExpression_lf_postfixExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_postIncrementExpression_lf_postfixExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PostIncrementExpression_lf_postfixExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterPostIncrementExpression_lf_postfixExpression) {
            listener.enterPostIncrementExpression_lf_postfixExpression(this);
        }
    };
    // @Override
    PostIncrementExpression_lf_postfixExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitPostIncrementExpression_lf_postfixExpression) {
            listener.exitPostIncrementExpression_lf_postfixExpression(this);
        }
    };
    // @Override
    PostIncrementExpression_lf_postfixExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitPostIncrementExpression_lf_postfixExpression) {
            return visitor.visitPostIncrementExpression_lf_postfixExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PostIncrementExpression_lf_postfixExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PostIncrementExpression_lf_postfixExpressionContext = PostIncrementExpression_lf_postfixExpressionContext;
var PostDecrementExpressionContext = /** @class */ (function (_super) {
    __extends(PostDecrementExpressionContext, _super);
    function PostDecrementExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PostDecrementExpressionContext.prototype.postfixExpression = function () {
        return this.getRuleContext(0, PostfixExpressionContext);
    };
    PostDecrementExpressionContext.prototype.DEC = function () { return this.getToken(Java8Parser.DEC, 0); };
    Object.defineProperty(PostDecrementExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_postDecrementExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PostDecrementExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterPostDecrementExpression) {
            listener.enterPostDecrementExpression(this);
        }
    };
    // @Override
    PostDecrementExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitPostDecrementExpression) {
            listener.exitPostDecrementExpression(this);
        }
    };
    // @Override
    PostDecrementExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitPostDecrementExpression) {
            return visitor.visitPostDecrementExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PostDecrementExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PostDecrementExpressionContext = PostDecrementExpressionContext;
var PostDecrementExpression_lf_postfixExpressionContext = /** @class */ (function (_super) {
    __extends(PostDecrementExpression_lf_postfixExpressionContext, _super);
    function PostDecrementExpression_lf_postfixExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PostDecrementExpression_lf_postfixExpressionContext.prototype.DEC = function () { return this.getToken(Java8Parser.DEC, 0); };
    Object.defineProperty(PostDecrementExpression_lf_postfixExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_postDecrementExpression_lf_postfixExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PostDecrementExpression_lf_postfixExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterPostDecrementExpression_lf_postfixExpression) {
            listener.enterPostDecrementExpression_lf_postfixExpression(this);
        }
    };
    // @Override
    PostDecrementExpression_lf_postfixExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitPostDecrementExpression_lf_postfixExpression) {
            listener.exitPostDecrementExpression_lf_postfixExpression(this);
        }
    };
    // @Override
    PostDecrementExpression_lf_postfixExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitPostDecrementExpression_lf_postfixExpression) {
            return visitor.visitPostDecrementExpression_lf_postfixExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PostDecrementExpression_lf_postfixExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PostDecrementExpression_lf_postfixExpressionContext = PostDecrementExpression_lf_postfixExpressionContext;
var CastExpressionContext = /** @class */ (function (_super) {
    __extends(CastExpressionContext, _super);
    function CastExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CastExpressionContext.prototype.LPAREN = function () { return this.getToken(Java8Parser.LPAREN, 0); };
    CastExpressionContext.prototype.primitiveType = function () {
        return this.tryGetRuleContext(0, PrimitiveTypeContext);
    };
    CastExpressionContext.prototype.RPAREN = function () { return this.getToken(Java8Parser.RPAREN, 0); };
    CastExpressionContext.prototype.unaryExpression = function () {
        return this.tryGetRuleContext(0, UnaryExpressionContext);
    };
    CastExpressionContext.prototype.referenceType = function () {
        return this.tryGetRuleContext(0, ReferenceTypeContext);
    };
    CastExpressionContext.prototype.unaryExpressionNotPlusMinus = function () {
        return this.tryGetRuleContext(0, UnaryExpressionNotPlusMinusContext);
    };
    CastExpressionContext.prototype.additionalBound = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AdditionalBoundContext);
        }
        else {
            return this.getRuleContext(i, AdditionalBoundContext);
        }
    };
    CastExpressionContext.prototype.lambdaExpression = function () {
        return this.tryGetRuleContext(0, LambdaExpressionContext);
    };
    Object.defineProperty(CastExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Java8Parser.RULE_castExpression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CastExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterCastExpression) {
            listener.enterCastExpression(this);
        }
    };
    // @Override
    CastExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitCastExpression) {
            listener.exitCastExpression(this);
        }
    };
    // @Override
    CastExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitCastExpression) {
            return visitor.visitCastExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CastExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CastExpressionContext = CastExpressionContext;
