"use strict";
// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/vba/vba.g4 by ANTLR 4.7.3-SNAPSHOT
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ATN_1 = require("antlr4ts/atn/ATN");
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var FailedPredicateException_1 = require("antlr4ts/FailedPredicateException");
var NoViableAltException_1 = require("antlr4ts/NoViableAltException");
var Parser_1 = require("antlr4ts/Parser");
var ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
var ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
var RecognitionException_1 = require("antlr4ts/RecognitionException");
var Token_1 = require("antlr4ts/Token");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var vbaParser = /** @class */ (function (_super) {
    __extends(vbaParser, _super);
    function vbaParser(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new ParserATNSimulator_1.ParserATNSimulator(vbaParser._ATN, _this);
        return _this;
    }
    Object.defineProperty(vbaParser.prototype, "vocabulary", {
        // @Override
        // @NotNull
        get: function () {
            return vbaParser.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(vbaParser.prototype, "grammarFileName", {
        // tslint:enable:no-trailing-whitespace
        // @Override
        get: function () { return "vba.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(vbaParser.prototype, "ruleNames", {
        // @Override
        get: function () { return vbaParser.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(vbaParser.prototype, "serializedATN", {
        // @Override
        get: function () { return vbaParser._serializedATN; },
        enumerable: true,
        configurable: true
    });
    // @RuleVersion(0)
    vbaParser.prototype.startRule = function () {
        var _localctx = new StartRuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, vbaParser.RULE_startRule);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 294;
                this.module();
                this.state = 295;
                this.match(vbaParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.module = function () {
        var _localctx = new ModuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, vbaParser.RULE_module);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 298;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 0, this._ctx)) {
                    case 1:
                        {
                            this.state = 297;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 303;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 300;
                                this.endOfLine();
                            }
                        }
                    }
                    this.state = 305;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1, this._ctx);
                }
                this.state = 313;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.VERSION) {
                    {
                        this.state = 306;
                        this.moduleHeader();
                        this.state = 310;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 307;
                                        this.endOfLine();
                                    }
                                }
                            }
                            this.state = 312;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);
                        }
                    }
                }
                this.state = 316;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.BEGIN) {
                    {
                        this.state = 315;
                        this.moduleConfig();
                    }
                }
                this.state = 321;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 318;
                                this.endOfLine();
                            }
                        }
                    }
                    this.state = 323;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
                }
                this.state = 325;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.ATTRIBUTE) {
                    {
                        this.state = 324;
                        this.moduleAttributes();
                    }
                }
                this.state = 330;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 327;
                                this.endOfLine();
                            }
                        }
                    }
                    this.state = 332;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                }
                this.state = 334;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 8, this._ctx)) {
                    case 1:
                        {
                            this.state = 333;
                            this.moduleDeclarations();
                        }
                        break;
                }
                this.state = 339;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 9, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 336;
                                this.endOfLine();
                            }
                        }
                    }
                    this.state = 341;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 9, this._ctx);
                }
                this.state = 343;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.FUNCTION - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.MACRO_CONST - 75)) | (1 << (vbaParser.MACRO_IF - 75)))) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & ((1 << (vbaParser.PRIVATE - 132)) | (1 << (vbaParser.PROPERTY_GET - 132)) | (1 << (vbaParser.PROPERTY_LET - 132)) | (1 << (vbaParser.PROPERTY_SET - 132)) | (1 << (vbaParser.PUBLIC - 132)) | (1 << (vbaParser.STATIC - 132)))) !== 0) || _la === vbaParser.SUB) {
                    {
                        this.state = 342;
                        this.moduleBody();
                    }
                }
                this.state = 348;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 11, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 345;
                                this.endOfLine();
                            }
                        }
                    }
                    this.state = 350;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 11, this._ctx);
                }
                this.state = 352;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 351;
                        this.match(vbaParser.WS);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.moduleHeader = function () {
        var _localctx = new ModuleHeaderContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, vbaParser.RULE_moduleHeader);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 354;
                this.match(vbaParser.VERSION);
                this.state = 355;
                this.match(vbaParser.WS);
                this.state = 356;
                this.match(vbaParser.DOUBLELITERAL);
                this.state = 357;
                this.match(vbaParser.WS);
                this.state = 358;
                this.match(vbaParser.CLASS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.moduleConfig = function () {
        var _localctx = new ModuleConfigContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, vbaParser.RULE_moduleConfig);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 360;
                this.match(vbaParser.BEGIN);
                this.state = 364;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (vbaParser.NEWLINE - 213)) | (1 << (vbaParser.REMCOMMENT - 213)) | (1 << (vbaParser.COMMENT - 213)) | (1 << (vbaParser.WS - 213)))) !== 0)) {
                    {
                        {
                            this.state = 361;
                            this.endOfLine();
                        }
                    }
                    this.state = 366;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 368;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 367;
                                    this.moduleConfigElement();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 370;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 372;
                this.match(vbaParser.END);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.moduleConfigElement = function () {
        var _localctx = new ModuleConfigElementContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, vbaParser.RULE_moduleConfigElement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 374;
                this.ambiguousIdentifier();
                this.state = 376;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 375;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 378;
                this.match(vbaParser.EQ);
                this.state = 380;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 379;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 382;
                this.literal();
                this.state = 386;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (vbaParser.NEWLINE - 213)) | (1 << (vbaParser.REMCOMMENT - 213)) | (1 << (vbaParser.COMMENT - 213)) | (1 << (vbaParser.WS - 213)))) !== 0)) {
                    {
                        {
                            this.state = 383;
                            this.endOfLine();
                        }
                    }
                    this.state = 388;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.moduleAttributes = function () {
        var _localctx = new ModuleAttributesContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, vbaParser.RULE_moduleAttributes);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 395;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 389;
                            this.attributeStmt();
                            this.state = 391;
                            this._errHandler.sync(this);
                            _alt = 1;
                            do {
                                switch (_alt) {
                                    case 1:
                                        {
                                            {
                                                this.state = 390;
                                                this.endOfLine();
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                                this.state = 393;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 18, this._ctx);
                            } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        }
                    }
                    this.state = 397;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === vbaParser.ATTRIBUTE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.moduleDeclarations = function () {
        var _localctx = new ModuleDeclarationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, vbaParser.RULE_moduleDeclarations);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 399;
                this.moduleDeclarationsElement();
                this.state = 409;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 401;
                                this._errHandler.sync(this);
                                _alt = 1;
                                do {
                                    switch (_alt) {
                                        case 1:
                                            {
                                                {
                                                    this.state = 400;
                                                    this.endOfLine();
                                                }
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                    this.state = 403;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
                                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                                this.state = 405;
                                this.moduleDeclarationsElement();
                            }
                        }
                    }
                    this.state = 411;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
                }
                this.state = 415;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 412;
                                this.endOfLine();
                            }
                        }
                    }
                    this.state = 417;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.moduleOption = function () {
        var _localctx = new ModuleOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, vbaParser.RULE_moduleOption);
        var _la;
        try {
            this.state = 426;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbaParser.OPTION_BASE:
                    _localctx = new OptionBaseStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 418;
                        this.match(vbaParser.OPTION_BASE);
                        this.state = 419;
                        this.match(vbaParser.WS);
                        this.state = 420;
                        this.match(vbaParser.SHORTLITERAL);
                    }
                    break;
                case vbaParser.OPTION_COMPARE:
                    _localctx = new OptionCompareStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 421;
                        this.match(vbaParser.OPTION_COMPARE);
                        this.state = 422;
                        this.match(vbaParser.WS);
                        this.state = 423;
                        _la = this._input.LA(1);
                        if (!(_la === vbaParser.BINARY || _la === vbaParser.DATABASE || _la === vbaParser.TEXT)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case vbaParser.OPTION_EXPLICIT:
                    _localctx = new OptionExplicitStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 424;
                        this.match(vbaParser.OPTION_EXPLICIT);
                    }
                    break;
                case vbaParser.OPTION_PRIVATE_MODULE:
                    _localctx = new OptionPrivateModuleStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 425;
                        this.match(vbaParser.OPTION_PRIVATE_MODULE);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.moduleDeclarationsElement = function () {
        var _localctx = new ModuleDeclarationsElementContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, vbaParser.RULE_moduleDeclarationsElement);
        try {
            this.state = 438;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 24, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 428;
                        this.comment();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 429;
                        this.declareStmt();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 430;
                        this.enumerationStmt();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 431;
                        this.eventStmt();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 432;
                        this.constStmt();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 433;
                        this.implementsStmt();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 434;
                        this.variableStmt();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 435;
                        this.moduleOption();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 436;
                        this.typeStmt();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 437;
                        this.macroStmt();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.macroStmt = function () {
        var _localctx = new MacroStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, vbaParser.RULE_macroStmt);
        try {
            this.state = 442;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbaParser.MACRO_CONST:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 440;
                        this.macroConstStmt();
                    }
                    break;
                case vbaParser.MACRO_IF:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 441;
                        this.macroIfThenElseStmt();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.moduleBody = function () {
        var _localctx = new ModuleBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, vbaParser.RULE_moduleBody);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 444;
                this.moduleBodyElement();
                this.state = 454;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 446;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                do {
                                    {
                                        {
                                            this.state = 445;
                                            this.endOfLine();
                                        }
                                    }
                                    this.state = 448;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                } while (((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (vbaParser.NEWLINE - 213)) | (1 << (vbaParser.REMCOMMENT - 213)) | (1 << (vbaParser.COMMENT - 213)) | (1 << (vbaParser.WS - 213)))) !== 0));
                                this.state = 450;
                                this.moduleBodyElement();
                            }
                        }
                    }
                    this.state = 456;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
                }
                this.state = 460;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 28, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 457;
                                this.endOfLine();
                            }
                        }
                    }
                    this.state = 462;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 28, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.moduleBodyElement = function () {
        var _localctx = new ModuleBodyElementContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, vbaParser.RULE_moduleBodyElement);
        try {
            this.state = 469;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 29, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 463;
                        this.functionStmt();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 464;
                        this.propertyGetStmt();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 465;
                        this.propertySetStmt();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 466;
                        this.propertyLetStmt();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 467;
                        this.subStmt();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 468;
                        this.macroStmt();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.attributeStmt = function () {
        var _localctx = new AttributeStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, vbaParser.RULE_attributeStmt);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 471;
                this.match(vbaParser.ATTRIBUTE);
                this.state = 472;
                this.match(vbaParser.WS);
                this.state = 473;
                this.implicitCallStmt_InStmt();
                this.state = 475;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 474;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 477;
                this.match(vbaParser.EQ);
                this.state = 479;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 478;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 481;
                this.literal();
                this.state = 492;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 483;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 482;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 485;
                                this.match(vbaParser.T__0);
                                this.state = 487;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 486;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 489;
                                this.literal();
                            }
                        }
                    }
                    this.state = 494;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.block = function () {
        var _localctx = new BlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, vbaParser.RULE_block);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 495;
                this.blockStmt();
                this.state = 501;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 496;
                                this.endOfStatement();
                                this.state = 497;
                                this.blockStmt();
                            }
                        }
                    }
                    this.state = 503;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
                }
                this.state = 504;
                this.endOfStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.blockStmt = function () {
        var _localctx = new BlockStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, vbaParser.RULE_blockStmt);
        try {
            this.state = 573;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 36, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 506;
                        this.lineLabel();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 507;
                        this.appactivateStmt();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 508;
                        this.attributeStmt();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 509;
                        this.beepStmt();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 510;
                        this.chdirStmt();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 511;
                        this.chdriveStmt();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 512;
                        this.closeStmt();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 513;
                        this.constStmt();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 514;
                        this.dateStmt();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 515;
                        this.deleteSettingStmt();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 516;
                        this.deftypeStmt();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 517;
                        this.doLoopStmt();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 518;
                        this.endStmt();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 519;
                        this.eraseStmt();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 520;
                        this.errorStmt();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 521;
                        this.exitStmt();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 522;
                        this.explicitCallStmt();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 523;
                        this.filecopyStmt();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 524;
                        this.forEachStmt();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 525;
                        this.forNextStmt();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 526;
                        this.getStmt();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 527;
                        this.goSubStmt();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 528;
                        this.goToStmt();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 529;
                        this.ifThenElseStmt();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 530;
                        this.implementsStmt();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 531;
                        this.inputStmt();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 532;
                        this.killStmt();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 533;
                        this.letStmt();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 534;
                        this.lineInputStmt();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 535;
                        this.loadStmt();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(_localctx, 31);
                    {
                        this.state = 536;
                        this.lockStmt();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(_localctx, 32);
                    {
                        this.state = 537;
                        this.lsetStmt();
                    }
                    break;
                case 33:
                    this.enterOuterAlt(_localctx, 33);
                    {
                        this.state = 538;
                        this.macroStmt();
                    }
                    break;
                case 34:
                    this.enterOuterAlt(_localctx, 34);
                    {
                        this.state = 539;
                        this.midStmt();
                    }
                    break;
                case 35:
                    this.enterOuterAlt(_localctx, 35);
                    {
                        this.state = 540;
                        this.mkdirStmt();
                    }
                    break;
                case 36:
                    this.enterOuterAlt(_localctx, 36);
                    {
                        this.state = 541;
                        this.nameStmt();
                    }
                    break;
                case 37:
                    this.enterOuterAlt(_localctx, 37);
                    {
                        this.state = 542;
                        this.onErrorStmt();
                    }
                    break;
                case 38:
                    this.enterOuterAlt(_localctx, 38);
                    {
                        this.state = 543;
                        this.onGoToStmt();
                    }
                    break;
                case 39:
                    this.enterOuterAlt(_localctx, 39);
                    {
                        this.state = 544;
                        this.onGoSubStmt();
                    }
                    break;
                case 40:
                    this.enterOuterAlt(_localctx, 40);
                    {
                        this.state = 545;
                        this.openStmt();
                    }
                    break;
                case 41:
                    this.enterOuterAlt(_localctx, 41);
                    {
                        this.state = 546;
                        this.printStmt();
                    }
                    break;
                case 42:
                    this.enterOuterAlt(_localctx, 42);
                    {
                        this.state = 547;
                        this.putStmt();
                    }
                    break;
                case 43:
                    this.enterOuterAlt(_localctx, 43);
                    {
                        this.state = 548;
                        this.raiseEventStmt();
                    }
                    break;
                case 44:
                    this.enterOuterAlt(_localctx, 44);
                    {
                        this.state = 549;
                        this.randomizeStmt();
                    }
                    break;
                case 45:
                    this.enterOuterAlt(_localctx, 45);
                    {
                        this.state = 550;
                        this.redimStmt();
                    }
                    break;
                case 46:
                    this.enterOuterAlt(_localctx, 46);
                    {
                        this.state = 551;
                        this.resetStmt();
                    }
                    break;
                case 47:
                    this.enterOuterAlt(_localctx, 47);
                    {
                        this.state = 552;
                        this.resumeStmt();
                    }
                    break;
                case 48:
                    this.enterOuterAlt(_localctx, 48);
                    {
                        this.state = 553;
                        this.returnStmt();
                    }
                    break;
                case 49:
                    this.enterOuterAlt(_localctx, 49);
                    {
                        this.state = 554;
                        this.rmdirStmt();
                    }
                    break;
                case 50:
                    this.enterOuterAlt(_localctx, 50);
                    {
                        this.state = 555;
                        this.rsetStmt();
                    }
                    break;
                case 51:
                    this.enterOuterAlt(_localctx, 51);
                    {
                        this.state = 556;
                        this.savepictureStmt();
                    }
                    break;
                case 52:
                    this.enterOuterAlt(_localctx, 52);
                    {
                        this.state = 557;
                        this.saveSettingStmt();
                    }
                    break;
                case 53:
                    this.enterOuterAlt(_localctx, 53);
                    {
                        this.state = 558;
                        this.seekStmt();
                    }
                    break;
                case 54:
                    this.enterOuterAlt(_localctx, 54);
                    {
                        this.state = 559;
                        this.selectCaseStmt();
                    }
                    break;
                case 55:
                    this.enterOuterAlt(_localctx, 55);
                    {
                        this.state = 560;
                        this.sendkeysStmt();
                    }
                    break;
                case 56:
                    this.enterOuterAlt(_localctx, 56);
                    {
                        this.state = 561;
                        this.setattrStmt();
                    }
                    break;
                case 57:
                    this.enterOuterAlt(_localctx, 57);
                    {
                        this.state = 562;
                        this.setStmt();
                    }
                    break;
                case 58:
                    this.enterOuterAlt(_localctx, 58);
                    {
                        this.state = 563;
                        this.stopStmt();
                    }
                    break;
                case 59:
                    this.enterOuterAlt(_localctx, 59);
                    {
                        this.state = 564;
                        this.timeStmt();
                    }
                    break;
                case 60:
                    this.enterOuterAlt(_localctx, 60);
                    {
                        this.state = 565;
                        this.unloadStmt();
                    }
                    break;
                case 61:
                    this.enterOuterAlt(_localctx, 61);
                    {
                        this.state = 566;
                        this.unlockStmt();
                    }
                    break;
                case 62:
                    this.enterOuterAlt(_localctx, 62);
                    {
                        this.state = 567;
                        this.variableStmt();
                    }
                    break;
                case 63:
                    this.enterOuterAlt(_localctx, 63);
                    {
                        this.state = 568;
                        this.whileWendStmt();
                    }
                    break;
                case 64:
                    this.enterOuterAlt(_localctx, 64);
                    {
                        this.state = 569;
                        this.widthStmt();
                    }
                    break;
                case 65:
                    this.enterOuterAlt(_localctx, 65);
                    {
                        this.state = 570;
                        this.withStmt();
                    }
                    break;
                case 66:
                    this.enterOuterAlt(_localctx, 66);
                    {
                        this.state = 571;
                        this.writeStmt();
                    }
                    break;
                case 67:
                    this.enterOuterAlt(_localctx, 67);
                    {
                        this.state = 572;
                        this.implicitCallStmt_InBlock();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.appactivateStmt = function () {
        var _localctx = new AppactivateStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, vbaParser.RULE_appactivateStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 575;
                this.match(vbaParser.APPACTIVATE);
                this.state = 576;
                this.match(vbaParser.WS);
                this.state = 577;
                this.valueStmt(0);
                this.state = 586;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 39, this._ctx)) {
                    case 1:
                        {
                            this.state = 579;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 578;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 581;
                            this.match(vbaParser.T__0);
                            this.state = 583;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 582;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 585;
                            this.valueStmt(0);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.beepStmt = function () {
        var _localctx = new BeepStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, vbaParser.RULE_beepStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 588;
                this.match(vbaParser.BEEP);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.chdirStmt = function () {
        var _localctx = new ChdirStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, vbaParser.RULE_chdirStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 590;
                this.match(vbaParser.CHDIR);
                this.state = 591;
                this.match(vbaParser.WS);
                this.state = 592;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.chdriveStmt = function () {
        var _localctx = new ChdriveStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, vbaParser.RULE_chdriveStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 594;
                this.match(vbaParser.CHDRIVE);
                this.state = 595;
                this.match(vbaParser.WS);
                this.state = 596;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.closeStmt = function () {
        var _localctx = new CloseStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, vbaParser.RULE_closeStmt);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 598;
                this.match(vbaParser.CLOSE);
                this.state = 614;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 43, this._ctx)) {
                    case 1:
                        {
                            this.state = 599;
                            this.match(vbaParser.WS);
                            this.state = 600;
                            this.fileNumber();
                            this.state = 611;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 602;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === vbaParser.WS) {
                                                {
                                                    this.state = 601;
                                                    this.match(vbaParser.WS);
                                                }
                                            }
                                            this.state = 604;
                                            this.match(vbaParser.T__0);
                                            this.state = 606;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === vbaParser.WS) {
                                                {
                                                    this.state = 605;
                                                    this.match(vbaParser.WS);
                                                }
                                            }
                                            this.state = 608;
                                            this.fileNumber();
                                        }
                                    }
                                }
                                this.state = 613;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.constStmt = function () {
        var _localctx = new ConstStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, vbaParser.RULE_constStmt);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 619;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC) {
                    {
                        this.state = 616;
                        this.visibility();
                        this.state = 617;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 621;
                this.match(vbaParser.CONST);
                this.state = 622;
                this.match(vbaParser.WS);
                this.state = 623;
                this.constSubStmt();
                this.state = 634;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 625;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 624;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 627;
                                this.match(vbaParser.T__0);
                                this.state = 629;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 628;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 631;
                                this.constSubStmt();
                            }
                        }
                    }
                    this.state = 636;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 47, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.constSubStmt = function () {
        var _localctx = new ConstSubStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, vbaParser.RULE_constSubStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 637;
                this.ambiguousIdentifier();
                this.state = 639;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la === vbaParser.AMPERSAND) {
                    {
                        this.state = 638;
                        this.typeHint();
                    }
                }
                this.state = 643;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 49, this._ctx)) {
                    case 1:
                        {
                            this.state = 641;
                            this.match(vbaParser.WS);
                            this.state = 642;
                            this.asTypeClause();
                        }
                        break;
                }
                this.state = 646;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 645;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 648;
                this.match(vbaParser.EQ);
                this.state = 650;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 649;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 652;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.dateStmt = function () {
        var _localctx = new DateStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, vbaParser.RULE_dateStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 654;
                this.match(vbaParser.DATE);
                this.state = 656;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 655;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 658;
                this.match(vbaParser.EQ);
                this.state = 660;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 659;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 662;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.declareStmt = function () {
        var _localctx = new DeclareStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, vbaParser.RULE_declareStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 667;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC) {
                    {
                        this.state = 664;
                        this.visibility();
                        this.state = 665;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 669;
                this.match(vbaParser.DECLARE);
                this.state = 670;
                this.match(vbaParser.WS);
                this.state = 673;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.PTRSAFE) {
                    {
                        this.state = 671;
                        this.match(vbaParser.PTRSAFE);
                        this.state = 672;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 680;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case vbaParser.FUNCTION:
                        {
                            {
                                this.state = 675;
                                this.match(vbaParser.FUNCTION);
                                this.state = 677;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la === vbaParser.AMPERSAND) {
                                    {
                                        this.state = 676;
                                        this.typeHint();
                                    }
                                }
                            }
                        }
                        break;
                    case vbaParser.SUB:
                        {
                            this.state = 679;
                            this.match(vbaParser.SUB);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 682;
                this.match(vbaParser.WS);
                this.state = 683;
                this.ambiguousIdentifier();
                this.state = 685;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la === vbaParser.AMPERSAND) {
                    {
                        this.state = 684;
                        this.typeHint();
                    }
                }
                this.state = 687;
                this.match(vbaParser.WS);
                this.state = 688;
                this.match(vbaParser.LIB);
                this.state = 689;
                this.match(vbaParser.WS);
                this.state = 690;
                this.match(vbaParser.STRINGLITERAL);
                this.state = 695;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 59, this._ctx)) {
                    case 1:
                        {
                            this.state = 691;
                            this.match(vbaParser.WS);
                            this.state = 692;
                            this.match(vbaParser.ALIAS);
                            this.state = 693;
                            this.match(vbaParser.WS);
                            this.state = 694;
                            this.match(vbaParser.STRINGLITERAL);
                        }
                        break;
                }
                this.state = 701;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 61, this._ctx)) {
                    case 1:
                        {
                            this.state = 698;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 697;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 700;
                            this.argList();
                        }
                        break;
                }
                this.state = 705;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 62, this._ctx)) {
                    case 1:
                        {
                            this.state = 703;
                            this.match(vbaParser.WS);
                            this.state = 704;
                            this.asTypeClause();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.deftypeStmt = function () {
        var _localctx = new DeftypeStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, vbaParser.RULE_deftypeStmt);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 707;
                _la = this._input.LA(1);
                if (!(((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (vbaParser.DEFBOOL - 35)) | (1 << (vbaParser.DEFBYTE - 35)) | (1 << (vbaParser.DEFDATE - 35)) | (1 << (vbaParser.DEFDBL - 35)) | (1 << (vbaParser.DEFDEC - 35)) | (1 << (vbaParser.DEFCUR - 35)) | (1 << (vbaParser.DEFINT - 35)) | (1 << (vbaParser.DEFLNG - 35)) | (1 << (vbaParser.DEFOBJ - 35)) | (1 << (vbaParser.DEFSNG - 35)) | (1 << (vbaParser.DEFSTR - 35)) | (1 << (vbaParser.DEFVAR - 35)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 708;
                this.match(vbaParser.WS);
                this.state = 709;
                this.letterrange();
                this.state = 720;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 711;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 710;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 713;
                                this.match(vbaParser.T__0);
                                this.state = 715;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 714;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 717;
                                this.letterrange();
                            }
                        }
                    }
                    this.state = 722;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.deleteSettingStmt = function () {
        var _localctx = new DeleteSettingStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, vbaParser.RULE_deleteSettingStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 723;
                this.match(vbaParser.DELETESETTING);
                this.state = 724;
                this.match(vbaParser.WS);
                this.state = 725;
                this.valueStmt(0);
                this.state = 727;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 726;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 729;
                this.match(vbaParser.T__0);
                this.state = 731;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 730;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 733;
                this.valueStmt(0);
                this.state = 742;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 70, this._ctx)) {
                    case 1:
                        {
                            this.state = 735;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 734;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 737;
                            this.match(vbaParser.T__0);
                            this.state = 739;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 738;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 741;
                            this.valueStmt(0);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.doLoopStmt = function () {
        var _localctx = new DoLoopStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, vbaParser.RULE_doLoopStmt);
        var _la;
        try {
            this.state = 771;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 73, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 744;
                        this.match(vbaParser.DO);
                        this.state = 745;
                        this.endOfStatement();
                        this.state = 747;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 71, this._ctx)) {
                            case 1:
                                {
                                    this.state = 746;
                                    this.block();
                                }
                                break;
                        }
                        this.state = 749;
                        this.match(vbaParser.LOOP);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 751;
                        this.match(vbaParser.DO);
                        this.state = 752;
                        this.match(vbaParser.WS);
                        this.state = 753;
                        _la = this._input.LA(1);
                        if (!(_la === vbaParser.UNTIL || _la === vbaParser.WHILE)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 754;
                        this.match(vbaParser.WS);
                        this.state = 755;
                        this.valueStmt(0);
                        this.state = 756;
                        this.endOfStatement();
                        this.state = 758;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 72, this._ctx)) {
                            case 1:
                                {
                                    this.state = 757;
                                    this.block();
                                }
                                break;
                        }
                        this.state = 760;
                        this.match(vbaParser.LOOP);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 762;
                        this.match(vbaParser.DO);
                        this.state = 763;
                        this.endOfStatement();
                        this.state = 764;
                        this.block();
                        this.state = 765;
                        this.match(vbaParser.LOOP);
                        this.state = 766;
                        this.match(vbaParser.WS);
                        this.state = 767;
                        _la = this._input.LA(1);
                        if (!(_la === vbaParser.UNTIL || _la === vbaParser.WHILE)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 768;
                        this.match(vbaParser.WS);
                        this.state = 769;
                        this.valueStmt(0);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.endStmt = function () {
        var _localctx = new EndStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, vbaParser.RULE_endStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 773;
                this.match(vbaParser.END);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.enumerationStmt = function () {
        var _localctx = new EnumerationStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, vbaParser.RULE_enumerationStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 778;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC) {
                    {
                        this.state = 775;
                        this.visibility();
                        this.state = 776;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 780;
                this.match(vbaParser.ENUM);
                this.state = 781;
                this.match(vbaParser.WS);
                this.state = 782;
                this.ambiguousIdentifier();
                this.state = 783;
                this.endOfStatement();
                this.state = 787;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.IDENTIFIER) {
                    {
                        {
                            this.state = 784;
                            this.enumerationStmt_Constant();
                        }
                    }
                    this.state = 789;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 790;
                this.match(vbaParser.END_ENUM);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.enumerationStmt_Constant = function () {
        var _localctx = new EnumerationStmt_ConstantContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, vbaParser.RULE_enumerationStmt_Constant);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 792;
                this.ambiguousIdentifier();
                this.state = 801;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 78, this._ctx)) {
                    case 1:
                        {
                            this.state = 794;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 793;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 796;
                            this.match(vbaParser.EQ);
                            this.state = 798;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 797;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 800;
                            this.valueStmt(0);
                        }
                        break;
                }
                this.state = 803;
                this.endOfStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.eraseStmt = function () {
        var _localctx = new EraseStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, vbaParser.RULE_eraseStmt);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 805;
                this.match(vbaParser.ERASE);
                this.state = 806;
                this.match(vbaParser.WS);
                this.state = 807;
                this.valueStmt(0);
                this.state = 815;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 80, this._ctx);
                while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1 + 1) {
                        {
                            {
                                this.state = 808;
                                this.match(vbaParser.T__0);
                                this.state = 810;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 809;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 812;
                                this.valueStmt(0);
                            }
                        }
                    }
                    this.state = 817;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 80, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.errorStmt = function () {
        var _localctx = new ErrorStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, vbaParser.RULE_errorStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 818;
                this.match(vbaParser.ERROR);
                this.state = 819;
                this.match(vbaParser.WS);
                this.state = 820;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.eventStmt = function () {
        var _localctx = new EventStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, vbaParser.RULE_eventStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 825;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC) {
                    {
                        this.state = 822;
                        this.visibility();
                        this.state = 823;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 827;
                this.match(vbaParser.EVENT);
                this.state = 828;
                this.match(vbaParser.WS);
                this.state = 829;
                this.ambiguousIdentifier();
                this.state = 831;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 830;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 833;
                this.argList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.exitStmt = function () {
        var _localctx = new ExitStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, vbaParser.RULE_exitStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 835;
                _la = this._input.LA(1);
                if (!(((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (vbaParser.EXIT_DO - 68)) | (1 << (vbaParser.EXIT_FOR - 68)) | (1 << (vbaParser.EXIT_FUNCTION - 68)) | (1 << (vbaParser.EXIT_PROPERTY - 68)) | (1 << (vbaParser.EXIT_SUB - 68)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.filecopyStmt = function () {
        var _localctx = new FilecopyStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, vbaParser.RULE_filecopyStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 837;
                this.match(vbaParser.FILECOPY);
                this.state = 838;
                this.match(vbaParser.WS);
                this.state = 839;
                this.valueStmt(0);
                this.state = 841;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 840;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 843;
                this.match(vbaParser.T__0);
                this.state = 845;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 844;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 847;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.forEachStmt = function () {
        var _localctx = new ForEachStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, vbaParser.RULE_forEachStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 849;
                this.match(vbaParser.FOR);
                this.state = 850;
                this.match(vbaParser.WS);
                this.state = 851;
                this.match(vbaParser.EACH);
                this.state = 852;
                this.match(vbaParser.WS);
                this.state = 853;
                this.ambiguousIdentifier();
                this.state = 855;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la === vbaParser.AMPERSAND) {
                    {
                        this.state = 854;
                        this.typeHint();
                    }
                }
                this.state = 857;
                this.match(vbaParser.WS);
                this.state = 858;
                this.match(vbaParser.IN);
                this.state = 859;
                this.match(vbaParser.WS);
                this.state = 860;
                this.valueStmt(0);
                this.state = 861;
                this.endOfStatement();
                this.state = 863;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 86, this._ctx)) {
                    case 1:
                        {
                            this.state = 862;
                            this.block();
                        }
                        break;
                }
                this.state = 865;
                this.match(vbaParser.NEXT);
                this.state = 868;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 87, this._ctx)) {
                    case 1:
                        {
                            this.state = 866;
                            this.match(vbaParser.WS);
                            this.state = 867;
                            this.ambiguousIdentifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.forNextStmt = function () {
        var _localctx = new ForNextStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, vbaParser.RULE_forNextStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 870;
                this.match(vbaParser.FOR);
                this.state = 871;
                this.match(vbaParser.WS);
                this.state = 872;
                this.ambiguousIdentifier();
                this.state = 874;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la === vbaParser.AMPERSAND) {
                    {
                        this.state = 873;
                        this.typeHint();
                    }
                }
                this.state = 878;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 89, this._ctx)) {
                    case 1:
                        {
                            this.state = 876;
                            this.match(vbaParser.WS);
                            this.state = 877;
                            this.asTypeClause();
                        }
                        break;
                }
                this.state = 881;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 880;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 883;
                this.match(vbaParser.EQ);
                this.state = 885;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 884;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 887;
                this.valueStmt(0);
                this.state = 888;
                this.match(vbaParser.WS);
                this.state = 889;
                this.match(vbaParser.TO);
                this.state = 890;
                this.match(vbaParser.WS);
                this.state = 891;
                this.valueStmt(0);
                this.state = 896;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 92, this._ctx)) {
                    case 1:
                        {
                            this.state = 892;
                            this.match(vbaParser.WS);
                            this.state = 893;
                            this.match(vbaParser.STEP);
                            this.state = 894;
                            this.match(vbaParser.WS);
                            this.state = 895;
                            this.valueStmt(0);
                        }
                        break;
                }
                this.state = 898;
                this.endOfStatement();
                this.state = 900;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 93, this._ctx)) {
                    case 1:
                        {
                            this.state = 899;
                            this.block();
                        }
                        break;
                }
                this.state = 902;
                this.match(vbaParser.NEXT);
                this.state = 905;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 94, this._ctx)) {
                    case 1:
                        {
                            this.state = 903;
                            this.match(vbaParser.WS);
                            this.state = 904;
                            this.ambiguousIdentifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.functionStmt = function () {
        var _localctx = new FunctionStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, vbaParser.RULE_functionStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 910;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC) {
                    {
                        this.state = 907;
                        this.visibility();
                        this.state = 908;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 914;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.STATIC) {
                    {
                        this.state = 912;
                        this.match(vbaParser.STATIC);
                        this.state = 913;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 916;
                this.match(vbaParser.FUNCTION);
                this.state = 918;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 917;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 920;
                this.ambiguousIdentifier();
                this.state = 922;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 98, this._ctx)) {
                    case 1:
                        {
                            this.state = 921;
                            this.typeHint();
                        }
                        break;
                }
                this.state = 928;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 100, this._ctx)) {
                    case 1:
                        {
                            this.state = 925;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 924;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 927;
                            this.argList();
                        }
                        break;
                }
                this.state = 934;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 102, this._ctx)) {
                    case 1:
                        {
                            this.state = 931;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 930;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 933;
                            this.asTypeClause();
                        }
                        break;
                }
                this.state = 936;
                this.endOfStatement();
                this.state = 938;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.IDENTIFIER) {
                    {
                        this.state = 937;
                        this.block();
                    }
                }
                this.state = 940;
                this.match(vbaParser.END_FUNCTION);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.getStmt = function () {
        var _localctx = new GetStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, vbaParser.RULE_getStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 942;
                this.match(vbaParser.GET);
                this.state = 943;
                this.match(vbaParser.WS);
                this.state = 944;
                this.fileNumber();
                this.state = 946;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 945;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 948;
                this.match(vbaParser.T__0);
                this.state = 950;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 105, this._ctx)) {
                    case 1:
                        {
                            this.state = 949;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 953;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) !== 0)) {
                    {
                        this.state = 952;
                        this.valueStmt(0);
                    }
                }
                this.state = 956;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 955;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 958;
                this.match(vbaParser.T__0);
                this.state = 960;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 959;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 962;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.goSubStmt = function () {
        var _localctx = new GoSubStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, vbaParser.RULE_goSubStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 964;
                this.match(vbaParser.GOSUB);
                this.state = 965;
                this.match(vbaParser.WS);
                this.state = 966;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.goToStmt = function () {
        var _localctx = new GoToStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, vbaParser.RULE_goToStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 968;
                this.match(vbaParser.GOTO);
                this.state = 969;
                this.match(vbaParser.WS);
                this.state = 970;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.ifThenElseStmt = function () {
        var _localctx = new IfThenElseStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, vbaParser.RULE_ifThenElseStmt);
        var _la;
        try {
            this.state = 997;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 112, this._ctx)) {
                case 1:
                    _localctx = new InlineIfThenElseContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 972;
                        this.match(vbaParser.IF);
                        this.state = 973;
                        this.match(vbaParser.WS);
                        this.state = 974;
                        this.ifConditionStmt();
                        this.state = 975;
                        this.match(vbaParser.WS);
                        this.state = 976;
                        this.match(vbaParser.THEN);
                        this.state = 977;
                        this.match(vbaParser.WS);
                        this.state = 978;
                        this.blockStmt();
                        this.state = 983;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 109, this._ctx)) {
                            case 1:
                                {
                                    this.state = 979;
                                    this.match(vbaParser.WS);
                                    this.state = 980;
                                    this.match(vbaParser.ELSE);
                                    this.state = 981;
                                    this.match(vbaParser.WS);
                                    this.state = 982;
                                    this.blockStmt();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    _localctx = new BlockIfThenElseContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 985;
                        this.ifBlockStmt();
                        this.state = 989;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === vbaParser.ELSEIF) {
                            {
                                {
                                    this.state = 986;
                                    this.ifElseIfBlockStmt();
                                }
                            }
                            this.state = 991;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 993;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbaParser.ELSE) {
                            {
                                this.state = 992;
                                this.ifElseBlockStmt();
                            }
                        }
                        this.state = 995;
                        this.match(vbaParser.END_IF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.ifBlockStmt = function () {
        var _localctx = new IfBlockStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, vbaParser.RULE_ifBlockStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 999;
                this.match(vbaParser.IF);
                this.state = 1000;
                this.match(vbaParser.WS);
                this.state = 1001;
                this.ifConditionStmt();
                this.state = 1002;
                this.match(vbaParser.WS);
                this.state = 1003;
                this.match(vbaParser.THEN);
                this.state = 1004;
                this.endOfStatement();
                this.state = 1006;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 113, this._ctx)) {
                    case 1:
                        {
                            this.state = 1005;
                            this.block();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.ifConditionStmt = function () {
        var _localctx = new IfConditionStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, vbaParser.RULE_ifConditionStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1008;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.ifElseIfBlockStmt = function () {
        var _localctx = new IfElseIfBlockStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, vbaParser.RULE_ifElseIfBlockStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1010;
                this.match(vbaParser.ELSEIF);
                this.state = 1011;
                this.match(vbaParser.WS);
                this.state = 1012;
                this.ifConditionStmt();
                this.state = 1013;
                this.match(vbaParser.WS);
                this.state = 1014;
                this.match(vbaParser.THEN);
                this.state = 1015;
                this.endOfStatement();
                this.state = 1017;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 114, this._ctx)) {
                    case 1:
                        {
                            this.state = 1016;
                            this.block();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.ifElseBlockStmt = function () {
        var _localctx = new IfElseBlockStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, vbaParser.RULE_ifElseBlockStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1019;
                this.match(vbaParser.ELSE);
                this.state = 1020;
                this.endOfStatement();
                this.state = 1022;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.IDENTIFIER) {
                    {
                        this.state = 1021;
                        this.block();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.implementsStmt = function () {
        var _localctx = new ImplementsStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, vbaParser.RULE_implementsStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1024;
                this.match(vbaParser.IMPLEMENTS);
                this.state = 1025;
                this.match(vbaParser.WS);
                this.state = 1026;
                this.ambiguousIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.inputStmt = function () {
        var _localctx = new InputStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, vbaParser.RULE_inputStmt);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1028;
                this.match(vbaParser.INPUT);
                this.state = 1029;
                this.match(vbaParser.WS);
                this.state = 1030;
                this.fileNumber();
                this.state = 1039;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1032;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === vbaParser.WS) {
                                        {
                                            this.state = 1031;
                                            this.match(vbaParser.WS);
                                        }
                                    }
                                    this.state = 1034;
                                    this.match(vbaParser.T__0);
                                    this.state = 1036;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === vbaParser.WS) {
                                        {
                                            this.state = 1035;
                                            this.match(vbaParser.WS);
                                        }
                                    }
                                    this.state = 1038;
                                    this.valueStmt(0);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1041;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 118, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.killStmt = function () {
        var _localctx = new KillStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, vbaParser.RULE_killStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1043;
                this.match(vbaParser.KILL);
                this.state = 1044;
                this.match(vbaParser.WS);
                this.state = 1045;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.letStmt = function () {
        var _localctx = new LetStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, vbaParser.RULE_letStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1049;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 119, this._ctx)) {
                    case 1:
                        {
                            this.state = 1047;
                            this.match(vbaParser.LET);
                            this.state = 1048;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 1051;
                this.implicitCallStmt_InStmt();
                this.state = 1053;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1052;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1055;
                _la = this._input.LA(1);
                if (!(((((_la - 189)) & ~0x1F) === 0 && ((1 << (_la - 189)) & ((1 << (vbaParser.EQ - 189)) | (1 << (vbaParser.MINUS_EQ - 189)) | (1 << (vbaParser.PLUS_EQ - 189)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1057;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1056;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1059;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.lineInputStmt = function () {
        var _localctx = new LineInputStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, vbaParser.RULE_lineInputStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1061;
                this.match(vbaParser.LINE_INPUT);
                this.state = 1062;
                this.match(vbaParser.WS);
                this.state = 1063;
                this.fileNumber();
                this.state = 1065;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1064;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1067;
                this.match(vbaParser.T__0);
                this.state = 1069;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1068;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1071;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.loadStmt = function () {
        var _localctx = new LoadStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, vbaParser.RULE_loadStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1073;
                this.match(vbaParser.LOAD);
                this.state = 1074;
                this.match(vbaParser.WS);
                this.state = 1075;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.lockStmt = function () {
        var _localctx = new LockStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, vbaParser.RULE_lockStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1077;
                this.match(vbaParser.LOCK);
                this.state = 1078;
                this.match(vbaParser.WS);
                this.state = 1079;
                this.valueStmt(0);
                this.state = 1094;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 127, this._ctx)) {
                    case 1:
                        {
                            this.state = 1081;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1080;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1083;
                            this.match(vbaParser.T__0);
                            this.state = 1085;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1084;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1087;
                            this.valueStmt(0);
                            this.state = 1092;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 126, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1088;
                                        this.match(vbaParser.WS);
                                        this.state = 1089;
                                        this.match(vbaParser.TO);
                                        this.state = 1090;
                                        this.match(vbaParser.WS);
                                        this.state = 1091;
                                        this.valueStmt(0);
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.lsetStmt = function () {
        var _localctx = new LsetStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, vbaParser.RULE_lsetStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1096;
                this.match(vbaParser.LSET);
                this.state = 1097;
                this.match(vbaParser.WS);
                this.state = 1098;
                this.implicitCallStmt_InStmt();
                this.state = 1100;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1099;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1102;
                this.match(vbaParser.EQ);
                this.state = 1104;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1103;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1106;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.macroConstStmt = function () {
        var _localctx = new MacroConstStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, vbaParser.RULE_macroConstStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1108;
                this.match(vbaParser.MACRO_CONST);
                this.state = 1110;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1109;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1112;
                this.ambiguousIdentifier();
                this.state = 1114;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1113;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1116;
                this.match(vbaParser.EQ);
                this.state = 1118;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1117;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1120;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.macroIfThenElseStmt = function () {
        var _localctx = new MacroIfThenElseStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, vbaParser.RULE_macroIfThenElseStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1122;
                this.macroIfBlockStmt();
                this.state = 1126;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === vbaParser.MACRO_ELSEIF) {
                    {
                        {
                            this.state = 1123;
                            this.macroElseIfBlockStmt();
                        }
                    }
                    this.state = 1128;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1130;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.MACRO_ELSE) {
                    {
                        this.state = 1129;
                        this.macroElseBlockStmt();
                    }
                }
                this.state = 1132;
                this.match(vbaParser.MACRO_END_IF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.macroIfBlockStmt = function () {
        var _localctx = new MacroIfBlockStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, vbaParser.RULE_macroIfBlockStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1134;
                this.match(vbaParser.MACRO_IF);
                this.state = 1136;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1135;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1138;
                this.ifConditionStmt();
                this.state = 1139;
                this.match(vbaParser.WS);
                this.state = 1140;
                this.match(vbaParser.THEN);
                this.state = 1141;
                this.endOfStatement();
                this.state = 1147;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OPTION_BASE - 96)) | (1 << (vbaParser.OPTION_EXPLICIT - 96)) | (1 << (vbaParser.OPTION_COMPARE - 96)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.COMMENT || _la === vbaParser.IDENTIFIER) {
                    {
                        this.state = 1145;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 136, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1142;
                                    this.moduleDeclarations();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 1143;
                                    this.moduleBody();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 1144;
                                    this.block();
                                }
                                break;
                        }
                    }
                    this.state = 1149;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.macroElseIfBlockStmt = function () {
        var _localctx = new MacroElseIfBlockStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, vbaParser.RULE_macroElseIfBlockStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1150;
                this.match(vbaParser.MACRO_ELSEIF);
                this.state = 1152;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1151;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1154;
                this.ifConditionStmt();
                this.state = 1155;
                this.match(vbaParser.WS);
                this.state = 1156;
                this.match(vbaParser.THEN);
                this.state = 1157;
                this.endOfStatement();
                this.state = 1163;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OPTION_BASE - 96)) | (1 << (vbaParser.OPTION_EXPLICIT - 96)) | (1 << (vbaParser.OPTION_COMPARE - 96)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.COMMENT || _la === vbaParser.IDENTIFIER) {
                    {
                        this.state = 1161;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 139, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1158;
                                    this.moduleDeclarations();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 1159;
                                    this.moduleBody();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 1160;
                                    this.block();
                                }
                                break;
                        }
                    }
                    this.state = 1165;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.macroElseBlockStmt = function () {
        var _localctx = new MacroElseBlockStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, vbaParser.RULE_macroElseBlockStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1166;
                this.match(vbaParser.MACRO_ELSE);
                this.state = 1167;
                this.endOfStatement();
                this.state = 1173;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OPTION_BASE - 96)) | (1 << (vbaParser.OPTION_EXPLICIT - 96)) | (1 << (vbaParser.OPTION_COMPARE - 96)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.COMMENT || _la === vbaParser.IDENTIFIER) {
                    {
                        this.state = 1171;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 141, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1168;
                                    this.moduleDeclarations();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 1169;
                                    this.moduleBody();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 1170;
                                    this.block();
                                }
                                break;
                        }
                    }
                    this.state = 1175;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.midStmt = function () {
        var _localctx = new MidStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, vbaParser.RULE_midStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1176;
                this.match(vbaParser.MID);
                this.state = 1178;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1177;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1180;
                this.match(vbaParser.LPAREN);
                this.state = 1182;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 144, this._ctx)) {
                    case 1:
                        {
                            this.state = 1181;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 1184;
                this.argsCall();
                this.state = 1186;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1185;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1188;
                this.match(vbaParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.mkdirStmt = function () {
        var _localctx = new MkdirStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, vbaParser.RULE_mkdirStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1190;
                this.match(vbaParser.MKDIR);
                this.state = 1191;
                this.match(vbaParser.WS);
                this.state = 1192;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.nameStmt = function () {
        var _localctx = new NameStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, vbaParser.RULE_nameStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1194;
                this.match(vbaParser.NAME);
                this.state = 1195;
                this.match(vbaParser.WS);
                this.state = 1196;
                this.valueStmt(0);
                this.state = 1197;
                this.match(vbaParser.WS);
                this.state = 1198;
                this.match(vbaParser.AS);
                this.state = 1199;
                this.match(vbaParser.WS);
                this.state = 1200;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.onErrorStmt = function () {
        var _localctx = new OnErrorStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, vbaParser.RULE_onErrorStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1202;
                _la = this._input.LA(1);
                if (!(_la === vbaParser.ON_ERROR || _la === vbaParser.ON_LOCAL_ERROR)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1203;
                this.match(vbaParser.WS);
                this.state = 1210;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case vbaParser.GOTO:
                        {
                            this.state = 1204;
                            this.match(vbaParser.GOTO);
                            this.state = 1205;
                            this.match(vbaParser.WS);
                            this.state = 1206;
                            this.valueStmt(0);
                        }
                        break;
                    case vbaParser.RESUME:
                        {
                            this.state = 1207;
                            this.match(vbaParser.RESUME);
                            this.state = 1208;
                            this.match(vbaParser.WS);
                            this.state = 1209;
                            this.match(vbaParser.NEXT);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.onGoToStmt = function () {
        var _localctx = new OnGoToStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, vbaParser.RULE_onGoToStmt);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1212;
                this.match(vbaParser.ON);
                this.state = 1213;
                this.match(vbaParser.WS);
                this.state = 1214;
                this.valueStmt(0);
                this.state = 1215;
                this.match(vbaParser.WS);
                this.state = 1216;
                this.match(vbaParser.GOTO);
                this.state = 1217;
                this.match(vbaParser.WS);
                this.state = 1218;
                this.valueStmt(0);
                this.state = 1229;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1220;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 1219;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 1222;
                                this.match(vbaParser.T__0);
                                this.state = 1224;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 1223;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 1226;
                                this.valueStmt(0);
                            }
                        }
                    }
                    this.state = 1231;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.onGoSubStmt = function () {
        var _localctx = new OnGoSubStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, vbaParser.RULE_onGoSubStmt);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1232;
                this.match(vbaParser.ON);
                this.state = 1233;
                this.match(vbaParser.WS);
                this.state = 1234;
                this.valueStmt(0);
                this.state = 1235;
                this.match(vbaParser.WS);
                this.state = 1236;
                this.match(vbaParser.GOSUB);
                this.state = 1237;
                this.match(vbaParser.WS);
                this.state = 1238;
                this.valueStmt(0);
                this.state = 1249;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1240;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 1239;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 1242;
                                this.match(vbaParser.T__0);
                                this.state = 1244;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 1243;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 1246;
                                this.valueStmt(0);
                            }
                        }
                    }
                    this.state = 1251;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.openStmt = function () {
        var _localctx = new OpenStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, vbaParser.RULE_openStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1252;
                this.match(vbaParser.OPEN);
                this.state = 1253;
                this.match(vbaParser.WS);
                this.state = 1254;
                this.valueStmt(0);
                this.state = 1255;
                this.match(vbaParser.WS);
                this.state = 1256;
                this.match(vbaParser.FOR);
                this.state = 1257;
                this.match(vbaParser.WS);
                this.state = 1258;
                _la = this._input.LA(1);
                if (!(_la === vbaParser.APPEND || _la === vbaParser.BINARY || _la === vbaParser.INPUT || _la === vbaParser.OUTPUT || _la === vbaParser.RANDOM)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1263;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 153, this._ctx)) {
                    case 1:
                        {
                            this.state = 1259;
                            this.match(vbaParser.WS);
                            this.state = 1260;
                            this.match(vbaParser.ACCESS);
                            this.state = 1261;
                            this.match(vbaParser.WS);
                            this.state = 1262;
                            _la = this._input.LA(1);
                            if (!(_la === vbaParser.READ || _la === vbaParser.READ_WRITE || _la === vbaParser.WRITE)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.state = 1267;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 154, this._ctx)) {
                    case 1:
                        {
                            this.state = 1265;
                            this.match(vbaParser.WS);
                            this.state = 1266;
                            _la = this._input.LA(1);
                            if (!(((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (vbaParser.LOCK_READ - 99)) | (1 << (vbaParser.LOCK_WRITE - 99)) | (1 << (vbaParser.LOCK_READ_WRITE - 99)))) !== 0) || _la === vbaParser.SHARED)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.state = 1269;
                this.match(vbaParser.WS);
                this.state = 1270;
                this.match(vbaParser.AS);
                this.state = 1271;
                this.match(vbaParser.WS);
                this.state = 1272;
                this.fileNumber();
                this.state = 1283;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 157, this._ctx)) {
                    case 1:
                        {
                            this.state = 1273;
                            this.match(vbaParser.WS);
                            this.state = 1274;
                            this.match(vbaParser.LEN);
                            this.state = 1276;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1275;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1278;
                            this.match(vbaParser.EQ);
                            this.state = 1280;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1279;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1282;
                            this.valueStmt(0);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.outputList = function () {
        var _localctx = new OutputListContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, vbaParser.RULE_outputList);
        var _la;
        try {
            var _alt = void 0;
            this.state = 1318;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 167, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1285;
                        this.outputList_Expression();
                        this.state = 1298;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 161, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 1287;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1286;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1289;
                                        _la = this._input.LA(1);
                                        if (!(_la === vbaParser.T__0 || _la === vbaParser.T__1)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 1291;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 159, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 1290;
                                                    this.match(vbaParser.WS);
                                                }
                                                break;
                                        }
                                        this.state = 1294;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 160, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 1293;
                                                    this.outputList_Expression();
                                                }
                                                break;
                                        }
                                    }
                                }
                            }
                            this.state = 1300;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 161, this._ctx);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1302;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) !== 0)) {
                            {
                                this.state = 1301;
                                this.outputList_Expression();
                            }
                        }
                        this.state = 1314;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 1305;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === vbaParser.WS) {
                                                {
                                                    this.state = 1304;
                                                    this.match(vbaParser.WS);
                                                }
                                            }
                                            this.state = 1307;
                                            _la = this._input.LA(1);
                                            if (!(_la === vbaParser.T__0 || _la === vbaParser.T__1)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                            this.state = 1309;
                                            this._errHandler.sync(this);
                                            switch (this.interpreter.adaptivePredict(this._input, 164, this._ctx)) {
                                                case 1:
                                                    {
                                                        this.state = 1308;
                                                        this.match(vbaParser.WS);
                                                    }
                                                    break;
                                            }
                                            this.state = 1312;
                                            this._errHandler.sync(this);
                                            switch (this.interpreter.adaptivePredict(this._input, 165, this._ctx)) {
                                                case 1:
                                                    {
                                                        this.state = 1311;
                                                        this.outputList_Expression();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 1316;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.outputList_Expression = function () {
        var _localctx = new OutputList_ExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, vbaParser.RULE_outputList_Expression);
        var _la;
        try {
            this.state = 1337;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 172, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1320;
                        this.valueStmt(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1321;
                        _la = this._input.LA(1);
                        if (!(_la === vbaParser.SPC || _la === vbaParser.TAB)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1335;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 171, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1323;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === vbaParser.WS) {
                                        {
                                            this.state = 1322;
                                            this.match(vbaParser.WS);
                                        }
                                    }
                                    this.state = 1325;
                                    this.match(vbaParser.LPAREN);
                                    this.state = 1327;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 169, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 1326;
                                                this.match(vbaParser.WS);
                                            }
                                            break;
                                    }
                                    this.state = 1329;
                                    this.argsCall();
                                    this.state = 1331;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === vbaParser.WS) {
                                        {
                                            this.state = 1330;
                                            this.match(vbaParser.WS);
                                        }
                                    }
                                    this.state = 1333;
                                    this.match(vbaParser.RPAREN);
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.printStmt = function () {
        var _localctx = new PrintStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, vbaParser.RULE_printStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1339;
                this.match(vbaParser.PRINT);
                this.state = 1340;
                this.match(vbaParser.WS);
                this.state = 1341;
                this.fileNumber();
                this.state = 1343;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1342;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1345;
                this.match(vbaParser.T__0);
                this.state = 1350;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 175, this._ctx)) {
                    case 1:
                        {
                            this.state = 1347;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 174, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1346;
                                        this.match(vbaParser.WS);
                                    }
                                    break;
                            }
                            this.state = 1349;
                            this.outputList();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.propertyGetStmt = function () {
        var _localctx = new PropertyGetStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, vbaParser.RULE_propertyGetStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1355;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC) {
                    {
                        this.state = 1352;
                        this.visibility();
                        this.state = 1353;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1359;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.STATIC) {
                    {
                        this.state = 1357;
                        this.match(vbaParser.STATIC);
                        this.state = 1358;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1361;
                this.match(vbaParser.PROPERTY_GET);
                this.state = 1362;
                this.match(vbaParser.WS);
                this.state = 1363;
                this.ambiguousIdentifier();
                this.state = 1365;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 178, this._ctx)) {
                    case 1:
                        {
                            this.state = 1364;
                            this.typeHint();
                        }
                        break;
                }
                this.state = 1371;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 180, this._ctx)) {
                    case 1:
                        {
                            this.state = 1368;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1367;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1370;
                            this.argList();
                        }
                        break;
                }
                this.state = 1375;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 181, this._ctx)) {
                    case 1:
                        {
                            this.state = 1373;
                            this.match(vbaParser.WS);
                            this.state = 1374;
                            this.asTypeClause();
                        }
                        break;
                }
                this.state = 1377;
                this.endOfStatement();
                this.state = 1379;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.IDENTIFIER) {
                    {
                        this.state = 1378;
                        this.block();
                    }
                }
                this.state = 1381;
                this.match(vbaParser.END_PROPERTY);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.propertySetStmt = function () {
        var _localctx = new PropertySetStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, vbaParser.RULE_propertySetStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1386;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC) {
                    {
                        this.state = 1383;
                        this.visibility();
                        this.state = 1384;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1390;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.STATIC) {
                    {
                        this.state = 1388;
                        this.match(vbaParser.STATIC);
                        this.state = 1389;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1392;
                this.match(vbaParser.PROPERTY_SET);
                this.state = 1393;
                this.match(vbaParser.WS);
                this.state = 1394;
                this.ambiguousIdentifier();
                this.state = 1399;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 186, this._ctx)) {
                    case 1:
                        {
                            this.state = 1396;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1395;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1398;
                            this.argList();
                        }
                        break;
                }
                this.state = 1401;
                this.endOfStatement();
                this.state = 1403;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.IDENTIFIER) {
                    {
                        this.state = 1402;
                        this.block();
                    }
                }
                this.state = 1405;
                this.match(vbaParser.END_PROPERTY);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.propertyLetStmt = function () {
        var _localctx = new PropertyLetStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, vbaParser.RULE_propertyLetStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1410;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC) {
                    {
                        this.state = 1407;
                        this.visibility();
                        this.state = 1408;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1414;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.STATIC) {
                    {
                        this.state = 1412;
                        this.match(vbaParser.STATIC);
                        this.state = 1413;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1416;
                this.match(vbaParser.PROPERTY_LET);
                this.state = 1417;
                this.match(vbaParser.WS);
                this.state = 1418;
                this.ambiguousIdentifier();
                this.state = 1423;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 191, this._ctx)) {
                    case 1:
                        {
                            this.state = 1420;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1419;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1422;
                            this.argList();
                        }
                        break;
                }
                this.state = 1425;
                this.endOfStatement();
                this.state = 1427;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.IDENTIFIER) {
                    {
                        this.state = 1426;
                        this.block();
                    }
                }
                this.state = 1429;
                this.match(vbaParser.END_PROPERTY);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.putStmt = function () {
        var _localctx = new PutStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, vbaParser.RULE_putStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1431;
                this.match(vbaParser.PUT);
                this.state = 1432;
                this.match(vbaParser.WS);
                this.state = 1433;
                this.fileNumber();
                this.state = 1435;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1434;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1437;
                this.match(vbaParser.T__0);
                this.state = 1439;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 194, this._ctx)) {
                    case 1:
                        {
                            this.state = 1438;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 1442;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) !== 0)) {
                    {
                        this.state = 1441;
                        this.valueStmt(0);
                    }
                }
                this.state = 1445;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1444;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1447;
                this.match(vbaParser.T__0);
                this.state = 1449;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1448;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1451;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.raiseEventStmt = function () {
        var _localctx = new RaiseEventStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, vbaParser.RULE_raiseEventStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1453;
                this.match(vbaParser.RAISEEVENT);
                this.state = 1454;
                this.match(vbaParser.WS);
                this.state = 1455;
                this.ambiguousIdentifier();
                this.state = 1470;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 202, this._ctx)) {
                    case 1:
                        {
                            this.state = 1457;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1456;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1459;
                            this.match(vbaParser.LPAREN);
                            this.state = 1461;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 199, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1460;
                                        this.match(vbaParser.WS);
                                    }
                                    break;
                            }
                            this.state = 1467;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 201, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1463;
                                        this.argsCall();
                                        this.state = 1465;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1464;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                    }
                                    break;
                            }
                            this.state = 1469;
                            this.match(vbaParser.RPAREN);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.randomizeStmt = function () {
        var _localctx = new RandomizeStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, vbaParser.RULE_randomizeStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1472;
                this.match(vbaParser.RANDOMIZE);
                this.state = 1475;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 203, this._ctx)) {
                    case 1:
                        {
                            this.state = 1473;
                            this.match(vbaParser.WS);
                            this.state = 1474;
                            this.valueStmt(0);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.redimStmt = function () {
        var _localctx = new RedimStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, vbaParser.RULE_redimStmt);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1477;
                this.match(vbaParser.REDIM);
                this.state = 1478;
                this.match(vbaParser.WS);
                this.state = 1481;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 204, this._ctx)) {
                    case 1:
                        {
                            this.state = 1479;
                            this.match(vbaParser.PRESERVE);
                            this.state = 1480;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 1483;
                this.redimSubStmt();
                this.state = 1494;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1485;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 1484;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 1487;
                                this.match(vbaParser.T__0);
                                this.state = 1489;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 1488;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 1491;
                                this.redimSubStmt();
                            }
                        }
                    }
                    this.state = 1496;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.redimSubStmt = function () {
        var _localctx = new RedimSubStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, vbaParser.RULE_redimSubStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1497;
                this.implicitCallStmt_InStmt();
                this.state = 1499;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1498;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1501;
                this.match(vbaParser.LPAREN);
                this.state = 1503;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1502;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1505;
                this.subscripts();
                this.state = 1507;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1506;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1509;
                this.match(vbaParser.RPAREN);
                this.state = 1512;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 211, this._ctx)) {
                    case 1:
                        {
                            this.state = 1510;
                            this.match(vbaParser.WS);
                            this.state = 1511;
                            this.asTypeClause();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.resetStmt = function () {
        var _localctx = new ResetStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, vbaParser.RULE_resetStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1514;
                this.match(vbaParser.RESET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.resumeStmt = function () {
        var _localctx = new ResumeStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, vbaParser.RULE_resumeStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1516;
                this.match(vbaParser.RESUME);
                this.state = 1522;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 213, this._ctx)) {
                    case 1:
                        {
                            this.state = 1517;
                            this.match(vbaParser.WS);
                            this.state = 1520;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 212, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1518;
                                        this.match(vbaParser.NEXT);
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 1519;
                                        this.ambiguousIdentifier();
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.returnStmt = function () {
        var _localctx = new ReturnStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, vbaParser.RULE_returnStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1524;
                this.match(vbaParser.RETURN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.rmdirStmt = function () {
        var _localctx = new RmdirStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, vbaParser.RULE_rmdirStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1526;
                this.match(vbaParser.RMDIR);
                this.state = 1527;
                this.match(vbaParser.WS);
                this.state = 1528;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.rsetStmt = function () {
        var _localctx = new RsetStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, vbaParser.RULE_rsetStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1530;
                this.match(vbaParser.RSET);
                this.state = 1531;
                this.match(vbaParser.WS);
                this.state = 1532;
                this.implicitCallStmt_InStmt();
                this.state = 1534;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1533;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1536;
                this.match(vbaParser.EQ);
                this.state = 1538;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1537;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1540;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.savepictureStmt = function () {
        var _localctx = new SavepictureStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, vbaParser.RULE_savepictureStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1542;
                this.match(vbaParser.SAVEPICTURE);
                this.state = 1543;
                this.match(vbaParser.WS);
                this.state = 1544;
                this.valueStmt(0);
                this.state = 1546;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1545;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1548;
                this.match(vbaParser.T__0);
                this.state = 1550;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1549;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1552;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.saveSettingStmt = function () {
        var _localctx = new SaveSettingStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, vbaParser.RULE_saveSettingStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1554;
                this.match(vbaParser.SAVESETTING);
                this.state = 1555;
                this.match(vbaParser.WS);
                this.state = 1556;
                this.valueStmt(0);
                this.state = 1558;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1557;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1560;
                this.match(vbaParser.T__0);
                this.state = 1562;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1561;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1564;
                this.valueStmt(0);
                this.state = 1566;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1565;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1568;
                this.match(vbaParser.T__0);
                this.state = 1570;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1569;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1572;
                this.valueStmt(0);
                this.state = 1574;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1573;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1576;
                this.match(vbaParser.T__0);
                this.state = 1578;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1577;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1580;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.seekStmt = function () {
        var _localctx = new SeekStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, vbaParser.RULE_seekStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1582;
                this.match(vbaParser.SEEK);
                this.state = 1583;
                this.match(vbaParser.WS);
                this.state = 1584;
                this.fileNumber();
                this.state = 1586;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1585;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1588;
                this.match(vbaParser.T__0);
                this.state = 1590;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1589;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1592;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.selectCaseStmt = function () {
        var _localctx = new SelectCaseStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, vbaParser.RULE_selectCaseStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1594;
                this.match(vbaParser.SELECT);
                this.state = 1595;
                this.match(vbaParser.WS);
                this.state = 1596;
                this.match(vbaParser.CASE);
                this.state = 1597;
                this.match(vbaParser.WS);
                this.state = 1598;
                this.valueStmt(0);
                this.state = 1599;
                this.endOfStatement();
                this.state = 1603;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === vbaParser.CASE) {
                    {
                        {
                            this.state = 1600;
                            this.sC_Case();
                        }
                    }
                    this.state = 1605;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1606;
                this.match(vbaParser.END_SELECT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.sC_Selection = function () {
        var _localctx = new SC_SelectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, vbaParser.RULE_sC_Selection);
        var _la;
        try {
            this.state = 1625;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 229, this._ctx)) {
                case 1:
                    _localctx = new CaseCondIsContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1608;
                        this.match(vbaParser.IS);
                        this.state = 1610;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbaParser.WS) {
                            {
                                this.state = 1609;
                                this.match(vbaParser.WS);
                            }
                        }
                        this.state = 1612;
                        this.comparisonOperator();
                        this.state = 1614;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbaParser.WS) {
                            {
                                this.state = 1613;
                                this.match(vbaParser.WS);
                            }
                        }
                        this.state = 1616;
                        this.valueStmt(0);
                    }
                    break;
                case 2:
                    _localctx = new CaseCondToContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1618;
                        this.valueStmt(0);
                        this.state = 1619;
                        this.match(vbaParser.WS);
                        this.state = 1620;
                        this.match(vbaParser.TO);
                        this.state = 1621;
                        this.match(vbaParser.WS);
                        this.state = 1622;
                        this.valueStmt(0);
                    }
                    break;
                case 3:
                    _localctx = new CaseCondValueContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1624;
                        this.valueStmt(0);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.sC_Case = function () {
        var _localctx = new SC_CaseContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, vbaParser.RULE_sC_Case);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1627;
                this.match(vbaParser.CASE);
                this.state = 1628;
                this.match(vbaParser.WS);
                this.state = 1629;
                this.sC_Cond();
                this.state = 1630;
                this.endOfStatement();
                this.state = 1632;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 230, this._ctx)) {
                    case 1:
                        {
                            this.state = 1631;
                            this.block();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.sC_Cond = function () {
        var _localctx = new SC_CondContext(this._ctx, this.state);
        this.enterRule(_localctx, 176, vbaParser.RULE_sC_Cond);
        var _la;
        try {
            var _alt = void 0;
            this.state = 1649;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 234, this._ctx)) {
                case 1:
                    _localctx = new CaseCondElseContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1634;
                        this.match(vbaParser.ELSE);
                    }
                    break;
                case 2:
                    _localctx = new CaseCondSelectionContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1635;
                        this.sC_Selection();
                        this.state = 1646;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 1637;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1636;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1639;
                                        this.match(vbaParser.T__0);
                                        this.state = 1641;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1640;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1643;
                                        this.sC_Selection();
                                    }
                                }
                            }
                            this.state = 1648;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.sendkeysStmt = function () {
        var _localctx = new SendkeysStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 178, vbaParser.RULE_sendkeysStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1651;
                this.match(vbaParser.SENDKEYS);
                this.state = 1652;
                this.match(vbaParser.WS);
                this.state = 1653;
                this.valueStmt(0);
                this.state = 1662;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 237, this._ctx)) {
                    case 1:
                        {
                            this.state = 1655;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1654;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1657;
                            this.match(vbaParser.T__0);
                            this.state = 1659;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1658;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1661;
                            this.valueStmt(0);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.setattrStmt = function () {
        var _localctx = new SetattrStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, vbaParser.RULE_setattrStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1664;
                this.match(vbaParser.SETATTR);
                this.state = 1665;
                this.match(vbaParser.WS);
                this.state = 1666;
                this.valueStmt(0);
                this.state = 1668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1667;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1670;
                this.match(vbaParser.T__0);
                this.state = 1672;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1671;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1674;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.setStmt = function () {
        var _localctx = new SetStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, vbaParser.RULE_setStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1676;
                this.match(vbaParser.SET);
                this.state = 1677;
                this.match(vbaParser.WS);
                this.state = 1678;
                this.implicitCallStmt_InStmt();
                this.state = 1680;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1679;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1682;
                this.match(vbaParser.EQ);
                this.state = 1684;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1683;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1686;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.stopStmt = function () {
        var _localctx = new StopStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, vbaParser.RULE_stopStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1688;
                this.match(vbaParser.STOP);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.subStmt = function () {
        var _localctx = new SubStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, vbaParser.RULE_subStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1693;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC) {
                    {
                        this.state = 1690;
                        this.visibility();
                        this.state = 1691;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1697;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.STATIC) {
                    {
                        this.state = 1695;
                        this.match(vbaParser.STATIC);
                        this.state = 1696;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1699;
                this.match(vbaParser.SUB);
                this.state = 1701;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1700;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1703;
                this.ambiguousIdentifier();
                this.state = 1708;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 246, this._ctx)) {
                    case 1:
                        {
                            this.state = 1705;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1704;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1707;
                            this.argList();
                        }
                        break;
                }
                this.state = 1710;
                this.endOfStatement();
                this.state = 1712;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.IDENTIFIER) {
                    {
                        this.state = 1711;
                        this.block();
                    }
                }
                this.state = 1714;
                this.match(vbaParser.END_SUB);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.timeStmt = function () {
        var _localctx = new TimeStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, vbaParser.RULE_timeStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1716;
                this.match(vbaParser.TIME);
                this.state = 1718;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1717;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1720;
                this.match(vbaParser.EQ);
                this.state = 1722;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 1721;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1724;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.typeStmt = function () {
        var _localctx = new TypeStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, vbaParser.RULE_typeStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1729;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC) {
                    {
                        this.state = 1726;
                        this.visibility();
                        this.state = 1727;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 1731;
                this.match(vbaParser.TYPE);
                this.state = 1732;
                this.match(vbaParser.WS);
                this.state = 1733;
                this.ambiguousIdentifier();
                this.state = 1734;
                this.endOfStatement();
                this.state = 1738;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.IDENTIFIER) {
                    {
                        {
                            this.state = 1735;
                            this.typeStmt_Element();
                        }
                    }
                    this.state = 1740;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1741;
                this.match(vbaParser.END_TYPE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.typeStmt_Element = function () {
        var _localctx = new TypeStmt_ElementContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, vbaParser.RULE_typeStmt_Element);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1743;
                this.ambiguousIdentifier();
                this.state = 1758;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 256, this._ctx)) {
                    case 1:
                        {
                            this.state = 1745;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1744;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1747;
                            this.match(vbaParser.LPAREN);
                            this.state = 1752;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 254, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1749;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1748;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1751;
                                        this.subscripts();
                                    }
                                    break;
                            }
                            this.state = 1755;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1754;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1757;
                            this.match(vbaParser.RPAREN);
                        }
                        break;
                }
                this.state = 1762;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 257, this._ctx)) {
                    case 1:
                        {
                            this.state = 1760;
                            this.match(vbaParser.WS);
                            this.state = 1761;
                            this.asTypeClause();
                        }
                        break;
                }
                this.state = 1764;
                this.endOfStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.typeOfStmt = function () {
        var _localctx = new TypeOfStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, vbaParser.RULE_typeOfStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1766;
                this.match(vbaParser.TYPEOF);
                this.state = 1767;
                this.match(vbaParser.WS);
                this.state = 1768;
                this.valueStmt(0);
                this.state = 1773;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 258, this._ctx)) {
                    case 1:
                        {
                            this.state = 1769;
                            this.match(vbaParser.WS);
                            this.state = 1770;
                            this.match(vbaParser.IS);
                            this.state = 1771;
                            this.match(vbaParser.WS);
                            this.state = 1772;
                            this.type();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.unloadStmt = function () {
        var _localctx = new UnloadStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, vbaParser.RULE_unloadStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1775;
                this.match(vbaParser.UNLOAD);
                this.state = 1776;
                this.match(vbaParser.WS);
                this.state = 1777;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.unlockStmt = function () {
        var _localctx = new UnlockStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, vbaParser.RULE_unlockStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1779;
                this.match(vbaParser.UNLOCK);
                this.state = 1780;
                this.match(vbaParser.WS);
                this.state = 1781;
                this.fileNumber();
                this.state = 1796;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 262, this._ctx)) {
                    case 1:
                        {
                            this.state = 1783;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1782;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1785;
                            this.match(vbaParser.T__0);
                            this.state = 1787;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1786;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1789;
                            this.valueStmt(0);
                            this.state = 1794;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 261, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1790;
                                        this.match(vbaParser.WS);
                                        this.state = 1791;
                                        this.match(vbaParser.TO);
                                        this.state = 1792;
                                        this.match(vbaParser.WS);
                                        this.state = 1793;
                                        this.valueStmt(0);
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.valueStmt = function (_p) {
        if (_p === undefined) {
            _p = 0;
        }
        var _parentctx = this._ctx;
        var _parentState = this.state;
        var _localctx = new ValueStmtContext(this._ctx, _parentState);
        var _prevctx = _localctx;
        var _startState = 200;
        this.enterRecursionRule(_localctx, 200, vbaParser.RULE_valueStmt, _p);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1858;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 274, this._ctx)) {
                    case 1:
                        {
                            _localctx = new VsLiteralContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1799;
                            this.literal();
                        }
                        break;
                    case 2:
                        {
                            _localctx = new VsICSContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1800;
                            this.implicitCallStmt_InStmt();
                        }
                        break;
                    case 3:
                        {
                            _localctx = new VsStructContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1801;
                            this.match(vbaParser.LPAREN);
                            this.state = 1803;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1802;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1805;
                            this.valueStmt(0);
                            this.state = 1816;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === vbaParser.T__0 || _la === vbaParser.WS) {
                                {
                                    {
                                        this.state = 1807;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1806;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1809;
                                        this.match(vbaParser.T__0);
                                        this.state = 1811;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1810;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1813;
                                        this.valueStmt(0);
                                    }
                                }
                                this.state = 1818;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1819;
                            this.match(vbaParser.RPAREN);
                        }
                        break;
                    case 4:
                        {
                            _localctx = new VsNewContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1821;
                            this.match(vbaParser.NEW);
                            this.state = 1823;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1822;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1825;
                            this.valueStmt(28);
                        }
                        break;
                    case 5:
                        {
                            _localctx = new VsTypeOfContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1826;
                            this.typeOfStmt();
                        }
                        break;
                    case 6:
                        {
                            _localctx = new VsMidContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1827;
                            this.midStmt();
                        }
                        break;
                    case 7:
                        {
                            _localctx = new VsAddressOfContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1828;
                            this.match(vbaParser.ADDRESSOF);
                            this.state = 1830;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1829;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1832;
                            this.valueStmt(25);
                        }
                        break;
                    case 8:
                        {
                            _localctx = new VsAssignContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1833;
                            this.implicitCallStmt_InStmt();
                            this.state = 1835;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1834;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1837;
                            this.match(vbaParser.ASSIGN);
                            this.state = 1839;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1838;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1841;
                            this.valueStmt(24);
                        }
                        break;
                    case 9:
                        {
                            _localctx = new VsNegationContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1843;
                            this.match(vbaParser.MINUS);
                            this.state = 1845;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1844;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1847;
                            this.valueStmt(14);
                        }
                        break;
                    case 10:
                        {
                            _localctx = new VsPlusContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1848;
                            this.match(vbaParser.PLUS);
                            this.state = 1850;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1849;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1852;
                            this.valueStmt(13);
                        }
                        break;
                    case 11:
                        {
                            _localctx = new VsNotContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1853;
                            this.match(vbaParser.NOT);
                            this.state = 1855;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 1854;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 1857;
                            this.valueStmt(1);
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2042;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 2040;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 315, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1860;
                                        if (!(this.precpred(this._ctx, 23))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                                        }
                                        this.state = 1862;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1861;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1864;
                                        this.match(vbaParser.IS);
                                        this.state = 1866;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1865;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1868;
                                        this.valueStmt(24);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1869;
                                        if (!(this.precpred(this._ctx, 22))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                                        }
                                        this.state = 1871;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1870;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1873;
                                        this.match(vbaParser.LIKE);
                                        this.state = 1875;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1874;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1877;
                                        this.valueStmt(23);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1878;
                                        if (!(this.precpred(this._ctx, 21))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                                        }
                                        this.state = 1880;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1879;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1882;
                                        this.match(vbaParser.GEQ);
                                        this.state = 1884;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1883;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1886;
                                        this.valueStmt(22);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1887;
                                        if (!(this.precpred(this._ctx, 20))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                                        }
                                        this.state = 1889;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1888;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1891;
                                        this.match(vbaParser.LEQ);
                                        this.state = 1893;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1892;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1895;
                                        this.valueStmt(21);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1896;
                                        if (!(this.precpred(this._ctx, 19))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                                        }
                                        this.state = 1898;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1897;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1900;
                                        this.match(vbaParser.GT);
                                        this.state = 1902;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1901;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1904;
                                        this.valueStmt(20);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1905;
                                        if (!(this.precpred(this._ctx, 18))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                                        }
                                        this.state = 1907;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1906;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1909;
                                        this.match(vbaParser.LT);
                                        this.state = 1911;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1910;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1913;
                                        this.valueStmt(19);
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1914;
                                        if (!(this.precpred(this._ctx, 17))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                                        }
                                        this.state = 1916;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1915;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1918;
                                        this.match(vbaParser.NEQ);
                                        this.state = 1920;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1919;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1922;
                                        this.valueStmt(18);
                                    }
                                    break;
                                case 8:
                                    {
                                        _localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1923;
                                        if (!(this.precpred(this._ctx, 16))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                                        }
                                        this.state = 1925;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1924;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1927;
                                        this.match(vbaParser.EQ);
                                        this.state = 1929;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1928;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1931;
                                        this.valueStmt(17);
                                    }
                                    break;
                                case 9:
                                    {
                                        _localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1932;
                                        if (!(this.precpred(this._ctx, 15))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                                        }
                                        this.state = 1934;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1933;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1936;
                                        this.match(vbaParser.POW);
                                        this.state = 1938;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1937;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1940;
                                        this.valueStmt(16);
                                    }
                                    break;
                                case 10:
                                    {
                                        _localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1941;
                                        if (!(this.precpred(this._ctx, 12))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                                        }
                                        this.state = 1943;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1942;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1945;
                                        this.match(vbaParser.DIV);
                                        this.state = 1947;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1946;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1949;
                                        this.valueStmt(13);
                                    }
                                    break;
                                case 11:
                                    {
                                        _localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1950;
                                        if (!(this.precpred(this._ctx, 11))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                                        }
                                        this.state = 1952;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1951;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1954;
                                        this.match(vbaParser.MULT);
                                        this.state = 1956;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1955;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1958;
                                        this.valueStmt(12);
                                    }
                                    break;
                                case 12:
                                    {
                                        _localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1959;
                                        if (!(this.precpred(this._ctx, 10))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                                        }
                                        this.state = 1961;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1960;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1963;
                                        this.match(vbaParser.MOD);
                                        this.state = 1965;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1964;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1967;
                                        this.valueStmt(11);
                                    }
                                    break;
                                case 13:
                                    {
                                        _localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1968;
                                        if (!(this.precpred(this._ctx, 9))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                                        }
                                        this.state = 1970;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1969;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1972;
                                        this.match(vbaParser.PLUS);
                                        this.state = 1974;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1973;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1976;
                                        this.valueStmt(10);
                                    }
                                    break;
                                case 14:
                                    {
                                        _localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1977;
                                        if (!(this.precpred(this._ctx, 8))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                                        }
                                        this.state = 1979;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1978;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1981;
                                        this.match(vbaParser.MINUS);
                                        this.state = 1983;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1982;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1985;
                                        this.valueStmt(9);
                                    }
                                    break;
                                case 15:
                                    {
                                        _localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1986;
                                        if (!(this.precpred(this._ctx, 7))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                                        }
                                        this.state = 1988;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1987;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1990;
                                        this.match(vbaParser.AMPERSAND);
                                        this.state = 1992;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1991;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1994;
                                        this.valueStmt(8);
                                    }
                                    break;
                                case 16:
                                    {
                                        _localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 1995;
                                        if (!(this.precpred(this._ctx, 6))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                                        }
                                        this.state = 1997;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 1996;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 1999;
                                        this.match(vbaParser.IMP);
                                        this.state = 2001;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 2000;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 2003;
                                        this.valueStmt(7);
                                    }
                                    break;
                                case 17:
                                    {
                                        _localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 2004;
                                        if (!(this.precpred(this._ctx, 5))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                                        }
                                        this.state = 2006;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 2005;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 2008;
                                        this.match(vbaParser.EQV);
                                        this.state = 2010;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 2009;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 2012;
                                        this.valueStmt(6);
                                    }
                                    break;
                                case 18:
                                    {
                                        _localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 2013;
                                        if (!(this.precpred(this._ctx, 4))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                                        }
                                        this.state = 2015;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 2014;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 2017;
                                        this.match(vbaParser.XOR);
                                        this.state = 2019;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 2018;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 2021;
                                        this.valueStmt(5);
                                    }
                                    break;
                                case 19:
                                    {
                                        _localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 2022;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 2024;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 2023;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 2026;
                                        this.match(vbaParser.OR);
                                        this.state = 2028;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 2027;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 2030;
                                        this.valueStmt(4);
                                    }
                                    break;
                                case 20:
                                    {
                                        _localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, vbaParser.RULE_valueStmt);
                                        this.state = 2031;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 2033;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 2032;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 2035;
                                        this.match(vbaParser.AND);
                                        this.state = 2037;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 2036;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 2039;
                                        this.valueStmt(3);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 2044;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.variableStmt = function () {
        var _localctx = new VariableStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, vbaParser.RULE_variableStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2048;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case vbaParser.DIM:
                        {
                            this.state = 2045;
                            this.match(vbaParser.DIM);
                        }
                        break;
                    case vbaParser.STATIC:
                        {
                            this.state = 2046;
                            this.match(vbaParser.STATIC);
                        }
                        break;
                    case vbaParser.FRIEND:
                    case vbaParser.GLOBAL:
                    case vbaParser.PRIVATE:
                    case vbaParser.PUBLIC:
                        {
                            this.state = 2047;
                            this.visibility();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 2050;
                this.match(vbaParser.WS);
                this.state = 2053;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 318, this._ctx)) {
                    case 1:
                        {
                            this.state = 2051;
                            this.match(vbaParser.WITHEVENTS);
                            this.state = 2052;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 2055;
                this.variableListStmt();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.variableListStmt = function () {
        var _localctx = new VariableListStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 204, vbaParser.RULE_variableListStmt);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2057;
                this.variableSubStmt();
                this.state = 2068;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2059;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2058;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2061;
                                this.match(vbaParser.T__0);
                                this.state = 2063;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2062;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2065;
                                this.variableSubStmt();
                            }
                        }
                    }
                    this.state = 2070;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.variableSubStmt = function () {
        var _localctx = new VariableSubStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 206, vbaParser.RULE_variableSubStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2071;
                this.ambiguousIdentifier();
                this.state = 2089;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 327, this._ctx)) {
                    case 1:
                        {
                            this.state = 2073;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2072;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2075;
                            this.match(vbaParser.LPAREN);
                            this.state = 2077;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2076;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2083;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) !== 0)) {
                                {
                                    this.state = 2079;
                                    this.subscripts();
                                    this.state = 2081;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === vbaParser.WS) {
                                        {
                                            this.state = 2080;
                                            this.match(vbaParser.WS);
                                        }
                                    }
                                }
                            }
                            this.state = 2085;
                            this.match(vbaParser.RPAREN);
                            this.state = 2087;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 326, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2086;
                                        this.match(vbaParser.WS);
                                    }
                                    break;
                            }
                        }
                        break;
                }
                this.state = 2092;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 328, this._ctx)) {
                    case 1:
                        {
                            this.state = 2091;
                            this.typeHint();
                        }
                        break;
                }
                this.state = 2096;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 329, this._ctx)) {
                    case 1:
                        {
                            this.state = 2094;
                            this.match(vbaParser.WS);
                            this.state = 2095;
                            this.asTypeClause();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.whileWendStmt = function () {
        var _localctx = new WhileWendStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 208, vbaParser.RULE_whileWendStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2098;
                this.match(vbaParser.WHILE);
                this.state = 2099;
                this.match(vbaParser.WS);
                this.state = 2100;
                this.valueStmt(0);
                this.state = 2101;
                this.endOfStatement();
                this.state = 2103;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 330, this._ctx)) {
                    case 1:
                        {
                            this.state = 2102;
                            this.block();
                        }
                        break;
                }
                this.state = 2105;
                this.match(vbaParser.WEND);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.widthStmt = function () {
        var _localctx = new WidthStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 210, vbaParser.RULE_widthStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2107;
                this.match(vbaParser.WIDTH);
                this.state = 2108;
                this.match(vbaParser.WS);
                this.state = 2109;
                this.fileNumber();
                this.state = 2111;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 2110;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 2113;
                this.match(vbaParser.T__0);
                this.state = 2115;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 2114;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 2117;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.withStmt = function () {
        var _localctx = new WithStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 212, vbaParser.RULE_withStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2119;
                this.match(vbaParser.WITH);
                this.state = 2120;
                this.match(vbaParser.WS);
                this.state = 2125;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 333, this._ctx)) {
                    case 1:
                        {
                            this.state = 2121;
                            this.implicitCallStmt_InStmt();
                        }
                        break;
                    case 2:
                        {
                            {
                                this.state = 2122;
                                this.match(vbaParser.NEW);
                                this.state = 2123;
                                this.match(vbaParser.WS);
                                this.state = 2124;
                                this.type();
                            }
                        }
                        break;
                }
                this.state = 2127;
                this.endOfStatement();
                this.state = 2129;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la === vbaParser.IDENTIFIER) {
                    {
                        this.state = 2128;
                        this.block();
                    }
                }
                this.state = 2131;
                this.match(vbaParser.END_WITH);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.writeStmt = function () {
        var _localctx = new WriteStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 214, vbaParser.RULE_writeStmt);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2133;
                this.match(vbaParser.WRITE);
                this.state = 2134;
                this.match(vbaParser.WS);
                this.state = 2135;
                this.fileNumber();
                this.state = 2137;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 2136;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 2139;
                this.match(vbaParser.T__0);
                this.state = 2144;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 337, this._ctx)) {
                    case 1:
                        {
                            this.state = 2141;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 336, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2140;
                                        this.match(vbaParser.WS);
                                    }
                                    break;
                            }
                            this.state = 2143;
                            this.outputList();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.fileNumber = function () {
        var _localctx = new FileNumberContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, vbaParser.RULE_fileNumber);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2147;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.T__2) {
                    {
                        this.state = 2146;
                        this.match(vbaParser.T__2);
                    }
                }
                this.state = 2149;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.explicitCallStmt = function () {
        var _localctx = new ExplicitCallStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, vbaParser.RULE_explicitCallStmt);
        try {
            this.state = 2153;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 339, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2151;
                        this.eCS_ProcedureCall();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2152;
                        this.eCS_MemberProcedureCall();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.eCS_ProcedureCall = function () {
        var _localctx = new ECS_ProcedureCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 220, vbaParser.RULE_eCS_ProcedureCall);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2155;
                this.match(vbaParser.CALL);
                this.state = 2156;
                this.match(vbaParser.WS);
                this.state = 2157;
                this.ambiguousIdentifier();
                this.state = 2159;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 340, this._ctx)) {
                    case 1:
                        {
                            this.state = 2158;
                            this.typeHint();
                        }
                        break;
                }
                this.state = 2174;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 344, this._ctx)) {
                    case 1:
                        {
                            this.state = 2162;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2161;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2164;
                            this.match(vbaParser.LPAREN);
                            this.state = 2166;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 342, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2165;
                                        this.match(vbaParser.WS);
                                    }
                                    break;
                            }
                            this.state = 2168;
                            this.argsCall();
                            this.state = 2170;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2169;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2172;
                            this.match(vbaParser.RPAREN);
                        }
                        break;
                }
                this.state = 2185;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2177;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2176;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2179;
                                this.match(vbaParser.LPAREN);
                                this.state = 2180;
                                this.subscripts();
                                this.state = 2181;
                                this.match(vbaParser.RPAREN);
                            }
                        }
                    }
                    this.state = 2187;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.eCS_MemberProcedureCall = function () {
        var _localctx = new ECS_MemberProcedureCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 222, vbaParser.RULE_eCS_MemberProcedureCall);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2188;
                this.match(vbaParser.CALL);
                this.state = 2189;
                this.match(vbaParser.WS);
                this.state = 2191;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 347, this._ctx)) {
                    case 1:
                        {
                            this.state = 2190;
                            this.implicitCallStmt_InStmt();
                        }
                        break;
                }
                this.state = 2193;
                this.match(vbaParser.T__3);
                this.state = 2194;
                this.ambiguousIdentifier();
                this.state = 2196;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 348, this._ctx)) {
                    case 1:
                        {
                            this.state = 2195;
                            this.typeHint();
                        }
                        break;
                }
                this.state = 2211;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 352, this._ctx)) {
                    case 1:
                        {
                            this.state = 2199;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2198;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2201;
                            this.match(vbaParser.LPAREN);
                            this.state = 2203;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 350, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2202;
                                        this.match(vbaParser.WS);
                                    }
                                    break;
                            }
                            this.state = 2205;
                            this.argsCall();
                            this.state = 2207;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2206;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2209;
                            this.match(vbaParser.RPAREN);
                        }
                        break;
                }
                this.state = 2222;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2214;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2213;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2216;
                                this.match(vbaParser.LPAREN);
                                this.state = 2217;
                                this.subscripts();
                                this.state = 2218;
                                this.match(vbaParser.RPAREN);
                            }
                        }
                    }
                    this.state = 2224;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 354, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.implicitCallStmt_InBlock = function () {
        var _localctx = new ImplicitCallStmt_InBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 224, vbaParser.RULE_implicitCallStmt_InBlock);
        try {
            this.state = 2227;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 355, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2225;
                        this.iCS_B_MemberProcedureCall();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2226;
                        this.iCS_B_ProcedureCall();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.iCS_B_MemberProcedureCall = function () {
        var _localctx = new ICS_B_MemberProcedureCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, vbaParser.RULE_iCS_B_MemberProcedureCall);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2230;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 356, this._ctx)) {
                    case 1:
                        {
                            this.state = 2229;
                            this.implicitCallStmt_InStmt();
                        }
                        break;
                }
                this.state = 2232;
                this.match(vbaParser.T__3);
                this.state = 2233;
                this.ambiguousIdentifier();
                this.state = 2235;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 357, this._ctx)) {
                    case 1:
                        {
                            this.state = 2234;
                            this.typeHint();
                        }
                        break;
                }
                this.state = 2239;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 358, this._ctx)) {
                    case 1:
                        {
                            this.state = 2237;
                            this.match(vbaParser.WS);
                            this.state = 2238;
                            this.argsCall();
                        }
                        break;
                }
                this.state = 2242;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 359, this._ctx)) {
                    case 1:
                        {
                            this.state = 2241;
                            this.dictionaryCallStmt();
                        }
                        break;
                }
                this.state = 2253;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2245;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2244;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2247;
                                this.match(vbaParser.LPAREN);
                                this.state = 2248;
                                this.subscripts();
                                this.state = 2249;
                                this.match(vbaParser.RPAREN);
                            }
                        }
                    }
                    this.state = 2255;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 361, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.iCS_B_ProcedureCall = function () {
        var _localctx = new ICS_B_ProcedureCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, vbaParser.RULE_iCS_B_ProcedureCall);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2256;
                this.certainIdentifier();
                this.state = 2259;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 362, this._ctx)) {
                    case 1:
                        {
                            this.state = 2257;
                            this.match(vbaParser.WS);
                            this.state = 2258;
                            this.argsCall();
                        }
                        break;
                }
                this.state = 2270;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2262;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2261;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2264;
                                this.match(vbaParser.LPAREN);
                                this.state = 2265;
                                this.subscripts();
                                this.state = 2266;
                                this.match(vbaParser.RPAREN);
                            }
                        }
                    }
                    this.state = 2272;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.implicitCallStmt_InStmt = function () {
        var _localctx = new ImplicitCallStmt_InStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, vbaParser.RULE_implicitCallStmt_InStmt);
        try {
            this.state = 2277;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 365, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2273;
                        this.iCS_S_MembersCall();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2274;
                        this.iCS_S_VariableOrProcedureCall();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2275;
                        this.iCS_S_ProcedureOrArrayCall();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2276;
                        this.iCS_S_DictionaryCall();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.iCS_S_VariableOrProcedureCall = function () {
        var _localctx = new ICS_S_VariableOrProcedureCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, vbaParser.RULE_iCS_S_VariableOrProcedureCall);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2279;
                this.ambiguousIdentifier();
                this.state = 2281;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 366, this._ctx)) {
                    case 1:
                        {
                            this.state = 2280;
                            this.typeHint();
                        }
                        break;
                }
                this.state = 2284;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 367, this._ctx)) {
                    case 1:
                        {
                            this.state = 2283;
                            this.dictionaryCallStmt();
                        }
                        break;
                }
                this.state = 2295;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2287;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2286;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2289;
                                this.match(vbaParser.LPAREN);
                                this.state = 2290;
                                this.subscripts();
                                this.state = 2291;
                                this.match(vbaParser.RPAREN);
                            }
                        }
                    }
                    this.state = 2297;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 369, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.iCS_S_ProcedureOrArrayCall = function () {
        var _localctx = new ICS_S_ProcedureOrArrayCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, vbaParser.RULE_iCS_S_ProcedureOrArrayCall);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2300;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 370, this._ctx)) {
                    case 1:
                        {
                            this.state = 2298;
                            this.ambiguousIdentifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2299;
                            this.baseType();
                        }
                        break;
                }
                this.state = 2303;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la === vbaParser.AMPERSAND) {
                    {
                        this.state = 2302;
                        this.typeHint();
                    }
                }
                this.state = 2306;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 2305;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 2308;
                this.match(vbaParser.LPAREN);
                this.state = 2310;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 373, this._ctx)) {
                    case 1:
                        {
                            this.state = 2309;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 2316;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 375, this._ctx)) {
                    case 1:
                        {
                            this.state = 2312;
                            this.argsCall();
                            this.state = 2314;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2313;
                                    this.match(vbaParser.WS);
                                }
                            }
                        }
                        break;
                }
                this.state = 2318;
                this.match(vbaParser.RPAREN);
                this.state = 2320;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 376, this._ctx)) {
                    case 1:
                        {
                            this.state = 2319;
                            this.dictionaryCallStmt();
                        }
                        break;
                }
                this.state = 2331;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2323;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2322;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2325;
                                this.match(vbaParser.LPAREN);
                                this.state = 2326;
                                this.subscripts();
                                this.state = 2327;
                                this.match(vbaParser.RPAREN);
                            }
                        }
                    }
                    this.state = 2333;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.iCS_S_MembersCall = function () {
        var _localctx = new ICS_S_MembersCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, vbaParser.RULE_iCS_S_MembersCall);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2336;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 379, this._ctx)) {
                    case 1:
                        {
                            this.state = 2334;
                            this.iCS_S_VariableOrProcedureCall();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2335;
                            this.iCS_S_ProcedureOrArrayCall();
                        }
                        break;
                }
                this.state = 2339;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2338;
                                    this.iCS_S_MemberCall();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2341;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 2344;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 381, this._ctx)) {
                    case 1:
                        {
                            this.state = 2343;
                            this.dictionaryCallStmt();
                        }
                        break;
                }
                this.state = 2355;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2347;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2346;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2349;
                                this.match(vbaParser.LPAREN);
                                this.state = 2350;
                                this.subscripts();
                                this.state = 2351;
                                this.match(vbaParser.RPAREN);
                            }
                        }
                    }
                    this.state = 2357;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.iCS_S_MemberCall = function () {
        var _localctx = new ICS_S_MemberCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, vbaParser.RULE_iCS_S_MemberCall);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2358;
                _la = this._input.LA(1);
                if (!(_la === vbaParser.T__3 || _la === vbaParser.T__4)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2361;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 384, this._ctx)) {
                    case 1:
                        {
                            this.state = 2359;
                            this.iCS_S_VariableOrProcedureCall();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2360;
                            this.iCS_S_ProcedureOrArrayCall();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.iCS_S_DictionaryCall = function () {
        var _localctx = new ICS_S_DictionaryCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, vbaParser.RULE_iCS_S_DictionaryCall);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2363;
                this.dictionaryCallStmt();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.argsCall = function () {
        var _localctx = new ArgsCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, vbaParser.RULE_argsCall);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2377;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2366;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.RPAREN - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) !== 0)) {
                                    {
                                        this.state = 2365;
                                        this.argCall();
                                    }
                                }
                                this.state = 2369;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2368;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2371;
                                _la = this._input.LA(1);
                                if (!(_la === vbaParser.T__0 || _la === vbaParser.T__1)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                this.state = 2373;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 387, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 2372;
                                            this.match(vbaParser.WS);
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    this.state = 2379;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
                }
                this.state = 2380;
                this.argCall();
                this.state = 2393;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2382;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2381;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2384;
                                _la = this._input.LA(1);
                                if (!(_la === vbaParser.T__0 || _la === vbaParser.T__1)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                this.state = 2386;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 390, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 2385;
                                            this.match(vbaParser.WS);
                                        }
                                        break;
                                }
                                this.state = 2389;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 391, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 2388;
                                            this.argCall();
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    this.state = 2395;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.argCall = function () {
        var _localctx = new ArgCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, vbaParser.RULE_argCall);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2397;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 393, this._ctx)) {
                    case 1:
                        {
                            this.state = 2396;
                            this.match(vbaParser.LPAREN);
                        }
                        break;
                }
                this.state = 2401;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 394, this._ctx)) {
                    case 1:
                        {
                            this.state = 2399;
                            _la = this._input.LA(1);
                            if (!(_la === vbaParser.BYVAL || _la === vbaParser.BYREF || _la === vbaParser.PARAMARRAY)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 2400;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 2404;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.RPAREN) {
                    {
                        this.state = 2403;
                        this.match(vbaParser.RPAREN);
                    }
                }
                this.state = 2406;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.dictionaryCallStmt = function () {
        var _localctx = new DictionaryCallStmtContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, vbaParser.RULE_dictionaryCallStmt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2408;
                this.match(vbaParser.T__4);
                this.state = 2409;
                this.ambiguousIdentifier();
                this.state = 2411;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 396, this._ctx)) {
                    case 1:
                        {
                            this.state = 2410;
                            this.typeHint();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.argList = function () {
        var _localctx = new ArgListContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, vbaParser.RULE_argList);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2413;
                this.match(vbaParser.LPAREN);
                this.state = 2431;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 401, this._ctx)) {
                    case 1:
                        {
                            this.state = 2415;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2414;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2417;
                            this.arg();
                            this.state = 2428;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 2419;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === vbaParser.WS) {
                                                {
                                                    this.state = 2418;
                                                    this.match(vbaParser.WS);
                                                }
                                            }
                                            this.state = 2421;
                                            this.match(vbaParser.T__0);
                                            this.state = 2423;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === vbaParser.WS) {
                                                {
                                                    this.state = 2422;
                                                    this.match(vbaParser.WS);
                                                }
                                            }
                                            this.state = 2425;
                                            this.arg();
                                        }
                                    }
                                }
                                this.state = 2430;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
                            }
                        }
                        break;
                }
                this.state = 2434;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 2433;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 2436;
                this.match(vbaParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.arg = function () {
        var _localctx = new ArgContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, vbaParser.RULE_arg);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2440;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 403, this._ctx)) {
                    case 1:
                        {
                            this.state = 2438;
                            this.match(vbaParser.OPTIONAL);
                            this.state = 2439;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 2444;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 404, this._ctx)) {
                    case 1:
                        {
                            this.state = 2442;
                            _la = this._input.LA(1);
                            if (!(_la === vbaParser.BYVAL || _la === vbaParser.BYREF)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 2443;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 2448;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 405, this._ctx)) {
                    case 1:
                        {
                            this.state = 2446;
                            this.match(vbaParser.PARAMARRAY);
                            this.state = 2447;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 2450;
                this.ambiguousIdentifier();
                this.state = 2452;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la === vbaParser.AMPERSAND) {
                    {
                        this.state = 2451;
                        this.typeHint();
                    }
                }
                this.state = 2462;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 409, this._ctx)) {
                    case 1:
                        {
                            this.state = 2455;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2454;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2457;
                            this.match(vbaParser.LPAREN);
                            this.state = 2459;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2458;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2461;
                            this.match(vbaParser.RPAREN);
                        }
                        break;
                }
                this.state = 2468;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 411, this._ctx)) {
                    case 1:
                        {
                            this.state = 2465;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2464;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2467;
                            this.asTypeClause();
                        }
                        break;
                }
                this.state = 2474;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 413, this._ctx)) {
                    case 1:
                        {
                            this.state = 2471;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2470;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2473;
                            this.argDefaultValue();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.argDefaultValue = function () {
        var _localctx = new ArgDefaultValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, vbaParser.RULE_argDefaultValue);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2476;
                this.match(vbaParser.EQ);
                this.state = 2478;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 2477;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 2480;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.subscripts = function () {
        var _localctx = new SubscriptsContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, vbaParser.RULE_subscripts);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2482;
                this.subscript();
                this.state = 2493;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2484;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2483;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2486;
                                this.match(vbaParser.T__0);
                                this.state = 2488;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === vbaParser.WS) {
                                    {
                                        this.state = 2487;
                                        this.match(vbaParser.WS);
                                    }
                                }
                                this.state = 2490;
                                this.subscript();
                            }
                        }
                    }
                    this.state = 2495;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.subscript = function () {
        var _localctx = new SubscriptContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, vbaParser.RULE_subscript);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2501;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 418, this._ctx)) {
                    case 1:
                        {
                            this.state = 2496;
                            this.valueStmt(0);
                            this.state = 2497;
                            this.match(vbaParser.WS);
                            this.state = 2498;
                            this.match(vbaParser.TO);
                            this.state = 2499;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 2503;
                this.valueStmt(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.ambiguousIdentifier = function () {
        var _localctx = new AmbiguousIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, vbaParser.RULE_ambiguousIdentifier);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2507;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                this.state = 2507;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case vbaParser.IDENTIFIER:
                                        {
                                            this.state = 2505;
                                            this.match(vbaParser.IDENTIFIER);
                                        }
                                        break;
                                    case vbaParser.ACCESS:
                                    case vbaParser.ADDRESSOF:
                                    case vbaParser.ALIAS:
                                    case vbaParser.AND:
                                    case vbaParser.ATTRIBUTE:
                                    case vbaParser.APPACTIVATE:
                                    case vbaParser.APPEND:
                                    case vbaParser.AS:
                                    case vbaParser.BEGIN:
                                    case vbaParser.BEEP:
                                    case vbaParser.BINARY:
                                    case vbaParser.BOOLEAN:
                                    case vbaParser.BYVAL:
                                    case vbaParser.BYREF:
                                    case vbaParser.BYTE:
                                    case vbaParser.CALL:
                                    case vbaParser.CASE:
                                    case vbaParser.CHDIR:
                                    case vbaParser.CHDRIVE:
                                    case vbaParser.CLASS:
                                    case vbaParser.CLOSE:
                                    case vbaParser.COLLECTION:
                                    case vbaParser.CONST:
                                    case vbaParser.DATABASE:
                                    case vbaParser.DATE:
                                    case vbaParser.DECLARE:
                                    case vbaParser.DEFBOOL:
                                    case vbaParser.DEFBYTE:
                                    case vbaParser.DEFDATE:
                                    case vbaParser.DEFDBL:
                                    case vbaParser.DEFDEC:
                                    case vbaParser.DEFCUR:
                                    case vbaParser.DEFINT:
                                    case vbaParser.DEFLNG:
                                    case vbaParser.DEFOBJ:
                                    case vbaParser.DEFSNG:
                                    case vbaParser.DEFSTR:
                                    case vbaParser.DEFVAR:
                                    case vbaParser.DELETESETTING:
                                    case vbaParser.DIM:
                                    case vbaParser.DO:
                                    case vbaParser.DOUBLE:
                                    case vbaParser.EACH:
                                    case vbaParser.ELSE:
                                    case vbaParser.ELSEIF:
                                    case vbaParser.END:
                                    case vbaParser.ENUM:
                                    case vbaParser.EQV:
                                    case vbaParser.ERASE:
                                    case vbaParser.ERROR:
                                    case vbaParser.EVENT:
                                    case vbaParser.FALSE:
                                    case vbaParser.FILECOPY:
                                    case vbaParser.FRIEND:
                                    case vbaParser.FOR:
                                    case vbaParser.FUNCTION:
                                    case vbaParser.GET:
                                    case vbaParser.GLOBAL:
                                    case vbaParser.GOSUB:
                                    case vbaParser.GOTO:
                                    case vbaParser.IF:
                                    case vbaParser.IMP:
                                    case vbaParser.IMPLEMENTS:
                                    case vbaParser.IN:
                                    case vbaParser.INPUT:
                                    case vbaParser.IS:
                                    case vbaParser.INTEGER:
                                    case vbaParser.KILL:
                                    case vbaParser.LOAD:
                                    case vbaParser.LOCK:
                                    case vbaParser.LONG:
                                    case vbaParser.LOOP:
                                    case vbaParser.LEN:
                                    case vbaParser.LET:
                                    case vbaParser.LIB:
                                    case vbaParser.LIKE:
                                    case vbaParser.LSET:
                                    case vbaParser.ME:
                                    case vbaParser.MID:
                                    case vbaParser.MKDIR:
                                    case vbaParser.MOD:
                                    case vbaParser.NAME:
                                    case vbaParser.NEXT:
                                    case vbaParser.NEW:
                                    case vbaParser.NOT:
                                    case vbaParser.NOTHING:
                                    case vbaParser.NULL:
                                    case vbaParser.ON:
                                    case vbaParser.OPEN:
                                    case vbaParser.OPTIONAL:
                                    case vbaParser.OR:
                                    case vbaParser.OUTPUT:
                                    case vbaParser.PARAMARRAY:
                                    case vbaParser.PRESERVE:
                                    case vbaParser.PRINT:
                                    case vbaParser.PRIVATE:
                                    case vbaParser.PUBLIC:
                                    case vbaParser.PUT:
                                    case vbaParser.RANDOM:
                                    case vbaParser.RANDOMIZE:
                                    case vbaParser.RAISEEVENT:
                                    case vbaParser.READ:
                                    case vbaParser.REDIM:
                                    case vbaParser.REM:
                                    case vbaParser.RESET:
                                    case vbaParser.RESUME:
                                    case vbaParser.RETURN:
                                    case vbaParser.RMDIR:
                                    case vbaParser.RSET:
                                    case vbaParser.SAVEPICTURE:
                                    case vbaParser.SAVESETTING:
                                    case vbaParser.SEEK:
                                    case vbaParser.SELECT:
                                    case vbaParser.SENDKEYS:
                                    case vbaParser.SET:
                                    case vbaParser.SETATTR:
                                    case vbaParser.SHARED:
                                    case vbaParser.SINGLE:
                                    case vbaParser.SPC:
                                    case vbaParser.STATIC:
                                    case vbaParser.STEP:
                                    case vbaParser.STOP:
                                    case vbaParser.STRING:
                                    case vbaParser.SUB:
                                    case vbaParser.TAB:
                                    case vbaParser.TEXT:
                                    case vbaParser.THEN:
                                    case vbaParser.TIME:
                                    case vbaParser.TO:
                                    case vbaParser.TRUE:
                                    case vbaParser.TYPE:
                                    case vbaParser.TYPEOF:
                                    case vbaParser.UNLOAD:
                                    case vbaParser.UNLOCK:
                                    case vbaParser.UNTIL:
                                    case vbaParser.VARIANT:
                                    case vbaParser.VERSION:
                                    case vbaParser.WEND:
                                    case vbaParser.WHILE:
                                    case vbaParser.WIDTH:
                                    case vbaParser.WITH:
                                    case vbaParser.WITHEVENTS:
                                    case vbaParser.WRITE:
                                    case vbaParser.XOR:
                                        {
                                            this.state = 2506;
                                            this.ambiguousKeyword();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 2509;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.asTypeClause = function () {
        var _localctx = new AsTypeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 260, vbaParser.RULE_asTypeClause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2511;
                this.match(vbaParser.AS);
                this.state = 2513;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 2512;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 2517;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 422, this._ctx)) {
                    case 1:
                        {
                            this.state = 2515;
                            this.match(vbaParser.NEW);
                            this.state = 2516;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
                this.state = 2519;
                this.type();
                this.state = 2524;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 424, this._ctx)) {
                    case 1:
                        {
                            this.state = 2521;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2520;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2523;
                            this.fieldLength();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.baseType = function () {
        var _localctx = new BaseTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, vbaParser.RULE_baseType);
        var _la;
        try {
            this.state = 2546;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbaParser.BOOLEAN:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2526;
                        this.match(vbaParser.BOOLEAN);
                    }
                    break;
                case vbaParser.BYTE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2527;
                        this.match(vbaParser.BYTE);
                    }
                    break;
                case vbaParser.COLLECTION:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2528;
                        this.match(vbaParser.COLLECTION);
                    }
                    break;
                case vbaParser.DATE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2529;
                        this.match(vbaParser.DATE);
                    }
                    break;
                case vbaParser.DOUBLE:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2530;
                        this.match(vbaParser.DOUBLE);
                    }
                    break;
                case vbaParser.INTEGER:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2531;
                        this.match(vbaParser.INTEGER);
                    }
                    break;
                case vbaParser.LONG:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2532;
                        this.match(vbaParser.LONG);
                    }
                    break;
                case vbaParser.SINGLE:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 2533;
                        this.match(vbaParser.SINGLE);
                    }
                    break;
                case vbaParser.STRING:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 2534;
                        this.match(vbaParser.STRING);
                        this.state = 2543;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 427, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2536;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === vbaParser.WS) {
                                        {
                                            this.state = 2535;
                                            this.match(vbaParser.WS);
                                        }
                                    }
                                    this.state = 2538;
                                    this.match(vbaParser.MULT);
                                    this.state = 2540;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === vbaParser.WS) {
                                        {
                                            this.state = 2539;
                                            this.match(vbaParser.WS);
                                        }
                                    }
                                    this.state = 2542;
                                    this.valueStmt(0);
                                }
                                break;
                        }
                    }
                    break;
                case vbaParser.VARIANT:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 2545;
                        this.match(vbaParser.VARIANT);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.certainIdentifier = function () {
        var _localctx = new CertainIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, vbaParser.RULE_certainIdentifier);
        try {
            var _alt = void 0;
            this.state = 2563;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbaParser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2548;
                        this.match(vbaParser.IDENTIFIER);
                        this.state = 2553;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    this.state = 2551;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case vbaParser.ACCESS:
                                        case vbaParser.ADDRESSOF:
                                        case vbaParser.ALIAS:
                                        case vbaParser.AND:
                                        case vbaParser.ATTRIBUTE:
                                        case vbaParser.APPACTIVATE:
                                        case vbaParser.APPEND:
                                        case vbaParser.AS:
                                        case vbaParser.BEGIN:
                                        case vbaParser.BEEP:
                                        case vbaParser.BINARY:
                                        case vbaParser.BOOLEAN:
                                        case vbaParser.BYVAL:
                                        case vbaParser.BYREF:
                                        case vbaParser.BYTE:
                                        case vbaParser.CALL:
                                        case vbaParser.CASE:
                                        case vbaParser.CHDIR:
                                        case vbaParser.CHDRIVE:
                                        case vbaParser.CLASS:
                                        case vbaParser.CLOSE:
                                        case vbaParser.COLLECTION:
                                        case vbaParser.CONST:
                                        case vbaParser.DATABASE:
                                        case vbaParser.DATE:
                                        case vbaParser.DECLARE:
                                        case vbaParser.DEFBOOL:
                                        case vbaParser.DEFBYTE:
                                        case vbaParser.DEFDATE:
                                        case vbaParser.DEFDBL:
                                        case vbaParser.DEFDEC:
                                        case vbaParser.DEFCUR:
                                        case vbaParser.DEFINT:
                                        case vbaParser.DEFLNG:
                                        case vbaParser.DEFOBJ:
                                        case vbaParser.DEFSNG:
                                        case vbaParser.DEFSTR:
                                        case vbaParser.DEFVAR:
                                        case vbaParser.DELETESETTING:
                                        case vbaParser.DIM:
                                        case vbaParser.DO:
                                        case vbaParser.DOUBLE:
                                        case vbaParser.EACH:
                                        case vbaParser.ELSE:
                                        case vbaParser.ELSEIF:
                                        case vbaParser.END:
                                        case vbaParser.ENUM:
                                        case vbaParser.EQV:
                                        case vbaParser.ERASE:
                                        case vbaParser.ERROR:
                                        case vbaParser.EVENT:
                                        case vbaParser.FALSE:
                                        case vbaParser.FILECOPY:
                                        case vbaParser.FRIEND:
                                        case vbaParser.FOR:
                                        case vbaParser.FUNCTION:
                                        case vbaParser.GET:
                                        case vbaParser.GLOBAL:
                                        case vbaParser.GOSUB:
                                        case vbaParser.GOTO:
                                        case vbaParser.IF:
                                        case vbaParser.IMP:
                                        case vbaParser.IMPLEMENTS:
                                        case vbaParser.IN:
                                        case vbaParser.INPUT:
                                        case vbaParser.IS:
                                        case vbaParser.INTEGER:
                                        case vbaParser.KILL:
                                        case vbaParser.LOAD:
                                        case vbaParser.LOCK:
                                        case vbaParser.LONG:
                                        case vbaParser.LOOP:
                                        case vbaParser.LEN:
                                        case vbaParser.LET:
                                        case vbaParser.LIB:
                                        case vbaParser.LIKE:
                                        case vbaParser.LSET:
                                        case vbaParser.ME:
                                        case vbaParser.MID:
                                        case vbaParser.MKDIR:
                                        case vbaParser.MOD:
                                        case vbaParser.NAME:
                                        case vbaParser.NEXT:
                                        case vbaParser.NEW:
                                        case vbaParser.NOT:
                                        case vbaParser.NOTHING:
                                        case vbaParser.NULL:
                                        case vbaParser.ON:
                                        case vbaParser.OPEN:
                                        case vbaParser.OPTIONAL:
                                        case vbaParser.OR:
                                        case vbaParser.OUTPUT:
                                        case vbaParser.PARAMARRAY:
                                        case vbaParser.PRESERVE:
                                        case vbaParser.PRINT:
                                        case vbaParser.PRIVATE:
                                        case vbaParser.PUBLIC:
                                        case vbaParser.PUT:
                                        case vbaParser.RANDOM:
                                        case vbaParser.RANDOMIZE:
                                        case vbaParser.RAISEEVENT:
                                        case vbaParser.READ:
                                        case vbaParser.REDIM:
                                        case vbaParser.REM:
                                        case vbaParser.RESET:
                                        case vbaParser.RESUME:
                                        case vbaParser.RETURN:
                                        case vbaParser.RMDIR:
                                        case vbaParser.RSET:
                                        case vbaParser.SAVEPICTURE:
                                        case vbaParser.SAVESETTING:
                                        case vbaParser.SEEK:
                                        case vbaParser.SELECT:
                                        case vbaParser.SENDKEYS:
                                        case vbaParser.SET:
                                        case vbaParser.SETATTR:
                                        case vbaParser.SHARED:
                                        case vbaParser.SINGLE:
                                        case vbaParser.SPC:
                                        case vbaParser.STATIC:
                                        case vbaParser.STEP:
                                        case vbaParser.STOP:
                                        case vbaParser.STRING:
                                        case vbaParser.SUB:
                                        case vbaParser.TAB:
                                        case vbaParser.TEXT:
                                        case vbaParser.THEN:
                                        case vbaParser.TIME:
                                        case vbaParser.TO:
                                        case vbaParser.TRUE:
                                        case vbaParser.TYPE:
                                        case vbaParser.TYPEOF:
                                        case vbaParser.UNLOAD:
                                        case vbaParser.UNLOCK:
                                        case vbaParser.UNTIL:
                                        case vbaParser.VARIANT:
                                        case vbaParser.VERSION:
                                        case vbaParser.WEND:
                                        case vbaParser.WHILE:
                                        case vbaParser.WIDTH:
                                        case vbaParser.WITH:
                                        case vbaParser.WITHEVENTS:
                                        case vbaParser.WRITE:
                                        case vbaParser.XOR:
                                            {
                                                this.state = 2549;
                                                this.ambiguousKeyword();
                                            }
                                            break;
                                        case vbaParser.IDENTIFIER:
                                            {
                                                this.state = 2550;
                                                this.match(vbaParser.IDENTIFIER);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                }
                            }
                            this.state = 2555;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
                        }
                    }
                    break;
                case vbaParser.ACCESS:
                case vbaParser.ADDRESSOF:
                case vbaParser.ALIAS:
                case vbaParser.AND:
                case vbaParser.ATTRIBUTE:
                case vbaParser.APPACTIVATE:
                case vbaParser.APPEND:
                case vbaParser.AS:
                case vbaParser.BEGIN:
                case vbaParser.BEEP:
                case vbaParser.BINARY:
                case vbaParser.BOOLEAN:
                case vbaParser.BYVAL:
                case vbaParser.BYREF:
                case vbaParser.BYTE:
                case vbaParser.CALL:
                case vbaParser.CASE:
                case vbaParser.CHDIR:
                case vbaParser.CHDRIVE:
                case vbaParser.CLASS:
                case vbaParser.CLOSE:
                case vbaParser.COLLECTION:
                case vbaParser.CONST:
                case vbaParser.DATABASE:
                case vbaParser.DATE:
                case vbaParser.DECLARE:
                case vbaParser.DEFBOOL:
                case vbaParser.DEFBYTE:
                case vbaParser.DEFDATE:
                case vbaParser.DEFDBL:
                case vbaParser.DEFDEC:
                case vbaParser.DEFCUR:
                case vbaParser.DEFINT:
                case vbaParser.DEFLNG:
                case vbaParser.DEFOBJ:
                case vbaParser.DEFSNG:
                case vbaParser.DEFSTR:
                case vbaParser.DEFVAR:
                case vbaParser.DELETESETTING:
                case vbaParser.DIM:
                case vbaParser.DO:
                case vbaParser.DOUBLE:
                case vbaParser.EACH:
                case vbaParser.ELSE:
                case vbaParser.ELSEIF:
                case vbaParser.END:
                case vbaParser.ENUM:
                case vbaParser.EQV:
                case vbaParser.ERASE:
                case vbaParser.ERROR:
                case vbaParser.EVENT:
                case vbaParser.FALSE:
                case vbaParser.FILECOPY:
                case vbaParser.FRIEND:
                case vbaParser.FOR:
                case vbaParser.FUNCTION:
                case vbaParser.GET:
                case vbaParser.GLOBAL:
                case vbaParser.GOSUB:
                case vbaParser.GOTO:
                case vbaParser.IF:
                case vbaParser.IMP:
                case vbaParser.IMPLEMENTS:
                case vbaParser.IN:
                case vbaParser.INPUT:
                case vbaParser.IS:
                case vbaParser.INTEGER:
                case vbaParser.KILL:
                case vbaParser.LOAD:
                case vbaParser.LOCK:
                case vbaParser.LONG:
                case vbaParser.LOOP:
                case vbaParser.LEN:
                case vbaParser.LET:
                case vbaParser.LIB:
                case vbaParser.LIKE:
                case vbaParser.LSET:
                case vbaParser.ME:
                case vbaParser.MID:
                case vbaParser.MKDIR:
                case vbaParser.MOD:
                case vbaParser.NAME:
                case vbaParser.NEXT:
                case vbaParser.NEW:
                case vbaParser.NOT:
                case vbaParser.NOTHING:
                case vbaParser.NULL:
                case vbaParser.ON:
                case vbaParser.OPEN:
                case vbaParser.OPTIONAL:
                case vbaParser.OR:
                case vbaParser.OUTPUT:
                case vbaParser.PARAMARRAY:
                case vbaParser.PRESERVE:
                case vbaParser.PRINT:
                case vbaParser.PRIVATE:
                case vbaParser.PUBLIC:
                case vbaParser.PUT:
                case vbaParser.RANDOM:
                case vbaParser.RANDOMIZE:
                case vbaParser.RAISEEVENT:
                case vbaParser.READ:
                case vbaParser.REDIM:
                case vbaParser.REM:
                case vbaParser.RESET:
                case vbaParser.RESUME:
                case vbaParser.RETURN:
                case vbaParser.RMDIR:
                case vbaParser.RSET:
                case vbaParser.SAVEPICTURE:
                case vbaParser.SAVESETTING:
                case vbaParser.SEEK:
                case vbaParser.SELECT:
                case vbaParser.SENDKEYS:
                case vbaParser.SET:
                case vbaParser.SETATTR:
                case vbaParser.SHARED:
                case vbaParser.SINGLE:
                case vbaParser.SPC:
                case vbaParser.STATIC:
                case vbaParser.STEP:
                case vbaParser.STOP:
                case vbaParser.STRING:
                case vbaParser.SUB:
                case vbaParser.TAB:
                case vbaParser.TEXT:
                case vbaParser.THEN:
                case vbaParser.TIME:
                case vbaParser.TO:
                case vbaParser.TRUE:
                case vbaParser.TYPE:
                case vbaParser.TYPEOF:
                case vbaParser.UNLOAD:
                case vbaParser.UNLOCK:
                case vbaParser.UNTIL:
                case vbaParser.VARIANT:
                case vbaParser.VERSION:
                case vbaParser.WEND:
                case vbaParser.WHILE:
                case vbaParser.WIDTH:
                case vbaParser.WITH:
                case vbaParser.WITHEVENTS:
                case vbaParser.WRITE:
                case vbaParser.XOR:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2556;
                        this.ambiguousKeyword();
                        this.state = 2559;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        this.state = 2559;
                                        this._errHandler.sync(this);
                                        switch (this._input.LA(1)) {
                                            case vbaParser.ACCESS:
                                            case vbaParser.ADDRESSOF:
                                            case vbaParser.ALIAS:
                                            case vbaParser.AND:
                                            case vbaParser.ATTRIBUTE:
                                            case vbaParser.APPACTIVATE:
                                            case vbaParser.APPEND:
                                            case vbaParser.AS:
                                            case vbaParser.BEGIN:
                                            case vbaParser.BEEP:
                                            case vbaParser.BINARY:
                                            case vbaParser.BOOLEAN:
                                            case vbaParser.BYVAL:
                                            case vbaParser.BYREF:
                                            case vbaParser.BYTE:
                                            case vbaParser.CALL:
                                            case vbaParser.CASE:
                                            case vbaParser.CHDIR:
                                            case vbaParser.CHDRIVE:
                                            case vbaParser.CLASS:
                                            case vbaParser.CLOSE:
                                            case vbaParser.COLLECTION:
                                            case vbaParser.CONST:
                                            case vbaParser.DATABASE:
                                            case vbaParser.DATE:
                                            case vbaParser.DECLARE:
                                            case vbaParser.DEFBOOL:
                                            case vbaParser.DEFBYTE:
                                            case vbaParser.DEFDATE:
                                            case vbaParser.DEFDBL:
                                            case vbaParser.DEFDEC:
                                            case vbaParser.DEFCUR:
                                            case vbaParser.DEFINT:
                                            case vbaParser.DEFLNG:
                                            case vbaParser.DEFOBJ:
                                            case vbaParser.DEFSNG:
                                            case vbaParser.DEFSTR:
                                            case vbaParser.DEFVAR:
                                            case vbaParser.DELETESETTING:
                                            case vbaParser.DIM:
                                            case vbaParser.DO:
                                            case vbaParser.DOUBLE:
                                            case vbaParser.EACH:
                                            case vbaParser.ELSE:
                                            case vbaParser.ELSEIF:
                                            case vbaParser.END:
                                            case vbaParser.ENUM:
                                            case vbaParser.EQV:
                                            case vbaParser.ERASE:
                                            case vbaParser.ERROR:
                                            case vbaParser.EVENT:
                                            case vbaParser.FALSE:
                                            case vbaParser.FILECOPY:
                                            case vbaParser.FRIEND:
                                            case vbaParser.FOR:
                                            case vbaParser.FUNCTION:
                                            case vbaParser.GET:
                                            case vbaParser.GLOBAL:
                                            case vbaParser.GOSUB:
                                            case vbaParser.GOTO:
                                            case vbaParser.IF:
                                            case vbaParser.IMP:
                                            case vbaParser.IMPLEMENTS:
                                            case vbaParser.IN:
                                            case vbaParser.INPUT:
                                            case vbaParser.IS:
                                            case vbaParser.INTEGER:
                                            case vbaParser.KILL:
                                            case vbaParser.LOAD:
                                            case vbaParser.LOCK:
                                            case vbaParser.LONG:
                                            case vbaParser.LOOP:
                                            case vbaParser.LEN:
                                            case vbaParser.LET:
                                            case vbaParser.LIB:
                                            case vbaParser.LIKE:
                                            case vbaParser.LSET:
                                            case vbaParser.ME:
                                            case vbaParser.MID:
                                            case vbaParser.MKDIR:
                                            case vbaParser.MOD:
                                            case vbaParser.NAME:
                                            case vbaParser.NEXT:
                                            case vbaParser.NEW:
                                            case vbaParser.NOT:
                                            case vbaParser.NOTHING:
                                            case vbaParser.NULL:
                                            case vbaParser.ON:
                                            case vbaParser.OPEN:
                                            case vbaParser.OPTIONAL:
                                            case vbaParser.OR:
                                            case vbaParser.OUTPUT:
                                            case vbaParser.PARAMARRAY:
                                            case vbaParser.PRESERVE:
                                            case vbaParser.PRINT:
                                            case vbaParser.PRIVATE:
                                            case vbaParser.PUBLIC:
                                            case vbaParser.PUT:
                                            case vbaParser.RANDOM:
                                            case vbaParser.RANDOMIZE:
                                            case vbaParser.RAISEEVENT:
                                            case vbaParser.READ:
                                            case vbaParser.REDIM:
                                            case vbaParser.REM:
                                            case vbaParser.RESET:
                                            case vbaParser.RESUME:
                                            case vbaParser.RETURN:
                                            case vbaParser.RMDIR:
                                            case vbaParser.RSET:
                                            case vbaParser.SAVEPICTURE:
                                            case vbaParser.SAVESETTING:
                                            case vbaParser.SEEK:
                                            case vbaParser.SELECT:
                                            case vbaParser.SENDKEYS:
                                            case vbaParser.SET:
                                            case vbaParser.SETATTR:
                                            case vbaParser.SHARED:
                                            case vbaParser.SINGLE:
                                            case vbaParser.SPC:
                                            case vbaParser.STATIC:
                                            case vbaParser.STEP:
                                            case vbaParser.STOP:
                                            case vbaParser.STRING:
                                            case vbaParser.SUB:
                                            case vbaParser.TAB:
                                            case vbaParser.TEXT:
                                            case vbaParser.THEN:
                                            case vbaParser.TIME:
                                            case vbaParser.TO:
                                            case vbaParser.TRUE:
                                            case vbaParser.TYPE:
                                            case vbaParser.TYPEOF:
                                            case vbaParser.UNLOAD:
                                            case vbaParser.UNLOCK:
                                            case vbaParser.UNTIL:
                                            case vbaParser.VARIANT:
                                            case vbaParser.VERSION:
                                            case vbaParser.WEND:
                                            case vbaParser.WHILE:
                                            case vbaParser.WIDTH:
                                            case vbaParser.WITH:
                                            case vbaParser.WITHEVENTS:
                                            case vbaParser.WRITE:
                                            case vbaParser.XOR:
                                                {
                                                    this.state = 2557;
                                                    this.ambiguousKeyword();
                                                }
                                                break;
                                            case vbaParser.IDENTIFIER:
                                                {
                                                    this.state = 2558;
                                                    this.match(vbaParser.IDENTIFIER);
                                                }
                                                break;
                                            default:
                                                throw new NoViableAltException_1.NoViableAltException(this);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 2561;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.comparisonOperator = function () {
        var _localctx = new ComparisonOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 266, vbaParser.RULE_comparisonOperator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2565;
                _la = this._input.LA(1);
                if (!(_la === vbaParser.IS || _la === vbaParser.LIKE || ((((_la - 189)) & ~0x1F) === 0 && ((1 << (_la - 189)) & ((1 << (vbaParser.EQ - 189)) | (1 << (vbaParser.GEQ - 189)) | (1 << (vbaParser.GT - 189)) | (1 << (vbaParser.LEQ - 189)) | (1 << (vbaParser.LT - 189)) | (1 << (vbaParser.NEQ - 189)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.complexType = function () {
        var _localctx = new ComplexTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 268, vbaParser.RULE_complexType);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2567;
                this.ambiguousIdentifier();
                this.state = 2572;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2568;
                                _la = this._input.LA(1);
                                if (!(_la === vbaParser.T__3 || _la === vbaParser.T__4)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                this.state = 2569;
                                this.ambiguousIdentifier();
                            }
                        }
                    }
                    this.state = 2574;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.fieldLength = function () {
        var _localctx = new FieldLengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, vbaParser.RULE_fieldLength);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2575;
                this.match(vbaParser.MULT);
                this.state = 2577;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 2576;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 2581;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case vbaParser.INTEGERLITERAL:
                        {
                            this.state = 2579;
                            this.match(vbaParser.INTEGERLITERAL);
                        }
                        break;
                    case vbaParser.ACCESS:
                    case vbaParser.ADDRESSOF:
                    case vbaParser.ALIAS:
                    case vbaParser.AND:
                    case vbaParser.ATTRIBUTE:
                    case vbaParser.APPACTIVATE:
                    case vbaParser.APPEND:
                    case vbaParser.AS:
                    case vbaParser.BEGIN:
                    case vbaParser.BEEP:
                    case vbaParser.BINARY:
                    case vbaParser.BOOLEAN:
                    case vbaParser.BYVAL:
                    case vbaParser.BYREF:
                    case vbaParser.BYTE:
                    case vbaParser.CALL:
                    case vbaParser.CASE:
                    case vbaParser.CHDIR:
                    case vbaParser.CHDRIVE:
                    case vbaParser.CLASS:
                    case vbaParser.CLOSE:
                    case vbaParser.COLLECTION:
                    case vbaParser.CONST:
                    case vbaParser.DATABASE:
                    case vbaParser.DATE:
                    case vbaParser.DECLARE:
                    case vbaParser.DEFBOOL:
                    case vbaParser.DEFBYTE:
                    case vbaParser.DEFDATE:
                    case vbaParser.DEFDBL:
                    case vbaParser.DEFDEC:
                    case vbaParser.DEFCUR:
                    case vbaParser.DEFINT:
                    case vbaParser.DEFLNG:
                    case vbaParser.DEFOBJ:
                    case vbaParser.DEFSNG:
                    case vbaParser.DEFSTR:
                    case vbaParser.DEFVAR:
                    case vbaParser.DELETESETTING:
                    case vbaParser.DIM:
                    case vbaParser.DO:
                    case vbaParser.DOUBLE:
                    case vbaParser.EACH:
                    case vbaParser.ELSE:
                    case vbaParser.ELSEIF:
                    case vbaParser.END:
                    case vbaParser.ENUM:
                    case vbaParser.EQV:
                    case vbaParser.ERASE:
                    case vbaParser.ERROR:
                    case vbaParser.EVENT:
                    case vbaParser.FALSE:
                    case vbaParser.FILECOPY:
                    case vbaParser.FRIEND:
                    case vbaParser.FOR:
                    case vbaParser.FUNCTION:
                    case vbaParser.GET:
                    case vbaParser.GLOBAL:
                    case vbaParser.GOSUB:
                    case vbaParser.GOTO:
                    case vbaParser.IF:
                    case vbaParser.IMP:
                    case vbaParser.IMPLEMENTS:
                    case vbaParser.IN:
                    case vbaParser.INPUT:
                    case vbaParser.IS:
                    case vbaParser.INTEGER:
                    case vbaParser.KILL:
                    case vbaParser.LOAD:
                    case vbaParser.LOCK:
                    case vbaParser.LONG:
                    case vbaParser.LOOP:
                    case vbaParser.LEN:
                    case vbaParser.LET:
                    case vbaParser.LIB:
                    case vbaParser.LIKE:
                    case vbaParser.LSET:
                    case vbaParser.ME:
                    case vbaParser.MID:
                    case vbaParser.MKDIR:
                    case vbaParser.MOD:
                    case vbaParser.NAME:
                    case vbaParser.NEXT:
                    case vbaParser.NEW:
                    case vbaParser.NOT:
                    case vbaParser.NOTHING:
                    case vbaParser.NULL:
                    case vbaParser.ON:
                    case vbaParser.OPEN:
                    case vbaParser.OPTIONAL:
                    case vbaParser.OR:
                    case vbaParser.OUTPUT:
                    case vbaParser.PARAMARRAY:
                    case vbaParser.PRESERVE:
                    case vbaParser.PRINT:
                    case vbaParser.PRIVATE:
                    case vbaParser.PUBLIC:
                    case vbaParser.PUT:
                    case vbaParser.RANDOM:
                    case vbaParser.RANDOMIZE:
                    case vbaParser.RAISEEVENT:
                    case vbaParser.READ:
                    case vbaParser.REDIM:
                    case vbaParser.REM:
                    case vbaParser.RESET:
                    case vbaParser.RESUME:
                    case vbaParser.RETURN:
                    case vbaParser.RMDIR:
                    case vbaParser.RSET:
                    case vbaParser.SAVEPICTURE:
                    case vbaParser.SAVESETTING:
                    case vbaParser.SEEK:
                    case vbaParser.SELECT:
                    case vbaParser.SENDKEYS:
                    case vbaParser.SET:
                    case vbaParser.SETATTR:
                    case vbaParser.SHARED:
                    case vbaParser.SINGLE:
                    case vbaParser.SPC:
                    case vbaParser.STATIC:
                    case vbaParser.STEP:
                    case vbaParser.STOP:
                    case vbaParser.STRING:
                    case vbaParser.SUB:
                    case vbaParser.TAB:
                    case vbaParser.TEXT:
                    case vbaParser.THEN:
                    case vbaParser.TIME:
                    case vbaParser.TO:
                    case vbaParser.TRUE:
                    case vbaParser.TYPE:
                    case vbaParser.TYPEOF:
                    case vbaParser.UNLOAD:
                    case vbaParser.UNLOCK:
                    case vbaParser.UNTIL:
                    case vbaParser.VARIANT:
                    case vbaParser.VERSION:
                    case vbaParser.WEND:
                    case vbaParser.WHILE:
                    case vbaParser.WIDTH:
                    case vbaParser.WITH:
                    case vbaParser.WITHEVENTS:
                    case vbaParser.WRITE:
                    case vbaParser.XOR:
                    case vbaParser.IDENTIFIER:
                        {
                            this.state = 2580;
                            this.ambiguousIdentifier();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.letterrange = function () {
        var _localctx = new LetterrangeContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, vbaParser.RULE_letterrange);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2583;
                this.certainIdentifier();
                this.state = 2592;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 439, this._ctx)) {
                    case 1:
                        {
                            this.state = 2585;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2584;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2587;
                            this.match(vbaParser.MINUS);
                            this.state = 2589;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2588;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2591;
                            this.certainIdentifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.lineLabel = function () {
        var _localctx = new LineLabelContext(this._ctx, this.state);
        this.enterRule(_localctx, 274, vbaParser.RULE_lineLabel);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2594;
                this.ambiguousIdentifier();
                this.state = 2595;
                this.match(vbaParser.COLON);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.literal = function () {
        var _localctx = new LiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 276, vbaParser.RULE_literal);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2597;
                _la = this._input.LA(1);
                if (!(_la === vbaParser.FALSE || _la === vbaParser.NOTHING || _la === vbaParser.NULL || _la === vbaParser.TRUE || ((((_la - 205)) & ~0x1F) === 0 && ((1 << (_la - 205)) & ((1 << (vbaParser.STRINGLITERAL - 205)) | (1 << (vbaParser.OCTLITERAL - 205)) | (1 << (vbaParser.HEXLITERAL - 205)) | (1 << (vbaParser.SHORTLITERAL - 205)) | (1 << (vbaParser.INTEGERLITERAL - 205)) | (1 << (vbaParser.DOUBLELITERAL - 205)) | (1 << (vbaParser.DATELITERAL - 205)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.type = function () {
        var _localctx = new TypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 278, vbaParser.RULE_type);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2601;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 440, this._ctx)) {
                    case 1:
                        {
                            this.state = 2599;
                            this.baseType();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2600;
                            this.complexType();
                        }
                        break;
                }
                this.state = 2611;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 443, this._ctx)) {
                    case 1:
                        {
                            this.state = 2604;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2603;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2606;
                            this.match(vbaParser.LPAREN);
                            this.state = 2608;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbaParser.WS) {
                                {
                                    this.state = 2607;
                                    this.match(vbaParser.WS);
                                }
                            }
                            this.state = 2610;
                            this.match(vbaParser.RPAREN);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.typeHint = function () {
        var _localctx = new TypeHintContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, vbaParser.RULE_typeHint);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2613;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la === vbaParser.AMPERSAND)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.visibility = function () {
        var _localctx = new VisibilityContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, vbaParser.RULE_visibility);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2615;
                _la = this._input.LA(1);
                if (!(_la === vbaParser.FRIEND || _la === vbaParser.GLOBAL || _la === vbaParser.PRIVATE || _la === vbaParser.PUBLIC)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.ambiguousKeyword = function () {
        var _localctx = new AmbiguousKeywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, vbaParser.RULE_ambiguousKeyword);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2617;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.remComment = function () {
        var _localctx = new RemCommentContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, vbaParser.RULE_remComment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2619;
                this.match(vbaParser.REMCOMMENT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.comment = function () {
        var _localctx = new CommentContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, vbaParser.RULE_comment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2621;
                this.match(vbaParser.COMMENT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.endOfLine = function () {
        var _localctx = new EndOfLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, vbaParser.RULE_endOfLine);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2624;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbaParser.WS) {
                    {
                        this.state = 2623;
                        this.match(vbaParser.WS);
                    }
                }
                this.state = 2629;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case vbaParser.NEWLINE:
                        {
                            this.state = 2626;
                            this.match(vbaParser.NEWLINE);
                        }
                        break;
                    case vbaParser.COMMENT:
                        {
                            this.state = 2627;
                            this.comment();
                        }
                        break;
                    case vbaParser.REMCOMMENT:
                        {
                            this.state = 2628;
                            this.remComment();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 2632;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 446, this._ctx)) {
                    case 1:
                        {
                            this.state = 2631;
                            this.match(vbaParser.WS);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    vbaParser.prototype.endOfStatement = function () {
        var _localctx = new EndOfStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, vbaParser.RULE_endOfStatement);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2644;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 450, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 2642;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 449, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2634;
                                        this.endOfLine();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 2636;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === vbaParser.WS) {
                                            {
                                                this.state = 2635;
                                                this.match(vbaParser.WS);
                                            }
                                        }
                                        this.state = 2638;
                                        this.match(vbaParser.COLON);
                                        this.state = 2640;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 448, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 2639;
                                                    this.match(vbaParser.WS);
                                                }
                                                break;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 2646;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 450, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    vbaParser.prototype.sempred = function (_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 100:
                return this.valueStmt_sempred(_localctx, predIndex);
        }
        return true;
    };
    vbaParser.prototype.valueStmt_sempred = function (_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 23);
            case 1:
                return this.precpred(this._ctx, 22);
            case 2:
                return this.precpred(this._ctx, 21);
            case 3:
                return this.precpred(this._ctx, 20);
            case 4:
                return this.precpred(this._ctx, 19);
            case 5:
                return this.precpred(this._ctx, 18);
            case 6:
                return this.precpred(this._ctx, 17);
            case 7:
                return this.precpred(this._ctx, 16);
            case 8:
                return this.precpred(this._ctx, 15);
            case 9:
                return this.precpred(this._ctx, 12);
            case 10:
                return this.precpred(this._ctx, 11);
            case 11:
                return this.precpred(this._ctx, 10);
            case 12:
                return this.precpred(this._ctx, 9);
            case 13:
                return this.precpred(this._ctx, 8);
            case 14:
                return this.precpred(this._ctx, 7);
            case 15:
                return this.precpred(this._ctx, 6);
            case 16:
                return this.precpred(this._ctx, 5);
            case 17:
                return this.precpred(this._ctx, 4);
            case 18:
                return this.precpred(this._ctx, 3);
            case 19:
                return this.precpred(this._ctx, 2);
        }
        return true;
    };
    Object.defineProperty(vbaParser, "_ATN", {
        get: function () {
            if (!vbaParser.__ATN) {
                vbaParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(vbaParser._serializedATN));
            }
            return vbaParser.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    vbaParser.T__0 = 1;
    vbaParser.T__1 = 2;
    vbaParser.T__2 = 3;
    vbaParser.T__3 = 4;
    vbaParser.T__4 = 5;
    vbaParser.T__5 = 6;
    vbaParser.T__6 = 7;
    vbaParser.T__7 = 8;
    vbaParser.ACCESS = 9;
    vbaParser.ADDRESSOF = 10;
    vbaParser.ALIAS = 11;
    vbaParser.AND = 12;
    vbaParser.ATTRIBUTE = 13;
    vbaParser.APPACTIVATE = 14;
    vbaParser.APPEND = 15;
    vbaParser.AS = 16;
    vbaParser.BEGIN = 17;
    vbaParser.BEEP = 18;
    vbaParser.BINARY = 19;
    vbaParser.BOOLEAN = 20;
    vbaParser.BYVAL = 21;
    vbaParser.BYREF = 22;
    vbaParser.BYTE = 23;
    vbaParser.CALL = 24;
    vbaParser.CASE = 25;
    vbaParser.CHDIR = 26;
    vbaParser.CHDRIVE = 27;
    vbaParser.CLASS = 28;
    vbaParser.CLOSE = 29;
    vbaParser.COLLECTION = 30;
    vbaParser.CONST = 31;
    vbaParser.DATABASE = 32;
    vbaParser.DATE = 33;
    vbaParser.DECLARE = 34;
    vbaParser.DEFBOOL = 35;
    vbaParser.DEFBYTE = 36;
    vbaParser.DEFDATE = 37;
    vbaParser.DEFDBL = 38;
    vbaParser.DEFDEC = 39;
    vbaParser.DEFCUR = 40;
    vbaParser.DEFINT = 41;
    vbaParser.DEFLNG = 42;
    vbaParser.DEFOBJ = 43;
    vbaParser.DEFSNG = 44;
    vbaParser.DEFSTR = 45;
    vbaParser.DEFVAR = 46;
    vbaParser.DELETESETTING = 47;
    vbaParser.DIM = 48;
    vbaParser.DO = 49;
    vbaParser.DOUBLE = 50;
    vbaParser.EACH = 51;
    vbaParser.ELSE = 52;
    vbaParser.ELSEIF = 53;
    vbaParser.END_ENUM = 54;
    vbaParser.END_FUNCTION = 55;
    vbaParser.END_IF = 56;
    vbaParser.END_PROPERTY = 57;
    vbaParser.END_SELECT = 58;
    vbaParser.END_SUB = 59;
    vbaParser.END_TYPE = 60;
    vbaParser.END_WITH = 61;
    vbaParser.END = 62;
    vbaParser.ENUM = 63;
    vbaParser.EQV = 64;
    vbaParser.ERASE = 65;
    vbaParser.ERROR = 66;
    vbaParser.EVENT = 67;
    vbaParser.EXIT_DO = 68;
    vbaParser.EXIT_FOR = 69;
    vbaParser.EXIT_FUNCTION = 70;
    vbaParser.EXIT_PROPERTY = 71;
    vbaParser.EXIT_SUB = 72;
    vbaParser.FALSE = 73;
    vbaParser.FILECOPY = 74;
    vbaParser.FRIEND = 75;
    vbaParser.FOR = 76;
    vbaParser.FUNCTION = 77;
    vbaParser.GET = 78;
    vbaParser.GLOBAL = 79;
    vbaParser.GOSUB = 80;
    vbaParser.GOTO = 81;
    vbaParser.IF = 82;
    vbaParser.IMP = 83;
    vbaParser.IMPLEMENTS = 84;
    vbaParser.IN = 85;
    vbaParser.INPUT = 86;
    vbaParser.IS = 87;
    vbaParser.INTEGER = 88;
    vbaParser.KILL = 89;
    vbaParser.LOAD = 90;
    vbaParser.LOCK = 91;
    vbaParser.LONG = 92;
    vbaParser.LOOP = 93;
    vbaParser.LEN = 94;
    vbaParser.LET = 95;
    vbaParser.LIB = 96;
    vbaParser.LIKE = 97;
    vbaParser.LINE_INPUT = 98;
    vbaParser.LOCK_READ = 99;
    vbaParser.LOCK_WRITE = 100;
    vbaParser.LOCK_READ_WRITE = 101;
    vbaParser.LSET = 102;
    vbaParser.MACRO_CONST = 103;
    vbaParser.MACRO_IF = 104;
    vbaParser.MACRO_ELSEIF = 105;
    vbaParser.MACRO_ELSE = 106;
    vbaParser.MACRO_END_IF = 107;
    vbaParser.ME = 108;
    vbaParser.MID = 109;
    vbaParser.MKDIR = 110;
    vbaParser.MOD = 111;
    vbaParser.NAME = 112;
    vbaParser.NEXT = 113;
    vbaParser.NEW = 114;
    vbaParser.NOT = 115;
    vbaParser.NOTHING = 116;
    vbaParser.NULL = 117;
    vbaParser.ON = 118;
    vbaParser.ON_ERROR = 119;
    vbaParser.ON_LOCAL_ERROR = 120;
    vbaParser.OPEN = 121;
    vbaParser.OPTIONAL = 122;
    vbaParser.OPTION_BASE = 123;
    vbaParser.OPTION_EXPLICIT = 124;
    vbaParser.OPTION_COMPARE = 125;
    vbaParser.OPTION_PRIVATE_MODULE = 126;
    vbaParser.OR = 127;
    vbaParser.OUTPUT = 128;
    vbaParser.PARAMARRAY = 129;
    vbaParser.PRESERVE = 130;
    vbaParser.PRINT = 131;
    vbaParser.PRIVATE = 132;
    vbaParser.PROPERTY_GET = 133;
    vbaParser.PROPERTY_LET = 134;
    vbaParser.PROPERTY_SET = 135;
    vbaParser.PTRSAFE = 136;
    vbaParser.PUBLIC = 137;
    vbaParser.PUT = 138;
    vbaParser.RANDOM = 139;
    vbaParser.RANDOMIZE = 140;
    vbaParser.RAISEEVENT = 141;
    vbaParser.READ = 142;
    vbaParser.READ_WRITE = 143;
    vbaParser.REDIM = 144;
    vbaParser.REM = 145;
    vbaParser.RESET = 146;
    vbaParser.RESUME = 147;
    vbaParser.RETURN = 148;
    vbaParser.RMDIR = 149;
    vbaParser.RSET = 150;
    vbaParser.SAVEPICTURE = 151;
    vbaParser.SAVESETTING = 152;
    vbaParser.SEEK = 153;
    vbaParser.SELECT = 154;
    vbaParser.SENDKEYS = 155;
    vbaParser.SET = 156;
    vbaParser.SETATTR = 157;
    vbaParser.SHARED = 158;
    vbaParser.SINGLE = 159;
    vbaParser.SPC = 160;
    vbaParser.STATIC = 161;
    vbaParser.STEP = 162;
    vbaParser.STOP = 163;
    vbaParser.STRING = 164;
    vbaParser.SUB = 165;
    vbaParser.TAB = 166;
    vbaParser.TEXT = 167;
    vbaParser.THEN = 168;
    vbaParser.TIME = 169;
    vbaParser.TO = 170;
    vbaParser.TRUE = 171;
    vbaParser.TYPE = 172;
    vbaParser.TYPEOF = 173;
    vbaParser.UNLOAD = 174;
    vbaParser.UNLOCK = 175;
    vbaParser.UNTIL = 176;
    vbaParser.VARIANT = 177;
    vbaParser.VERSION = 178;
    vbaParser.WEND = 179;
    vbaParser.WHILE = 180;
    vbaParser.WIDTH = 181;
    vbaParser.WITH = 182;
    vbaParser.WITHEVENTS = 183;
    vbaParser.WRITE = 184;
    vbaParser.XOR = 185;
    vbaParser.AMPERSAND = 186;
    vbaParser.ASSIGN = 187;
    vbaParser.DIV = 188;
    vbaParser.EQ = 189;
    vbaParser.GEQ = 190;
    vbaParser.GT = 191;
    vbaParser.LEQ = 192;
    vbaParser.LPAREN = 193;
    vbaParser.LT = 194;
    vbaParser.MINUS = 195;
    vbaParser.MINUS_EQ = 196;
    vbaParser.MULT = 197;
    vbaParser.NEQ = 198;
    vbaParser.PLUS = 199;
    vbaParser.PLUS_EQ = 200;
    vbaParser.POW = 201;
    vbaParser.RPAREN = 202;
    vbaParser.L_SQUARE_BRACKET = 203;
    vbaParser.R_SQUARE_BRACKET = 204;
    vbaParser.STRINGLITERAL = 205;
    vbaParser.OCTLITERAL = 206;
    vbaParser.HEXLITERAL = 207;
    vbaParser.SHORTLITERAL = 208;
    vbaParser.INTEGERLITERAL = 209;
    vbaParser.DOUBLELITERAL = 210;
    vbaParser.DATELITERAL = 211;
    vbaParser.LINE_CONTINUATION = 212;
    vbaParser.NEWLINE = 213;
    vbaParser.REMCOMMENT = 214;
    vbaParser.COMMENT = 215;
    vbaParser.SINGLEQUOTE = 216;
    vbaParser.COLON = 217;
    vbaParser.UNDERSCORE = 218;
    vbaParser.WS = 219;
    vbaParser.IDENTIFIER = 220;
    vbaParser.RULE_startRule = 0;
    vbaParser.RULE_module = 1;
    vbaParser.RULE_moduleHeader = 2;
    vbaParser.RULE_moduleConfig = 3;
    vbaParser.RULE_moduleConfigElement = 4;
    vbaParser.RULE_moduleAttributes = 5;
    vbaParser.RULE_moduleDeclarations = 6;
    vbaParser.RULE_moduleOption = 7;
    vbaParser.RULE_moduleDeclarationsElement = 8;
    vbaParser.RULE_macroStmt = 9;
    vbaParser.RULE_moduleBody = 10;
    vbaParser.RULE_moduleBodyElement = 11;
    vbaParser.RULE_attributeStmt = 12;
    vbaParser.RULE_block = 13;
    vbaParser.RULE_blockStmt = 14;
    vbaParser.RULE_appactivateStmt = 15;
    vbaParser.RULE_beepStmt = 16;
    vbaParser.RULE_chdirStmt = 17;
    vbaParser.RULE_chdriveStmt = 18;
    vbaParser.RULE_closeStmt = 19;
    vbaParser.RULE_constStmt = 20;
    vbaParser.RULE_constSubStmt = 21;
    vbaParser.RULE_dateStmt = 22;
    vbaParser.RULE_declareStmt = 23;
    vbaParser.RULE_deftypeStmt = 24;
    vbaParser.RULE_deleteSettingStmt = 25;
    vbaParser.RULE_doLoopStmt = 26;
    vbaParser.RULE_endStmt = 27;
    vbaParser.RULE_enumerationStmt = 28;
    vbaParser.RULE_enumerationStmt_Constant = 29;
    vbaParser.RULE_eraseStmt = 30;
    vbaParser.RULE_errorStmt = 31;
    vbaParser.RULE_eventStmt = 32;
    vbaParser.RULE_exitStmt = 33;
    vbaParser.RULE_filecopyStmt = 34;
    vbaParser.RULE_forEachStmt = 35;
    vbaParser.RULE_forNextStmt = 36;
    vbaParser.RULE_functionStmt = 37;
    vbaParser.RULE_getStmt = 38;
    vbaParser.RULE_goSubStmt = 39;
    vbaParser.RULE_goToStmt = 40;
    vbaParser.RULE_ifThenElseStmt = 41;
    vbaParser.RULE_ifBlockStmt = 42;
    vbaParser.RULE_ifConditionStmt = 43;
    vbaParser.RULE_ifElseIfBlockStmt = 44;
    vbaParser.RULE_ifElseBlockStmt = 45;
    vbaParser.RULE_implementsStmt = 46;
    vbaParser.RULE_inputStmt = 47;
    vbaParser.RULE_killStmt = 48;
    vbaParser.RULE_letStmt = 49;
    vbaParser.RULE_lineInputStmt = 50;
    vbaParser.RULE_loadStmt = 51;
    vbaParser.RULE_lockStmt = 52;
    vbaParser.RULE_lsetStmt = 53;
    vbaParser.RULE_macroConstStmt = 54;
    vbaParser.RULE_macroIfThenElseStmt = 55;
    vbaParser.RULE_macroIfBlockStmt = 56;
    vbaParser.RULE_macroElseIfBlockStmt = 57;
    vbaParser.RULE_macroElseBlockStmt = 58;
    vbaParser.RULE_midStmt = 59;
    vbaParser.RULE_mkdirStmt = 60;
    vbaParser.RULE_nameStmt = 61;
    vbaParser.RULE_onErrorStmt = 62;
    vbaParser.RULE_onGoToStmt = 63;
    vbaParser.RULE_onGoSubStmt = 64;
    vbaParser.RULE_openStmt = 65;
    vbaParser.RULE_outputList = 66;
    vbaParser.RULE_outputList_Expression = 67;
    vbaParser.RULE_printStmt = 68;
    vbaParser.RULE_propertyGetStmt = 69;
    vbaParser.RULE_propertySetStmt = 70;
    vbaParser.RULE_propertyLetStmt = 71;
    vbaParser.RULE_putStmt = 72;
    vbaParser.RULE_raiseEventStmt = 73;
    vbaParser.RULE_randomizeStmt = 74;
    vbaParser.RULE_redimStmt = 75;
    vbaParser.RULE_redimSubStmt = 76;
    vbaParser.RULE_resetStmt = 77;
    vbaParser.RULE_resumeStmt = 78;
    vbaParser.RULE_returnStmt = 79;
    vbaParser.RULE_rmdirStmt = 80;
    vbaParser.RULE_rsetStmt = 81;
    vbaParser.RULE_savepictureStmt = 82;
    vbaParser.RULE_saveSettingStmt = 83;
    vbaParser.RULE_seekStmt = 84;
    vbaParser.RULE_selectCaseStmt = 85;
    vbaParser.RULE_sC_Selection = 86;
    vbaParser.RULE_sC_Case = 87;
    vbaParser.RULE_sC_Cond = 88;
    vbaParser.RULE_sendkeysStmt = 89;
    vbaParser.RULE_setattrStmt = 90;
    vbaParser.RULE_setStmt = 91;
    vbaParser.RULE_stopStmt = 92;
    vbaParser.RULE_subStmt = 93;
    vbaParser.RULE_timeStmt = 94;
    vbaParser.RULE_typeStmt = 95;
    vbaParser.RULE_typeStmt_Element = 96;
    vbaParser.RULE_typeOfStmt = 97;
    vbaParser.RULE_unloadStmt = 98;
    vbaParser.RULE_unlockStmt = 99;
    vbaParser.RULE_valueStmt = 100;
    vbaParser.RULE_variableStmt = 101;
    vbaParser.RULE_variableListStmt = 102;
    vbaParser.RULE_variableSubStmt = 103;
    vbaParser.RULE_whileWendStmt = 104;
    vbaParser.RULE_widthStmt = 105;
    vbaParser.RULE_withStmt = 106;
    vbaParser.RULE_writeStmt = 107;
    vbaParser.RULE_fileNumber = 108;
    vbaParser.RULE_explicitCallStmt = 109;
    vbaParser.RULE_eCS_ProcedureCall = 110;
    vbaParser.RULE_eCS_MemberProcedureCall = 111;
    vbaParser.RULE_implicitCallStmt_InBlock = 112;
    vbaParser.RULE_iCS_B_MemberProcedureCall = 113;
    vbaParser.RULE_iCS_B_ProcedureCall = 114;
    vbaParser.RULE_implicitCallStmt_InStmt = 115;
    vbaParser.RULE_iCS_S_VariableOrProcedureCall = 116;
    vbaParser.RULE_iCS_S_ProcedureOrArrayCall = 117;
    vbaParser.RULE_iCS_S_MembersCall = 118;
    vbaParser.RULE_iCS_S_MemberCall = 119;
    vbaParser.RULE_iCS_S_DictionaryCall = 120;
    vbaParser.RULE_argsCall = 121;
    vbaParser.RULE_argCall = 122;
    vbaParser.RULE_dictionaryCallStmt = 123;
    vbaParser.RULE_argList = 124;
    vbaParser.RULE_arg = 125;
    vbaParser.RULE_argDefaultValue = 126;
    vbaParser.RULE_subscripts = 127;
    vbaParser.RULE_subscript = 128;
    vbaParser.RULE_ambiguousIdentifier = 129;
    vbaParser.RULE_asTypeClause = 130;
    vbaParser.RULE_baseType = 131;
    vbaParser.RULE_certainIdentifier = 132;
    vbaParser.RULE_comparisonOperator = 133;
    vbaParser.RULE_complexType = 134;
    vbaParser.RULE_fieldLength = 135;
    vbaParser.RULE_letterrange = 136;
    vbaParser.RULE_lineLabel = 137;
    vbaParser.RULE_literal = 138;
    vbaParser.RULE_type = 139;
    vbaParser.RULE_typeHint = 140;
    vbaParser.RULE_visibility = 141;
    vbaParser.RULE_ambiguousKeyword = 142;
    vbaParser.RULE_remComment = 143;
    vbaParser.RULE_comment = 144;
    vbaParser.RULE_endOfLine = 145;
    vbaParser.RULE_endOfStatement = 146;
    // tslint:disable:no-trailing-whitespace
    vbaParser.ruleNames = [
        "startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement",
        "moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement",
        "macroStmt", "moduleBody", "moduleBodyElement", "attributeStmt", "block",
        "blockStmt", "appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt",
        "closeStmt", "constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt",
        "deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant",
        "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt",
        "forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt",
        "ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt",
        "implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt",
        "loadStmt", "lockStmt", "lsetStmt", "macroConstStmt", "macroIfThenElseStmt",
        "macroIfBlockStmt", "macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt",
        "mkdirStmt", "nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt",
        "outputList", "outputList_Expression", "printStmt", "propertyGetStmt",
        "propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt",
        "redimStmt", "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt",
        "rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt",
        "selectCaseStmt", "sC_Selection", "sC_Case", "sC_Cond", "sendkeysStmt",
        "setattrStmt", "setStmt", "stopStmt", "subStmt", "timeStmt", "typeStmt",
        "typeStmt_Element", "typeOfStmt", "unloadStmt", "unlockStmt", "valueStmt",
        "variableStmt", "variableListStmt", "variableSubStmt", "whileWendStmt",
        "widthStmt", "withStmt", "writeStmt", "fileNumber", "explicitCallStmt",
        "eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock",
        "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", "implicitCallStmt_InStmt",
        "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall",
        "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt",
        "argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier",
        "asTypeClause", "baseType", "certainIdentifier", "comparisonOperator",
        "complexType", "fieldLength", "letterrange", "lineLabel", "literal", "type",
        "typeHint", "visibility", "ambiguousKeyword", "remComment", "comment",
        "endOfLine", "endOfStatement",
    ];
    vbaParser._LITERAL_NAMES = [
        undefined, "','", "';'", "'#'", "'.'", "'!'", "'%'", "'@'", "'$'", undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, "'&'", "':='", undefined, "'='", "'>='", "'>'", "'<='", "'('",
        "'<'", "'-'", "'-='", "'*'", "'<>'", "'+'", "'+='", "'^'", "')'", "'['",
        "']'", undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, "'''", "':'", "'_'",
    ];
    vbaParser._SYMBOLIC_NAMES = [
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, "ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE",
        "APPACTIVATE", "APPEND", "AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL",
        "BYREF", "BYTE", "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE",
        "COLLECTION", "CONST", "DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE",
        "DEFDATE", "DEFDBL", "DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ",
        "DEFSNG", "DEFSTR", "DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE",
        "EACH", "ELSE", "ELSEIF", "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY",
        "END_SELECT", "END_SUB", "END_TYPE", "END_WITH", "END", "ENUM", "EQV",
        "ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY",
        "EXIT_SUB", "FALSE", "FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL",
        "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER",
        "KILL", "LOAD", "LOCK", "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT",
        "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_CONST", "MACRO_IF",
        "MACRO_ELSEIF", "MACRO_ELSE", "MACRO_END_IF", "ME", "MID", "MKDIR", "MOD",
        "NAME", "NEXT", "NEW", "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR",
        "OPEN", "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE",
        "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT",
        "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", "PROPERTY_SET", "PTRSAFE",
        "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE",
        "REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE",
        "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED",
        "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", "SUB", "TAB", "TEXT",
        "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL",
        "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS",
        "WRITE", "XOR", "AMPERSAND", "ASSIGN", "DIV", "EQ", "GEQ", "GT", "LEQ",
        "LPAREN", "LT", "MINUS", "MINUS_EQ", "MULT", "NEQ", "PLUS", "PLUS_EQ",
        "POW", "RPAREN", "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "STRINGLITERAL",
        "OCTLITERAL", "HEXLITERAL", "SHORTLITERAL", "INTEGERLITERAL", "DOUBLELITERAL",
        "DATELITERAL", "LINE_CONTINUATION", "NEWLINE", "REMCOMMENT", "COMMENT",
        "SINGLEQUOTE", "COLON", "UNDERSCORE", "WS", "IDENTIFIER",
    ];
    vbaParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(vbaParser._LITERAL_NAMES, vbaParser._SYMBOLIC_NAMES, []);
    vbaParser._serializedATNSegments = 6;
    vbaParser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\xDE\u0A5A\x04" +
        "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
        "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
        "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
        "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
        "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
        "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
        "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
        "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
        "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
        "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
        "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
        "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
        "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
        "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
        "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
        "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
        "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
        "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
        "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
        "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
        "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x03\x02\x03\x02" +
        "\x03\x02\x03\x03\x05\x03\u012D\n\x03\x03\x03\x07\x03\u0130\n\x03\f\x03" +
        "\x0E\x03\u0133\v\x03\x03\x03\x03\x03\x07\x03\u0137\n\x03\f\x03\x0E\x03" +
        "\u013A\v\x03\x05\x03\u013C\n\x03\x03\x03\x05\x03\u013F\n\x03\x03\x03\x07" +
        "\x03\u0142\n\x03\f\x03\x0E\x03\u0145\v\x03\x03\x03\x05\x03\u0148\n\x03" +
        "\x03\x03\x07\x03\u014B\n\x03\f\x03\x0E\x03\u014E\v\x03\x03\x03\x05\x03" +
        "\u0151\n\x03\x03\x03\x07\x03\u0154\n\x03\f\x03\x0E\x03\u0157\v\x03\x03" +
        "\x03\x05\x03\u015A\n\x03\x03\x03\x07\x03\u015D\n\x03\f\x03\x0E\x03\u0160" +
        "\v\x03\x03\x03\x05\x03\u0163\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x05\x03\x05\x07\x05\u016D\n\x05\f\x05\x0E\x05\u0170\v" +
        "\x05\x03\x05\x06\x05\u0173\n\x05\r\x05\x0E\x05\u0174\x03\x05\x03\x05\x03" +
        "\x06\x03\x06\x05\x06\u017B\n\x06\x03\x06\x03\x06\x05\x06\u017F\n\x06\x03" +
        "\x06\x03\x06\x07\x06\u0183\n\x06\f\x06\x0E\x06\u0186\v\x06\x03\x07\x03" +
        "\x07\x06\x07\u018A\n\x07\r\x07\x0E\x07\u018B\x06\x07\u018E\n\x07\r\x07" +
        "\x0E\x07\u018F\x03\b\x03\b\x06\b\u0194\n\b\r\b\x0E\b\u0195\x03\b\x03\b" +
        "\x07\b\u019A\n\b\f\b\x0E\b\u019D\v\b\x03\b\x07\b\u01A0\n\b\f\b\x0E\b\u01A3" +
        "\v\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u01AD\n\t\x03" +
        "\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x05\n\u01B9\n" +
        "\n\x03\v\x03\v\x05\v\u01BD\n\v\x03\f\x03\f\x06\f\u01C1\n\f\r\f\x0E\f\u01C2" +
        "\x03\f\x03\f\x07\f\u01C7\n\f\f\f\x0E\f\u01CA\v\f\x03\f\x07\f\u01CD\n\f" +
        "\f\f\x0E\f\u01D0\v\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\r\u01D8\n" +
        "\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\u01DE\n\x0E\x03\x0E\x03\x0E" +
        "\x05\x0E\u01E2\n\x0E\x03\x0E\x03\x0E\x05\x0E\u01E6\n\x0E\x03\x0E\x03\x0E" +
        "\x05\x0E\u01EA\n\x0E\x03\x0E\x07\x0E\u01ED\n\x0E\f\x0E\x0E\x0E\u01F0\v" +
        "\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F\u01F6\n\x0F\f\x0F\x0E\x0F" +
        "\u01F9\v\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
        "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
        "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
        "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
        "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
        "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
        "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
        "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u0240" +
        "\n\x10\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\u0246\n\x11\x03\x11\x03" +
        "\x11\x05\x11\u024A\n\x11\x03\x11\x05\x11\u024D\n\x11\x03\x12\x03\x12\x03" +
        "\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03" +
        "\x15\x03\x15\x03\x15\x05\x15\u025D\n\x15\x03\x15\x03\x15\x05\x15\u0261" +
        "\n\x15\x03\x15\x07\x15\u0264\n\x15\f\x15\x0E\x15\u0267\v\x15\x05\x15\u0269" +
        "\n\x15\x03\x16\x03\x16\x03\x16\x05\x16\u026E\n\x16\x03\x16\x03\x16\x03" +
        "\x16\x03\x16\x05\x16\u0274\n\x16\x03\x16\x03\x16\x05\x16\u0278\n\x16\x03" +
        "\x16\x07\x16\u027B\n\x16\f\x16\x0E\x16\u027E\v\x16\x03\x17\x03\x17\x05" +
        "\x17\u0282\n\x17\x03\x17\x03\x17\x05\x17\u0286\n\x17\x03\x17\x05\x17\u0289" +
        "\n\x17\x03\x17\x03\x17\x05\x17\u028D\n\x17\x03\x17\x03\x17\x03\x18\x03" +
        "\x18\x05\x18\u0293\n\x18\x03\x18\x03\x18\x05\x18\u0297\n\x18\x03\x18\x03" +
        "\x18\x03\x19\x03\x19\x03\x19\x05\x19\u029E\n\x19\x03\x19\x03\x19\x03\x19" +
        "\x03\x19\x05\x19\u02A4\n\x19\x03\x19\x03\x19\x05\x19\u02A8\n\x19\x03\x19" +
        "\x05\x19\u02AB\n\x19\x03\x19\x03\x19\x03\x19\x05\x19\u02B0\n\x19\x03\x19" +
        "\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19\u02BA" +
        "\n\x19\x03\x19\x05\x19\u02BD\n\x19\x03\x19\x05\x19\u02C0\n\x19\x03\x19" +
        "\x03\x19\x05\x19\u02C4\n\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u02CA" +
        "\n\x1A\x03\x1A\x03\x1A\x05\x1A\u02CE\n\x1A\x03\x1A\x07\x1A\u02D1\n\x1A" +
        "\f\x1A\x0E\x1A\u02D4\v\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u02DA" +
        "\n\x1B\x03\x1B\x03\x1B\x05\x1B\u02DE\n\x1B\x03\x1B\x03\x1B\x05\x1B\u02E2" +
        "\n\x1B\x03\x1B\x03\x1B\x05\x1B\u02E6\n\x1B\x03\x1B\x05\x1B\u02E9\n\x1B" +
        "\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u02EE\n\x1C\x03\x1C\x03\x1C\x03\x1C\x03" +
        "\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u02F9\n\x1C\x03\x1C" +
        "\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
        "\x03\x1C\x05\x1C\u0306\n\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x05" +
        "\x1E\u030D\n\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\u0314" +
        "\n\x1E\f\x1E\x0E\x1E\u0317\v\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x05\x1F" +
        "\u031D\n\x1F\x03\x1F\x03\x1F\x05\x1F\u0321\n\x1F\x03\x1F\x05\x1F\u0324" +
        "\n\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03 \x03 \x05 \u032D\n \x03 \x07" +
        " \u0330\n \f \x0E \u0333\v \x03!\x03!\x03!\x03!\x03\"\x03\"\x03\"\x05" +
        "\"\u033C\n\"\x03\"\x03\"\x03\"\x03\"\x05\"\u0342\n\"\x03\"\x03\"\x03#" +
        "\x03#\x03$\x03$\x03$\x03$\x05$\u034C\n$\x03$\x03$\x05$\u0350\n$\x03$\x03" +
        "$\x03%\x03%\x03%\x03%\x03%\x03%\x05%\u035A\n%\x03%\x03%\x03%\x03%\x03" +
        "%\x03%\x05%\u0362\n%\x03%\x03%\x03%\x05%\u0367\n%\x03&\x03&\x03&\x03&" +
        "\x05&\u036D\n&\x03&\x03&\x05&\u0371\n&\x03&\x05&\u0374\n&\x03&\x03&\x05" +
        "&\u0378\n&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x05&\u0383\n&" +
        "\x03&\x03&\x05&\u0387\n&\x03&\x03&\x03&\x05&\u038C\n&\x03\'\x03\'\x03" +
        "\'\x05\'\u0391\n\'\x03\'\x03\'\x05\'\u0395\n\'\x03\'\x03\'\x05\'\u0399" +
        "\n\'\x03\'\x03\'\x05\'\u039D\n\'\x03\'\x05\'\u03A0\n\'\x03\'\x05\'\u03A3" +
        "\n\'\x03\'\x05\'\u03A6\n\'\x03\'\x05\'\u03A9\n\'\x03\'\x03\'\x05\'\u03AD" +
        "\n\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x05(\u03B5\n(\x03(\x03(\x05(\u03B9" +
        "\n(\x03(\x05(\u03BC\n(\x03(\x05(\u03BF\n(\x03(\x03(\x05(\u03C3\n(\x03" +
        "(\x03(\x03)\x03)\x03)\x03)\x03*\x03*\x03*\x03*\x03+\x03+\x03+\x03+\x03" +
        "+\x03+\x03+\x03+\x03+\x03+\x03+\x05+\u03DA\n+\x03+\x03+\x07+\u03DE\n+" +
        "\f+\x0E+\u03E1\v+\x03+\x05+\u03E4\n+\x03+\x03+\x05+\u03E8\n+\x03,\x03" +
        ",\x03,\x03,\x03,\x03,\x03,\x05,\u03F1\n,\x03-\x03-\x03.\x03.\x03.\x03" +
        ".\x03.\x03.\x03.\x05.\u03FC\n.\x03/\x03/\x03/\x05/\u0401\n/\x030\x030" +
        "\x030\x030\x031\x031\x031\x031\x051\u040B\n1\x031\x031\x051\u040F\n1\x03" +
        "1\x061\u0412\n1\r1\x0E1\u0413\x032\x032\x032\x032\x033\x033\x053\u041C" +
        "\n3\x033\x033\x053\u0420\n3\x033\x033\x053\u0424\n3\x033\x033\x034\x03" +
        "4\x034\x034\x054\u042C\n4\x034\x034\x054\u0430\n4\x034\x034\x035\x035" +
        "\x035\x035\x036\x036\x036\x036\x056\u043C\n6\x036\x036\x056\u0440\n6\x03" +
        "6\x036\x036\x036\x036\x056\u0447\n6\x056\u0449\n6\x037\x037\x037\x037" +
        "\x057\u044F\n7\x037\x037\x057\u0453\n7\x037\x037\x038\x038\x058\u0459" +
        "\n8\x038\x038\x058\u045D\n8\x038\x038\x058\u0461\n8\x038\x038\x039\x03" +
        "9\x079\u0467\n9\f9\x0E9\u046A\v9\x039\x059\u046D\n9\x039\x039\x03:\x03" +
        ":\x05:\u0473\n:\x03:\x03:\x03:\x03:\x03:\x03:\x03:\x07:\u047C\n:\f:\x0E" +
        ":\u047F\v:\x03;\x03;\x05;\u0483\n;\x03;\x03;\x03;\x03;\x03;\x03;\x03;" +
        "\x07;\u048C\n;\f;\x0E;\u048F\v;\x03<\x03<\x03<\x03<\x03<\x07<\u0496\n" +
        "<\f<\x0E<\u0499\v<\x03=\x03=\x05=\u049D\n=\x03=\x03=\x05=\u04A1\n=\x03" +
        "=\x03=\x05=\u04A5\n=\x03=\x03=\x03>\x03>\x03>\x03>\x03?\x03?\x03?\x03" +
        "?\x03?\x03?\x03?\x03?\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x05@\u04BD" +
        "\n@\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u04C7\nA\x03A\x03A\x05" +
        "A\u04CB\nA\x03A\x07A\u04CE\nA\fA\x0EA\u04D1\vA\x03B\x03B\x03B\x03B\x03" +
        "B\x03B\x03B\x03B\x05B\u04DB\nB\x03B\x03B\x05B\u04DF\nB\x03B\x07B\u04E2" +
        "\nB\fB\x0EB\u04E5\vB\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03" +
        "C\x03C\x05C\u04F2\nC\x03C\x03C\x05C\u04F6\nC\x03C\x03C\x03C\x03C\x03C" +
        "\x03C\x03C\x05C\u04FF\nC\x03C\x03C\x05C\u0503\nC\x03C\x05C\u0506\nC\x03" +
        "D\x03D\x05D\u050A\nD\x03D\x03D\x05D\u050E\nD\x03D\x05D\u0511\nD\x07D\u0513" +
        "\nD\fD\x0ED\u0516\vD\x03D\x05D\u0519\nD\x03D\x05D\u051C\nD\x03D\x03D\x05" +
        "D\u0520\nD\x03D\x05D\u0523\nD\x06D\u0525\nD\rD\x0ED\u0526\x05D\u0529\n" +
        "D\x03E\x03E\x03E\x05E\u052E\nE\x03E\x03E\x05E\u0532\nE\x03E\x03E\x05E" +
        "\u0536\nE\x03E\x03E\x05E\u053A\nE\x05E\u053C\nE\x03F\x03F\x03F\x03F\x05" +
        "F\u0542\nF\x03F\x03F\x05F\u0546\nF\x03F\x05F\u0549\nF\x03G\x03G\x03G\x05" +
        "G\u054E\nG\x03G\x03G\x05G\u0552\nG\x03G\x03G\x03G\x03G\x05G\u0558\nG\x03" +
        "G\x05G\u055B\nG\x03G\x05G\u055E\nG\x03G\x03G\x05G\u0562\nG\x03G\x03G\x05" +
        "G\u0566\nG\x03G\x03G\x03H\x03H\x03H\x05H\u056D\nH\x03H\x03H\x05H\u0571" +
        "\nH\x03H\x03H\x03H\x03H\x05H\u0577\nH\x03H\x05H\u057A\nH\x03H\x03H\x05" +
        "H\u057E\nH\x03H\x03H\x03I\x03I\x03I\x05I\u0585\nI\x03I\x03I\x05I\u0589" +
        "\nI\x03I\x03I\x03I\x03I\x05I\u058F\nI\x03I\x05I\u0592\nI\x03I\x03I\x05" +
        "I\u0596\nI\x03I\x03I\x03J\x03J\x03J\x03J\x05J\u059E\nJ\x03J\x03J\x05J" +
        "\u05A2\nJ\x03J\x05J\u05A5\nJ\x03J\x05J\u05A8\nJ\x03J\x03J\x05J\u05AC\n" +
        "J\x03J\x03J\x03K\x03K\x03K\x03K\x05K\u05B4\nK\x03K\x03K\x05K\u05B8\nK" +
        "\x03K\x03K\x05K\u05BC\nK\x05K\u05BE\nK\x03K\x05K\u05C1\nK\x03L\x03L\x03" +
        "L\x05L\u05C6\nL\x03M\x03M\x03M\x03M\x05M\u05CC\nM\x03M\x03M\x05M\u05D0" +
        "\nM\x03M\x03M\x05M\u05D4\nM\x03M\x07M\u05D7\nM\fM\x0EM\u05DA\vM\x03N\x03" +
        "N\x05N\u05DE\nN\x03N\x03N\x05N\u05E2\nN\x03N\x03N\x05N\u05E6\nN\x03N\x03" +
        "N\x03N\x05N\u05EB\nN\x03O\x03O\x03P\x03P\x03P\x03P\x05P\u05F3\nP\x05P" +
        "\u05F5\nP\x03Q\x03Q\x03R\x03R\x03R\x03R\x03S\x03S\x03S\x03S\x05S\u0601" +
        "\nS\x03S\x03S\x05S\u0605\nS\x03S\x03S\x03T\x03T\x03T\x03T\x05T\u060D\n" +
        "T\x03T\x03T\x05T\u0611\nT\x03T\x03T\x03U\x03U\x03U\x03U\x05U\u0619\nU" +
        "\x03U\x03U\x05U\u061D\nU\x03U\x03U\x05U\u0621\nU\x03U\x03U\x05U\u0625" +
        "\nU\x03U\x03U\x05U\u0629\nU\x03U\x03U\x05U\u062D\nU\x03U\x03U\x03V\x03" +
        "V\x03V\x03V\x05V\u0635\nV\x03V\x03V\x05V\u0639\nV\x03V\x03V\x03W\x03W" +
        "\x03W\x03W\x03W\x03W\x03W\x07W\u0644\nW\fW\x0EW\u0647\vW\x03W\x03W\x03" +
        "X\x03X\x05X\u064D\nX\x03X\x03X\x05X\u0651\nX\x03X\x03X\x03X\x03X\x03X" +
        "\x03X\x03X\x03X\x03X\x05X\u065C\nX\x03Y\x03Y\x03Y\x03Y\x03Y\x05Y\u0663" +
        "\nY\x03Z\x03Z\x03Z\x05Z\u0668\nZ\x03Z\x03Z\x05Z\u066C\nZ\x03Z\x07Z\u066F" +
        "\nZ\fZ\x0EZ\u0672\vZ\x05Z\u0674\nZ\x03[\x03[\x03[\x03[\x05[\u067A\n[\x03" +
        "[\x03[\x05[\u067E\n[\x03[\x05[\u0681\n[\x03\\\x03\\\x03\\\x03\\\x05\\" +
        "\u0687\n\\\x03\\\x03\\\x05\\\u068B\n\\\x03\\\x03\\\x03]\x03]\x03]\x03" +
        "]\x05]\u0693\n]\x03]\x03]\x05]\u0697\n]\x03]\x03]\x03^\x03^\x03_\x03_" +
        "\x03_\x05_\u06A0\n_\x03_\x03_\x05_\u06A4\n_\x03_\x03_\x05_\u06A8\n_\x03" +
        "_\x03_\x05_\u06AC\n_\x03_\x05_\u06AF\n_\x03_\x03_\x05_\u06B3\n_\x03_\x03" +
        "_\x03`\x03`\x05`\u06B9\n`\x03`\x03`\x05`\u06BD\n`\x03`\x03`\x03a\x03a" +
        "\x03a\x05a\u06C4\na\x03a\x03a\x03a\x03a\x03a\x07a\u06CB\na\fa\x0Ea\u06CE" +
        "\va\x03a\x03a\x03b\x03b\x05b\u06D4\nb\x03b\x03b\x05b\u06D8\nb\x03b\x05" +
        "b\u06DB\nb\x03b\x05b\u06DE\nb\x03b\x05b\u06E1\nb\x03b\x03b\x05b\u06E5" +
        "\nb\x03b\x03b\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x05c\u06F0\nc\x03d\x03" +
        "d\x03d\x03d\x03e\x03e\x03e\x03e\x05e\u06FA\ne\x03e\x03e\x05e\u06FE\ne" +
        "\x03e\x03e\x03e\x03e\x03e\x05e\u0705\ne\x05e\u0707\ne\x03f\x03f\x03f\x03" +
        "f\x03f\x05f\u070E\nf\x03f\x03f\x05f\u0712\nf\x03f\x03f\x05f\u0716\nf\x03" +
        "f\x07f\u0719\nf\ff\x0Ef\u071C\vf\x03f\x03f\x03f\x03f\x05f\u0722\nf\x03" +
        "f\x03f\x03f\x03f\x03f\x05f\u0729\nf\x03f\x03f\x03f\x05f\u072E\nf\x03f" +
        "\x03f\x05f\u0732\nf\x03f\x03f\x03f\x03f\x05f\u0738\nf\x03f\x03f\x03f\x05" +
        "f\u073D\nf\x03f\x03f\x03f\x05f\u0742\nf\x03f\x05f\u0745\nf\x03f\x03f\x05" +
        "f\u0749\nf\x03f\x03f\x05f\u074D\nf\x03f\x03f\x03f\x05f\u0752\nf\x03f\x03" +
        "f\x05f\u0756\nf\x03f\x03f\x03f\x05f\u075B\nf\x03f\x03f\x05f\u075F\nf\x03" +
        "f\x03f\x03f\x05f\u0764\nf\x03f\x03f\x05f\u0768\nf\x03f\x03f\x03f\x05f" +
        "\u076D\nf\x03f\x03f\x05f\u0771\nf\x03f\x03f\x03f\x05f\u0776\nf\x03f\x03" +
        "f\x05f\u077A\nf\x03f\x03f\x03f\x05f\u077F\nf\x03f\x03f\x05f\u0783\nf\x03" +
        "f\x03f\x03f\x05f\u0788\nf\x03f\x03f\x05f\u078C\nf\x03f\x03f\x03f\x05f" +
        "\u0791\nf\x03f\x03f\x05f\u0795\nf\x03f\x03f\x03f\x05f\u079A\nf\x03f\x03" +
        "f\x05f\u079E\nf\x03f\x03f\x03f\x05f\u07A3\nf\x03f\x03f\x05f\u07A7\nf\x03" +
        "f\x03f\x03f\x05f\u07AC\nf\x03f\x03f\x05f\u07B0\nf\x03f\x03f\x03f\x05f" +
        "\u07B5\nf\x03f\x03f\x05f\u07B9\nf\x03f\x03f\x03f\x05f\u07BE\nf\x03f\x03" +
        "f\x05f\u07C2\nf\x03f\x03f\x03f\x05f\u07C7\nf\x03f\x03f\x05f\u07CB\nf\x03" +
        "f\x03f\x03f\x05f\u07D0\nf\x03f\x03f\x05f\u07D4\nf\x03f\x03f\x03f\x05f" +
        "\u07D9\nf\x03f\x03f\x05f\u07DD\nf\x03f\x03f\x03f\x05f\u07E2\nf\x03f\x03" +
        "f\x05f\u07E6\nf\x03f\x03f\x03f\x05f\u07EB\nf\x03f\x03f\x05f\u07EF\nf\x03" +
        "f\x03f\x03f\x05f\u07F4\nf\x03f\x03f\x05f\u07F8\nf\x03f\x07f\u07FB\nf\f" +
        "f\x0Ef\u07FE\vf\x03g\x03g\x03g\x05g\u0803\ng\x03g\x03g\x03g\x05g\u0808" +
        "\ng\x03g\x03g\x03h\x03h\x05h\u080E\nh\x03h\x03h\x05h\u0812\nh\x03h\x07" +
        "h\u0815\nh\fh\x0Eh\u0818\vh\x03i\x03i\x05i\u081C\ni\x03i\x03i\x05i\u0820" +
        "\ni\x03i\x03i\x05i\u0824\ni\x05i\u0826\ni\x03i\x03i\x05i\u082A\ni\x05" +
        "i\u082C\ni\x03i\x05i\u082F\ni\x03i\x03i\x05i\u0833\ni\x03j\x03j\x03j\x03" +
        "j\x03j\x05j\u083A\nj\x03j\x03j\x03k\x03k\x03k\x03k\x05k\u0842\nk\x03k" +
        "\x03k\x05k\u0846\nk\x03k\x03k\x03l\x03l\x03l\x03l\x03l\x03l\x05l\u0850" +
        "\nl\x03l\x03l\x05l\u0854\nl\x03l\x03l\x03m\x03m\x03m\x03m\x05m\u085C\n" +
        "m\x03m\x03m\x05m\u0860\nm\x03m\x05m\u0863\nm\x03n\x05n\u0866\nn\x03n\x03" +
        "n\x03o\x03o\x05o\u086C\no\x03p\x03p\x03p\x03p\x05p\u0872\np\x03p\x05p" +
        "\u0875\np\x03p\x03p\x05p\u0879\np\x03p\x03p\x05p\u087D\np\x03p\x03p\x05" +
        "p\u0881\np\x03p\x05p\u0884\np\x03p\x03p\x03p\x03p\x07p\u088A\np\fp\x0E" +
        "p\u088D\vp\x03q\x03q\x03q\x05q\u0892\nq\x03q\x03q\x03q\x05q\u0897\nq\x03" +
        "q\x05q\u089A\nq\x03q\x03q\x05q\u089E\nq\x03q\x03q\x05q\u08A2\nq\x03q\x03" +
        "q\x05q\u08A6\nq\x03q\x05q\u08A9\nq\x03q\x03q\x03q\x03q\x07q\u08AF\nq\f" +
        "q\x0Eq\u08B2\vq\x03r\x03r\x05r\u08B6\nr\x03s\x05s\u08B9\ns\x03s\x03s\x03" +
        "s\x05s\u08BE\ns\x03s\x03s\x05s\u08C2\ns\x03s\x05s\u08C5\ns\x03s\x05s\u08C8" +
        "\ns\x03s\x03s\x03s\x03s\x07s\u08CE\ns\fs\x0Es\u08D1\vs\x03t\x03t\x03t" +
        "\x05t\u08D6\nt\x03t\x05t\u08D9\nt\x03t\x03t\x03t\x03t\x07t\u08DF\nt\f" +
        "t\x0Et\u08E2\vt\x03u\x03u\x03u\x03u\x05u\u08E8\nu\x03v\x03v\x05v\u08EC" +
        "\nv\x03v\x05v\u08EF\nv\x03v\x05v\u08F2\nv";
    vbaParser._serializedATNSegment1 = "\x03v\x03v\x03v\x03v\x07v\u08F8\nv\fv\x0Ev\u08FB\vv\x03w\x03w\x05w\u08FF" +
        "\nw\x03w\x05w\u0902\nw\x03w\x05w\u0905\nw\x03w\x03w\x05w\u0909\nw\x03" +
        "w\x03w\x05w\u090D\nw\x05w\u090F\nw\x03w\x03w\x05w\u0913\nw\x03w\x05w\u0916" +
        "\nw\x03w\x03w\x03w\x03w\x07w\u091C\nw\fw\x0Ew\u091F\vw\x03x\x03x\x05x" +
        "\u0923\nx\x03x\x06x\u0926\nx\rx\x0Ex\u0927\x03x\x05x\u092B\nx\x03x\x05" +
        "x\u092E\nx\x03x\x03x\x03x\x03x\x07x\u0934\nx\fx\x0Ex\u0937\vx\x03y\x03" +
        "y\x03y\x05y\u093C\ny\x03z\x03z\x03{\x05{\u0941\n{\x03{\x05{\u0944\n{\x03" +
        "{\x03{\x05{\u0948\n{\x07{\u094A\n{\f{\x0E{\u094D\v{\x03{\x03{\x05{\u0951" +
        "\n{\x03{\x03{\x05{\u0955\n{\x03{\x05{\u0958\n{\x07{\u095A\n{\f{\x0E{\u095D" +
        "\v{\x03|\x05|\u0960\n|\x03|\x03|\x05|\u0964\n|\x03|\x05|\u0967\n|\x03" +
        "|\x03|\x03}\x03}\x03}\x05}\u096E\n}\x03~\x03~\x05~\u0972\n~\x03~\x03~" +
        "\x05~\u0976\n~\x03~\x03~\x05~\u097A\n~\x03~\x07~\u097D\n~\f~\x0E~\u0980" +
        "\v~\x05~\u0982\n~\x03~\x05~\u0985\n~\x03~\x03~\x03\x7F\x03\x7F\x05\x7F" +
        "\u098B\n\x7F\x03\x7F\x03\x7F\x05\x7F\u098F\n\x7F\x03\x7F\x03\x7F\x05\x7F" +
        "\u0993\n\x7F\x03\x7F\x03\x7F\x05\x7F\u0997\n\x7F\x03\x7F\x05\x7F\u099A" +
        "\n\x7F\x03\x7F\x03\x7F\x05\x7F\u099E\n\x7F\x03\x7F\x05\x7F\u09A1\n\x7F" +
        "\x03\x7F\x05\x7F\u09A4\n\x7F\x03\x7F\x05\x7F\u09A7\n\x7F\x03\x7F\x05\x7F" +
        "\u09AA\n\x7F\x03\x7F\x05\x7F\u09AD\n\x7F\x03\x80\x03\x80\x05\x80\u09B1" +
        "\n\x80\x03\x80\x03\x80\x03\x81\x03\x81\x05\x81\u09B7\n\x81\x03\x81\x03" +
        "\x81\x05\x81\u09BB\n\x81\x03\x81\x07\x81\u09BE\n\x81\f\x81\x0E\x81\u09C1" +
        "\v\x81\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x05\x82\u09C8\n\x82\x03" +
        "\x82\x03\x82\x03\x83\x03\x83\x06\x83\u09CE\n\x83\r\x83\x0E\x83\u09CF\x03" +
        "\x84\x03\x84\x05\x84\u09D4\n\x84\x03\x84\x03\x84\x05\x84\u09D8\n\x84\x03" +
        "\x84\x03\x84\x05\x84\u09DC\n\x84\x03\x84\x05\x84\u09DF\n\x84\x03\x85\x03" +
        "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x05" +
        "\x85\u09EB\n\x85\x03\x85\x03\x85\x05\x85\u09EF\n\x85\x03\x85\x05\x85\u09F2" +
        "\n\x85\x03\x85\x05\x85\u09F5\n\x85\x03\x86\x03\x86\x03\x86\x07\x86\u09FA" +
        "\n\x86\f\x86\x0E\x86\u09FD\v\x86\x03\x86\x03\x86\x03\x86\x06\x86\u0A02" +
        "\n\x86\r\x86\x0E\x86\u0A03\x05\x86\u0A06\n\x86\x03\x87\x03\x87\x03\x88" +
        "\x03\x88\x03\x88\x07\x88\u0A0D\n\x88\f\x88\x0E\x88\u0A10\v\x88\x03\x89" +
        "\x03\x89\x05\x89\u0A14\n\x89\x03\x89\x03\x89\x05\x89\u0A18\n\x89\x03\x8A" +
        "\x03\x8A\x05\x8A\u0A1C\n\x8A\x03\x8A\x03\x8A\x05\x8A\u0A20\n\x8A\x03\x8A" +
        "\x05\x8A\u0A23\n\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x03\x8D\x03" +
        "\x8D\x05\x8D\u0A2C\n\x8D\x03\x8D\x05\x8D\u0A2F\n\x8D\x03\x8D\x03\x8D\x05" +
        "\x8D\u0A33\n\x8D\x03\x8D\x05\x8D\u0A36\n\x8D\x03\x8E\x03\x8E\x03\x8F\x03" +
        "\x8F\x03\x90\x03\x90\x03\x91\x03\x91\x03\x92\x03\x92\x03\x93\x05\x93\u0A43" +
        "\n\x93\x03\x93\x03\x93\x03\x93\x05\x93\u0A48\n\x93\x03\x93\x05\x93\u0A4B" +
        "\n\x93\x03\x94\x03\x94\x05\x94\u0A4F\n\x94\x03\x94\x03\x94\x05\x94\u0A53" +
        "\n\x94\x07\x94\u0A55\n\x94\f\x94\x0E\x94\u0A58\v\x94\x03\x94\x03\u0331" +
        "\x02\x03\xCA\x95\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10" +
        "\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02" +
        "$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02" +
        "@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02" +
        "\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02" +
        "x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C" +
        "\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E" +
        "\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0" +
        "\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2" +
        "\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4" +
        "\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6" +
        "\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8" +
        "\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108" +
        "\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116" +
        "\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124" +
        "\x02\u0126\x02\x02\x15\x05\x02\x15\x15\"\"\xA9\xA9\x03\x02%0\x04\x02\xB2" +
        "\xB2\xB6\xB6\x03\x02FJ\x05\x02\xBF\xBF\xC6\xC6\xCA\xCA\x03\x02yz\x07\x02" +
        "\x11\x11\x15\x15XX\x82\x82\x8D\x8D\x04\x02\x90\x91\xBA\xBA\x04\x02eg\xA0" +
        "\xA0\x03\x02\x03\x04\x04\x02\xA2\xA2\xA8\xA8\x03\x02\x06\x07\x04\x02\x17" +
        "\x18\x83\x83\x03\x02\x17\x18\x07\x02YYcc\xBF\xC2\xC4\xC4\xC8\xC8\x06\x02" +
        "KKvw\xAD\xAD\xCF\xD5\x05\x02\x05\x05\x07\n\xBC\xBC\x06\x02MMQQ\x86\x86" +
        "\x8B\x8B\v\x02\v7@EKchhnx{|\x81\x86\x8B\x90\x92\xBB\x02\u0C05\x02\u0128" +
        "\x03\x02\x02\x02\x04\u012C\x03\x02\x02\x02\x06\u0164\x03\x02\x02\x02\b" +
        "\u016A\x03\x02\x02\x02\n\u0178\x03\x02\x02\x02\f\u018D\x03\x02\x02\x02" +
        "\x0E\u0191\x03\x02\x02\x02\x10\u01AC\x03\x02\x02\x02\x12\u01B8\x03\x02" +
        "\x02\x02\x14\u01BC\x03\x02\x02\x02\x16\u01BE\x03\x02\x02\x02\x18\u01D7" +
        "\x03\x02\x02\x02\x1A\u01D9\x03\x02\x02\x02\x1C\u01F1\x03\x02\x02\x02\x1E" +
        "\u023F\x03\x02\x02\x02 \u0241\x03\x02\x02\x02\"\u024E\x03\x02\x02\x02" +
        "$\u0250\x03\x02\x02\x02&\u0254\x03\x02\x02\x02(\u0258\x03\x02\x02\x02" +
        "*\u026D\x03\x02\x02\x02,\u027F\x03\x02\x02\x02.\u0290\x03\x02\x02\x02" +
        "0\u029D\x03\x02\x02\x022\u02C5\x03\x02\x02\x024\u02D5\x03\x02\x02\x02" +
        "6\u0305\x03\x02\x02\x028\u0307\x03\x02\x02\x02:\u030C\x03\x02\x02\x02" +
        "<\u031A\x03\x02\x02\x02>\u0327\x03\x02\x02\x02@\u0334\x03\x02\x02\x02" +
        "B\u033B\x03\x02\x02\x02D\u0345\x03\x02\x02\x02F\u0347\x03\x02\x02\x02" +
        "H\u0353\x03\x02\x02\x02J\u0368\x03\x02\x02\x02L\u0390\x03\x02\x02\x02" +
        "N\u03B0\x03\x02\x02\x02P\u03C6\x03\x02\x02\x02R\u03CA\x03\x02\x02\x02" +
        "T\u03E7\x03\x02\x02\x02V\u03E9\x03\x02\x02\x02X\u03F2\x03\x02\x02\x02" +
        "Z\u03F4\x03\x02\x02\x02\\\u03FD\x03\x02\x02\x02^\u0402\x03\x02\x02\x02" +
        "`\u0406\x03\x02\x02\x02b\u0415\x03\x02\x02\x02d\u041B\x03\x02\x02\x02" +
        "f\u0427\x03\x02\x02\x02h\u0433\x03\x02\x02\x02j\u0437\x03\x02\x02\x02" +
        "l\u044A\x03\x02\x02\x02n\u0456\x03\x02\x02\x02p\u0464\x03\x02\x02\x02" +
        "r\u0470\x03\x02\x02\x02t\u0480\x03\x02\x02\x02v\u0490\x03\x02\x02\x02" +
        "x\u049A\x03\x02\x02\x02z\u04A8\x03\x02\x02\x02|\u04AC\x03\x02\x02\x02" +
        "~\u04B4\x03\x02\x02\x02\x80\u04BE\x03\x02\x02\x02\x82\u04D2\x03\x02\x02" +
        "\x02\x84\u04E6\x03\x02\x02\x02\x86\u0528\x03\x02\x02\x02\x88\u053B\x03" +
        "\x02\x02\x02\x8A\u053D\x03\x02\x02\x02\x8C\u054D\x03\x02\x02\x02\x8E\u056C" +
        "\x03\x02\x02\x02\x90\u0584\x03\x02\x02\x02\x92\u0599\x03\x02\x02\x02\x94" +
        "\u05AF\x03\x02\x02\x02\x96\u05C2\x03\x02\x02\x02\x98\u05C7\x03\x02\x02" +
        "\x02\x9A\u05DB\x03\x02\x02\x02\x9C\u05EC\x03\x02\x02\x02\x9E\u05EE\x03" +
        "\x02\x02\x02\xA0\u05F6\x03\x02\x02\x02\xA2\u05F8\x03\x02\x02\x02\xA4\u05FC" +
        "\x03\x02\x02\x02\xA6\u0608\x03\x02\x02\x02\xA8\u0614\x03\x02\x02\x02\xAA" +
        "\u0630\x03\x02\x02\x02\xAC\u063C\x03\x02\x02\x02\xAE\u065B\x03\x02\x02" +
        "\x02\xB0\u065D\x03\x02\x02\x02\xB2\u0673\x03\x02\x02\x02\xB4\u0675\x03" +
        "\x02\x02\x02\xB6\u0682\x03\x02\x02\x02\xB8\u068E\x03\x02\x02\x02\xBA\u069A" +
        "\x03\x02\x02\x02\xBC\u069F\x03\x02\x02\x02\xBE\u06B6\x03\x02\x02\x02\xC0" +
        "\u06C3\x03\x02\x02\x02\xC2\u06D1\x03\x02\x02\x02\xC4\u06E8\x03\x02\x02" +
        "\x02\xC6\u06F1\x03\x02\x02\x02\xC8\u06F5\x03\x02\x02\x02\xCA\u0744\x03" +
        "\x02\x02\x02\xCC\u0802\x03\x02\x02\x02\xCE\u080B\x03\x02\x02\x02\xD0\u0819" +
        "\x03\x02\x02\x02\xD2\u0834\x03\x02\x02\x02\xD4\u083D\x03\x02\x02\x02\xD6" +
        "\u0849\x03\x02\x02\x02\xD8\u0857\x03\x02\x02\x02\xDA\u0865\x03\x02\x02" +
        "\x02\xDC\u086B\x03\x02\x02\x02\xDE\u086D\x03\x02\x02\x02\xE0\u088E\x03" +
        "\x02\x02\x02\xE2\u08B5\x03\x02\x02\x02\xE4\u08B8\x03\x02\x02\x02\xE6\u08D2" +
        "\x03\x02\x02\x02\xE8\u08E7\x03\x02\x02\x02\xEA\u08E9\x03\x02\x02\x02\xEC" +
        "\u08FE\x03\x02\x02\x02\xEE\u0922\x03\x02\x02\x02\xF0\u0938\x03\x02\x02" +
        "\x02\xF2\u093D\x03\x02\x02\x02\xF4\u094B\x03\x02\x02\x02\xF6\u095F\x03" +
        "\x02\x02\x02\xF8\u096A\x03\x02\x02\x02\xFA\u096F\x03\x02\x02\x02\xFC\u098A" +
        "\x03\x02\x02\x02\xFE\u09AE\x03\x02\x02\x02\u0100\u09B4\x03\x02\x02\x02" +
        "\u0102\u09C7\x03\x02\x02\x02\u0104\u09CD\x03\x02\x02\x02\u0106\u09D1\x03" +
        "\x02\x02\x02\u0108\u09F4\x03\x02\x02\x02\u010A\u0A05\x03\x02\x02\x02\u010C" +
        "\u0A07\x03\x02\x02\x02\u010E\u0A09\x03\x02\x02\x02\u0110\u0A11\x03\x02" +
        "\x02\x02\u0112\u0A19\x03\x02\x02\x02\u0114\u0A24\x03\x02\x02\x02\u0116" +
        "\u0A27\x03\x02\x02\x02\u0118\u0A2B\x03\x02\x02\x02\u011A\u0A37\x03\x02" +
        "\x02\x02\u011C\u0A39\x03\x02\x02\x02\u011E\u0A3B\x03\x02\x02\x02\u0120" +
        "\u0A3D\x03\x02\x02\x02\u0122\u0A3F\x03\x02\x02\x02\u0124\u0A42\x03\x02" +
        "\x02\x02\u0126\u0A56\x03\x02\x02\x02\u0128\u0129\x05\x04\x03\x02\u0129" +
        "\u012A\x07\x02\x02\x03\u012A\x03\x03\x02\x02\x02\u012B\u012D\x07\xDD\x02" +
        "\x02\u012C\u012B\x03\x02\x02\x02\u012C\u012D\x03\x02\x02\x02\u012D\u0131" +
        "\x03\x02\x02\x02\u012E\u0130\x05\u0124\x93\x02\u012F\u012E\x03\x02\x02" +
        "\x02\u0130\u0133\x03\x02\x02\x02\u0131\u012F\x03\x02\x02\x02\u0131\u0132" +
        "\x03\x02\x02\x02\u0132\u013B\x03\x02\x02\x02\u0133\u0131\x03\x02\x02\x02" +
        "\u0134\u0138\x05\x06\x04\x02\u0135\u0137\x05\u0124\x93\x02\u0136\u0135" +
        "\x03\x02\x02\x02\u0137\u013A\x03\x02\x02\x02\u0138\u0136\x03\x02\x02\x02" +
        "\u0138\u0139\x03\x02\x02\x02\u0139\u013C\x03\x02\x02\x02\u013A\u0138\x03" +
        "\x02\x02\x02\u013B\u0134\x03\x02\x02\x02\u013B\u013C\x03\x02\x02\x02\u013C" +
        "\u013E\x03\x02\x02\x02\u013D\u013F\x05\b\x05\x02\u013E\u013D\x03\x02\x02" +
        "\x02\u013E\u013F\x03\x02\x02\x02\u013F\u0143\x03\x02\x02\x02\u0140\u0142" +
        "\x05\u0124\x93\x02\u0141\u0140\x03\x02\x02\x02\u0142\u0145\x03\x02\x02" +
        "\x02\u0143\u0141\x03\x02\x02\x02\u0143\u0144\x03\x02\x02\x02\u0144\u0147" +
        "\x03\x02\x02\x02\u0145\u0143\x03\x02\x02\x02\u0146\u0148\x05\f\x07\x02" +
        "\u0147\u0146\x03\x02\x02\x02\u0147\u0148\x03\x02\x02\x02\u0148\u014C\x03" +
        "\x02\x02\x02\u0149\u014B\x05\u0124\x93\x02\u014A\u0149\x03\x02\x02\x02" +
        "\u014B\u014E\x03\x02\x02\x02\u014C\u014A\x03\x02\x02\x02\u014C\u014D\x03" +
        "\x02\x02\x02\u014D\u0150\x03\x02\x02\x02\u014E\u014C\x03\x02\x02\x02\u014F" +
        "\u0151\x05\x0E\b\x02\u0150\u014F\x03\x02\x02\x02\u0150\u0151\x03\x02\x02" +
        "\x02\u0151\u0155\x03\x02\x02\x02\u0152\u0154\x05\u0124\x93\x02\u0153\u0152" +
        "\x03\x02\x02\x02\u0154\u0157\x03\x02\x02\x02\u0155\u0153\x03\x02\x02\x02" +
        "\u0155\u0156\x03\x02\x02\x02\u0156\u0159\x03\x02\x02\x02\u0157\u0155\x03" +
        "\x02\x02\x02\u0158\u015A\x05\x16\f\x02\u0159\u0158\x03\x02\x02\x02\u0159" +
        "\u015A\x03\x02\x02\x02\u015A\u015E\x03\x02\x02\x02\u015B\u015D\x05\u0124" +
        "\x93\x02\u015C\u015B\x03\x02\x02\x02\u015D\u0160\x03\x02\x02\x02\u015E" +
        "\u015C\x03\x02\x02\x02\u015E\u015F\x03\x02\x02\x02\u015F\u0162\x03\x02" +
        "\x02\x02\u0160\u015E\x03\x02\x02\x02\u0161\u0163\x07\xDD\x02\x02\u0162" +
        "\u0161\x03\x02\x02\x02\u0162\u0163\x03\x02\x02\x02\u0163\x05\x03\x02\x02" +
        "\x02\u0164\u0165\x07\xB4\x02\x02\u0165\u0166\x07\xDD\x02\x02\u0166\u0167" +
        "\x07\xD4\x02\x02\u0167\u0168\x07\xDD\x02\x02\u0168\u0169\x07\x1E\x02\x02" +
        "\u0169\x07\x03\x02\x02\x02\u016A\u016E\x07\x13\x02\x02\u016B\u016D\x05" +
        "\u0124\x93\x02\u016C\u016B\x03\x02\x02\x02\u016D\u0170\x03\x02\x02\x02" +
        "\u016E\u016C\x03\x02\x02\x02\u016E\u016F\x03\x02\x02\x02\u016F\u0172\x03" +
        "\x02\x02\x02\u0170\u016E\x03\x02\x02\x02\u0171\u0173\x05\n\x06\x02\u0172" +
        "\u0171\x03\x02\x02\x02\u0173\u0174\x03\x02\x02\x02\u0174\u0172\x03\x02" +
        "\x02\x02\u0174\u0175\x03\x02\x02\x02\u0175\u0176\x03\x02\x02\x02\u0176" +
        "\u0177\x07@\x02\x02\u0177\t\x03\x02\x02\x02\u0178\u017A\x05\u0104\x83" +
        "\x02\u0179\u017B\x07\xDD\x02\x02\u017A\u0179\x03\x02\x02\x02\u017A\u017B" +
        "\x03\x02\x02\x02\u017B\u017C\x03\x02\x02\x02\u017C\u017E\x07\xBF\x02\x02" +
        "\u017D\u017F\x07\xDD\x02\x02\u017E\u017D\x03\x02\x02\x02\u017E\u017F\x03" +
        "\x02\x02\x02\u017F\u0180\x03\x02\x02\x02\u0180\u0184\x05\u0116\x8C\x02" +
        "\u0181\u0183\x05\u0124\x93\x02\u0182\u0181\x03\x02\x02\x02\u0183\u0186" +
        "\x03\x02\x02\x02\u0184\u0182\x03\x02\x02\x02\u0184\u0185\x03\x02\x02\x02" +
        "\u0185\v\x03\x02\x02\x02\u0186\u0184\x03\x02\x02\x02\u0187\u0189\x05\x1A" +
        "\x0E\x02\u0188\u018A\x05\u0124\x93\x02\u0189\u0188\x03\x02\x02\x02\u018A" +
        "\u018B\x03\x02\x02\x02\u018B\u0189\x03\x02\x02\x02\u018B\u018C\x03\x02" +
        "\x02\x02\u018C\u018E\x03\x02\x02\x02\u018D\u0187\x03\x02\x02\x02\u018E" +
        "\u018F\x03\x02\x02\x02\u018F\u018D\x03\x02\x02\x02\u018F\u0190\x03\x02" +
        "\x02\x02\u0190\r\x03\x02\x02\x02\u0191\u019B\x05\x12\n\x02\u0192\u0194" +
        "\x05\u0124\x93\x02\u0193\u0192\x03\x02\x02\x02\u0194\u0195\x03\x02\x02" +
        "\x02\u0195\u0193\x03\x02\x02\x02\u0195\u0196\x03\x02\x02\x02\u0196\u0197" +
        "\x03\x02\x02\x02\u0197\u0198\x05\x12\n\x02\u0198\u019A\x03\x02\x02\x02" +
        "\u0199\u0193\x03\x02\x02\x02\u019A\u019D\x03\x02\x02\x02\u019B\u0199\x03" +
        "\x02\x02\x02\u019B\u019C\x03\x02\x02\x02\u019C\u01A1\x03\x02\x02\x02\u019D" +
        "\u019B\x03\x02\x02\x02\u019E\u01A0\x05\u0124\x93\x02\u019F\u019E\x03\x02" +
        "\x02\x02\u01A0\u01A3\x03\x02\x02\x02\u01A1\u019F\x03\x02\x02\x02\u01A1" +
        "\u01A2\x03\x02\x02\x02\u01A2\x0F\x03\x02\x02\x02\u01A3\u01A1\x03\x02\x02" +
        "\x02\u01A4\u01A5\x07}\x02\x02\u01A5\u01A6\x07\xDD\x02\x02\u01A6\u01AD" +
        "\x07\xD2\x02\x02\u01A7\u01A8\x07\x7F\x02\x02\u01A8\u01A9\x07\xDD\x02\x02" +
        "\u01A9\u01AD\t\x02\x02\x02\u01AA\u01AD\x07~\x02\x02\u01AB\u01AD\x07\x80" +
        "\x02\x02\u01AC\u01A4\x03\x02\x02\x02\u01AC\u01A7\x03\x02\x02\x02\u01AC" +
        "\u01AA\x03\x02\x02\x02\u01AC\u01AB\x03\x02\x02\x02\u01AD\x11\x03\x02\x02" +
        "\x02\u01AE\u01B9\x05\u0122\x92\x02\u01AF\u01B9\x050\x19\x02\u01B0\u01B9" +
        "\x05:\x1E\x02\u01B1\u01B9\x05B\"\x02\u01B2\u01B9\x05*\x16\x02\u01B3\u01B9" +
        "\x05^0\x02\u01B4\u01B9\x05\xCCg\x02\u01B5\u01B9\x05\x10\t\x02\u01B6\u01B9" +
        "\x05\xC0a\x02\u01B7\u01B9\x05\x14\v\x02\u01B8\u01AE\x03\x02\x02\x02\u01B8" +
        "\u01AF\x03\x02\x02\x02\u01B8\u01B0\x03\x02\x02\x02\u01B8\u01B1\x03\x02" +
        "\x02\x02\u01B8\u01B2\x03\x02\x02\x02\u01B8\u01B3\x03\x02\x02\x02\u01B8" +
        "\u01B4\x03\x02\x02\x02\u01B8\u01B5\x03\x02\x02\x02\u01B8\u01B6\x03\x02" +
        "\x02\x02\u01B8\u01B7\x03\x02\x02\x02\u01B9\x13\x03\x02\x02\x02\u01BA\u01BD" +
        "\x05n8\x02\u01BB\u01BD\x05p9\x02\u01BC\u01BA\x03\x02\x02\x02\u01BC\u01BB" +
        "\x03\x02\x02\x02\u01BD\x15\x03\x02\x02\x02\u01BE\u01C8\x05\x18\r\x02\u01BF" +
        "\u01C1\x05\u0124\x93\x02\u01C0\u01BF\x03\x02\x02\x02\u01C1\u01C2\x03\x02" +
        "\x02\x02\u01C2\u01C0\x03\x02\x02\x02\u01C2\u01C3\x03\x02\x02\x02\u01C3" +
        "\u01C4\x03\x02\x02\x02\u01C4\u01C5\x05\x18\r\x02\u01C5\u01C7\x03\x02\x02" +
        "\x02\u01C6\u01C0\x03\x02\x02\x02\u01C7\u01CA\x03\x02\x02\x02\u01C8\u01C6" +
        "\x03\x02\x02\x02\u01C8\u01C9\x03\x02\x02\x02\u01C9\u01CE\x03\x02\x02\x02" +
        "\u01CA\u01C8\x03\x02\x02\x02\u01CB\u01CD\x05\u0124\x93\x02\u01CC\u01CB" +
        "\x03\x02\x02\x02\u01CD\u01D0\x03\x02\x02\x02\u01CE\u01CC\x03\x02\x02\x02" +
        "\u01CE\u01CF\x03\x02\x02\x02\u01CF\x17\x03\x02\x02\x02\u01D0\u01CE\x03" +
        "\x02\x02\x02\u01D1\u01D8\x05L\'\x02\u01D2\u01D8\x05\x8CG\x02\u01D3\u01D8" +
        "\x05\x8EH\x02\u01D4\u01D8\x05\x90I\x02\u01D5\u01D8\x05\xBC_\x02\u01D6" +
        "\u01D8\x05\x14\v\x02\u01D7\u01D1\x03\x02\x02\x02\u01D7\u01D2\x03\x02\x02" +
        "\x02\u01D7\u01D3\x03\x02\x02\x02\u01D7\u01D4\x03\x02\x02\x02\u01D7\u01D5" +
        "\x03\x02\x02\x02\u01D7\u01D6\x03\x02\x02\x02\u01D8\x19\x03\x02\x02\x02" +
        "\u01D9\u01DA\x07\x0F\x02\x02\u01DA\u01DB\x07\xDD\x02\x02\u01DB\u01DD\x05" +
        "\xE8u\x02\u01DC\u01DE\x07\xDD\x02\x02\u01DD\u01DC\x03\x02\x02\x02\u01DD" +
        "\u01DE\x03\x02\x02\x02\u01DE\u01DF\x03\x02\x02\x02\u01DF\u01E1\x07\xBF" +
        "\x02\x02\u01E0\u01E2\x07\xDD\x02\x02\u01E1\u01E0\x03\x02\x02\x02\u01E1" +
        "\u01E2\x03\x02\x02\x02\u01E2\u01E3\x03\x02\x02\x02\u01E3\u01EE\x05\u0116" +
        "\x8C\x02\u01E4\u01E6\x07\xDD\x02\x02\u01E5\u01E4\x03\x02\x02\x02\u01E5" +
        "\u01E6\x03\x02\x02\x02\u01E6\u01E7\x03\x02\x02\x02\u01E7\u01E9\x07\x03" +
        "\x02\x02\u01E8\u01EA\x07\xDD\x02\x02\u01E9\u01E8\x03\x02\x02\x02\u01E9" +
        "\u01EA\x03\x02\x02\x02\u01EA\u01EB\x03\x02\x02\x02\u01EB\u01ED\x05\u0116" +
        "\x8C\x02\u01EC\u01E5\x03\x02\x02\x02\u01ED\u01F0\x03\x02\x02\x02\u01EE" +
        "\u01EC\x03\x02\x02\x02\u01EE\u01EF\x03\x02\x02\x02\u01EF\x1B\x03\x02\x02" +
        "\x02\u01F0\u01EE\x03\x02\x02\x02\u01F1\u01F7\x05\x1E\x10\x02\u01F2\u01F3" +
        "\x05\u0126\x94\x02\u01F3\u01F4\x05\x1E\x10\x02\u01F4\u01F6\x03\x02\x02" +
        "\x02\u01F5\u01F2\x03\x02\x02\x02\u01F6\u01F9\x03\x02\x02\x02\u01F7\u01F5" +
        "\x03\x02\x02\x02\u01F7\u01F8\x03\x02\x02\x02\u01F8\u01FA\x03\x02\x02\x02" +
        "\u01F9\u01F7\x03\x02\x02\x02\u01FA\u01FB\x05\u0126\x94\x02\u01FB\x1D\x03" +
        "\x02\x02\x02\u01FC\u0240\x05\u0114\x8B\x02\u01FD\u0240\x05 \x11\x02\u01FE" +
        "\u0240\x05\x1A\x0E\x02\u01FF\u0240\x05\"\x12\x02\u0200\u0240\x05$\x13" +
        "\x02\u0201\u0240\x05&\x14\x02\u0202\u0240\x05(\x15\x02\u0203\u0240\x05" +
        "*\x16\x02\u0204\u0240\x05.\x18\x02\u0205\u0240\x054\x1B\x02\u0206\u0240" +
        "\x052\x1A\x02\u0207\u0240\x056\x1C\x02\u0208\u0240\x058\x1D\x02\u0209" +
        "\u0240\x05> \x02\u020A\u0240\x05@!\x02\u020B\u0240\x05D#\x02\u020C\u0240" +
        "\x05\xDCo\x02\u020D\u0240\x05F$\x02\u020E\u0240\x05H%\x02\u020F\u0240" +
        "\x05J&\x02\u0210\u0240\x05N(\x02\u0211\u0240\x05P)\x02\u0212\u0240\x05" +
        "R*\x02\u0213\u0240\x05T+\x02\u0214\u0240\x05^0\x02\u0215\u0240\x05`1\x02" +
        "\u0216\u0240\x05b2\x02\u0217\u0240\x05d3\x02\u0218\u0240\x05f4\x02\u0219" +
        "\u0240\x05h5\x02\u021A\u0240\x05j6\x02\u021B\u0240\x05l7\x02\u021C\u0240" +
        "\x05\x14\v\x02\u021D\u0240\x05x=\x02\u021E\u0240\x05z>\x02\u021F\u0240" +
        "\x05|?\x02\u0220\u0240\x05~@\x02\u0221\u0240\x05\x80A\x02\u0222\u0240" +
        "\x05\x82B\x02\u0223\u0240\x05\x84C\x02\u0224\u0240\x05\x8AF\x02\u0225" +
        "\u0240\x05\x92J\x02\u0226\u0240\x05\x94K\x02\u0227\u0240\x05\x96L\x02" +
        "\u0228\u0240\x05\x98M\x02\u0229\u0240\x05\x9CO\x02\u022A\u0240\x05\x9E" +
        "P\x02\u022B\u0240\x05\xA0Q\x02\u022C\u0240\x05\xA2R\x02\u022D\u0240\x05" +
        "\xA4S\x02\u022E\u0240\x05\xA6T\x02\u022F\u0240\x05\xA8U\x02\u0230\u0240" +
        "\x05\xAAV\x02\u0231\u0240\x05\xACW\x02\u0232\u0240\x05\xB4[\x02\u0233" +
        "\u0240\x05\xB6\\\x02\u0234\u0240\x05\xB8]\x02\u0235\u0240\x05\xBA^\x02" +
        "\u0236\u0240\x05\xBE`\x02\u0237\u0240\x05\xC6d\x02\u0238\u0240\x05\xC8" +
        "e\x02\u0239\u0240\x05\xCCg\x02\u023A\u0240\x05\xD2j\x02\u023B\u0240\x05" +
        "\xD4k\x02\u023C\u0240\x05\xD6l\x02\u023D\u0240\x05\xD8m\x02\u023E\u0240" +
        "\x05\xE2r\x02\u023F\u01FC\x03\x02\x02\x02\u023F\u01FD\x03\x02\x02\x02" +
        "\u023F\u01FE\x03\x02\x02\x02\u023F\u01FF\x03\x02\x02\x02\u023F\u0200\x03" +
        "\x02\x02\x02\u023F\u0201\x03\x02\x02\x02\u023F\u0202\x03\x02\x02\x02\u023F" +
        "\u0203\x03\x02\x02\x02\u023F\u0204\x03\x02\x02\x02\u023F\u0205\x03\x02" +
        "\x02\x02\u023F\u0206\x03\x02\x02\x02\u023F\u0207\x03\x02\x02\x02\u023F" +
        "\u0208\x03\x02\x02\x02\u023F\u0209\x03\x02\x02\x02\u023F\u020A\x03\x02" +
        "\x02\x02\u023F\u020B\x03\x02\x02\x02\u023F\u020C\x03\x02\x02\x02\u023F" +
        "\u020D\x03\x02\x02\x02\u023F\u020E\x03\x02\x02\x02\u023F\u020F\x03\x02" +
        "\x02\x02\u023F\u0210\x03\x02\x02\x02\u023F\u0211\x03\x02\x02\x02\u023F" +
        "\u0212\x03\x02\x02\x02\u023F\u0213\x03\x02\x02\x02\u023F\u0214\x03\x02" +
        "\x02\x02\u023F\u0215\x03\x02\x02\x02\u023F\u0216\x03\x02\x02\x02\u023F" +
        "\u0217\x03\x02\x02\x02\u023F\u0218\x03\x02\x02\x02\u023F\u0219\x03\x02" +
        "\x02\x02\u023F\u021A\x03\x02\x02\x02\u023F\u021B\x03\x02\x02\x02\u023F" +
        "\u021C\x03\x02\x02\x02\u023F\u021D\x03\x02\x02\x02\u023F\u021E\x03\x02" +
        "\x02\x02\u023F\u021F\x03\x02\x02\x02\u023F\u0220\x03\x02\x02\x02\u023F" +
        "\u0221\x03\x02\x02\x02\u023F\u0222\x03\x02\x02\x02\u023F\u0223\x03\x02" +
        "\x02\x02\u023F\u0224\x03\x02\x02\x02\u023F\u0225\x03\x02\x02\x02\u023F" +
        "\u0226\x03\x02\x02\x02\u023F\u0227\x03\x02\x02\x02\u023F\u0228\x03\x02" +
        "\x02\x02\u023F\u0229\x03\x02\x02\x02\u023F\u022A\x03\x02\x02\x02\u023F" +
        "\u022B\x03\x02\x02\x02\u023F\u022C\x03\x02\x02\x02\u023F\u022D\x03\x02" +
        "\x02\x02\u023F\u022E\x03\x02\x02\x02\u023F\u022F\x03\x02\x02\x02\u023F" +
        "\u0230\x03\x02\x02\x02\u023F\u0231\x03\x02\x02\x02\u023F\u0232\x03\x02" +
        "\x02\x02\u023F\u0233\x03\x02\x02\x02\u023F\u0234\x03\x02\x02\x02\u023F" +
        "\u0235\x03\x02\x02\x02\u023F\u0236\x03\x02\x02\x02\u023F\u0237\x03\x02" +
        "\x02\x02\u023F\u0238\x03\x02\x02\x02\u023F\u0239\x03\x02\x02\x02\u023F" +
        "\u023A\x03\x02\x02\x02\u023F\u023B\x03\x02\x02\x02\u023F\u023C\x03\x02" +
        "\x02\x02\u023F\u023D\x03\x02\x02\x02\u023F\u023E\x03\x02\x02\x02\u0240" +
        "\x1F\x03\x02\x02\x02\u0241\u0242\x07\x10\x02\x02\u0242\u0243\x07\xDD\x02" +
        "\x02\u0243\u024C\x05\xCAf\x02\u0244\u0246\x07\xDD\x02\x02\u0245\u0244" +
        "\x03\x02\x02\x02\u0245\u0246\x03\x02\x02\x02\u0246\u0247\x03\x02\x02\x02" +
        "\u0247\u0249\x07\x03\x02\x02\u0248\u024A\x07\xDD\x02\x02\u0249\u0248\x03" +
        "\x02\x02\x02\u0249\u024A\x03\x02\x02\x02\u024A\u024B\x03\x02\x02\x02\u024B" +
        "\u024D\x05\xCAf\x02\u024C\u0245\x03\x02\x02\x02\u024C\u024D\x03\x02\x02" +
        "\x02\u024D!\x03\x02\x02\x02\u024E\u024F\x07\x14\x02\x02\u024F#\x03\x02" +
        "\x02\x02\u0250\u0251\x07\x1C\x02\x02\u0251\u0252\x07\xDD\x02\x02\u0252" +
        "\u0253\x05\xCAf\x02\u0253%\x03\x02\x02\x02\u0254\u0255\x07\x1D\x02\x02" +
        "\u0255\u0256\x07\xDD\x02\x02\u0256\u0257\x05\xCAf\x02\u0257\'\x03\x02" +
        "\x02\x02\u0258\u0268\x07\x1F\x02\x02\u0259\u025A\x07\xDD\x02\x02\u025A" +
        "\u0265\x05\xDAn\x02\u025B\u025D\x07\xDD\x02\x02\u025C\u025B\x03\x02\x02" +
        "\x02\u025C\u025D\x03\x02\x02\x02\u025D\u025E\x03\x02\x02\x02\u025E\u0260" +
        "\x07\x03\x02\x02\u025F\u0261\x07\xDD\x02\x02\u0260\u025F\x03\x02\x02\x02" +
        "\u0260\u0261\x03\x02\x02\x02\u0261\u0262\x03\x02\x02\x02\u0262\u0264\x05" +
        "\xDAn\x02\u0263\u025C\x03\x02\x02\x02\u0264\u0267\x03\x02\x02\x02\u0265" +
        "\u0263\x03\x02\x02\x02\u0265\u0266\x03\x02\x02\x02\u0266\u0269\x03\x02" +
        "\x02\x02\u0267\u0265\x03\x02\x02\x02\u0268\u0259\x03\x02\x02\x02\u0268" +
        "\u0269\x03\x02\x02\x02\u0269)\x03\x02\x02\x02\u026A\u026B\x05\u011C\x8F" +
        "\x02\u026B\u026C\x07\xDD\x02\x02\u026C\u026E\x03\x02\x02\x02\u026D\u026A" +
        "\x03\x02\x02\x02\u026D\u026E\x03\x02\x02\x02\u026E\u026F\x03\x02\x02\x02" +
        "\u026F\u0270\x07!\x02\x02\u0270\u0271\x07\xDD\x02\x02\u0271\u027C\x05" +
        ",\x17\x02\u0272\u0274\x07\xDD\x02\x02\u0273\u0272\x03\x02\x02\x02\u0273" +
        "\u0274\x03\x02\x02\x02\u0274\u0275\x03\x02\x02\x02\u0275\u0277\x07\x03" +
        "\x02\x02\u0276\u0278\x07\xDD\x02\x02\u0277\u0276\x03\x02\x02\x02\u0277" +
        "\u0278\x03\x02\x02\x02\u0278\u0279\x03\x02\x02\x02\u0279\u027B\x05,\x17" +
        "\x02\u027A\u0273\x03\x02\x02\x02\u027B\u027E\x03\x02\x02\x02\u027C\u027A" +
        "\x03\x02\x02\x02\u027C\u027D\x03\x02\x02\x02\u027D+\x03\x02\x02\x02\u027E" +
        "\u027C\x03\x02\x02\x02\u027F\u0281\x05\u0104\x83\x02\u0280\u0282\x05\u011A" +
        "\x8E\x02\u0281\u0280\x03\x02\x02\x02\u0281\u0282\x03\x02\x02\x02\u0282" +
        "\u0285\x03\x02\x02\x02\u0283\u0284\x07\xDD\x02\x02\u0284\u0286\x05\u0106" +
        "\x84\x02\u0285";
    vbaParser._serializedATNSegment2 = "\u0283\x03\x02\x02\x02\u0285\u0286\x03\x02\x02\x02\u0286\u0288\x03\x02" +
        "\x02\x02\u0287\u0289\x07\xDD\x02\x02\u0288\u0287\x03\x02\x02\x02\u0288" +
        "\u0289\x03\x02\x02\x02\u0289\u028A\x03\x02\x02\x02\u028A\u028C\x07\xBF" +
        "\x02\x02\u028B\u028D\x07\xDD\x02\x02\u028C\u028B\x03\x02\x02\x02\u028C" +
        "\u028D\x03\x02\x02\x02\u028D\u028E\x03\x02\x02\x02\u028E\u028F\x05\xCA" +
        "f\x02\u028F-\x03\x02\x02\x02\u0290\u0292\x07#\x02\x02\u0291\u0293\x07" +
        "\xDD\x02\x02\u0292\u0291\x03\x02\x02\x02\u0292\u0293\x03\x02\x02\x02\u0293" +
        "\u0294\x03\x02\x02\x02\u0294\u0296\x07\xBF\x02\x02\u0295\u0297\x07\xDD" +
        "\x02\x02\u0296\u0295\x03\x02\x02\x02\u0296\u0297\x03\x02\x02\x02\u0297" +
        "\u0298\x03\x02\x02\x02\u0298\u0299\x05\xCAf\x02\u0299/\x03\x02\x02\x02" +
        "\u029A\u029B\x05\u011C\x8F\x02\u029B\u029C\x07\xDD\x02\x02\u029C\u029E" +
        "\x03\x02\x02\x02\u029D\u029A\x03\x02\x02\x02\u029D\u029E\x03\x02\x02\x02" +
        "\u029E\u029F\x03\x02\x02\x02\u029F\u02A0\x07$\x02\x02\u02A0\u02A3\x07" +
        "\xDD\x02\x02\u02A1\u02A2\x07\x8A\x02\x02\u02A2\u02A4\x07\xDD\x02\x02\u02A3" +
        "\u02A1\x03\x02\x02\x02\u02A3\u02A4\x03\x02\x02\x02\u02A4\u02AA\x03\x02" +
        "\x02\x02\u02A5\u02A7\x07O\x02\x02\u02A6\u02A8\x05\u011A\x8E\x02\u02A7" +
        "\u02A6\x03\x02\x02\x02\u02A7\u02A8\x03\x02\x02\x02\u02A8\u02AB\x03\x02" +
        "\x02\x02\u02A9\u02AB\x07\xA7\x02\x02\u02AA\u02A5\x03\x02\x02\x02\u02AA" +
        "\u02A9\x03\x02\x02\x02\u02AB\u02AC\x03\x02\x02\x02\u02AC\u02AD\x07\xDD" +
        "\x02\x02\u02AD\u02AF\x05\u0104\x83\x02\u02AE\u02B0\x05\u011A\x8E\x02\u02AF" +
        "\u02AE\x03\x02\x02\x02\u02AF\u02B0\x03\x02\x02\x02\u02B0\u02B1\x03\x02" +
        "\x02\x02\u02B1\u02B2\x07\xDD\x02\x02\u02B2\u02B3\x07b\x02\x02\u02B3\u02B4" +
        "\x07\xDD\x02\x02\u02B4\u02B9\x07\xCF\x02\x02\u02B5\u02B6\x07\xDD\x02\x02" +
        "\u02B6\u02B7\x07\r\x02\x02\u02B7\u02B8\x07\xDD\x02\x02\u02B8\u02BA\x07" +
        "\xCF\x02\x02\u02B9\u02B5\x03\x02\x02\x02\u02B9\u02BA\x03\x02\x02\x02\u02BA" +
        "\u02BF\x03\x02\x02\x02\u02BB\u02BD\x07\xDD\x02\x02\u02BC\u02BB\x03\x02" +
        "\x02\x02\u02BC\u02BD\x03\x02\x02\x02\u02BD\u02BE\x03\x02\x02\x02\u02BE" +
        "\u02C0\x05\xFA~\x02\u02BF\u02BC\x03\x02\x02\x02\u02BF\u02C0\x03\x02\x02" +
        "\x02\u02C0\u02C3\x03\x02\x02\x02\u02C1\u02C2\x07\xDD\x02\x02\u02C2\u02C4" +
        "\x05\u0106\x84\x02\u02C3\u02C1\x03\x02\x02\x02\u02C3\u02C4\x03\x02\x02" +
        "\x02\u02C41\x03\x02\x02\x02\u02C5\u02C6\t\x03\x02\x02\u02C6\u02C7\x07" +
        "\xDD\x02\x02\u02C7\u02D2\x05\u0112\x8A\x02\u02C8\u02CA\x07\xDD\x02\x02" +
        "\u02C9\u02C8\x03\x02\x02\x02\u02C9\u02CA\x03\x02\x02\x02\u02CA\u02CB\x03" +
        "\x02\x02\x02\u02CB\u02CD\x07\x03\x02\x02\u02CC\u02CE\x07\xDD\x02\x02\u02CD" +
        "\u02CC\x03\x02\x02\x02\u02CD\u02CE\x03\x02\x02\x02\u02CE\u02CF\x03\x02" +
        "\x02\x02\u02CF\u02D1\x05\u0112\x8A\x02\u02D0\u02C9\x03\x02\x02\x02\u02D1" +
        "\u02D4\x03\x02\x02\x02\u02D2\u02D0\x03\x02\x02\x02\u02D2\u02D3\x03\x02" +
        "\x02\x02\u02D33\x03\x02\x02\x02\u02D4\u02D2\x03\x02\x02\x02\u02D5\u02D6" +
        "\x071\x02\x02\u02D6\u02D7\x07\xDD\x02\x02\u02D7\u02D9\x05\xCAf\x02\u02D8" +
        "\u02DA\x07\xDD\x02\x02\u02D9\u02D8\x03\x02\x02\x02\u02D9\u02DA\x03\x02" +
        "\x02\x02\u02DA\u02DB\x03\x02\x02\x02\u02DB\u02DD\x07\x03\x02\x02\u02DC" +
        "\u02DE\x07\xDD\x02\x02\u02DD\u02DC\x03\x02\x02\x02\u02DD\u02DE\x03\x02" +
        "\x02\x02\u02DE\u02DF\x03\x02\x02\x02\u02DF\u02E8\x05\xCAf\x02\u02E0\u02E2" +
        "\x07\xDD\x02\x02\u02E1\u02E0\x03\x02\x02\x02\u02E1\u02E2\x03\x02\x02\x02" +
        "\u02E2\u02E3\x03\x02\x02\x02\u02E3\u02E5\x07\x03\x02\x02\u02E4\u02E6\x07" +
        "\xDD\x02\x02\u02E5\u02E4\x03\x02\x02\x02\u02E5\u02E6\x03\x02\x02\x02\u02E6" +
        "\u02E7\x03\x02\x02\x02\u02E7\u02E9\x05\xCAf\x02\u02E8\u02E1\x03\x02\x02" +
        "\x02\u02E8\u02E9\x03\x02\x02\x02\u02E95\x03\x02\x02\x02\u02EA\u02EB\x07" +
        "3\x02\x02\u02EB\u02ED\x05\u0126\x94\x02\u02EC\u02EE\x05\x1C\x0F\x02\u02ED" +
        "\u02EC\x03\x02\x02\x02\u02ED\u02EE\x03\x02\x02\x02\u02EE\u02EF\x03\x02" +
        "\x02\x02\u02EF\u02F0\x07_\x02\x02\u02F0\u0306\x03\x02\x02\x02\u02F1\u02F2" +
        "\x073\x02\x02\u02F2\u02F3\x07\xDD\x02\x02\u02F3\u02F4\t\x04\x02\x02\u02F4" +
        "\u02F5\x07\xDD\x02\x02\u02F5\u02F6\x05\xCAf\x02\u02F6\u02F8\x05\u0126" +
        "\x94\x02\u02F7\u02F9\x05\x1C\x0F\x02\u02F8\u02F7\x03\x02\x02\x02\u02F8" +
        "\u02F9\x03\x02\x02\x02\u02F9\u02FA\x03\x02\x02\x02\u02FA\u02FB\x07_\x02" +
        "\x02\u02FB\u0306\x03\x02\x02\x02\u02FC\u02FD\x073\x02\x02\u02FD\u02FE" +
        "\x05\u0126\x94\x02\u02FE\u02FF\x05\x1C\x0F\x02\u02FF\u0300\x07_\x02\x02" +
        "\u0300\u0301\x07\xDD\x02\x02\u0301\u0302\t\x04\x02\x02\u0302\u0303\x07" +
        "\xDD\x02\x02\u0303\u0304\x05\xCAf\x02\u0304\u0306\x03\x02\x02\x02\u0305" +
        "\u02EA\x03\x02\x02\x02\u0305\u02F1\x03\x02\x02\x02\u0305\u02FC\x03\x02" +
        "\x02\x02\u03067\x03\x02\x02\x02\u0307\u0308\x07@\x02\x02\u03089\x03\x02" +
        "\x02\x02\u0309\u030A\x05\u011C\x8F\x02\u030A\u030B\x07\xDD\x02\x02\u030B" +
        "\u030D\x03\x02\x02\x02\u030C\u0309\x03\x02\x02\x02\u030C\u030D\x03\x02" +
        "\x02\x02\u030D\u030E\x03\x02\x02\x02\u030E\u030F\x07A\x02\x02\u030F\u0310" +
        "\x07\xDD\x02\x02\u0310\u0311\x05\u0104\x83\x02\u0311\u0315\x05\u0126\x94" +
        "\x02\u0312\u0314\x05<\x1F\x02\u0313\u0312\x03\x02\x02\x02\u0314\u0317" +
        "\x03\x02\x02\x02\u0315\u0313\x03\x02\x02\x02\u0315\u0316\x03\x02\x02\x02" +
        "\u0316\u0318\x03\x02\x02\x02\u0317\u0315\x03\x02\x02\x02\u0318\u0319\x07" +
        "8\x02\x02\u0319;\x03\x02\x02\x02\u031A\u0323\x05\u0104\x83\x02\u031B\u031D" +
        "\x07\xDD\x02\x02\u031C\u031B\x03\x02\x02\x02\u031C\u031D\x03\x02\x02\x02" +
        "\u031D\u031E\x03\x02\x02\x02\u031E\u0320\x07\xBF\x02\x02\u031F\u0321\x07" +
        "\xDD\x02\x02\u0320\u031F\x03\x02\x02\x02\u0320\u0321\x03\x02\x02\x02\u0321" +
        "\u0322\x03\x02\x02\x02\u0322\u0324\x05\xCAf\x02\u0323\u031C\x03\x02\x02" +
        "\x02\u0323\u0324\x03\x02\x02\x02\u0324\u0325\x03\x02\x02\x02\u0325\u0326" +
        "\x05\u0126\x94\x02\u0326=\x03\x02\x02\x02\u0327\u0328\x07C\x02\x02\u0328" +
        "\u0329\x07\xDD\x02\x02\u0329\u0331\x05\xCAf\x02\u032A\u032C\x07\x03\x02" +
        "\x02\u032B\u032D\x07\xDD\x02\x02\u032C\u032B\x03\x02\x02\x02\u032C\u032D" +
        "\x03\x02\x02\x02\u032D\u032E\x03\x02\x02\x02\u032E\u0330\x05\xCAf\x02" +
        "\u032F\u032A\x03\x02\x02\x02\u0330\u0333\x03\x02\x02\x02\u0331\u0332\x03" +
        "\x02\x02\x02\u0331\u032F\x03\x02\x02\x02\u0332?\x03\x02\x02\x02\u0333" +
        "\u0331\x03\x02\x02\x02\u0334\u0335\x07D\x02\x02\u0335\u0336\x07\xDD\x02" +
        "\x02\u0336\u0337\x05\xCAf\x02\u0337A\x03\x02\x02\x02\u0338\u0339\x05\u011C" +
        "\x8F\x02\u0339\u033A\x07\xDD\x02\x02\u033A\u033C\x03\x02\x02\x02\u033B" +
        "\u0338\x03\x02\x02\x02\u033B\u033C\x03\x02\x02\x02\u033C\u033D\x03\x02" +
        "\x02\x02\u033D\u033E\x07E\x02\x02\u033E\u033F\x07\xDD\x02\x02\u033F\u0341" +
        "\x05\u0104\x83\x02\u0340\u0342\x07\xDD\x02\x02\u0341\u0340\x03\x02\x02" +
        "\x02\u0341\u0342\x03\x02\x02\x02\u0342\u0343\x03\x02\x02\x02\u0343\u0344" +
        "\x05\xFA~\x02\u0344C\x03\x02\x02\x02\u0345\u0346\t\x05\x02\x02\u0346E" +
        "\x03\x02\x02\x02\u0347\u0348\x07L\x02\x02\u0348\u0349\x07\xDD\x02\x02" +
        "\u0349\u034B\x05\xCAf\x02\u034A\u034C\x07\xDD\x02\x02\u034B\u034A\x03" +
        "\x02\x02\x02\u034B\u034C\x03\x02\x02\x02\u034C\u034D\x03\x02\x02\x02\u034D" +
        "\u034F\x07\x03\x02\x02\u034E\u0350\x07\xDD\x02\x02\u034F\u034E\x03\x02" +
        "\x02\x02\u034F\u0350\x03\x02\x02\x02\u0350\u0351\x03\x02\x02\x02\u0351" +
        "\u0352\x05\xCAf\x02\u0352G\x03\x02\x02\x02\u0353\u0354\x07N\x02\x02\u0354" +
        "\u0355\x07\xDD\x02\x02\u0355\u0356\x075\x02\x02\u0356\u0357\x07\xDD\x02" +
        "\x02\u0357\u0359\x05\u0104\x83\x02\u0358\u035A\x05\u011A\x8E\x02\u0359" +
        "\u0358\x03\x02\x02\x02\u0359\u035A\x03\x02\x02\x02\u035A\u035B\x03\x02" +
        "\x02\x02\u035B\u035C\x07\xDD\x02\x02\u035C\u035D\x07W\x02\x02\u035D\u035E" +
        "\x07\xDD\x02\x02\u035E\u035F\x05\xCAf\x02\u035F\u0361\x05\u0126\x94\x02" +
        "\u0360\u0362\x05\x1C\x0F\x02\u0361\u0360\x03\x02\x02\x02\u0361\u0362\x03" +
        "\x02\x02\x02\u0362\u0363\x03\x02\x02\x02\u0363\u0366\x07s\x02\x02\u0364" +
        "\u0365\x07\xDD\x02\x02\u0365\u0367\x05\u0104\x83\x02\u0366\u0364\x03\x02" +
        "\x02\x02\u0366\u0367\x03\x02\x02\x02\u0367I\x03\x02\x02\x02\u0368\u0369" +
        "\x07N\x02\x02\u0369\u036A\x07\xDD\x02\x02\u036A\u036C\x05\u0104\x83\x02" +
        "\u036B\u036D\x05\u011A\x8E\x02\u036C\u036B\x03\x02\x02\x02\u036C\u036D" +
        "\x03\x02\x02\x02\u036D\u0370\x03\x02\x02\x02\u036E\u036F\x07\xDD\x02\x02" +
        "\u036F\u0371\x05\u0106\x84\x02\u0370\u036E\x03\x02\x02\x02\u0370\u0371" +
        "\x03\x02\x02\x02\u0371\u0373\x03\x02\x02\x02\u0372\u0374\x07\xDD\x02\x02" +
        "\u0373\u0372\x03\x02\x02\x02\u0373\u0374\x03\x02\x02\x02\u0374\u0375\x03" +
        "\x02\x02\x02\u0375\u0377\x07\xBF\x02\x02\u0376\u0378\x07\xDD\x02\x02\u0377" +
        "\u0376\x03\x02\x02\x02\u0377\u0378\x03\x02\x02\x02\u0378\u0379\x03\x02" +
        "\x02\x02\u0379\u037A\x05\xCAf\x02\u037A\u037B\x07\xDD\x02\x02\u037B\u037C" +
        "\x07\xAC\x02\x02\u037C\u037D\x07\xDD\x02\x02\u037D\u0382\x05\xCAf\x02" +
        "\u037E\u037F\x07\xDD\x02\x02\u037F\u0380\x07\xA4\x02\x02\u0380\u0381\x07" +
        "\xDD\x02\x02\u0381\u0383\x05\xCAf\x02\u0382\u037E\x03\x02\x02\x02\u0382" +
        "\u0383\x03\x02\x02\x02\u0383\u0384\x03\x02\x02\x02\u0384\u0386\x05\u0126" +
        "\x94\x02\u0385\u0387\x05\x1C\x0F\x02\u0386\u0385\x03\x02\x02\x02\u0386" +
        "\u0387\x03\x02\x02\x02\u0387\u0388\x03\x02\x02\x02\u0388\u038B\x07s\x02" +
        "\x02\u0389\u038A\x07\xDD\x02\x02\u038A\u038C\x05\u0104\x83\x02\u038B\u0389" +
        "\x03\x02\x02\x02\u038B\u038C\x03\x02\x02\x02\u038CK\x03\x02\x02\x02\u038D" +
        "\u038E\x05\u011C\x8F\x02\u038E\u038F\x07\xDD\x02\x02\u038F\u0391\x03\x02" +
        "\x02\x02\u0390\u038D\x03\x02\x02\x02\u0390\u0391\x03\x02\x02\x02\u0391" +
        "\u0394\x03\x02\x02\x02\u0392\u0393\x07\xA3\x02\x02\u0393\u0395\x07\xDD" +
        "\x02\x02\u0394\u0392\x03\x02\x02\x02\u0394\u0395\x03\x02\x02\x02\u0395" +
        "\u0396\x03\x02\x02\x02\u0396\u0398\x07O\x02\x02\u0397\u0399\x07\xDD\x02" +
        "\x02\u0398\u0397\x03\x02\x02\x02\u0398\u0399\x03\x02\x02\x02\u0399\u039A" +
        "\x03\x02\x02\x02\u039A\u039C\x05\u0104\x83\x02\u039B\u039D\x05\u011A\x8E" +
        "\x02\u039C\u039B\x03\x02\x02\x02\u039C\u039D\x03\x02\x02\x02\u039D\u03A2" +
        "\x03\x02\x02\x02\u039E\u03A0\x07\xDD\x02\x02\u039F\u039E\x03\x02\x02\x02" +
        "\u039F\u03A0\x03\x02\x02\x02\u03A0\u03A1\x03\x02\x02\x02\u03A1\u03A3\x05" +
        "\xFA~\x02\u03A2\u039F\x03\x02\x02\x02\u03A2\u03A3\x03\x02\x02\x02\u03A3" +
        "\u03A8\x03\x02\x02\x02\u03A4\u03A6\x07\xDD\x02\x02\u03A5\u03A4\x03\x02" +
        "\x02\x02\u03A5\u03A6\x03\x02\x02\x02\u03A6\u03A7\x03\x02\x02\x02\u03A7" +
        "\u03A9\x05\u0106\x84\x02\u03A8\u03A5\x03\x02\x02\x02\u03A8\u03A9\x03\x02" +
        "\x02\x02\u03A9\u03AA\x03\x02\x02\x02\u03AA\u03AC\x05\u0126\x94\x02\u03AB" +
        "\u03AD\x05\x1C\x0F\x02\u03AC\u03AB\x03\x02\x02\x02\u03AC\u03AD\x03\x02" +
        "\x02\x02\u03AD\u03AE\x03\x02\x02\x02\u03AE\u03AF\x079\x02\x02\u03AFM\x03" +
        "\x02\x02\x02\u03B0\u03B1\x07P\x02\x02\u03B1\u03B2\x07\xDD\x02\x02\u03B2" +
        "\u03B4\x05\xDAn\x02\u03B3\u03B5\x07\xDD\x02\x02\u03B4\u03B3\x03\x02\x02" +
        "\x02\u03B4\u03B5\x03\x02\x02\x02\u03B5\u03B6\x03\x02\x02\x02\u03B6\u03B8" +
        "\x07\x03\x02\x02\u03B7\u03B9\x07\xDD\x02\x02\u03B8\u03B7\x03\x02\x02\x02" +
        "\u03B8\u03B9\x03\x02\x02\x02\u03B9\u03BB\x03\x02\x02\x02\u03BA\u03BC\x05" +
        "\xCAf\x02\u03BB\u03BA\x03\x02\x02\x02\u03BB\u03BC\x03\x02\x02\x02\u03BC" +
        "\u03BE\x03\x02\x02\x02\u03BD\u03BF\x07\xDD\x02\x02\u03BE\u03BD\x03\x02" +
        "\x02\x02\u03BE\u03BF\x03\x02\x02\x02\u03BF\u03C0\x03\x02\x02\x02\u03C0" +
        "\u03C2\x07\x03\x02\x02\u03C1\u03C3\x07\xDD\x02\x02\u03C2\u03C1\x03\x02" +
        "\x02\x02\u03C2\u03C3\x03\x02\x02\x02\u03C3\u03C4\x03\x02\x02\x02\u03C4" +
        "\u03C5\x05\xCAf\x02\u03C5O\x03\x02\x02\x02\u03C6\u03C7\x07R\x02\x02\u03C7" +
        "\u03C8\x07\xDD\x02\x02\u03C8\u03C9\x05\xCAf\x02\u03C9Q\x03\x02\x02\x02" +
        "\u03CA\u03CB\x07S\x02\x02\u03CB\u03CC\x07\xDD\x02\x02\u03CC\u03CD\x05" +
        "\xCAf\x02\u03CDS\x03\x02\x02\x02\u03CE\u03CF\x07T\x02\x02\u03CF\u03D0" +
        "\x07\xDD\x02\x02\u03D0\u03D1\x05X-\x02\u03D1\u03D2\x07\xDD\x02\x02\u03D2" +
        "\u03D3\x07\xAA\x02\x02\u03D3\u03D4\x07\xDD\x02\x02\u03D4\u03D9\x05\x1E" +
        "\x10\x02\u03D5\u03D6\x07\xDD\x02\x02\u03D6\u03D7\x076\x02\x02\u03D7\u03D8" +
        "\x07\xDD\x02\x02\u03D8\u03DA\x05\x1E\x10\x02\u03D9\u03D5\x03\x02\x02\x02" +
        "\u03D9\u03DA\x03\x02\x02\x02\u03DA\u03E8\x03\x02\x02\x02\u03DB\u03DF\x05" +
        "V,\x02\u03DC\u03DE\x05Z.\x02\u03DD\u03DC\x03\x02\x02\x02\u03DE\u03E1\x03" +
        "\x02\x02\x02\u03DF\u03DD\x03\x02\x02\x02\u03DF\u03E0\x03\x02\x02\x02\u03E0" +
        "\u03E3\x03\x02\x02\x02\u03E1\u03DF\x03\x02\x02\x02\u03E2\u03E4\x05\\/" +
        "\x02\u03E3\u03E2\x03\x02\x02\x02\u03E3\u03E4\x03\x02\x02\x02\u03E4\u03E5" +
        "\x03\x02\x02\x02\u03E5\u03E6\x07:\x02\x02\u03E6\u03E8\x03\x02\x02\x02" +
        "\u03E7\u03CE\x03\x02\x02\x02\u03E7\u03DB\x03\x02\x02\x02\u03E8U\x03\x02" +
        "\x02\x02\u03E9\u03EA\x07T\x02\x02\u03EA\u03EB\x07\xDD\x02\x02\u03EB\u03EC" +
        "\x05X-\x02\u03EC\u03ED\x07\xDD\x02\x02\u03ED\u03EE\x07\xAA\x02\x02\u03EE" +
        "\u03F0\x05\u0126\x94\x02\u03EF\u03F1\x05\x1C\x0F\x02\u03F0\u03EF\x03\x02" +
        "\x02\x02\u03F0\u03F1\x03\x02\x02\x02\u03F1W\x03\x02\x02\x02\u03F2\u03F3" +
        "\x05\xCAf\x02\u03F3Y\x03\x02\x02\x02\u03F4\u03F5\x077\x02\x02\u03F5\u03F6" +
        "\x07\xDD\x02\x02\u03F6\u03F7\x05X-\x02\u03F7\u03F8\x07\xDD\x02\x02\u03F8" +
        "\u03F9\x07\xAA\x02\x02\u03F9\u03FB\x05\u0126\x94\x02\u03FA\u03FC\x05\x1C" +
        "\x0F\x02\u03FB\u03FA\x03\x02\x02\x02\u03FB\u03FC\x03\x02\x02\x02\u03FC" +
        "[\x03\x02\x02\x02\u03FD\u03FE\x076\x02\x02\u03FE\u0400\x05\u0126\x94\x02" +
        "\u03FF\u0401\x05\x1C\x0F\x02\u0400\u03FF\x03\x02\x02\x02\u0400\u0401\x03" +
        "\x02\x02\x02\u0401]\x03\x02\x02\x02\u0402\u0403\x07V\x02\x02\u0403\u0404" +
        "\x07\xDD\x02\x02\u0404\u0405\x05\u0104\x83\x02\u0405_\x03\x02\x02\x02" +
        "\u0406\u0407\x07X\x02\x02\u0407\u0408\x07\xDD\x02\x02\u0408\u0411\x05" +
        "\xDAn\x02\u0409\u040B\x07\xDD\x02\x02\u040A\u0409\x03\x02\x02\x02\u040A" +
        "\u040B\x03\x02\x02\x02\u040B\u040C\x03\x02\x02\x02\u040C\u040E\x07\x03" +
        "\x02\x02\u040D\u040F\x07\xDD\x02\x02\u040E\u040D\x03\x02\x02\x02\u040E" +
        "\u040F\x03\x02\x02\x02\u040F\u0410\x03\x02\x02\x02\u0410\u0412\x05\xCA" +
        "f\x02\u0411\u040A\x03\x02\x02\x02\u0412\u0413\x03\x02\x02\x02\u0413\u0411" +
        "\x03\x02\x02\x02\u0413\u0414\x03\x02\x02\x02\u0414a\x03\x02\x02\x02\u0415" +
        "\u0416\x07[\x02\x02\u0416\u0417\x07\xDD\x02\x02\u0417\u0418\x05\xCAf\x02" +
        "\u0418c\x03\x02\x02\x02\u0419\u041A\x07a\x02\x02\u041A\u041C\x07\xDD\x02" +
        "\x02\u041B\u0419\x03\x02\x02\x02\u041B\u041C\x03\x02\x02\x02\u041C\u041D" +
        "\x03\x02\x02\x02\u041D\u041F\x05\xE8u\x02\u041E\u0420\x07\xDD\x02\x02" +
        "\u041F\u041E\x03\x02\x02\x02\u041F\u0420\x03\x02\x02\x02\u0420\u0421\x03" +
        "\x02\x02\x02\u0421\u0423\t\x06\x02\x02\u0422\u0424\x07\xDD\x02\x02\u0423" +
        "\u0422\x03\x02\x02\x02\u0423\u0424\x03\x02\x02\x02\u0424\u0425\x03\x02" +
        "\x02\x02\u0425\u0426\x05\xCAf\x02\u0426e\x03\x02\x02\x02\u0427\u0428\x07" +
        "d\x02\x02\u0428\u0429\x07\xDD\x02\x02\u0429\u042B\x05\xDAn\x02\u042A\u042C" +
        "\x07\xDD\x02\x02\u042B\u042A\x03\x02\x02\x02\u042B\u042C\x03\x02\x02\x02" +
        "\u042C\u042D\x03\x02\x02\x02\u042D\u042F\x07\x03\x02\x02\u042E\u0430\x07" +
        "\xDD\x02\x02\u042F\u042E\x03\x02\x02\x02\u042F\u0430\x03\x02\x02\x02\u0430" +
        "\u0431\x03\x02\x02\x02\u0431\u0432\x05\xCAf\x02\u0432g\x03\x02\x02\x02" +
        "\u0433\u0434\x07\\\x02\x02\u0434\u0435\x07\xDD\x02\x02\u0435\u0436\x05" +
        "\xCAf\x02\u0436i\x03\x02\x02\x02\u0437\u0438\x07]\x02\x02\u0438\u0439" +
        "\x07\xDD\x02\x02\u0439\u0448\x05\xCAf\x02\u043A\u043C\x07\xDD\x02\x02" +
        "\u043B\u043A\x03\x02\x02\x02\u043B\u043C\x03\x02\x02\x02\u043C\u043D\x03" +
        "\x02\x02\x02\u043D\u043F\x07\x03\x02\x02\u043E\u0440\x07\xDD\x02\x02\u043F" +
        "\u043E\x03\x02\x02\x02\u043F\u0440\x03\x02\x02\x02\u0440\u0441\x03\x02" +
        "\x02\x02\u0441\u0446\x05\xCAf\x02\u0442\u0443\x07\xDD\x02\x02\u0443\u0444" +
        "\x07\xAC\x02\x02\u0444\u0445\x07\xDD\x02\x02\u0445\u0447\x05\xCAf\x02" +
        "\u0446\u0442\x03\x02\x02\x02\u0446\u0447\x03\x02\x02\x02\u0447\u0449\x03" +
        "\x02\x02\x02\u0448\u043B\x03\x02\x02\x02\u0448\u0449\x03\x02\x02\x02\u0449" +
        "k\x03\x02\x02\x02\u044A\u044B\x07h\x02\x02\u044B\u044C\x07\xDD\x02\x02" +
        "\u044C\u044E\x05\xE8u\x02\u044D\u044F\x07\xDD\x02\x02\u044E\u044D\x03" +
        "\x02\x02\x02\u044E\u044F\x03\x02\x02\x02\u044F\u0450\x03\x02\x02\x02\u0450" +
        "\u0452\x07\xBF\x02\x02\u0451\u0453\x07\xDD\x02\x02\u0452\u0451\x03\x02" +
        "\x02\x02\u0452\u0453\x03\x02\x02\x02\u0453\u0454\x03\x02\x02\x02\u0454" +
        "\u0455\x05\xCAf\x02\u0455m\x03\x02\x02\x02\u0456\u0458\x07i\x02\x02\u0457" +
        "\u0459\x07\xDD\x02\x02\u0458\u0457\x03\x02\x02\x02\u0458\u0459\x03\x02" +
        "\x02\x02\u0459\u045A\x03\x02\x02\x02\u045A\u045C\x05\u0104\x83\x02\u045B" +
        "\u045D\x07\xDD\x02\x02\u045C\u045B\x03\x02\x02\x02\u045C\u045D\x03\x02" +
        "\x02\x02\u045D\u045E\x03\x02\x02\x02\u045E\u0460\x07\xBF\x02\x02\u045F" +
        "\u0461\x07\xDD\x02\x02\u0460\u045F\x03\x02\x02\x02\u0460\u0461\x03\x02" +
        "\x02\x02\u0461\u0462\x03\x02\x02\x02\u0462\u0463\x05\xCAf\x02\u0463o\x03" +
        "\x02\x02\x02\u0464\u0468\x05r:\x02\u0465\u0467\x05t;\x02\u0466\u0465\x03" +
        "\x02\x02\x02\u0467\u046A\x03\x02\x02\x02\u0468\u0466\x03\x02\x02\x02\u0468" +
        "\u0469\x03\x02\x02\x02\u0469\u046C\x03\x02\x02\x02\u046A\u0468\x03\x02" +
        "\x02\x02\u046B\u046D\x05v<\x02\u046C\u046B\x03\x02\x02\x02\u046C\u046D" +
        "\x03\x02\x02\x02\u046D\u046E\x03\x02\x02\x02\u046E\u046F\x07m\x02\x02" +
        "\u046Fq\x03\x02\x02\x02\u0470\u0472\x07j\x02\x02\u0471\u0473\x07\xDD\x02" +
        "\x02\u0472\u0471\x03\x02\x02\x02\u0472\u0473\x03\x02\x02\x02\u0473\u0474" +
        "\x03\x02\x02\x02\u0474\u0475\x05X-\x02\u0475\u0476\x07\xDD\x02\x02\u0476" +
        "\u0477\x07\xAA\x02\x02\u0477\u047D\x05\u0126\x94\x02\u0478\u047C\x05\x0E" +
        "\b\x02\u0479\u047C\x05\x16\f\x02\u047A\u047C\x05\x1C\x0F\x02\u047B\u0478" +
        "\x03\x02\x02\x02\u047B\u0479\x03\x02\x02\x02\u047B\u047A\x03\x02\x02\x02" +
        "\u047C\u047F\x03\x02\x02\x02\u047D\u047B\x03\x02\x02\x02\u047D\u047E\x03" +
        "\x02\x02\x02\u047Es\x03\x02\x02\x02\u047F\u047D\x03\x02\x02\x02\u0480" +
        "\u0482\x07k\x02\x02\u0481\u0483\x07\xDD\x02\x02\u0482\u0481\x03\x02\x02" +
        "\x02\u0482\u0483\x03\x02\x02\x02\u0483\u0484\x03\x02\x02\x02\u0484\u0485" +
        "\x05X-\x02\u0485\u0486\x07\xDD\x02\x02\u0486\u0487\x07\xAA\x02\x02\u0487" +
        "\u048D\x05\u0126\x94\x02\u0488\u048C\x05\x0E\b\x02\u0489\u048C\x05\x16" +
        "\f\x02\u048A\u048C\x05\x1C\x0F\x02\u048B\u0488\x03\x02\x02\x02\u048B\u0489" +
        "\x03\x02\x02\x02\u048B\u048A\x03\x02\x02\x02\u048C\u048F\x03\x02\x02\x02" +
        "\u048D\u048B\x03\x02\x02\x02\u048D\u048E\x03\x02\x02\x02\u048Eu\x03\x02" +
        "\x02\x02\u048F\u048D\x03\x02\x02\x02\u0490\u0491\x07l\x02\x02\u0491\u0497" +
        "\x05\u0126\x94\x02\u0492\u0496\x05\x0E\b\x02\u0493\u0496\x05\x16\f\x02" +
        "\u0494\u0496\x05\x1C\x0F\x02\u0495\u0492\x03\x02\x02\x02\u0495\u0493\x03" +
        "\x02\x02\x02\u0495\u0494\x03\x02\x02\x02\u0496\u0499\x03\x02\x02\x02\u0497" +
        "\u0495\x03\x02\x02\x02\u0497\u0498\x03\x02\x02\x02\u0498w\x03\x02\x02" +
        "\x02\u0499\u0497\x03\x02\x02\x02\u049A\u049C\x07o\x02\x02\u049B\u049D" +
        "\x07\xDD\x02\x02\u049C\u049B\x03\x02\x02\x02\u049C\u049D\x03\x02\x02\x02" +
        "\u049D\u049E\x03\x02\x02\x02\u049E\u04A0\x07\xC3\x02\x02\u049F\u04A1\x07" +
        "\xDD\x02\x02\u04A0\u049F\x03\x02\x02\x02\u04A0\u04A1\x03\x02\x02\x02\u04A1" +
        "\u04A2\x03\x02\x02\x02\u04A2\u04A4\x05\xF4{\x02\u04A3\u04A5\x07\xDD\x02" +
        "\x02\u04A4\u04A3\x03\x02\x02\x02\u04A4\u04A5\x03\x02\x02\x02\u04A5\u04A6" +
        "\x03\x02\x02\x02\u04A6\u04A7\x07\xCC\x02\x02\u04A7y\x03\x02\x02\x02\u04A8" +
        "\u04A9\x07p\x02\x02\u04A9\u04AA\x07\xDD\x02\x02\u04AA\u04AB\x05\xCAf\x02" +
        "\u04AB{\x03\x02\x02\x02\u04AC\u04AD\x07r\x02\x02\u04AD\u04AE\x07\xDD\x02" +
        "\x02\u04AE\u04AF\x05\xCAf\x02\u04AF\u04B0\x07\xDD\x02\x02\u04B0\u04B1" +
        "\x07\x12\x02\x02\u04B1\u04B2\x07\xDD\x02\x02\u04B2\u04B3\x05\xCAf\x02" +
        "\u04B3}\x03\x02\x02\x02\u04B4\u04B5\t\x07\x02\x02\u04B5\u04BC\x07\xDD" +
        "\x02\x02\u04B6\u04B7\x07S\x02\x02\u04B7\u04B8\x07\xDD\x02\x02\u04B8\u04BD" +
        "\x05\xCAf\x02\u04B9\u04BA\x07\x95\x02\x02\u04BA\u04BB\x07\xDD\x02\x02" +
        "\u04BB\u04BD\x07s\x02\x02\u04BC\u04B6\x03\x02\x02\x02\u04BC\u04B9\x03" +
        "\x02\x02\x02\u04BD\x7F\x03\x02\x02\x02\u04BE\u04BF\x07x\x02\x02\u04BF" +
        "\u04C0\x07\xDD\x02\x02\u04C0\u04C1\x05\xCAf\x02\u04C1\u04C2\x07\xDD\x02" +
        "\x02\u04C2\u04C3\x07S\x02\x02\u04C3\u04C4\x07\xDD\x02\x02\u04C4\u04CF" +
        "\x05\xCAf\x02\u04C5\u04C7\x07\xDD\x02\x02\u04C6\u04C5\x03\x02\x02\x02" +
        "\u04C6\u04C7\x03\x02\x02\x02\u04C7\u04C8\x03\x02\x02\x02\u04C8\u04CA\x07" +
        "\x03\x02\x02\u04C9\u04CB\x07\xDD\x02\x02\u04CA\u04C9\x03\x02\x02\x02\u04CA" +
        "\u04CB\x03\x02\x02\x02\u04CB\u04CC\x03\x02\x02\x02\u04CC\u04CE\x05\xCA" +
        "f\x02\u04CD\u04C6\x03\x02\x02\x02\u04CE\u04D1\x03\x02\x02\x02\u04CF\u04CD" +
        "\x03\x02\x02\x02\u04CF\u04D0\x03\x02\x02\x02\u04D0\x81\x03\x02\x02\x02" +
        "\u04D1\u04CF\x03\x02\x02\x02\u04D2\u04D3\x07x\x02\x02\u04D3\u04D4\x07" +
        "\xDD\x02\x02\u04D4\u04D5\x05\xCAf\x02\u04D5\u04D6\x07\xDD\x02\x02\u04D6" +
        "\u04D7\x07R\x02\x02\u04D7\u04D8\x07\xDD\x02\x02\u04D8\u04E3\x05\xCAf\x02" +
        "\u04D9\u04DB\x07\xDD\x02\x02\u04DA\u04D9\x03\x02\x02\x02\u04DA\u04DB\x03" +
        "\x02\x02\x02\u04DB\u04DC\x03\x02\x02\x02\u04DC\u04DE\x07\x03\x02\x02\u04DD" +
        "\u04DF\x07\xDD\x02\x02\u04DE\u04DD\x03\x02\x02\x02\u04DE\u04DF\x03\x02" +
        "\x02\x02\u04DF\u04E0\x03\x02\x02\x02\u04E0\u04E2\x05\xCAf\x02\u04E1\u04DA" +
        "\x03\x02\x02\x02\u04E2\u04E5\x03\x02\x02\x02\u04E3\u04E1\x03\x02\x02\x02" +
        "\u04E3\u04E4\x03\x02\x02\x02\u04E4\x83\x03\x02\x02\x02\u04E5\u04E3\x03" +
        "\x02\x02\x02\u04E6\u04E7\x07{\x02\x02\u04E7\u04E8\x07\xDD\x02\x02\u04E8" +
        "\u04E9\x05\xCAf\x02\u04E9\u04EA\x07\xDD\x02\x02\u04EA\u04EB\x07N\x02\x02" +
        "\u04EB\u04EC\x07\xDD\x02\x02\u04EC\u04F1\t\b\x02\x02\u04ED\u04EE\x07\xDD" +
        "\x02\x02\u04EE\u04EF\x07\v\x02\x02\u04EF\u04F0\x07\xDD\x02\x02\u04F0\u04F2" +
        "\t\t\x02\x02\u04F1\u04ED\x03\x02\x02\x02\u04F1\u04F2\x03\x02\x02\x02\u04F2" +
        "\u04F5\x03\x02\x02\x02\u04F3\u04F4\x07\xDD\x02\x02\u04F4\u04F6\t\n\x02" +
        "\x02\u04F5\u04F3\x03\x02\x02\x02\u04F5\u04F6\x03\x02\x02\x02\u04F6\u04F7" +
        "\x03\x02\x02\x02\u04F7\u04F8\x07\xDD\x02\x02\u04F8\u04F9\x07\x12\x02\x02" +
        "\u04F9\u04FA\x07\xDD\x02\x02\u04FA\u0505\x05\xDAn\x02\u04FB\u04FC\x07" +
        "\xDD\x02\x02\u04FC\u04FE\x07`\x02\x02\u04FD\u04FF\x07\xDD\x02\x02\u04FE" +
        "\u04FD\x03\x02\x02\x02\u04FE\u04FF\x03\x02\x02\x02\u04FF\u0500\x03\x02" +
        "\x02\x02\u0500\u0502\x07\xBF\x02\x02\u0501\u0503\x07\xDD\x02\x02\u0502" +
        "\u0501\x03\x02\x02\x02\u0502\u0503\x03\x02\x02\x02\u0503\u0504\x03\x02" +
        "\x02\x02\u0504\u0506\x05\xCAf\x02\u0505\u04FB\x03\x02\x02\x02\u0505\u0506" +
        "\x03\x02\x02\x02\u0506\x85\x03\x02\x02\x02\u0507\u0514\x05\x88E\x02\u0508" +
        "\u050A\x07\xDD\x02\x02\u0509\u0508\x03\x02\x02\x02\u0509\u050A\x03\x02" +
        "\x02\x02\u050A\u050B\x03\x02\x02\x02\u050B\u050D\t\v\x02\x02\u050C\u050E" +
        "\x07\xDD\x02\x02\u050D\u050C\x03\x02\x02\x02\u050D\u050E\x03\x02\x02\x02" +
        "\u050E\u0510\x03\x02\x02\x02\u050F\u0511\x05\x88E\x02\u0510\u050F\x03" +
        "\x02\x02\x02\u0510\u0511\x03\x02\x02\x02\u0511\u0513\x03\x02\x02\x02\u0512" +
        "\u0509\x03\x02\x02\x02\u0513\u0516\x03\x02\x02\x02\u0514\u0512\x03\x02" +
        "\x02\x02\u0514\u0515\x03\x02\x02\x02\u0515\u0529\x03\x02\x02\x02\u0516" +
        "\u0514\x03\x02\x02\x02\u0517\u0519\x05\x88E\x02\u0518\u0517\x03\x02\x02" +
        "\x02\u0518\u0519\x03\x02\x02\x02\u0519\u0524\x03\x02\x02\x02\u051A\u051C" +
        "\x07\xDD\x02\x02\u051B\u051A\x03\x02\x02\x02\u051B\u051C\x03\x02\x02\x02" +
        "\u051C\u051D\x03\x02\x02\x02\u051D\u051F\t\v\x02\x02\u051E\u0520\x07\xDD" +
        "\x02\x02\u051F\u051E\x03\x02\x02\x02\u051F\u0520\x03\x02\x02\x02\u0520" +
        "\u0522\x03\x02\x02\x02\u0521\u0523\x05\x88E\x02\u0522\u0521\x03\x02\x02" +
        "\x02\u0522\u0523\x03\x02\x02\x02\u0523\u0525\x03\x02\x02\x02\u0524\u051B" +
        "\x03\x02\x02\x02\u0525\u0526\x03\x02\x02\x02\u0526\u0524\x03\x02\x02\x02" +
        "\u0526\u0527\x03\x02\x02\x02\u0527\u0529\x03\x02\x02\x02\u0528\u0507\x03" +
        "\x02\x02\x02\u0528\u0518\x03\x02\x02\x02\u0529\x87\x03\x02\x02\x02\u052A" +
        "\u053C\x05\xCAf\x02\u052B\u0539\t\f\x02\x02\u052C\u052E\x07\xDD\x02\x02" +
        "\u052D\u052C\x03\x02\x02\x02\u052D\u052E\x03\x02\x02\x02\u052E\u052F\x03" +
        "\x02\x02\x02\u052F\u0531\x07\xC3\x02\x02\u0530\u0532\x07\xDD\x02\x02\u0531" +
        "\u0530\x03\x02\x02\x02\u0531\u0532\x03\x02\x02\x02\u0532\u0533\x03\x02" +
        "\x02\x02\u0533\u0535\x05\xF4{\x02\u0534\u0536\x07\xDD\x02\x02\u0535\u0534" +
        "\x03\x02\x02\x02\u0535\u0536\x03\x02\x02\x02\u0536\u0537\x03\x02\x02\x02" +
        "\u0537\u0538\x07\xCC\x02\x02\u0538\u053A\x03\x02\x02\x02\u0539\u052D\x03" +
        "\x02\x02\x02\u0539\u053A\x03\x02\x02\x02\u053A\u053C\x03\x02\x02\x02\u053B" +
        "\u052A\x03\x02\x02\x02\u053B\u052B\x03\x02\x02\x02\u053C\x89\x03\x02\x02" +
        "\x02\u053D\u053E\x07\x85\x02\x02\u053E\u053F\x07\xDD\x02\x02\u053F\u0541" +
        "\x05\xDAn\x02\u0540\u0542\x07\xDD\x02\x02\u0541\u0540\x03\x02\x02\x02" +
        "\u0541\u0542\x03\x02\x02\x02\u0542\u0543\x03\x02\x02\x02\u0543\u0548\x07" +
        "\x03\x02\x02\u0544\u0546\x07\xDD\x02\x02\u0545\u0544\x03";
    vbaParser._serializedATNSegment3 = "\x02\x02\x02\u0545\u0546\x03\x02\x02\x02\u0546\u0547\x03\x02\x02\x02\u0547" +
        "\u0549\x05\x86D\x02\u0548\u0545\x03\x02\x02\x02\u0548\u0549\x03\x02\x02" +
        "\x02\u0549\x8B\x03\x02\x02\x02\u054A\u054B\x05\u011C\x8F\x02\u054B\u054C" +
        "\x07\xDD\x02\x02\u054C\u054E\x03\x02\x02\x02\u054D\u054A\x03\x02\x02\x02" +
        "\u054D\u054E\x03\x02\x02\x02\u054E\u0551\x03\x02\x02\x02\u054F\u0550\x07" +
        "\xA3\x02\x02\u0550\u0552\x07\xDD\x02\x02\u0551\u054F\x03\x02\x02\x02\u0551" +
        "\u0552\x03\x02\x02\x02\u0552\u0553\x03\x02\x02\x02\u0553\u0554\x07\x87" +
        "\x02\x02\u0554\u0555\x07\xDD\x02\x02\u0555\u0557\x05\u0104\x83\x02\u0556" +
        "\u0558\x05\u011A\x8E\x02\u0557\u0556\x03\x02\x02\x02\u0557\u0558\x03\x02" +
        "\x02\x02\u0558\u055D\x03\x02\x02\x02\u0559\u055B\x07\xDD\x02\x02\u055A" +
        "\u0559\x03\x02\x02\x02\u055A\u055B\x03\x02\x02\x02\u055B\u055C\x03\x02" +
        "\x02\x02\u055C\u055E\x05\xFA~\x02\u055D\u055A\x03\x02\x02\x02\u055D\u055E" +
        "\x03\x02\x02\x02\u055E\u0561\x03\x02\x02\x02\u055F\u0560\x07\xDD\x02\x02" +
        "\u0560\u0562\x05\u0106\x84\x02\u0561\u055F\x03\x02\x02\x02\u0561\u0562" +
        "\x03\x02\x02\x02\u0562\u0563\x03\x02\x02\x02\u0563\u0565\x05\u0126\x94" +
        "\x02\u0564\u0566\x05\x1C\x0F\x02\u0565\u0564\x03\x02\x02\x02\u0565\u0566" +
        "\x03\x02\x02\x02\u0566\u0567\x03\x02\x02\x02\u0567\u0568\x07;\x02\x02" +
        "\u0568\x8D\x03\x02\x02\x02\u0569\u056A\x05\u011C\x8F\x02\u056A\u056B\x07" +
        "\xDD\x02\x02\u056B\u056D\x03\x02\x02\x02\u056C\u0569\x03\x02\x02\x02\u056C" +
        "\u056D\x03\x02\x02\x02\u056D\u0570\x03\x02\x02\x02\u056E\u056F\x07\xA3" +
        "\x02\x02\u056F\u0571\x07\xDD\x02\x02\u0570\u056E\x03\x02\x02\x02\u0570" +
        "\u0571\x03\x02\x02\x02\u0571\u0572\x03\x02\x02\x02\u0572\u0573\x07\x89" +
        "\x02\x02\u0573\u0574\x07\xDD\x02\x02\u0574\u0579\x05\u0104\x83\x02\u0575" +
        "\u0577\x07\xDD\x02\x02\u0576\u0575\x03\x02\x02\x02\u0576\u0577\x03\x02" +
        "\x02\x02\u0577\u0578\x03\x02\x02\x02\u0578\u057A\x05\xFA~\x02\u0579\u0576" +
        "\x03\x02\x02\x02\u0579\u057A\x03\x02\x02\x02\u057A\u057B\x03\x02\x02\x02" +
        "\u057B\u057D\x05\u0126\x94\x02\u057C\u057E\x05\x1C\x0F\x02\u057D\u057C" +
        "\x03\x02\x02\x02\u057D\u057E\x03\x02\x02\x02\u057E\u057F\x03\x02\x02\x02" +
        "\u057F\u0580\x07;\x02\x02\u0580\x8F\x03\x02\x02\x02\u0581\u0582\x05\u011C" +
        "\x8F\x02\u0582\u0583\x07\xDD\x02\x02\u0583\u0585\x03\x02\x02\x02\u0584" +
        "\u0581\x03\x02\x02\x02\u0584\u0585\x03\x02\x02\x02\u0585\u0588\x03\x02" +
        "\x02\x02\u0586\u0587\x07\xA3\x02\x02\u0587\u0589\x07\xDD\x02\x02\u0588" +
        "\u0586\x03\x02\x02\x02\u0588\u0589\x03\x02\x02\x02\u0589\u058A\x03\x02" +
        "\x02\x02\u058A\u058B\x07\x88\x02\x02\u058B\u058C\x07\xDD\x02\x02\u058C" +
        "\u0591\x05\u0104\x83\x02\u058D\u058F\x07\xDD\x02\x02\u058E\u058D\x03\x02" +
        "\x02\x02\u058E\u058F\x03\x02\x02\x02\u058F\u0590\x03\x02\x02\x02\u0590" +
        "\u0592\x05\xFA~\x02\u0591\u058E\x03\x02\x02\x02\u0591\u0592\x03\x02\x02" +
        "\x02\u0592\u0593\x03\x02\x02\x02\u0593\u0595\x05\u0126\x94\x02\u0594\u0596" +
        "\x05\x1C\x0F\x02\u0595\u0594\x03\x02\x02\x02\u0595\u0596\x03\x02\x02\x02" +
        "\u0596\u0597\x03\x02\x02\x02\u0597\u0598\x07;\x02\x02\u0598\x91\x03\x02" +
        "\x02\x02\u0599\u059A\x07\x8C\x02\x02\u059A\u059B\x07\xDD\x02\x02\u059B" +
        "\u059D\x05\xDAn\x02\u059C\u059E\x07\xDD\x02\x02\u059D\u059C\x03\x02\x02" +
        "\x02\u059D\u059E\x03\x02\x02\x02\u059E\u059F\x03\x02\x02\x02\u059F\u05A1" +
        "\x07\x03\x02\x02\u05A0\u05A2\x07\xDD\x02\x02\u05A1\u05A0\x03\x02\x02\x02" +
        "\u05A1\u05A2\x03\x02\x02\x02\u05A2\u05A4\x03\x02\x02\x02\u05A3\u05A5\x05" +
        "\xCAf\x02\u05A4\u05A3\x03\x02\x02\x02\u05A4\u05A5\x03\x02\x02\x02\u05A5" +
        "\u05A7\x03\x02\x02\x02\u05A6\u05A8\x07\xDD\x02\x02\u05A7\u05A6\x03\x02" +
        "\x02\x02\u05A7\u05A8\x03\x02\x02\x02\u05A8\u05A9\x03\x02\x02\x02\u05A9" +
        "\u05AB\x07\x03\x02\x02\u05AA\u05AC\x07\xDD\x02\x02\u05AB\u05AA\x03\x02" +
        "\x02\x02\u05AB\u05AC\x03\x02\x02\x02\u05AC\u05AD\x03\x02\x02\x02\u05AD" +
        "\u05AE\x05\xCAf\x02\u05AE\x93\x03\x02\x02\x02\u05AF\u05B0\x07\x8F\x02" +
        "\x02\u05B0\u05B1\x07\xDD\x02\x02\u05B1\u05C0\x05\u0104\x83\x02\u05B2\u05B4" +
        "\x07\xDD\x02\x02\u05B3\u05B2\x03\x02\x02\x02\u05B3\u05B4\x03\x02\x02\x02" +
        "\u05B4\u05B5\x03\x02\x02\x02\u05B5\u05B7\x07\xC3\x02\x02\u05B6\u05B8\x07" +
        "\xDD\x02\x02\u05B7\u05B6\x03\x02\x02\x02\u05B7\u05B8\x03\x02\x02\x02\u05B8" +
        "\u05BD\x03\x02\x02\x02\u05B9\u05BB\x05\xF4{\x02\u05BA\u05BC\x07\xDD\x02" +
        "\x02\u05BB\u05BA\x03\x02\x02\x02\u05BB\u05BC\x03\x02\x02\x02\u05BC\u05BE" +
        "\x03\x02\x02\x02\u05BD\u05B9\x03\x02\x02\x02\u05BD\u05BE\x03\x02\x02\x02" +
        "\u05BE\u05BF\x03\x02\x02\x02\u05BF\u05C1\x07\xCC\x02\x02\u05C0\u05B3\x03" +
        "\x02\x02\x02\u05C0\u05C1\x03\x02\x02\x02\u05C1\x95\x03\x02\x02\x02\u05C2" +
        "\u05C5\x07\x8E\x02\x02\u05C3\u05C4\x07\xDD\x02\x02\u05C4\u05C6\x05\xCA" +
        "f\x02\u05C5\u05C3\x03\x02\x02\x02\u05C5\u05C6\x03\x02\x02\x02\u05C6\x97" +
        "\x03\x02\x02\x02\u05C7\u05C8\x07\x92\x02\x02\u05C8\u05CB\x07\xDD\x02\x02" +
        "\u05C9\u05CA\x07\x84\x02\x02\u05CA\u05CC\x07\xDD\x02\x02\u05CB\u05C9\x03" +
        "\x02\x02\x02\u05CB\u05CC\x03\x02\x02\x02\u05CC\u05CD\x03\x02\x02\x02\u05CD" +
        "\u05D8\x05\x9AN\x02\u05CE\u05D0\x07\xDD\x02\x02\u05CF\u05CE\x03\x02\x02" +
        "\x02\u05CF\u05D0\x03\x02\x02\x02\u05D0\u05D1\x03\x02\x02\x02\u05D1\u05D3" +
        "\x07\x03\x02\x02\u05D2\u05D4\x07\xDD\x02\x02\u05D3\u05D2\x03\x02\x02\x02" +
        "\u05D3\u05D4\x03\x02\x02\x02\u05D4\u05D5\x03\x02\x02\x02\u05D5\u05D7\x05" +
        "\x9AN\x02\u05D6\u05CF\x03\x02\x02\x02\u05D7\u05DA\x03\x02\x02\x02\u05D8" +
        "\u05D6\x03\x02\x02\x02\u05D8\u05D9\x03\x02\x02\x02\u05D9\x99\x03\x02\x02" +
        "\x02\u05DA\u05D8\x03\x02\x02\x02\u05DB\u05DD\x05\xE8u\x02\u05DC\u05DE" +
        "\x07\xDD\x02\x02\u05DD\u05DC\x03\x02\x02\x02\u05DD\u05DE\x03\x02\x02\x02" +
        "\u05DE\u05DF\x03\x02\x02\x02\u05DF\u05E1\x07\xC3\x02\x02\u05E0\u05E2\x07" +
        "\xDD\x02\x02\u05E1\u05E0\x03\x02\x02\x02\u05E1\u05E2\x03\x02\x02\x02\u05E2" +
        "\u05E3\x03\x02\x02\x02\u05E3\u05E5\x05\u0100\x81\x02\u05E4\u05E6\x07\xDD" +
        "\x02\x02\u05E5\u05E4\x03\x02\x02\x02\u05E5\u05E6\x03\x02\x02\x02\u05E6" +
        "\u05E7\x03\x02\x02\x02\u05E7\u05EA\x07\xCC\x02\x02\u05E8\u05E9\x07\xDD" +
        "\x02\x02\u05E9\u05EB\x05\u0106\x84\x02\u05EA\u05E8\x03\x02\x02\x02\u05EA" +
        "\u05EB\x03\x02\x02\x02\u05EB\x9B\x03\x02\x02\x02\u05EC\u05ED\x07\x94\x02" +
        "\x02\u05ED\x9D\x03\x02\x02\x02\u05EE\u05F4\x07\x95\x02\x02\u05EF\u05F2" +
        "\x07\xDD\x02\x02\u05F0\u05F3\x07s\x02\x02\u05F1\u05F3\x05\u0104\x83\x02" +
        "\u05F2\u05F0\x03\x02\x02\x02\u05F2\u05F1\x03\x02\x02\x02\u05F3\u05F5\x03" +
        "\x02\x02\x02\u05F4\u05EF\x03\x02\x02\x02\u05F4\u05F5\x03\x02\x02\x02\u05F5" +
        "\x9F\x03\x02\x02\x02\u05F6\u05F7\x07\x96\x02\x02\u05F7\xA1\x03\x02\x02" +
        "\x02\u05F8\u05F9\x07\x97\x02\x02\u05F9\u05FA\x07\xDD\x02\x02\u05FA\u05FB" +
        "\x05\xCAf\x02\u05FB\xA3\x03\x02\x02\x02\u05FC\u05FD\x07\x98\x02\x02\u05FD" +
        "\u05FE\x07\xDD\x02\x02\u05FE\u0600\x05\xE8u\x02\u05FF\u0601\x07\xDD\x02" +
        "\x02\u0600\u05FF\x03\x02\x02\x02\u0600\u0601\x03\x02\x02\x02\u0601\u0602" +
        "\x03\x02\x02\x02\u0602\u0604\x07\xBF\x02\x02\u0603\u0605\x07\xDD\x02\x02" +
        "\u0604\u0603\x03\x02\x02\x02\u0604\u0605\x03\x02\x02\x02\u0605\u0606\x03" +
        "\x02\x02\x02\u0606\u0607\x05\xCAf\x02\u0607\xA5\x03\x02\x02\x02\u0608" +
        "\u0609\x07\x99\x02\x02\u0609\u060A\x07\xDD\x02\x02\u060A\u060C\x05\xCA" +
        "f\x02\u060B\u060D\x07\xDD\x02\x02\u060C\u060B\x03\x02\x02\x02\u060C\u060D" +
        "\x03\x02\x02\x02\u060D\u060E\x03\x02\x02\x02\u060E\u0610\x07\x03\x02\x02" +
        "\u060F\u0611\x07\xDD\x02\x02\u0610\u060F\x03\x02\x02\x02\u0610\u0611\x03" +
        "\x02\x02\x02\u0611\u0612\x03\x02\x02\x02\u0612\u0613\x05\xCAf\x02\u0613" +
        "\xA7\x03\x02\x02\x02\u0614\u0615\x07\x9A\x02\x02\u0615\u0616\x07\xDD\x02" +
        "\x02\u0616\u0618\x05\xCAf\x02\u0617\u0619\x07\xDD\x02\x02\u0618\u0617" +
        "\x03\x02\x02\x02\u0618\u0619\x03\x02\x02\x02\u0619\u061A\x03\x02\x02\x02" +
        "\u061A\u061C\x07\x03\x02\x02\u061B\u061D\x07\xDD\x02\x02\u061C\u061B\x03" +
        "\x02\x02\x02\u061C\u061D\x03\x02\x02\x02\u061D\u061E\x03\x02\x02\x02\u061E" +
        "\u0620\x05\xCAf\x02\u061F\u0621\x07\xDD\x02\x02\u0620\u061F\x03\x02\x02" +
        "\x02\u0620\u0621\x03\x02\x02\x02\u0621\u0622\x03\x02\x02\x02\u0622\u0624" +
        "\x07\x03\x02\x02\u0623\u0625\x07\xDD\x02\x02\u0624\u0623\x03\x02\x02\x02" +
        "\u0624\u0625\x03\x02\x02\x02\u0625\u0626\x03\x02\x02\x02\u0626\u0628\x05" +
        "\xCAf\x02\u0627\u0629\x07\xDD\x02\x02\u0628\u0627\x03\x02\x02\x02\u0628" +
        "\u0629\x03\x02\x02\x02\u0629\u062A\x03\x02\x02\x02\u062A\u062C\x07\x03" +
        "\x02\x02\u062B\u062D\x07\xDD\x02\x02\u062C\u062B\x03\x02\x02\x02\u062C" +
        "\u062D\x03\x02\x02\x02\u062D\u062E\x03\x02\x02\x02\u062E\u062F\x05\xCA" +
        "f\x02\u062F\xA9\x03\x02\x02\x02\u0630\u0631\x07\x9B\x02\x02\u0631\u0632" +
        "\x07\xDD\x02\x02\u0632\u0634\x05\xDAn\x02\u0633\u0635\x07\xDD\x02\x02" +
        "\u0634\u0633\x03\x02\x02\x02\u0634\u0635\x03\x02\x02\x02\u0635\u0636\x03" +
        "\x02\x02\x02\u0636\u0638\x07\x03\x02\x02\u0637\u0639\x07\xDD\x02\x02\u0638" +
        "\u0637\x03\x02\x02\x02\u0638\u0639\x03\x02\x02\x02\u0639\u063A\x03\x02" +
        "\x02\x02\u063A\u063B\x05\xCAf\x02\u063B\xAB\x03\x02\x02\x02\u063C\u063D" +
        "\x07\x9C\x02\x02\u063D\u063E\x07\xDD\x02\x02\u063E\u063F\x07\x1B\x02\x02" +
        "\u063F\u0640\x07\xDD\x02\x02\u0640\u0641\x05\xCAf\x02\u0641\u0645\x05" +
        "\u0126\x94\x02\u0642\u0644\x05\xB0Y\x02\u0643\u0642\x03\x02\x02\x02\u0644" +
        "\u0647\x03\x02\x02\x02\u0645\u0643\x03\x02\x02\x02\u0645\u0646\x03\x02" +
        "\x02\x02\u0646\u0648\x03\x02\x02\x02\u0647\u0645\x03\x02\x02\x02\u0648" +
        "\u0649\x07<\x02\x02\u0649\xAD\x03\x02\x02\x02\u064A\u064C\x07Y\x02\x02" +
        "\u064B\u064D\x07\xDD\x02\x02\u064C\u064B\x03\x02\x02\x02\u064C\u064D\x03" +
        "\x02\x02\x02\u064D\u064E\x03\x02\x02\x02\u064E\u0650\x05\u010C\x87\x02" +
        "\u064F\u0651\x07\xDD\x02\x02\u0650\u064F\x03\x02\x02\x02\u0650\u0651\x03" +
        "\x02\x02\x02\u0651\u0652\x03\x02\x02\x02\u0652\u0653\x05\xCAf\x02\u0653" +
        "\u065C\x03\x02\x02\x02\u0654\u0655\x05\xCAf\x02\u0655\u0656\x07\xDD\x02" +
        "\x02\u0656\u0657\x07\xAC\x02\x02\u0657\u0658\x07\xDD\x02\x02\u0658\u0659" +
        "\x05\xCAf\x02\u0659\u065C\x03\x02\x02\x02\u065A\u065C\x05\xCAf\x02\u065B" +
        "\u064A\x03\x02\x02\x02\u065B\u0654\x03\x02\x02\x02\u065B\u065A\x03\x02" +
        "\x02\x02\u065C\xAF\x03\x02\x02\x02\u065D\u065E\x07\x1B\x02\x02\u065E\u065F" +
        "\x07\xDD\x02\x02\u065F\u0660\x05\xB2Z\x02\u0660\u0662\x05\u0126\x94\x02" +
        "\u0661\u0663\x05\x1C\x0F\x02\u0662\u0661\x03\x02\x02\x02\u0662\u0663\x03" +
        "\x02\x02\x02\u0663\xB1\x03\x02\x02\x02\u0664\u0674\x076\x02\x02\u0665" +
        "\u0670\x05\xAEX\x02\u0666\u0668\x07\xDD\x02\x02\u0667\u0666\x03\x02\x02" +
        "\x02\u0667\u0668\x03\x02\x02\x02\u0668\u0669\x03\x02\x02\x02\u0669\u066B" +
        "\x07\x03\x02\x02\u066A\u066C\x07\xDD\x02\x02\u066B\u066A\x03\x02\x02\x02" +
        "\u066B\u066C\x03\x02\x02\x02\u066C\u066D\x03\x02\x02\x02\u066D\u066F\x05" +
        "\xAEX\x02\u066E\u0667\x03\x02\x02\x02\u066F\u0672\x03\x02\x02\x02\u0670" +
        "\u066E\x03\x02\x02\x02\u0670\u0671\x03\x02\x02\x02\u0671\u0674\x03\x02" +
        "\x02\x02\u0672\u0670\x03\x02\x02\x02\u0673\u0664\x03\x02\x02\x02\u0673" +
        "\u0665\x03\x02\x02\x02\u0674\xB3\x03\x02\x02\x02\u0675\u0676\x07\x9D\x02" +
        "\x02\u0676\u0677\x07\xDD\x02\x02\u0677\u0680\x05\xCAf\x02\u0678\u067A" +
        "\x07\xDD\x02\x02\u0679\u0678\x03\x02\x02\x02\u0679\u067A\x03\x02\x02\x02" +
        "\u067A\u067B\x03\x02\x02\x02\u067B\u067D\x07\x03\x02\x02\u067C\u067E\x07" +
        "\xDD\x02\x02\u067D\u067C\x03\x02\x02\x02\u067D\u067E\x03\x02\x02\x02\u067E" +
        "\u067F\x03\x02\x02\x02\u067F\u0681\x05\xCAf\x02\u0680\u0679\x03\x02\x02" +
        "\x02\u0680\u0681\x03\x02\x02\x02\u0681\xB5\x03\x02\x02\x02\u0682\u0683" +
        "\x07\x9F\x02\x02\u0683\u0684\x07\xDD\x02\x02\u0684\u0686\x05\xCAf\x02" +
        "\u0685\u0687\x07\xDD\x02\x02\u0686\u0685\x03\x02\x02\x02\u0686\u0687\x03" +
        "\x02\x02\x02\u0687\u0688\x03\x02\x02\x02\u0688\u068A\x07\x03\x02\x02\u0689" +
        "\u068B\x07\xDD\x02\x02\u068A\u0689\x03\x02\x02\x02\u068A\u068B\x03\x02" +
        "\x02\x02\u068B\u068C\x03\x02\x02\x02\u068C\u068D\x05\xCAf\x02\u068D\xB7" +
        "\x03\x02\x02\x02\u068E\u068F\x07\x9E\x02\x02\u068F\u0690\x07\xDD\x02\x02" +
        "\u0690\u0692\x05\xE8u\x02\u0691\u0693\x07\xDD\x02\x02\u0692\u0691\x03" +
        "\x02\x02\x02\u0692\u0693\x03\x02\x02\x02\u0693\u0694\x03\x02\x02\x02\u0694" +
        "\u0696\x07\xBF\x02\x02\u0695\u0697\x07\xDD\x02\x02\u0696\u0695\x03\x02" +
        "\x02\x02\u0696\u0697\x03\x02\x02\x02\u0697\u0698\x03\x02\x02\x02\u0698" +
        "\u0699\x05\xCAf\x02\u0699\xB9\x03\x02\x02\x02\u069A\u069B\x07\xA5\x02" +
        "\x02\u069B\xBB\x03\x02\x02\x02\u069C\u069D\x05\u011C\x8F\x02\u069D\u069E" +
        "\x07\xDD\x02\x02\u069E\u06A0\x03\x02\x02\x02\u069F\u069C\x03\x02\x02\x02" +
        "\u069F\u06A0\x03\x02\x02\x02\u06A0\u06A3\x03\x02\x02\x02\u06A1\u06A2\x07" +
        "\xA3\x02\x02\u06A2\u06A4\x07\xDD\x02\x02\u06A3\u06A1\x03\x02\x02\x02\u06A3" +
        "\u06A4\x03\x02\x02\x02\u06A4\u06A5\x03\x02\x02\x02\u06A5\u06A7\x07\xA7" +
        "\x02\x02\u06A6\u06A8\x07\xDD\x02\x02\u06A7\u06A6\x03\x02\x02\x02\u06A7" +
        "\u06A8\x03\x02\x02\x02\u06A8\u06A9\x03\x02\x02\x02\u06A9\u06AE\x05\u0104" +
        "\x83\x02\u06AA\u06AC\x07\xDD\x02\x02\u06AB\u06AA\x03\x02\x02\x02\u06AB" +
        "\u06AC\x03\x02\x02\x02\u06AC\u06AD\x03\x02\x02\x02\u06AD\u06AF\x05\xFA" +
        "~\x02\u06AE\u06AB\x03\x02\x02\x02\u06AE\u06AF\x03\x02\x02\x02\u06AF\u06B0" +
        "\x03\x02\x02\x02\u06B0\u06B2\x05\u0126\x94\x02\u06B1\u06B3\x05\x1C\x0F" +
        "\x02\u06B2\u06B1\x03\x02\x02\x02\u06B2\u06B3\x03\x02\x02\x02\u06B3\u06B4" +
        "\x03\x02\x02\x02\u06B4\u06B5\x07=\x02\x02\u06B5\xBD\x03\x02\x02\x02\u06B6" +
        "\u06B8\x07\xAB\x02\x02\u06B7\u06B9\x07\xDD\x02\x02\u06B8\u06B7\x03\x02" +
        "\x02\x02\u06B8\u06B9\x03\x02\x02\x02\u06B9\u06BA\x03\x02\x02\x02\u06BA" +
        "\u06BC\x07\xBF\x02\x02\u06BB\u06BD\x07\xDD\x02\x02\u06BC\u06BB\x03\x02" +
        "\x02\x02\u06BC\u06BD\x03\x02\x02\x02\u06BD\u06BE\x03\x02\x02\x02\u06BE" +
        "\u06BF\x05\xCAf\x02\u06BF\xBF\x03\x02\x02\x02\u06C0\u06C1\x05\u011C\x8F" +
        "\x02\u06C1\u06C2\x07\xDD\x02\x02\u06C2\u06C4\x03\x02\x02\x02\u06C3\u06C0" +
        "\x03\x02\x02\x02\u06C3\u06C4\x03\x02\x02\x02\u06C4\u06C5\x03\x02\x02\x02" +
        "\u06C5\u06C6\x07\xAE\x02\x02\u06C6\u06C7\x07\xDD\x02\x02\u06C7\u06C8\x05" +
        "\u0104\x83\x02\u06C8\u06CC\x05\u0126\x94\x02\u06C9\u06CB\x05\xC2b\x02" +
        "\u06CA\u06C9\x03\x02\x02\x02\u06CB\u06CE\x03\x02\x02\x02\u06CC\u06CA\x03" +
        "\x02\x02\x02\u06CC\u06CD\x03\x02\x02\x02\u06CD\u06CF\x03\x02\x02\x02\u06CE" +
        "\u06CC\x03\x02\x02\x02\u06CF\u06D0\x07>\x02\x02\u06D0\xC1\x03\x02\x02" +
        "\x02\u06D1\u06E0\x05\u0104\x83\x02\u06D2\u06D4\x07\xDD\x02\x02\u06D3\u06D2" +
        "\x03\x02\x02\x02\u06D3\u06D4\x03\x02\x02\x02\u06D4\u06D5\x03\x02\x02\x02" +
        "\u06D5\u06DA\x07\xC3\x02\x02\u06D6\u06D8\x07\xDD\x02\x02\u06D7\u06D6\x03" +
        "\x02\x02\x02\u06D7\u06D8\x03\x02\x02\x02\u06D8\u06D9\x03\x02\x02\x02\u06D9" +
        "\u06DB\x05\u0100\x81\x02\u06DA\u06D7\x03\x02\x02\x02\u06DA\u06DB\x03\x02" +
        "\x02\x02\u06DB\u06DD\x03\x02\x02\x02\u06DC\u06DE\x07\xDD\x02\x02\u06DD" +
        "\u06DC\x03\x02\x02\x02\u06DD\u06DE\x03\x02\x02\x02\u06DE\u06DF\x03\x02" +
        "\x02\x02\u06DF\u06E1\x07\xCC\x02\x02\u06E0\u06D3\x03\x02\x02\x02\u06E0" +
        "\u06E1\x03\x02\x02\x02\u06E1\u06E4\x03\x02\x02\x02\u06E2\u06E3\x07\xDD" +
        "\x02\x02\u06E3\u06E5\x05\u0106\x84\x02\u06E4\u06E2\x03\x02\x02\x02\u06E4" +
        "\u06E5\x03\x02\x02\x02\u06E5\u06E6\x03\x02\x02\x02\u06E6\u06E7\x05\u0126" +
        "\x94\x02\u06E7\xC3\x03\x02\x02\x02\u06E8\u06E9\x07\xAF\x02\x02\u06E9\u06EA" +
        "\x07\xDD\x02\x02\u06EA\u06EF\x05\xCAf\x02\u06EB\u06EC\x07\xDD\x02\x02" +
        "\u06EC\u06ED\x07Y\x02\x02\u06ED\u06EE\x07\xDD\x02\x02\u06EE\u06F0\x05" +
        "\u0118\x8D\x02\u06EF\u06EB\x03\x02\x02\x02\u06EF\u06F0\x03\x02\x02\x02" +
        "\u06F0\xC5\x03\x02\x02\x02\u06F1\u06F2\x07\xB0\x02\x02\u06F2\u06F3\x07" +
        "\xDD\x02\x02\u06F3\u06F4\x05\xCAf\x02\u06F4\xC7\x03\x02\x02\x02\u06F5" +
        "\u06F6\x07\xB1\x02\x02\u06F6\u06F7\x07\xDD\x02\x02\u06F7\u0706\x05\xDA" +
        "n\x02\u06F8\u06FA\x07\xDD\x02\x02\u06F9\u06F8\x03\x02\x02\x02\u06F9\u06FA" +
        "\x03\x02\x02\x02\u06FA\u06FB\x03\x02\x02\x02\u06FB\u06FD\x07\x03\x02\x02" +
        "\u06FC\u06FE\x07\xDD\x02\x02\u06FD\u06FC\x03\x02\x02\x02\u06FD\u06FE\x03" +
        "\x02\x02\x02\u06FE\u06FF\x03\x02\x02\x02\u06FF\u0704\x05\xCAf\x02\u0700" +
        "\u0701\x07\xDD\x02\x02\u0701\u0702\x07\xAC\x02\x02\u0702\u0703\x07\xDD" +
        "\x02\x02\u0703\u0705\x05\xCAf\x02\u0704\u0700\x03\x02\x02\x02\u0704\u0705" +
        "\x03\x02\x02\x02\u0705\u0707\x03\x02\x02\x02\u0706\u06F9\x03\x02\x02\x02" +
        "\u0706\u0707\x03\x02\x02\x02\u0707\xC9\x03\x02\x02\x02\u0708\u0709\bf" +
        "\x01\x02\u0709\u0745\x05\u0116\x8C\x02\u070A\u0745\x05\xE8u\x02\u070B" +
        "\u070D\x07\xC3\x02\x02\u070C\u070E\x07\xDD\x02\x02\u070D\u070C\x03\x02" +
        "\x02\x02\u070D\u070E\x03\x02\x02\x02\u070E\u070F\x03\x02\x02\x02\u070F" +
        "\u071A\x05\xCAf\x02\u0710\u0712\x07\xDD\x02\x02\u0711\u0710\x03\x02\x02" +
        "\x02\u0711\u0712\x03\x02\x02\x02\u0712\u0713\x03\x02\x02\x02\u0713\u0715" +
        "\x07\x03\x02\x02\u0714\u0716\x07\xDD\x02\x02\u0715\u0714\x03\x02\x02\x02" +
        "\u0715\u0716\x03\x02\x02\x02\u0716\u0717\x03\x02\x02\x02\u0717\u0719\x05" +
        "\xCAf\x02\u0718\u0711\x03\x02\x02\x02\u0719\u071C\x03\x02\x02\x02\u071A" +
        "\u0718\x03\x02\x02\x02\u071A\u071B\x03\x02\x02\x02\u071B\u071D\x03\x02" +
        "\x02\x02\u071C\u071A\x03\x02\x02\x02\u071D\u071E\x07\xCC\x02\x02\u071E" +
        "\u0745\x03\x02\x02\x02\u071F\u0721\x07t\x02\x02\u0720\u0722\x07\xDD\x02" +
        "\x02\u0721\u0720\x03\x02\x02\x02\u0721\u0722\x03\x02\x02\x02\u0722\u0723" +
        "\x03\x02\x02\x02\u0723\u0745\x05\xCAf\x1E\u0724\u0745\x05\xC4c\x02\u0725" +
        "\u0745\x05x=\x02\u0726\u0728\x07\f\x02\x02\u0727\u0729\x07\xDD\x02\x02" +
        "\u0728\u0727\x03\x02\x02\x02\u0728\u0729\x03\x02\x02\x02\u0729\u072A\x03" +
        "\x02\x02\x02\u072A\u0745\x05\xCAf\x1B\u072B\u072D\x05\xE8u\x02\u072C\u072E" +
        "\x07\xDD\x02\x02\u072D\u072C\x03\x02\x02\x02\u072D\u072E\x03\x02\x02\x02" +
        "\u072E\u072F\x03\x02\x02\x02\u072F\u0731\x07\xBD\x02\x02\u0730\u0732\x07" +
        "\xDD\x02\x02\u0731\u0730\x03\x02\x02\x02\u0731\u0732\x03\x02\x02\x02\u0732" +
        "\u0733\x03\x02\x02\x02\u0733\u0734\x05\xCAf\x1A\u0734\u0745\x03\x02\x02" +
        "\x02\u0735\u0737\x07\xC5\x02\x02\u0736\u0738\x07\xDD\x02\x02\u0737\u0736" +
        "\x03\x02\x02\x02\u0737\u0738\x03\x02\x02\x02\u0738\u0739\x03\x02\x02\x02" +
        "\u0739\u0745\x05\xCAf\x10\u073A\u073C\x07\xC9\x02\x02\u073B\u073D\x07" +
        "\xDD\x02\x02\u073C\u073B\x03\x02\x02\x02\u073C\u073D\x03\x02\x02\x02\u073D" +
        "\u073E\x03\x02\x02\x02\u073E\u0745\x05\xCAf\x0F\u073F\u0741\x07u\x02\x02" +
        "\u0740\u0742\x07\xDD\x02\x02\u0741\u0740\x03\x02\x02\x02\u0741\u0742\x03" +
        "\x02\x02\x02\u0742\u0743\x03\x02\x02\x02\u0743\u0745\x05\xCAf\x03\u0744" +
        "\u0708\x03\x02\x02\x02\u0744\u070A\x03\x02\x02\x02\u0744\u070B\x03\x02" +
        "\x02\x02\u0744\u071F\x03\x02\x02\x02\u0744\u0724\x03\x02\x02\x02\u0744" +
        "\u0725\x03\x02\x02\x02\u0744\u0726\x03\x02\x02\x02\u0744\u072B\x03\x02" +
        "\x02\x02\u0744\u0735\x03\x02\x02\x02\u0744\u073A\x03\x02\x02\x02\u0744" +
        "\u073F\x03\x02\x02\x02\u0745\u07FC\x03\x02\x02\x02\u0746\u0748\f\x19\x02" +
        "\x02\u0747\u0749\x07\xDD\x02\x02\u0748\u0747\x03\x02\x02\x02\u0748\u0749" +
        "\x03\x02\x02\x02\u0749\u074A\x03\x02\x02\x02\u074A\u074C\x07Y\x02\x02" +
        "\u074B\u074D\x07\xDD\x02\x02\u074C\u074B\x03\x02\x02\x02\u074C\u074D\x03" +
        "\x02\x02\x02\u074D\u074E\x03\x02\x02\x02\u074E\u07FB\x05\xCAf\x1A\u074F" +
        "\u0751\f\x18\x02\x02\u0750\u0752\x07\xDD\x02\x02\u0751\u0750\x03\x02\x02" +
        "\x02\u0751\u0752\x03\x02\x02\x02\u0752\u0753\x03\x02\x02\x02\u0753\u0755" +
        "\x07c\x02\x02\u0754\u0756\x07\xDD\x02\x02\u0755\u0754\x03\x02\x02\x02" +
        "\u0755\u0756\x03\x02\x02\x02\u0756\u0757\x03\x02\x02\x02\u0757\u07FB\x05" +
        "\xCAf\x19\u0758\u075A\f\x17\x02\x02\u0759\u075B\x07\xDD\x02\x02\u075A" +
        "\u0759\x03\x02\x02\x02\u075A\u075B\x03\x02\x02\x02\u075B\u075C\x03\x02" +
        "\x02\x02\u075C\u075E\x07\xC0\x02\x02\u075D\u075F\x07\xDD\x02\x02\u075E" +
        "\u075D\x03\x02\x02\x02\u075E\u075F\x03\x02\x02\x02\u075F\u0760\x03\x02" +
        "\x02\x02\u0760\u07FB\x05\xCAf\x18\u0761\u0763\f\x16\x02\x02\u0762\u0764" +
        "\x07\xDD\x02\x02\u0763\u0762\x03\x02\x02\x02\u0763\u0764\x03\x02\x02\x02" +
        "\u0764\u0765\x03\x02\x02\x02\u0765\u0767\x07\xC2\x02\x02\u0766\u0768\x07" +
        "\xDD\x02\x02\u0767\u0766\x03\x02\x02\x02\u0767\u0768\x03\x02\x02\x02\u0768" +
        "\u0769\x03\x02\x02\x02\u0769\u07FB\x05\xCAf\x17\u076A\u076C\f\x15\x02" +
        "\x02\u076B\u076D\x07\xDD\x02\x02\u076C\u076B\x03\x02\x02\x02\u076C\u076D" +
        "\x03\x02\x02\x02\u076D\u076E\x03\x02\x02\x02\u076E\u0770\x07\xC1\x02\x02" +
        "\u076F\u0771\x07\xDD\x02\x02\u0770\u076F\x03\x02\x02\x02\u0770\u0771\x03" +
        "\x02\x02\x02\u0771\u0772\x03\x02\x02\x02\u0772\u07FB\x05\xCAf\x16\u0773" +
        "\u0775\f\x14\x02\x02\u0774\u0776\x07\xDD\x02\x02\u0775\u0774\x03\x02\x02" +
        "\x02\u0775\u0776\x03\x02\x02\x02\u0776\u0777\x03\x02\x02\x02\u0777\u0779" +
        "\x07\xC4\x02\x02\u0778\u077A\x07\xDD\x02\x02\u0779\u0778\x03\x02\x02\x02" +
        "\u0779\u077A\x03\x02\x02\x02\u077A\u077B\x03\x02\x02\x02\u077B\u07FB\x05" +
        "\xCAf\x15\u077C\u077E\f\x13\x02\x02\u077D\u077F\x07\xDD\x02\x02\u077E" +
        "\u077D\x03\x02\x02\x02\u077E\u077F\x03\x02\x02\x02\u077F\u0780\x03\x02" +
        "\x02\x02\u0780\u0782\x07\xC8\x02\x02\u0781\u0783\x07\xDD\x02\x02\u0782" +
        "\u0781\x03\x02\x02\x02\u0782\u0783\x03\x02\x02\x02\u0783\u0784\x03\x02" +
        "\x02\x02\u0784\u07FB\x05\xCAf\x14\u0785\u0787\f\x12\x02\x02\u0786\u0788" +
        "\x07\xDD\x02\x02\u0787\u0786\x03\x02\x02\x02\u0787\u0788\x03\x02\x02\x02" +
        "\u0788\u0789\x03\x02\x02\x02\u0789\u078B\x07\xBF\x02\x02\u078A\u078C\x07" +
        "\xDD\x02\x02\u078B\u078A\x03\x02\x02\x02\u078B\u078C\x03\x02\x02\x02\u078C" +
        "\u078D\x03\x02\x02\x02\u078D\u07FB\x05\xCAf\x13\u078E\u0790\f\x11\x02" +
        "\x02\u078F\u0791\x07\xDD\x02\x02\u0790\u078F\x03\x02\x02\x02\u0790\u0791" +
        "\x03\x02\x02\x02\u0791\u0792\x03\x02\x02\x02\u0792\u0794\x07\xCB\x02\x02" +
        "\u0793\u0795\x07\xDD\x02\x02\u0794\u0793\x03\x02\x02\x02\u0794\u0795\x03" +
        "\x02\x02\x02\u0795\u0796\x03\x02\x02\x02\u0796\u07FB\x05\xCAf\x12\u0797" +
        "\u0799\f\x0E\x02\x02\u0798\u079A\x07\xDD\x02\x02\u0799\u0798\x03\x02\x02" +
        "\x02\u0799\u079A\x03\x02\x02\x02\u079A\u079B\x03\x02\x02\x02\u079B\u079D" +
        "\x07\xBE\x02\x02\u079C\u079E\x07\xDD\x02\x02\u079D\u079C\x03\x02\x02\x02" +
        "\u079D\u079E\x03\x02\x02\x02\u079E\u079F\x03\x02\x02\x02\u079F\u07FB\x05" +
        "\xCAf\x0F\u07A0\u07A2\f\r\x02\x02\u07A1\u07A3\x07\xDD\x02\x02\u07A2\u07A1" +
        "\x03\x02\x02\x02\u07A2\u07A3\x03\x02\x02\x02\u07A3\u07A4\x03\x02\x02\x02" +
        "\u07A4\u07A6\x07\xC7\x02\x02\u07A5\u07A7\x07\xDD\x02\x02\u07A6\u07A5\x03" +
        "\x02\x02\x02\u07A6\u07A7\x03\x02\x02\x02\u07A7\u07A8\x03\x02\x02\x02\u07A8" +
        "\u07FB\x05\xCAf\x0E\u07A9\u07AB\f\f\x02\x02\u07AA\u07AC\x07\xDD\x02\x02" +
        "\u07AB\u07AA\x03\x02\x02\x02\u07AB\u07AC\x03\x02\x02\x02\u07AC\u07AD\x03" +
        "\x02\x02\x02\u07AD\u07AF\x07q\x02\x02\u07AE\u07B0\x07\xDD\x02\x02\u07AF" +
        "\u07AE\x03\x02\x02\x02\u07AF\u07B0\x03\x02\x02\x02\u07B0\u07B1\x03\x02" +
        "\x02\x02\u07B1\u07FB\x05\xCAf\r\u07B2\u07B4\f\v\x02\x02\u07B3\u07B5\x07" +
        "\xDD\x02\x02\u07B4\u07B3\x03\x02\x02\x02\u07B4\u07B5\x03\x02\x02\x02\u07B5" +
        "\u07B6\x03\x02\x02\x02\u07B6\u07B8\x07\xC9\x02\x02\u07B7\u07B9\x07\xDD" +
        "\x02\x02\u07B8\u07B7\x03\x02\x02\x02\u07B8\u07B9\x03\x02\x02\x02\u07B9" +
        "\u07BA\x03\x02\x02\x02\u07BA\u07FB\x05\xCAf\f\u07BB\u07BD\f\n\x02\x02" +
        "\u07BC\u07BE\x07\xDD\x02\x02\u07BD\u07BC\x03\x02\x02\x02\u07BD\u07BE\x03" +
        "\x02\x02\x02\u07BE\u07BF\x03\x02\x02\x02\u07BF\u07C1\x07\xC5\x02\x02\u07C0" +
        "\u07C2\x07\xDD\x02\x02\u07C1\u07C0\x03\x02\x02\x02\u07C1\u07C2\x03\x02" +
        "\x02\x02\u07C2\u07C3\x03\x02\x02\x02\u07C3\u07FB\x05\xCAf\v\u07C4\u07C6" +
        "\f\t\x02\x02\u07C5\u07C7\x07\xDD\x02\x02\u07C6\u07C5\x03\x02\x02\x02\u07C6" +
        "\u07C7\x03\x02\x02\x02\u07C7\u07C8\x03\x02\x02\x02\u07C8\u07CA\x07\xBC" +
        "\x02\x02\u07C9\u07CB\x07\xDD\x02\x02\u07CA\u07C9\x03\x02\x02\x02\u07CA" +
        "\u07CB\x03\x02\x02\x02\u07CB\u07CC\x03\x02\x02\x02\u07CC\u07FB\x05\xCA" +
        "f\n\u07CD\u07CF\f\b\x02\x02\u07CE\u07D0\x07\xDD\x02\x02\u07CF\u07CE\x03" +
        "\x02\x02\x02\u07CF\u07D0\x03\x02\x02\x02\u07D0\u07D1\x03\x02\x02\x02\u07D1" +
        "\u07D3\x07U\x02\x02\u07D2\u07D4\x07\xDD\x02\x02\u07D3\u07D2\x03\x02\x02" +
        "\x02\u07D3\u07D4\x03\x02\x02\x02\u07D4\u07D5\x03\x02\x02\x02\u07D5\u07FB" +
        "\x05\xCAf\t\u07D6\u07D8\f\x07\x02\x02\u07D7\u07D9\x07\xDD\x02\x02\u07D8" +
        "\u07D7\x03\x02\x02\x02\u07D8\u07D9\x03\x02\x02\x02\u07D9\u07DA\x03\x02" +
        "\x02\x02\u07DA\u07DC\x07B\x02\x02\u07DB\u07DD\x07\xDD\x02\x02\u07DC\u07DB" +
        "\x03\x02\x02\x02\u07DC\u07DD\x03\x02\x02\x02\u07DD\u07DE\x03\x02\x02\x02" +
        "\u07DE\u07FB\x05\xCAf\b\u07DF\u07E1\f\x06\x02\x02\u07E0\u07E2\x07\xDD" +
        "\x02\x02\u07E1\u07E0\x03\x02\x02\x02\u07E1\u07E2\x03\x02\x02\x02\u07E2" +
        "\u07E3\x03\x02\x02\x02\u07E3\u07E5\x07\xBB\x02\x02\u07E4\u07E6\x07\xDD" +
        "\x02\x02\u07E5\u07E4\x03\x02\x02\x02\u07E5\u07E6\x03\x02\x02\x02\u07E6" +
        "\u07E7\x03\x02\x02\x02\u07E7\u07FB\x05\xCAf\x07\u07E8\u07EA\f\x05\x02" +
        "\x02\u07E9\u07EB\x07\xDD\x02\x02\u07EA\u07E9\x03\x02\x02\x02\u07EA\u07EB" +
        "\x03\x02\x02\x02\u07EB\u07EC\x03\x02\x02\x02\u07EC\u07EE\x07\x81\x02\x02" +
        "\u07ED\u07EF\x07\xDD\x02\x02\u07EE\u07ED\x03\x02\x02\x02\u07EE\u07EF\x03" +
        "\x02\x02\x02\u07EF\u07F0\x03\x02\x02\x02\u07F0\u07FB\x05\xCAf\x06\u07F1" +
        "\u07F3\f\x04\x02";
    vbaParser._serializedATNSegment4 = "\x02\u07F2\u07F4\x07\xDD\x02\x02\u07F3\u07F2\x03\x02\x02\x02\u07F3\u07F4" +
        "\x03\x02\x02\x02\u07F4\u07F5\x03\x02\x02\x02\u07F5\u07F7\x07\x0E\x02\x02" +
        "\u07F6\u07F8\x07\xDD\x02\x02\u07F7\u07F6\x03\x02\x02\x02\u07F7\u07F8\x03" +
        "\x02\x02\x02\u07F8\u07F9\x03\x02\x02\x02\u07F9\u07FB\x05\xCAf\x05\u07FA" +
        "\u0746\x03\x02\x02\x02\u07FA\u074F\x03\x02\x02\x02\u07FA\u0758\x03\x02" +
        "\x02\x02\u07FA\u0761\x03\x02\x02\x02\u07FA\u076A\x03\x02\x02\x02\u07FA" +
        "\u0773\x03\x02\x02\x02\u07FA\u077C\x03\x02\x02\x02\u07FA\u0785\x03\x02" +
        "\x02\x02\u07FA\u078E\x03\x02\x02\x02\u07FA\u0797\x03\x02\x02\x02\u07FA" +
        "\u07A0\x03\x02\x02\x02\u07FA\u07A9\x03\x02\x02\x02\u07FA\u07B2\x03\x02" +
        "\x02\x02\u07FA\u07BB\x03\x02\x02\x02\u07FA\u07C4\x03\x02\x02\x02\u07FA" +
        "\u07CD\x03\x02\x02\x02\u07FA\u07D6\x03\x02\x02\x02\u07FA\u07DF\x03\x02" +
        "\x02\x02\u07FA\u07E8\x03\x02\x02\x02\u07FA\u07F1\x03\x02\x02\x02\u07FB" +
        "\u07FE\x03\x02\x02\x02\u07FC\u07FA\x03\x02\x02\x02\u07FC\u07FD\x03\x02" +
        "\x02\x02\u07FD\xCB\x03\x02\x02\x02\u07FE\u07FC\x03\x02\x02\x02\u07FF\u0803" +
        "\x072\x02\x02\u0800\u0803\x07\xA3\x02\x02\u0801\u0803\x05\u011C\x8F\x02" +
        "\u0802\u07FF\x03\x02\x02\x02\u0802\u0800\x03\x02\x02\x02\u0802\u0801\x03" +
        "\x02\x02\x02\u0803\u0804\x03\x02\x02\x02\u0804\u0807\x07\xDD\x02\x02\u0805" +
        "\u0806\x07\xB9\x02\x02\u0806\u0808\x07\xDD\x02\x02\u0807\u0805\x03\x02" +
        "\x02\x02\u0807\u0808\x03\x02\x02\x02\u0808\u0809\x03\x02\x02\x02\u0809" +
        "\u080A\x05\xCEh\x02\u080A\xCD\x03\x02\x02\x02\u080B\u0816\x05\xD0i\x02" +
        "\u080C\u080E\x07\xDD\x02\x02\u080D\u080C\x03\x02\x02\x02\u080D\u080E\x03" +
        "\x02\x02\x02\u080E\u080F\x03\x02\x02\x02\u080F\u0811\x07\x03\x02\x02\u0810" +
        "\u0812\x07\xDD\x02\x02\u0811\u0810\x03\x02\x02\x02\u0811\u0812\x03\x02" +
        "\x02\x02\u0812\u0813\x03\x02\x02\x02\u0813\u0815\x05\xD0i\x02\u0814\u080D" +
        "\x03\x02\x02\x02\u0815\u0818\x03\x02\x02\x02\u0816\u0814\x03\x02\x02\x02" +
        "\u0816\u0817\x03\x02\x02\x02\u0817\xCF\x03\x02\x02\x02\u0818\u0816\x03" +
        "\x02\x02\x02\u0819\u082B\x05\u0104\x83\x02\u081A\u081C\x07\xDD\x02\x02" +
        "\u081B\u081A\x03\x02\x02\x02\u081B\u081C\x03\x02\x02\x02\u081C\u081D\x03" +
        "\x02\x02\x02\u081D\u081F\x07\xC3\x02\x02\u081E\u0820\x07\xDD\x02\x02\u081F" +
        "\u081E\x03\x02\x02\x02\u081F\u0820\x03\x02\x02\x02\u0820\u0825\x03\x02" +
        "\x02\x02\u0821\u0823\x05\u0100\x81\x02\u0822\u0824\x07\xDD\x02\x02\u0823" +
        "\u0822\x03\x02\x02\x02\u0823\u0824\x03\x02\x02\x02\u0824\u0826\x03\x02" +
        "\x02\x02\u0825\u0821\x03\x02\x02\x02\u0825\u0826\x03\x02\x02\x02\u0826" +
        "\u0827\x03\x02\x02\x02\u0827\u0829\x07\xCC\x02\x02\u0828\u082A\x07\xDD" +
        "\x02\x02\u0829\u0828\x03\x02\x02\x02\u0829\u082A\x03\x02\x02\x02\u082A" +
        "\u082C\x03\x02\x02\x02\u082B\u081B\x03\x02\x02\x02\u082B\u082C\x03\x02" +
        "\x02\x02\u082C\u082E\x03\x02\x02\x02\u082D\u082F\x05\u011A\x8E\x02\u082E" +
        "\u082D\x03\x02\x02\x02\u082E\u082F\x03\x02\x02\x02\u082F\u0832\x03\x02" +
        "\x02\x02\u0830\u0831\x07\xDD\x02\x02\u0831\u0833\x05\u0106\x84\x02\u0832" +
        "\u0830\x03\x02\x02\x02\u0832\u0833\x03\x02\x02\x02\u0833\xD1\x03\x02\x02" +
        "\x02\u0834\u0835\x07\xB6\x02\x02\u0835\u0836\x07\xDD\x02\x02\u0836\u0837" +
        "\x05\xCAf\x02\u0837\u0839\x05\u0126\x94\x02\u0838\u083A\x05\x1C\x0F\x02" +
        "\u0839\u0838\x03\x02\x02\x02\u0839\u083A\x03\x02\x02\x02\u083A\u083B\x03" +
        "\x02\x02\x02\u083B\u083C\x07\xB5\x02\x02\u083C\xD3\x03\x02\x02\x02\u083D" +
        "\u083E\x07\xB7\x02\x02\u083E\u083F\x07\xDD\x02\x02\u083F\u0841\x05\xDA" +
        "n\x02\u0840\u0842\x07\xDD\x02\x02\u0841\u0840\x03\x02\x02\x02\u0841\u0842" +
        "\x03\x02\x02\x02\u0842\u0843\x03\x02\x02\x02\u0843\u0845\x07\x03\x02\x02" +
        "\u0844\u0846\x07\xDD\x02\x02\u0845\u0844\x03\x02\x02\x02\u0845\u0846\x03" +
        "\x02\x02\x02\u0846\u0847\x03\x02\x02\x02\u0847\u0848\x05\xCAf\x02\u0848" +
        "\xD5\x03\x02\x02\x02\u0849\u084A\x07\xB8\x02\x02\u084A\u084F\x07\xDD\x02" +
        "\x02\u084B\u0850\x05\xE8u\x02\u084C\u084D\x07t\x02\x02\u084D\u084E\x07" +
        "\xDD\x02\x02\u084E\u0850\x05\u0118\x8D\x02\u084F\u084B\x03\x02\x02\x02" +
        "\u084F\u084C\x03\x02\x02\x02\u0850\u0851\x03\x02\x02\x02\u0851\u0853\x05" +
        "\u0126\x94\x02\u0852\u0854\x05\x1C\x0F\x02\u0853\u0852\x03\x02\x02\x02" +
        "\u0853\u0854\x03\x02\x02\x02\u0854\u0855\x03\x02\x02\x02\u0855\u0856\x07" +
        "?\x02\x02\u0856\xD7\x03\x02\x02\x02\u0857\u0858\x07\xBA\x02\x02\u0858" +
        "\u0859\x07\xDD\x02\x02\u0859\u085B\x05\xDAn\x02\u085A\u085C\x07\xDD\x02" +
        "\x02\u085B\u085A\x03\x02\x02\x02\u085B\u085C\x03\x02\x02\x02\u085C\u085D" +
        "\x03\x02\x02\x02\u085D\u0862\x07\x03\x02\x02\u085E\u0860\x07\xDD\x02\x02" +
        "\u085F\u085E\x03\x02\x02\x02\u085F\u0860\x03\x02\x02\x02\u0860\u0861\x03" +
        "\x02\x02\x02\u0861\u0863\x05\x86D\x02\u0862\u085F\x03\x02\x02\x02\u0862" +
        "\u0863\x03\x02\x02\x02\u0863\xD9\x03\x02\x02\x02\u0864\u0866\x07\x05\x02" +
        "\x02\u0865\u0864\x03\x02\x02\x02\u0865\u0866\x03\x02\x02\x02\u0866\u0867" +
        "\x03\x02\x02\x02\u0867\u0868\x05\xCAf\x02\u0868\xDB\x03\x02\x02\x02\u0869" +
        "\u086C\x05\xDEp\x02\u086A\u086C\x05\xE0q\x02\u086B\u0869\x03\x02\x02\x02" +
        "\u086B\u086A\x03\x02\x02\x02\u086C\xDD\x03\x02\x02\x02\u086D\u086E\x07" +
        "\x1A\x02\x02\u086E\u086F\x07\xDD\x02\x02\u086F\u0871\x05\u0104\x83\x02" +
        "\u0870\u0872\x05\u011A\x8E\x02\u0871\u0870\x03\x02\x02\x02\u0871\u0872" +
        "\x03\x02\x02\x02\u0872\u0880\x03\x02\x02\x02\u0873\u0875\x07\xDD\x02\x02" +
        "\u0874\u0873\x03\x02\x02\x02\u0874\u0875\x03\x02\x02\x02\u0875\u0876\x03" +
        "\x02\x02\x02\u0876\u0878\x07\xC3\x02\x02\u0877\u0879\x07\xDD\x02\x02\u0878" +
        "\u0877\x03\x02\x02\x02\u0878\u0879\x03\x02\x02\x02\u0879\u087A\x03\x02" +
        "\x02\x02\u087A\u087C\x05\xF4{\x02\u087B\u087D\x07\xDD\x02\x02\u087C\u087B" +
        "\x03\x02\x02\x02\u087C\u087D\x03\x02\x02\x02\u087D\u087E\x03\x02\x02\x02" +
        "\u087E\u087F\x07\xCC\x02\x02\u087F\u0881\x03\x02\x02\x02\u0880\u0874\x03" +
        "\x02\x02\x02\u0880\u0881\x03\x02\x02\x02\u0881\u088B\x03\x02\x02\x02\u0882" +
        "\u0884\x07\xDD\x02\x02\u0883\u0882\x03\x02\x02\x02\u0883\u0884\x03\x02" +
        "\x02\x02\u0884\u0885\x03\x02\x02\x02\u0885\u0886\x07\xC3\x02\x02\u0886" +
        "\u0887\x05\u0100\x81\x02\u0887\u0888\x07\xCC\x02\x02\u0888\u088A\x03\x02" +
        "\x02\x02\u0889\u0883\x03\x02\x02\x02\u088A\u088D\x03\x02\x02\x02\u088B" +
        "\u0889\x03\x02\x02\x02\u088B\u088C\x03\x02\x02\x02\u088C\xDF\x03\x02\x02" +
        "\x02\u088D\u088B\x03\x02\x02\x02\u088E\u088F\x07\x1A\x02\x02\u088F\u0891" +
        "\x07\xDD\x02\x02\u0890\u0892\x05\xE8u\x02\u0891\u0890\x03\x02\x02\x02" +
        "\u0891\u0892\x03\x02\x02\x02\u0892\u0893\x03\x02\x02\x02\u0893\u0894\x07" +
        "\x06\x02\x02\u0894\u0896\x05\u0104\x83\x02\u0895\u0897\x05\u011A\x8E\x02" +
        "\u0896\u0895\x03\x02\x02\x02\u0896\u0897\x03\x02\x02\x02\u0897\u08A5\x03" +
        "\x02\x02\x02\u0898\u089A\x07\xDD\x02\x02\u0899\u0898\x03\x02\x02\x02\u0899" +
        "\u089A\x03\x02\x02\x02\u089A\u089B\x03\x02\x02\x02\u089B\u089D\x07\xC3" +
        "\x02\x02\u089C\u089E\x07\xDD\x02\x02\u089D\u089C\x03\x02\x02\x02\u089D" +
        "\u089E\x03\x02\x02\x02\u089E\u089F\x03\x02\x02\x02\u089F\u08A1\x05\xF4" +
        "{\x02\u08A0\u08A2\x07\xDD\x02\x02\u08A1\u08A0\x03\x02\x02\x02\u08A1\u08A2" +
        "\x03\x02\x02\x02\u08A2\u08A3\x03\x02\x02\x02\u08A3\u08A4\x07\xCC\x02\x02" +
        "\u08A4\u08A6\x03\x02\x02\x02\u08A5\u0899\x03\x02\x02\x02\u08A5\u08A6\x03" +
        "\x02\x02\x02\u08A6\u08B0\x03\x02\x02\x02\u08A7\u08A9\x07\xDD\x02\x02\u08A8" +
        "\u08A7\x03\x02\x02\x02\u08A8\u08A9\x03\x02\x02\x02\u08A9\u08AA\x03\x02" +
        "\x02\x02\u08AA\u08AB\x07\xC3\x02\x02\u08AB\u08AC\x05\u0100\x81\x02\u08AC" +
        "\u08AD\x07\xCC\x02\x02\u08AD\u08AF\x03\x02\x02\x02\u08AE\u08A8\x03\x02" +
        "\x02\x02\u08AF\u08B2\x03\x02\x02\x02\u08B0\u08AE\x03\x02\x02\x02\u08B0" +
        "\u08B1\x03\x02\x02\x02\u08B1\xE1\x03\x02\x02\x02\u08B2\u08B0\x03\x02\x02" +
        "\x02\u08B3\u08B6\x05\xE4s\x02\u08B4\u08B6\x05\xE6t\x02\u08B5\u08B3\x03" +
        "\x02\x02\x02\u08B5\u08B4\x03\x02\x02\x02\u08B6\xE3\x03\x02\x02\x02\u08B7" +
        "\u08B9\x05\xE8u\x02\u08B8\u08B7\x03\x02\x02\x02\u08B8\u08B9\x03\x02\x02" +
        "\x02\u08B9\u08BA\x03\x02\x02\x02\u08BA\u08BB\x07\x06\x02\x02\u08BB\u08BD" +
        "\x05\u0104\x83\x02\u08BC\u08BE\x05\u011A\x8E\x02\u08BD\u08BC\x03\x02\x02" +
        "\x02\u08BD\u08BE\x03\x02\x02\x02\u08BE\u08C1\x03\x02\x02\x02\u08BF\u08C0" +
        "\x07\xDD\x02\x02\u08C0\u08C2\x05\xF4{\x02\u08C1\u08BF\x03\x02\x02\x02" +
        "\u08C1\u08C2\x03\x02\x02\x02\u08C2\u08C4\x03\x02\x02\x02\u08C3\u08C5\x05" +
        "\xF8}\x02\u08C4\u08C3\x03\x02\x02\x02\u08C4\u08C5\x03\x02\x02\x02\u08C5" +
        "\u08CF\x03\x02\x02\x02\u08C6\u08C8\x07\xDD\x02\x02\u08C7\u08C6\x03\x02" +
        "\x02\x02\u08C7\u08C8\x03\x02\x02\x02\u08C8\u08C9\x03\x02\x02\x02\u08C9" +
        "\u08CA\x07\xC3\x02\x02\u08CA\u08CB\x05\u0100\x81\x02\u08CB\u08CC\x07\xCC" +
        "\x02\x02\u08CC\u08CE\x03\x02\x02\x02\u08CD\u08C7\x03\x02\x02\x02\u08CE" +
        "\u08D1\x03\x02\x02\x02\u08CF\u08CD\x03\x02\x02\x02\u08CF\u08D0\x03\x02" +
        "\x02\x02\u08D0\xE5\x03\x02\x02\x02\u08D1\u08CF\x03\x02\x02\x02\u08D2\u08D5" +
        "\x05\u010A\x86\x02\u08D3\u08D4\x07\xDD\x02\x02\u08D4\u08D6\x05\xF4{\x02" +
        "\u08D5\u08D3\x03\x02\x02\x02\u08D5\u08D6\x03\x02\x02\x02\u08D6\u08E0\x03" +
        "\x02\x02\x02\u08D7\u08D9\x07\xDD\x02\x02\u08D8\u08D7\x03\x02\x02\x02\u08D8" +
        "\u08D9\x03\x02\x02\x02\u08D9\u08DA\x03\x02\x02\x02\u08DA\u08DB\x07\xC3" +
        "\x02\x02\u08DB\u08DC\x05\u0100\x81\x02\u08DC\u08DD\x07\xCC\x02\x02\u08DD" +
        "\u08DF\x03\x02\x02\x02\u08DE\u08D8\x03\x02\x02\x02\u08DF\u08E2\x03\x02" +
        "\x02\x02\u08E0\u08DE\x03\x02\x02\x02\u08E0\u08E1\x03\x02\x02\x02\u08E1" +
        "\xE7\x03\x02\x02\x02\u08E2\u08E0\x03\x02\x02\x02\u08E3\u08E8\x05\xEEx" +
        "\x02\u08E4\u08E8\x05\xEAv\x02\u08E5\u08E8\x05\xECw\x02\u08E6\u08E8\x05" +
        "\xF2z\x02\u08E7\u08E3\x03\x02\x02\x02\u08E7\u08E4\x03\x02\x02\x02\u08E7" +
        "\u08E5\x03\x02\x02\x02\u08E7\u08E6\x03\x02\x02\x02\u08E8\xE9\x03\x02\x02" +
        "\x02\u08E9\u08EB\x05\u0104\x83\x02\u08EA\u08EC\x05\u011A\x8E\x02\u08EB" +
        "\u08EA\x03\x02\x02\x02\u08EB\u08EC\x03\x02\x02\x02\u08EC\u08EE\x03\x02" +
        "\x02\x02\u08ED\u08EF\x05\xF8}\x02\u08EE\u08ED\x03\x02\x02\x02\u08EE\u08EF" +
        "\x03\x02\x02\x02\u08EF\u08F9\x03\x02\x02\x02\u08F0\u08F2\x07\xDD\x02\x02" +
        "\u08F1\u08F0\x03\x02\x02\x02\u08F1\u08F2\x03\x02\x02\x02\u08F2\u08F3\x03" +
        "\x02\x02\x02\u08F3\u08F4\x07\xC3\x02\x02\u08F4\u08F5\x05\u0100\x81\x02" +
        "\u08F5\u08F6\x07\xCC\x02\x02\u08F6\u08F8\x03\x02\x02\x02\u08F7\u08F1\x03" +
        "\x02\x02\x02\u08F8\u08FB\x03\x02\x02\x02\u08F9\u08F7\x03\x02\x02\x02\u08F9" +
        "\u08FA\x03\x02\x02\x02\u08FA\xEB\x03\x02\x02\x02\u08FB\u08F9\x03\x02\x02" +
        "\x02\u08FC\u08FF\x05\u0104\x83\x02\u08FD\u08FF\x05\u0108\x85\x02\u08FE" +
        "\u08FC\x03\x02\x02\x02\u08FE\u08FD\x03\x02\x02\x02\u08FF\u0901\x03\x02" +
        "\x02\x02\u0900\u0902\x05\u011A\x8E\x02\u0901\u0900\x03\x02\x02\x02\u0901" +
        "\u0902\x03\x02\x02\x02\u0902\u0904\x03\x02\x02\x02\u0903\u0905\x07\xDD" +
        "\x02\x02\u0904\u0903\x03\x02\x02\x02\u0904\u0905\x03\x02\x02\x02\u0905" +
        "\u0906\x03\x02\x02\x02\u0906\u0908\x07\xC3\x02\x02\u0907\u0909\x07\xDD" +
        "\x02\x02\u0908\u0907\x03\x02\x02\x02\u0908\u0909\x03\x02\x02\x02\u0909" +
        "\u090E\x03\x02\x02\x02\u090A\u090C\x05\xF4{\x02\u090B\u090D\x07\xDD\x02" +
        "\x02\u090C\u090B\x03\x02\x02\x02\u090C\u090D\x03\x02\x02\x02\u090D\u090F" +
        "\x03\x02\x02\x02\u090E\u090A\x03\x02\x02\x02\u090E\u090F\x03\x02\x02\x02" +
        "\u090F\u0910\x03\x02\x02\x02\u0910\u0912\x07\xCC\x02\x02\u0911\u0913\x05" +
        "\xF8}\x02\u0912\u0911\x03\x02\x02\x02\u0912\u0913\x03\x02\x02\x02\u0913" +
        "\u091D\x03\x02\x02\x02\u0914\u0916\x07\xDD\x02\x02\u0915\u0914\x03\x02" +
        "\x02\x02\u0915\u0916\x03\x02\x02\x02\u0916\u0917\x03\x02\x02\x02\u0917" +
        "\u0918\x07\xC3\x02\x02\u0918\u0919\x05\u0100\x81\x02\u0919\u091A\x07\xCC" +
        "\x02\x02\u091A\u091C\x03\x02\x02\x02\u091B\u0915\x03\x02\x02\x02\u091C" +
        "\u091F\x03\x02\x02\x02\u091D\u091B\x03\x02\x02\x02\u091D\u091E\x03\x02" +
        "\x02\x02\u091E\xED\x03\x02\x02\x02\u091F\u091D\x03\x02\x02\x02\u0920\u0923" +
        "\x05\xEAv\x02\u0921\u0923\x05\xECw\x02\u0922\u0920\x03\x02\x02\x02\u0922" +
        "\u0921\x03\x02\x02\x02\u0922\u0923\x03\x02\x02\x02\u0923\u0925\x03\x02" +
        "\x02\x02\u0924\u0926\x05\xF0y\x02\u0925\u0924\x03\x02\x02\x02\u0926\u0927" +
        "\x03\x02\x02\x02\u0927\u0925\x03\x02\x02\x02\u0927\u0928\x03\x02\x02\x02" +
        "\u0928\u092A\x03\x02\x02\x02\u0929\u092B\x05\xF8}\x02\u092A\u0929\x03" +
        "\x02\x02\x02\u092A\u092B\x03\x02\x02\x02\u092B\u0935\x03\x02\x02\x02\u092C" +
        "\u092E\x07\xDD\x02\x02\u092D\u092C\x03\x02\x02\x02\u092D\u092E\x03\x02" +
        "\x02\x02\u092E\u092F\x03\x02\x02\x02\u092F\u0930\x07\xC3\x02\x02\u0930" +
        "\u0931\x05\u0100\x81\x02\u0931\u0932\x07\xCC\x02\x02\u0932\u0934\x03\x02" +
        "\x02\x02\u0933\u092D\x03\x02\x02\x02\u0934\u0937\x03\x02\x02\x02\u0935" +
        "\u0933\x03\x02\x02\x02\u0935\u0936\x03\x02\x02\x02\u0936\xEF\x03\x02\x02" +
        "\x02\u0937\u0935\x03\x02\x02\x02\u0938\u093B\t\r\x02\x02\u0939\u093C\x05" +
        "\xEAv\x02\u093A\u093C\x05\xECw\x02\u093B\u0939\x03\x02\x02\x02\u093B\u093A" +
        "\x03\x02\x02\x02\u093C\xF1\x03\x02\x02\x02\u093D\u093E\x05\xF8}\x02\u093E" +
        "\xF3\x03\x02\x02\x02\u093F\u0941\x05\xF6|\x02\u0940\u093F\x03\x02\x02" +
        "\x02\u0940\u0941\x03\x02\x02\x02\u0941\u0943\x03\x02\x02\x02\u0942\u0944" +
        "\x07\xDD\x02\x02\u0943\u0942\x03\x02\x02\x02\u0943\u0944\x03\x02\x02\x02" +
        "\u0944\u0945\x03\x02\x02\x02\u0945\u0947\t\v\x02\x02\u0946\u0948\x07\xDD" +
        "\x02\x02\u0947\u0946\x03\x02\x02\x02\u0947\u0948\x03\x02\x02\x02\u0948" +
        "\u094A\x03\x02\x02\x02\u0949\u0940\x03\x02\x02\x02\u094A\u094D\x03\x02" +
        "\x02\x02\u094B\u0949\x03\x02\x02\x02\u094B\u094C\x03\x02\x02\x02\u094C" +
        "\u094E\x03\x02\x02\x02\u094D\u094B\x03\x02\x02\x02\u094E\u095B\x05\xF6" +
        "|\x02\u094F\u0951\x07\xDD\x02\x02\u0950\u094F\x03\x02\x02\x02\u0950\u0951" +
        "\x03\x02\x02\x02\u0951\u0952\x03\x02\x02\x02\u0952\u0954\t\v\x02\x02\u0953" +
        "\u0955\x07\xDD\x02\x02\u0954\u0953\x03\x02\x02\x02\u0954\u0955\x03\x02" +
        "\x02\x02\u0955\u0957\x03\x02\x02\x02\u0956\u0958\x05\xF6|\x02\u0957\u0956" +
        "\x03\x02\x02\x02\u0957\u0958\x03\x02\x02\x02\u0958\u095A\x03\x02\x02\x02" +
        "\u0959\u0950\x03\x02\x02\x02\u095A\u095D\x03\x02\x02\x02\u095B\u0959\x03" +
        "\x02\x02\x02\u095B\u095C\x03\x02\x02\x02\u095C\xF5\x03\x02\x02\x02\u095D" +
        "\u095B\x03\x02\x02\x02\u095E\u0960\x07\xC3\x02\x02\u095F\u095E\x03\x02" +
        "\x02\x02\u095F\u0960\x03\x02\x02\x02\u0960\u0963\x03\x02\x02\x02\u0961" +
        "\u0962\t\x0E\x02\x02\u0962\u0964\x07\xDD\x02\x02\u0963\u0961\x03\x02\x02" +
        "\x02\u0963\u0964\x03\x02\x02\x02\u0964\u0966\x03\x02\x02\x02\u0965\u0967" +
        "\x07\xCC\x02\x02\u0966\u0965\x03\x02\x02\x02\u0966\u0967\x03\x02\x02\x02" +
        "\u0967\u0968\x03\x02\x02\x02\u0968\u0969\x05\xCAf\x02\u0969\xF7\x03\x02" +
        "\x02\x02\u096A\u096B\x07\x07\x02\x02\u096B\u096D\x05\u0104\x83\x02\u096C" +
        "\u096E\x05\u011A\x8E\x02\u096D\u096C\x03\x02\x02\x02\u096D\u096E\x03\x02" +
        "\x02\x02\u096E\xF9\x03\x02\x02\x02\u096F\u0981\x07\xC3\x02\x02\u0970\u0972" +
        "\x07\xDD\x02\x02\u0971\u0970\x03\x02\x02\x02\u0971\u0972\x03\x02\x02\x02" +
        "\u0972\u0973\x03\x02\x02\x02\u0973\u097E\x05\xFC\x7F\x02\u0974\u0976\x07" +
        "\xDD\x02\x02\u0975\u0974\x03\x02\x02\x02\u0975\u0976\x03\x02\x02\x02\u0976" +
        "\u0977\x03\x02\x02\x02\u0977\u0979\x07\x03\x02\x02\u0978\u097A\x07\xDD" +
        "\x02\x02\u0979\u0978\x03\x02\x02\x02\u0979\u097A\x03\x02\x02\x02\u097A" +
        "\u097B\x03\x02\x02\x02\u097B\u097D\x05\xFC\x7F\x02\u097C\u0975\x03\x02" +
        "\x02\x02\u097D\u0980\x03\x02\x02\x02\u097E\u097C\x03\x02\x02\x02\u097E" +
        "\u097F\x03\x02\x02\x02\u097F\u0982\x03\x02\x02\x02\u0980\u097E\x03\x02" +
        "\x02\x02\u0981\u0971\x03\x02\x02\x02\u0981\u0982\x03\x02\x02\x02\u0982" +
        "\u0984\x03\x02\x02\x02\u0983\u0985\x07\xDD\x02\x02\u0984\u0983\x03\x02" +
        "\x02\x02\u0984\u0985\x03\x02\x02\x02\u0985\u0986\x03\x02\x02\x02\u0986" +
        "\u0987\x07\xCC\x02\x02\u0987\xFB\x03\x02\x02\x02\u0988\u0989\x07|\x02" +
        "\x02\u0989\u098B\x07\xDD\x02\x02\u098A\u0988\x03\x02\x02\x02\u098A\u098B" +
        "\x03\x02\x02\x02\u098B\u098E\x03\x02\x02\x02\u098C\u098D\t\x0F\x02\x02" +
        "\u098D\u098F\x07\xDD\x02\x02\u098E\u098C\x03\x02\x02\x02\u098E\u098F\x03" +
        "\x02\x02\x02\u098F\u0992\x03\x02\x02\x02\u0990\u0991\x07\x83\x02\x02\u0991" +
        "\u0993\x07\xDD\x02\x02\u0992\u0990\x03\x02\x02\x02\u0992\u0993\x03\x02" +
        "\x02\x02\u0993\u0994\x03\x02\x02\x02\u0994\u0996\x05\u0104\x83\x02\u0995" +
        "\u0997\x05\u011A\x8E\x02\u0996\u0995\x03\x02\x02\x02\u0996\u0997\x03\x02" +
        "\x02\x02\u0997\u09A0\x03\x02\x02\x02\u0998\u099A\x07\xDD\x02\x02\u0999" +
        "\u0998\x03\x02\x02\x02\u0999\u099A\x03\x02\x02\x02\u099A\u099B\x03\x02" +
        "\x02\x02\u099B\u099D\x07\xC3\x02\x02\u099C\u099E\x07\xDD\x02\x02\u099D" +
        "\u099C\x03\x02\x02\x02\u099D\u099E\x03\x02\x02\x02\u099E\u099F\x03\x02" +
        "\x02\x02\u099F\u09A1\x07\xCC\x02\x02\u09A0\u0999\x03\x02\x02\x02\u09A0" +
        "\u09A1\x03\x02\x02\x02\u09A1\u09A6\x03\x02\x02\x02\u09A2\u09A4\x07\xDD" +
        "\x02\x02\u09A3\u09A2\x03\x02\x02\x02\u09A3\u09A4\x03\x02\x02\x02\u09A4" +
        "\u09A5\x03\x02\x02\x02\u09A5\u09A7\x05\u0106\x84\x02\u09A6\u09A3\x03\x02" +
        "\x02\x02\u09A6\u09A7\x03\x02\x02\x02\u09A7\u09AC\x03\x02\x02\x02\u09A8" +
        "\u09AA\x07\xDD\x02\x02\u09A9\u09A8\x03\x02\x02\x02\u09A9\u09AA\x03\x02" +
        "\x02\x02\u09AA\u09AB\x03\x02\x02\x02\u09AB\u09AD\x05\xFE\x80\x02\u09AC" +
        "\u09A9\x03\x02\x02\x02\u09AC\u09AD\x03\x02\x02\x02\u09AD\xFD\x03\x02\x02" +
        "\x02\u09AE\u09B0\x07\xBF\x02\x02\u09AF\u09B1\x07\xDD\x02\x02\u09B0\u09AF" +
        "\x03\x02\x02\x02\u09B0\u09B1\x03\x02\x02\x02\u09B1\u09B2\x03\x02\x02\x02" +
        "\u09B2\u09B3\x05\xCAf\x02\u09B3\xFF\x03\x02\x02\x02\u09B4\u09BF\x05\u0102" +
        "\x82\x02\u09B5\u09B7\x07\xDD\x02\x02\u09B6\u09B5\x03\x02\x02\x02\u09B6" +
        "\u09B7\x03\x02\x02\x02\u09B7\u09B8\x03\x02\x02\x02\u09B8\u09BA\x07\x03" +
        "\x02\x02\u09B9\u09BB\x07\xDD\x02\x02\u09BA\u09B9\x03\x02\x02\x02\u09BA" +
        "\u09BB\x03\x02\x02\x02\u09BB\u09BC\x03\x02\x02\x02\u09BC\u09BE\x05\u0102" +
        "\x82\x02\u09BD\u09B6\x03\x02\x02\x02\u09BE\u09C1\x03\x02\x02\x02\u09BF" +
        "\u09BD\x03\x02\x02\x02\u09BF\u09C0\x03\x02\x02\x02\u09C0\u0101\x03\x02" +
        "\x02\x02\u09C1\u09BF\x03\x02\x02\x02\u09C2\u09C3\x05\xCAf\x02\u09C3\u09C4" +
        "\x07\xDD\x02\x02\u09C4\u09C5\x07\xAC\x02\x02\u09C5\u09C6\x07\xDD\x02\x02" +
        "\u09C6\u09C8\x03\x02\x02\x02\u09C7\u09C2\x03\x02\x02\x02\u09C7\u09C8\x03" +
        "\x02\x02\x02\u09C8\u09C9\x03\x02\x02\x02\u09C9\u09CA\x05\xCAf\x02\u09CA" +
        "\u0103\x03\x02\x02\x02\u09CB\u09CE\x07\xDE\x02\x02\u09CC\u09CE\x05\u011E" +
        "\x90\x02\u09CD\u09CB\x03\x02\x02\x02\u09CD\u09CC\x03\x02\x02\x02\u09CE" +
        "\u09CF\x03\x02\x02\x02\u09CF\u09CD\x03\x02\x02\x02\u09CF\u09D0\x03\x02" +
        "\x02\x02\u09D0\u0105\x03\x02\x02\x02\u09D1\u09D3\x07\x12\x02\x02\u09D2" +
        "\u09D4\x07\xDD\x02\x02\u09D3\u09D2\x03\x02\x02\x02\u09D3\u09D4\x03\x02" +
        "\x02\x02\u09D4\u09D7\x03\x02\x02\x02\u09D5\u09D6\x07t\x02\x02\u09D6\u09D8" +
        "\x07\xDD\x02\x02\u09D7\u09D5\x03\x02\x02\x02\u09D7\u09D8\x03\x02\x02\x02" +
        "\u09D8\u09D9\x03\x02\x02\x02\u09D9\u09DE\x05\u0118\x8D\x02\u09DA\u09DC" +
        "\x07\xDD\x02\x02\u09DB\u09DA\x03\x02\x02\x02\u09DB\u09DC\x03\x02\x02\x02" +
        "\u09DC\u09DD\x03\x02\x02\x02\u09DD\u09DF\x05\u0110\x89\x02\u09DE\u09DB" +
        "\x03\x02\x02\x02\u09DE\u09DF\x03\x02\x02\x02\u09DF\u0107\x03\x02\x02\x02" +
        "\u09E0\u09F5\x07\x16\x02\x02\u09E1\u09F5\x07\x19\x02\x02\u09E2\u09F5\x07" +
        " \x02\x02\u09E3\u09F5\x07#\x02\x02\u09E4\u09F5\x074\x02\x02\u09E5\u09F5" +
        "\x07Z\x02\x02\u09E6\u09F5\x07^\x02\x02\u09E7\u09F5\x07\xA1\x02\x02\u09E8" +
        "\u09F1\x07\xA6\x02\x02\u09E9\u09EB\x07\xDD\x02\x02\u09EA\u09E9\x03\x02" +
        "\x02\x02\u09EA\u09EB\x03\x02\x02\x02\u09EB\u09EC\x03\x02\x02\x02\u09EC" +
        "\u09EE\x07\xC7\x02\x02\u09ED\u09EF\x07\xDD\x02\x02\u09EE\u09ED\x03\x02" +
        "\x02\x02\u09EE\u09EF\x03\x02\x02\x02\u09EF\u09F0\x03\x02\x02\x02\u09F0" +
        "\u09F2\x05\xCAf\x02\u09F1\u09EA\x03\x02\x02\x02\u09F1\u09F2\x03\x02\x02" +
        "\x02\u09F2\u09F5\x03\x02\x02\x02\u09F3\u09F5\x07\xB3\x02\x02\u09F4\u09E0" +
        "\x03\x02\x02\x02\u09F4\u09E1\x03\x02\x02\x02\u09F4\u09E2\x03\x02\x02\x02" +
        "\u09F4\u09E3\x03\x02\x02\x02\u09F4\u09E4\x03\x02\x02\x02\u09F4\u09E5\x03" +
        "\x02\x02\x02\u09F4\u09E6\x03\x02\x02\x02\u09F4\u09E7\x03\x02\x02\x02\u09F4" +
        "\u09E8\x03\x02\x02\x02\u09F4\u09F3\x03\x02\x02\x02\u09F5\u0109\x03\x02" +
        "\x02\x02\u09F6\u09FB\x07\xDE\x02\x02\u09F7\u09FA\x05\u011E\x90\x02\u09F8" +
        "\u09FA\x07\xDE\x02\x02\u09F9\u09F7\x03\x02\x02\x02\u09F9\u09F8\x03\x02" +
        "\x02\x02\u09FA\u09FD\x03\x02\x02\x02\u09FB\u09F9\x03\x02\x02\x02\u09FB" +
        "\u09FC\x03\x02\x02\x02\u09FC\u0A06\x03\x02\x02\x02\u09FD\u09FB\x03\x02" +
        "\x02\x02\u09FE\u0A01\x05\u011E\x90\x02\u09FF\u0A02\x05\u011E\x90\x02\u0A00" +
        "\u0A02\x07\xDE\x02\x02\u0A01\u09FF\x03\x02\x02\x02\u0A01\u0A00\x03\x02" +
        "\x02\x02\u0A02\u0A03\x03\x02\x02\x02\u0A03\u0A01\x03\x02\x02\x02\u0A03" +
        "\u0A04\x03\x02\x02\x02\u0A04\u0A06\x03\x02\x02\x02\u0A05\u09F6\x03\x02" +
        "\x02\x02\u0A05\u09FE\x03\x02\x02\x02\u0A06\u010B\x03\x02\x02\x02\u0A07" +
        "\u0A08\t\x10\x02\x02\u0A08\u010D\x03\x02\x02\x02\u0A09\u0A0E\x05\u0104" +
        "\x83\x02\u0A0A\u0A0B\t\r\x02\x02\u0A0B\u0A0D\x05\u0104\x83\x02\u0A0C\u0A0A" +
        "\x03\x02\x02\x02\u0A0D\u0A10\x03\x02\x02\x02\u0A0E\u0A0C\x03\x02\x02\x02" +
        "\u0A0E\u0A0F\x03\x02\x02\x02\u0A0F\u010F\x03\x02\x02\x02\u0A10\u0A0E\x03" +
        "\x02\x02\x02\u0A11\u0A13\x07\xC7\x02\x02\u0A12\u0A14\x07\xDD\x02\x02\u0A13" +
        "\u0A12\x03\x02\x02\x02\u0A13\u0A14\x03\x02\x02\x02\u0A14\u0A17\x03\x02" +
        "\x02\x02\u0A15\u0A18\x07\xD3\x02\x02\u0A16\u0A18\x05\u0104\x83\x02\u0A17" +
        "\u0A15\x03\x02\x02\x02\u0A17\u0A16\x03\x02\x02\x02\u0A18\u0111\x03\x02" +
        "\x02\x02\u0A19\u0A22\x05\u010A\x86\x02\u0A1A\u0A1C\x07\xDD\x02\x02\u0A1B" +
        "\u0A1A\x03\x02\x02\x02\u0A1B\u0A1C\x03\x02\x02\x02\u0A1C\u0A1D\x03\x02" +
        "\x02\x02\u0A1D\u0A1F\x07\xC5\x02\x02\u0A1E\u0A20\x07\xDD\x02\x02\u0A1F" +
        "\u0A1E\x03\x02\x02\x02\u0A1F\u0A20\x03\x02\x02\x02\u0A20\u0A21\x03\x02" +
        "\x02\x02\u0A21\u0A23\x05\u010A\x86\x02\u0A22\u0A1B\x03\x02\x02\x02\u0A22" +
        "\u0A23\x03\x02\x02\x02\u0A23\u0113\x03\x02\x02\x02\u0A24\u0A25\x05\u0104" +
        "\x83\x02\u0A25\u0A26\x07\xDB\x02\x02\u0A26\u0115\x03\x02\x02\x02\u0A27" +
        "\u0A28\t\x11\x02\x02\u0A28\u0117\x03\x02\x02\x02\u0A29\u0A2C\x05\u0108" +
        "\x85\x02\u0A2A\u0A2C\x05\u010E\x88\x02\u0A2B\u0A29\x03\x02\x02\x02\u0A2B" +
        "\u0A2A\x03\x02\x02\x02\u0A2C\u0A35\x03\x02\x02\x02\u0A2D\u0A2F\x07\xDD" +
        "\x02\x02\u0A2E\u0A2D\x03\x02\x02\x02\u0A2E\u0A2F\x03\x02\x02\x02\u0A2F" +
        "\u0A30\x03\x02\x02\x02\u0A30\u0A32\x07\xC3\x02\x02\u0A31\u0A33\x07\xDD" +
        "\x02\x02\u0A32\u0A31\x03\x02\x02\x02\u0A32\u0A33\x03\x02\x02\x02\u0A33" +
        "\u0A34\x03\x02\x02\x02\u0A34\u0A36\x07\xCC\x02\x02\u0A35\u0A2E\x03\x02" +
        "\x02\x02\u0A35\u0A36\x03\x02\x02\x02\u0A36\u0119\x03\x02\x02\x02\u0A37" +
        "\u0A38\t\x12\x02\x02\u0A38\u011B\x03\x02\x02\x02\u0A39\u0A3A\t\x13\x02" +
        "\x02\u0A3A\u011D\x03\x02\x02\x02\u0A3B\u0A3C\t\x14\x02\x02\u0A3C\u011F" +
        "\x03\x02\x02\x02\u0A3D\u0A3E\x07\xD8\x02\x02\u0A3E\u0121\x03\x02\x02\x02" +
        "\u0A3F\u0A40\x07\xD9\x02\x02\u0A40\u0123\x03\x02\x02\x02\u0A41\u0A43\x07" +
        "\xDD\x02\x02\u0A42\u0A41\x03\x02\x02\x02\u0A42\u0A43\x03\x02\x02\x02\u0A43" +
        "\u0A47\x03\x02\x02\x02\u0A44\u0A48\x07\xD7\x02\x02\u0A45\u0A48\x05\u0122" +
        "\x92\x02\u0A46\u0A48\x05\u0120\x91\x02\u0A47\u0A44\x03\x02\x02\x02\u0A47" +
        "\u0A45\x03\x02\x02\x02\u0A47\u0A46\x03\x02\x02\x02\u0A48\u0A4A\x03\x02" +
        "\x02\x02\u0A49\u0A4B\x07\xDD\x02\x02\u0A4A\u0A49\x03\x02\x02\x02\u0A4A" +
        "\u0A4B\x03\x02\x02\x02\u0A4B\u0125\x03\x02\x02\x02\u0A4C\u0A55\x05\u0124" +
        "\x93\x02\u0A4D\u0A4F\x07\xDD\x02\x02\u0A4E\u0A4D\x03\x02\x02\x02\u0A4E" +
        "\u0A4F\x03\x02\x02\x02\u0A4F\u0A50\x03\x02\x02\x02\u0A50\u0A52\x07\xDB" +
        "\x02\x02\u0A51\u0A53\x07\xDD\x02\x02\u0A52\u0A51\x03\x02\x02\x02\u0A52" +
        "\u0A53\x03\x02\x02\x02\u0A53\u0A55\x03\x02\x02\x02\u0A54\u0A4C\x03\x02" +
        "\x02\x02\u0A54\u0A4E\x03\x02\x02\x02\u0A55\u0A58\x03\x02\x02\x02\u0A56" +
        "\u0A54\x03\x02\x02\x02\u0A56\u0A57\x03\x02\x02\x02\u0A57\u0127\x03\x02" +
        "\x02\x02\u0A58\u0A56\x03\x02\x02\x02\u01C5\u012C\u0131\u0138\u013B\u013E" +
        "\u0143\u0147\u014C\u0150\u0155\u0159\u015E\u0162\u016E\u0174\u017A\u017E" +
        "\u0184\u018B\u018F\u0195\u019B\u01A1\u01AC\u01B8\u01BC\u01C2\u01C8\u01CE" +
        "\u01D7\u01DD\u01E1\u01E5\u01E9\u01EE\u01F7\u023F\u0245\u0249\u024C\u025C" +
        "\u0260\u0265\u0268\u026D\u0273\u0277\u027C\u0281\u0285\u0288\u028C\u0292" +
        "\u0296\u029D\u02A3\u02A7\u02AA\u02AF\u02B9\u02BC\u02BF\u02C3\u02C9\u02CD" +
        "\u02D2\u02D9\u02DD\u02E1\u02E5\u02E8\u02ED\u02F8\u0305\u030C\u0315\u031C" +
        "\u0320\u0323\u032C\u0331\u033B\u0341\u034B\u034F\u0359\u0361\u0366\u036C" +
        "\u0370\u0373\u0377\u0382\u0386\u038B\u0390\u0394\u0398\u039C\u039F\u03A2" +
        "\u03A5\u03A8\u03AC\u03B4\u03B8\u03BB\u03BE\u03C2\u03D9\u03DF\u03E3\u03E7" +
        "\u03F0\u03FB\u0400\u040A\u040E\u0413\u041B\u041F\u0423\u042B\u042F\u043B" +
        "\u043F\u0446\u0448\u044E\u0452\u0458\u045C\u0460\u0468\u046C\u0472\u047B" +
        "\u047D\u0482\u048B\u048D\u0495\u0497\u049C\u04A0\u04A4\u04BC\u04C6\u04CA" +
        "\u04CF\u04DA\u04DE\u04E3\u04F1\u04F5\u04FE\u0502\u0505\u0509\u050D\u0510" +
        "\u0514\u0518\u051B\u051F\u0522\u0526\u0528\u052D\u0531\u0535\u0539\u053B" +
        "\u0541\u0545\u0548\u054D\u0551\u0557\u055A\u055D\u0561\u0565\u056C\u0570" +
        "\u0576\u0579\u057D\u0584\u0588\u058E\u0591\u0595\u059D\u05A1\u05A4\u05A7" +
        "\u05AB\u05B3\u05B7\u05BB\u05BD\u05C0\u05C5\u05CB\u05CF\u05D3\u05D8\u05DD" +
        "\u05E1\u05E5\u05EA\u05F2\u05F4\u0600\u0604\u060C\u0610\u0618\u061C\u0620" +
        "\u0624\u0628\u062C\u0634\u0638\u0645\u064C\u0650\u065B\u0662\u0667\u066B" +
        "\u0670\u0673\u0679\u067D\u0680\u0686\u068A\u0692\u0696\u069F\u06A3\u06A7" +
        "\u06AB\u06AE\u06B2\u06B8\u06BC\u06C3\u06CC\u06D3\u06D7\u06DA\u06DD\u06E0" +
        "\u06E4\u06EF\u06F9\u06FD\u0704\u0706\u070D\u0711\u0715\u071A\u0721\u0728" +
        "\u072D\u0731\u0737\u073C\u0741\u0744\u0748\u074C\u0751\u0755\u075A\u075E" +
        "\u0763\u0767\u076C\u0770\u0775\u0779\u077E\u0782\u0787\u078B\u0790\u0794" +
        "\u0799";
    vbaParser._serializedATNSegment5 = "\u079D\u07A2\u07A6\u07AB\u07AF\u07B4\u07B8\u07BD\u07C1\u07C6\u07CA\u07CF" +
        "\u07D3\u07D8\u07DC\u07E1\u07E5\u07EA\u07EE\u07F3\u07F7\u07FA\u07FC\u0802" +
        "\u0807\u080D\u0811\u0816\u081B\u081F\u0823\u0825\u0829\u082B\u082E\u0832" +
        "\u0839\u0841\u0845\u084F\u0853\u085B\u085F\u0862\u0865\u086B\u0871\u0874" +
        "\u0878\u087C\u0880\u0883\u088B\u0891\u0896\u0899\u089D\u08A1\u08A5\u08A8" +
        "\u08B0\u08B5\u08B8\u08BD\u08C1\u08C4\u08C7\u08CF\u08D5\u08D8\u08E0\u08E7" +
        "\u08EB\u08EE\u08F1\u08F9\u08FE\u0901\u0904\u0908\u090C\u090E\u0912\u0915" +
        "\u091D\u0922\u0927\u092A\u092D\u0935\u093B\u0940\u0943\u0947\u094B\u0950" +
        "\u0954\u0957\u095B\u095F\u0963\u0966\u096D\u0971\u0975\u0979\u097E\u0981" +
        "\u0984\u098A\u098E\u0992\u0996\u0999\u099D\u09A0\u09A3\u09A6\u09A9\u09AC" +
        "\u09B0\u09B6\u09BA\u09BF\u09C7\u09CD\u09CF\u09D3\u09D7\u09DB\u09DE\u09EA" +
        "\u09EE\u09F1\u09F4\u09F9\u09FB\u0A01\u0A03\u0A05\u0A0E\u0A13\u0A17\u0A1B" +
        "\u0A1F\u0A22\u0A2B\u0A2E\u0A32\u0A35\u0A42\u0A47\u0A4A\u0A4E\u0A52\u0A54" +
        "\u0A56";
    vbaParser._serializedATN = Utils.join([
        vbaParser._serializedATNSegment0,
        vbaParser._serializedATNSegment1,
        vbaParser._serializedATNSegment2,
        vbaParser._serializedATNSegment3,
        vbaParser._serializedATNSegment4,
        vbaParser._serializedATNSegment5,
    ], "");
    return vbaParser;
}(Parser_1.Parser));
exports.vbaParser = vbaParser;
var StartRuleContext = /** @class */ (function (_super) {
    __extends(StartRuleContext, _super);
    function StartRuleContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StartRuleContext.prototype.module = function () {
        return this.getRuleContext(0, ModuleContext);
    };
    StartRuleContext.prototype.EOF = function () { return this.getToken(vbaParser.EOF, 0); };
    Object.defineProperty(StartRuleContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_startRule; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StartRuleContext.prototype.enterRule = function (listener) {
        if (listener.enterStartRule) {
            listener.enterStartRule(this);
        }
    };
    // @Override
    StartRuleContext.prototype.exitRule = function (listener) {
        if (listener.exitStartRule) {
            listener.exitStartRule(this);
        }
    };
    // @Override
    StartRuleContext.prototype.accept = function (visitor) {
        if (visitor.visitStartRule) {
            return visitor.visitStartRule(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StartRuleContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StartRuleContext = StartRuleContext;
var ModuleContext = /** @class */ (function (_super) {
    __extends(ModuleContext, _super);
    function ModuleContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ModuleContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ModuleContext.prototype.endOfLine = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EndOfLineContext);
        }
        else {
            return this.getRuleContext(i, EndOfLineContext);
        }
    };
    ModuleContext.prototype.moduleHeader = function () {
        return this.tryGetRuleContext(0, ModuleHeaderContext);
    };
    ModuleContext.prototype.moduleConfig = function () {
        return this.tryGetRuleContext(0, ModuleConfigContext);
    };
    ModuleContext.prototype.moduleAttributes = function () {
        return this.tryGetRuleContext(0, ModuleAttributesContext);
    };
    ModuleContext.prototype.moduleDeclarations = function () {
        return this.tryGetRuleContext(0, ModuleDeclarationsContext);
    };
    ModuleContext.prototype.moduleBody = function () {
        return this.tryGetRuleContext(0, ModuleBodyContext);
    };
    Object.defineProperty(ModuleContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_module; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ModuleContext.prototype.enterRule = function (listener) {
        if (listener.enterModule) {
            listener.enterModule(this);
        }
    };
    // @Override
    ModuleContext.prototype.exitRule = function (listener) {
        if (listener.exitModule) {
            listener.exitModule(this);
        }
    };
    // @Override
    ModuleContext.prototype.accept = function (visitor) {
        if (visitor.visitModule) {
            return visitor.visitModule(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ModuleContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModuleContext = ModuleContext;
var ModuleHeaderContext = /** @class */ (function (_super) {
    __extends(ModuleHeaderContext, _super);
    function ModuleHeaderContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ModuleHeaderContext.prototype.VERSION = function () { return this.getToken(vbaParser.VERSION, 0); };
    ModuleHeaderContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ModuleHeaderContext.prototype.DOUBLELITERAL = function () { return this.getToken(vbaParser.DOUBLELITERAL, 0); };
    ModuleHeaderContext.prototype.CLASS = function () { return this.getToken(vbaParser.CLASS, 0); };
    Object.defineProperty(ModuleHeaderContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_moduleHeader; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ModuleHeaderContext.prototype.enterRule = function (listener) {
        if (listener.enterModuleHeader) {
            listener.enterModuleHeader(this);
        }
    };
    // @Override
    ModuleHeaderContext.prototype.exitRule = function (listener) {
        if (listener.exitModuleHeader) {
            listener.exitModuleHeader(this);
        }
    };
    // @Override
    ModuleHeaderContext.prototype.accept = function (visitor) {
        if (visitor.visitModuleHeader) {
            return visitor.visitModuleHeader(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ModuleHeaderContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModuleHeaderContext = ModuleHeaderContext;
var ModuleConfigContext = /** @class */ (function (_super) {
    __extends(ModuleConfigContext, _super);
    function ModuleConfigContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ModuleConfigContext.prototype.BEGIN = function () { return this.getToken(vbaParser.BEGIN, 0); };
    ModuleConfigContext.prototype.END = function () { return this.getToken(vbaParser.END, 0); };
    ModuleConfigContext.prototype.endOfLine = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EndOfLineContext);
        }
        else {
            return this.getRuleContext(i, EndOfLineContext);
        }
    };
    ModuleConfigContext.prototype.moduleConfigElement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ModuleConfigElementContext);
        }
        else {
            return this.getRuleContext(i, ModuleConfigElementContext);
        }
    };
    Object.defineProperty(ModuleConfigContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_moduleConfig; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ModuleConfigContext.prototype.enterRule = function (listener) {
        if (listener.enterModuleConfig) {
            listener.enterModuleConfig(this);
        }
    };
    // @Override
    ModuleConfigContext.prototype.exitRule = function (listener) {
        if (listener.exitModuleConfig) {
            listener.exitModuleConfig(this);
        }
    };
    // @Override
    ModuleConfigContext.prototype.accept = function (visitor) {
        if (visitor.visitModuleConfig) {
            return visitor.visitModuleConfig(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ModuleConfigContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModuleConfigContext = ModuleConfigContext;
var ModuleConfigElementContext = /** @class */ (function (_super) {
    __extends(ModuleConfigElementContext, _super);
    function ModuleConfigElementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ModuleConfigElementContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    ModuleConfigElementContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    ModuleConfigElementContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    ModuleConfigElementContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ModuleConfigElementContext.prototype.endOfLine = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EndOfLineContext);
        }
        else {
            return this.getRuleContext(i, EndOfLineContext);
        }
    };
    Object.defineProperty(ModuleConfigElementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_moduleConfigElement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ModuleConfigElementContext.prototype.enterRule = function (listener) {
        if (listener.enterModuleConfigElement) {
            listener.enterModuleConfigElement(this);
        }
    };
    // @Override
    ModuleConfigElementContext.prototype.exitRule = function (listener) {
        if (listener.exitModuleConfigElement) {
            listener.exitModuleConfigElement(this);
        }
    };
    // @Override
    ModuleConfigElementContext.prototype.accept = function (visitor) {
        if (visitor.visitModuleConfigElement) {
            return visitor.visitModuleConfigElement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ModuleConfigElementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModuleConfigElementContext = ModuleConfigElementContext;
var ModuleAttributesContext = /** @class */ (function (_super) {
    __extends(ModuleAttributesContext, _super);
    function ModuleAttributesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ModuleAttributesContext.prototype.attributeStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AttributeStmtContext);
        }
        else {
            return this.getRuleContext(i, AttributeStmtContext);
        }
    };
    ModuleAttributesContext.prototype.endOfLine = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EndOfLineContext);
        }
        else {
            return this.getRuleContext(i, EndOfLineContext);
        }
    };
    Object.defineProperty(ModuleAttributesContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_moduleAttributes; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ModuleAttributesContext.prototype.enterRule = function (listener) {
        if (listener.enterModuleAttributes) {
            listener.enterModuleAttributes(this);
        }
    };
    // @Override
    ModuleAttributesContext.prototype.exitRule = function (listener) {
        if (listener.exitModuleAttributes) {
            listener.exitModuleAttributes(this);
        }
    };
    // @Override
    ModuleAttributesContext.prototype.accept = function (visitor) {
        if (visitor.visitModuleAttributes) {
            return visitor.visitModuleAttributes(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ModuleAttributesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModuleAttributesContext = ModuleAttributesContext;
var ModuleDeclarationsContext = /** @class */ (function (_super) {
    __extends(ModuleDeclarationsContext, _super);
    function ModuleDeclarationsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ModuleDeclarationsContext.prototype.moduleDeclarationsElement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ModuleDeclarationsElementContext);
        }
        else {
            return this.getRuleContext(i, ModuleDeclarationsElementContext);
        }
    };
    ModuleDeclarationsContext.prototype.endOfLine = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EndOfLineContext);
        }
        else {
            return this.getRuleContext(i, EndOfLineContext);
        }
    };
    Object.defineProperty(ModuleDeclarationsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_moduleDeclarations; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ModuleDeclarationsContext.prototype.enterRule = function (listener) {
        if (listener.enterModuleDeclarations) {
            listener.enterModuleDeclarations(this);
        }
    };
    // @Override
    ModuleDeclarationsContext.prototype.exitRule = function (listener) {
        if (listener.exitModuleDeclarations) {
            listener.exitModuleDeclarations(this);
        }
    };
    // @Override
    ModuleDeclarationsContext.prototype.accept = function (visitor) {
        if (visitor.visitModuleDeclarations) {
            return visitor.visitModuleDeclarations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ModuleDeclarationsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModuleDeclarationsContext = ModuleDeclarationsContext;
var ModuleOptionContext = /** @class */ (function (_super) {
    __extends(ModuleOptionContext, _super);
    function ModuleOptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(ModuleOptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_moduleOption; },
        enumerable: true,
        configurable: true
    });
    ModuleOptionContext.prototype.copyFrom = function (ctx) {
        _super.prototype.copyFrom.call(this, ctx);
    };
    return ModuleOptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModuleOptionContext = ModuleOptionContext;
var OptionBaseStmtContext = /** @class */ (function (_super) {
    __extends(OptionBaseStmtContext, _super);
    function OptionBaseStmtContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    OptionBaseStmtContext.prototype.OPTION_BASE = function () { return this.getToken(vbaParser.OPTION_BASE, 0); };
    OptionBaseStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    OptionBaseStmtContext.prototype.SHORTLITERAL = function () { return this.getToken(vbaParser.SHORTLITERAL, 0); };
    // @Override
    OptionBaseStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterOptionBaseStmt) {
            listener.enterOptionBaseStmt(this);
        }
    };
    // @Override
    OptionBaseStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitOptionBaseStmt) {
            listener.exitOptionBaseStmt(this);
        }
    };
    // @Override
    OptionBaseStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitOptionBaseStmt) {
            return visitor.visitOptionBaseStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OptionBaseStmtContext;
}(ModuleOptionContext));
exports.OptionBaseStmtContext = OptionBaseStmtContext;
var OptionCompareStmtContext = /** @class */ (function (_super) {
    __extends(OptionCompareStmtContext, _super);
    function OptionCompareStmtContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    OptionCompareStmtContext.prototype.OPTION_COMPARE = function () { return this.getToken(vbaParser.OPTION_COMPARE, 0); };
    OptionCompareStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    OptionCompareStmtContext.prototype.BINARY = function () { return this.tryGetToken(vbaParser.BINARY, 0); };
    OptionCompareStmtContext.prototype.TEXT = function () { return this.tryGetToken(vbaParser.TEXT, 0); };
    OptionCompareStmtContext.prototype.DATABASE = function () { return this.tryGetToken(vbaParser.DATABASE, 0); };
    // @Override
    OptionCompareStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterOptionCompareStmt) {
            listener.enterOptionCompareStmt(this);
        }
    };
    // @Override
    OptionCompareStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitOptionCompareStmt) {
            listener.exitOptionCompareStmt(this);
        }
    };
    // @Override
    OptionCompareStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitOptionCompareStmt) {
            return visitor.visitOptionCompareStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OptionCompareStmtContext;
}(ModuleOptionContext));
exports.OptionCompareStmtContext = OptionCompareStmtContext;
var OptionExplicitStmtContext = /** @class */ (function (_super) {
    __extends(OptionExplicitStmtContext, _super);
    function OptionExplicitStmtContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    OptionExplicitStmtContext.prototype.OPTION_EXPLICIT = function () { return this.getToken(vbaParser.OPTION_EXPLICIT, 0); };
    // @Override
    OptionExplicitStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterOptionExplicitStmt) {
            listener.enterOptionExplicitStmt(this);
        }
    };
    // @Override
    OptionExplicitStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitOptionExplicitStmt) {
            listener.exitOptionExplicitStmt(this);
        }
    };
    // @Override
    OptionExplicitStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitOptionExplicitStmt) {
            return visitor.visitOptionExplicitStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OptionExplicitStmtContext;
}(ModuleOptionContext));
exports.OptionExplicitStmtContext = OptionExplicitStmtContext;
var OptionPrivateModuleStmtContext = /** @class */ (function (_super) {
    __extends(OptionPrivateModuleStmtContext, _super);
    function OptionPrivateModuleStmtContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    OptionPrivateModuleStmtContext.prototype.OPTION_PRIVATE_MODULE = function () { return this.getToken(vbaParser.OPTION_PRIVATE_MODULE, 0); };
    // @Override
    OptionPrivateModuleStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterOptionPrivateModuleStmt) {
            listener.enterOptionPrivateModuleStmt(this);
        }
    };
    // @Override
    OptionPrivateModuleStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitOptionPrivateModuleStmt) {
            listener.exitOptionPrivateModuleStmt(this);
        }
    };
    // @Override
    OptionPrivateModuleStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitOptionPrivateModuleStmt) {
            return visitor.visitOptionPrivateModuleStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OptionPrivateModuleStmtContext;
}(ModuleOptionContext));
exports.OptionPrivateModuleStmtContext = OptionPrivateModuleStmtContext;
var ModuleDeclarationsElementContext = /** @class */ (function (_super) {
    __extends(ModuleDeclarationsElementContext, _super);
    function ModuleDeclarationsElementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ModuleDeclarationsElementContext.prototype.comment = function () {
        return this.tryGetRuleContext(0, CommentContext);
    };
    ModuleDeclarationsElementContext.prototype.declareStmt = function () {
        return this.tryGetRuleContext(0, DeclareStmtContext);
    };
    ModuleDeclarationsElementContext.prototype.enumerationStmt = function () {
        return this.tryGetRuleContext(0, EnumerationStmtContext);
    };
    ModuleDeclarationsElementContext.prototype.eventStmt = function () {
        return this.tryGetRuleContext(0, EventStmtContext);
    };
    ModuleDeclarationsElementContext.prototype.constStmt = function () {
        return this.tryGetRuleContext(0, ConstStmtContext);
    };
    ModuleDeclarationsElementContext.prototype.implementsStmt = function () {
        return this.tryGetRuleContext(0, ImplementsStmtContext);
    };
    ModuleDeclarationsElementContext.prototype.variableStmt = function () {
        return this.tryGetRuleContext(0, VariableStmtContext);
    };
    ModuleDeclarationsElementContext.prototype.moduleOption = function () {
        return this.tryGetRuleContext(0, ModuleOptionContext);
    };
    ModuleDeclarationsElementContext.prototype.typeStmt = function () {
        return this.tryGetRuleContext(0, TypeStmtContext);
    };
    ModuleDeclarationsElementContext.prototype.macroStmt = function () {
        return this.tryGetRuleContext(0, MacroStmtContext);
    };
    Object.defineProperty(ModuleDeclarationsElementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_moduleDeclarationsElement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ModuleDeclarationsElementContext.prototype.enterRule = function (listener) {
        if (listener.enterModuleDeclarationsElement) {
            listener.enterModuleDeclarationsElement(this);
        }
    };
    // @Override
    ModuleDeclarationsElementContext.prototype.exitRule = function (listener) {
        if (listener.exitModuleDeclarationsElement) {
            listener.exitModuleDeclarationsElement(this);
        }
    };
    // @Override
    ModuleDeclarationsElementContext.prototype.accept = function (visitor) {
        if (visitor.visitModuleDeclarationsElement) {
            return visitor.visitModuleDeclarationsElement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ModuleDeclarationsElementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModuleDeclarationsElementContext = ModuleDeclarationsElementContext;
var MacroStmtContext = /** @class */ (function (_super) {
    __extends(MacroStmtContext, _super);
    function MacroStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MacroStmtContext.prototype.macroConstStmt = function () {
        return this.tryGetRuleContext(0, MacroConstStmtContext);
    };
    MacroStmtContext.prototype.macroIfThenElseStmt = function () {
        return this.tryGetRuleContext(0, MacroIfThenElseStmtContext);
    };
    Object.defineProperty(MacroStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_macroStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MacroStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterMacroStmt) {
            listener.enterMacroStmt(this);
        }
    };
    // @Override
    MacroStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitMacroStmt) {
            listener.exitMacroStmt(this);
        }
    };
    // @Override
    MacroStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitMacroStmt) {
            return visitor.visitMacroStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MacroStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MacroStmtContext = MacroStmtContext;
var ModuleBodyContext = /** @class */ (function (_super) {
    __extends(ModuleBodyContext, _super);
    function ModuleBodyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ModuleBodyContext.prototype.moduleBodyElement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ModuleBodyElementContext);
        }
        else {
            return this.getRuleContext(i, ModuleBodyElementContext);
        }
    };
    ModuleBodyContext.prototype.endOfLine = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EndOfLineContext);
        }
        else {
            return this.getRuleContext(i, EndOfLineContext);
        }
    };
    Object.defineProperty(ModuleBodyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_moduleBody; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ModuleBodyContext.prototype.enterRule = function (listener) {
        if (listener.enterModuleBody) {
            listener.enterModuleBody(this);
        }
    };
    // @Override
    ModuleBodyContext.prototype.exitRule = function (listener) {
        if (listener.exitModuleBody) {
            listener.exitModuleBody(this);
        }
    };
    // @Override
    ModuleBodyContext.prototype.accept = function (visitor) {
        if (visitor.visitModuleBody) {
            return visitor.visitModuleBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ModuleBodyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModuleBodyContext = ModuleBodyContext;
var ModuleBodyElementContext = /** @class */ (function (_super) {
    __extends(ModuleBodyElementContext, _super);
    function ModuleBodyElementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ModuleBodyElementContext.prototype.functionStmt = function () {
        return this.tryGetRuleContext(0, FunctionStmtContext);
    };
    ModuleBodyElementContext.prototype.propertyGetStmt = function () {
        return this.tryGetRuleContext(0, PropertyGetStmtContext);
    };
    ModuleBodyElementContext.prototype.propertySetStmt = function () {
        return this.tryGetRuleContext(0, PropertySetStmtContext);
    };
    ModuleBodyElementContext.prototype.propertyLetStmt = function () {
        return this.tryGetRuleContext(0, PropertyLetStmtContext);
    };
    ModuleBodyElementContext.prototype.subStmt = function () {
        return this.tryGetRuleContext(0, SubStmtContext);
    };
    ModuleBodyElementContext.prototype.macroStmt = function () {
        return this.tryGetRuleContext(0, MacroStmtContext);
    };
    Object.defineProperty(ModuleBodyElementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_moduleBodyElement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ModuleBodyElementContext.prototype.enterRule = function (listener) {
        if (listener.enterModuleBodyElement) {
            listener.enterModuleBodyElement(this);
        }
    };
    // @Override
    ModuleBodyElementContext.prototype.exitRule = function (listener) {
        if (listener.exitModuleBodyElement) {
            listener.exitModuleBodyElement(this);
        }
    };
    // @Override
    ModuleBodyElementContext.prototype.accept = function (visitor) {
        if (visitor.visitModuleBodyElement) {
            return visitor.visitModuleBodyElement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ModuleBodyElementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ModuleBodyElementContext = ModuleBodyElementContext;
var AttributeStmtContext = /** @class */ (function (_super) {
    __extends(AttributeStmtContext, _super);
    function AttributeStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AttributeStmtContext.prototype.ATTRIBUTE = function () { return this.getToken(vbaParser.ATTRIBUTE, 0); };
    AttributeStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    AttributeStmtContext.prototype.implicitCallStmt_InStmt = function () {
        return this.getRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    AttributeStmtContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    AttributeStmtContext.prototype.literal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }
        else {
            return this.getRuleContext(i, LiteralContext);
        }
    };
    Object.defineProperty(AttributeStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_attributeStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AttributeStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterAttributeStmt) {
            listener.enterAttributeStmt(this);
        }
    };
    // @Override
    AttributeStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitAttributeStmt) {
            listener.exitAttributeStmt(this);
        }
    };
    // @Override
    AttributeStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitAttributeStmt) {
            return visitor.visitAttributeStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AttributeStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AttributeStmtContext = AttributeStmtContext;
var BlockContext = /** @class */ (function (_super) {
    __extends(BlockContext, _super);
    function BlockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BlockContext.prototype.blockStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockStmtContext);
        }
        else {
            return this.getRuleContext(i, BlockStmtContext);
        }
    };
    BlockContext.prototype.endOfStatement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EndOfStatementContext);
        }
        else {
            return this.getRuleContext(i, EndOfStatementContext);
        }
    };
    Object.defineProperty(BlockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_block; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BlockContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock) {
            listener.enterBlock(this);
        }
    };
    // @Override
    BlockContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock) {
            listener.exitBlock(this);
        }
    };
    // @Override
    BlockContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock) {
            return visitor.visitBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BlockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BlockContext = BlockContext;
var BlockStmtContext = /** @class */ (function (_super) {
    __extends(BlockStmtContext, _super);
    function BlockStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BlockStmtContext.prototype.lineLabel = function () {
        return this.tryGetRuleContext(0, LineLabelContext);
    };
    BlockStmtContext.prototype.appactivateStmt = function () {
        return this.tryGetRuleContext(0, AppactivateStmtContext);
    };
    BlockStmtContext.prototype.attributeStmt = function () {
        return this.tryGetRuleContext(0, AttributeStmtContext);
    };
    BlockStmtContext.prototype.beepStmt = function () {
        return this.tryGetRuleContext(0, BeepStmtContext);
    };
    BlockStmtContext.prototype.chdirStmt = function () {
        return this.tryGetRuleContext(0, ChdirStmtContext);
    };
    BlockStmtContext.prototype.chdriveStmt = function () {
        return this.tryGetRuleContext(0, ChdriveStmtContext);
    };
    BlockStmtContext.prototype.closeStmt = function () {
        return this.tryGetRuleContext(0, CloseStmtContext);
    };
    BlockStmtContext.prototype.constStmt = function () {
        return this.tryGetRuleContext(0, ConstStmtContext);
    };
    BlockStmtContext.prototype.dateStmt = function () {
        return this.tryGetRuleContext(0, DateStmtContext);
    };
    BlockStmtContext.prototype.deleteSettingStmt = function () {
        return this.tryGetRuleContext(0, DeleteSettingStmtContext);
    };
    BlockStmtContext.prototype.deftypeStmt = function () {
        return this.tryGetRuleContext(0, DeftypeStmtContext);
    };
    BlockStmtContext.prototype.doLoopStmt = function () {
        return this.tryGetRuleContext(0, DoLoopStmtContext);
    };
    BlockStmtContext.prototype.endStmt = function () {
        return this.tryGetRuleContext(0, EndStmtContext);
    };
    BlockStmtContext.prototype.eraseStmt = function () {
        return this.tryGetRuleContext(0, EraseStmtContext);
    };
    BlockStmtContext.prototype.errorStmt = function () {
        return this.tryGetRuleContext(0, ErrorStmtContext);
    };
    BlockStmtContext.prototype.exitStmt = function () {
        return this.tryGetRuleContext(0, ExitStmtContext);
    };
    BlockStmtContext.prototype.explicitCallStmt = function () {
        return this.tryGetRuleContext(0, ExplicitCallStmtContext);
    };
    BlockStmtContext.prototype.filecopyStmt = function () {
        return this.tryGetRuleContext(0, FilecopyStmtContext);
    };
    BlockStmtContext.prototype.forEachStmt = function () {
        return this.tryGetRuleContext(0, ForEachStmtContext);
    };
    BlockStmtContext.prototype.forNextStmt = function () {
        return this.tryGetRuleContext(0, ForNextStmtContext);
    };
    BlockStmtContext.prototype.getStmt = function () {
        return this.tryGetRuleContext(0, GetStmtContext);
    };
    BlockStmtContext.prototype.goSubStmt = function () {
        return this.tryGetRuleContext(0, GoSubStmtContext);
    };
    BlockStmtContext.prototype.goToStmt = function () {
        return this.tryGetRuleContext(0, GoToStmtContext);
    };
    BlockStmtContext.prototype.ifThenElseStmt = function () {
        return this.tryGetRuleContext(0, IfThenElseStmtContext);
    };
    BlockStmtContext.prototype.implementsStmt = function () {
        return this.tryGetRuleContext(0, ImplementsStmtContext);
    };
    BlockStmtContext.prototype.inputStmt = function () {
        return this.tryGetRuleContext(0, InputStmtContext);
    };
    BlockStmtContext.prototype.killStmt = function () {
        return this.tryGetRuleContext(0, KillStmtContext);
    };
    BlockStmtContext.prototype.letStmt = function () {
        return this.tryGetRuleContext(0, LetStmtContext);
    };
    BlockStmtContext.prototype.lineInputStmt = function () {
        return this.tryGetRuleContext(0, LineInputStmtContext);
    };
    BlockStmtContext.prototype.loadStmt = function () {
        return this.tryGetRuleContext(0, LoadStmtContext);
    };
    BlockStmtContext.prototype.lockStmt = function () {
        return this.tryGetRuleContext(0, LockStmtContext);
    };
    BlockStmtContext.prototype.lsetStmt = function () {
        return this.tryGetRuleContext(0, LsetStmtContext);
    };
    BlockStmtContext.prototype.macroStmt = function () {
        return this.tryGetRuleContext(0, MacroStmtContext);
    };
    BlockStmtContext.prototype.midStmt = function () {
        return this.tryGetRuleContext(0, MidStmtContext);
    };
    BlockStmtContext.prototype.mkdirStmt = function () {
        return this.tryGetRuleContext(0, MkdirStmtContext);
    };
    BlockStmtContext.prototype.nameStmt = function () {
        return this.tryGetRuleContext(0, NameStmtContext);
    };
    BlockStmtContext.prototype.onErrorStmt = function () {
        return this.tryGetRuleContext(0, OnErrorStmtContext);
    };
    BlockStmtContext.prototype.onGoToStmt = function () {
        return this.tryGetRuleContext(0, OnGoToStmtContext);
    };
    BlockStmtContext.prototype.onGoSubStmt = function () {
        return this.tryGetRuleContext(0, OnGoSubStmtContext);
    };
    BlockStmtContext.prototype.openStmt = function () {
        return this.tryGetRuleContext(0, OpenStmtContext);
    };
    BlockStmtContext.prototype.printStmt = function () {
        return this.tryGetRuleContext(0, PrintStmtContext);
    };
    BlockStmtContext.prototype.putStmt = function () {
        return this.tryGetRuleContext(0, PutStmtContext);
    };
    BlockStmtContext.prototype.raiseEventStmt = function () {
        return this.tryGetRuleContext(0, RaiseEventStmtContext);
    };
    BlockStmtContext.prototype.randomizeStmt = function () {
        return this.tryGetRuleContext(0, RandomizeStmtContext);
    };
    BlockStmtContext.prototype.redimStmt = function () {
        return this.tryGetRuleContext(0, RedimStmtContext);
    };
    BlockStmtContext.prototype.resetStmt = function () {
        return this.tryGetRuleContext(0, ResetStmtContext);
    };
    BlockStmtContext.prototype.resumeStmt = function () {
        return this.tryGetRuleContext(0, ResumeStmtContext);
    };
    BlockStmtContext.prototype.returnStmt = function () {
        return this.tryGetRuleContext(0, ReturnStmtContext);
    };
    BlockStmtContext.prototype.rmdirStmt = function () {
        return this.tryGetRuleContext(0, RmdirStmtContext);
    };
    BlockStmtContext.prototype.rsetStmt = function () {
        return this.tryGetRuleContext(0, RsetStmtContext);
    };
    BlockStmtContext.prototype.savepictureStmt = function () {
        return this.tryGetRuleContext(0, SavepictureStmtContext);
    };
    BlockStmtContext.prototype.saveSettingStmt = function () {
        return this.tryGetRuleContext(0, SaveSettingStmtContext);
    };
    BlockStmtContext.prototype.seekStmt = function () {
        return this.tryGetRuleContext(0, SeekStmtContext);
    };
    BlockStmtContext.prototype.selectCaseStmt = function () {
        return this.tryGetRuleContext(0, SelectCaseStmtContext);
    };
    BlockStmtContext.prototype.sendkeysStmt = function () {
        return this.tryGetRuleContext(0, SendkeysStmtContext);
    };
    BlockStmtContext.prototype.setattrStmt = function () {
        return this.tryGetRuleContext(0, SetattrStmtContext);
    };
    BlockStmtContext.prototype.setStmt = function () {
        return this.tryGetRuleContext(0, SetStmtContext);
    };
    BlockStmtContext.prototype.stopStmt = function () {
        return this.tryGetRuleContext(0, StopStmtContext);
    };
    BlockStmtContext.prototype.timeStmt = function () {
        return this.tryGetRuleContext(0, TimeStmtContext);
    };
    BlockStmtContext.prototype.unloadStmt = function () {
        return this.tryGetRuleContext(0, UnloadStmtContext);
    };
    BlockStmtContext.prototype.unlockStmt = function () {
        return this.tryGetRuleContext(0, UnlockStmtContext);
    };
    BlockStmtContext.prototype.variableStmt = function () {
        return this.tryGetRuleContext(0, VariableStmtContext);
    };
    BlockStmtContext.prototype.whileWendStmt = function () {
        return this.tryGetRuleContext(0, WhileWendStmtContext);
    };
    BlockStmtContext.prototype.widthStmt = function () {
        return this.tryGetRuleContext(0, WidthStmtContext);
    };
    BlockStmtContext.prototype.withStmt = function () {
        return this.tryGetRuleContext(0, WithStmtContext);
    };
    BlockStmtContext.prototype.writeStmt = function () {
        return this.tryGetRuleContext(0, WriteStmtContext);
    };
    BlockStmtContext.prototype.implicitCallStmt_InBlock = function () {
        return this.tryGetRuleContext(0, ImplicitCallStmt_InBlockContext);
    };
    Object.defineProperty(BlockStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_blockStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BlockStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterBlockStmt) {
            listener.enterBlockStmt(this);
        }
    };
    // @Override
    BlockStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitBlockStmt) {
            listener.exitBlockStmt(this);
        }
    };
    // @Override
    BlockStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitBlockStmt) {
            return visitor.visitBlockStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BlockStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BlockStmtContext = BlockStmtContext;
var AppactivateStmtContext = /** @class */ (function (_super) {
    __extends(AppactivateStmtContext, _super);
    function AppactivateStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AppactivateStmtContext.prototype.APPACTIVATE = function () { return this.getToken(vbaParser.APPACTIVATE, 0); };
    AppactivateStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    AppactivateStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(AppactivateStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_appactivateStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AppactivateStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterAppactivateStmt) {
            listener.enterAppactivateStmt(this);
        }
    };
    // @Override
    AppactivateStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitAppactivateStmt) {
            listener.exitAppactivateStmt(this);
        }
    };
    // @Override
    AppactivateStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitAppactivateStmt) {
            return visitor.visitAppactivateStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AppactivateStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AppactivateStmtContext = AppactivateStmtContext;
var BeepStmtContext = /** @class */ (function (_super) {
    __extends(BeepStmtContext, _super);
    function BeepStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BeepStmtContext.prototype.BEEP = function () { return this.getToken(vbaParser.BEEP, 0); };
    Object.defineProperty(BeepStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_beepStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BeepStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterBeepStmt) {
            listener.enterBeepStmt(this);
        }
    };
    // @Override
    BeepStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitBeepStmt) {
            listener.exitBeepStmt(this);
        }
    };
    // @Override
    BeepStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitBeepStmt) {
            return visitor.visitBeepStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BeepStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BeepStmtContext = BeepStmtContext;
var ChdirStmtContext = /** @class */ (function (_super) {
    __extends(ChdirStmtContext, _super);
    function ChdirStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ChdirStmtContext.prototype.CHDIR = function () { return this.getToken(vbaParser.CHDIR, 0); };
    ChdirStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    ChdirStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(ChdirStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_chdirStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ChdirStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterChdirStmt) {
            listener.enterChdirStmt(this);
        }
    };
    // @Override
    ChdirStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitChdirStmt) {
            listener.exitChdirStmt(this);
        }
    };
    // @Override
    ChdirStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitChdirStmt) {
            return visitor.visitChdirStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ChdirStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ChdirStmtContext = ChdirStmtContext;
var ChdriveStmtContext = /** @class */ (function (_super) {
    __extends(ChdriveStmtContext, _super);
    function ChdriveStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ChdriveStmtContext.prototype.CHDRIVE = function () { return this.getToken(vbaParser.CHDRIVE, 0); };
    ChdriveStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    ChdriveStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(ChdriveStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_chdriveStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ChdriveStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterChdriveStmt) {
            listener.enterChdriveStmt(this);
        }
    };
    // @Override
    ChdriveStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitChdriveStmt) {
            listener.exitChdriveStmt(this);
        }
    };
    // @Override
    ChdriveStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitChdriveStmt) {
            return visitor.visitChdriveStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ChdriveStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ChdriveStmtContext = ChdriveStmtContext;
var CloseStmtContext = /** @class */ (function (_super) {
    __extends(CloseStmtContext, _super);
    function CloseStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CloseStmtContext.prototype.CLOSE = function () { return this.getToken(vbaParser.CLOSE, 0); };
    CloseStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    CloseStmtContext.prototype.fileNumber = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(FileNumberContext);
        }
        else {
            return this.getRuleContext(i, FileNumberContext);
        }
    };
    Object.defineProperty(CloseStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_closeStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CloseStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterCloseStmt) {
            listener.enterCloseStmt(this);
        }
    };
    // @Override
    CloseStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitCloseStmt) {
            listener.exitCloseStmt(this);
        }
    };
    // @Override
    CloseStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitCloseStmt) {
            return visitor.visitCloseStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CloseStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CloseStmtContext = CloseStmtContext;
var ConstStmtContext = /** @class */ (function (_super) {
    __extends(ConstStmtContext, _super);
    function ConstStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConstStmtContext.prototype.CONST = function () { return this.getToken(vbaParser.CONST, 0); };
    ConstStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ConstStmtContext.prototype.constSubStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ConstSubStmtContext);
        }
        else {
            return this.getRuleContext(i, ConstSubStmtContext);
        }
    };
    ConstStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    Object.defineProperty(ConstStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_constStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConstStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterConstStmt) {
            listener.enterConstStmt(this);
        }
    };
    // @Override
    ConstStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitConstStmt) {
            listener.exitConstStmt(this);
        }
    };
    // @Override
    ConstStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitConstStmt) {
            return visitor.visitConstStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConstStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConstStmtContext = ConstStmtContext;
var ConstSubStmtContext = /** @class */ (function (_super) {
    __extends(ConstSubStmtContext, _super);
    function ConstSubStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConstSubStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    ConstSubStmtContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    ConstSubStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    ConstSubStmtContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    ConstSubStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ConstSubStmtContext.prototype.asTypeClause = function () {
        return this.tryGetRuleContext(0, AsTypeClauseContext);
    };
    Object.defineProperty(ConstSubStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_constSubStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConstSubStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterConstSubStmt) {
            listener.enterConstSubStmt(this);
        }
    };
    // @Override
    ConstSubStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitConstSubStmt) {
            listener.exitConstSubStmt(this);
        }
    };
    // @Override
    ConstSubStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitConstSubStmt) {
            return visitor.visitConstSubStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConstSubStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConstSubStmtContext = ConstSubStmtContext;
var DateStmtContext = /** @class */ (function (_super) {
    __extends(DateStmtContext, _super);
    function DateStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DateStmtContext.prototype.DATE = function () { return this.getToken(vbaParser.DATE, 0); };
    DateStmtContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    DateStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    DateStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(DateStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_dateStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DateStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterDateStmt) {
            listener.enterDateStmt(this);
        }
    };
    // @Override
    DateStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitDateStmt) {
            listener.exitDateStmt(this);
        }
    };
    // @Override
    DateStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitDateStmt) {
            return visitor.visitDateStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DateStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DateStmtContext = DateStmtContext;
var DeclareStmtContext = /** @class */ (function (_super) {
    __extends(DeclareStmtContext, _super);
    function DeclareStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DeclareStmtContext.prototype.DECLARE = function () { return this.getToken(vbaParser.DECLARE, 0); };
    DeclareStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    DeclareStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    DeclareStmtContext.prototype.LIB = function () { return this.getToken(vbaParser.LIB, 0); };
    DeclareStmtContext.prototype.STRINGLITERAL = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.STRINGLITERAL);
        }
        else {
            return this.getToken(vbaParser.STRINGLITERAL, i);
        }
    };
    DeclareStmtContext.prototype.SUB = function () { return this.tryGetToken(vbaParser.SUB, 0); };
    DeclareStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    DeclareStmtContext.prototype.PTRSAFE = function () { return this.tryGetToken(vbaParser.PTRSAFE, 0); };
    DeclareStmtContext.prototype.typeHint = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeHintContext);
        }
        else {
            return this.getRuleContext(i, TypeHintContext);
        }
    };
    DeclareStmtContext.prototype.ALIAS = function () { return this.tryGetToken(vbaParser.ALIAS, 0); };
    DeclareStmtContext.prototype.argList = function () {
        return this.tryGetRuleContext(0, ArgListContext);
    };
    DeclareStmtContext.prototype.asTypeClause = function () {
        return this.tryGetRuleContext(0, AsTypeClauseContext);
    };
    DeclareStmtContext.prototype.FUNCTION = function () { return this.tryGetToken(vbaParser.FUNCTION, 0); };
    Object.defineProperty(DeclareStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_declareStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DeclareStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterDeclareStmt) {
            listener.enterDeclareStmt(this);
        }
    };
    // @Override
    DeclareStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitDeclareStmt) {
            listener.exitDeclareStmt(this);
        }
    };
    // @Override
    DeclareStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitDeclareStmt) {
            return visitor.visitDeclareStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DeclareStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DeclareStmtContext = DeclareStmtContext;
var DeftypeStmtContext = /** @class */ (function (_super) {
    __extends(DeftypeStmtContext, _super);
    function DeftypeStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DeftypeStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    DeftypeStmtContext.prototype.letterrange = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(LetterrangeContext);
        }
        else {
            return this.getRuleContext(i, LetterrangeContext);
        }
    };
    DeftypeStmtContext.prototype.DEFBOOL = function () { return this.tryGetToken(vbaParser.DEFBOOL, 0); };
    DeftypeStmtContext.prototype.DEFBYTE = function () { return this.tryGetToken(vbaParser.DEFBYTE, 0); };
    DeftypeStmtContext.prototype.DEFINT = function () { return this.tryGetToken(vbaParser.DEFINT, 0); };
    DeftypeStmtContext.prototype.DEFLNG = function () { return this.tryGetToken(vbaParser.DEFLNG, 0); };
    DeftypeStmtContext.prototype.DEFCUR = function () { return this.tryGetToken(vbaParser.DEFCUR, 0); };
    DeftypeStmtContext.prototype.DEFSNG = function () { return this.tryGetToken(vbaParser.DEFSNG, 0); };
    DeftypeStmtContext.prototype.DEFDBL = function () { return this.tryGetToken(vbaParser.DEFDBL, 0); };
    DeftypeStmtContext.prototype.DEFDEC = function () { return this.tryGetToken(vbaParser.DEFDEC, 0); };
    DeftypeStmtContext.prototype.DEFDATE = function () { return this.tryGetToken(vbaParser.DEFDATE, 0); };
    DeftypeStmtContext.prototype.DEFSTR = function () { return this.tryGetToken(vbaParser.DEFSTR, 0); };
    DeftypeStmtContext.prototype.DEFOBJ = function () { return this.tryGetToken(vbaParser.DEFOBJ, 0); };
    DeftypeStmtContext.prototype.DEFVAR = function () { return this.tryGetToken(vbaParser.DEFVAR, 0); };
    Object.defineProperty(DeftypeStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_deftypeStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DeftypeStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterDeftypeStmt) {
            listener.enterDeftypeStmt(this);
        }
    };
    // @Override
    DeftypeStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitDeftypeStmt) {
            listener.exitDeftypeStmt(this);
        }
    };
    // @Override
    DeftypeStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitDeftypeStmt) {
            return visitor.visitDeftypeStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DeftypeStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DeftypeStmtContext = DeftypeStmtContext;
var DeleteSettingStmtContext = /** @class */ (function (_super) {
    __extends(DeleteSettingStmtContext, _super);
    function DeleteSettingStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DeleteSettingStmtContext.prototype.DELETESETTING = function () { return this.getToken(vbaParser.DELETESETTING, 0); };
    DeleteSettingStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    DeleteSettingStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(DeleteSettingStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_deleteSettingStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DeleteSettingStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterDeleteSettingStmt) {
            listener.enterDeleteSettingStmt(this);
        }
    };
    // @Override
    DeleteSettingStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitDeleteSettingStmt) {
            listener.exitDeleteSettingStmt(this);
        }
    };
    // @Override
    DeleteSettingStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitDeleteSettingStmt) {
            return visitor.visitDeleteSettingStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DeleteSettingStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DeleteSettingStmtContext = DeleteSettingStmtContext;
var DoLoopStmtContext = /** @class */ (function (_super) {
    __extends(DoLoopStmtContext, _super);
    function DoLoopStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DoLoopStmtContext.prototype.DO = function () { return this.getToken(vbaParser.DO, 0); };
    DoLoopStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    DoLoopStmtContext.prototype.LOOP = function () { return this.getToken(vbaParser.LOOP, 0); };
    DoLoopStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    DoLoopStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    DoLoopStmtContext.prototype.valueStmt = function () {
        return this.tryGetRuleContext(0, ValueStmtContext);
    };
    DoLoopStmtContext.prototype.WHILE = function () { return this.tryGetToken(vbaParser.WHILE, 0); };
    DoLoopStmtContext.prototype.UNTIL = function () { return this.tryGetToken(vbaParser.UNTIL, 0); };
    Object.defineProperty(DoLoopStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_doLoopStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DoLoopStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterDoLoopStmt) {
            listener.enterDoLoopStmt(this);
        }
    };
    // @Override
    DoLoopStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitDoLoopStmt) {
            listener.exitDoLoopStmt(this);
        }
    };
    // @Override
    DoLoopStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitDoLoopStmt) {
            return visitor.visitDoLoopStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DoLoopStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DoLoopStmtContext = DoLoopStmtContext;
var EndStmtContext = /** @class */ (function (_super) {
    __extends(EndStmtContext, _super);
    function EndStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EndStmtContext.prototype.END = function () { return this.getToken(vbaParser.END, 0); };
    Object.defineProperty(EndStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_endStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EndStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterEndStmt) {
            listener.enterEndStmt(this);
        }
    };
    // @Override
    EndStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitEndStmt) {
            listener.exitEndStmt(this);
        }
    };
    // @Override
    EndStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitEndStmt) {
            return visitor.visitEndStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EndStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EndStmtContext = EndStmtContext;
var EnumerationStmtContext = /** @class */ (function (_super) {
    __extends(EnumerationStmtContext, _super);
    function EnumerationStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnumerationStmtContext.prototype.ENUM = function () { return this.getToken(vbaParser.ENUM, 0); };
    EnumerationStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    EnumerationStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    EnumerationStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    EnumerationStmtContext.prototype.END_ENUM = function () { return this.getToken(vbaParser.END_ENUM, 0); };
    EnumerationStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    EnumerationStmtContext.prototype.enumerationStmt_Constant = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EnumerationStmt_ConstantContext);
        }
        else {
            return this.getRuleContext(i, EnumerationStmt_ConstantContext);
        }
    };
    Object.defineProperty(EnumerationStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_enumerationStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnumerationStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterEnumerationStmt) {
            listener.enterEnumerationStmt(this);
        }
    };
    // @Override
    EnumerationStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitEnumerationStmt) {
            listener.exitEnumerationStmt(this);
        }
    };
    // @Override
    EnumerationStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitEnumerationStmt) {
            return visitor.visitEnumerationStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnumerationStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnumerationStmtContext = EnumerationStmtContext;
var EnumerationStmt_ConstantContext = /** @class */ (function (_super) {
    __extends(EnumerationStmt_ConstantContext, _super);
    function EnumerationStmt_ConstantContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EnumerationStmt_ConstantContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    EnumerationStmt_ConstantContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    EnumerationStmt_ConstantContext.prototype.EQ = function () { return this.tryGetToken(vbaParser.EQ, 0); };
    EnumerationStmt_ConstantContext.prototype.valueStmt = function () {
        return this.tryGetRuleContext(0, ValueStmtContext);
    };
    EnumerationStmt_ConstantContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(EnumerationStmt_ConstantContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_enumerationStmt_Constant; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EnumerationStmt_ConstantContext.prototype.enterRule = function (listener) {
        if (listener.enterEnumerationStmt_Constant) {
            listener.enterEnumerationStmt_Constant(this);
        }
    };
    // @Override
    EnumerationStmt_ConstantContext.prototype.exitRule = function (listener) {
        if (listener.exitEnumerationStmt_Constant) {
            listener.exitEnumerationStmt_Constant(this);
        }
    };
    // @Override
    EnumerationStmt_ConstantContext.prototype.accept = function (visitor) {
        if (visitor.visitEnumerationStmt_Constant) {
            return visitor.visitEnumerationStmt_Constant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EnumerationStmt_ConstantContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EnumerationStmt_ConstantContext = EnumerationStmt_ConstantContext;
var EraseStmtContext = /** @class */ (function (_super) {
    __extends(EraseStmtContext, _super);
    function EraseStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EraseStmtContext.prototype.ERASE = function () { return this.getToken(vbaParser.ERASE, 0); };
    EraseStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    EraseStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(EraseStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_eraseStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EraseStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterEraseStmt) {
            listener.enterEraseStmt(this);
        }
    };
    // @Override
    EraseStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitEraseStmt) {
            listener.exitEraseStmt(this);
        }
    };
    // @Override
    EraseStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitEraseStmt) {
            return visitor.visitEraseStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EraseStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EraseStmtContext = EraseStmtContext;
var ErrorStmtContext = /** @class */ (function (_super) {
    __extends(ErrorStmtContext, _super);
    function ErrorStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ErrorStmtContext.prototype.ERROR = function () { return this.getToken(vbaParser.ERROR, 0); };
    ErrorStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    ErrorStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(ErrorStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_errorStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ErrorStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterErrorStmt) {
            listener.enterErrorStmt(this);
        }
    };
    // @Override
    ErrorStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitErrorStmt) {
            listener.exitErrorStmt(this);
        }
    };
    // @Override
    ErrorStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitErrorStmt) {
            return visitor.visitErrorStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ErrorStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ErrorStmtContext = ErrorStmtContext;
var EventStmtContext = /** @class */ (function (_super) {
    __extends(EventStmtContext, _super);
    function EventStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EventStmtContext.prototype.EVENT = function () { return this.getToken(vbaParser.EVENT, 0); };
    EventStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    EventStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    EventStmtContext.prototype.argList = function () {
        return this.getRuleContext(0, ArgListContext);
    };
    EventStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    Object.defineProperty(EventStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_eventStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EventStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterEventStmt) {
            listener.enterEventStmt(this);
        }
    };
    // @Override
    EventStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitEventStmt) {
            listener.exitEventStmt(this);
        }
    };
    // @Override
    EventStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitEventStmt) {
            return visitor.visitEventStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EventStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EventStmtContext = EventStmtContext;
var ExitStmtContext = /** @class */ (function (_super) {
    __extends(ExitStmtContext, _super);
    function ExitStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExitStmtContext.prototype.EXIT_DO = function () { return this.tryGetToken(vbaParser.EXIT_DO, 0); };
    ExitStmtContext.prototype.EXIT_FOR = function () { return this.tryGetToken(vbaParser.EXIT_FOR, 0); };
    ExitStmtContext.prototype.EXIT_FUNCTION = function () { return this.tryGetToken(vbaParser.EXIT_FUNCTION, 0); };
    ExitStmtContext.prototype.EXIT_PROPERTY = function () { return this.tryGetToken(vbaParser.EXIT_PROPERTY, 0); };
    ExitStmtContext.prototype.EXIT_SUB = function () { return this.tryGetToken(vbaParser.EXIT_SUB, 0); };
    Object.defineProperty(ExitStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_exitStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExitStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterExitStmt) {
            listener.enterExitStmt(this);
        }
    };
    // @Override
    ExitStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitExitStmt) {
            listener.exitExitStmt(this);
        }
    };
    // @Override
    ExitStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitExitStmt) {
            return visitor.visitExitStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExitStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExitStmtContext = ExitStmtContext;
var FilecopyStmtContext = /** @class */ (function (_super) {
    __extends(FilecopyStmtContext, _super);
    function FilecopyStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FilecopyStmtContext.prototype.FILECOPY = function () { return this.getToken(vbaParser.FILECOPY, 0); };
    FilecopyStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    FilecopyStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(FilecopyStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_filecopyStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FilecopyStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterFilecopyStmt) {
            listener.enterFilecopyStmt(this);
        }
    };
    // @Override
    FilecopyStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitFilecopyStmt) {
            listener.exitFilecopyStmt(this);
        }
    };
    // @Override
    FilecopyStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitFilecopyStmt) {
            return visitor.visitFilecopyStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FilecopyStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FilecopyStmtContext = FilecopyStmtContext;
var ForEachStmtContext = /** @class */ (function (_super) {
    __extends(ForEachStmtContext, _super);
    function ForEachStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ForEachStmtContext.prototype.FOR = function () { return this.getToken(vbaParser.FOR, 0); };
    ForEachStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ForEachStmtContext.prototype.EACH = function () { return this.getToken(vbaParser.EACH, 0); };
    ForEachStmtContext.prototype.ambiguousIdentifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AmbiguousIdentifierContext);
        }
        else {
            return this.getRuleContext(i, AmbiguousIdentifierContext);
        }
    };
    ForEachStmtContext.prototype.IN = function () { return this.getToken(vbaParser.IN, 0); };
    ForEachStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    ForEachStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    ForEachStmtContext.prototype.NEXT = function () { return this.getToken(vbaParser.NEXT, 0); };
    ForEachStmtContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    ForEachStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(ForEachStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_forEachStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ForEachStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterForEachStmt) {
            listener.enterForEachStmt(this);
        }
    };
    // @Override
    ForEachStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitForEachStmt) {
            listener.exitForEachStmt(this);
        }
    };
    // @Override
    ForEachStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitForEachStmt) {
            return visitor.visitForEachStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ForEachStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ForEachStmtContext = ForEachStmtContext;
var ForNextStmtContext = /** @class */ (function (_super) {
    __extends(ForNextStmtContext, _super);
    function ForNextStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ForNextStmtContext.prototype.FOR = function () { return this.getToken(vbaParser.FOR, 0); };
    ForNextStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ForNextStmtContext.prototype.ambiguousIdentifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AmbiguousIdentifierContext);
        }
        else {
            return this.getRuleContext(i, AmbiguousIdentifierContext);
        }
    };
    ForNextStmtContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    ForNextStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    ForNextStmtContext.prototype.TO = function () { return this.getToken(vbaParser.TO, 0); };
    ForNextStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    ForNextStmtContext.prototype.NEXT = function () { return this.getToken(vbaParser.NEXT, 0); };
    ForNextStmtContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    ForNextStmtContext.prototype.asTypeClause = function () {
        return this.tryGetRuleContext(0, AsTypeClauseContext);
    };
    ForNextStmtContext.prototype.STEP = function () { return this.tryGetToken(vbaParser.STEP, 0); };
    ForNextStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(ForNextStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_forNextStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ForNextStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterForNextStmt) {
            listener.enterForNextStmt(this);
        }
    };
    // @Override
    ForNextStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitForNextStmt) {
            listener.exitForNextStmt(this);
        }
    };
    // @Override
    ForNextStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitForNextStmt) {
            return visitor.visitForNextStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ForNextStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ForNextStmtContext = ForNextStmtContext;
var FunctionStmtContext = /** @class */ (function (_super) {
    __extends(FunctionStmtContext, _super);
    function FunctionStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FunctionStmtContext.prototype.FUNCTION = function () { return this.getToken(vbaParser.FUNCTION, 0); };
    FunctionStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    FunctionStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    FunctionStmtContext.prototype.END_FUNCTION = function () { return this.getToken(vbaParser.END_FUNCTION, 0); };
    FunctionStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    FunctionStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    FunctionStmtContext.prototype.STATIC = function () { return this.tryGetToken(vbaParser.STATIC, 0); };
    FunctionStmtContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    FunctionStmtContext.prototype.argList = function () {
        return this.tryGetRuleContext(0, ArgListContext);
    };
    FunctionStmtContext.prototype.asTypeClause = function () {
        return this.tryGetRuleContext(0, AsTypeClauseContext);
    };
    FunctionStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(FunctionStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_functionStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FunctionStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterFunctionStmt) {
            listener.enterFunctionStmt(this);
        }
    };
    // @Override
    FunctionStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitFunctionStmt) {
            listener.exitFunctionStmt(this);
        }
    };
    // @Override
    FunctionStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitFunctionStmt) {
            return visitor.visitFunctionStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FunctionStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FunctionStmtContext = FunctionStmtContext;
var GetStmtContext = /** @class */ (function (_super) {
    __extends(GetStmtContext, _super);
    function GetStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    GetStmtContext.prototype.GET = function () { return this.getToken(vbaParser.GET, 0); };
    GetStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    GetStmtContext.prototype.fileNumber = function () {
        return this.getRuleContext(0, FileNumberContext);
    };
    GetStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(GetStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_getStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    GetStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterGetStmt) {
            listener.enterGetStmt(this);
        }
    };
    // @Override
    GetStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitGetStmt) {
            listener.exitGetStmt(this);
        }
    };
    // @Override
    GetStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitGetStmt) {
            return visitor.visitGetStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return GetStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.GetStmtContext = GetStmtContext;
var GoSubStmtContext = /** @class */ (function (_super) {
    __extends(GoSubStmtContext, _super);
    function GoSubStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    GoSubStmtContext.prototype.GOSUB = function () { return this.getToken(vbaParser.GOSUB, 0); };
    GoSubStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    GoSubStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(GoSubStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_goSubStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    GoSubStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterGoSubStmt) {
            listener.enterGoSubStmt(this);
        }
    };
    // @Override
    GoSubStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitGoSubStmt) {
            listener.exitGoSubStmt(this);
        }
    };
    // @Override
    GoSubStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitGoSubStmt) {
            return visitor.visitGoSubStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return GoSubStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.GoSubStmtContext = GoSubStmtContext;
var GoToStmtContext = /** @class */ (function (_super) {
    __extends(GoToStmtContext, _super);
    function GoToStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    GoToStmtContext.prototype.GOTO = function () { return this.getToken(vbaParser.GOTO, 0); };
    GoToStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    GoToStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(GoToStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_goToStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    GoToStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterGoToStmt) {
            listener.enterGoToStmt(this);
        }
    };
    // @Override
    GoToStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitGoToStmt) {
            listener.exitGoToStmt(this);
        }
    };
    // @Override
    GoToStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitGoToStmt) {
            return visitor.visitGoToStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return GoToStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.GoToStmtContext = GoToStmtContext;
var IfThenElseStmtContext = /** @class */ (function (_super) {
    __extends(IfThenElseStmtContext, _super);
    function IfThenElseStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(IfThenElseStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_ifThenElseStmt; },
        enumerable: true,
        configurable: true
    });
    IfThenElseStmtContext.prototype.copyFrom = function (ctx) {
        _super.prototype.copyFrom.call(this, ctx);
    };
    return IfThenElseStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfThenElseStmtContext = IfThenElseStmtContext;
var InlineIfThenElseContext = /** @class */ (function (_super) {
    __extends(InlineIfThenElseContext, _super);
    function InlineIfThenElseContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    InlineIfThenElseContext.prototype.IF = function () { return this.getToken(vbaParser.IF, 0); };
    InlineIfThenElseContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    InlineIfThenElseContext.prototype.ifConditionStmt = function () {
        return this.getRuleContext(0, IfConditionStmtContext);
    };
    InlineIfThenElseContext.prototype.THEN = function () { return this.getToken(vbaParser.THEN, 0); };
    InlineIfThenElseContext.prototype.blockStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockStmtContext);
        }
        else {
            return this.getRuleContext(i, BlockStmtContext);
        }
    };
    InlineIfThenElseContext.prototype.ELSE = function () { return this.tryGetToken(vbaParser.ELSE, 0); };
    // @Override
    InlineIfThenElseContext.prototype.enterRule = function (listener) {
        if (listener.enterInlineIfThenElse) {
            listener.enterInlineIfThenElse(this);
        }
    };
    // @Override
    InlineIfThenElseContext.prototype.exitRule = function (listener) {
        if (listener.exitInlineIfThenElse) {
            listener.exitInlineIfThenElse(this);
        }
    };
    // @Override
    InlineIfThenElseContext.prototype.accept = function (visitor) {
        if (visitor.visitInlineIfThenElse) {
            return visitor.visitInlineIfThenElse(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InlineIfThenElseContext;
}(IfThenElseStmtContext));
exports.InlineIfThenElseContext = InlineIfThenElseContext;
var BlockIfThenElseContext = /** @class */ (function (_super) {
    __extends(BlockIfThenElseContext, _super);
    function BlockIfThenElseContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    BlockIfThenElseContext.prototype.ifBlockStmt = function () {
        return this.getRuleContext(0, IfBlockStmtContext);
    };
    BlockIfThenElseContext.prototype.END_IF = function () { return this.getToken(vbaParser.END_IF, 0); };
    BlockIfThenElseContext.prototype.ifElseIfBlockStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IfElseIfBlockStmtContext);
        }
        else {
            return this.getRuleContext(i, IfElseIfBlockStmtContext);
        }
    };
    BlockIfThenElseContext.prototype.ifElseBlockStmt = function () {
        return this.tryGetRuleContext(0, IfElseBlockStmtContext);
    };
    // @Override
    BlockIfThenElseContext.prototype.enterRule = function (listener) {
        if (listener.enterBlockIfThenElse) {
            listener.enterBlockIfThenElse(this);
        }
    };
    // @Override
    BlockIfThenElseContext.prototype.exitRule = function (listener) {
        if (listener.exitBlockIfThenElse) {
            listener.exitBlockIfThenElse(this);
        }
    };
    // @Override
    BlockIfThenElseContext.prototype.accept = function (visitor) {
        if (visitor.visitBlockIfThenElse) {
            return visitor.visitBlockIfThenElse(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BlockIfThenElseContext;
}(IfThenElseStmtContext));
exports.BlockIfThenElseContext = BlockIfThenElseContext;
var IfBlockStmtContext = /** @class */ (function (_super) {
    __extends(IfBlockStmtContext, _super);
    function IfBlockStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IfBlockStmtContext.prototype.IF = function () { return this.getToken(vbaParser.IF, 0); };
    IfBlockStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    IfBlockStmtContext.prototype.ifConditionStmt = function () {
        return this.getRuleContext(0, IfConditionStmtContext);
    };
    IfBlockStmtContext.prototype.THEN = function () { return this.getToken(vbaParser.THEN, 0); };
    IfBlockStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    IfBlockStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(IfBlockStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_ifBlockStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IfBlockStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterIfBlockStmt) {
            listener.enterIfBlockStmt(this);
        }
    };
    // @Override
    IfBlockStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitIfBlockStmt) {
            listener.exitIfBlockStmt(this);
        }
    };
    // @Override
    IfBlockStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitIfBlockStmt) {
            return visitor.visitIfBlockStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IfBlockStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfBlockStmtContext = IfBlockStmtContext;
var IfConditionStmtContext = /** @class */ (function (_super) {
    __extends(IfConditionStmtContext, _super);
    function IfConditionStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IfConditionStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(IfConditionStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_ifConditionStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IfConditionStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterIfConditionStmt) {
            listener.enterIfConditionStmt(this);
        }
    };
    // @Override
    IfConditionStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitIfConditionStmt) {
            listener.exitIfConditionStmt(this);
        }
    };
    // @Override
    IfConditionStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitIfConditionStmt) {
            return visitor.visitIfConditionStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IfConditionStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfConditionStmtContext = IfConditionStmtContext;
var IfElseIfBlockStmtContext = /** @class */ (function (_super) {
    __extends(IfElseIfBlockStmtContext, _super);
    function IfElseIfBlockStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IfElseIfBlockStmtContext.prototype.ELSEIF = function () { return this.getToken(vbaParser.ELSEIF, 0); };
    IfElseIfBlockStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    IfElseIfBlockStmtContext.prototype.ifConditionStmt = function () {
        return this.getRuleContext(0, IfConditionStmtContext);
    };
    IfElseIfBlockStmtContext.prototype.THEN = function () { return this.getToken(vbaParser.THEN, 0); };
    IfElseIfBlockStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    IfElseIfBlockStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(IfElseIfBlockStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_ifElseIfBlockStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IfElseIfBlockStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterIfElseIfBlockStmt) {
            listener.enterIfElseIfBlockStmt(this);
        }
    };
    // @Override
    IfElseIfBlockStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitIfElseIfBlockStmt) {
            listener.exitIfElseIfBlockStmt(this);
        }
    };
    // @Override
    IfElseIfBlockStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitIfElseIfBlockStmt) {
            return visitor.visitIfElseIfBlockStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IfElseIfBlockStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfElseIfBlockStmtContext = IfElseIfBlockStmtContext;
var IfElseBlockStmtContext = /** @class */ (function (_super) {
    __extends(IfElseBlockStmtContext, _super);
    function IfElseBlockStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IfElseBlockStmtContext.prototype.ELSE = function () { return this.getToken(vbaParser.ELSE, 0); };
    IfElseBlockStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    IfElseBlockStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(IfElseBlockStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_ifElseBlockStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IfElseBlockStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterIfElseBlockStmt) {
            listener.enterIfElseBlockStmt(this);
        }
    };
    // @Override
    IfElseBlockStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitIfElseBlockStmt) {
            listener.exitIfElseBlockStmt(this);
        }
    };
    // @Override
    IfElseBlockStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitIfElseBlockStmt) {
            return visitor.visitIfElseBlockStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IfElseBlockStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IfElseBlockStmtContext = IfElseBlockStmtContext;
var ImplementsStmtContext = /** @class */ (function (_super) {
    __extends(ImplementsStmtContext, _super);
    function ImplementsStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ImplementsStmtContext.prototype.IMPLEMENTS = function () { return this.getToken(vbaParser.IMPLEMENTS, 0); };
    ImplementsStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    ImplementsStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    Object.defineProperty(ImplementsStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_implementsStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ImplementsStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterImplementsStmt) {
            listener.enterImplementsStmt(this);
        }
    };
    // @Override
    ImplementsStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitImplementsStmt) {
            listener.exitImplementsStmt(this);
        }
    };
    // @Override
    ImplementsStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitImplementsStmt) {
            return visitor.visitImplementsStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ImplementsStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ImplementsStmtContext = ImplementsStmtContext;
var InputStmtContext = /** @class */ (function (_super) {
    __extends(InputStmtContext, _super);
    function InputStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    InputStmtContext.prototype.INPUT = function () { return this.getToken(vbaParser.INPUT, 0); };
    InputStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    InputStmtContext.prototype.fileNumber = function () {
        return this.getRuleContext(0, FileNumberContext);
    };
    InputStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(InputStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_inputStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    InputStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterInputStmt) {
            listener.enterInputStmt(this);
        }
    };
    // @Override
    InputStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitInputStmt) {
            listener.exitInputStmt(this);
        }
    };
    // @Override
    InputStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitInputStmt) {
            return visitor.visitInputStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return InputStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.InputStmtContext = InputStmtContext;
var KillStmtContext = /** @class */ (function (_super) {
    __extends(KillStmtContext, _super);
    function KillStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    KillStmtContext.prototype.KILL = function () { return this.getToken(vbaParser.KILL, 0); };
    KillStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    KillStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(KillStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_killStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    KillStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterKillStmt) {
            listener.enterKillStmt(this);
        }
    };
    // @Override
    KillStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitKillStmt) {
            listener.exitKillStmt(this);
        }
    };
    // @Override
    KillStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitKillStmt) {
            return visitor.visitKillStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return KillStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.KillStmtContext = KillStmtContext;
var LetStmtContext = /** @class */ (function (_super) {
    __extends(LetStmtContext, _super);
    function LetStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LetStmtContext.prototype.implicitCallStmt_InStmt = function () {
        return this.getRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    LetStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    LetStmtContext.prototype.EQ = function () { return this.tryGetToken(vbaParser.EQ, 0); };
    LetStmtContext.prototype.PLUS_EQ = function () { return this.tryGetToken(vbaParser.PLUS_EQ, 0); };
    LetStmtContext.prototype.MINUS_EQ = function () { return this.tryGetToken(vbaParser.MINUS_EQ, 0); };
    LetStmtContext.prototype.LET = function () { return this.tryGetToken(vbaParser.LET, 0); };
    LetStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(LetStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_letStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LetStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterLetStmt) {
            listener.enterLetStmt(this);
        }
    };
    // @Override
    LetStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitLetStmt) {
            listener.exitLetStmt(this);
        }
    };
    // @Override
    LetStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitLetStmt) {
            return visitor.visitLetStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LetStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LetStmtContext = LetStmtContext;
var LineInputStmtContext = /** @class */ (function (_super) {
    __extends(LineInputStmtContext, _super);
    function LineInputStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LineInputStmtContext.prototype.LINE_INPUT = function () { return this.getToken(vbaParser.LINE_INPUT, 0); };
    LineInputStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    LineInputStmtContext.prototype.fileNumber = function () {
        return this.getRuleContext(0, FileNumberContext);
    };
    LineInputStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(LineInputStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_lineInputStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LineInputStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterLineInputStmt) {
            listener.enterLineInputStmt(this);
        }
    };
    // @Override
    LineInputStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitLineInputStmt) {
            listener.exitLineInputStmt(this);
        }
    };
    // @Override
    LineInputStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitLineInputStmt) {
            return visitor.visitLineInputStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LineInputStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LineInputStmtContext = LineInputStmtContext;
var LoadStmtContext = /** @class */ (function (_super) {
    __extends(LoadStmtContext, _super);
    function LoadStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LoadStmtContext.prototype.LOAD = function () { return this.getToken(vbaParser.LOAD, 0); };
    LoadStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    LoadStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(LoadStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_loadStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LoadStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterLoadStmt) {
            listener.enterLoadStmt(this);
        }
    };
    // @Override
    LoadStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitLoadStmt) {
            listener.exitLoadStmt(this);
        }
    };
    // @Override
    LoadStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitLoadStmt) {
            return visitor.visitLoadStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LoadStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LoadStmtContext = LoadStmtContext;
var LockStmtContext = /** @class */ (function (_super) {
    __extends(LockStmtContext, _super);
    function LockStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LockStmtContext.prototype.LOCK = function () { return this.getToken(vbaParser.LOCK, 0); };
    LockStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    LockStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    LockStmtContext.prototype.TO = function () { return this.tryGetToken(vbaParser.TO, 0); };
    Object.defineProperty(LockStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_lockStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LockStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterLockStmt) {
            listener.enterLockStmt(this);
        }
    };
    // @Override
    LockStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitLockStmt) {
            listener.exitLockStmt(this);
        }
    };
    // @Override
    LockStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitLockStmt) {
            return visitor.visitLockStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LockStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LockStmtContext = LockStmtContext;
var LsetStmtContext = /** @class */ (function (_super) {
    __extends(LsetStmtContext, _super);
    function LsetStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LsetStmtContext.prototype.LSET = function () { return this.getToken(vbaParser.LSET, 0); };
    LsetStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    LsetStmtContext.prototype.implicitCallStmt_InStmt = function () {
        return this.getRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    LsetStmtContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    LsetStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(LsetStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_lsetStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LsetStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterLsetStmt) {
            listener.enterLsetStmt(this);
        }
    };
    // @Override
    LsetStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitLsetStmt) {
            listener.exitLsetStmt(this);
        }
    };
    // @Override
    LsetStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitLsetStmt) {
            return visitor.visitLsetStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LsetStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LsetStmtContext = LsetStmtContext;
var MacroConstStmtContext = /** @class */ (function (_super) {
    __extends(MacroConstStmtContext, _super);
    function MacroConstStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MacroConstStmtContext.prototype.MACRO_CONST = function () { return this.getToken(vbaParser.MACRO_CONST, 0); };
    MacroConstStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    MacroConstStmtContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    MacroConstStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    MacroConstStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(MacroConstStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_macroConstStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MacroConstStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterMacroConstStmt) {
            listener.enterMacroConstStmt(this);
        }
    };
    // @Override
    MacroConstStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitMacroConstStmt) {
            listener.exitMacroConstStmt(this);
        }
    };
    // @Override
    MacroConstStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitMacroConstStmt) {
            return visitor.visitMacroConstStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MacroConstStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MacroConstStmtContext = MacroConstStmtContext;
var MacroIfThenElseStmtContext = /** @class */ (function (_super) {
    __extends(MacroIfThenElseStmtContext, _super);
    function MacroIfThenElseStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MacroIfThenElseStmtContext.prototype.macroIfBlockStmt = function () {
        return this.getRuleContext(0, MacroIfBlockStmtContext);
    };
    MacroIfThenElseStmtContext.prototype.MACRO_END_IF = function () { return this.getToken(vbaParser.MACRO_END_IF, 0); };
    MacroIfThenElseStmtContext.prototype.macroElseIfBlockStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(MacroElseIfBlockStmtContext);
        }
        else {
            return this.getRuleContext(i, MacroElseIfBlockStmtContext);
        }
    };
    MacroIfThenElseStmtContext.prototype.macroElseBlockStmt = function () {
        return this.tryGetRuleContext(0, MacroElseBlockStmtContext);
    };
    Object.defineProperty(MacroIfThenElseStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_macroIfThenElseStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MacroIfThenElseStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterMacroIfThenElseStmt) {
            listener.enterMacroIfThenElseStmt(this);
        }
    };
    // @Override
    MacroIfThenElseStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitMacroIfThenElseStmt) {
            listener.exitMacroIfThenElseStmt(this);
        }
    };
    // @Override
    MacroIfThenElseStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitMacroIfThenElseStmt) {
            return visitor.visitMacroIfThenElseStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MacroIfThenElseStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MacroIfThenElseStmtContext = MacroIfThenElseStmtContext;
var MacroIfBlockStmtContext = /** @class */ (function (_super) {
    __extends(MacroIfBlockStmtContext, _super);
    function MacroIfBlockStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MacroIfBlockStmtContext.prototype.MACRO_IF = function () { return this.getToken(vbaParser.MACRO_IF, 0); };
    MacroIfBlockStmtContext.prototype.ifConditionStmt = function () {
        return this.getRuleContext(0, IfConditionStmtContext);
    };
    MacroIfBlockStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    MacroIfBlockStmtContext.prototype.THEN = function () { return this.getToken(vbaParser.THEN, 0); };
    MacroIfBlockStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    MacroIfBlockStmtContext.prototype.moduleDeclarations = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ModuleDeclarationsContext);
        }
        else {
            return this.getRuleContext(i, ModuleDeclarationsContext);
        }
    };
    MacroIfBlockStmtContext.prototype.moduleBody = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ModuleBodyContext);
        }
        else {
            return this.getRuleContext(i, ModuleBodyContext);
        }
    };
    MacroIfBlockStmtContext.prototype.block = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockContext);
        }
        else {
            return this.getRuleContext(i, BlockContext);
        }
    };
    Object.defineProperty(MacroIfBlockStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_macroIfBlockStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MacroIfBlockStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterMacroIfBlockStmt) {
            listener.enterMacroIfBlockStmt(this);
        }
    };
    // @Override
    MacroIfBlockStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitMacroIfBlockStmt) {
            listener.exitMacroIfBlockStmt(this);
        }
    };
    // @Override
    MacroIfBlockStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitMacroIfBlockStmt) {
            return visitor.visitMacroIfBlockStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MacroIfBlockStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MacroIfBlockStmtContext = MacroIfBlockStmtContext;
var MacroElseIfBlockStmtContext = /** @class */ (function (_super) {
    __extends(MacroElseIfBlockStmtContext, _super);
    function MacroElseIfBlockStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MacroElseIfBlockStmtContext.prototype.MACRO_ELSEIF = function () { return this.getToken(vbaParser.MACRO_ELSEIF, 0); };
    MacroElseIfBlockStmtContext.prototype.ifConditionStmt = function () {
        return this.getRuleContext(0, IfConditionStmtContext);
    };
    MacroElseIfBlockStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    MacroElseIfBlockStmtContext.prototype.THEN = function () { return this.getToken(vbaParser.THEN, 0); };
    MacroElseIfBlockStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    MacroElseIfBlockStmtContext.prototype.moduleDeclarations = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ModuleDeclarationsContext);
        }
        else {
            return this.getRuleContext(i, ModuleDeclarationsContext);
        }
    };
    MacroElseIfBlockStmtContext.prototype.moduleBody = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ModuleBodyContext);
        }
        else {
            return this.getRuleContext(i, ModuleBodyContext);
        }
    };
    MacroElseIfBlockStmtContext.prototype.block = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockContext);
        }
        else {
            return this.getRuleContext(i, BlockContext);
        }
    };
    Object.defineProperty(MacroElseIfBlockStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_macroElseIfBlockStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MacroElseIfBlockStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterMacroElseIfBlockStmt) {
            listener.enterMacroElseIfBlockStmt(this);
        }
    };
    // @Override
    MacroElseIfBlockStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitMacroElseIfBlockStmt) {
            listener.exitMacroElseIfBlockStmt(this);
        }
    };
    // @Override
    MacroElseIfBlockStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitMacroElseIfBlockStmt) {
            return visitor.visitMacroElseIfBlockStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MacroElseIfBlockStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MacroElseIfBlockStmtContext = MacroElseIfBlockStmtContext;
var MacroElseBlockStmtContext = /** @class */ (function (_super) {
    __extends(MacroElseBlockStmtContext, _super);
    function MacroElseBlockStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MacroElseBlockStmtContext.prototype.MACRO_ELSE = function () { return this.getToken(vbaParser.MACRO_ELSE, 0); };
    MacroElseBlockStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    MacroElseBlockStmtContext.prototype.moduleDeclarations = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ModuleDeclarationsContext);
        }
        else {
            return this.getRuleContext(i, ModuleDeclarationsContext);
        }
    };
    MacroElseBlockStmtContext.prototype.moduleBody = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ModuleBodyContext);
        }
        else {
            return this.getRuleContext(i, ModuleBodyContext);
        }
    };
    MacroElseBlockStmtContext.prototype.block = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockContext);
        }
        else {
            return this.getRuleContext(i, BlockContext);
        }
    };
    Object.defineProperty(MacroElseBlockStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_macroElseBlockStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MacroElseBlockStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterMacroElseBlockStmt) {
            listener.enterMacroElseBlockStmt(this);
        }
    };
    // @Override
    MacroElseBlockStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitMacroElseBlockStmt) {
            listener.exitMacroElseBlockStmt(this);
        }
    };
    // @Override
    MacroElseBlockStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitMacroElseBlockStmt) {
            return visitor.visitMacroElseBlockStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MacroElseBlockStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MacroElseBlockStmtContext = MacroElseBlockStmtContext;
var MidStmtContext = /** @class */ (function (_super) {
    __extends(MidStmtContext, _super);
    function MidStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MidStmtContext.prototype.MID = function () { return this.getToken(vbaParser.MID, 0); };
    MidStmtContext.prototype.LPAREN = function () { return this.getToken(vbaParser.LPAREN, 0); };
    MidStmtContext.prototype.argsCall = function () {
        return this.getRuleContext(0, ArgsCallContext);
    };
    MidStmtContext.prototype.RPAREN = function () { return this.getToken(vbaParser.RPAREN, 0); };
    MidStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(MidStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_midStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MidStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterMidStmt) {
            listener.enterMidStmt(this);
        }
    };
    // @Override
    MidStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitMidStmt) {
            listener.exitMidStmt(this);
        }
    };
    // @Override
    MidStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitMidStmt) {
            return visitor.visitMidStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MidStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MidStmtContext = MidStmtContext;
var MkdirStmtContext = /** @class */ (function (_super) {
    __extends(MkdirStmtContext, _super);
    function MkdirStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MkdirStmtContext.prototype.MKDIR = function () { return this.getToken(vbaParser.MKDIR, 0); };
    MkdirStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    MkdirStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(MkdirStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_mkdirStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    MkdirStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterMkdirStmt) {
            listener.enterMkdirStmt(this);
        }
    };
    // @Override
    MkdirStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitMkdirStmt) {
            listener.exitMkdirStmt(this);
        }
    };
    // @Override
    MkdirStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitMkdirStmt) {
            return visitor.visitMkdirStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return MkdirStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MkdirStmtContext = MkdirStmtContext;
var NameStmtContext = /** @class */ (function (_super) {
    __extends(NameStmtContext, _super);
    function NameStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NameStmtContext.prototype.NAME = function () { return this.getToken(vbaParser.NAME, 0); };
    NameStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    NameStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    NameStmtContext.prototype.AS = function () { return this.getToken(vbaParser.AS, 0); };
    Object.defineProperty(NameStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_nameStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NameStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterNameStmt) {
            listener.enterNameStmt(this);
        }
    };
    // @Override
    NameStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitNameStmt) {
            listener.exitNameStmt(this);
        }
    };
    // @Override
    NameStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitNameStmt) {
            return visitor.visitNameStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NameStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NameStmtContext = NameStmtContext;
var OnErrorStmtContext = /** @class */ (function (_super) {
    __extends(OnErrorStmtContext, _super);
    function OnErrorStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OnErrorStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    OnErrorStmtContext.prototype.ON_ERROR = function () { return this.tryGetToken(vbaParser.ON_ERROR, 0); };
    OnErrorStmtContext.prototype.ON_LOCAL_ERROR = function () { return this.tryGetToken(vbaParser.ON_LOCAL_ERROR, 0); };
    OnErrorStmtContext.prototype.GOTO = function () { return this.tryGetToken(vbaParser.GOTO, 0); };
    OnErrorStmtContext.prototype.valueStmt = function () {
        return this.tryGetRuleContext(0, ValueStmtContext);
    };
    OnErrorStmtContext.prototype.RESUME = function () { return this.tryGetToken(vbaParser.RESUME, 0); };
    OnErrorStmtContext.prototype.NEXT = function () { return this.tryGetToken(vbaParser.NEXT, 0); };
    Object.defineProperty(OnErrorStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_onErrorStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OnErrorStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterOnErrorStmt) {
            listener.enterOnErrorStmt(this);
        }
    };
    // @Override
    OnErrorStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitOnErrorStmt) {
            listener.exitOnErrorStmt(this);
        }
    };
    // @Override
    OnErrorStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitOnErrorStmt) {
            return visitor.visitOnErrorStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OnErrorStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OnErrorStmtContext = OnErrorStmtContext;
var OnGoToStmtContext = /** @class */ (function (_super) {
    __extends(OnGoToStmtContext, _super);
    function OnGoToStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OnGoToStmtContext.prototype.ON = function () { return this.getToken(vbaParser.ON, 0); };
    OnGoToStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    OnGoToStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    OnGoToStmtContext.prototype.GOTO = function () { return this.getToken(vbaParser.GOTO, 0); };
    Object.defineProperty(OnGoToStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_onGoToStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OnGoToStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterOnGoToStmt) {
            listener.enterOnGoToStmt(this);
        }
    };
    // @Override
    OnGoToStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitOnGoToStmt) {
            listener.exitOnGoToStmt(this);
        }
    };
    // @Override
    OnGoToStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitOnGoToStmt) {
            return visitor.visitOnGoToStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OnGoToStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OnGoToStmtContext = OnGoToStmtContext;
var OnGoSubStmtContext = /** @class */ (function (_super) {
    __extends(OnGoSubStmtContext, _super);
    function OnGoSubStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OnGoSubStmtContext.prototype.ON = function () { return this.getToken(vbaParser.ON, 0); };
    OnGoSubStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    OnGoSubStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    OnGoSubStmtContext.prototype.GOSUB = function () { return this.getToken(vbaParser.GOSUB, 0); };
    Object.defineProperty(OnGoSubStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_onGoSubStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OnGoSubStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterOnGoSubStmt) {
            listener.enterOnGoSubStmt(this);
        }
    };
    // @Override
    OnGoSubStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitOnGoSubStmt) {
            listener.exitOnGoSubStmt(this);
        }
    };
    // @Override
    OnGoSubStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitOnGoSubStmt) {
            return visitor.visitOnGoSubStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OnGoSubStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OnGoSubStmtContext = OnGoSubStmtContext;
var OpenStmtContext = /** @class */ (function (_super) {
    __extends(OpenStmtContext, _super);
    function OpenStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OpenStmtContext.prototype.OPEN = function () { return this.getToken(vbaParser.OPEN, 0); };
    OpenStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    OpenStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    OpenStmtContext.prototype.FOR = function () { return this.getToken(vbaParser.FOR, 0); };
    OpenStmtContext.prototype.AS = function () { return this.getToken(vbaParser.AS, 0); };
    OpenStmtContext.prototype.fileNumber = function () {
        return this.getRuleContext(0, FileNumberContext);
    };
    OpenStmtContext.prototype.APPEND = function () { return this.tryGetToken(vbaParser.APPEND, 0); };
    OpenStmtContext.prototype.BINARY = function () { return this.tryGetToken(vbaParser.BINARY, 0); };
    OpenStmtContext.prototype.INPUT = function () { return this.tryGetToken(vbaParser.INPUT, 0); };
    OpenStmtContext.prototype.OUTPUT = function () { return this.tryGetToken(vbaParser.OUTPUT, 0); };
    OpenStmtContext.prototype.RANDOM = function () { return this.tryGetToken(vbaParser.RANDOM, 0); };
    OpenStmtContext.prototype.ACCESS = function () { return this.tryGetToken(vbaParser.ACCESS, 0); };
    OpenStmtContext.prototype.LEN = function () { return this.tryGetToken(vbaParser.LEN, 0); };
    OpenStmtContext.prototype.EQ = function () { return this.tryGetToken(vbaParser.EQ, 0); };
    OpenStmtContext.prototype.READ = function () { return this.tryGetToken(vbaParser.READ, 0); };
    OpenStmtContext.prototype.WRITE = function () { return this.tryGetToken(vbaParser.WRITE, 0); };
    OpenStmtContext.prototype.READ_WRITE = function () { return this.tryGetToken(vbaParser.READ_WRITE, 0); };
    OpenStmtContext.prototype.SHARED = function () { return this.tryGetToken(vbaParser.SHARED, 0); };
    OpenStmtContext.prototype.LOCK_READ = function () { return this.tryGetToken(vbaParser.LOCK_READ, 0); };
    OpenStmtContext.prototype.LOCK_WRITE = function () { return this.tryGetToken(vbaParser.LOCK_WRITE, 0); };
    OpenStmtContext.prototype.LOCK_READ_WRITE = function () { return this.tryGetToken(vbaParser.LOCK_READ_WRITE, 0); };
    Object.defineProperty(OpenStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_openStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OpenStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterOpenStmt) {
            listener.enterOpenStmt(this);
        }
    };
    // @Override
    OpenStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitOpenStmt) {
            listener.exitOpenStmt(this);
        }
    };
    // @Override
    OpenStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitOpenStmt) {
            return visitor.visitOpenStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OpenStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OpenStmtContext = OpenStmtContext;
var OutputListContext = /** @class */ (function (_super) {
    __extends(OutputListContext, _super);
    function OutputListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OutputListContext.prototype.outputList_Expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OutputList_ExpressionContext);
        }
        else {
            return this.getRuleContext(i, OutputList_ExpressionContext);
        }
    };
    OutputListContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(OutputListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_outputList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OutputListContext.prototype.enterRule = function (listener) {
        if (listener.enterOutputList) {
            listener.enterOutputList(this);
        }
    };
    // @Override
    OutputListContext.prototype.exitRule = function (listener) {
        if (listener.exitOutputList) {
            listener.exitOutputList(this);
        }
    };
    // @Override
    OutputListContext.prototype.accept = function (visitor) {
        if (visitor.visitOutputList) {
            return visitor.visitOutputList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OutputListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OutputListContext = OutputListContext;
var OutputList_ExpressionContext = /** @class */ (function (_super) {
    __extends(OutputList_ExpressionContext, _super);
    function OutputList_ExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OutputList_ExpressionContext.prototype.valueStmt = function () {
        return this.tryGetRuleContext(0, ValueStmtContext);
    };
    OutputList_ExpressionContext.prototype.SPC = function () { return this.tryGetToken(vbaParser.SPC, 0); };
    OutputList_ExpressionContext.prototype.TAB = function () { return this.tryGetToken(vbaParser.TAB, 0); };
    OutputList_ExpressionContext.prototype.LPAREN = function () { return this.tryGetToken(vbaParser.LPAREN, 0); };
    OutputList_ExpressionContext.prototype.argsCall = function () {
        return this.tryGetRuleContext(0, ArgsCallContext);
    };
    OutputList_ExpressionContext.prototype.RPAREN = function () { return this.tryGetToken(vbaParser.RPAREN, 0); };
    OutputList_ExpressionContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(OutputList_ExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_outputList_Expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    OutputList_ExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterOutputList_Expression) {
            listener.enterOutputList_Expression(this);
        }
    };
    // @Override
    OutputList_ExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitOutputList_Expression) {
            listener.exitOutputList_Expression(this);
        }
    };
    // @Override
    OutputList_ExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitOutputList_Expression) {
            return visitor.visitOutputList_Expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return OutputList_ExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OutputList_ExpressionContext = OutputList_ExpressionContext;
var PrintStmtContext = /** @class */ (function (_super) {
    __extends(PrintStmtContext, _super);
    function PrintStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrintStmtContext.prototype.PRINT = function () { return this.getToken(vbaParser.PRINT, 0); };
    PrintStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    PrintStmtContext.prototype.fileNumber = function () {
        return this.getRuleContext(0, FileNumberContext);
    };
    PrintStmtContext.prototype.outputList = function () {
        return this.tryGetRuleContext(0, OutputListContext);
    };
    Object.defineProperty(PrintStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_printStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrintStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterPrintStmt) {
            listener.enterPrintStmt(this);
        }
    };
    // @Override
    PrintStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitPrintStmt) {
            listener.exitPrintStmt(this);
        }
    };
    // @Override
    PrintStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitPrintStmt) {
            return visitor.visitPrintStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrintStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrintStmtContext = PrintStmtContext;
var PropertyGetStmtContext = /** @class */ (function (_super) {
    __extends(PropertyGetStmtContext, _super);
    function PropertyGetStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PropertyGetStmtContext.prototype.PROPERTY_GET = function () { return this.getToken(vbaParser.PROPERTY_GET, 0); };
    PropertyGetStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    PropertyGetStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    PropertyGetStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    PropertyGetStmtContext.prototype.END_PROPERTY = function () { return this.getToken(vbaParser.END_PROPERTY, 0); };
    PropertyGetStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    PropertyGetStmtContext.prototype.STATIC = function () { return this.tryGetToken(vbaParser.STATIC, 0); };
    PropertyGetStmtContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    PropertyGetStmtContext.prototype.argList = function () {
        return this.tryGetRuleContext(0, ArgListContext);
    };
    PropertyGetStmtContext.prototype.asTypeClause = function () {
        return this.tryGetRuleContext(0, AsTypeClauseContext);
    };
    PropertyGetStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(PropertyGetStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_propertyGetStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PropertyGetStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterPropertyGetStmt) {
            listener.enterPropertyGetStmt(this);
        }
    };
    // @Override
    PropertyGetStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitPropertyGetStmt) {
            listener.exitPropertyGetStmt(this);
        }
    };
    // @Override
    PropertyGetStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitPropertyGetStmt) {
            return visitor.visitPropertyGetStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PropertyGetStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PropertyGetStmtContext = PropertyGetStmtContext;
var PropertySetStmtContext = /** @class */ (function (_super) {
    __extends(PropertySetStmtContext, _super);
    function PropertySetStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PropertySetStmtContext.prototype.PROPERTY_SET = function () { return this.getToken(vbaParser.PROPERTY_SET, 0); };
    PropertySetStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    PropertySetStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    PropertySetStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    PropertySetStmtContext.prototype.END_PROPERTY = function () { return this.getToken(vbaParser.END_PROPERTY, 0); };
    PropertySetStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    PropertySetStmtContext.prototype.STATIC = function () { return this.tryGetToken(vbaParser.STATIC, 0); };
    PropertySetStmtContext.prototype.argList = function () {
        return this.tryGetRuleContext(0, ArgListContext);
    };
    PropertySetStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(PropertySetStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_propertySetStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PropertySetStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterPropertySetStmt) {
            listener.enterPropertySetStmt(this);
        }
    };
    // @Override
    PropertySetStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitPropertySetStmt) {
            listener.exitPropertySetStmt(this);
        }
    };
    // @Override
    PropertySetStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitPropertySetStmt) {
            return visitor.visitPropertySetStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PropertySetStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PropertySetStmtContext = PropertySetStmtContext;
var PropertyLetStmtContext = /** @class */ (function (_super) {
    __extends(PropertyLetStmtContext, _super);
    function PropertyLetStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PropertyLetStmtContext.prototype.PROPERTY_LET = function () { return this.getToken(vbaParser.PROPERTY_LET, 0); };
    PropertyLetStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    PropertyLetStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    PropertyLetStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    PropertyLetStmtContext.prototype.END_PROPERTY = function () { return this.getToken(vbaParser.END_PROPERTY, 0); };
    PropertyLetStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    PropertyLetStmtContext.prototype.STATIC = function () { return this.tryGetToken(vbaParser.STATIC, 0); };
    PropertyLetStmtContext.prototype.argList = function () {
        return this.tryGetRuleContext(0, ArgListContext);
    };
    PropertyLetStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(PropertyLetStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_propertyLetStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PropertyLetStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterPropertyLetStmt) {
            listener.enterPropertyLetStmt(this);
        }
    };
    // @Override
    PropertyLetStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitPropertyLetStmt) {
            listener.exitPropertyLetStmt(this);
        }
    };
    // @Override
    PropertyLetStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitPropertyLetStmt) {
            return visitor.visitPropertyLetStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PropertyLetStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PropertyLetStmtContext = PropertyLetStmtContext;
var PutStmtContext = /** @class */ (function (_super) {
    __extends(PutStmtContext, _super);
    function PutStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PutStmtContext.prototype.PUT = function () { return this.getToken(vbaParser.PUT, 0); };
    PutStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    PutStmtContext.prototype.fileNumber = function () {
        return this.getRuleContext(0, FileNumberContext);
    };
    PutStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(PutStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_putStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PutStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterPutStmt) {
            listener.enterPutStmt(this);
        }
    };
    // @Override
    PutStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitPutStmt) {
            listener.exitPutStmt(this);
        }
    };
    // @Override
    PutStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitPutStmt) {
            return visitor.visitPutStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PutStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PutStmtContext = PutStmtContext;
var RaiseEventStmtContext = /** @class */ (function (_super) {
    __extends(RaiseEventStmtContext, _super);
    function RaiseEventStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RaiseEventStmtContext.prototype.RAISEEVENT = function () { return this.getToken(vbaParser.RAISEEVENT, 0); };
    RaiseEventStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    RaiseEventStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    RaiseEventStmtContext.prototype.LPAREN = function () { return this.tryGetToken(vbaParser.LPAREN, 0); };
    RaiseEventStmtContext.prototype.RPAREN = function () { return this.tryGetToken(vbaParser.RPAREN, 0); };
    RaiseEventStmtContext.prototype.argsCall = function () {
        return this.tryGetRuleContext(0, ArgsCallContext);
    };
    Object.defineProperty(RaiseEventStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_raiseEventStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RaiseEventStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterRaiseEventStmt) {
            listener.enterRaiseEventStmt(this);
        }
    };
    // @Override
    RaiseEventStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitRaiseEventStmt) {
            listener.exitRaiseEventStmt(this);
        }
    };
    // @Override
    RaiseEventStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitRaiseEventStmt) {
            return visitor.visitRaiseEventStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RaiseEventStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RaiseEventStmtContext = RaiseEventStmtContext;
var RandomizeStmtContext = /** @class */ (function (_super) {
    __extends(RandomizeStmtContext, _super);
    function RandomizeStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RandomizeStmtContext.prototype.RANDOMIZE = function () { return this.getToken(vbaParser.RANDOMIZE, 0); };
    RandomizeStmtContext.prototype.WS = function () { return this.tryGetToken(vbaParser.WS, 0); };
    RandomizeStmtContext.prototype.valueStmt = function () {
        return this.tryGetRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(RandomizeStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_randomizeStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RandomizeStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterRandomizeStmt) {
            listener.enterRandomizeStmt(this);
        }
    };
    // @Override
    RandomizeStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitRandomizeStmt) {
            listener.exitRandomizeStmt(this);
        }
    };
    // @Override
    RandomizeStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitRandomizeStmt) {
            return visitor.visitRandomizeStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RandomizeStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RandomizeStmtContext = RandomizeStmtContext;
var RedimStmtContext = /** @class */ (function (_super) {
    __extends(RedimStmtContext, _super);
    function RedimStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RedimStmtContext.prototype.REDIM = function () { return this.getToken(vbaParser.REDIM, 0); };
    RedimStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    RedimStmtContext.prototype.redimSubStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(RedimSubStmtContext);
        }
        else {
            return this.getRuleContext(i, RedimSubStmtContext);
        }
    };
    RedimStmtContext.prototype.PRESERVE = function () { return this.tryGetToken(vbaParser.PRESERVE, 0); };
    Object.defineProperty(RedimStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_redimStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RedimStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterRedimStmt) {
            listener.enterRedimStmt(this);
        }
    };
    // @Override
    RedimStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitRedimStmt) {
            listener.exitRedimStmt(this);
        }
    };
    // @Override
    RedimStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitRedimStmt) {
            return visitor.visitRedimStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RedimStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RedimStmtContext = RedimStmtContext;
var RedimSubStmtContext = /** @class */ (function (_super) {
    __extends(RedimSubStmtContext, _super);
    function RedimSubStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RedimSubStmtContext.prototype.implicitCallStmt_InStmt = function () {
        return this.getRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    RedimSubStmtContext.prototype.LPAREN = function () { return this.getToken(vbaParser.LPAREN, 0); };
    RedimSubStmtContext.prototype.subscripts = function () {
        return this.getRuleContext(0, SubscriptsContext);
    };
    RedimSubStmtContext.prototype.RPAREN = function () { return this.getToken(vbaParser.RPAREN, 0); };
    RedimSubStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    RedimSubStmtContext.prototype.asTypeClause = function () {
        return this.tryGetRuleContext(0, AsTypeClauseContext);
    };
    Object.defineProperty(RedimSubStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_redimSubStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RedimSubStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterRedimSubStmt) {
            listener.enterRedimSubStmt(this);
        }
    };
    // @Override
    RedimSubStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitRedimSubStmt) {
            listener.exitRedimSubStmt(this);
        }
    };
    // @Override
    RedimSubStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitRedimSubStmt) {
            return visitor.visitRedimSubStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RedimSubStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RedimSubStmtContext = RedimSubStmtContext;
var ResetStmtContext = /** @class */ (function (_super) {
    __extends(ResetStmtContext, _super);
    function ResetStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ResetStmtContext.prototype.RESET = function () { return this.getToken(vbaParser.RESET, 0); };
    Object.defineProperty(ResetStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_resetStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ResetStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterResetStmt) {
            listener.enterResetStmt(this);
        }
    };
    // @Override
    ResetStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitResetStmt) {
            listener.exitResetStmt(this);
        }
    };
    // @Override
    ResetStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitResetStmt) {
            return visitor.visitResetStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ResetStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ResetStmtContext = ResetStmtContext;
var ResumeStmtContext = /** @class */ (function (_super) {
    __extends(ResumeStmtContext, _super);
    function ResumeStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ResumeStmtContext.prototype.RESUME = function () { return this.getToken(vbaParser.RESUME, 0); };
    ResumeStmtContext.prototype.WS = function () { return this.tryGetToken(vbaParser.WS, 0); };
    ResumeStmtContext.prototype.NEXT = function () { return this.tryGetToken(vbaParser.NEXT, 0); };
    ResumeStmtContext.prototype.ambiguousIdentifier = function () {
        return this.tryGetRuleContext(0, AmbiguousIdentifierContext);
    };
    Object.defineProperty(ResumeStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_resumeStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ResumeStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterResumeStmt) {
            listener.enterResumeStmt(this);
        }
    };
    // @Override
    ResumeStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitResumeStmt) {
            listener.exitResumeStmt(this);
        }
    };
    // @Override
    ResumeStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitResumeStmt) {
            return visitor.visitResumeStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ResumeStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ResumeStmtContext = ResumeStmtContext;
var ReturnStmtContext = /** @class */ (function (_super) {
    __extends(ReturnStmtContext, _super);
    function ReturnStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ReturnStmtContext.prototype.RETURN = function () { return this.getToken(vbaParser.RETURN, 0); };
    Object.defineProperty(ReturnStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_returnStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ReturnStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterReturnStmt) {
            listener.enterReturnStmt(this);
        }
    };
    // @Override
    ReturnStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitReturnStmt) {
            listener.exitReturnStmt(this);
        }
    };
    // @Override
    ReturnStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitReturnStmt) {
            return visitor.visitReturnStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ReturnStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ReturnStmtContext = ReturnStmtContext;
var RmdirStmtContext = /** @class */ (function (_super) {
    __extends(RmdirStmtContext, _super);
    function RmdirStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RmdirStmtContext.prototype.RMDIR = function () { return this.getToken(vbaParser.RMDIR, 0); };
    RmdirStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    RmdirStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(RmdirStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_rmdirStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RmdirStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterRmdirStmt) {
            listener.enterRmdirStmt(this);
        }
    };
    // @Override
    RmdirStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitRmdirStmt) {
            listener.exitRmdirStmt(this);
        }
    };
    // @Override
    RmdirStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitRmdirStmt) {
            return visitor.visitRmdirStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RmdirStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RmdirStmtContext = RmdirStmtContext;
var RsetStmtContext = /** @class */ (function (_super) {
    __extends(RsetStmtContext, _super);
    function RsetStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RsetStmtContext.prototype.RSET = function () { return this.getToken(vbaParser.RSET, 0); };
    RsetStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    RsetStmtContext.prototype.implicitCallStmt_InStmt = function () {
        return this.getRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    RsetStmtContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    RsetStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(RsetStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_rsetStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RsetStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterRsetStmt) {
            listener.enterRsetStmt(this);
        }
    };
    // @Override
    RsetStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitRsetStmt) {
            listener.exitRsetStmt(this);
        }
    };
    // @Override
    RsetStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitRsetStmt) {
            return visitor.visitRsetStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RsetStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RsetStmtContext = RsetStmtContext;
var SavepictureStmtContext = /** @class */ (function (_super) {
    __extends(SavepictureStmtContext, _super);
    function SavepictureStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SavepictureStmtContext.prototype.SAVEPICTURE = function () { return this.getToken(vbaParser.SAVEPICTURE, 0); };
    SavepictureStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    SavepictureStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(SavepictureStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_savepictureStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SavepictureStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterSavepictureStmt) {
            listener.enterSavepictureStmt(this);
        }
    };
    // @Override
    SavepictureStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitSavepictureStmt) {
            listener.exitSavepictureStmt(this);
        }
    };
    // @Override
    SavepictureStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitSavepictureStmt) {
            return visitor.visitSavepictureStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SavepictureStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SavepictureStmtContext = SavepictureStmtContext;
var SaveSettingStmtContext = /** @class */ (function (_super) {
    __extends(SaveSettingStmtContext, _super);
    function SaveSettingStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SaveSettingStmtContext.prototype.SAVESETTING = function () { return this.getToken(vbaParser.SAVESETTING, 0); };
    SaveSettingStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    SaveSettingStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(SaveSettingStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_saveSettingStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SaveSettingStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterSaveSettingStmt) {
            listener.enterSaveSettingStmt(this);
        }
    };
    // @Override
    SaveSettingStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitSaveSettingStmt) {
            listener.exitSaveSettingStmt(this);
        }
    };
    // @Override
    SaveSettingStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitSaveSettingStmt) {
            return visitor.visitSaveSettingStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SaveSettingStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SaveSettingStmtContext = SaveSettingStmtContext;
var SeekStmtContext = /** @class */ (function (_super) {
    __extends(SeekStmtContext, _super);
    function SeekStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SeekStmtContext.prototype.SEEK = function () { return this.getToken(vbaParser.SEEK, 0); };
    SeekStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    SeekStmtContext.prototype.fileNumber = function () {
        return this.getRuleContext(0, FileNumberContext);
    };
    SeekStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(SeekStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_seekStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SeekStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterSeekStmt) {
            listener.enterSeekStmt(this);
        }
    };
    // @Override
    SeekStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitSeekStmt) {
            listener.exitSeekStmt(this);
        }
    };
    // @Override
    SeekStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitSeekStmt) {
            return visitor.visitSeekStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SeekStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SeekStmtContext = SeekStmtContext;
var SelectCaseStmtContext = /** @class */ (function (_super) {
    __extends(SelectCaseStmtContext, _super);
    function SelectCaseStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SelectCaseStmtContext.prototype.SELECT = function () { return this.getToken(vbaParser.SELECT, 0); };
    SelectCaseStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    SelectCaseStmtContext.prototype.CASE = function () { return this.getToken(vbaParser.CASE, 0); };
    SelectCaseStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    SelectCaseStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    SelectCaseStmtContext.prototype.END_SELECT = function () { return this.getToken(vbaParser.END_SELECT, 0); };
    SelectCaseStmtContext.prototype.sC_Case = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SC_CaseContext);
        }
        else {
            return this.getRuleContext(i, SC_CaseContext);
        }
    };
    Object.defineProperty(SelectCaseStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_selectCaseStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SelectCaseStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterSelectCaseStmt) {
            listener.enterSelectCaseStmt(this);
        }
    };
    // @Override
    SelectCaseStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitSelectCaseStmt) {
            listener.exitSelectCaseStmt(this);
        }
    };
    // @Override
    SelectCaseStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitSelectCaseStmt) {
            return visitor.visitSelectCaseStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SelectCaseStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SelectCaseStmtContext = SelectCaseStmtContext;
var SC_SelectionContext = /** @class */ (function (_super) {
    __extends(SC_SelectionContext, _super);
    function SC_SelectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(SC_SelectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_sC_Selection; },
        enumerable: true,
        configurable: true
    });
    SC_SelectionContext.prototype.copyFrom = function (ctx) {
        _super.prototype.copyFrom.call(this, ctx);
    };
    return SC_SelectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SC_SelectionContext = SC_SelectionContext;
var CaseCondIsContext = /** @class */ (function (_super) {
    __extends(CaseCondIsContext, _super);
    function CaseCondIsContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    CaseCondIsContext.prototype.IS = function () { return this.getToken(vbaParser.IS, 0); };
    CaseCondIsContext.prototype.comparisonOperator = function () {
        return this.getRuleContext(0, ComparisonOperatorContext);
    };
    CaseCondIsContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    CaseCondIsContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    CaseCondIsContext.prototype.enterRule = function (listener) {
        if (listener.enterCaseCondIs) {
            listener.enterCaseCondIs(this);
        }
    };
    // @Override
    CaseCondIsContext.prototype.exitRule = function (listener) {
        if (listener.exitCaseCondIs) {
            listener.exitCaseCondIs(this);
        }
    };
    // @Override
    CaseCondIsContext.prototype.accept = function (visitor) {
        if (visitor.visitCaseCondIs) {
            return visitor.visitCaseCondIs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CaseCondIsContext;
}(SC_SelectionContext));
exports.CaseCondIsContext = CaseCondIsContext;
var CaseCondToContext = /** @class */ (function (_super) {
    __extends(CaseCondToContext, _super);
    function CaseCondToContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    CaseCondToContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    CaseCondToContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    CaseCondToContext.prototype.TO = function () { return this.getToken(vbaParser.TO, 0); };
    // @Override
    CaseCondToContext.prototype.enterRule = function (listener) {
        if (listener.enterCaseCondTo) {
            listener.enterCaseCondTo(this);
        }
    };
    // @Override
    CaseCondToContext.prototype.exitRule = function (listener) {
        if (listener.exitCaseCondTo) {
            listener.exitCaseCondTo(this);
        }
    };
    // @Override
    CaseCondToContext.prototype.accept = function (visitor) {
        if (visitor.visitCaseCondTo) {
            return visitor.visitCaseCondTo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CaseCondToContext;
}(SC_SelectionContext));
exports.CaseCondToContext = CaseCondToContext;
var CaseCondValueContext = /** @class */ (function (_super) {
    __extends(CaseCondValueContext, _super);
    function CaseCondValueContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    CaseCondValueContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    // @Override
    CaseCondValueContext.prototype.enterRule = function (listener) {
        if (listener.enterCaseCondValue) {
            listener.enterCaseCondValue(this);
        }
    };
    // @Override
    CaseCondValueContext.prototype.exitRule = function (listener) {
        if (listener.exitCaseCondValue) {
            listener.exitCaseCondValue(this);
        }
    };
    // @Override
    CaseCondValueContext.prototype.accept = function (visitor) {
        if (visitor.visitCaseCondValue) {
            return visitor.visitCaseCondValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CaseCondValueContext;
}(SC_SelectionContext));
exports.CaseCondValueContext = CaseCondValueContext;
var SC_CaseContext = /** @class */ (function (_super) {
    __extends(SC_CaseContext, _super);
    function SC_CaseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SC_CaseContext.prototype.CASE = function () { return this.getToken(vbaParser.CASE, 0); };
    SC_CaseContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    SC_CaseContext.prototype.sC_Cond = function () {
        return this.getRuleContext(0, SC_CondContext);
    };
    SC_CaseContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    SC_CaseContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(SC_CaseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_sC_Case; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SC_CaseContext.prototype.enterRule = function (listener) {
        if (listener.enterSC_Case) {
            listener.enterSC_Case(this);
        }
    };
    // @Override
    SC_CaseContext.prototype.exitRule = function (listener) {
        if (listener.exitSC_Case) {
            listener.exitSC_Case(this);
        }
    };
    // @Override
    SC_CaseContext.prototype.accept = function (visitor) {
        if (visitor.visitSC_Case) {
            return visitor.visitSC_Case(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SC_CaseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SC_CaseContext = SC_CaseContext;
var SC_CondContext = /** @class */ (function (_super) {
    __extends(SC_CondContext, _super);
    function SC_CondContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(SC_CondContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_sC_Cond; },
        enumerable: true,
        configurable: true
    });
    SC_CondContext.prototype.copyFrom = function (ctx) {
        _super.prototype.copyFrom.call(this, ctx);
    };
    return SC_CondContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SC_CondContext = SC_CondContext;
var CaseCondElseContext = /** @class */ (function (_super) {
    __extends(CaseCondElseContext, _super);
    function CaseCondElseContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    CaseCondElseContext.prototype.ELSE = function () { return this.getToken(vbaParser.ELSE, 0); };
    // @Override
    CaseCondElseContext.prototype.enterRule = function (listener) {
        if (listener.enterCaseCondElse) {
            listener.enterCaseCondElse(this);
        }
    };
    // @Override
    CaseCondElseContext.prototype.exitRule = function (listener) {
        if (listener.exitCaseCondElse) {
            listener.exitCaseCondElse(this);
        }
    };
    // @Override
    CaseCondElseContext.prototype.accept = function (visitor) {
        if (visitor.visitCaseCondElse) {
            return visitor.visitCaseCondElse(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CaseCondElseContext;
}(SC_CondContext));
exports.CaseCondElseContext = CaseCondElseContext;
var CaseCondSelectionContext = /** @class */ (function (_super) {
    __extends(CaseCondSelectionContext, _super);
    function CaseCondSelectionContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    CaseCondSelectionContext.prototype.sC_Selection = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SC_SelectionContext);
        }
        else {
            return this.getRuleContext(i, SC_SelectionContext);
        }
    };
    CaseCondSelectionContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    CaseCondSelectionContext.prototype.enterRule = function (listener) {
        if (listener.enterCaseCondSelection) {
            listener.enterCaseCondSelection(this);
        }
    };
    // @Override
    CaseCondSelectionContext.prototype.exitRule = function (listener) {
        if (listener.exitCaseCondSelection) {
            listener.exitCaseCondSelection(this);
        }
    };
    // @Override
    CaseCondSelectionContext.prototype.accept = function (visitor) {
        if (visitor.visitCaseCondSelection) {
            return visitor.visitCaseCondSelection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CaseCondSelectionContext;
}(SC_CondContext));
exports.CaseCondSelectionContext = CaseCondSelectionContext;
var SendkeysStmtContext = /** @class */ (function (_super) {
    __extends(SendkeysStmtContext, _super);
    function SendkeysStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SendkeysStmtContext.prototype.SENDKEYS = function () { return this.getToken(vbaParser.SENDKEYS, 0); };
    SendkeysStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    SendkeysStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(SendkeysStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_sendkeysStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SendkeysStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterSendkeysStmt) {
            listener.enterSendkeysStmt(this);
        }
    };
    // @Override
    SendkeysStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitSendkeysStmt) {
            listener.exitSendkeysStmt(this);
        }
    };
    // @Override
    SendkeysStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitSendkeysStmt) {
            return visitor.visitSendkeysStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SendkeysStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SendkeysStmtContext = SendkeysStmtContext;
var SetattrStmtContext = /** @class */ (function (_super) {
    __extends(SetattrStmtContext, _super);
    function SetattrStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SetattrStmtContext.prototype.SETATTR = function () { return this.getToken(vbaParser.SETATTR, 0); };
    SetattrStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    SetattrStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    Object.defineProperty(SetattrStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_setattrStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SetattrStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterSetattrStmt) {
            listener.enterSetattrStmt(this);
        }
    };
    // @Override
    SetattrStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitSetattrStmt) {
            listener.exitSetattrStmt(this);
        }
    };
    // @Override
    SetattrStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitSetattrStmt) {
            return visitor.visitSetattrStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SetattrStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SetattrStmtContext = SetattrStmtContext;
var SetStmtContext = /** @class */ (function (_super) {
    __extends(SetStmtContext, _super);
    function SetStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SetStmtContext.prototype.SET = function () { return this.getToken(vbaParser.SET, 0); };
    SetStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    SetStmtContext.prototype.implicitCallStmt_InStmt = function () {
        return this.getRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    SetStmtContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    SetStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(SetStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_setStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SetStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterSetStmt) {
            listener.enterSetStmt(this);
        }
    };
    // @Override
    SetStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitSetStmt) {
            listener.exitSetStmt(this);
        }
    };
    // @Override
    SetStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitSetStmt) {
            return visitor.visitSetStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SetStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SetStmtContext = SetStmtContext;
var StopStmtContext = /** @class */ (function (_super) {
    __extends(StopStmtContext, _super);
    function StopStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StopStmtContext.prototype.STOP = function () { return this.getToken(vbaParser.STOP, 0); };
    Object.defineProperty(StopStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_stopStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StopStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterStopStmt) {
            listener.enterStopStmt(this);
        }
    };
    // @Override
    StopStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitStopStmt) {
            listener.exitStopStmt(this);
        }
    };
    // @Override
    StopStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitStopStmt) {
            return visitor.visitStopStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StopStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StopStmtContext = StopStmtContext;
var SubStmtContext = /** @class */ (function (_super) {
    __extends(SubStmtContext, _super);
    function SubStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubStmtContext.prototype.SUB = function () { return this.getToken(vbaParser.SUB, 0); };
    SubStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    SubStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    SubStmtContext.prototype.END_SUB = function () { return this.getToken(vbaParser.END_SUB, 0); };
    SubStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    SubStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    SubStmtContext.prototype.STATIC = function () { return this.tryGetToken(vbaParser.STATIC, 0); };
    SubStmtContext.prototype.argList = function () {
        return this.tryGetRuleContext(0, ArgListContext);
    };
    SubStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(SubStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_subStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterSubStmt) {
            listener.enterSubStmt(this);
        }
    };
    // @Override
    SubStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitSubStmt) {
            listener.exitSubStmt(this);
        }
    };
    // @Override
    SubStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitSubStmt) {
            return visitor.visitSubStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubStmtContext = SubStmtContext;
var TimeStmtContext = /** @class */ (function (_super) {
    __extends(TimeStmtContext, _super);
    function TimeStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TimeStmtContext.prototype.TIME = function () { return this.getToken(vbaParser.TIME, 0); };
    TimeStmtContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    TimeStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    TimeStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(TimeStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_timeStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TimeStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterTimeStmt) {
            listener.enterTimeStmt(this);
        }
    };
    // @Override
    TimeStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitTimeStmt) {
            listener.exitTimeStmt(this);
        }
    };
    // @Override
    TimeStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitTimeStmt) {
            return visitor.visitTimeStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TimeStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TimeStmtContext = TimeStmtContext;
var TypeStmtContext = /** @class */ (function (_super) {
    __extends(TypeStmtContext, _super);
    function TypeStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeStmtContext.prototype.TYPE = function () { return this.getToken(vbaParser.TYPE, 0); };
    TypeStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    TypeStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    TypeStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    TypeStmtContext.prototype.END_TYPE = function () { return this.getToken(vbaParser.END_TYPE, 0); };
    TypeStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    TypeStmtContext.prototype.typeStmt_Element = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeStmt_ElementContext);
        }
        else {
            return this.getRuleContext(i, TypeStmt_ElementContext);
        }
    };
    Object.defineProperty(TypeStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_typeStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeStmt) {
            listener.enterTypeStmt(this);
        }
    };
    // @Override
    TypeStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeStmt) {
            listener.exitTypeStmt(this);
        }
    };
    // @Override
    TypeStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeStmt) {
            return visitor.visitTypeStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeStmtContext = TypeStmtContext;
var TypeStmt_ElementContext = /** @class */ (function (_super) {
    __extends(TypeStmt_ElementContext, _super);
    function TypeStmt_ElementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeStmt_ElementContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    TypeStmt_ElementContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    TypeStmt_ElementContext.prototype.LPAREN = function () { return this.tryGetToken(vbaParser.LPAREN, 0); };
    TypeStmt_ElementContext.prototype.RPAREN = function () { return this.tryGetToken(vbaParser.RPAREN, 0); };
    TypeStmt_ElementContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    TypeStmt_ElementContext.prototype.asTypeClause = function () {
        return this.tryGetRuleContext(0, AsTypeClauseContext);
    };
    TypeStmt_ElementContext.prototype.subscripts = function () {
        return this.tryGetRuleContext(0, SubscriptsContext);
    };
    Object.defineProperty(TypeStmt_ElementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_typeStmt_Element; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeStmt_ElementContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeStmt_Element) {
            listener.enterTypeStmt_Element(this);
        }
    };
    // @Override
    TypeStmt_ElementContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeStmt_Element) {
            listener.exitTypeStmt_Element(this);
        }
    };
    // @Override
    TypeStmt_ElementContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeStmt_Element) {
            return visitor.visitTypeStmt_Element(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeStmt_ElementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeStmt_ElementContext = TypeStmt_ElementContext;
var TypeOfStmtContext = /** @class */ (function (_super) {
    __extends(TypeOfStmtContext, _super);
    function TypeOfStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeOfStmtContext.prototype.TYPEOF = function () { return this.getToken(vbaParser.TYPEOF, 0); };
    TypeOfStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    TypeOfStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    TypeOfStmtContext.prototype.IS = function () { return this.tryGetToken(vbaParser.IS, 0); };
    TypeOfStmtContext.prototype.type = function () {
        return this.tryGetRuleContext(0, TypeContext);
    };
    Object.defineProperty(TypeOfStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_typeOfStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeOfStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeOfStmt) {
            listener.enterTypeOfStmt(this);
        }
    };
    // @Override
    TypeOfStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeOfStmt) {
            listener.exitTypeOfStmt(this);
        }
    };
    // @Override
    TypeOfStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeOfStmt) {
            return visitor.visitTypeOfStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeOfStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeOfStmtContext = TypeOfStmtContext;
var UnloadStmtContext = /** @class */ (function (_super) {
    __extends(UnloadStmtContext, _super);
    function UnloadStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnloadStmtContext.prototype.UNLOAD = function () { return this.getToken(vbaParser.UNLOAD, 0); };
    UnloadStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    UnloadStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(UnloadStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_unloadStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnloadStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterUnloadStmt) {
            listener.enterUnloadStmt(this);
        }
    };
    // @Override
    UnloadStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitUnloadStmt) {
            listener.exitUnloadStmt(this);
        }
    };
    // @Override
    UnloadStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitUnloadStmt) {
            return visitor.visitUnloadStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnloadStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnloadStmtContext = UnloadStmtContext;
var UnlockStmtContext = /** @class */ (function (_super) {
    __extends(UnlockStmtContext, _super);
    function UnlockStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UnlockStmtContext.prototype.UNLOCK = function () { return this.getToken(vbaParser.UNLOCK, 0); };
    UnlockStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    UnlockStmtContext.prototype.fileNumber = function () {
        return this.getRuleContext(0, FileNumberContext);
    };
    UnlockStmtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    UnlockStmtContext.prototype.TO = function () { return this.tryGetToken(vbaParser.TO, 0); };
    Object.defineProperty(UnlockStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_unlockStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    UnlockStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterUnlockStmt) {
            listener.enterUnlockStmt(this);
        }
    };
    // @Override
    UnlockStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitUnlockStmt) {
            listener.exitUnlockStmt(this);
        }
    };
    // @Override
    UnlockStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitUnlockStmt) {
            return visitor.visitUnlockStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return UnlockStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UnlockStmtContext = UnlockStmtContext;
var ValueStmtContext = /** @class */ (function (_super) {
    __extends(ValueStmtContext, _super);
    function ValueStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(ValueStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_valueStmt; },
        enumerable: true,
        configurable: true
    });
    ValueStmtContext.prototype.copyFrom = function (ctx) {
        _super.prototype.copyFrom.call(this, ctx);
    };
    return ValueStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ValueStmtContext = ValueStmtContext;
var VsLiteralContext = /** @class */ (function (_super) {
    __extends(VsLiteralContext, _super);
    function VsLiteralContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsLiteralContext.prototype.literal = function () {
        return this.getRuleContext(0, LiteralContext);
    };
    // @Override
    VsLiteralContext.prototype.enterRule = function (listener) {
        if (listener.enterVsLiteral) {
            listener.enterVsLiteral(this);
        }
    };
    // @Override
    VsLiteralContext.prototype.exitRule = function (listener) {
        if (listener.exitVsLiteral) {
            listener.exitVsLiteral(this);
        }
    };
    // @Override
    VsLiteralContext.prototype.accept = function (visitor) {
        if (visitor.visitVsLiteral) {
            return visitor.visitVsLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsLiteralContext;
}(ValueStmtContext));
exports.VsLiteralContext = VsLiteralContext;
var VsICSContext = /** @class */ (function (_super) {
    __extends(VsICSContext, _super);
    function VsICSContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsICSContext.prototype.implicitCallStmt_InStmt = function () {
        return this.getRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    // @Override
    VsICSContext.prototype.enterRule = function (listener) {
        if (listener.enterVsICS) {
            listener.enterVsICS(this);
        }
    };
    // @Override
    VsICSContext.prototype.exitRule = function (listener) {
        if (listener.exitVsICS) {
            listener.exitVsICS(this);
        }
    };
    // @Override
    VsICSContext.prototype.accept = function (visitor) {
        if (visitor.visitVsICS) {
            return visitor.visitVsICS(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsICSContext;
}(ValueStmtContext));
exports.VsICSContext = VsICSContext;
var VsStructContext = /** @class */ (function (_super) {
    __extends(VsStructContext, _super);
    function VsStructContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsStructContext.prototype.LPAREN = function () { return this.getToken(vbaParser.LPAREN, 0); };
    VsStructContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsStructContext.prototype.RPAREN = function () { return this.getToken(vbaParser.RPAREN, 0); };
    VsStructContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsStructContext.prototype.enterRule = function (listener) {
        if (listener.enterVsStruct) {
            listener.enterVsStruct(this);
        }
    };
    // @Override
    VsStructContext.prototype.exitRule = function (listener) {
        if (listener.exitVsStruct) {
            listener.exitVsStruct(this);
        }
    };
    // @Override
    VsStructContext.prototype.accept = function (visitor) {
        if (visitor.visitVsStruct) {
            return visitor.visitVsStruct(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsStructContext;
}(ValueStmtContext));
exports.VsStructContext = VsStructContext;
var VsNewContext = /** @class */ (function (_super) {
    __extends(VsNewContext, _super);
    function VsNewContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsNewContext.prototype.NEW = function () { return this.getToken(vbaParser.NEW, 0); };
    VsNewContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    VsNewContext.prototype.WS = function () { return this.tryGetToken(vbaParser.WS, 0); };
    // @Override
    VsNewContext.prototype.enterRule = function (listener) {
        if (listener.enterVsNew) {
            listener.enterVsNew(this);
        }
    };
    // @Override
    VsNewContext.prototype.exitRule = function (listener) {
        if (listener.exitVsNew) {
            listener.exitVsNew(this);
        }
    };
    // @Override
    VsNewContext.prototype.accept = function (visitor) {
        if (visitor.visitVsNew) {
            return visitor.visitVsNew(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsNewContext;
}(ValueStmtContext));
exports.VsNewContext = VsNewContext;
var VsTypeOfContext = /** @class */ (function (_super) {
    __extends(VsTypeOfContext, _super);
    function VsTypeOfContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsTypeOfContext.prototype.typeOfStmt = function () {
        return this.getRuleContext(0, TypeOfStmtContext);
    };
    // @Override
    VsTypeOfContext.prototype.enterRule = function (listener) {
        if (listener.enterVsTypeOf) {
            listener.enterVsTypeOf(this);
        }
    };
    // @Override
    VsTypeOfContext.prototype.exitRule = function (listener) {
        if (listener.exitVsTypeOf) {
            listener.exitVsTypeOf(this);
        }
    };
    // @Override
    VsTypeOfContext.prototype.accept = function (visitor) {
        if (visitor.visitVsTypeOf) {
            return visitor.visitVsTypeOf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsTypeOfContext;
}(ValueStmtContext));
exports.VsTypeOfContext = VsTypeOfContext;
var VsMidContext = /** @class */ (function (_super) {
    __extends(VsMidContext, _super);
    function VsMidContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsMidContext.prototype.midStmt = function () {
        return this.getRuleContext(0, MidStmtContext);
    };
    // @Override
    VsMidContext.prototype.enterRule = function (listener) {
        if (listener.enterVsMid) {
            listener.enterVsMid(this);
        }
    };
    // @Override
    VsMidContext.prototype.exitRule = function (listener) {
        if (listener.exitVsMid) {
            listener.exitVsMid(this);
        }
    };
    // @Override
    VsMidContext.prototype.accept = function (visitor) {
        if (visitor.visitVsMid) {
            return visitor.visitVsMid(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsMidContext;
}(ValueStmtContext));
exports.VsMidContext = VsMidContext;
var VsAddressOfContext = /** @class */ (function (_super) {
    __extends(VsAddressOfContext, _super);
    function VsAddressOfContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsAddressOfContext.prototype.ADDRESSOF = function () { return this.getToken(vbaParser.ADDRESSOF, 0); };
    VsAddressOfContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    VsAddressOfContext.prototype.WS = function () { return this.tryGetToken(vbaParser.WS, 0); };
    // @Override
    VsAddressOfContext.prototype.enterRule = function (listener) {
        if (listener.enterVsAddressOf) {
            listener.enterVsAddressOf(this);
        }
    };
    // @Override
    VsAddressOfContext.prototype.exitRule = function (listener) {
        if (listener.exitVsAddressOf) {
            listener.exitVsAddressOf(this);
        }
    };
    // @Override
    VsAddressOfContext.prototype.accept = function (visitor) {
        if (visitor.visitVsAddressOf) {
            return visitor.visitVsAddressOf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsAddressOfContext;
}(ValueStmtContext));
exports.VsAddressOfContext = VsAddressOfContext;
var VsAssignContext = /** @class */ (function (_super) {
    __extends(VsAssignContext, _super);
    function VsAssignContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsAssignContext.prototype.implicitCallStmt_InStmt = function () {
        return this.getRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    VsAssignContext.prototype.ASSIGN = function () { return this.getToken(vbaParser.ASSIGN, 0); };
    VsAssignContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    VsAssignContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsAssignContext.prototype.enterRule = function (listener) {
        if (listener.enterVsAssign) {
            listener.enterVsAssign(this);
        }
    };
    // @Override
    VsAssignContext.prototype.exitRule = function (listener) {
        if (listener.exitVsAssign) {
            listener.exitVsAssign(this);
        }
    };
    // @Override
    VsAssignContext.prototype.accept = function (visitor) {
        if (visitor.visitVsAssign) {
            return visitor.visitVsAssign(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsAssignContext;
}(ValueStmtContext));
exports.VsAssignContext = VsAssignContext;
var VsIsContext = /** @class */ (function (_super) {
    __extends(VsIsContext, _super);
    function VsIsContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsIsContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsIsContext.prototype.IS = function () { return this.getToken(vbaParser.IS, 0); };
    VsIsContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsIsContext.prototype.enterRule = function (listener) {
        if (listener.enterVsIs) {
            listener.enterVsIs(this);
        }
    };
    // @Override
    VsIsContext.prototype.exitRule = function (listener) {
        if (listener.exitVsIs) {
            listener.exitVsIs(this);
        }
    };
    // @Override
    VsIsContext.prototype.accept = function (visitor) {
        if (visitor.visitVsIs) {
            return visitor.visitVsIs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsIsContext;
}(ValueStmtContext));
exports.VsIsContext = VsIsContext;
var VsLikeContext = /** @class */ (function (_super) {
    __extends(VsLikeContext, _super);
    function VsLikeContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsLikeContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsLikeContext.prototype.LIKE = function () { return this.getToken(vbaParser.LIKE, 0); };
    VsLikeContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsLikeContext.prototype.enterRule = function (listener) {
        if (listener.enterVsLike) {
            listener.enterVsLike(this);
        }
    };
    // @Override
    VsLikeContext.prototype.exitRule = function (listener) {
        if (listener.exitVsLike) {
            listener.exitVsLike(this);
        }
    };
    // @Override
    VsLikeContext.prototype.accept = function (visitor) {
        if (visitor.visitVsLike) {
            return visitor.visitVsLike(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsLikeContext;
}(ValueStmtContext));
exports.VsLikeContext = VsLikeContext;
var VsGeqContext = /** @class */ (function (_super) {
    __extends(VsGeqContext, _super);
    function VsGeqContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsGeqContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsGeqContext.prototype.GEQ = function () { return this.getToken(vbaParser.GEQ, 0); };
    VsGeqContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsGeqContext.prototype.enterRule = function (listener) {
        if (listener.enterVsGeq) {
            listener.enterVsGeq(this);
        }
    };
    // @Override
    VsGeqContext.prototype.exitRule = function (listener) {
        if (listener.exitVsGeq) {
            listener.exitVsGeq(this);
        }
    };
    // @Override
    VsGeqContext.prototype.accept = function (visitor) {
        if (visitor.visitVsGeq) {
            return visitor.visitVsGeq(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsGeqContext;
}(ValueStmtContext));
exports.VsGeqContext = VsGeqContext;
var VsLeqContext = /** @class */ (function (_super) {
    __extends(VsLeqContext, _super);
    function VsLeqContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsLeqContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsLeqContext.prototype.LEQ = function () { return this.getToken(vbaParser.LEQ, 0); };
    VsLeqContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsLeqContext.prototype.enterRule = function (listener) {
        if (listener.enterVsLeq) {
            listener.enterVsLeq(this);
        }
    };
    // @Override
    VsLeqContext.prototype.exitRule = function (listener) {
        if (listener.exitVsLeq) {
            listener.exitVsLeq(this);
        }
    };
    // @Override
    VsLeqContext.prototype.accept = function (visitor) {
        if (visitor.visitVsLeq) {
            return visitor.visitVsLeq(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsLeqContext;
}(ValueStmtContext));
exports.VsLeqContext = VsLeqContext;
var VsGtContext = /** @class */ (function (_super) {
    __extends(VsGtContext, _super);
    function VsGtContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsGtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsGtContext.prototype.GT = function () { return this.getToken(vbaParser.GT, 0); };
    VsGtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsGtContext.prototype.enterRule = function (listener) {
        if (listener.enterVsGt) {
            listener.enterVsGt(this);
        }
    };
    // @Override
    VsGtContext.prototype.exitRule = function (listener) {
        if (listener.exitVsGt) {
            listener.exitVsGt(this);
        }
    };
    // @Override
    VsGtContext.prototype.accept = function (visitor) {
        if (visitor.visitVsGt) {
            return visitor.visitVsGt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsGtContext;
}(ValueStmtContext));
exports.VsGtContext = VsGtContext;
var VsLtContext = /** @class */ (function (_super) {
    __extends(VsLtContext, _super);
    function VsLtContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsLtContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsLtContext.prototype.LT = function () { return this.getToken(vbaParser.LT, 0); };
    VsLtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsLtContext.prototype.enterRule = function (listener) {
        if (listener.enterVsLt) {
            listener.enterVsLt(this);
        }
    };
    // @Override
    VsLtContext.prototype.exitRule = function (listener) {
        if (listener.exitVsLt) {
            listener.exitVsLt(this);
        }
    };
    // @Override
    VsLtContext.prototype.accept = function (visitor) {
        if (visitor.visitVsLt) {
            return visitor.visitVsLt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsLtContext;
}(ValueStmtContext));
exports.VsLtContext = VsLtContext;
var VsNeqContext = /** @class */ (function (_super) {
    __extends(VsNeqContext, _super);
    function VsNeqContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsNeqContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsNeqContext.prototype.NEQ = function () { return this.getToken(vbaParser.NEQ, 0); };
    VsNeqContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsNeqContext.prototype.enterRule = function (listener) {
        if (listener.enterVsNeq) {
            listener.enterVsNeq(this);
        }
    };
    // @Override
    VsNeqContext.prototype.exitRule = function (listener) {
        if (listener.exitVsNeq) {
            listener.exitVsNeq(this);
        }
    };
    // @Override
    VsNeqContext.prototype.accept = function (visitor) {
        if (visitor.visitVsNeq) {
            return visitor.visitVsNeq(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsNeqContext;
}(ValueStmtContext));
exports.VsNeqContext = VsNeqContext;
var VsEqContext = /** @class */ (function (_super) {
    __extends(VsEqContext, _super);
    function VsEqContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsEqContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsEqContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    VsEqContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsEqContext.prototype.enterRule = function (listener) {
        if (listener.enterVsEq) {
            listener.enterVsEq(this);
        }
    };
    // @Override
    VsEqContext.prototype.exitRule = function (listener) {
        if (listener.exitVsEq) {
            listener.exitVsEq(this);
        }
    };
    // @Override
    VsEqContext.prototype.accept = function (visitor) {
        if (visitor.visitVsEq) {
            return visitor.visitVsEq(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsEqContext;
}(ValueStmtContext));
exports.VsEqContext = VsEqContext;
var VsPowContext = /** @class */ (function (_super) {
    __extends(VsPowContext, _super);
    function VsPowContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsPowContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsPowContext.prototype.POW = function () { return this.getToken(vbaParser.POW, 0); };
    VsPowContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsPowContext.prototype.enterRule = function (listener) {
        if (listener.enterVsPow) {
            listener.enterVsPow(this);
        }
    };
    // @Override
    VsPowContext.prototype.exitRule = function (listener) {
        if (listener.exitVsPow) {
            listener.exitVsPow(this);
        }
    };
    // @Override
    VsPowContext.prototype.accept = function (visitor) {
        if (visitor.visitVsPow) {
            return visitor.visitVsPow(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsPowContext;
}(ValueStmtContext));
exports.VsPowContext = VsPowContext;
var VsNegationContext = /** @class */ (function (_super) {
    __extends(VsNegationContext, _super);
    function VsNegationContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsNegationContext.prototype.MINUS = function () { return this.getToken(vbaParser.MINUS, 0); };
    VsNegationContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    VsNegationContext.prototype.WS = function () { return this.tryGetToken(vbaParser.WS, 0); };
    // @Override
    VsNegationContext.prototype.enterRule = function (listener) {
        if (listener.enterVsNegation) {
            listener.enterVsNegation(this);
        }
    };
    // @Override
    VsNegationContext.prototype.exitRule = function (listener) {
        if (listener.exitVsNegation) {
            listener.exitVsNegation(this);
        }
    };
    // @Override
    VsNegationContext.prototype.accept = function (visitor) {
        if (visitor.visitVsNegation) {
            return visitor.visitVsNegation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsNegationContext;
}(ValueStmtContext));
exports.VsNegationContext = VsNegationContext;
var VsPlusContext = /** @class */ (function (_super) {
    __extends(VsPlusContext, _super);
    function VsPlusContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsPlusContext.prototype.PLUS = function () { return this.getToken(vbaParser.PLUS, 0); };
    VsPlusContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    VsPlusContext.prototype.WS = function () { return this.tryGetToken(vbaParser.WS, 0); };
    // @Override
    VsPlusContext.prototype.enterRule = function (listener) {
        if (listener.enterVsPlus) {
            listener.enterVsPlus(this);
        }
    };
    // @Override
    VsPlusContext.prototype.exitRule = function (listener) {
        if (listener.exitVsPlus) {
            listener.exitVsPlus(this);
        }
    };
    // @Override
    VsPlusContext.prototype.accept = function (visitor) {
        if (visitor.visitVsPlus) {
            return visitor.visitVsPlus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsPlusContext;
}(ValueStmtContext));
exports.VsPlusContext = VsPlusContext;
var VsDivContext = /** @class */ (function (_super) {
    __extends(VsDivContext, _super);
    function VsDivContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsDivContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsDivContext.prototype.DIV = function () { return this.getToken(vbaParser.DIV, 0); };
    VsDivContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsDivContext.prototype.enterRule = function (listener) {
        if (listener.enterVsDiv) {
            listener.enterVsDiv(this);
        }
    };
    // @Override
    VsDivContext.prototype.exitRule = function (listener) {
        if (listener.exitVsDiv) {
            listener.exitVsDiv(this);
        }
    };
    // @Override
    VsDivContext.prototype.accept = function (visitor) {
        if (visitor.visitVsDiv) {
            return visitor.visitVsDiv(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsDivContext;
}(ValueStmtContext));
exports.VsDivContext = VsDivContext;
var VsMultContext = /** @class */ (function (_super) {
    __extends(VsMultContext, _super);
    function VsMultContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsMultContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsMultContext.prototype.MULT = function () { return this.getToken(vbaParser.MULT, 0); };
    VsMultContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsMultContext.prototype.enterRule = function (listener) {
        if (listener.enterVsMult) {
            listener.enterVsMult(this);
        }
    };
    // @Override
    VsMultContext.prototype.exitRule = function (listener) {
        if (listener.exitVsMult) {
            listener.exitVsMult(this);
        }
    };
    // @Override
    VsMultContext.prototype.accept = function (visitor) {
        if (visitor.visitVsMult) {
            return visitor.visitVsMult(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsMultContext;
}(ValueStmtContext));
exports.VsMultContext = VsMultContext;
var VsModContext = /** @class */ (function (_super) {
    __extends(VsModContext, _super);
    function VsModContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsModContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsModContext.prototype.MOD = function () { return this.getToken(vbaParser.MOD, 0); };
    VsModContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsModContext.prototype.enterRule = function (listener) {
        if (listener.enterVsMod) {
            listener.enterVsMod(this);
        }
    };
    // @Override
    VsModContext.prototype.exitRule = function (listener) {
        if (listener.exitVsMod) {
            listener.exitVsMod(this);
        }
    };
    // @Override
    VsModContext.prototype.accept = function (visitor) {
        if (visitor.visitVsMod) {
            return visitor.visitVsMod(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsModContext;
}(ValueStmtContext));
exports.VsModContext = VsModContext;
var VsAddContext = /** @class */ (function (_super) {
    __extends(VsAddContext, _super);
    function VsAddContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsAddContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsAddContext.prototype.PLUS = function () { return this.getToken(vbaParser.PLUS, 0); };
    VsAddContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsAddContext.prototype.enterRule = function (listener) {
        if (listener.enterVsAdd) {
            listener.enterVsAdd(this);
        }
    };
    // @Override
    VsAddContext.prototype.exitRule = function (listener) {
        if (listener.exitVsAdd) {
            listener.exitVsAdd(this);
        }
    };
    // @Override
    VsAddContext.prototype.accept = function (visitor) {
        if (visitor.visitVsAdd) {
            return visitor.visitVsAdd(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsAddContext;
}(ValueStmtContext));
exports.VsAddContext = VsAddContext;
var VsMinusContext = /** @class */ (function (_super) {
    __extends(VsMinusContext, _super);
    function VsMinusContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsMinusContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsMinusContext.prototype.MINUS = function () { return this.getToken(vbaParser.MINUS, 0); };
    VsMinusContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsMinusContext.prototype.enterRule = function (listener) {
        if (listener.enterVsMinus) {
            listener.enterVsMinus(this);
        }
    };
    // @Override
    VsMinusContext.prototype.exitRule = function (listener) {
        if (listener.exitVsMinus) {
            listener.exitVsMinus(this);
        }
    };
    // @Override
    VsMinusContext.prototype.accept = function (visitor) {
        if (visitor.visitVsMinus) {
            return visitor.visitVsMinus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsMinusContext;
}(ValueStmtContext));
exports.VsMinusContext = VsMinusContext;
var VsAmpContext = /** @class */ (function (_super) {
    __extends(VsAmpContext, _super);
    function VsAmpContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsAmpContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsAmpContext.prototype.AMPERSAND = function () { return this.getToken(vbaParser.AMPERSAND, 0); };
    VsAmpContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsAmpContext.prototype.enterRule = function (listener) {
        if (listener.enterVsAmp) {
            listener.enterVsAmp(this);
        }
    };
    // @Override
    VsAmpContext.prototype.exitRule = function (listener) {
        if (listener.exitVsAmp) {
            listener.exitVsAmp(this);
        }
    };
    // @Override
    VsAmpContext.prototype.accept = function (visitor) {
        if (visitor.visitVsAmp) {
            return visitor.visitVsAmp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsAmpContext;
}(ValueStmtContext));
exports.VsAmpContext = VsAmpContext;
var VsImpContext = /** @class */ (function (_super) {
    __extends(VsImpContext, _super);
    function VsImpContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsImpContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsImpContext.prototype.IMP = function () { return this.getToken(vbaParser.IMP, 0); };
    VsImpContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsImpContext.prototype.enterRule = function (listener) {
        if (listener.enterVsImp) {
            listener.enterVsImp(this);
        }
    };
    // @Override
    VsImpContext.prototype.exitRule = function (listener) {
        if (listener.exitVsImp) {
            listener.exitVsImp(this);
        }
    };
    // @Override
    VsImpContext.prototype.accept = function (visitor) {
        if (visitor.visitVsImp) {
            return visitor.visitVsImp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsImpContext;
}(ValueStmtContext));
exports.VsImpContext = VsImpContext;
var VsEqvContext = /** @class */ (function (_super) {
    __extends(VsEqvContext, _super);
    function VsEqvContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsEqvContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsEqvContext.prototype.EQV = function () { return this.getToken(vbaParser.EQV, 0); };
    VsEqvContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsEqvContext.prototype.enterRule = function (listener) {
        if (listener.enterVsEqv) {
            listener.enterVsEqv(this);
        }
    };
    // @Override
    VsEqvContext.prototype.exitRule = function (listener) {
        if (listener.exitVsEqv) {
            listener.exitVsEqv(this);
        }
    };
    // @Override
    VsEqvContext.prototype.accept = function (visitor) {
        if (visitor.visitVsEqv) {
            return visitor.visitVsEqv(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsEqvContext;
}(ValueStmtContext));
exports.VsEqvContext = VsEqvContext;
var VsXorContext = /** @class */ (function (_super) {
    __extends(VsXorContext, _super);
    function VsXorContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsXorContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsXorContext.prototype.XOR = function () { return this.getToken(vbaParser.XOR, 0); };
    VsXorContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsXorContext.prototype.enterRule = function (listener) {
        if (listener.enterVsXor) {
            listener.enterVsXor(this);
        }
    };
    // @Override
    VsXorContext.prototype.exitRule = function (listener) {
        if (listener.exitVsXor) {
            listener.exitVsXor(this);
        }
    };
    // @Override
    VsXorContext.prototype.accept = function (visitor) {
        if (visitor.visitVsXor) {
            return visitor.visitVsXor(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsXorContext;
}(ValueStmtContext));
exports.VsXorContext = VsXorContext;
var VsOrContext = /** @class */ (function (_super) {
    __extends(VsOrContext, _super);
    function VsOrContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsOrContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsOrContext.prototype.OR = function () { return this.getToken(vbaParser.OR, 0); };
    VsOrContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsOrContext.prototype.enterRule = function (listener) {
        if (listener.enterVsOr) {
            listener.enterVsOr(this);
        }
    };
    // @Override
    VsOrContext.prototype.exitRule = function (listener) {
        if (listener.exitVsOr) {
            listener.exitVsOr(this);
        }
    };
    // @Override
    VsOrContext.prototype.accept = function (visitor) {
        if (visitor.visitVsOr) {
            return visitor.visitVsOr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsOrContext;
}(ValueStmtContext));
exports.VsOrContext = VsOrContext;
var VsAndContext = /** @class */ (function (_super) {
    __extends(VsAndContext, _super);
    function VsAndContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsAndContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    VsAndContext.prototype.AND = function () { return this.getToken(vbaParser.AND, 0); };
    VsAndContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    // @Override
    VsAndContext.prototype.enterRule = function (listener) {
        if (listener.enterVsAnd) {
            listener.enterVsAnd(this);
        }
    };
    // @Override
    VsAndContext.prototype.exitRule = function (listener) {
        if (listener.exitVsAnd) {
            listener.exitVsAnd(this);
        }
    };
    // @Override
    VsAndContext.prototype.accept = function (visitor) {
        if (visitor.visitVsAnd) {
            return visitor.visitVsAnd(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsAndContext;
}(ValueStmtContext));
exports.VsAndContext = VsAndContext;
var VsNotContext = /** @class */ (function (_super) {
    __extends(VsNotContext, _super);
    function VsNotContext(ctx) {
        var _this = _super.call(this, ctx.parent, ctx.invokingState) || this;
        _this.copyFrom(ctx);
        return _this;
    }
    VsNotContext.prototype.NOT = function () { return this.getToken(vbaParser.NOT, 0); };
    VsNotContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    VsNotContext.prototype.WS = function () { return this.tryGetToken(vbaParser.WS, 0); };
    // @Override
    VsNotContext.prototype.enterRule = function (listener) {
        if (listener.enterVsNot) {
            listener.enterVsNot(this);
        }
    };
    // @Override
    VsNotContext.prototype.exitRule = function (listener) {
        if (listener.exitVsNot) {
            listener.exitVsNot(this);
        }
    };
    // @Override
    VsNotContext.prototype.accept = function (visitor) {
        if (visitor.visitVsNot) {
            return visitor.visitVsNot(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VsNotContext;
}(ValueStmtContext));
exports.VsNotContext = VsNotContext;
var VariableStmtContext = /** @class */ (function (_super) {
    __extends(VariableStmtContext, _super);
    function VariableStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    VariableStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    VariableStmtContext.prototype.variableListStmt = function () {
        return this.getRuleContext(0, VariableListStmtContext);
    };
    VariableStmtContext.prototype.DIM = function () { return this.tryGetToken(vbaParser.DIM, 0); };
    VariableStmtContext.prototype.STATIC = function () { return this.tryGetToken(vbaParser.STATIC, 0); };
    VariableStmtContext.prototype.visibility = function () {
        return this.tryGetRuleContext(0, VisibilityContext);
    };
    VariableStmtContext.prototype.WITHEVENTS = function () { return this.tryGetToken(vbaParser.WITHEVENTS, 0); };
    Object.defineProperty(VariableStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_variableStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    VariableStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterVariableStmt) {
            listener.enterVariableStmt(this);
        }
    };
    // @Override
    VariableStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitVariableStmt) {
            listener.exitVariableStmt(this);
        }
    };
    // @Override
    VariableStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitVariableStmt) {
            return visitor.visitVariableStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VariableStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.VariableStmtContext = VariableStmtContext;
var VariableListStmtContext = /** @class */ (function (_super) {
    __extends(VariableListStmtContext, _super);
    function VariableListStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    VariableListStmtContext.prototype.variableSubStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableSubStmtContext);
        }
        else {
            return this.getRuleContext(i, VariableSubStmtContext);
        }
    };
    VariableListStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(VariableListStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_variableListStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    VariableListStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterVariableListStmt) {
            listener.enterVariableListStmt(this);
        }
    };
    // @Override
    VariableListStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitVariableListStmt) {
            listener.exitVariableListStmt(this);
        }
    };
    // @Override
    VariableListStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitVariableListStmt) {
            return visitor.visitVariableListStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VariableListStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.VariableListStmtContext = VariableListStmtContext;
var VariableSubStmtContext = /** @class */ (function (_super) {
    __extends(VariableSubStmtContext, _super);
    function VariableSubStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    VariableSubStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    VariableSubStmtContext.prototype.LPAREN = function () { return this.tryGetToken(vbaParser.LPAREN, 0); };
    VariableSubStmtContext.prototype.RPAREN = function () { return this.tryGetToken(vbaParser.RPAREN, 0); };
    VariableSubStmtContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    VariableSubStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    VariableSubStmtContext.prototype.asTypeClause = function () {
        return this.tryGetRuleContext(0, AsTypeClauseContext);
    };
    VariableSubStmtContext.prototype.subscripts = function () {
        return this.tryGetRuleContext(0, SubscriptsContext);
    };
    Object.defineProperty(VariableSubStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_variableSubStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    VariableSubStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterVariableSubStmt) {
            listener.enterVariableSubStmt(this);
        }
    };
    // @Override
    VariableSubStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitVariableSubStmt) {
            listener.exitVariableSubStmt(this);
        }
    };
    // @Override
    VariableSubStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitVariableSubStmt) {
            return visitor.visitVariableSubStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VariableSubStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.VariableSubStmtContext = VariableSubStmtContext;
var WhileWendStmtContext = /** @class */ (function (_super) {
    __extends(WhileWendStmtContext, _super);
    function WhileWendStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WhileWendStmtContext.prototype.WHILE = function () { return this.getToken(vbaParser.WHILE, 0); };
    WhileWendStmtContext.prototype.WS = function () { return this.getToken(vbaParser.WS, 0); };
    WhileWendStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    WhileWendStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    WhileWendStmtContext.prototype.WEND = function () { return this.getToken(vbaParser.WEND, 0); };
    WhileWendStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    Object.defineProperty(WhileWendStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_whileWendStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WhileWendStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterWhileWendStmt) {
            listener.enterWhileWendStmt(this);
        }
    };
    // @Override
    WhileWendStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitWhileWendStmt) {
            listener.exitWhileWendStmt(this);
        }
    };
    // @Override
    WhileWendStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitWhileWendStmt) {
            return visitor.visitWhileWendStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WhileWendStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WhileWendStmtContext = WhileWendStmtContext;
var WidthStmtContext = /** @class */ (function (_super) {
    __extends(WidthStmtContext, _super);
    function WidthStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WidthStmtContext.prototype.WIDTH = function () { return this.getToken(vbaParser.WIDTH, 0); };
    WidthStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    WidthStmtContext.prototype.fileNumber = function () {
        return this.getRuleContext(0, FileNumberContext);
    };
    WidthStmtContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(WidthStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_widthStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WidthStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterWidthStmt) {
            listener.enterWidthStmt(this);
        }
    };
    // @Override
    WidthStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitWidthStmt) {
            listener.exitWidthStmt(this);
        }
    };
    // @Override
    WidthStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitWidthStmt) {
            return visitor.visitWidthStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WidthStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WidthStmtContext = WidthStmtContext;
var WithStmtContext = /** @class */ (function (_super) {
    __extends(WithStmtContext, _super);
    function WithStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WithStmtContext.prototype.WITH = function () { return this.getToken(vbaParser.WITH, 0); };
    WithStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    WithStmtContext.prototype.endOfStatement = function () {
        return this.getRuleContext(0, EndOfStatementContext);
    };
    WithStmtContext.prototype.END_WITH = function () { return this.getToken(vbaParser.END_WITH, 0); };
    WithStmtContext.prototype.implicitCallStmt_InStmt = function () {
        return this.tryGetRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    WithStmtContext.prototype.block = function () {
        return this.tryGetRuleContext(0, BlockContext);
    };
    WithStmtContext.prototype.NEW = function () { return this.tryGetToken(vbaParser.NEW, 0); };
    WithStmtContext.prototype.type = function () {
        return this.tryGetRuleContext(0, TypeContext);
    };
    Object.defineProperty(WithStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_withStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WithStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterWithStmt) {
            listener.enterWithStmt(this);
        }
    };
    // @Override
    WithStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitWithStmt) {
            listener.exitWithStmt(this);
        }
    };
    // @Override
    WithStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitWithStmt) {
            return visitor.visitWithStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WithStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WithStmtContext = WithStmtContext;
var WriteStmtContext = /** @class */ (function (_super) {
    __extends(WriteStmtContext, _super);
    function WriteStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    WriteStmtContext.prototype.WRITE = function () { return this.getToken(vbaParser.WRITE, 0); };
    WriteStmtContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    WriteStmtContext.prototype.fileNumber = function () {
        return this.getRuleContext(0, FileNumberContext);
    };
    WriteStmtContext.prototype.outputList = function () {
        return this.tryGetRuleContext(0, OutputListContext);
    };
    Object.defineProperty(WriteStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_writeStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    WriteStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterWriteStmt) {
            listener.enterWriteStmt(this);
        }
    };
    // @Override
    WriteStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitWriteStmt) {
            listener.exitWriteStmt(this);
        }
    };
    // @Override
    WriteStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitWriteStmt) {
            return visitor.visitWriteStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return WriteStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.WriteStmtContext = WriteStmtContext;
var FileNumberContext = /** @class */ (function (_super) {
    __extends(FileNumberContext, _super);
    function FileNumberContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FileNumberContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    Object.defineProperty(FileNumberContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_fileNumber; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FileNumberContext.prototype.enterRule = function (listener) {
        if (listener.enterFileNumber) {
            listener.enterFileNumber(this);
        }
    };
    // @Override
    FileNumberContext.prototype.exitRule = function (listener) {
        if (listener.exitFileNumber) {
            listener.exitFileNumber(this);
        }
    };
    // @Override
    FileNumberContext.prototype.accept = function (visitor) {
        if (visitor.visitFileNumber) {
            return visitor.visitFileNumber(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FileNumberContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FileNumberContext = FileNumberContext;
var ExplicitCallStmtContext = /** @class */ (function (_super) {
    __extends(ExplicitCallStmtContext, _super);
    function ExplicitCallStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExplicitCallStmtContext.prototype.eCS_ProcedureCall = function () {
        return this.tryGetRuleContext(0, ECS_ProcedureCallContext);
    };
    ExplicitCallStmtContext.prototype.eCS_MemberProcedureCall = function () {
        return this.tryGetRuleContext(0, ECS_MemberProcedureCallContext);
    };
    Object.defineProperty(ExplicitCallStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_explicitCallStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExplicitCallStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterExplicitCallStmt) {
            listener.enterExplicitCallStmt(this);
        }
    };
    // @Override
    ExplicitCallStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitExplicitCallStmt) {
            listener.exitExplicitCallStmt(this);
        }
    };
    // @Override
    ExplicitCallStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitExplicitCallStmt) {
            return visitor.visitExplicitCallStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExplicitCallStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExplicitCallStmtContext = ExplicitCallStmtContext;
var ECS_ProcedureCallContext = /** @class */ (function (_super) {
    __extends(ECS_ProcedureCallContext, _super);
    function ECS_ProcedureCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ECS_ProcedureCallContext.prototype.CALL = function () { return this.getToken(vbaParser.CALL, 0); };
    ECS_ProcedureCallContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ECS_ProcedureCallContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    ECS_ProcedureCallContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    ECS_ProcedureCallContext.prototype.LPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.LPAREN);
        }
        else {
            return this.getToken(vbaParser.LPAREN, i);
        }
    };
    ECS_ProcedureCallContext.prototype.argsCall = function () {
        return this.tryGetRuleContext(0, ArgsCallContext);
    };
    ECS_ProcedureCallContext.prototype.RPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.RPAREN);
        }
        else {
            return this.getToken(vbaParser.RPAREN, i);
        }
    };
    ECS_ProcedureCallContext.prototype.subscripts = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubscriptsContext);
        }
        else {
            return this.getRuleContext(i, SubscriptsContext);
        }
    };
    Object.defineProperty(ECS_ProcedureCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_eCS_ProcedureCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ECS_ProcedureCallContext.prototype.enterRule = function (listener) {
        if (listener.enterECS_ProcedureCall) {
            listener.enterECS_ProcedureCall(this);
        }
    };
    // @Override
    ECS_ProcedureCallContext.prototype.exitRule = function (listener) {
        if (listener.exitECS_ProcedureCall) {
            listener.exitECS_ProcedureCall(this);
        }
    };
    // @Override
    ECS_ProcedureCallContext.prototype.accept = function (visitor) {
        if (visitor.visitECS_ProcedureCall) {
            return visitor.visitECS_ProcedureCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ECS_ProcedureCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ECS_ProcedureCallContext = ECS_ProcedureCallContext;
var ECS_MemberProcedureCallContext = /** @class */ (function (_super) {
    __extends(ECS_MemberProcedureCallContext, _super);
    function ECS_MemberProcedureCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ECS_MemberProcedureCallContext.prototype.CALL = function () { return this.getToken(vbaParser.CALL, 0); };
    ECS_MemberProcedureCallContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ECS_MemberProcedureCallContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    ECS_MemberProcedureCallContext.prototype.implicitCallStmt_InStmt = function () {
        return this.tryGetRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    ECS_MemberProcedureCallContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    ECS_MemberProcedureCallContext.prototype.LPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.LPAREN);
        }
        else {
            return this.getToken(vbaParser.LPAREN, i);
        }
    };
    ECS_MemberProcedureCallContext.prototype.argsCall = function () {
        return this.tryGetRuleContext(0, ArgsCallContext);
    };
    ECS_MemberProcedureCallContext.prototype.RPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.RPAREN);
        }
        else {
            return this.getToken(vbaParser.RPAREN, i);
        }
    };
    ECS_MemberProcedureCallContext.prototype.subscripts = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubscriptsContext);
        }
        else {
            return this.getRuleContext(i, SubscriptsContext);
        }
    };
    Object.defineProperty(ECS_MemberProcedureCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_eCS_MemberProcedureCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ECS_MemberProcedureCallContext.prototype.enterRule = function (listener) {
        if (listener.enterECS_MemberProcedureCall) {
            listener.enterECS_MemberProcedureCall(this);
        }
    };
    // @Override
    ECS_MemberProcedureCallContext.prototype.exitRule = function (listener) {
        if (listener.exitECS_MemberProcedureCall) {
            listener.exitECS_MemberProcedureCall(this);
        }
    };
    // @Override
    ECS_MemberProcedureCallContext.prototype.accept = function (visitor) {
        if (visitor.visitECS_MemberProcedureCall) {
            return visitor.visitECS_MemberProcedureCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ECS_MemberProcedureCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ECS_MemberProcedureCallContext = ECS_MemberProcedureCallContext;
var ImplicitCallStmt_InBlockContext = /** @class */ (function (_super) {
    __extends(ImplicitCallStmt_InBlockContext, _super);
    function ImplicitCallStmt_InBlockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ImplicitCallStmt_InBlockContext.prototype.iCS_B_MemberProcedureCall = function () {
        return this.tryGetRuleContext(0, ICS_B_MemberProcedureCallContext);
    };
    ImplicitCallStmt_InBlockContext.prototype.iCS_B_ProcedureCall = function () {
        return this.tryGetRuleContext(0, ICS_B_ProcedureCallContext);
    };
    Object.defineProperty(ImplicitCallStmt_InBlockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_implicitCallStmt_InBlock; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ImplicitCallStmt_InBlockContext.prototype.enterRule = function (listener) {
        if (listener.enterImplicitCallStmt_InBlock) {
            listener.enterImplicitCallStmt_InBlock(this);
        }
    };
    // @Override
    ImplicitCallStmt_InBlockContext.prototype.exitRule = function (listener) {
        if (listener.exitImplicitCallStmt_InBlock) {
            listener.exitImplicitCallStmt_InBlock(this);
        }
    };
    // @Override
    ImplicitCallStmt_InBlockContext.prototype.accept = function (visitor) {
        if (visitor.visitImplicitCallStmt_InBlock) {
            return visitor.visitImplicitCallStmt_InBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ImplicitCallStmt_InBlockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ImplicitCallStmt_InBlockContext = ImplicitCallStmt_InBlockContext;
var ICS_B_MemberProcedureCallContext = /** @class */ (function (_super) {
    __extends(ICS_B_MemberProcedureCallContext, _super);
    function ICS_B_MemberProcedureCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ICS_B_MemberProcedureCallContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    ICS_B_MemberProcedureCallContext.prototype.implicitCallStmt_InStmt = function () {
        return this.tryGetRuleContext(0, ImplicitCallStmt_InStmtContext);
    };
    ICS_B_MemberProcedureCallContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    ICS_B_MemberProcedureCallContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ICS_B_MemberProcedureCallContext.prototype.argsCall = function () {
        return this.tryGetRuleContext(0, ArgsCallContext);
    };
    ICS_B_MemberProcedureCallContext.prototype.dictionaryCallStmt = function () {
        return this.tryGetRuleContext(0, DictionaryCallStmtContext);
    };
    ICS_B_MemberProcedureCallContext.prototype.LPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.LPAREN);
        }
        else {
            return this.getToken(vbaParser.LPAREN, i);
        }
    };
    ICS_B_MemberProcedureCallContext.prototype.subscripts = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubscriptsContext);
        }
        else {
            return this.getRuleContext(i, SubscriptsContext);
        }
    };
    ICS_B_MemberProcedureCallContext.prototype.RPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.RPAREN);
        }
        else {
            return this.getToken(vbaParser.RPAREN, i);
        }
    };
    Object.defineProperty(ICS_B_MemberProcedureCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_iCS_B_MemberProcedureCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ICS_B_MemberProcedureCallContext.prototype.enterRule = function (listener) {
        if (listener.enterICS_B_MemberProcedureCall) {
            listener.enterICS_B_MemberProcedureCall(this);
        }
    };
    // @Override
    ICS_B_MemberProcedureCallContext.prototype.exitRule = function (listener) {
        if (listener.exitICS_B_MemberProcedureCall) {
            listener.exitICS_B_MemberProcedureCall(this);
        }
    };
    // @Override
    ICS_B_MemberProcedureCallContext.prototype.accept = function (visitor) {
        if (visitor.visitICS_B_MemberProcedureCall) {
            return visitor.visitICS_B_MemberProcedureCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ICS_B_MemberProcedureCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ICS_B_MemberProcedureCallContext = ICS_B_MemberProcedureCallContext;
var ICS_B_ProcedureCallContext = /** @class */ (function (_super) {
    __extends(ICS_B_ProcedureCallContext, _super);
    function ICS_B_ProcedureCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ICS_B_ProcedureCallContext.prototype.certainIdentifier = function () {
        return this.getRuleContext(0, CertainIdentifierContext);
    };
    ICS_B_ProcedureCallContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ICS_B_ProcedureCallContext.prototype.argsCall = function () {
        return this.tryGetRuleContext(0, ArgsCallContext);
    };
    ICS_B_ProcedureCallContext.prototype.LPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.LPAREN);
        }
        else {
            return this.getToken(vbaParser.LPAREN, i);
        }
    };
    ICS_B_ProcedureCallContext.prototype.subscripts = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubscriptsContext);
        }
        else {
            return this.getRuleContext(i, SubscriptsContext);
        }
    };
    ICS_B_ProcedureCallContext.prototype.RPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.RPAREN);
        }
        else {
            return this.getToken(vbaParser.RPAREN, i);
        }
    };
    Object.defineProperty(ICS_B_ProcedureCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_iCS_B_ProcedureCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ICS_B_ProcedureCallContext.prototype.enterRule = function (listener) {
        if (listener.enterICS_B_ProcedureCall) {
            listener.enterICS_B_ProcedureCall(this);
        }
    };
    // @Override
    ICS_B_ProcedureCallContext.prototype.exitRule = function (listener) {
        if (listener.exitICS_B_ProcedureCall) {
            listener.exitICS_B_ProcedureCall(this);
        }
    };
    // @Override
    ICS_B_ProcedureCallContext.prototype.accept = function (visitor) {
        if (visitor.visitICS_B_ProcedureCall) {
            return visitor.visitICS_B_ProcedureCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ICS_B_ProcedureCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ICS_B_ProcedureCallContext = ICS_B_ProcedureCallContext;
var ImplicitCallStmt_InStmtContext = /** @class */ (function (_super) {
    __extends(ImplicitCallStmt_InStmtContext, _super);
    function ImplicitCallStmt_InStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ImplicitCallStmt_InStmtContext.prototype.iCS_S_MembersCall = function () {
        return this.tryGetRuleContext(0, ICS_S_MembersCallContext);
    };
    ImplicitCallStmt_InStmtContext.prototype.iCS_S_VariableOrProcedureCall = function () {
        return this.tryGetRuleContext(0, ICS_S_VariableOrProcedureCallContext);
    };
    ImplicitCallStmt_InStmtContext.prototype.iCS_S_ProcedureOrArrayCall = function () {
        return this.tryGetRuleContext(0, ICS_S_ProcedureOrArrayCallContext);
    };
    ImplicitCallStmt_InStmtContext.prototype.iCS_S_DictionaryCall = function () {
        return this.tryGetRuleContext(0, ICS_S_DictionaryCallContext);
    };
    Object.defineProperty(ImplicitCallStmt_InStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_implicitCallStmt_InStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ImplicitCallStmt_InStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterImplicitCallStmt_InStmt) {
            listener.enterImplicitCallStmt_InStmt(this);
        }
    };
    // @Override
    ImplicitCallStmt_InStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitImplicitCallStmt_InStmt) {
            listener.exitImplicitCallStmt_InStmt(this);
        }
    };
    // @Override
    ImplicitCallStmt_InStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitImplicitCallStmt_InStmt) {
            return visitor.visitImplicitCallStmt_InStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ImplicitCallStmt_InStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ImplicitCallStmt_InStmtContext = ImplicitCallStmt_InStmtContext;
var ICS_S_VariableOrProcedureCallContext = /** @class */ (function (_super) {
    __extends(ICS_S_VariableOrProcedureCallContext, _super);
    function ICS_S_VariableOrProcedureCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ICS_S_VariableOrProcedureCallContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    ICS_S_VariableOrProcedureCallContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    ICS_S_VariableOrProcedureCallContext.prototype.dictionaryCallStmt = function () {
        return this.tryGetRuleContext(0, DictionaryCallStmtContext);
    };
    ICS_S_VariableOrProcedureCallContext.prototype.LPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.LPAREN);
        }
        else {
            return this.getToken(vbaParser.LPAREN, i);
        }
    };
    ICS_S_VariableOrProcedureCallContext.prototype.subscripts = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubscriptsContext);
        }
        else {
            return this.getRuleContext(i, SubscriptsContext);
        }
    };
    ICS_S_VariableOrProcedureCallContext.prototype.RPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.RPAREN);
        }
        else {
            return this.getToken(vbaParser.RPAREN, i);
        }
    };
    ICS_S_VariableOrProcedureCallContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(ICS_S_VariableOrProcedureCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_iCS_S_VariableOrProcedureCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ICS_S_VariableOrProcedureCallContext.prototype.enterRule = function (listener) {
        if (listener.enterICS_S_VariableOrProcedureCall) {
            listener.enterICS_S_VariableOrProcedureCall(this);
        }
    };
    // @Override
    ICS_S_VariableOrProcedureCallContext.prototype.exitRule = function (listener) {
        if (listener.exitICS_S_VariableOrProcedureCall) {
            listener.exitICS_S_VariableOrProcedureCall(this);
        }
    };
    // @Override
    ICS_S_VariableOrProcedureCallContext.prototype.accept = function (visitor) {
        if (visitor.visitICS_S_VariableOrProcedureCall) {
            return visitor.visitICS_S_VariableOrProcedureCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ICS_S_VariableOrProcedureCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ICS_S_VariableOrProcedureCallContext = ICS_S_VariableOrProcedureCallContext;
var ICS_S_ProcedureOrArrayCallContext = /** @class */ (function (_super) {
    __extends(ICS_S_ProcedureOrArrayCallContext, _super);
    function ICS_S_ProcedureOrArrayCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ICS_S_ProcedureOrArrayCallContext.prototype.LPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.LPAREN);
        }
        else {
            return this.getToken(vbaParser.LPAREN, i);
        }
    };
    ICS_S_ProcedureOrArrayCallContext.prototype.RPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.RPAREN);
        }
        else {
            return this.getToken(vbaParser.RPAREN, i);
        }
    };
    ICS_S_ProcedureOrArrayCallContext.prototype.ambiguousIdentifier = function () {
        return this.tryGetRuleContext(0, AmbiguousIdentifierContext);
    };
    ICS_S_ProcedureOrArrayCallContext.prototype.baseType = function () {
        return this.tryGetRuleContext(0, BaseTypeContext);
    };
    ICS_S_ProcedureOrArrayCallContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    ICS_S_ProcedureOrArrayCallContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ICS_S_ProcedureOrArrayCallContext.prototype.argsCall = function () {
        return this.tryGetRuleContext(0, ArgsCallContext);
    };
    ICS_S_ProcedureOrArrayCallContext.prototype.dictionaryCallStmt = function () {
        return this.tryGetRuleContext(0, DictionaryCallStmtContext);
    };
    ICS_S_ProcedureOrArrayCallContext.prototype.subscripts = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubscriptsContext);
        }
        else {
            return this.getRuleContext(i, SubscriptsContext);
        }
    };
    Object.defineProperty(ICS_S_ProcedureOrArrayCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_iCS_S_ProcedureOrArrayCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ICS_S_ProcedureOrArrayCallContext.prototype.enterRule = function (listener) {
        if (listener.enterICS_S_ProcedureOrArrayCall) {
            listener.enterICS_S_ProcedureOrArrayCall(this);
        }
    };
    // @Override
    ICS_S_ProcedureOrArrayCallContext.prototype.exitRule = function (listener) {
        if (listener.exitICS_S_ProcedureOrArrayCall) {
            listener.exitICS_S_ProcedureOrArrayCall(this);
        }
    };
    // @Override
    ICS_S_ProcedureOrArrayCallContext.prototype.accept = function (visitor) {
        if (visitor.visitICS_S_ProcedureOrArrayCall) {
            return visitor.visitICS_S_ProcedureOrArrayCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ICS_S_ProcedureOrArrayCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ICS_S_ProcedureOrArrayCallContext = ICS_S_ProcedureOrArrayCallContext;
var ICS_S_MembersCallContext = /** @class */ (function (_super) {
    __extends(ICS_S_MembersCallContext, _super);
    function ICS_S_MembersCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ICS_S_MembersCallContext.prototype.iCS_S_VariableOrProcedureCall = function () {
        return this.tryGetRuleContext(0, ICS_S_VariableOrProcedureCallContext);
    };
    ICS_S_MembersCallContext.prototype.iCS_S_ProcedureOrArrayCall = function () {
        return this.tryGetRuleContext(0, ICS_S_ProcedureOrArrayCallContext);
    };
    ICS_S_MembersCallContext.prototype.iCS_S_MemberCall = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ICS_S_MemberCallContext);
        }
        else {
            return this.getRuleContext(i, ICS_S_MemberCallContext);
        }
    };
    ICS_S_MembersCallContext.prototype.dictionaryCallStmt = function () {
        return this.tryGetRuleContext(0, DictionaryCallStmtContext);
    };
    ICS_S_MembersCallContext.prototype.LPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.LPAREN);
        }
        else {
            return this.getToken(vbaParser.LPAREN, i);
        }
    };
    ICS_S_MembersCallContext.prototype.subscripts = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubscriptsContext);
        }
        else {
            return this.getRuleContext(i, SubscriptsContext);
        }
    };
    ICS_S_MembersCallContext.prototype.RPAREN = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.RPAREN);
        }
        else {
            return this.getToken(vbaParser.RPAREN, i);
        }
    };
    ICS_S_MembersCallContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(ICS_S_MembersCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_iCS_S_MembersCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ICS_S_MembersCallContext.prototype.enterRule = function (listener) {
        if (listener.enterICS_S_MembersCall) {
            listener.enterICS_S_MembersCall(this);
        }
    };
    // @Override
    ICS_S_MembersCallContext.prototype.exitRule = function (listener) {
        if (listener.exitICS_S_MembersCall) {
            listener.exitICS_S_MembersCall(this);
        }
    };
    // @Override
    ICS_S_MembersCallContext.prototype.accept = function (visitor) {
        if (visitor.visitICS_S_MembersCall) {
            return visitor.visitICS_S_MembersCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ICS_S_MembersCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ICS_S_MembersCallContext = ICS_S_MembersCallContext;
var ICS_S_MemberCallContext = /** @class */ (function (_super) {
    __extends(ICS_S_MemberCallContext, _super);
    function ICS_S_MemberCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ICS_S_MemberCallContext.prototype.iCS_S_VariableOrProcedureCall = function () {
        return this.tryGetRuleContext(0, ICS_S_VariableOrProcedureCallContext);
    };
    ICS_S_MemberCallContext.prototype.iCS_S_ProcedureOrArrayCall = function () {
        return this.tryGetRuleContext(0, ICS_S_ProcedureOrArrayCallContext);
    };
    Object.defineProperty(ICS_S_MemberCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_iCS_S_MemberCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ICS_S_MemberCallContext.prototype.enterRule = function (listener) {
        if (listener.enterICS_S_MemberCall) {
            listener.enterICS_S_MemberCall(this);
        }
    };
    // @Override
    ICS_S_MemberCallContext.prototype.exitRule = function (listener) {
        if (listener.exitICS_S_MemberCall) {
            listener.exitICS_S_MemberCall(this);
        }
    };
    // @Override
    ICS_S_MemberCallContext.prototype.accept = function (visitor) {
        if (visitor.visitICS_S_MemberCall) {
            return visitor.visitICS_S_MemberCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ICS_S_MemberCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ICS_S_MemberCallContext = ICS_S_MemberCallContext;
var ICS_S_DictionaryCallContext = /** @class */ (function (_super) {
    __extends(ICS_S_DictionaryCallContext, _super);
    function ICS_S_DictionaryCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ICS_S_DictionaryCallContext.prototype.dictionaryCallStmt = function () {
        return this.getRuleContext(0, DictionaryCallStmtContext);
    };
    Object.defineProperty(ICS_S_DictionaryCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_iCS_S_DictionaryCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ICS_S_DictionaryCallContext.prototype.enterRule = function (listener) {
        if (listener.enterICS_S_DictionaryCall) {
            listener.enterICS_S_DictionaryCall(this);
        }
    };
    // @Override
    ICS_S_DictionaryCallContext.prototype.exitRule = function (listener) {
        if (listener.exitICS_S_DictionaryCall) {
            listener.exitICS_S_DictionaryCall(this);
        }
    };
    // @Override
    ICS_S_DictionaryCallContext.prototype.accept = function (visitor) {
        if (visitor.visitICS_S_DictionaryCall) {
            return visitor.visitICS_S_DictionaryCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ICS_S_DictionaryCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ICS_S_DictionaryCallContext = ICS_S_DictionaryCallContext;
var ArgsCallContext = /** @class */ (function (_super) {
    __extends(ArgsCallContext, _super);
    function ArgsCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArgsCallContext.prototype.argCall = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ArgCallContext);
        }
        else {
            return this.getRuleContext(i, ArgCallContext);
        }
    };
    ArgsCallContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(ArgsCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_argsCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArgsCallContext.prototype.enterRule = function (listener) {
        if (listener.enterArgsCall) {
            listener.enterArgsCall(this);
        }
    };
    // @Override
    ArgsCallContext.prototype.exitRule = function (listener) {
        if (listener.exitArgsCall) {
            listener.exitArgsCall(this);
        }
    };
    // @Override
    ArgsCallContext.prototype.accept = function (visitor) {
        if (visitor.visitArgsCall) {
            return visitor.visitArgsCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArgsCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArgsCallContext = ArgsCallContext;
var ArgCallContext = /** @class */ (function (_super) {
    __extends(ArgCallContext, _super);
    function ArgCallContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArgCallContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    ArgCallContext.prototype.LPAREN = function () { return this.tryGetToken(vbaParser.LPAREN, 0); };
    ArgCallContext.prototype.WS = function () { return this.tryGetToken(vbaParser.WS, 0); };
    ArgCallContext.prototype.RPAREN = function () { return this.tryGetToken(vbaParser.RPAREN, 0); };
    ArgCallContext.prototype.BYVAL = function () { return this.tryGetToken(vbaParser.BYVAL, 0); };
    ArgCallContext.prototype.BYREF = function () { return this.tryGetToken(vbaParser.BYREF, 0); };
    ArgCallContext.prototype.PARAMARRAY = function () { return this.tryGetToken(vbaParser.PARAMARRAY, 0); };
    Object.defineProperty(ArgCallContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_argCall; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArgCallContext.prototype.enterRule = function (listener) {
        if (listener.enterArgCall) {
            listener.enterArgCall(this);
        }
    };
    // @Override
    ArgCallContext.prototype.exitRule = function (listener) {
        if (listener.exitArgCall) {
            listener.exitArgCall(this);
        }
    };
    // @Override
    ArgCallContext.prototype.accept = function (visitor) {
        if (visitor.visitArgCall) {
            return visitor.visitArgCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArgCallContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArgCallContext = ArgCallContext;
var DictionaryCallStmtContext = /** @class */ (function (_super) {
    __extends(DictionaryCallStmtContext, _super);
    function DictionaryCallStmtContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DictionaryCallStmtContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    DictionaryCallStmtContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    Object.defineProperty(DictionaryCallStmtContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_dictionaryCallStmt; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DictionaryCallStmtContext.prototype.enterRule = function (listener) {
        if (listener.enterDictionaryCallStmt) {
            listener.enterDictionaryCallStmt(this);
        }
    };
    // @Override
    DictionaryCallStmtContext.prototype.exitRule = function (listener) {
        if (listener.exitDictionaryCallStmt) {
            listener.exitDictionaryCallStmt(this);
        }
    };
    // @Override
    DictionaryCallStmtContext.prototype.accept = function (visitor) {
        if (visitor.visitDictionaryCallStmt) {
            return visitor.visitDictionaryCallStmt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DictionaryCallStmtContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DictionaryCallStmtContext = DictionaryCallStmtContext;
var ArgListContext = /** @class */ (function (_super) {
    __extends(ArgListContext, _super);
    function ArgListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArgListContext.prototype.LPAREN = function () { return this.getToken(vbaParser.LPAREN, 0); };
    ArgListContext.prototype.RPAREN = function () { return this.getToken(vbaParser.RPAREN, 0); };
    ArgListContext.prototype.arg = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ArgContext);
        }
        else {
            return this.getRuleContext(i, ArgContext);
        }
    };
    ArgListContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(ArgListContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_argList; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArgListContext.prototype.enterRule = function (listener) {
        if (listener.enterArgList) {
            listener.enterArgList(this);
        }
    };
    // @Override
    ArgListContext.prototype.exitRule = function (listener) {
        if (listener.exitArgList) {
            listener.exitArgList(this);
        }
    };
    // @Override
    ArgListContext.prototype.accept = function (visitor) {
        if (visitor.visitArgList) {
            return visitor.visitArgList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArgListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArgListContext = ArgListContext;
var ArgContext = /** @class */ (function (_super) {
    __extends(ArgContext, _super);
    function ArgContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArgContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    ArgContext.prototype.OPTIONAL = function () { return this.tryGetToken(vbaParser.OPTIONAL, 0); };
    ArgContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    ArgContext.prototype.PARAMARRAY = function () { return this.tryGetToken(vbaParser.PARAMARRAY, 0); };
    ArgContext.prototype.typeHint = function () {
        return this.tryGetRuleContext(0, TypeHintContext);
    };
    ArgContext.prototype.LPAREN = function () { return this.tryGetToken(vbaParser.LPAREN, 0); };
    ArgContext.prototype.RPAREN = function () { return this.tryGetToken(vbaParser.RPAREN, 0); };
    ArgContext.prototype.asTypeClause = function () {
        return this.tryGetRuleContext(0, AsTypeClauseContext);
    };
    ArgContext.prototype.argDefaultValue = function () {
        return this.tryGetRuleContext(0, ArgDefaultValueContext);
    };
    ArgContext.prototype.BYVAL = function () { return this.tryGetToken(vbaParser.BYVAL, 0); };
    ArgContext.prototype.BYREF = function () { return this.tryGetToken(vbaParser.BYREF, 0); };
    Object.defineProperty(ArgContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_arg; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArgContext.prototype.enterRule = function (listener) {
        if (listener.enterArg) {
            listener.enterArg(this);
        }
    };
    // @Override
    ArgContext.prototype.exitRule = function (listener) {
        if (listener.exitArg) {
            listener.exitArg(this);
        }
    };
    // @Override
    ArgContext.prototype.accept = function (visitor) {
        if (visitor.visitArg) {
            return visitor.visitArg(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArgContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArgContext = ArgContext;
var ArgDefaultValueContext = /** @class */ (function (_super) {
    __extends(ArgDefaultValueContext, _super);
    function ArgDefaultValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArgDefaultValueContext.prototype.EQ = function () { return this.getToken(vbaParser.EQ, 0); };
    ArgDefaultValueContext.prototype.valueStmt = function () {
        return this.getRuleContext(0, ValueStmtContext);
    };
    ArgDefaultValueContext.prototype.WS = function () { return this.tryGetToken(vbaParser.WS, 0); };
    Object.defineProperty(ArgDefaultValueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_argDefaultValue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ArgDefaultValueContext.prototype.enterRule = function (listener) {
        if (listener.enterArgDefaultValue) {
            listener.enterArgDefaultValue(this);
        }
    };
    // @Override
    ArgDefaultValueContext.prototype.exitRule = function (listener) {
        if (listener.exitArgDefaultValue) {
            listener.exitArgDefaultValue(this);
        }
    };
    // @Override
    ArgDefaultValueContext.prototype.accept = function (visitor) {
        if (visitor.visitArgDefaultValue) {
            return visitor.visitArgDefaultValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ArgDefaultValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArgDefaultValueContext = ArgDefaultValueContext;
var SubscriptsContext = /** @class */ (function (_super) {
    __extends(SubscriptsContext, _super);
    function SubscriptsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubscriptsContext.prototype.subscript = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SubscriptContext);
        }
        else {
            return this.getRuleContext(i, SubscriptContext);
        }
    };
    SubscriptsContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(SubscriptsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_subscripts; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubscriptsContext.prototype.enterRule = function (listener) {
        if (listener.enterSubscripts) {
            listener.enterSubscripts(this);
        }
    };
    // @Override
    SubscriptsContext.prototype.exitRule = function (listener) {
        if (listener.exitSubscripts) {
            listener.exitSubscripts(this);
        }
    };
    // @Override
    SubscriptsContext.prototype.accept = function (visitor) {
        if (visitor.visitSubscripts) {
            return visitor.visitSubscripts(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubscriptsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubscriptsContext = SubscriptsContext;
var SubscriptContext = /** @class */ (function (_super) {
    __extends(SubscriptContext, _super);
    function SubscriptContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SubscriptContext.prototype.valueStmt = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueStmtContext);
        }
        else {
            return this.getRuleContext(i, ValueStmtContext);
        }
    };
    SubscriptContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    SubscriptContext.prototype.TO = function () { return this.tryGetToken(vbaParser.TO, 0); };
    Object.defineProperty(SubscriptContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_subscript; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SubscriptContext.prototype.enterRule = function (listener) {
        if (listener.enterSubscript) {
            listener.enterSubscript(this);
        }
    };
    // @Override
    SubscriptContext.prototype.exitRule = function (listener) {
        if (listener.exitSubscript) {
            listener.exitSubscript(this);
        }
    };
    // @Override
    SubscriptContext.prototype.accept = function (visitor) {
        if (visitor.visitSubscript) {
            return visitor.visitSubscript(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SubscriptContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SubscriptContext = SubscriptContext;
var AmbiguousIdentifierContext = /** @class */ (function (_super) {
    __extends(AmbiguousIdentifierContext, _super);
    function AmbiguousIdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AmbiguousIdentifierContext.prototype.IDENTIFIER = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.IDENTIFIER);
        }
        else {
            return this.getToken(vbaParser.IDENTIFIER, i);
        }
    };
    AmbiguousIdentifierContext.prototype.ambiguousKeyword = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AmbiguousKeywordContext);
        }
        else {
            return this.getRuleContext(i, AmbiguousKeywordContext);
        }
    };
    Object.defineProperty(AmbiguousIdentifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_ambiguousIdentifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AmbiguousIdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterAmbiguousIdentifier) {
            listener.enterAmbiguousIdentifier(this);
        }
    };
    // @Override
    AmbiguousIdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitAmbiguousIdentifier) {
            listener.exitAmbiguousIdentifier(this);
        }
    };
    // @Override
    AmbiguousIdentifierContext.prototype.accept = function (visitor) {
        if (visitor.visitAmbiguousIdentifier) {
            return visitor.visitAmbiguousIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AmbiguousIdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AmbiguousIdentifierContext = AmbiguousIdentifierContext;
var AsTypeClauseContext = /** @class */ (function (_super) {
    __extends(AsTypeClauseContext, _super);
    function AsTypeClauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AsTypeClauseContext.prototype.AS = function () { return this.getToken(vbaParser.AS, 0); };
    AsTypeClauseContext.prototype.type = function () {
        return this.getRuleContext(0, TypeContext);
    };
    AsTypeClauseContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    AsTypeClauseContext.prototype.NEW = function () { return this.tryGetToken(vbaParser.NEW, 0); };
    AsTypeClauseContext.prototype.fieldLength = function () {
        return this.tryGetRuleContext(0, FieldLengthContext);
    };
    Object.defineProperty(AsTypeClauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_asTypeClause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AsTypeClauseContext.prototype.enterRule = function (listener) {
        if (listener.enterAsTypeClause) {
            listener.enterAsTypeClause(this);
        }
    };
    // @Override
    AsTypeClauseContext.prototype.exitRule = function (listener) {
        if (listener.exitAsTypeClause) {
            listener.exitAsTypeClause(this);
        }
    };
    // @Override
    AsTypeClauseContext.prototype.accept = function (visitor) {
        if (visitor.visitAsTypeClause) {
            return visitor.visitAsTypeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AsTypeClauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AsTypeClauseContext = AsTypeClauseContext;
var BaseTypeContext = /** @class */ (function (_super) {
    __extends(BaseTypeContext, _super);
    function BaseTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BaseTypeContext.prototype.BOOLEAN = function () { return this.tryGetToken(vbaParser.BOOLEAN, 0); };
    BaseTypeContext.prototype.BYTE = function () { return this.tryGetToken(vbaParser.BYTE, 0); };
    BaseTypeContext.prototype.COLLECTION = function () { return this.tryGetToken(vbaParser.COLLECTION, 0); };
    BaseTypeContext.prototype.DATE = function () { return this.tryGetToken(vbaParser.DATE, 0); };
    BaseTypeContext.prototype.DOUBLE = function () { return this.tryGetToken(vbaParser.DOUBLE, 0); };
    BaseTypeContext.prototype.INTEGER = function () { return this.tryGetToken(vbaParser.INTEGER, 0); };
    BaseTypeContext.prototype.LONG = function () { return this.tryGetToken(vbaParser.LONG, 0); };
    BaseTypeContext.prototype.SINGLE = function () { return this.tryGetToken(vbaParser.SINGLE, 0); };
    BaseTypeContext.prototype.STRING = function () { return this.tryGetToken(vbaParser.STRING, 0); };
    BaseTypeContext.prototype.MULT = function () { return this.tryGetToken(vbaParser.MULT, 0); };
    BaseTypeContext.prototype.valueStmt = function () {
        return this.tryGetRuleContext(0, ValueStmtContext);
    };
    BaseTypeContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    BaseTypeContext.prototype.VARIANT = function () { return this.tryGetToken(vbaParser.VARIANT, 0); };
    Object.defineProperty(BaseTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_baseType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    BaseTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterBaseType) {
            listener.enterBaseType(this);
        }
    };
    // @Override
    BaseTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitBaseType) {
            listener.exitBaseType(this);
        }
    };
    // @Override
    BaseTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitBaseType) {
            return visitor.visitBaseType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return BaseTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BaseTypeContext = BaseTypeContext;
var CertainIdentifierContext = /** @class */ (function (_super) {
    __extends(CertainIdentifierContext, _super);
    function CertainIdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CertainIdentifierContext.prototype.IDENTIFIER = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.IDENTIFIER);
        }
        else {
            return this.getToken(vbaParser.IDENTIFIER, i);
        }
    };
    CertainIdentifierContext.prototype.ambiguousKeyword = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AmbiguousKeywordContext);
        }
        else {
            return this.getRuleContext(i, AmbiguousKeywordContext);
        }
    };
    Object.defineProperty(CertainIdentifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_certainIdentifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CertainIdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterCertainIdentifier) {
            listener.enterCertainIdentifier(this);
        }
    };
    // @Override
    CertainIdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitCertainIdentifier) {
            listener.exitCertainIdentifier(this);
        }
    };
    // @Override
    CertainIdentifierContext.prototype.accept = function (visitor) {
        if (visitor.visitCertainIdentifier) {
            return visitor.visitCertainIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CertainIdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CertainIdentifierContext = CertainIdentifierContext;
var ComparisonOperatorContext = /** @class */ (function (_super) {
    __extends(ComparisonOperatorContext, _super);
    function ComparisonOperatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ComparisonOperatorContext.prototype.LT = function () { return this.tryGetToken(vbaParser.LT, 0); };
    ComparisonOperatorContext.prototype.LEQ = function () { return this.tryGetToken(vbaParser.LEQ, 0); };
    ComparisonOperatorContext.prototype.GT = function () { return this.tryGetToken(vbaParser.GT, 0); };
    ComparisonOperatorContext.prototype.GEQ = function () { return this.tryGetToken(vbaParser.GEQ, 0); };
    ComparisonOperatorContext.prototype.EQ = function () { return this.tryGetToken(vbaParser.EQ, 0); };
    ComparisonOperatorContext.prototype.NEQ = function () { return this.tryGetToken(vbaParser.NEQ, 0); };
    ComparisonOperatorContext.prototype.IS = function () { return this.tryGetToken(vbaParser.IS, 0); };
    ComparisonOperatorContext.prototype.LIKE = function () { return this.tryGetToken(vbaParser.LIKE, 0); };
    Object.defineProperty(ComparisonOperatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_comparisonOperator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ComparisonOperatorContext.prototype.enterRule = function (listener) {
        if (listener.enterComparisonOperator) {
            listener.enterComparisonOperator(this);
        }
    };
    // @Override
    ComparisonOperatorContext.prototype.exitRule = function (listener) {
        if (listener.exitComparisonOperator) {
            listener.exitComparisonOperator(this);
        }
    };
    // @Override
    ComparisonOperatorContext.prototype.accept = function (visitor) {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ComparisonOperatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ComparisonOperatorContext = ComparisonOperatorContext;
var ComplexTypeContext = /** @class */ (function (_super) {
    __extends(ComplexTypeContext, _super);
    function ComplexTypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ComplexTypeContext.prototype.ambiguousIdentifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AmbiguousIdentifierContext);
        }
        else {
            return this.getRuleContext(i, AmbiguousIdentifierContext);
        }
    };
    Object.defineProperty(ComplexTypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_complexType; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ComplexTypeContext.prototype.enterRule = function (listener) {
        if (listener.enterComplexType) {
            listener.enterComplexType(this);
        }
    };
    // @Override
    ComplexTypeContext.prototype.exitRule = function (listener) {
        if (listener.exitComplexType) {
            listener.exitComplexType(this);
        }
    };
    // @Override
    ComplexTypeContext.prototype.accept = function (visitor) {
        if (visitor.visitComplexType) {
            return visitor.visitComplexType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ComplexTypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ComplexTypeContext = ComplexTypeContext;
var FieldLengthContext = /** @class */ (function (_super) {
    __extends(FieldLengthContext, _super);
    function FieldLengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    FieldLengthContext.prototype.MULT = function () { return this.getToken(vbaParser.MULT, 0); };
    FieldLengthContext.prototype.INTEGERLITERAL = function () { return this.tryGetToken(vbaParser.INTEGERLITERAL, 0); };
    FieldLengthContext.prototype.ambiguousIdentifier = function () {
        return this.tryGetRuleContext(0, AmbiguousIdentifierContext);
    };
    FieldLengthContext.prototype.WS = function () { return this.tryGetToken(vbaParser.WS, 0); };
    Object.defineProperty(FieldLengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_fieldLength; },
        enumerable: true,
        configurable: true
    });
    // @Override
    FieldLengthContext.prototype.enterRule = function (listener) {
        if (listener.enterFieldLength) {
            listener.enterFieldLength(this);
        }
    };
    // @Override
    FieldLengthContext.prototype.exitRule = function (listener) {
        if (listener.exitFieldLength) {
            listener.exitFieldLength(this);
        }
    };
    // @Override
    FieldLengthContext.prototype.accept = function (visitor) {
        if (visitor.visitFieldLength) {
            return visitor.visitFieldLength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return FieldLengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.FieldLengthContext = FieldLengthContext;
var LetterrangeContext = /** @class */ (function (_super) {
    __extends(LetterrangeContext, _super);
    function LetterrangeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LetterrangeContext.prototype.certainIdentifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CertainIdentifierContext);
        }
        else {
            return this.getRuleContext(i, CertainIdentifierContext);
        }
    };
    LetterrangeContext.prototype.MINUS = function () { return this.tryGetToken(vbaParser.MINUS, 0); };
    LetterrangeContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(LetterrangeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_letterrange; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LetterrangeContext.prototype.enterRule = function (listener) {
        if (listener.enterLetterrange) {
            listener.enterLetterrange(this);
        }
    };
    // @Override
    LetterrangeContext.prototype.exitRule = function (listener) {
        if (listener.exitLetterrange) {
            listener.exitLetterrange(this);
        }
    };
    // @Override
    LetterrangeContext.prototype.accept = function (visitor) {
        if (visitor.visitLetterrange) {
            return visitor.visitLetterrange(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LetterrangeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LetterrangeContext = LetterrangeContext;
var LineLabelContext = /** @class */ (function (_super) {
    __extends(LineLabelContext, _super);
    function LineLabelContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LineLabelContext.prototype.ambiguousIdentifier = function () {
        return this.getRuleContext(0, AmbiguousIdentifierContext);
    };
    LineLabelContext.prototype.COLON = function () { return this.getToken(vbaParser.COLON, 0); };
    Object.defineProperty(LineLabelContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_lineLabel; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LineLabelContext.prototype.enterRule = function (listener) {
        if (listener.enterLineLabel) {
            listener.enterLineLabel(this);
        }
    };
    // @Override
    LineLabelContext.prototype.exitRule = function (listener) {
        if (listener.exitLineLabel) {
            listener.exitLineLabel(this);
        }
    };
    // @Override
    LineLabelContext.prototype.accept = function (visitor) {
        if (visitor.visitLineLabel) {
            return visitor.visitLineLabel(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LineLabelContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LineLabelContext = LineLabelContext;
var LiteralContext = /** @class */ (function (_super) {
    __extends(LiteralContext, _super);
    function LiteralContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LiteralContext.prototype.HEXLITERAL = function () { return this.tryGetToken(vbaParser.HEXLITERAL, 0); };
    LiteralContext.prototype.OCTLITERAL = function () { return this.tryGetToken(vbaParser.OCTLITERAL, 0); };
    LiteralContext.prototype.DATELITERAL = function () { return this.tryGetToken(vbaParser.DATELITERAL, 0); };
    LiteralContext.prototype.DOUBLELITERAL = function () { return this.tryGetToken(vbaParser.DOUBLELITERAL, 0); };
    LiteralContext.prototype.INTEGERLITERAL = function () { return this.tryGetToken(vbaParser.INTEGERLITERAL, 0); };
    LiteralContext.prototype.SHORTLITERAL = function () { return this.tryGetToken(vbaParser.SHORTLITERAL, 0); };
    LiteralContext.prototype.STRINGLITERAL = function () { return this.tryGetToken(vbaParser.STRINGLITERAL, 0); };
    LiteralContext.prototype.TRUE = function () { return this.tryGetToken(vbaParser.TRUE, 0); };
    LiteralContext.prototype.FALSE = function () { return this.tryGetToken(vbaParser.FALSE, 0); };
    LiteralContext.prototype.NOTHING = function () { return this.tryGetToken(vbaParser.NOTHING, 0); };
    LiteralContext.prototype.NULL = function () { return this.tryGetToken(vbaParser.NULL, 0); };
    Object.defineProperty(LiteralContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_literal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    LiteralContext.prototype.enterRule = function (listener) {
        if (listener.enterLiteral) {
            listener.enterLiteral(this);
        }
    };
    // @Override
    LiteralContext.prototype.exitRule = function (listener) {
        if (listener.exitLiteral) {
            listener.exitLiteral(this);
        }
    };
    // @Override
    LiteralContext.prototype.accept = function (visitor) {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return LiteralContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LiteralContext = LiteralContext;
var TypeContext = /** @class */ (function (_super) {
    __extends(TypeContext, _super);
    function TypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeContext.prototype.baseType = function () {
        return this.tryGetRuleContext(0, BaseTypeContext);
    };
    TypeContext.prototype.complexType = function () {
        return this.tryGetRuleContext(0, ComplexTypeContext);
    };
    TypeContext.prototype.LPAREN = function () { return this.tryGetToken(vbaParser.LPAREN, 0); };
    TypeContext.prototype.RPAREN = function () { return this.tryGetToken(vbaParser.RPAREN, 0); };
    TypeContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(TypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeContext.prototype.enterRule = function (listener) {
        if (listener.enterType) {
            listener.enterType(this);
        }
    };
    // @Override
    TypeContext.prototype.exitRule = function (listener) {
        if (listener.exitType) {
            listener.exitType(this);
        }
    };
    // @Override
    TypeContext.prototype.accept = function (visitor) {
        if (visitor.visitType) {
            return visitor.visitType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeContext = TypeContext;
var TypeHintContext = /** @class */ (function (_super) {
    __extends(TypeHintContext, _super);
    function TypeHintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeHintContext.prototype.AMPERSAND = function () { return this.getToken(vbaParser.AMPERSAND, 0); };
    Object.defineProperty(TypeHintContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_typeHint; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TypeHintContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeHint) {
            listener.enterTypeHint(this);
        }
    };
    // @Override
    TypeHintContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeHint) {
            listener.exitTypeHint(this);
        }
    };
    // @Override
    TypeHintContext.prototype.accept = function (visitor) {
        if (visitor.visitTypeHint) {
            return visitor.visitTypeHint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TypeHintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeHintContext = TypeHintContext;
var VisibilityContext = /** @class */ (function (_super) {
    __extends(VisibilityContext, _super);
    function VisibilityContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    VisibilityContext.prototype.PRIVATE = function () { return this.tryGetToken(vbaParser.PRIVATE, 0); };
    VisibilityContext.prototype.PUBLIC = function () { return this.tryGetToken(vbaParser.PUBLIC, 0); };
    VisibilityContext.prototype.FRIEND = function () { return this.tryGetToken(vbaParser.FRIEND, 0); };
    VisibilityContext.prototype.GLOBAL = function () { return this.tryGetToken(vbaParser.GLOBAL, 0); };
    Object.defineProperty(VisibilityContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_visibility; },
        enumerable: true,
        configurable: true
    });
    // @Override
    VisibilityContext.prototype.enterRule = function (listener) {
        if (listener.enterVisibility) {
            listener.enterVisibility(this);
        }
    };
    // @Override
    VisibilityContext.prototype.exitRule = function (listener) {
        if (listener.exitVisibility) {
            listener.exitVisibility(this);
        }
    };
    // @Override
    VisibilityContext.prototype.accept = function (visitor) {
        if (visitor.visitVisibility) {
            return visitor.visitVisibility(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return VisibilityContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.VisibilityContext = VisibilityContext;
var AmbiguousKeywordContext = /** @class */ (function (_super) {
    __extends(AmbiguousKeywordContext, _super);
    function AmbiguousKeywordContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AmbiguousKeywordContext.prototype.ACCESS = function () { return this.tryGetToken(vbaParser.ACCESS, 0); };
    AmbiguousKeywordContext.prototype.ADDRESSOF = function () { return this.tryGetToken(vbaParser.ADDRESSOF, 0); };
    AmbiguousKeywordContext.prototype.ALIAS = function () { return this.tryGetToken(vbaParser.ALIAS, 0); };
    AmbiguousKeywordContext.prototype.AND = function () { return this.tryGetToken(vbaParser.AND, 0); };
    AmbiguousKeywordContext.prototype.ATTRIBUTE = function () { return this.tryGetToken(vbaParser.ATTRIBUTE, 0); };
    AmbiguousKeywordContext.prototype.APPACTIVATE = function () { return this.tryGetToken(vbaParser.APPACTIVATE, 0); };
    AmbiguousKeywordContext.prototype.APPEND = function () { return this.tryGetToken(vbaParser.APPEND, 0); };
    AmbiguousKeywordContext.prototype.AS = function () { return this.tryGetToken(vbaParser.AS, 0); };
    AmbiguousKeywordContext.prototype.BEEP = function () { return this.tryGetToken(vbaParser.BEEP, 0); };
    AmbiguousKeywordContext.prototype.BEGIN = function () { return this.tryGetToken(vbaParser.BEGIN, 0); };
    AmbiguousKeywordContext.prototype.BINARY = function () { return this.tryGetToken(vbaParser.BINARY, 0); };
    AmbiguousKeywordContext.prototype.BOOLEAN = function () { return this.tryGetToken(vbaParser.BOOLEAN, 0); };
    AmbiguousKeywordContext.prototype.BYVAL = function () { return this.tryGetToken(vbaParser.BYVAL, 0); };
    AmbiguousKeywordContext.prototype.BYREF = function () { return this.tryGetToken(vbaParser.BYREF, 0); };
    AmbiguousKeywordContext.prototype.BYTE = function () { return this.tryGetToken(vbaParser.BYTE, 0); };
    AmbiguousKeywordContext.prototype.CALL = function () { return this.tryGetToken(vbaParser.CALL, 0); };
    AmbiguousKeywordContext.prototype.CASE = function () { return this.tryGetToken(vbaParser.CASE, 0); };
    AmbiguousKeywordContext.prototype.CLASS = function () { return this.tryGetToken(vbaParser.CLASS, 0); };
    AmbiguousKeywordContext.prototype.CLOSE = function () { return this.tryGetToken(vbaParser.CLOSE, 0); };
    AmbiguousKeywordContext.prototype.CHDIR = function () { return this.tryGetToken(vbaParser.CHDIR, 0); };
    AmbiguousKeywordContext.prototype.CHDRIVE = function () { return this.tryGetToken(vbaParser.CHDRIVE, 0); };
    AmbiguousKeywordContext.prototype.COLLECTION = function () { return this.tryGetToken(vbaParser.COLLECTION, 0); };
    AmbiguousKeywordContext.prototype.CONST = function () { return this.tryGetToken(vbaParser.CONST, 0); };
    AmbiguousKeywordContext.prototype.DATABASE = function () { return this.tryGetToken(vbaParser.DATABASE, 0); };
    AmbiguousKeywordContext.prototype.DATE = function () { return this.tryGetToken(vbaParser.DATE, 0); };
    AmbiguousKeywordContext.prototype.DECLARE = function () { return this.tryGetToken(vbaParser.DECLARE, 0); };
    AmbiguousKeywordContext.prototype.DEFBOOL = function () { return this.tryGetToken(vbaParser.DEFBOOL, 0); };
    AmbiguousKeywordContext.prototype.DEFBYTE = function () { return this.tryGetToken(vbaParser.DEFBYTE, 0); };
    AmbiguousKeywordContext.prototype.DEFCUR = function () { return this.tryGetToken(vbaParser.DEFCUR, 0); };
    AmbiguousKeywordContext.prototype.DEFDBL = function () { return this.tryGetToken(vbaParser.DEFDBL, 0); };
    AmbiguousKeywordContext.prototype.DEFDATE = function () { return this.tryGetToken(vbaParser.DEFDATE, 0); };
    AmbiguousKeywordContext.prototype.DEFDEC = function () { return this.tryGetToken(vbaParser.DEFDEC, 0); };
    AmbiguousKeywordContext.prototype.DEFINT = function () { return this.tryGetToken(vbaParser.DEFINT, 0); };
    AmbiguousKeywordContext.prototype.DEFLNG = function () { return this.tryGetToken(vbaParser.DEFLNG, 0); };
    AmbiguousKeywordContext.prototype.DEFOBJ = function () { return this.tryGetToken(vbaParser.DEFOBJ, 0); };
    AmbiguousKeywordContext.prototype.DEFSNG = function () { return this.tryGetToken(vbaParser.DEFSNG, 0); };
    AmbiguousKeywordContext.prototype.DEFSTR = function () { return this.tryGetToken(vbaParser.DEFSTR, 0); };
    AmbiguousKeywordContext.prototype.DEFVAR = function () { return this.tryGetToken(vbaParser.DEFVAR, 0); };
    AmbiguousKeywordContext.prototype.DELETESETTING = function () { return this.tryGetToken(vbaParser.DELETESETTING, 0); };
    AmbiguousKeywordContext.prototype.DIM = function () { return this.tryGetToken(vbaParser.DIM, 0); };
    AmbiguousKeywordContext.prototype.DO = function () { return this.tryGetToken(vbaParser.DO, 0); };
    AmbiguousKeywordContext.prototype.DOUBLE = function () { return this.tryGetToken(vbaParser.DOUBLE, 0); };
    AmbiguousKeywordContext.prototype.EACH = function () { return this.tryGetToken(vbaParser.EACH, 0); };
    AmbiguousKeywordContext.prototype.ELSE = function () { return this.tryGetToken(vbaParser.ELSE, 0); };
    AmbiguousKeywordContext.prototype.ELSEIF = function () { return this.tryGetToken(vbaParser.ELSEIF, 0); };
    AmbiguousKeywordContext.prototype.END = function () { return this.tryGetToken(vbaParser.END, 0); };
    AmbiguousKeywordContext.prototype.ENUM = function () { return this.tryGetToken(vbaParser.ENUM, 0); };
    AmbiguousKeywordContext.prototype.EQV = function () { return this.tryGetToken(vbaParser.EQV, 0); };
    AmbiguousKeywordContext.prototype.ERASE = function () { return this.tryGetToken(vbaParser.ERASE, 0); };
    AmbiguousKeywordContext.prototype.ERROR = function () { return this.tryGetToken(vbaParser.ERROR, 0); };
    AmbiguousKeywordContext.prototype.EVENT = function () { return this.tryGetToken(vbaParser.EVENT, 0); };
    AmbiguousKeywordContext.prototype.FALSE = function () { return this.tryGetToken(vbaParser.FALSE, 0); };
    AmbiguousKeywordContext.prototype.FILECOPY = function () { return this.tryGetToken(vbaParser.FILECOPY, 0); };
    AmbiguousKeywordContext.prototype.FRIEND = function () { return this.tryGetToken(vbaParser.FRIEND, 0); };
    AmbiguousKeywordContext.prototype.FOR = function () { return this.tryGetToken(vbaParser.FOR, 0); };
    AmbiguousKeywordContext.prototype.FUNCTION = function () { return this.tryGetToken(vbaParser.FUNCTION, 0); };
    AmbiguousKeywordContext.prototype.GET = function () { return this.tryGetToken(vbaParser.GET, 0); };
    AmbiguousKeywordContext.prototype.GLOBAL = function () { return this.tryGetToken(vbaParser.GLOBAL, 0); };
    AmbiguousKeywordContext.prototype.GOSUB = function () { return this.tryGetToken(vbaParser.GOSUB, 0); };
    AmbiguousKeywordContext.prototype.GOTO = function () { return this.tryGetToken(vbaParser.GOTO, 0); };
    AmbiguousKeywordContext.prototype.IF = function () { return this.tryGetToken(vbaParser.IF, 0); };
    AmbiguousKeywordContext.prototype.IMP = function () { return this.tryGetToken(vbaParser.IMP, 0); };
    AmbiguousKeywordContext.prototype.IMPLEMENTS = function () { return this.tryGetToken(vbaParser.IMPLEMENTS, 0); };
    AmbiguousKeywordContext.prototype.IN = function () { return this.tryGetToken(vbaParser.IN, 0); };
    AmbiguousKeywordContext.prototype.INPUT = function () { return this.tryGetToken(vbaParser.INPUT, 0); };
    AmbiguousKeywordContext.prototype.IS = function () { return this.tryGetToken(vbaParser.IS, 0); };
    AmbiguousKeywordContext.prototype.INTEGER = function () { return this.tryGetToken(vbaParser.INTEGER, 0); };
    AmbiguousKeywordContext.prototype.KILL = function () { return this.tryGetToken(vbaParser.KILL, 0); };
    AmbiguousKeywordContext.prototype.LOAD = function () { return this.tryGetToken(vbaParser.LOAD, 0); };
    AmbiguousKeywordContext.prototype.LOCK = function () { return this.tryGetToken(vbaParser.LOCK, 0); };
    AmbiguousKeywordContext.prototype.LONG = function () { return this.tryGetToken(vbaParser.LONG, 0); };
    AmbiguousKeywordContext.prototype.LOOP = function () { return this.tryGetToken(vbaParser.LOOP, 0); };
    AmbiguousKeywordContext.prototype.LEN = function () { return this.tryGetToken(vbaParser.LEN, 0); };
    AmbiguousKeywordContext.prototype.LET = function () { return this.tryGetToken(vbaParser.LET, 0); };
    AmbiguousKeywordContext.prototype.LIB = function () { return this.tryGetToken(vbaParser.LIB, 0); };
    AmbiguousKeywordContext.prototype.LIKE = function () { return this.tryGetToken(vbaParser.LIKE, 0); };
    AmbiguousKeywordContext.prototype.LSET = function () { return this.tryGetToken(vbaParser.LSET, 0); };
    AmbiguousKeywordContext.prototype.ME = function () { return this.tryGetToken(vbaParser.ME, 0); };
    AmbiguousKeywordContext.prototype.MID = function () { return this.tryGetToken(vbaParser.MID, 0); };
    AmbiguousKeywordContext.prototype.MKDIR = function () { return this.tryGetToken(vbaParser.MKDIR, 0); };
    AmbiguousKeywordContext.prototype.MOD = function () { return this.tryGetToken(vbaParser.MOD, 0); };
    AmbiguousKeywordContext.prototype.NAME = function () { return this.tryGetToken(vbaParser.NAME, 0); };
    AmbiguousKeywordContext.prototype.NEXT = function () { return this.tryGetToken(vbaParser.NEXT, 0); };
    AmbiguousKeywordContext.prototype.NEW = function () { return this.tryGetToken(vbaParser.NEW, 0); };
    AmbiguousKeywordContext.prototype.NOT = function () { return this.tryGetToken(vbaParser.NOT, 0); };
    AmbiguousKeywordContext.prototype.NOTHING = function () { return this.tryGetToken(vbaParser.NOTHING, 0); };
    AmbiguousKeywordContext.prototype.NULL = function () { return this.tryGetToken(vbaParser.NULL, 0); };
    AmbiguousKeywordContext.prototype.ON = function () { return this.tryGetToken(vbaParser.ON, 0); };
    AmbiguousKeywordContext.prototype.OPEN = function () { return this.tryGetToken(vbaParser.OPEN, 0); };
    AmbiguousKeywordContext.prototype.OPTIONAL = function () { return this.tryGetToken(vbaParser.OPTIONAL, 0); };
    AmbiguousKeywordContext.prototype.OR = function () { return this.tryGetToken(vbaParser.OR, 0); };
    AmbiguousKeywordContext.prototype.OUTPUT = function () { return this.tryGetToken(vbaParser.OUTPUT, 0); };
    AmbiguousKeywordContext.prototype.PARAMARRAY = function () { return this.tryGetToken(vbaParser.PARAMARRAY, 0); };
    AmbiguousKeywordContext.prototype.PRESERVE = function () { return this.tryGetToken(vbaParser.PRESERVE, 0); };
    AmbiguousKeywordContext.prototype.PRINT = function () { return this.tryGetToken(vbaParser.PRINT, 0); };
    AmbiguousKeywordContext.prototype.PRIVATE = function () { return this.tryGetToken(vbaParser.PRIVATE, 0); };
    AmbiguousKeywordContext.prototype.PUBLIC = function () { return this.tryGetToken(vbaParser.PUBLIC, 0); };
    AmbiguousKeywordContext.prototype.PUT = function () { return this.tryGetToken(vbaParser.PUT, 0); };
    AmbiguousKeywordContext.prototype.RANDOM = function () { return this.tryGetToken(vbaParser.RANDOM, 0); };
    AmbiguousKeywordContext.prototype.RANDOMIZE = function () { return this.tryGetToken(vbaParser.RANDOMIZE, 0); };
    AmbiguousKeywordContext.prototype.RAISEEVENT = function () { return this.tryGetToken(vbaParser.RAISEEVENT, 0); };
    AmbiguousKeywordContext.prototype.READ = function () { return this.tryGetToken(vbaParser.READ, 0); };
    AmbiguousKeywordContext.prototype.REDIM = function () { return this.tryGetToken(vbaParser.REDIM, 0); };
    AmbiguousKeywordContext.prototype.REM = function () { return this.tryGetToken(vbaParser.REM, 0); };
    AmbiguousKeywordContext.prototype.RESET = function () { return this.tryGetToken(vbaParser.RESET, 0); };
    AmbiguousKeywordContext.prototype.RESUME = function () { return this.tryGetToken(vbaParser.RESUME, 0); };
    AmbiguousKeywordContext.prototype.RETURN = function () { return this.tryGetToken(vbaParser.RETURN, 0); };
    AmbiguousKeywordContext.prototype.RMDIR = function () { return this.tryGetToken(vbaParser.RMDIR, 0); };
    AmbiguousKeywordContext.prototype.RSET = function () { return this.tryGetToken(vbaParser.RSET, 0); };
    AmbiguousKeywordContext.prototype.SAVEPICTURE = function () { return this.tryGetToken(vbaParser.SAVEPICTURE, 0); };
    AmbiguousKeywordContext.prototype.SAVESETTING = function () { return this.tryGetToken(vbaParser.SAVESETTING, 0); };
    AmbiguousKeywordContext.prototype.SEEK = function () { return this.tryGetToken(vbaParser.SEEK, 0); };
    AmbiguousKeywordContext.prototype.SELECT = function () { return this.tryGetToken(vbaParser.SELECT, 0); };
    AmbiguousKeywordContext.prototype.SENDKEYS = function () { return this.tryGetToken(vbaParser.SENDKEYS, 0); };
    AmbiguousKeywordContext.prototype.SET = function () { return this.tryGetToken(vbaParser.SET, 0); };
    AmbiguousKeywordContext.prototype.SETATTR = function () { return this.tryGetToken(vbaParser.SETATTR, 0); };
    AmbiguousKeywordContext.prototype.SHARED = function () { return this.tryGetToken(vbaParser.SHARED, 0); };
    AmbiguousKeywordContext.prototype.SINGLE = function () { return this.tryGetToken(vbaParser.SINGLE, 0); };
    AmbiguousKeywordContext.prototype.SPC = function () { return this.tryGetToken(vbaParser.SPC, 0); };
    AmbiguousKeywordContext.prototype.STATIC = function () { return this.tryGetToken(vbaParser.STATIC, 0); };
    AmbiguousKeywordContext.prototype.STEP = function () { return this.tryGetToken(vbaParser.STEP, 0); };
    AmbiguousKeywordContext.prototype.STOP = function () { return this.tryGetToken(vbaParser.STOP, 0); };
    AmbiguousKeywordContext.prototype.STRING = function () { return this.tryGetToken(vbaParser.STRING, 0); };
    AmbiguousKeywordContext.prototype.SUB = function () { return this.tryGetToken(vbaParser.SUB, 0); };
    AmbiguousKeywordContext.prototype.TAB = function () { return this.tryGetToken(vbaParser.TAB, 0); };
    AmbiguousKeywordContext.prototype.TEXT = function () { return this.tryGetToken(vbaParser.TEXT, 0); };
    AmbiguousKeywordContext.prototype.THEN = function () { return this.tryGetToken(vbaParser.THEN, 0); };
    AmbiguousKeywordContext.prototype.TIME = function () { return this.tryGetToken(vbaParser.TIME, 0); };
    AmbiguousKeywordContext.prototype.TO = function () { return this.tryGetToken(vbaParser.TO, 0); };
    AmbiguousKeywordContext.prototype.TRUE = function () { return this.tryGetToken(vbaParser.TRUE, 0); };
    AmbiguousKeywordContext.prototype.TYPE = function () { return this.tryGetToken(vbaParser.TYPE, 0); };
    AmbiguousKeywordContext.prototype.TYPEOF = function () { return this.tryGetToken(vbaParser.TYPEOF, 0); };
    AmbiguousKeywordContext.prototype.UNLOAD = function () { return this.tryGetToken(vbaParser.UNLOAD, 0); };
    AmbiguousKeywordContext.prototype.UNLOCK = function () { return this.tryGetToken(vbaParser.UNLOCK, 0); };
    AmbiguousKeywordContext.prototype.UNTIL = function () { return this.tryGetToken(vbaParser.UNTIL, 0); };
    AmbiguousKeywordContext.prototype.VARIANT = function () { return this.tryGetToken(vbaParser.VARIANT, 0); };
    AmbiguousKeywordContext.prototype.VERSION = function () { return this.tryGetToken(vbaParser.VERSION, 0); };
    AmbiguousKeywordContext.prototype.WEND = function () { return this.tryGetToken(vbaParser.WEND, 0); };
    AmbiguousKeywordContext.prototype.WHILE = function () { return this.tryGetToken(vbaParser.WHILE, 0); };
    AmbiguousKeywordContext.prototype.WIDTH = function () { return this.tryGetToken(vbaParser.WIDTH, 0); };
    AmbiguousKeywordContext.prototype.WITH = function () { return this.tryGetToken(vbaParser.WITH, 0); };
    AmbiguousKeywordContext.prototype.WITHEVENTS = function () { return this.tryGetToken(vbaParser.WITHEVENTS, 0); };
    AmbiguousKeywordContext.prototype.WRITE = function () { return this.tryGetToken(vbaParser.WRITE, 0); };
    AmbiguousKeywordContext.prototype.XOR = function () { return this.tryGetToken(vbaParser.XOR, 0); };
    Object.defineProperty(AmbiguousKeywordContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_ambiguousKeyword; },
        enumerable: true,
        configurable: true
    });
    // @Override
    AmbiguousKeywordContext.prototype.enterRule = function (listener) {
        if (listener.enterAmbiguousKeyword) {
            listener.enterAmbiguousKeyword(this);
        }
    };
    // @Override
    AmbiguousKeywordContext.prototype.exitRule = function (listener) {
        if (listener.exitAmbiguousKeyword) {
            listener.exitAmbiguousKeyword(this);
        }
    };
    // @Override
    AmbiguousKeywordContext.prototype.accept = function (visitor) {
        if (visitor.visitAmbiguousKeyword) {
            return visitor.visitAmbiguousKeyword(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return AmbiguousKeywordContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AmbiguousKeywordContext = AmbiguousKeywordContext;
var RemCommentContext = /** @class */ (function (_super) {
    __extends(RemCommentContext, _super);
    function RemCommentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RemCommentContext.prototype.REMCOMMENT = function () { return this.getToken(vbaParser.REMCOMMENT, 0); };
    Object.defineProperty(RemCommentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_remComment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    RemCommentContext.prototype.enterRule = function (listener) {
        if (listener.enterRemComment) {
            listener.enterRemComment(this);
        }
    };
    // @Override
    RemCommentContext.prototype.exitRule = function (listener) {
        if (listener.exitRemComment) {
            listener.exitRemComment(this);
        }
    };
    // @Override
    RemCommentContext.prototype.accept = function (visitor) {
        if (visitor.visitRemComment) {
            return visitor.visitRemComment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return RemCommentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RemCommentContext = RemCommentContext;
var CommentContext = /** @class */ (function (_super) {
    __extends(CommentContext, _super);
    function CommentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CommentContext.prototype.COMMENT = function () { return this.getToken(vbaParser.COMMENT, 0); };
    Object.defineProperty(CommentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_comment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    CommentContext.prototype.enterRule = function (listener) {
        if (listener.enterComment) {
            listener.enterComment(this);
        }
    };
    // @Override
    CommentContext.prototype.exitRule = function (listener) {
        if (listener.exitComment) {
            listener.exitComment(this);
        }
    };
    // @Override
    CommentContext.prototype.accept = function (visitor) {
        if (visitor.visitComment) {
            return visitor.visitComment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return CommentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CommentContext = CommentContext;
var EndOfLineContext = /** @class */ (function (_super) {
    __extends(EndOfLineContext, _super);
    function EndOfLineContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EndOfLineContext.prototype.NEWLINE = function () { return this.tryGetToken(vbaParser.NEWLINE, 0); };
    EndOfLineContext.prototype.comment = function () {
        return this.tryGetRuleContext(0, CommentContext);
    };
    EndOfLineContext.prototype.remComment = function () {
        return this.tryGetRuleContext(0, RemCommentContext);
    };
    EndOfLineContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(EndOfLineContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_endOfLine; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EndOfLineContext.prototype.enterRule = function (listener) {
        if (listener.enterEndOfLine) {
            listener.enterEndOfLine(this);
        }
    };
    // @Override
    EndOfLineContext.prototype.exitRule = function (listener) {
        if (listener.exitEndOfLine) {
            listener.exitEndOfLine(this);
        }
    };
    // @Override
    EndOfLineContext.prototype.accept = function (visitor) {
        if (visitor.visitEndOfLine) {
            return visitor.visitEndOfLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EndOfLineContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EndOfLineContext = EndOfLineContext;
var EndOfStatementContext = /** @class */ (function (_super) {
    __extends(EndOfStatementContext, _super);
    function EndOfStatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    EndOfStatementContext.prototype.endOfLine = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(EndOfLineContext);
        }
        else {
            return this.getRuleContext(i, EndOfLineContext);
        }
    };
    EndOfStatementContext.prototype.COLON = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.COLON);
        }
        else {
            return this.getToken(vbaParser.COLON, i);
        }
    };
    EndOfStatementContext.prototype.WS = function (i) {
        if (i === undefined) {
            return this.getTokens(vbaParser.WS);
        }
        else {
            return this.getToken(vbaParser.WS, i);
        }
    };
    Object.defineProperty(EndOfStatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return vbaParser.RULE_endOfStatement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    EndOfStatementContext.prototype.enterRule = function (listener) {
        if (listener.enterEndOfStatement) {
            listener.enterEndOfStatement(this);
        }
    };
    // @Override
    EndOfStatementContext.prototype.exitRule = function (listener) {
        if (listener.exitEndOfStatement) {
            listener.exitEndOfStatement(this);
        }
    };
    // @Override
    EndOfStatementContext.prototype.accept = function (visitor) {
        if (visitor.visitEndOfStatement) {
            return visitor.visitEndOfStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return EndOfStatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.EndOfStatementContext = EndOfStatementContext;
