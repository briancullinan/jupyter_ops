"use strict";
// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/jsonquery/JsonQuery.g4 by ANTLR 4.7.3-SNAPSHOT
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
package;
ud.antlr.json;
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var Lexer_1 = require("antlr4ts/Lexer");
var LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var JsonQueryLexer = /** @class */ (function (_super) {
    __extends(JsonQueryLexer, _super);
    // tslint:enable:no-trailing-whitespace
    function JsonQueryLexer(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new LexerATNSimulator_1.LexerATNSimulator(JsonQueryLexer._ATN, _this);
        return _this;
    }
    Object.defineProperty(JsonQueryLexer.prototype, "vocabulary", {
        // @Override
        // @NotNull
        get: function () {
            return JsonQueryLexer.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonQueryLexer.prototype, "grammarFileName", {
        // @Override
        get: function () { return "JsonQuery.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonQueryLexer.prototype, "ruleNames", {
        // @Override
        get: function () { return JsonQueryLexer.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonQueryLexer.prototype, "serializedATN", {
        // @Override
        get: function () { return JsonQueryLexer._serializedATN; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonQueryLexer.prototype, "channelNames", {
        // @Override
        get: function () { return JsonQueryLexer.channelNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonQueryLexer.prototype, "modeNames", {
        // @Override
        get: function () { return JsonQueryLexer.modeNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonQueryLexer, "_ATN", {
        get: function () {
            if (!JsonQueryLexer.__ATN) {
                JsonQueryLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(JsonQueryLexer._serializedATN));
            }
            return JsonQueryLexer.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    JsonQueryLexer.T__0 = 1;
    JsonQueryLexer.T__1 = 2;
    JsonQueryLexer.T__2 = 3;
    JsonQueryLexer.T__3 = 4;
    JsonQueryLexer.T__4 = 5;
    JsonQueryLexer.NOT = 6;
    JsonQueryLexer.LOGICAL_OPERATOR = 7;
    JsonQueryLexer.BOOLEAN = 8;
    JsonQueryLexer.NULL = 9;
    JsonQueryLexer.EQ = 10;
    JsonQueryLexer.NE = 11;
    JsonQueryLexer.GT = 12;
    JsonQueryLexer.LT = 13;
    JsonQueryLexer.GE = 14;
    JsonQueryLexer.LE = 15;
    JsonQueryLexer.CO = 16;
    JsonQueryLexer.SW = 17;
    JsonQueryLexer.EW = 18;
    JsonQueryLexer.ATTRNAME = 19;
    JsonQueryLexer.STRING = 20;
    JsonQueryLexer.DOUBLE = 21;
    JsonQueryLexer.INT = 22;
    JsonQueryLexer.EXP = 23;
    JsonQueryLexer.SP = 24;
    // tslint:disable:no-trailing-whitespace
    JsonQueryLexer.channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
    ];
    // tslint:disable:no-trailing-whitespace
    JsonQueryLexer.modeNames = [
        "DEFAULT_MODE",
    ];
    JsonQueryLexer.ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "NOT", "LOGICAL_OPERATOR", "BOOLEAN",
        "NULL", "EQ", "NE", "GT", "LT", "GE", "LE", "CO", "SW", "EW", "ATTRNAME",
        "ATTR_NAME_CHAR", "DIGIT", "ALPHA", "STRING", "ESC", "UNICODE", "HEX",
        "DOUBLE", "INT", "EXP", "SP",
    ];
    JsonQueryLexer._LITERAL_NAMES = [
        undefined, "'('", "')'", "'pr'", "'.'", "'-'", "'not'", undefined, undefined,
        "'null'", "'eq'", "'ne'", "'gt'", "'lt'", "'ge'", "'le'", "'co'", "'sw'",
        "'ew'", undefined, undefined, undefined, undefined, undefined, "' '",
    ];
    JsonQueryLexer._SYMBOLIC_NAMES = [
        undefined, undefined, undefined, undefined, undefined, undefined, "NOT",
        "LOGICAL_OPERATOR", "BOOLEAN", "NULL", "EQ", "NE", "GT", "LT", "GE", "LE",
        "CO", "SW", "EW", "ATTRNAME", "STRING", "DOUBLE", "INT", "EXP", "SP",
    ];
    JsonQueryLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(JsonQueryLexer._LITERAL_NAMES, JsonQueryLexer._SYMBOLIC_NAMES, []);
    JsonQueryLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1A\xC6\b\x01" +
        "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
        "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
        "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
        "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
        "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
        "\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x03\x02\x03\x02\x03\x03" +
        "\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07" +
        "\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x05\bT\n\b\x03" +
        "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t_\n\t\x03\n\x03" +
        "\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03" +
        "\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
        "\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
        "\x13\x03\x14\x03\x14\x07\x14\x83\n\x14\f\x14\x0E\x14\x86\v\x14\x03\x15" +
        "\x03\x15\x03\x15\x05\x15\x8B\n\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03" +
        "\x18\x03\x18\x03\x18\x07\x18\x94\n\x18\f\x18\x0E\x18\x97\v\x18\x03\x18" +
        "\x03\x18\x03\x19\x03\x19\x03\x19\x05\x19\x9E\n\x19\x03\x1A\x03\x1A\x03" +
        "\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x05\x1C\xA9\n\x1C" +
        "\x03\x1C\x03\x1C\x03\x1C\x06\x1C\xAE\n\x1C\r\x1C\x0E\x1C\xAF\x03\x1C\x05" +
        "\x1C\xB3\n\x1C\x03\x1D\x03\x1D\x03\x1D\x07\x1D\xB8\n\x1D\f\x1D\x0E\x1D" +
        "\xBB\v\x1D\x05\x1D\xBD\n\x1D\x03\x1E\x03\x1E\x05\x1E\xC1\n\x1E\x03\x1E" +
        "\x03\x1E\x03\x1F\x03\x1F\x02\x02\x02 \x03\x02\x03\x05\x02\x04\x07\x02" +
        "\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02" +
        "\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12" +
        "#\x02\x13%\x02\x14\'\x02\x15)\x02\x02+\x02\x02-\x02\x02/\x02\x161\x02" +
        "\x023\x02\x025\x02\x027\x02\x179\x02\x18;\x02\x19=\x02\x1A\x03\x02\v\x05" +
        "\x02//<<aa\x04\x02C\\c|\x04\x02$$^^\n\x02$$11^^ddhhppttvv\x05\x022;CH" +
        "ch\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02--//\x02\xCD\x02\x03\x03\x02" +
        "\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
        "\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
        "\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
        "\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02" +
        "\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02" +
        "\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02" +
        "/\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02" +
        "\x02\x02\x02=\x03\x02\x02\x02\x03?\x03\x02\x02\x02\x05A\x03\x02\x02\x02" +
        "\x07C\x03\x02\x02\x02\tF\x03\x02\x02\x02\vH\x03\x02\x02\x02\rJ\x03\x02" +
        "\x02\x02\x0FS\x03\x02\x02\x02\x11^\x03\x02\x02\x02\x13`\x03\x02\x02\x02" +
        "\x15e\x03\x02\x02\x02\x17h\x03\x02\x02\x02\x19k\x03\x02\x02\x02\x1Bn\x03" +
        "\x02\x02\x02\x1Dq\x03\x02\x02\x02\x1Ft\x03\x02\x02\x02!w\x03\x02\x02\x02" +
        "#z\x03\x02\x02\x02%}\x03\x02\x02\x02\'\x80\x03\x02\x02\x02)\x8A\x03\x02" +
        "\x02\x02+\x8C\x03\x02\x02\x02-\x8E\x03\x02\x02\x02/\x90\x03\x02\x02\x02" +
        "1\x9A\x03\x02\x02\x023\x9F\x03\x02\x02\x025\xA5\x03\x02\x02\x027\xA8\x03" +
        "\x02\x02\x029\xBC\x03\x02\x02\x02;\xBE\x03\x02\x02\x02=\xC4\x03\x02\x02" +
        "\x02?@\x07*\x02\x02@\x04\x03\x02\x02\x02AB\x07+\x02\x02B\x06\x03\x02\x02" +
        "\x02CD\x07r\x02\x02DE\x07t\x02\x02E\b\x03\x02\x02\x02FG\x070\x02\x02G" +
        "\n\x03\x02\x02\x02HI\x07/\x02\x02I\f\x03\x02\x02\x02JK\x07p\x02\x02KL" +
        "\x07q\x02\x02LM\x07v\x02\x02M\x0E\x03\x02\x02\x02NO\x07c\x02\x02OP\x07" +
        "p\x02\x02PT\x07f\x02\x02QR\x07q\x02\x02RT\x07t\x02\x02SN\x03\x02\x02\x02" +
        "SQ\x03\x02\x02\x02T\x10\x03\x02\x02\x02UV\x07v\x02\x02VW\x07t\x02\x02" +
        "WX\x07w\x02\x02X_\x07g\x02\x02YZ\x07h\x02\x02Z[\x07c\x02\x02[\\\x07n\x02" +
        "\x02\\]\x07u\x02\x02]_\x07g\x02\x02^U\x03\x02\x02\x02^Y\x03\x02\x02\x02" +
        "_\x12\x03\x02\x02\x02`a\x07p\x02\x02ab\x07w\x02\x02bc\x07n\x02\x02cd\x07" +
        "n\x02\x02d\x14\x03\x02\x02\x02ef\x07g\x02\x02fg\x07s\x02\x02g\x16\x03" +
        "\x02\x02\x02hi\x07p\x02\x02ij\x07g\x02\x02j\x18\x03\x02\x02\x02kl\x07" +
        "i\x02\x02lm\x07v\x02\x02m\x1A\x03\x02\x02\x02no\x07n\x02\x02op\x07v\x02" +
        "\x02p\x1C\x03\x02\x02\x02qr\x07i\x02\x02rs\x07g\x02\x02s\x1E\x03\x02\x02" +
        "\x02tu\x07n\x02\x02uv\x07g\x02\x02v \x03\x02\x02\x02wx\x07e\x02\x02xy" +
        "\x07q\x02\x02y\"\x03\x02\x02\x02z{\x07u\x02\x02{|\x07y\x02\x02|$\x03\x02" +
        "\x02\x02}~\x07g\x02\x02~\x7F\x07y\x02\x02\x7F&\x03\x02\x02\x02\x80\x84" +
        "\x05-\x17\x02\x81\x83\x05)\x15\x02\x82\x81\x03\x02\x02\x02\x83\x86\x03" +
        "\x02\x02\x02\x84\x82\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02\x85(\x03" +
        "\x02\x02\x02\x86\x84\x03\x02\x02\x02\x87\x8B\t\x02\x02\x02\x88\x8B\x05" +
        "+\x16\x02\x89\x8B\x05-\x17\x02\x8A\x87\x03\x02\x02\x02\x8A\x88\x03\x02" +
        "\x02\x02\x8A\x89\x03\x02\x02\x02\x8B*\x03\x02\x02\x02\x8C\x8D\x042;\x02" +
        "\x8D,\x03\x02\x02\x02\x8E\x8F\t\x03\x02\x02\x8F.\x03\x02\x02\x02\x90\x95" +
        "\x07$\x02\x02\x91\x94\x051\x19\x02\x92\x94\n\x04\x02\x02\x93\x91\x03\x02" +
        "\x02\x02\x93\x92\x03\x02\x02\x02\x94\x97\x03\x02\x02\x02\x95\x93\x03\x02" +
        "\x02\x02\x95\x96\x03\x02\x02\x02\x96\x98\x03\x02\x02\x02\x97\x95\x03\x02" +
        "\x02\x02\x98\x99\x07$\x02\x02\x990\x03\x02\x02\x02\x9A\x9D\x07^\x02\x02" +
        "\x9B\x9E\t\x05\x02\x02\x9C\x9E\x053\x1A\x02\x9D\x9B\x03\x02\x02\x02\x9D" +
        "\x9C\x03\x02\x02\x02\x9E2\x03\x02\x02\x02\x9F\xA0\x07w\x02\x02\xA0\xA1" +
        "\x055\x1B\x02\xA1\xA2\x055\x1B\x02\xA2\xA3\x055\x1B\x02\xA3\xA4\x055\x1B" +
        "\x02\xA44\x03\x02\x02\x02\xA5\xA6\t\x06\x02\x02\xA66\x03\x02\x02\x02\xA7" +
        "\xA9\x07/\x02\x02\xA8\xA7\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9" +
        "\xAA\x03\x02\x02\x02\xAA\xAB\x059\x1D\x02\xAB\xAD\x070\x02\x02\xAC\xAE" +
        "\t\x07\x02\x02\xAD\xAC\x03\x02\x02\x02\xAE\xAF\x03\x02\x02\x02\xAF\xAD" +
        "\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02\xB0\xB2\x03\x02\x02\x02\xB1\xB3" +
        "\x05;\x1E\x02\xB2\xB1\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB38\x03" +
        "\x02\x02\x02\xB4\xBD\x072\x02\x02\xB5\xB9\t\b\x02\x02\xB6\xB8\t\x07\x02" +
        "\x02\xB7\xB6\x03\x02\x02\x02\xB8\xBB\x03\x02\x02\x02\xB9\xB7\x03\x02\x02" +
        "\x02\xB9\xBA\x03\x02\x02\x02\xBA\xBD\x03\x02\x02\x02\xBB\xB9\x03\x02\x02" +
        "\x02\xBC\xB4\x03\x02\x02\x02\xBC\xB5\x03\x02\x02\x02\xBD:\x03\x02\x02" +
        "\x02\xBE\xC0\t\t\x02\x02\xBF\xC1\t\n\x02\x02\xC0\xBF\x03\x02\x02\x02\xC0" +
        "\xC1\x03\x02\x02\x02\xC1\xC2\x03\x02\x02\x02\xC2\xC3\x059\x1D\x02\xC3" +
        "<\x03\x02\x02\x02\xC4\xC5\x07\"\x02\x02\xC5>\x03\x02\x02\x02\x10\x02S" +
        "^\x84\x8A\x93\x95\x9D\xA8\xAF\xB2\xB9\xBC\xC0\x02";
    return JsonQueryLexer;
}(Lexer_1.Lexer));
exports.JsonQueryLexer = JsonQueryLexer;
