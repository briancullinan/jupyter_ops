"use strict";
// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/xsd-regex/regexLexer.g4 by ANTLR 4.7.3-SNAPSHOT
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var Lexer_1 = require("antlr4ts/Lexer");
var LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var regexLexer = /** @class */ (function (_super) {
    __extends(regexLexer, _super);
    // tslint:enable:no-trailing-whitespace
    function regexLexer(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new LexerATNSimulator_1.LexerATNSimulator(regexLexer._ATN, _this);
        return _this;
    }
    Object.defineProperty(regexLexer.prototype, "vocabulary", {
        // @Override
        // @NotNull
        get: function () {
            return regexLexer.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(regexLexer.prototype, "grammarFileName", {
        // @Override
        get: function () { return "regexLexer.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(regexLexer.prototype, "ruleNames", {
        // @Override
        get: function () { return regexLexer.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(regexLexer.prototype, "serializedATN", {
        // @Override
        get: function () { return regexLexer._serializedATN; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(regexLexer.prototype, "channelNames", {
        // @Override
        get: function () { return regexLexer.channelNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(regexLexer.prototype, "modeNames", {
        // @Override
        get: function () { return regexLexer.modeNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(regexLexer, "_ATN", {
        get: function () {
            if (!regexLexer.__ATN) {
                regexLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(regexLexer._serializedATN));
            }
            return regexLexer.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    regexLexer.LPAREN = 1;
    regexLexer.RPAREN = 2;
    regexLexer.PIPE = 3;
    regexLexer.PLUS = 4;
    regexLexer.QUESTION = 5;
    regexLexer.STAR = 6;
    regexLexer.WildcardEsc = 7;
    regexLexer.Char = 8;
    regexLexer.StartQuantity = 9;
    regexLexer.SingleCharEsc = 10;
    regexLexer.MultiCharEsc = 11;
    regexLexer.CatEsc = 12;
    regexLexer.ComplEsc = 13;
    regexLexer.NegCharGroup = 14;
    regexLexer.PosCharGroup = 15;
    regexLexer.EndQuantity = 16;
    regexLexer.QuantExact = 17;
    regexLexer.COMMA = 18;
    regexLexer.EndCategory = 19;
    regexLexer.IsCategory = 20;
    regexLexer.Letters = 21;
    regexLexer.Marks = 22;
    regexLexer.Numbers = 23;
    regexLexer.Punctuation = 24;
    regexLexer.Separators = 25;
    regexLexer.Symbols = 26;
    regexLexer.Others = 27;
    regexLexer.IsBlock = 28;
    regexLexer.NestedSingleCharEsc = 29;
    regexLexer.NestedMultiCharEsc = 30;
    regexLexer.NestedCatEsc = 31;
    regexLexer.NestedComplEsc = 32;
    regexLexer.NestedNegCharGroup = 33;
    regexLexer.NestedPosCharGroup = 34;
    regexLexer.EndCharGroup = 35;
    regexLexer.DASH = 36;
    regexLexer.XmlChar = 37;
    regexLexer.QUANTITY = 1;
    regexLexer.CATEGORY = 2;
    regexLexer.CHARGROUP = 3;
    // tslint:disable:no-trailing-whitespace
    regexLexer.channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
    ];
    // tslint:disable:no-trailing-whitespace
    regexLexer.modeNames = [
        "DEFAULT_MODE", "QUANTITY", "CATEGORY", "CHARGROUP",
    ];
    regexLexer.ruleNames = [
        "LPAREN", "RPAREN", "PIPE", "PLUS", "QUESTION", "STAR", "WildcardEsc",
        "Char", "StartQuantity", "SingleCharEsc", "MultiCharEsc", "CatEsc", "ComplEsc",
        "NegCharGroup", "PosCharGroup", "EndQuantity", "QuantExact", "COMMA",
        "EndCategory", "IsCategory", "Letters", "Marks", "Numbers", "Punctuation",
        "Separators", "Symbols", "Others", "IsBlock", "NestedSingleCharEsc", "NestedMultiCharEsc",
        "NestedCatEsc", "NestedComplEsc", "NestedNegCharGroup", "NestedPosCharGroup",
        "EndCharGroup", "DASH", "XmlChar", "CAT_ESC", "COMPL_ESC", "MULTI_ESC",
        "SINGLE_ESC",
    ];
    regexLexer._LITERAL_NAMES = [
        undefined, "'('", "')'", "'|'", "'+'", "'?'", "'*'", "'.'", undefined,
        "'{'", undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, "','", undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, "']'", "'-'",
    ];
    regexLexer._SYMBOLIC_NAMES = [
        undefined, "LPAREN", "RPAREN", "PIPE", "PLUS", "QUESTION", "STAR", "WildcardEsc",
        "Char", "StartQuantity", "SingleCharEsc", "MultiCharEsc", "CatEsc", "ComplEsc",
        "NegCharGroup", "PosCharGroup", "EndQuantity", "QuantExact", "COMMA",
        "EndCategory", "IsCategory", "Letters", "Marks", "Numbers", "Punctuation",
        "Separators", "Symbols", "Others", "IsBlock", "NestedSingleCharEsc", "NestedMultiCharEsc",
        "NestedCatEsc", "NestedComplEsc", "NestedNegCharGroup", "NestedPosCharGroup",
        "EndCharGroup", "DASH", "XmlChar",
    ];
    regexLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(regexLexer._LITERAL_NAMES, regexLexer._SYMBOLIC_NAMES, []);
    regexLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\'\xE8\b\x01\b" +
        "\x01\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05" +
        "\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04" +
        "\f\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11" +
        "\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16" +
        "\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B" +
        "\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!" +
        "\t!\x04\"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t" +
        ")\x04*\t*\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03" +
        "\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03" +
        "\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E" +
        "\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10" +
        "\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x06\x12" +
        "\x87\n\x12\r\x12\x0E\x12\x88\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03" +
        "\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\x98" +
        "\n\x15\x03\x16\x03\x16\x05\x16\x9C\n\x16\x03\x17\x03\x17\x05\x17\xA0\n" +
        "\x17\x03\x18\x03\x18\x05\x18\xA4\n\x18\x03\x19\x03\x19\x05\x19\xA8\n\x19" +
        "\x03\x1A\x03\x1A\x05\x1A\xAC\n\x1A\x03\x1B\x03\x1B\x05\x1B\xB0\n\x1B\x03" +
        "\x1C\x03\x1C\x05\x1C\xB4\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x06\x1D" +
        "\xBA\n\x1D\r\x1D\x0E\x1D\xBB\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03" +
        " \x03 \x03 \x03!\x03!\x03!\x03!\x03\"\x03\"\x03\"\x03\"\x03\"\x03#\x03" +
        "#\x03#\x03#\x03$\x03$\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'\x03\'" +
        "\x03\'\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03*\x03*\x03*\x02\x02\x02+" +
        "\x06\x02\x03\b\x02\x04\n\x02\x05\f\x02\x06\x0E\x02\x07\x10\x02\b\x12\x02" +
        "\t\x14\x02\n\x16\x02\v\x18\x02\f\x1A\x02\r\x1C\x02\x0E\x1E\x02\x0F \x02" +
        "\x10\"\x02\x11$\x02\x12&\x02\x13(\x02\x14*\x02\x15,\x02\x16.\x02\x170" +
        "\x02\x182\x02\x194\x02\x1A6\x02\x1B8\x02\x1C:\x02\x1D<\x02\x1E>\x02\x1F" +
        "@\x02 B\x02!D\x02\"F\x02#H\x02$J\x02%L\x02&N\x02\'P\x02\x02R\x02\x02T" +
        "\x02\x02V\x02\x02\x06\x02\x03\x04\x05\x0F\x07\x02*-00AA]_~~\x03\x022;" +
        "\x05\x02noqqvw\x05\x02eeggpp\x05\x02ffnnqq\x06\x02ehkkqquu\x05\x02nnr" +
        "ruu\x06\x02eemmooqq\x05\x02eehhpq\x06\x02//2;C\\c|\x05\x02//]]__\n\x02" +
        "EFKKUUYYefkkuuyy\n\x02*-/0AA]`ppttvv}\x7F\x02\xEF\x02\x06\x03\x02\x02" +
        "\x02\x02\b\x03\x02\x02\x02\x02\n\x03\x02\x02\x02\x02\f\x03\x02\x02\x02" +
        "\x02\x0E\x03\x02\x02\x02\x02\x10\x03\x02\x02\x02\x02\x12\x03\x02\x02\x02" +
        "\x02\x14\x03\x02\x02\x02\x02\x16\x03\x02\x02\x02\x02\x18\x03\x02\x02\x02" +
        "\x02\x1A\x03\x02\x02\x02\x02\x1C\x03\x02\x02\x02\x02\x1E\x03\x02\x02\x02" +
        "\x02 \x03\x02\x02\x02\x02\"\x03\x02\x02\x02\x03$\x03\x02\x02\x02\x03&" +
        "\x03\x02\x02\x02\x03(\x03\x02\x02\x02\x04*\x03\x02\x02\x02\x04,\x03\x02" +
        "\x02\x02\x04.\x03\x02\x02\x02\x040\x03\x02\x02\x02\x042\x03\x02\x02\x02" +
        "\x044\x03\x02\x02\x02\x046\x03\x02\x02\x02\x048\x03\x02\x02\x02\x04:\x03" +
        "\x02\x02\x02\x04<\x03\x02\x02\x02\x05>\x03\x02\x02\x02\x05@\x03\x02\x02" +
        "\x02\x05B\x03\x02\x02\x02\x05D\x03\x02\x02\x02\x05F\x03\x02\x02\x02\x05" +
        "H\x03\x02\x02\x02\x05J\x03\x02\x02\x02\x05L\x03\x02\x02\x02\x05N\x03\x02" +
        "\x02\x02\x06X\x03\x02\x02\x02\bZ\x03\x02\x02\x02\n\\\x03\x02\x02\x02\f" +
        "^\x03\x02\x02\x02\x0E`\x03\x02\x02\x02\x10b\x03\x02\x02\x02\x12d\x03\x02" +
        "\x02\x02\x14f\x03\x02\x02\x02\x16h\x03\x02\x02\x02\x18l\x03\x02\x02\x02" +
        "\x1An\x03\x02\x02\x02\x1Cp\x03\x02\x02\x02\x1Et\x03\x02\x02\x02 x\x03" +
        "\x02\x02\x02\"}\x03\x02\x02\x02$\x81\x03\x02\x02\x02&\x86\x03\x02\x02" +
        "\x02(\x8A\x03\x02\x02\x02*\x8C\x03\x02\x02\x02,\x97\x03\x02\x02\x02.\x99" +
        "\x03\x02\x02\x020\x9D\x03\x02\x02\x022\xA1\x03\x02\x02\x024\xA5\x03\x02" +
        "\x02\x026\xA9\x03\x02\x02\x028\xAD\x03\x02\x02\x02:\xB1\x03\x02\x02\x02" +
        "<\xB5\x03\x02\x02\x02>\xBD\x03\x02\x02\x02@\xBF\x03\x02\x02\x02B\xC1\x03" +
        "\x02\x02\x02D\xC5\x03\x02\x02\x02F\xC9\x03\x02\x02\x02H\xCE\x03\x02\x02" +
        "\x02J\xD2\x03\x02\x02\x02L\xD6\x03\x02\x02\x02N\xD8\x03\x02\x02\x02P\xDA" +
        "\x03\x02\x02\x02R\xDE\x03\x02\x02\x02T\xE2\x03\x02\x02\x02V\xE5\x03\x02" +
        "\x02\x02XY\x07*\x02\x02Y\x07\x03\x02\x02\x02Z[\x07+\x02\x02[\t\x03\x02" +
        "\x02\x02\\]\x07~\x02\x02]\v\x03\x02\x02\x02^_\x07-\x02\x02_\r\x03\x02" +
        "\x02\x02`a\x07A\x02\x02a\x0F\x03\x02\x02\x02bc\x07,\x02\x02c\x11\x03\x02" +
        "\x02\x02de\x070\x02\x02e\x13\x03\x02\x02\x02fg\n\x02\x02\x02g\x15\x03" +
        "\x02\x02\x02hi\x07}\x02\x02ij\x03\x02\x02\x02jk\b\n\x02\x02k\x17\x03\x02" +
        "\x02\x02lm\x05V*\x02m\x19\x03\x02\x02\x02no\x05T)\x02o\x1B\x03\x02\x02" +
        "\x02pq\x05P\'\x02qr\x03\x02\x02\x02rs\b\r\x03\x02s\x1D\x03\x02\x02\x02" +
        "tu\x05R(\x02uv\x03\x02\x02\x02vw\b\x0E\x03\x02w\x1F\x03\x02\x02\x02xy" +
        "\x07]\x02\x02yz\x07`\x02\x02z{\x03\x02\x02\x02{|\b\x0F\x04\x02|!\x03\x02" +
        "\x02\x02}~\x07]\x02\x02~\x7F\x03\x02\x02\x02\x7F\x80\b\x10\x04\x02\x80" +
        "#\x03\x02\x02\x02\x81\x82\x07\x7F\x02\x02\x82\x83\x03\x02\x02\x02\x83" +
        "\x84\b\x11\x05\x02\x84%\x03\x02\x02\x02\x85\x87\t\x03\x02\x02\x86\x85" +
        "\x03\x02\x02\x02\x87\x88\x03\x02\x02\x02\x88\x86\x03\x02\x02\x02\x88\x89" +
        "\x03\x02\x02\x02\x89\'\x03\x02\x02\x02\x8A\x8B\x07.\x02\x02\x8B)\x03\x02" +
        "\x02\x02\x8C\x8D\x07\x7F\x02\x02\x8D\x8E\x03\x02\x02\x02\x8E\x8F\b\x14" +
        "\x05\x02\x8F+\x03\x02\x02\x02\x90\x98\x05.\x16\x02\x91\x98\x050\x17\x02" +
        "\x92\x98\x052\x18\x02\x93\x98\x054\x19\x02\x94\x98\x056\x1A\x02\x95\x98" +
        "\x058\x1B\x02\x96\x98\x05:\x1C\x02\x97\x90\x03\x02\x02\x02\x97\x91\x03" +
        "\x02\x02\x02\x97\x92\x03\x02\x02\x02\x97\x93\x03\x02\x02\x02\x97\x94\x03" +
        "\x02\x02\x02\x97\x95\x03\x02\x02\x02\x97\x96\x03\x02\x02\x02\x98-\x03" +
        "\x02\x02\x02\x99\x9B\x07N\x02\x02\x9A\x9C\t\x04\x02\x02\x9B\x9A\x03\x02" +
        "\x02\x02\x9B\x9C\x03\x02\x02\x02\x9C/\x03\x02\x02\x02\x9D\x9F\x07O\x02" +
        "\x02\x9E\xA0\t\x05\x02\x02\x9F\x9E\x03\x02\x02\x02\x9F\xA0\x03\x02\x02" +
        "\x02\xA01\x03\x02\x02\x02\xA1\xA3\x07P\x02\x02\xA2\xA4\t\x06\x02\x02\xA3" +
        "\xA2\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA43\x03\x02\x02\x02\xA5" +
        "\xA7\x07R\x02\x02\xA6\xA8\t\x07\x02\x02\xA7\xA6\x03\x02\x02\x02\xA7\xA8" +
        "\x03\x02\x02\x02\xA85\x03\x02\x02\x02\xA9\xAB\x07\\\x02\x02\xAA\xAC\t" +
        "\b\x02\x02\xAB\xAA\x03\x02\x02\x02\xAB\xAC\x03\x02\x02\x02\xAC7\x03\x02" +
        "\x02\x02\xAD\xAF\x07U\x02\x02\xAE\xB0\t\t\x02\x02\xAF\xAE\x03\x02\x02" +
        "\x02\xAF\xB0\x03\x02\x02\x02\xB09\x03\x02\x02\x02\xB1\xB3\x07E\x02\x02" +
        "\xB2\xB4\t\n\x02\x02\xB3\xB2\x03\x02\x02\x02\xB3\xB4\x03\x02\x02\x02\xB4" +
        ";\x03\x02\x02\x02\xB5\xB6\x07K\x02\x02\xB6\xB7\x07u\x02\x02\xB7\xB9\x03" +
        "\x02\x02\x02\xB8\xBA\t\v\x02\x02\xB9\xB8\x03\x02\x02\x02\xBA\xBB\x03\x02" +
        "\x02\x02\xBB\xB9\x03\x02\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC=\x03\x02" +
        "\x02\x02\xBD\xBE\x05V*\x02\xBE?\x03\x02\x02\x02\xBF\xC0\x05T)\x02\xC0" +
        "A\x03\x02\x02\x02\xC1\xC2\x05P\'\x02\xC2\xC3\x03\x02\x02\x02\xC3\xC4\b" +
        " \x03\x02\xC4C\x03\x02\x02\x02\xC5\xC6\x05R(\x02\xC6\xC7\x03\x02\x02\x02" +
        "\xC7\xC8\b!\x03\x02\xC8E\x03\x02\x02\x02\xC9\xCA\x07]\x02\x02\xCA\xCB" +
        "\x07`\x02\x02\xCB\xCC\x03\x02\x02\x02\xCC\xCD\b\"\x04\x02\xCDG\x03\x02" +
        "\x02\x02\xCE\xCF\x07]\x02\x02\xCF\xD0\x03\x02\x02\x02\xD0\xD1\b#\x04\x02" +
        "\xD1I\x03\x02\x02\x02\xD2\xD3\x07_\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4" +
        "\xD5\b$\x05\x02\xD5K\x03\x02\x02\x02\xD6\xD7\x07/\x02\x02\xD7M\x03\x02" +
        "\x02\x02\xD8\xD9\n\f\x02\x02\xD9O\x03\x02\x02\x02\xDA\xDB\x07^\x02\x02" +
        "\xDB\xDC\x07r\x02\x02\xDC\xDD\x07}\x02\x02\xDDQ\x03\x02\x02\x02\xDE\xDF" +
        "\x07^\x02\x02\xDF\xE0\x07R\x02\x02\xE0\xE1\x07}\x02\x02\xE1S\x03\x02\x02" +
        "\x02\xE2\xE3\x07^\x02\x02\xE3\xE4\t\r\x02\x02\xE4U\x03\x02\x02\x02\xE5" +
        "\xE6\x07^\x02\x02\xE6\xE7\t\x0E\x02\x02\xE7W\x03\x02\x02\x02\x11\x02\x03" +
        "\x04\x05\x88\x97\x9B\x9F\xA3\xA7\xAB\xAF\xB3\xB9\xBB\x06\x07\x03\x02\x07" +
        "\x04\x02\x07\x05\x02\x06\x02\x02";
    return regexLexer;
}(Lexer_1.Lexer));
exports.regexLexer = regexLexer;
