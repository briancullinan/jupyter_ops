"use strict";
// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/suokif/SUOKIF.g4 by ANTLR 4.7.3-SNAPSHOT
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var Lexer_1 = require("antlr4ts/Lexer");
var LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var SUOKIFLexer = /** @class */ (function (_super) {
    __extends(SUOKIFLexer, _super);
    // tslint:enable:no-trailing-whitespace
    function SUOKIFLexer(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new LexerATNSimulator_1.LexerATNSimulator(SUOKIFLexer._ATN, _this);
        return _this;
    }
    Object.defineProperty(SUOKIFLexer.prototype, "vocabulary", {
        // @Override
        // @NotNull
        get: function () {
            return SUOKIFLexer.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SUOKIFLexer.prototype, "grammarFileName", {
        // @Override
        get: function () { return "SUOKIF.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SUOKIFLexer.prototype, "ruleNames", {
        // @Override
        get: function () { return SUOKIFLexer.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SUOKIFLexer.prototype, "serializedATN", {
        // @Override
        get: function () { return SUOKIFLexer._serializedATN; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SUOKIFLexer.prototype, "channelNames", {
        // @Override
        get: function () { return SUOKIFLexer.channelNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SUOKIFLexer.prototype, "modeNames", {
        // @Override
        get: function () { return SUOKIFLexer.modeNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SUOKIFLexer, "_ATN", {
        get: function () {
            if (!SUOKIFLexer.__ATN) {
                SUOKIFLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(SUOKIFLexer._serializedATN));
            }
            return SUOKIFLexer.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    SUOKIFLexer.NOT = 1;
    SUOKIFLexer.AND = 2;
    SUOKIFLexer.OR = 3;
    SUOKIFLexer.FORALL = 4;
    SUOKIFLexer.EXISTS = 5;
    SUOKIFLexer.WORD = 6;
    SUOKIFLexer.STRING = 7;
    SUOKIFLexer.VARIABLE = 8;
    SUOKIFLexer.NUMBER = 9;
    SUOKIFLexer.WHITE = 10;
    SUOKIFLexer.COMMENT = 11;
    SUOKIFLexer.LPAREN = 12;
    SUOKIFLexer.RPAREN = 13;
    SUOKIFLexer.ASSIGN = 14;
    SUOKIFLexer.GT = 15;
    SUOKIFLexer.LT = 16;
    SUOKIFLexer.QUESTION = 17;
    // tslint:disable:no-trailing-whitespace
    SUOKIFLexer.channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
    ];
    // tslint:disable:no-trailing-whitespace
    SUOKIFLexer.modeNames = [
        "DEFAULT_MODE",
    ];
    SUOKIFLexer.ruleNames = [
        "NOT", "AND", "OR", "FORALL", "EXISTS", "UPPER", "LOWER", "DIGIT", "INITIALCHAR",
        "WORDCHAR", "WORD", "STRING", "VARIABLE", "NUMBER", "EXPONENT", "WHITE",
        "COMMENT", "LPAREN", "RPAREN", "ASSIGN", "GT", "LT", "QUESTION",
    ];
    SUOKIFLexer._LITERAL_NAMES = [
        undefined, "'not'", "'and'", "'or'", "'forall'", "'exists'", undefined,
        undefined, undefined, undefined, undefined, undefined, "'('", "')'", "'='",
        "'>'", "'<'", "'?'",
    ];
    SUOKIFLexer._SYMBOLIC_NAMES = [
        undefined, "NOT", "AND", "OR", "FORALL", "EXISTS", "WORD", "STRING", "VARIABLE",
        "NUMBER", "WHITE", "COMMENT", "LPAREN", "RPAREN", "ASSIGN", "GT", "LT",
        "QUESTION",
    ];
    SUOKIFLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(SUOKIFLexer._LITERAL_NAMES, SUOKIFLexer._SYMBOLIC_NAMES, []);
    SUOKIFLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13\xA5\b\x01" +
        "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
        "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
        "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
        "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
        "\x17\x04\x18\t\x18\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
        "\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
        "\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
        "\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x05\nS\n\n\x03" +
        "\v\x03\v\x03\v\x03\v\x05\vY\n\v\x03\f\x03\f\x07\f]\n\f\f\f\x0E\f`\v\f" +
        "\x03\r\x03\r\x07\rd\n\r\f\r\x0E\rg\v\r\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
        "\x0E\x03\x0E\x05\x0Eo\n\x0E\x03\x0F\x05\x0Fr\n\x0F\x03\x0F\x06\x0Fu\n" +
        "\x0F\r\x0F\x0E\x0Fv\x03\x0F\x03\x0F\x06\x0F{\n\x0F\r\x0F\x0E\x0F|\x05" +
        "\x0F\x7F\n\x0F\x03\x0F\x05\x0F\x82\n\x0F\x03\x10\x03\x10\x05\x10\x86\n" +
        "\x10\x03\x10\x06\x10\x89\n\x10\r\x10\x0E\x10\x8A\x03\x11\x03\x11\x03\x11" +
        "\x03\x11\x03\x12\x03\x12\x07\x12\x93\n\x12\f\x12\x0E\x12\x96\v\x12\x03" +
        "\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03" +
        "\x16\x03\x17\x03\x17\x03\x18\x03\x18\x02\x02\x02\x19\x03\x02\x03\x05\x02" +
        "\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\x02\x0F\x02\x02\x11\x02\x02" +
        "\x13\x02\x02\x15\x02\x02\x17\x02\b\x19\x02\t\x1B\x02\n\x1D\x02\v\x1F\x02" +
        "\x02!\x02\f#\x02\r%\x02\x0E\'\x02\x0F)\x02\x10+\x02\x11-\x02\x12/\x02" +
        "\x13\x03\x02\t\x03\x02C\\\x03\x02c|\x03\x022;\x04\x02//aa\x04\x02$$^^" +
        "\x05\x02\v\r\x0F\x0F\"\"\x04\x02\f\f\x0F\x0F\x02\xAD\x02\x03\x03\x02\x02" +
        "\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02" +
        "\x02\x02\v\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
        "\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02!\x03\x02\x02" +
        "\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02" +
        ")\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02" +
        "\x02\x02\x031\x03\x02\x02\x02\x055\x03\x02\x02\x02\x079\x03\x02\x02\x02" +
        "\t<\x03\x02\x02\x02\vC\x03\x02\x02\x02\rJ\x03\x02\x02\x02\x0FL\x03\x02" +
        "\x02\x02\x11N\x03\x02\x02\x02\x13R\x03\x02\x02\x02\x15X\x03\x02\x02\x02" +
        "\x17Z\x03\x02\x02\x02\x19a\x03\x02\x02\x02\x1Bn\x03\x02\x02\x02\x1Dq\x03" +
        "\x02\x02\x02\x1F\x83\x03\x02\x02\x02!\x8C\x03\x02\x02\x02#\x90\x03\x02" +
        "\x02\x02%\x99\x03\x02\x02\x02\'\x9B\x03\x02\x02\x02)\x9D\x03\x02\x02\x02" +
        "+\x9F\x03\x02\x02\x02-\xA1\x03\x02\x02\x02/\xA3\x03\x02\x02\x0212\x07" +
        "p\x02\x0223\x07q\x02\x0234\x07v\x02\x024\x04\x03\x02\x02\x0256\x07c\x02" +
        "\x0267\x07p\x02\x0278\x07f\x02\x028\x06\x03\x02\x02\x029:\x07q\x02\x02" +
        ":;\x07t\x02\x02;\b\x03\x02\x02\x02<=\x07h\x02\x02=>\x07q\x02\x02>?\x07" +
        "t\x02\x02?@\x07c\x02\x02@A\x07n\x02\x02AB\x07n\x02\x02B\n\x03\x02\x02" +
        "\x02CD\x07g\x02\x02DE\x07z\x02\x02EF\x07k\x02\x02FG\x07u\x02\x02GH\x07" +
        "v\x02\x02HI\x07u\x02\x02I\f\x03\x02\x02\x02JK\t\x02\x02\x02K\x0E\x03\x02" +
        "\x02\x02LM\t\x03\x02\x02M\x10\x03\x02\x02\x02NO\t\x04\x02\x02O\x12\x03" +
        "\x02\x02\x02PS\x05\r\x07\x02QS\x05\x0F\b\x02RP\x03\x02\x02\x02RQ\x03\x02" +
        "\x02\x02S\x14\x03\x02\x02\x02TY\x05\r\x07\x02UY\x05\x0F\b\x02VY\x05\x11" +
        "\t\x02WY\t\x05\x02\x02XT\x03\x02\x02\x02XU\x03\x02\x02\x02XV\x03\x02\x02" +
        "\x02XW\x03\x02\x02\x02Y\x16\x03\x02\x02\x02Z^\x05\x13\n\x02[]\x05\x15" +
        "\v\x02\\[\x03\x02\x02\x02]`\x03\x02\x02\x02^\\\x03\x02\x02\x02^_\x03\x02" +
        "\x02\x02_\x18\x03\x02\x02\x02`^\x03\x02\x02\x02ae\x07$\x02\x02bd\n\x06" +
        "\x02\x02cb\x03\x02\x02\x02dg\x03\x02\x02\x02ec\x03\x02\x02\x02ef\x03\x02" +
        "\x02\x02fh\x03\x02\x02\x02ge\x03\x02\x02\x02hi\x07$\x02\x02i\x1A\x03\x02" +
        "\x02\x02jk\x07A\x02\x02ko\x05\x17\f\x02lm\x07B\x02\x02mo\x05\x17\f\x02" +
        "nj\x03\x02\x02\x02nl\x03\x02\x02\x02o\x1C\x03\x02\x02\x02pr\x07/\x02\x02" +
        "qp\x03\x02\x02\x02qr\x03\x02\x02\x02rt\x03\x02\x02\x02su\x05\x11\t\x02" +
        "ts\x03\x02\x02\x02uv\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02" +
        "w~\x03\x02\x02\x02xz\x070\x02\x02y{\x05\x11\t\x02zy\x03\x02\x02\x02{|" +
        "\x03\x02\x02\x02|z\x03\x02\x02\x02|}\x03\x02\x02\x02}\x7F\x03\x02\x02" +
        "\x02~x\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F\x81\x03\x02\x02\x02\x80" +
        "\x82\x05\x1F\x10\x02\x81\x80\x03\x02\x02\x02\x81\x82\x03\x02\x02\x02\x82" +
        "\x1E\x03\x02\x02\x02\x83\x85\x07g\x02\x02\x84\x86\x07/\x02\x02\x85\x84" +
        "\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x88\x03\x02\x02\x02\x87\x89" +
        "\x05\x11\t\x02\x88\x87\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x8A\x88" +
        "\x03\x02\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B \x03\x02\x02\x02\x8C\x8D" +
        "\t\x07\x02\x02\x8D\x8E\x03\x02\x02\x02\x8E\x8F\b\x11\x02\x02\x8F\"\x03" +
        "\x02\x02\x02\x90\x94\x07=\x02\x02\x91\x93\n\b\x02\x02\x92\x91\x03\x02" +
        "\x02\x02\x93\x96\x03\x02\x02\x02\x94\x92\x03\x02\x02\x02\x94\x95\x03\x02" +
        "\x02\x02\x95\x97\x03\x02\x02\x02\x96\x94\x03\x02\x02\x02\x97\x98\b\x12" +
        "\x02\x02\x98$\x03\x02\x02\x02\x99\x9A\x07*\x02\x02\x9A&\x03\x02\x02\x02" +
        "\x9B\x9C\x07+\x02\x02\x9C(\x03\x02\x02\x02\x9D\x9E\x07?\x02\x02\x9E*\x03" +
        "\x02\x02\x02\x9F\xA0\x07@\x02\x02\xA0,\x03\x02\x02\x02\xA1\xA2\x07>\x02" +
        "\x02\xA2.\x03\x02\x02\x02\xA3\xA4\x07A\x02\x02\xA40\x03\x02\x02\x02\x10" +
        "\x02RX^enqv|~\x81\x85\x8A\x94\x03\b\x02\x02";
    return SUOKIFLexer;
}(Lexer_1.Lexer));
exports.SUOKIFLexer = SUOKIFLexer;
